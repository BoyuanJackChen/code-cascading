[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1 is None:\n        return None\n    if test_tup2 is None:\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for index, element1 in enumerate(test_tup1):\n        for index, element2 in enumerate(test_tup2):\n            if element1 == element2:\n                return element1, index\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                shared_elements.append(i)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    ls1 = []\n    ls2 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            ls1.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if test_tup2[i] in ls1:\n            ls2.append(test_tup2[i])\n    return ls2\n    \ndef test_list_similar_elements():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['b', 'd', 'c']\n    \ndef test_list_similar_elements_1():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['a', 'b']\n    \ndef test_list_similar_elements_2():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['a', 'b', 'd']\n    \ndef test_list_similar_elements_3():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['a', 'c']\n    \ndef test_list_similar_elements_4():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['b', 'd', 'f']\n    \ndef test_list_similar_elements_5():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['c']\n    \ndef test_list_similar_elements_6():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['a', 'e', 'd']\n    \ndef test_list_similar_elements_7():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['a']\n    \ndef test_list_similar_elements_8():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['a']\n    \ndef test_list_similar_elements_9():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['a']\n    \ndef test_list_similar_elements_10():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['b']\n    \ndef test_list_similar_elements_11():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['d']\n    \ndef test_list_similar_elements_12():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['c']\n    \ndef test_list_similar_elements_13():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['b']\n    \ndef test_list_similar_elements_14():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['d']\n    \ndef test_list_similar_elements_15():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['f']\n    \ndef test_list_similar_elements_16():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['e']\n    \ndef test_list_similar_elements_17():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['b']\n    \ndef test_list_similar_elements_18():\n    '''\n    Function to test the function.\n    '''\n    test_tup1 = ['a', 'b', 'c']\n    test_tup2 = ['d', 'e', 'f']\n    test_list = similar_elements(test_tup1, test_tup2)\n    assert test_list == ['c']\n    \nde"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [item for item in test_tup1 if item in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: complete this function\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # HINT: You can solve this task with two pointers. Make sure you have the same number of indexes.\n    # This is the problem.\n    \n    test_tup1.sort()\n    test_tup2.sort()\n    # Finding the length of both lists\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n    # Finding the starting index of each element in both lists\n    i1 = 0\n    i2 = 0\n    # This while loop iterates through each index and checks if it is present in both lists\n    while i1 < n1 and i2 < n2:\n        if test_tup1[i1] == test_tup2[i2]:\n            i1 = i1 + 1\n            i2 = i2 + 1\n        else:\n            break\n    return test_tup1[i1:i2]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Concatenate both lists into a single list\n    numbers = test_tup1 + test_tup2\n    # Create a new list from each of the numbers\n    test_tup = list(zip(*numbers))\n    # Sort both lists\n    test_tup.sort()\n    # Return a list of all the shared elements\n    return test_tup[1:]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = []\n    l2 = []\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print('\\nThe shared elements are: \\n{}'.format(test_tup1, test_tup2))\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==0:\n        return True\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n>=3:\n        for i in range(3,n):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n)) + 1,2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_leap_year(n):\n    '''\n    Write a python function to identify leap years.\n    '''\n    if n % 400 == 0 or n % 4 == 0 and n % 100!= 0:\n        return False\n    elif n % 4 == 0 and n % 100 == 0:\n        return True\n    elif n % 400 == 0 and n % 100!= 0:\n        return True\n    else:\n        return False\ndef is_palindrome(n):\n    '''\n    Write a python function to detect a palindrome.\n    '''\n    rev = 0\n    while(n > 0):\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return rev == n\ndef is_prime_re(n):\n    '''\n    Write a python function to check a number is prime or not.\n    '''\n    if is_prime(n) == True:\n        return True\n    else:\n        return False\ndef prime_factor(n):\n    '''\n    Write a python function to find a prime factor.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\ndef prime_factors(n):\n    '''\n    Write a python function to find a prime number which is a factor of n.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            print(i)\n            return False\n        i += 1\n    return True\ndef is_prime_array(arr):\n    '''\n    Write a python function to check if a array contains a prime number.\n    '''\n    for i in arr:\n        if is_prime(i) == True:\n            return False\n    return True\ndef prime_factors_array(arr):\n    '''\n    Write a python function to find a prime number which is a factor of a given array.\n    '''\n    for i in arr:\n        if is_prime(i) == True:\n            return False\n    return True\ndef primes_below_limit(limit):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    def is_prime(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    def is_prime_array(arr):\n        for i in range(len(arr)):\n            if is_prime(arr[i]) == True:\n                return False\n        return True\n    def primes_below_limit_array(arr):\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                continue\n            for j in range(i + 1, len(arr)):\n                if arr[j] % 2 == 0:\n                    continue\n                if arr[i] + arr[j] == limit:\n                    return False\n        return True\n    primes = []\n    for i in range(3, int(math.sqrt(limit)) + 1, 2):\n        if is_prime(i) == True:\n            primes.append(i)\n    if len(primes) == 0:\n        return True\n    else:\n        return False\ndef prime_factors_array_iterator(arr):\n    '''\n    Write a python function to find a prime number which is a factor of a given array.\n    '''\n    def is_prime_array(arr):\n        for i in range(len(arr)):\n            if is_prime(arr[i]) == True:\n                return False\n        return True\n    def primes_below_limit_array(arr):\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                continue\n            for j in range(i + 1, len(arr)):\n                if arr[j] % 2 == 0:\n                    continue\n                if arr[i] + arr[j] == limit:\n                    return False\n        return True\n    primes = []\n    for i in range(3, int(math.sqrt(limit)) + 1, 2):\n        if is_prime(i) == True:\n            primes.append(i)\n    if len(primes) == 0:\n        return True\n    else:\n        return False\ndef prime_factors_array_re(arr):\n    '''\n    Write a python function to find a prime number which is a factor of a given array.\n    '''\n    def is_prime_array(arr):\n        for i in range(len(arr)):\n            if is_prime(arr[i]) == True:\n                return False\n        return True\n    def primes_below_limit_array(arr):\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                continue\n            for j in range(i + 1, len(arr)):\n                if arr[j] % 2 == 0:\n                    continue\n                if arr[i] + arr[j] == limit:\n                    return False\n        return True\n    primes = []\n    for i in range(3, int(math.sqrt(limit)) + 1, 2):\n        if is_prime(i) == True:\n            primes.append(i)\n    if len(primes) == 0:\n        return True\n    else:\n        return False\ndef prime_factors_array_re_iterator(arr):\n    '''\n    Write a python function to find a prime number which is a factor of a given array.\n    '''\n    def is_prime_array(arr):\n        for i in range(len(arr)):\n            if is_prime(arr[i]) == True:\n                return False\n        return True\n    def primes_below_limit_array(arr):\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0:\n                continue\n            for j in range(i + 1, len(arr)):\n                if arr[j] % 2 == 0:\n                    continue\n                if arr[i] + arr[j] == limit:\n                    return False\n        return True\n    primes = []\n    for i in range(3, int(math.sqrt(limit)) + 1, 2):\n        if is_prime(i) == True:\n            primes.append(i)\n    if len(primes) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # your code goes here\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    isprime = True\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    elif n > 1 and n % 3 == 0:\n        isprime = False\n    return isprime\ndef isprime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    isprime = True\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n > 1 and n % 3 == 0:\n        isprime = False\n    return isprime\ndef modexp(n, p, q):\n    '''\n    Modular exponentiation with Python.\n    '''\n    result = 1\n    while n > 0:\n        if n & 1 == 1:\n            result = (result * p) % q\n        if n & 1 == 0:\n            result = (result * q) % q\n        n >>= 1\n    return result\ndef sieve(n):\n    '''\n    Generates a n-th prime and returns a list with the prime numbers.\n    '''\n    # list of all primes less than n\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef is_odd(n):\n    '''\n    Returns True if the number is odd.\n    '''\n    return n % 2 == 1\ndef is_even(n):\n    '''\n    Returns True if the number is even.\n    '''\n    return n % 2 == 0\ndef f(x, y):\n    '''\n    Return the value of the (x-y)^th square root.\n    '''\n    return math.sqrt(x*x + y*y)\ndef l(x, y):\n    '''\n    Return the value of the (x-y)^th square root.\n    '''\n    return x**2 + y**2\ndef GCD(a, b):\n    '''\n    Returns the greatest common denominator of a and b.\n    '''\n    while b!= 0:\n        a, b = b, a%b\n    return a\ndef LCM(a, b):\n    '''\n    Returns the lowest common multiple of a and b.\n    '''\n    return int(GCD(a, b))\ndef LCM_K(a, b):\n    '''\n    Returns the lowest common multiple of a and b.\n    '''\n    return int(LCM(a, b) * (-1))\ndef GCD_K(a, b):\n    '''\n    Returns the greatest common denominator of a and b.\n    '''\n    return int(GCD(a, b))\ndef LCM_K_mod(a, b):\n    '''\n    Returns the lowest common multiple of a and b.\n    '''\n    return int(LCM_K(a, b) * (-1))\ndef is_prime(n):\n    '''\n    Returns True if n is a prime number.\n    '''\n    return is_prime(n - 1) and is_prime(n - 2)\ndef modexp_small(x, y, p, q):\n    '''\n    Modular exponentiation using the smallest possible\n    proper value of x and y.\n    '''\n    return modexp(x, p, q) * modexp(y, p, q)\ndef is_prime_small(x):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_small(x - 1) and is_prime_small(x - 2)\ndef is_prime_small_mod(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_small_mod(x, y - 1) and is_prime_small_mod(x, y)\ndef is_prime_small_mod_small(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_small_mod_small(x, y - 1) and is_prime_small_mod(x, y)\ndef is_prime_small_mod_small_mod(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_small_mod_small(x, y - 1) and is_prime_small_mod(x, y)\ndef modexp_int(x, y, p):\n    '''\n    Modular exponentiation using the exponent p.\n    '''\n    return modexp(x, p, y) * modexp(y, p, x)\ndef is_prime_int(x):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int(x - 1) and is_prime_int(x - 2)\ndef is_prime_int_mod(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod(x, y - 1) and is_prime_int_mod(x, y)\ndef is_prime_int_mod_small(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod_small(x, y - 1) and is_prime_int_mod(x, y)\ndef is_prime_int_mod_small_mod(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod_small(x, y - 1) and is_prime_int_mod(x, y)\ndef modexp_int_mod(x, y, p):\n    '''\n    Modular exponentiation using the exponent p.\n    '''\n    return modexp(x, p, y) * modexp(y, p, x)\ndef is_prime_int_mod_int(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod_int(x, y - 1) and is_prime_int_mod(x, y)\ndef is_prime_int_mod_small(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod_small(x, y - 1) and is_prime_int_mod(x, y)\ndef is_prime_int_mod_small_mod(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod_small(x, y - 1) and is_prime_int_mod(x, y)\ndef modexp_int_mod_small(x, y, p):\n    '''\n    Modular exponentiation using the exponent p.\n    '''\n    return modexp(x, p, y) * modexp(y, p, x)\ndef is_prime_int_mod_small_mod(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod_small_mod(x, y - 1) and is_prime_int_mod(x, y)\ndef is_prime_int_mod_small_mod_int(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_mod_small_mod(x, y - 1) and is_prime_int_mod(x, y)\ndef modexp_int_small(x, y, p):\n    '''\n    Modular exponentiation using the exponent p.\n    '''\n    return modexp(x, p, y) * modexp(y, p, x)\ndef is_prime_int_small_mod(x, y):\n    '''\n    Returns True if x is a prime number.\n    '''\n    return is_prime_int_small_mod(x, y - 1) and is_prime_int_small_mod(x, y)\ndef is_prime_int_small_mod_small(x, y):\n    '''\n    Returns Tru"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    isprime=True\n    for i in range(2,n):\n        if n%i==0:\n            isprime=False\n    if isprime==True:\n        return isprime\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # checking for prime number or not\n    if n == 1:\n        return False\n    elif n < 2:\n        return False\n    # checking for multiples\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums,reverse=True)\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    return sorted(nums, reverse=False)\ndef heap_queue_reverse(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in reverse order.\n    '''\n    return sorted(nums, reverse=True)\ndef heap_queue_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums, reverse=True)\ndef heap_queue_sift(nums,n):\n    '''\n    Use heapq to sort a list.\n    '''\n    nums.sort()\ndef heap_queue_sift_rev(nums,n):\n    '''\n    Use heapq to sort a list.\n    '''\n    nums.sort(reverse=True)\ndef heap_queue_sift_max(nums,n):\n    '''\n    Use heapq to sort a list.\n    '''\n    nums.sort(reverse=False)\ndef heap_queue_sift_min(nums,n):\n    '''\n    Use heapq to sort a list.\n    '''\n    nums.sort(reverse=True)\ndef heap_queue_heap_sort(nums,n):\n    '''\n    Use heapq to sort a list.\n    '''\n    def heap_sort(nums, end=None):\n        '''\n        Use heapq to sort a list.\n        '''\n        if end is not None:\n            pivot = end\n        else:\n            pivot = 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def partition_quicksort(sorted_arr, left, right):\n        '''\n        Partition the given array into two sub-arrays.\n        '''\n        if left < right:\n            mid = left + (right - left) // 2\n            pivot = nums[mid]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # \ud799\uc744 \uc0ac\uc6a9\ud574 \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_n = hq.nlargest(n, nums)\n    print(\"\\n\\n\\n\\n\\n\\n\\n\")\n    print(largest_n)\n    print(\"\\n\\n\\n\\n\\n\\n\\n\")\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # initialize the stack\n    # as the input, append the elements in the stack\n    # as the output, if there are more elements than the stack, the output is appended\n    # to the stack, so the stack will contain the last element and the elements in the stack will be the first element\n    # so we will push the elements to the stack in descending order\n    # so the stack will be in the form of [4,5,3,2,1]\n    stack = []\n    for num in nums:\n        heq.heappush(stack,num)\n    # now pop the last element to find the n largest elements\n    # we will now pop the top element and remove it from the stack, as the element is removed from the stack, the stack will now be empty\n    # so we will return the top element\n    result = []\n    while stack:\n        result.append(heq.heappop(stack))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    return heap\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to return the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0 or len(nums) <= 0:\n        return None\n    hq.heapify(nums)\n    i = 0\n    while i!= len(nums):\n        if i == len(nums) - 1:\n            break\n        curr = nums[i]\n        if nums[i+1] < curr:\n            nums[i] = nums[i+1]\n            nums[i+1] = curr\n            i += 1\n        else:\n            i += 1\n    if i!= len(nums):\n        return None\n    return nums[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Sorting in descending order\n    nums.sort(reverse = True)\n    #return nums[0]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    heapq.heapify(max_heap)\n    for i in nums:\n        heapq.heappush(max_heap,i)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    return nums[n-1:]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if x & 1:\n            return False\n        x >>= 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x % 2 == 1:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # write your code here\n    if x == 0:\n        return True\n    elif x == 1:\n        return False\n    else:\n        x=x-2\n        if (x%2!= 0) :\n            return False\n        else:\n            return is_Power_Of_Two(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & x -1)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & 1)!= 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Initialize result variable\n    result = False\n    #Create a 2-d array to store the difference\n    diff = [0]*(x)\n    #Loop over every position and store the difference\n    for i in range(x):\n        diff[i] = x - i - 1\n    #Iterate through the array and compare each bit with each other bit\n    for i in range(x):\n        for j in range(x):\n            #If bit j is less than bit i\n            if (j < i):\n                #If the difference is less than the threshold, it is a power of 2\n                if diff[i] < diff[j]:\n                    result = True\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #number = int(input(\"Enter the number to check the power of two: \"))\n    #x = number\n    #y = number\n    #if x > y:\n    #    print(\"{} is a power of two\".format(number))\n    #elif x == y:\n    #    print(\"{} is a power of two\".format(number))\n    #else:\n    #    print(\"{} is not a power of two\".format(number))\n    #num = 0\n    #x = 1\n    #y = 0\n    #while x <= y:\n    #    if x & y == 0:\n    #        print(x)\n    #    x = x + 1\n    #    y = y + 1\n    #print(\"{} is a power of two\".format(num))\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def isPowerOfTwo(x):\n        if x == 2:\n            return True\n        else:\n            if x % 2 == 0:\n                return False\n            else:\n                return isPowerOfTwo(x / 2)\n    return isPowerOfTwo(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #your code here\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x<2:\n        return True\n    else:\n        if x%2==1:\n            return False\n        else:\n            return is_Power_Of_Two(x//2)\n        "
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # template = '.*?[aeiou].*'\n    # re_result = re.findall(template, text)\n    # print(re_result)\n    # for r in re_result:\n    #     print(r)\n    word = \"\"\n    for word in text:\n        if len(word) < 4:\n            word = word + \" \"\n    return word.strip()\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    no_whitespaces = re.sub(r'\\s+','', text)\n    for word in no_whitespaces.split():\n        if len(word) >= 4:\n            print(f\"Word found: {word}\")\n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Initialize variables\n    word_list = []\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    characters = re.findall(r'\\w+', text)\n    for char in characters:\n        if len(char) > 4:\n            print(char)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    char_long = {}\n    for i in range(len(text)):\n        for j in text[i]:\n            if len(j) >= 4:\n                res.append(text[i])\n    for i in res:\n        if not char_long.get(i):\n            char_long[i] = 1\n        else:\n            char_long[i] += 1\n    for k in char_long:\n        if char_long[k] > 1:\n            print(k + \": \" + str(char_long[k]))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"(?:[^\\S\\n]+|\\n[^\\S\\n]+)+\"\n    return re.findall(pattern, text)\ndef remove_punct(text):\n    '''\n    Write a function to remove punctuations.\n    '''\n    pattern = \"[^\\w\\s]'|\\w*[^\\w\\s]'|\\w*\\,\\w*]\"\n    return re.sub(pattern,'', text)\ndef lowercase(text):\n    '''\n    Write a function to lowercase the text.\n    '''\n    return text.lower()\ndef lemmatize(text):\n    '''\n    Write a function to lemmatize the text.\n    '''\n    return lemmatizer.lemmatize(text)\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stop words.\n    '''\n    return \" \".join([word for word in text.split() if word not in stopwords.words('english')])\ndef remove_urls(text):\n    '''\n    Write a function to remove URLs.\n    '''\n    return re.sub(\"(?:www\\.)?[a-z]*\\.[a-z]{2,}\", \" \", text)\ndef remove_number(text):\n    '''\n    Write a function to remove numbers.\n    '''\n    return re.sub(\"[0-9]+\", \"\", text)\ndef remove_whitespace(text):\n    '''\n    Write a function to remove whitespace.\n    '''\n    return re.sub(\"\\s+\", \" \", text)\ndef remove_symbols(text):\n    '''\n    Write a function to remove symbols.\n    '''\n    return re.sub(\"[^\\w\\s'\\-\\.\\_]\", \" \", text)\ndef remove_emails(text):\n    '''\n    Write a function to remove emails.\n    '''\n    pattern = r\"^[a-z0-9\\.\\-+_]+@[a-z0-9\\-\\_]+\\.[a-z]{2,}$\"\n    return re.sub(pattern, \"\", text)\ndef remove_personal_notes(text):\n    '''\n    Write a function to remove personal notes.\n    '''\n    pattern = r\"[^\\w\\s]'|\\w*[^\\w\\s]'|\\w*\\,\\w*]\"\n    return re.sub(pattern, \" \", text)\ndef remove_emails_and_personal_notes(text):\n    '''\n    Write a function to remove emails and personal notes.\n    '''\n    pattern = r\"[^\\w\\s'\\-\\.\\_]|[a-z0-9\\.\\-+_]+@[a-z0-9\\-\\_]+\\.[a-z]{2,}$\"\n    return re.sub(pattern, \" \", text)\ndef remove_special_char(text):\n    '''\n    Write a function to remove special characters.\n    '''\n    return re.sub(\"[^\\w\\s'\\-\\.\\_]+\", \" \", text)\ndef remove_emails_and_special_char(text):\n    '''\n    Write a function to remove emails and special characters.\n    '''\n    pattern = r\"[^\\w\\s'\\-\\.\\_]+@[a-z0-9\\-\\_]+\\.[a-z]{2,}$\"\n    return re.sub(pattern, \" \", text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    lens = 0\n    for i in text:\n        if len(i) >= 4:\n            lens += 1\n    return lens\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9 \\n\\.']')\n    result = []\n    for c in text:\n        if len(pattern.findall(c)) >= 4:\n            result.append(c)\n    return result\ndef find_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters in a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9 \\n\\.']')\n    result = []\n    for c in text:\n        if len(pattern.findall(c)) >= 4:\n            result.append(c)\n    return result\ndef find_all_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters in a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9 \\n\\.']')\n    result = []\n    for c in text:\n        if len(pattern.findall(c)) >= 4:\n            result.append(c)\n    return result\ndef find_all_words_1(text):\n    '''\n    Write a function to find all words which are at least 4 characters in a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9 \\n\\.']')\n    result = []\n    for c in text:\n        if len(pattern.findall(c)) >= 4:\n            result.append(c)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_text = re.findall('\\w+', text)\n    return long_text\ndef find_end_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long end with all the letters.\n    '''\n    long_text = re.findall('[a-zA-Z0-9]*$', text)\n    return long_text\ndef find_consecutive(text):\n    '''\n    Write a function to find all words which are at least 4 characters long but are not consecutive.\n    '''\n    long_text = re.findall('[a-zA-Z0-9]*$', text)\n    return long_text\ndef find_word(text):\n    '''\n    Write a function to find words in a given text that contain at least 2 letters.\n    '''\n    long_text = re.findall('[a-zA-Z0-9]*', text)\n    return long_text\ndef delete_char(text, char):\n    '''\n    Write a function to delete a single character from a given string.\n    '''\n    text = text.replace(char, '')\n    return text\ndef number_of_words(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    text = re.findall('\\w+', text)\n    return len(text)\ndef number_of_chars(text):\n    '''\n    Write a function to count the number of characters in a given text.\n    '''\n    text = re.findall('\\w+', text)\n    return len(text)\ndef number_of_end_chars(text):\n    '''\n    Write a function to count the number of characters in a given text.\n    '''\n    text = re.findall('\\w+$', text)\n    return len(text)\ndef number_of_consecutive(text):\n    '''\n    Write a function to count the number of consecutive words in a given text.\n    '''\n    text = re.findall('\\w+$', text)\n    return len(text)\ndef number_of_words_in_a_sentence(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    text = re.findall('\\w+', text)\n    return len(text)\ndef replace_space(text):\n    '''\n    Write a function to replace all spaces with a single space.\n    '''\n    text = re.sub(' ','', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation marks in a given text.\n    '''\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_number(text):\n    '''\n    Write a function to remove all non-numeric characters from a given text.\n    '''\n    text = re.sub('[0-9]','', text)\n    return text\ndef remove_all_extra_space(text):\n    '''\n    Write a function to remove all spaces from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_extra_space_and_punctuation(text):\n    '''\n    Write a function to remove all spaces from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all spaces from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_multiple_spaces_and_punctuation(text):\n    '''\n    Write a function to remove all spaces from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_two_spaces_and_punctuation(text):\n    '''\n    Write a function to remove all spaces from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_two_spaces(text):\n    '''\n    Write a function to remove all spaces from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_two_spaces_and_punctuation(text):\n    '''\n    Write a function to remove all spaces from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_all_extra_spaces(text):\n    '''\n    Write a function to remove all spaces from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\ndef remove_all_extra_spaces_and_punctuation(text):\n    '''\n    Write a function to remove all spaces from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_all_extra_spaces_with_punctuation(text):\n    '''\n    Write a function to remove all spaces from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    return text\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from a given text.\n    '''\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    text = re.sub('[\\s+]','', text)\n    return text\ndef remove_special_characters_and_punctuation(text):\n    '''\n    Write a function to remove all special characters from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    text = re.sub('[\\s+]','', text)\n    return text\ndef remove_all_special_characters(text):\n    '''\n    Write a function to remove all special characters from a given text.\n    '''\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    text = re.sub('[\\s+]','', text)\n    return text\ndef remove_all_special_characters_and_punctuation(text):\n    '''\n    Write a function to remove all special characters from a given text and punctuation marks from a given text.\n    '''\n    text = re.sub('[^a-zA-Z0-9]','', text)\n    text = re.sub('[\\s+]','', text)\n    return text\ndef remove_dots(text):\n    '''\n    Write a function to remove all dots from a given text.\n    '''\n    text = re.sub('\\.', '', text)\n    return text\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a given text.\n    '''\n    text = re.sub('\\s+', '', text)\n    return text\ndef remove_spaces_and_punctuation(text):\n    '''\n    Write a function to remove all spaces from a given text an"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)-1):\n        if text[i]==text[i+1] and len(text[i])>4:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sum_square = 0\n    for i in nums:\n        sum_square += i * i\n    return sum_square\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums = list(map(lambda x:x**2,nums))\n    return list(map(lambda x:x**2,nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**2)\n    return new_list\n    pass\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num*num)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums_squared = []\n    for number in nums:\n        nums_squared.append(number**2)\n    return nums_squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for i in nums:\n        squared.append(i**2)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    def square(num):\n        return num*num\n    \n    result = [square(num) for num in nums]\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums if x**2 > 0]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num**2)\n    return squared\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if(len(str)<=1):\n        return 1\n    elif(len(str)==2):\n        if(str[0]==str[1]):\n            return 1\n        else:\n            return 0\n    else:\n        k = 0\n        i = 1\n        while(i<len(str)):\n            if(str[i]==str[i-1]):\n                k += 1\n                i+=1\n            else:\n                if(k>0):\n                    k-=1\n                else:\n                    i+=1\n                    k=1\n        if(k>0):\n            return 0\n        else:\n            return len(str)-1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    # find minimum rotation for string\n    for i in range(len(str)):\n        if str[i] == str[i-1]:\n            rotations += 1\n    # if rotated string is greater than 1, return that rotations\n    if rotations > 0:\n        return rotations\n    # if rotated string is equal to size of the string\n    else:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    num_rotations = 0\n    for i in range(len(str)):\n        rotations = find_rotations_in_string(str, i)\n        if rotations > num_rotations:\n            num_rotations = rotations\n    return num_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    rotations = 0\n    if (l < 5):\n        rotations = l\n        return rotations\n    \n    # print(\"There are %d rotations needed to get the string %s\" %(rotations,str))\n    \n    # A=5\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_rotation=0\n    for i in range(len(str)):\n        if str[i] in 'aeiou':\n            str_rotation+=1\n    if(str_rotation>0):\n        print(str_rotation)\n    else:\n        print('Not rotated')\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def compare(a, b):\n        if a < b:\n            return -1\n        elif a > b:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    temp = []\n    for x in str:\n        if x not in temp:\n            temp.append(x)\n    temp.sort()\n    count = 0\n    count_ = 1\n    for x in range(len(temp)):\n        count += count_\n        count_ = 1\n        for i in range(x+1, len(temp)):\n            if temp[i] == temp[x]:\n                count += 1\n                count_ += 1\n        if count > count_:\n            count = count_\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    rotations_dict = {'u': 'd', 'r': 'l', 'd': 'f', 'l': 'u', 'f': 'r', 'z': 'x'}\n    for char in str: \n        if char in rotations_dict: \n            rotations_dict[char] = rotations_dict[char] + 1\n            rotations = rotations + 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = []\n    for i in range(0,len(str) - 2):\n        rotations.append(str[i: i+2])\n    return len(set(rotations))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            rotations += 1\n        elif rotations > 0:\n            rotations -= 1\n    return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    pass \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)>0 and s.find(ch)>0: \n        return s.replace(ch, '') \n    else: \n        return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    first=s[0]\n    last=s[-1]\n    if first==ch:\n        s=s.replace(first,ch)\n        s=s.replace(last,ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch : \n        s = s[1:]\n    if s[-1] == ch : \n        s = s[:-1]\n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0 or len(s)<=2:\n        return s\n    if s[0]!=ch or s[-1]!=ch:\n        return s\n    return s[1:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return None\n    if s.find(ch) == 0:\n        s = s[1:] + s[:-1]\n    else:\n        s = s[1:] + s[:-1] + s[1:]\n    return s\n    \n    \ndef remove_nth_occ(s, n): \n    '''\n    Write a python function to remove the nth occurrence of a given character from the string.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return s\n    elif n == 1:\n        return remove_Occ(s,s[n-1])\n    else:\n        return remove_Occ(s,s[n-1] + remove_Occ(s,n-2))\n        \n    \ndef main():\n    print('\\n\\t\\t\\t\\t\\t\\t***     Welcome to the Remove Occurrences  ***\\n\\n')\n    print('\\t\\t\\t\\t\\t\\t*****  Welcome to the Remove Occurrences *****\\n\\n')\n    print('\\t\\t\\t\\t\\t\\t*************  Main Menu *************\\n')\n    print('\\t\\t\\t\\t\\t\\t1.Enter the string\\n')\n    print('\\t\\t\\t\\t\\t\\t2.Find the occurrence of a given character in the string\\n')\n    print('\\t\\t\\t\\t\\t3.Find the occurrence of a given character in the string\\n')\n    print('\\t\\t\\t\\t\\t4.Find the occurrence of a given character in the string\\n')\n    print('\\t\\t\\t\\t\\t5.Remove the nth occurrence of a given character from the string\\n')\n    print('\\t\\t\\t\\t\\t*******   Thanks for using the Remove Occurrences  *******\\n')\n    print('\\n\\t\\t\\t\\t\\t\\t\\t*****  Hope you had a good time\\n')\n    \n    \n    while True:\n        s = input('\\n\\t\\t\\t\\t\\t\\t\\tEnter the string to be search:')\n        ch = input('\\n\\t\\t\\t\\t\\t\\t\\tEnter the character:')\n        print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n        \n        if len(s) == 0:\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t')\n            print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1)\ns = 'hello how are you'\nprint(remove_Occ(s, 'o'))\nprint(s"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)-1):\n        if s[i]==ch:\n            s=s.replace(s[i],'')\n            s=s+s[0]\n        else:\n            continue\n    return s\n    \n    \ndef main():\n    print(\"The string to be processed is: \")\n    str_1=input()\n    print(\"The string after removing first and last occurrence of the given character is: \")\n    str_1=remove_Occ(str_1,ch)\n    print(str_1)\n    \n    print(\"The string after removing the last occurrence of the character: \")\n    str_2=remove_Occ(str_1,ch)\n    print(str_2)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    n = len(s)\n    if s[0] == ch and s[-1] == ch:\n        s.pop(0)\n        s.pop()\n        s = ''.join(s)\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch =='':\n        return '', ''\n    elif s.find(ch)!= -1: \n        first, last = s.find(ch), s.find(ch) + len(ch)\n        return s[:first], s[first+1:last]\n    elif s.find(ch) == -1:\n        return '', ''\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = sorted(M, key=lambda row: sum(row))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = sorted(M)\n    for row in rows:\n        row = sorted(row)\n    return rows\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows=[]\n    for i in range(0,len(M)):\n        sum_rows=0\n        for j in range(0,len(M[0])):\n            sum_rows += M[i][j]\n        rows.append(sum_rows)\n    rows.sort(reverse=True)\n    for i in range(0,len(M)):\n        for j in range(0,len(M[0])):\n            M[i][j] = rows[j]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    return sorted(row_sums, key=lambda num: num, reverse=True)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i] = [M[i][0] + M[i][1] + M[i][2] + M[i][3] for i in range(4)]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sum(M[i])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Return a sorted list.\n    # This function has a runtime of O(nlog(n))\n    # The runtime is only a good guess but we can improve it in the future.\n    # The runtime of this function is O(n)\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = [M[i][0] for i in range(len(M))]\n    total = sum(rows)\n    new_matrix = []\n    for i in range(len(rows)):\n        new_matrix.append([])\n        for j in range(len(rows)):\n            new_matrix[i].append(rows[j]/total)\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # TODO: Write your code here\n    s=[]\n    for i in range(M.__len__()):\n        m=0\n        for j in range(M[i].__len__()):\n            m+=M[i][j]\n        s.append(m)\n    i=0\n    while(i<M.__len__()):\n        i+=1\n        for j in range(M[i].__len__()):\n            s[j]=s[j]+M[i][j]\n    for i in range(M.__len__()):\n        M[i]=s[i]\n    return M\n    \ndef get_largest_matrix(M):\n    '''\n    Write a function to find the largest matrix in the given matrix.\n    '''\n    # TODO: Write your code here\n    res=M[0]\n    for i in range(M.__len__()):\n        for j in range(M[i].__len__()):\n            if(M[i][j]>res[j]):\n                res=M[i][j]\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if M[i][j] < M[i][j-1]:\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l=l\n    b=b\n    h=h\n    return l*h*b\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    from math import sqrt\n    l, b, h = float(l), float(b), float(h)\n    l2 = sqrt((l*h)/2)\n    b2 = sqrt((b*h)/2)\n    d = (b2 - l2)/(b2-l2)*(b-l)\n    r = sqrt(d**2 + h**2)\n    return(r**3)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * h) * (b ** 3) / 6\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    try: \n        if not (isinstance(l,int) or isinstance(l,float)) : \n            raise TypeError('l must be an int or float')\n        if not (isinstance(b,int) or isinstance(b,float)) : \n            raise TypeError('b must be an int or float')\n        if not (isinstance(h,int) or isinstance(h,float)) : \n            raise TypeError('h must be an int or float')\n        if l <= 0 or b <= 0 or h <= 0: \n            raise ValueError('l, b, and h must be positive numbers')\n    except (TypeError, ValueError) as e : \n        print(e) \n        return 0\n    # [optional] find a weight of the material\n    # \n    # try: \n    #     if not isinstance(mat_weight,float) or mat_weight < 0 : \n    #         raise ValueError('mat_weight must be a positive number')\n    # except ValueError as e : \n    #     print(e) \n    #     return 0\n    # try: \n    #     if not (isinstance(vol,int) or isinstance(vol,float)) : \n    #         raise TypeError('vol must be an int or float')\n    # except TypeError as e : \n    #     print(e) \n    #     return 0\n    # return (l*b*h)/(4*math.pi*(vol**2))\n    v = (l**2 + b**2 + h**2)/(4*math.pi*(vol**2))\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if l == h : \n        print('The volume is :',(l**3)*h/3)\n    else : \n        volume = 4*l*(b+h) \n        print('The volume of a triangle is :',volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    m = h*h\n    p = l*b\n    volume = p*m\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    t=math.sqrt(l**2+b**2+h**2)\n    V=4*math.pi*(t**3)/3\n    print(\"Volume of the triangle is\",V)\n    \ndef find_Area(l,b,h):\n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    a=math.sqrt((l*b)/2)\n    print(\"Area of the triangle is\",a)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = len(l)\n    b = len(b)\n    h = len(h)\n    v = (l*(l+1))/2\n    if h < b:\n        print(\"Volume of the triangle is \" + str(round(l*(h/2))))\n    else:\n        print(\"Volume of the triangle is \" + str(round(l*(h/2) + (b-l)/2)))\n    \n    \nif __name__ == \"__main__\" : \n    find_Volume(l,b,h)"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # The formula of volume is  <=> (3/4)x(h/2)^2\n    return l*(h/2)**2\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = l/2 \n    b = b/2 \n    h = h/2 \n    area = ((l*b)+(h*b))*(l*b)/4\n    volume = 4*l*b*h \n    return area/volume \n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) < 5:\n        return False\n    for i in range(len(text)-4):\n        if text[i:i+3] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not isinstance(text, str):\n        return False\n    for ch in text:\n        if ch.isalpha():\n            if ch.isupper() or ch.islower():\n                return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for i in range(len(text)):\n        if text[i].islower():\n            if text[i] == \"_\" and i < len(text)-1:\n                text[i] = text[i+1]\n                text[i+1] = \"_\"\n            if text[i] == \" \":\n                text[i] = text[i+1]\n                text[i+1] = \" \"\n            if text[i] == \"-\":\n                text[i] = text[i+1]\n                text[i+1] = \"-\"\n            if text[i] == \"_\":\n                text[i] = text[i+1]\n                text[i+1] = \"_\"\n        else:\n            text[i] = text[i].upper()\n    return text\ndef is_punctuation(char):\n    '''\n    Check if a given character is a punctuation character or not.\n    '''\n    if char == \" \" or char == \".\" or char == \",\" or char == \":\":\n        return True\n    elif char == \"'\" or char == \"\\\"\":\n        return True\n    elif char == \":\" or char == \"<\" or char == \">\":\n        return True\n    else:\n        return False\ndef whitespace(text):\n    '''\n    Check if a given text contains any whitespaces.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \" \"\n    return text\ndef whitespace_remover(text):\n    '''\n    Remove any whitespaces inside the text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef is_whitespace(char):\n    '''\n    Check if a given character is a whitespace character or not.\n    '''\n    if char == \" \" or char == \"\\n\" or char == \"\\t\" or char == \"\\r\":\n        return True\n    else:\n        return False\ndef whitespace_remover_whitespace(text):\n    '''\n    Remove any whitespaces inside the text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef words(text):\n    '''\n    Return a list of words in the given text.\n    '''\n    words = []\n    for i in range(len(text)):\n        if is_punctuation(text[i]):\n            text[i] = \"\"\n        if text[i].isalpha() or text[i] == \" \":\n            words.append(text[i])\n    return words\ndef pun_remover(text):\n    '''\n    Remove any punctuation from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef is_punctuation_remover(char):\n    '''\n    Check if a given character is a punctuation character or not.\n    '''\n    if char == \" \" or char == \"\\n\" or char == \"\\t\" or char == \"\\r\":\n        return True\n    else:\n        return False\ndef punctuation_remover(text):\n    '''\n    Remove any punctuation from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef is_space(char):\n    '''\n    Check if a given character is a space character or not.\n    '''\n    if char == \" \" or char == \"\\n\" or char == \"\\t\" or char == \"\\r\":\n        return True\n    else:\n        return False\ndef space_remover(text):\n    '''\n    Remove any space characters from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef normalize_space(text):\n    '''\n    Remove any space characters from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef is_number(char):\n    '''\n    Check if a given character is a number character or not.\n    '''\n    if char == \".\" or char == \",\" or char == \".\":\n        return True\n    else:\n        return False\ndef number_remover(text):\n    '''\n    Remove any number characters from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \".\":\n            text[i] = \"\"\n    return text\ndef is_comment(char):\n    '''\n    Check if a given character is a comment character or not.\n    '''\n    if char == \"#\" or char == \";\":\n        return True\n    else:\n        return False\ndef comment_remover(text):\n    '''\n    Remove any comment characters from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \"#\":\n            text[i] = \"\"\n    return text\ndef is_whitespace(char):\n    '''\n    Check if a given character is a whitespace character or not.\n    '''\n    if char == \" \" or char == \"\\n\" or char == \"\\t\" or char == \"\\r\":\n        return True\n    else:\n        return False\ndef whitespace_remover_whitespace(text):\n    '''\n    Remove any whitespaces inside the text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef punctuation_remover_whitespace(text):\n    '''\n    Remove any punctuation characters from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef is_number_remover(char):\n    '''\n    Check if a given character is a number character or not.\n    '''\n    if char == \".\" or char == \",\" or char == \".\":\n        return True\n    else:\n        return False\ndef number_remover_whitespace(text):\n    '''\n    Remove any number characters from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \".\":\n            text[i] = \"\"\n    return text\ndef is_abbreviation(char):\n    '''\n    Check if a given character is a abbreviation character or not.\n    '''\n    if char == \"-\" or char == \"-\" or char == \":\" or char == \".\" or char == \",\" or char == \".\":\n        return True\n    else:\n        return False\ndef abbreviation_remover(text):\n    '''\n    Remove any abbreviations from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \"-\" or text[i] == \".\" or text[i] == \":\" or text[i] == \",\" or text[i] == \".\":\n            text[i] = \"\"\n    return text\ndef is_abbreviation_remover(char):\n    '''\n    Check if a given character is a abbreviation character or not.\n    '''\n    if char == \"-\" or char == \".\" or char == \":\" or char == \".\" or char == \",\":\n        return True\n    else:\n        return False\ndef normalize_space_abbreviation(text):\n    '''\n    Remove any space characters from the given text.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text[i] = \"\"\n    return text\ndef is_abbreviation_remover_space(text):\n    '''\n    Remove any whitespaces inside the text.\n    '''\n    for i in range(len(text)):\n        if text[i] == "
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regexp = re.compile('[^a-zA-Z0-9_]')\n    res = regexp.findall(text)\n    if res:\n        return False\n    return True\n    \ndef text_uppercase_underscore(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    regexp = re.compile('[A-Z]')\n    res = regexp.findall(text)\n    if res:\n        return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    lower_pattern = re.compile(r'[a-z][A-Z]{2,}')\n    for word in lower_pattern.finditer(text):\n        print(word)\n        \n        if '_' in word.group():\n            return False\n    return True\n    \ntext = 'i am a__crazy_fun'\nprint(text_lowercase_underscore(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z][A-Z]')\n    match = pattern.findall(text)\n    return all(map(lambda m: bool(m[0]=='_' and m[1]=='_'), match))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r\"[a-zA-Z]\", text):\n        return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Note: this code is only for testing!\n    for i in text:\n        if i.islower():\n            return False\n    return True\n    \n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    str = text.lower()\n    for i in range(len(str)-1, -1, -1):\n        if re.search('[a-z]', str[i:])!= None and re.search('[A-Z]', str[i:])!= None:\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for s in re.findall(r'[A-Z]+', text):\n        if s in re.findall(r'[a-z]+', text):\n            text = text.replace(s, '_')\n            text = text.replace('_','')\n            break\n    return text == text.upper()\ndef check_regex(text):\n    '''\n    Write a function that takes in the text in text and check for a pattern that matches the regex expression.\n    The regex expression contains a colon - used to delimit a pattern and it can be anything. The colon can be followed by any number of characters, though the pattern must contain an explicit greedy match.\n    '''\n    if ':' in text:\n        if text.count(':') > 1:\n            pattern = re.compile(r'^([a-z0-9_]+)[:]([^:]]+)\\:([^:]+):?\\n')\n            print(pattern)\n        else:\n            pattern = re.compile(r'^([a-z0-9_]+)[:]([^:]]+)$')\n            print(pattern)\n    else:\n        pattern = re.compile(r'^([a-z0-9_]+)[:]([^:]]+)(.*)$')\n        print(pattern)\n    match = pattern.search(text)\n    return match is not None\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    if a < 4:\n        for i in range(0,a+1):\n            perimeter = perimeter + (a * i)\n        return perimeter\n    else:\n        for i in range(1,a-2):\n            perimeter = perimeter + (a * (i + 1))\n        perimeter = perimeter + (a * 2)\n        return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int or type(a)!= float:\n        raise TypeError('Argument must be an integer or a float')\n    if a == 0:\n        raise ZeroDivisionError('Cannot divide by zero')\n    return 2 * a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return(4 * (a**2))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # a=input(\"Please give me an integer: \")\n    return round(a*a,2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    \n    return a*(a+1)//2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    sides = math.sqrt(a)\n    return sum(range(int(sides), int(sides)+1))\n    \ndef triangle_perimeter(a, b, c):\n    '''\n    Write a function that returns the perimeter of a triangle given its base and height as input.\n    '''\n    import math\n    return (math.sqrt((a+b+c)/2)*3)/2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    for i in range(0, len(a)):\n        perimeter += i\n    return perimeter\n    \ndef main():\n    '''\n    First test\n    >>> main()\n    42\n    '''\n    print(square_perimeter([1,2,3,4,5,6,7,8,9,10]))\n    print(square_perimeter([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(square_perimeter([1,1,2,3,4,5,6,7,8,9,10]))\n    print(square_perimeter([2,3,4,5,6,7,8,9,10]))\n    print(square_perimeter([3,4,5,6,7,8,9,10]))\n    print(square_perimeter([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(square_perimeter([1,2,3,4,5,6,7,8,9,10]))\n    print(square_perimeter([1,1,2,3,4,5,6,7,8,9,10]))\n    print(square_perimeter([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(square_perimeter([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*len(a))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_side = a * a\n    square_perimeter = square_side * 4\n    return square_perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string[0:len(string) - 1]:\n            string = string[1:len(string) - 1]\n    return string.split(',')\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # if the first string is empty\n    if(len(string) == 0): \n        return []\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    # Remove spaces and tabs\n    string = string.replace(' ', '').replace('\\t', '').replace('\\n', '')\n    \n    # Return list\n    return list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string.split()]\n    # a = [\"b\", \"c\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    # return [a[i:i+2] for i in range(0, len(a), 2) if a[i:i+2] in a]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(set(string) - set(string.replace(string[0], '')))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Write your code here\n    list_string = []\n    for char in string:\n        if char in list_string:\n            list_string.remove(char)\n        else:\n            list_string.append(char)\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for char in string:\n        if char in res:\n            continue\n        else:\n            res.append(char)\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for c in string: \n        if c in new_list: \n            pass\n        else: \n            new_list.append(c)\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    s = []\n    for i in range(len(string)):\n        if string[i] in s:\n            pass\n        else:\n            s.append(string[i])\n    return l\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums.copy()\n    for i in range(0,len(array)):\n        array.append(array.pop(0))\n    for i in range(0,len(array)):\n        if array[i] in array:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # pass\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # test for array\n    for array in arraynums:\n        if arraynums.count(array) > 1:\n            return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    return(any(x in array for x in array))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Testing duplicate elements\")\n    for num in arraynums:\n        print(\"Element\",num)\n        print(\"Is\",check_duplicates(num))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    arraynums.sort()\n    print(arraynums)\n    for i in range(len(arraynums)):\n        if arraynums[i]!= i:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) == len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    dup = []\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums.copy()\n    dup = set()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert len(arraynums) == len(set(arraynums))\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [\n    ['Woodball', 'Woodball'],\n    ['Woodball', 'Woodball', 'Woodball'],\n    ['Woodball', 'Woodball', 'Woodball', 'Woodball'],\n    ['Woodball', 'Woodball', 'Woodball', 'Woodball'],\n    ['Woodball', 'Woodball', 'Woodball', 'Woodball', 'Woodball']]\n    return woodball.count(x) > 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return \"Woodball\"\n    elif x > 0:\n        return \"Woodball\"\n    elif x < 0:\n        return \"Woodball\"\n    else: \n        return \"Woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x<10:\n        return False\n    elif x%5==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<0:\n        print(\"Number must be positive\")\n        return -1\n    elif num==0:\n        print(\"Number can't be 0\")\n        return -1\n    elif num<2:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num>10:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num<10:\n        num=num*2\n        rev=0\n        while num>0:\n            rev=num%10\n            num=num//10\n        if rev==num:\n            print(\"Number is positive\")\n        else:\n            print(\"Number is negative\")\n    else:\n        print(\"Number can't be a positive integer\")\n        return -1\ndef exp(num):\n    '''\n    Write a python function to check if a given number is one less than twice its square.\n    '''\n    if num<0:\n        print(\"Number must be positive\")\n        return -1\n    elif num==0:\n        print(\"Number can't be 0\")\n        return -1\n    elif num<2:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num>10:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num<10:\n        num=num*2\n        rev=0\n        while num>0:\n            rev=num%10\n            num=num//10\n        if rev==num:\n            print(\"Number is positive\")\n        else:\n            print(\"Number is negative\")\n    else:\n        print(\"Number can't be a positive integer\")\n        return -1\ndef tri(num):\n    '''\n    Write a python function to check if a given number is one less than twice its cube.\n    '''\n    if num<0:\n        print(\"Number must be positive\")\n        return -1\n    elif num==0:\n        print(\"Number can't be 0\")\n        return -1\n    elif num<2:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num>10:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num<10:\n        num=num*3\n        rev=0\n        while num>0:\n            rev=num%10\n            num=num//10\n        if rev==num:\n            print(\"Number is positive\")\n        else:\n            print(\"Number is negative\")\n    else:\n        print(\"Number can't be a positive integer\")\n        return -1\ndef sup(num):\n    '''\n    Write a python function to check if a given number is one less than twice its sum of squares.\n    '''\n    if num<0:\n        print(\"Number must be positive\")\n        return -1\n    elif num==0:\n        print(\"Number can't be 0\")\n        return -1\n    elif num<2:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num>10:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num<10:\n        num=num*2\n        rev=0\n        while num>0:\n            rev=num%10\n            num=num//10\n        if rev==num:\n            print(\"Number is positive\")\n        else:\n            print(\"Number is negative\")\n    else:\n        print(\"Number can't be a positive integer\")\n        return -1\ndef fact(num):\n    '''\n    Write a python function to check if a given number is one less than twice its cube.\n    '''\n    if num<0:\n        print(\"Number must be positive\")\n        return -1\n    elif num==0:\n        print(\"Number can't be 0\")\n        return -1\n    elif num<2:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num>10:\n        print(\"Number must be a positive integer\")\n        return -1\n    elif num<10:\n        num=num*3\n        rev=0\n        while num>0:\n            rev=num%10\n            num=num//10\n        if rev==num:\n            print(\"Number is positive\")\n        else:\n            print(\"Number is negative\")\n    else:\n        print(\"Number can't be a positive integer\")\n        return -1\nnum=int(input(\"Enter a number to check if it is negative or positive: \"))\nprint(\"One digit is a positive number, and two digit is a negative number.\")\nprint(\"With one digit as the first and second digit as the third, the result is: \")\nprint(\"The result is: \", end=\"\")\nrev(num)\nprint(\"\\nWith two digit as the first and second digit as the third, the result is: \")\nprint(\"The result is: \", end=\"\")\ntri(num)\nprint(\"\\nWith three digit as the first and second digit as the third, the result is: \")\nprint(\"The result is: \", end=\"\")\nsup(num)\nprint(\"\\nWith four digit as the first and second digit as the third, the result is: \")\nprint(\"The result is: \", end=\"\")\nfact(num)"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num < 2:\n        return False\n    if num % 2 == 0:\n        return True\n    return rev(num-1)\nprint(rev(5))\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num % 10\n    if (num % 2) == 0:\n        return (num * 10)\n    else:\n        return (num * 10) + 1\n    \n    \n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        digit = num % 10\n        rev = rev * 10 + digit\n        num = num // 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    list=[0,0]\n    rev_num=num\n    if(rev_num>=0 and rev_num<=9):\n        for i in range(0,len(num),1):\n            list[i]=num[i]\n        for i in range(len(num)-1,0,-1):\n            list[i]=num[i]\n        if(list[0]==0):\n            rev_num=num\n        else:\n            rev_num=list[0]\n            for i in range(0,len(num),1):\n                list[i]=num[i]\n            for i in range(len(num)-1,0,-1):\n                list[i]=num[i]\n    else:\n        print(\"Enter valid input\")\n    return rev_num\ndef main():\n    num=input(\"Enter the number to check : \")\n    rev_num=rev(num)\n    print(\"The reverse of {} is : {}\".format(num,rev_num))\nmain()\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        print('Error: negative number')\n    else:\n        revnum = int(str(num)[::-1])\n        if revnum == 0:\n            return 0\n        elif revnum < num:\n            print('Error: number is less than 0')\n        elif revnum > num:\n            print('Error: number is greater than the number')\n        else:\n            return 1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = num\n    rev = rev * -1\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        print('Error: negative number')\n        return None\n    elif num == 0:\n        print('Error: zero')\n        return None\n    else:\n        num_rev = int(str(num)[::-1])\n        if num_rev == num:\n            print('Zero')\n            return None\n        elif num_rev < num:\n            print('Error: negative number')\n            return None\n        else:\n            return num_rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return(num<num**2)"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = []\n    for i in range(0,len(arr),1):\n        num_list.append(int(arr[i]))\n    print(max(num_list))\n    return max(num_list)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Define the function \n    def max_num(arr) :\n        '''\n        This function will find the largest number that can be formed with the given list of digits.\n        '''\n        \n        # Initialize the value of the longest range\n        max_length = 0\n        for i in range(len(arr)) : \n            if arr[i] >= max_length : \n                max_length = arr[i]\n        return max_length \n        \n    # This function will return the result\n    return max_num(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        num_list = list(map(int,str(arr[i])))\n        num_list.sort()\n        num = num_list[-1]\n        if num > max_num :\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Return the maximum number of digits that can be formed\n    # Hint : You can use a set\n    # Time complexity : O(n^3)\n    # Space Complexity : O(n)\n    # Expected Time Complexity : O(n^2)\n    # Expected Space Complexity : O(n)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if(len(arr)==1):\n        return arr[0]\n    elif(len(arr)==2):\n        if(arr[1]>arr[0]):\n            return arr[0]\n        else:\n            return arr[0]\n    elif(len(arr)==3):\n        if(arr[1]>arr[2]):\n            return arr[1]\n        elif(arr[2]>arr[0]):\n            return arr[2]\n        else:\n            return arr[0]\n    else:\n        if(arr[1]>arr[2]):\n            if(arr[2]>arr[3]):\n                return arr[2]\n            else:\n                return arr[3]\n        else:\n            if(arr[1]>arr[3]):\n                return arr[1]\n            else:\n                return arr[3]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = -1\n    for num in arr:\n        if (num!= 0):\n            if (num > max_num):\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Find the largest number with the given list of digits\n    largest = 0\n    for num in arr :\n        if num > largest :\n            largest = num\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def Max_Num_generator(lst) :\n        '''\n        Write a python function that takes a list of integers as an input and returns a list of the largest numbers that can be formed with the given input list of integers.\n        '''\n        lst_len = len(lst)\n        if lst_len == 0 :\n            return [None]\n        if lst_len == 1 :\n            return [lst[0]]\n        if lst_len == 2 :\n            if lst[0] < lst[1] :\n                return [lst[0]] + Max_Num_generator(lst[1:])\n            else :\n                return Max_Num_generator(lst[1:])\n        else :\n            if lst[0] < lst[1] :\n                return [lst[0]] + Max_Num_generator(lst[1:])\n            else :\n                return Max_Num_generator(lst[1:]) + [lst[0]]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)) :\n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>y)\n    \n    \ndef solution():\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return opposite_Signs(2,4)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # code goes here\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    signs = {'+':0,'-':0,'x':0,'/':0,'*':0}\n    x = abs(x)\n    y = abs(y)\n    for i in range(0,len(x)):\n        for j in range(0,len(y)):\n            if (x[i]==y[j]):\n                signs[x[i]]+=1\n            else:\n                signs[x[i]]-=1\n                signs[y[j]]+=1\n    #print(signs)\n    return signs\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #Answer : False\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n    #Answer : True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    sign = 1 if x > y else -1 if x < y else 0\n    return sign\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>y):\n        return -1\n    if(y>x):\n        return 1\n    return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    elif x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    temp=x.index(y[0])\n    y.pop(0)\n    if y[0]>y[1]:\n        y.pop(0)\n        temp=x.index(y[0])\n        y.pop(0)\n    if y[0]<y[1]:\n        y.pop(0)\n        temp=x.index(y[0])\n        y.pop(0)\n    if y[0]==y[1]:\n        temp=y.index(y[0])\n    return temp\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < y:\n        return 1\n    elif x > y:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n + 1) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 3:\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    \n    if n%2 == 0:\n        return n//3\n    \n    return (n//3)+(n//2)\n    \nn = 3\nprint(is_octagonal(n))\nprint()\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)//2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n < 0): \n        raise ValueError(\"n must be non-negative\") \n    if (n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    for x in range(1, n): \n        if (n % x == 0): \n            return x \n    else: \n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if(n < 3):\n        return n\n    if(n % 2 == 0):\n        return n / 2\n    else:\n        return (n + n / 2) ** 0.5\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        return (3 * n) + (5 * n) + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return is_octagonal(n - 1) + is_octagonal(n - 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n+1)*n/2 + (n+1)**(1/2)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)-1):\n        for j in range(i+1,len(s)):\n            if int(s[i:j+1])==s[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # If no arguments are passed, we return the number of substrings with each digit.\n    if not s:\n        return 0\n    # Set the length of the string.\n    length = len(s)\n    # Iterate over each character in the string.\n    count = 0\n    for char in s:\n        # Check if the char is a digit.\n        if char.isdigit():\n            # Add one to the count.\n            count += 1\n    # Return the number of substrings with each digit.\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) <= 1):\n        return 0\n    \n    l = len(s)\n    dic = defaultdict(int)\n    for i in range(l):\n        dic[s[i]] += 1\n    \n    num_substr = 0\n    for k, v in dic.items():\n        if(v == 1):\n            num_substr += 1\n            num_substr += count_Substrings(k[::-1])\n        else:\n            num_substr += v\n    \n    return num_substr\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # count the number of non-zero digits\n    count = 0\n    for i in range(0, len(s)):\n        if s[i]!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_dict = defaultdict(int)\n    # loop through the string\n    for i in range(len(s)):\n        sub_dict[s[i]] += 1\n    # loop through each character and check if it is part of sub_dict\n    for key in sub_dict.keys():\n        if sub_dict[key] >= 2:\n            # if sub_dict[key] is even\n            # divide count by 2\n            # if count is even then sub_dict[key] becomes the number of even characters\n            sub_dict[key] = sub_dict[key]//2\n    return sum(sub_dict.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0, len(s)-1):\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) < 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    l = len(s)\n    for i in range(l):\n        for j in range(i, l):\n            s = s[j:j+2]\n            if s.isdigit():\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    output=[]\n    for i in range(len(s)-1):\n        j=i+1\n        while j < len(s):\n            if (s[i] == s[j]):\n                output.append(s[i]+s[j])\n                j+=1\n            else:\n                break\n    return len(output)\ndef count_Substrings_BF(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    output=0\n    if len(s)==0:\n        return 0\n    # i=0\n    for i in range(len(s)):\n        # print(i)\n        # print(s[i])\n        # print(s[i+1:])\n        if len(s[i:])==len(s[:i+1]):\n            # print(s[i:])\n            # print(s[i:i+1])\n            # print(s[i:i+1])\n            # print(s[i+1:])\n            # print(s[i+1:i+2])\n            # print(s[i+2:])\n            # print(s[i+2:i+2])\n            # print(s[i+2:i+2])\n            output+=1\n            # i+=1\n    return output\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = count_substrings(s, 0, len(s) - 1)\n    return substrings\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return xs[0]\n    else:\n        return None\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = sorted(xs)[0]\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # check if the list is empty\n    if len(xs) == 0:\n        return None\n    else:\n        min_val = xs[0]\n        for x in xs:\n            if x < min_val:\n                min_val = x\n        return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs = sorted(xs)\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_index = -1\n    min_value = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_value:\n            min_index = i\n            min_value = xs[i]\n    return min_index, min_value\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    else:\n        smallest = min(xs)\n        for i in xs:\n            if i < smallest:\n                smallest = i\n        return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    smallest = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return sorted(xs)[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    sorted_list = sorted(xs)\n    return sorted_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    # Code here\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-i-1):\n            if(test_list[i+j] - test_list[j] > max_diff):\n                max_diff = test_list[i+j] - test_list[j]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    available = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and not (i in available and j in available):\n                available.append(i)\n                available.append(j)\n            if test_list[i] == test_list[j] and not (i in available and j in available):\n                available.remove(i)\n                available.remove(j)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] - test_list[j]) > max:\n                max = (test_list[i] - test_list[j])\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return test_list[0] - test_list[0]\n    else:\n        max_difference = max(test_list[0] - test_list[1],\n                            test_list[1] - test_list[0],\n                            test_list[0] - test_list[1])\n        return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #Create a list of tuples\n    tup_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            tup_list.append((test_list[i],test_list[j]))\n    #create an empty dictionary\n    final_dict = {}\n    for i in range(len(tup_list)):\n        final_dict[tup_list[i][0]] = tup_list[i][1]\n    #loop through each tuple in the list\n    for i in range(len(tup_list)):\n        #create an empty dictionary\n        final_dict[tup_list[i][0]] = tup_list[i][1]\n        final_dict[tup_list[i][1]] = tup_list[i][0]\n    #loop through each tuple in the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[tup_list[i][0]] = tup_list[i][1]\n        final_dict[tup_list[i][1]] = tup_list[i][0]\n    #loop through the list\n    for i in range(len(tup_list)):\n        #create an empty dictionary\n        final_dict[tup_list[i][0]] = tup_list[i][1]\n        final_dict[tup_list[i][1]] = tup_list[i][0]\n    #create an empty dictionary\n    final_dict = {}\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #create an empty dictionary\n    final_dict = {}\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop through the list\n        for j in range(len(tup_list)):\n            #create an empty dictionary\n            final_dict[i][tup_list[j][0]] = tup_list[j][1]\n            final_dict[i][tup_list[j][1]] = tup_list[j][0]\n    #loop through the dictionary\n    for i in range(len(final_dict)):\n        #create an empty dictionary\n        final_dict[i] = {}\n        #loop throug"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if difference > max_difference:\n                max_difference = difference\n    return max_difference\n    \n    \ndef find_best_test(avail_tuple, test_list):\n    '''\n    Write a function that returns the index of the pair that has the maximum difference with the given test list.\n    '''\n    # test_list = [1, 5, 3, 2, 4, 9, 7, 6, 8]\n    # avail_tuple = (1, 5, 3, 2, 4, 9, 7, 6, 8)\n    # max_difference = max_difference(avail_tuple)\n    # for i in range(len(test_list) - 1):\n    #     if abs(avail_tuple[0] - test_list[i][0]) + abs(avail_tuple[1] - test_list[i][1]) > max_difference:\n    #         max_difference = abs(avail_tuple[0] - test_list[i][0]) + abs(avail_tuple[1] - test_list[i][1])\n    #         max_index = i\n    # return max_index\n    return max_difference(avail_tuple)\n    \n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # create a blank list to store the max diff\n    max_diff = []\n    # iterate through the given list and calculate the diff for each pair of items in the list\n    for item in test_list:\n        try:\n            diff = test_list[item[0]][item[1]] - test_list[item[1]][item[0]]\n            if diff > 0:\n                max_diff.append((item[0], item[1]))\n        except IndexError:\n            print(\"IndexError: Index out of range\")\n            max_diff.append((item[0], item[1]))\n    \n    # return the max diff\n    return max_diff[0][1] - max_diff[1][1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = test_list[0] - test_list[1]\n    for i in range(1, len(test_list)):\n        max_diff = max(max_diff, test_list[i] - test_list[i - 1])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # create empty list to store min value of each element\n    min_val = []\n    # create empty list to store max value of each element\n    max_val = []\n    # loop through all values in tuple list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # if value is not compared, add it to min_val list and add to max_val list\n            if test_list[i]!= test_list[j]:\n                min_val.append(test_list[i])\n                max_val.append(test_list[j])\n    # find the max value and index it\n    max_diff = max(max_val) - min(min_val)\n    # return value\n    return max_diff\n    \ntest_list = [4, 3, 2, 1, 6]\nprint(max_difference(test_list))\n    \ntest_list = [5, 4, 4, 3, 2, 1, 6, 2, 1]\nprint(max_difference(test_list))\n    \ntest_list = [1, 2, 4, 7, 9]\nprint(max_difference(test_list))\n    \ntest_list = [2, 5, 6, 7, 1]\nprint(max_difference(test_list))\n    \ntest_list = [0, 3, 8, 7, 2, 6, 1, 4, 9, 5]\nprint(max_difference(test_list))"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            test_list_2 = (test_list[i], test_list[j])\n            if test_list_2 in test_list:\n                if test_list_2[1] - test_list_2[0] > max_diff:\n                    max_diff = test_list_2[1] - test_list_2[0]\n    return max_diff\n    \n    \n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = []\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda item:item[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x:x[1])\n    \n    #sort the list\n    subjectmarks.sort(key = lambda x:x[0])\n    \n    #return the sorted list\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = []\n    for data in subjectmarks:\n        if data[1] not in marks:\n            marks.append(data[1])\n    marks.sort()\n    return marks\n    \ndef mark_grade(marks, grade):\n    '''\n    Write a function that uses the marks and grade to sort the marks.\n    '''\n    return sorted(marks, key=lambda x: x[1], reverse=True)\n    \ndef mark_percentage(marks, percentage):\n    '''\n    Write a function that takes a list of tuples and a percentage value\n    and returns the list of tuples sorted by percentage.\n    '''\n    return sorted(marks, key=lambda x: x[1], reverse=True)\n    \ndef get_highest_mark(marks):\n    '''\n    Write a function that takes a list of tuples and returns the highest mark\n    '''\n    return max(marks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    final_list = []\n    subject_marks = []\n    for subject_marks in subjectmarks:\n        subject_marks.append(subject_marks[1])\n        final_list.append(subject_marks)\n    for subject_marks in final_list:\n        subject_marks.sort(key = lambda subject_marks: subject_marks[1])\n    return final_list"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks,key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks = []\n    for item in subjectmarks:\n        subject_marks.append(item[1])\n    subject_marks.sort()\n    return(subject_marks)\n    \ndef lecturer_marks(lecturermarks):\n    '''\n    Write a function that sorts a list of tuples by the first value of each tuple.\n    '''\n    lecturer_marks = []\n    for item in lecturermarks:\n        lecturer_marks.append(item[0])\n    lecturer_marks.sort()\n    return(lecturer_marks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # TEST\n    #>>>subject_marks = [('Maths', 75), ('Science', 50), ('English', 60)]\n    #>>>subject_marks.sort(key=lambda x: x[1])\n    #>>>subject_marks.sort(key=lambda x: x[1], reverse=True)\n    #>>>subject_marks.sort(key=lambda x: x[0])\n    #>>>subject_marks.sort(key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # create a list of tuples from the inputted data\n    marks = []\n    for subjectmarks in subjectmarks:\n        marks.append(subjectmarks[1])\n    # sort the list in ascending order\n    marks.sort()\n    # convert the list to a tuple\n    marks_tuple = tuple(marks)\n    return marks_tuple\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = []\n    for item in subjectmarks:\n        sorted_subjectmarks.append(item[1])\n    return sorted_subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = []\n    for i in data_list:\n        if type(i) == list:\n            result += recursive_list_sum(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list is None or len(data_list) == 0:\n        return None\n    else:\n        try:\n            if isinstance(data_list[0], list):\n                return [recursive_list_sum(x) for x in data_list]\n            else:\n                return sum(data_list)\n        except:\n            return data_list"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: modify so that it flattens the list into a single list\n    #       so that it has the format [ [1,2,3], [4,5,6], [7,8,9] ]\n    #       sum each of the elements of the list\n    #       return the flattened list\n    if data_list == None:\n        return []\n    else:\n        if type(data_list) == list:\n            flattened_data_list = []\n            for element in data_list:\n                flattened_data_list.extend(recursive_list_sum(element))\n            return flattened_data_list\n        else:\n            print('Data list is not a list')\n            return []\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return [data_list[i] for i in range(len(data_list)) if i % 2 == 0] + recursive_list_sum(data_list[::2]) + recursive_list_sum(data_list[1::2])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_sum = 0\n    for element in data_list:\n        data_sum += element\n    return data_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) < 1:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #base case\n    if data_list == []:\n        return 0\n    \n    #get the first element\n    elif data_list[0] == \"S\":\n        return data_list[1]\n    \n    #get all the elements except the first element\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list, list):\n        return sum(recursive_list_sum(data_list[i]) for i in range(len(data_list)))\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    try:\n        result = 0\n        for elem in data_list:\n            result += elem\n        return result\n    except TypeError:\n        raise TypeError('Input list must be a non-empty list.')\n    except ValueError:\n        raise ValueError('Input list must be a non-empty list.')\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return [recursive_list_sum(item) + recursive_list_sum(item[1:]) for item in data_list]\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n += 1\n    return n\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for number in list:\n        if number > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([i for i in list if i > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    c = 0\n    for i in list:\n        if i > 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for el in list:\n        if el > 0:\n            count += 1\n    print(f'The number of positive numbers in a list is: {count}')\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for number in list:\n        if number > 0:\n            pos_count += 1\n    return pos_count\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum=0\n    for i in list:\n        if i>0:\n            sum+=1\n    return sum\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    \n    elif n == 1:\n        return 1\n    \n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        left = bell(n-1)\n        right = bell(n-2)\n        ans = (left * right)\n        return ans\n    return bell(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3) + bell_number(n-4)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    d = [0 for _ in range(n+1)]\n    d[0] = 1\n    for i in range(1, n+1):\n        d[i] = d[i-1] + d[i-2]\n    return d[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return bell_number(n-2) + bell_number(n-3) + bell_number(n-4)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    num_list = [1] * (n+1)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        num_list[0] = 1\n        num_list[1] = 2\n        for i in range(2,n):\n            num_list[i] = (num_list[i-1] + num_list[i-2])\n        \n        return num_list[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # num_cases = n * (n - 1) // 2\n    # if num_cases < 0:\n    #     return 0\n    # elif num_cases == 0:\n    #     return 1\n    # elif num_cases == 1:\n    #     return 1\n    # else:\n    #     a = [2]\n    #     for i in range(2, n):\n    #         a.append(a[i-1] + a[i-2])\n    #     return a[n-1]\n    # for i in range(n-2, -1, -1):\n    #     if a[i] < n:\n    #         a[i] += a[i+1]\n    #     else:\n    #         a[i] += a[i-1]\n    # return a[n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # TODO: Write a function that finds the number of ways to partition a set of Bell numbers\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # traverse in array from right to left \n    for i in range(1,len(A)): \n        if A[i-1]>A[i]:\n            return False \n    return True \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return True\n    \n    \ndef is_Culilinear(A): \n    '''\n    Write a python function to check whether the given array is \n    Culilinear or not.\n    '''\n    return True\n    \n    \ndef is_Nimelic(A): \n    '''\n    Write a python function to check whether the given array is \n    Nimelic or not.\n    '''\n    return True\n    \n    \ndef is_Culinear(A): \n    '''\n    Write a python function to check whether the given array is \n    Culinear or not.\n    '''\n    return True\n    \n    \ndef is_Eulerian(A): \n    '''\n    Write a python function to check whether the given array is \n    Eulerian or not.\n    '''\n    return True\n    \n    \ndef is_Tetragonal(A): \n    '''\n    Write a python function to check whether the given array is \n    Tetragonal or not.\n    '''\n    return True\n    \n    \ndef is_Rectangular(A): \n    '''\n    Write a python function to check whether the given array is \n    Rectangular or not.\n    '''\n    return True\n    \n    \ndef is_Hermitian(A): \n    '''\n    Write a python function to check whether the given array is \n    Hermitian or not.\n    '''\n    return True\n    \n    \ndef is_Linear(A): \n    '''\n    Write a python function to check whether the given array is \n    Linear or not.\n    '''\n    return True\n    \n    \ndef is_Nonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    Nonlinear or not.\n    '''\n    return True\n    \n    \ndef is_DoublyLinear(A): \n    '''\n    Write a python function to check whether the given array is \n    DoublyLinear or not.\n    '''\n    return True\n    \n    \ndef is_Paralaxal(A): \n    '''\n    Write a python function to check whether the given array is \n    Paralaxal or not.\n    '''\n    return True\n    \n    \ndef is_NonlinearParalaxal(A): \n    '''\n    Write a python function to check whether the given array is \n    NonlinearParalaxal or not.\n    '''\n    return True\n    \n    \ndef is_Formal(A): \n    '''\n    Write a python function to check whether the given array is \n    Formal or not.\n    '''\n    return True\n    \n    \ndef is_ParalaxalFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    ParalaxalFormal or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormal or not.\n    '''\n    return True\n    \n    \ndef is_NonlinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    NonlinearFormal or not.\n    '''\n    return True\n    \n    \ndef is_FormalFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    FormalFormal or not.\n    '''\n    return True\n    \n    \ndef is_ParalaxalLinear(A): \n    '''\n    Write a python function to check whether the given array is \n    ParalaxalLinear or not.\n    '''\n    return True\n    \n    \ndef is_ParalaxalNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    ParalaxalNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_ParalaxalLinearNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    ParalaxalLinearNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_ParalaxalLinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    ParalaxalLinearFormal or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormalNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormalNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormalNonlinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormalNonlinearFormal or not.\n    '''\n    return True\n    \n    \ndef is_LinearLinearNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearLinearNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_NonlinearNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    NonlinearNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_NonlinearNonlinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    NonlinearNonlinearFormal or not.\n    '''\n    return True\n    \n    \ndef is_ParalaxalLinearFormalNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    ParalaxalLinearFormalNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_ParalaxalLinearNonlinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    ParalaxalLinearNonlinearFormal or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormalNonlinearParalaxal(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormalNonlinearParalaxal or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormalNonlinearLinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormalNonlinearLinear or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormalNonlinearLinearNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormalNonlinearLinearNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_LinearNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_LinearNonlinearLinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearNonlinearLinear or not.\n    '''\n    return True\n    \n    \ndef is_LinearNonlinearLinearNonlinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearNonlinearLinearNonlinear or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormalNonlinearLinear(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormalNonlinearLinear or not.\n    '''\n    return True\n    \n    \ndef is_LinearFormalNonlinearLinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearFormalNonlinearLinearFormal or not.\n    '''\n    return True\n    \n    \ndef is_LinearNonlinearLinearFormal(A): \n    '''\n    Write a python function to check whether the given array is \n    LinearNonlinearLinearFormal o"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    from collections import deque\n    check = deque()\n    A = sorted(A)\n    check.append(A[0])\n    for i in range(1, len(A)):\n        if A[i] - A[i-1] > 1:\n            check.append(A[i])\n    if len(check) == len(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    assert type(A) == np.ndarray, 'Input must be a NumPy array'\n    m = np.diff(A)\n    if(m.size!= A.size): \n        return False\n    for i in range(0, A.size-1): \n        if(A[i]!= A[i+1]): \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    sorted_A = sorted(A)\n    for index in range(len(A) - 1):\n        if A[index] > A[index + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    for i in range(0, n): \n        if A[i]!= A[i+1]: \n            return False \n    return True \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # initialize with 0\n    count=0\n    # traverse the array\n    for i in range(len(A)):\n        # check if arr[i]<=arr[i+1]\n        if A[i]<=A[i+1]:\n            # increment count\n            count+=1\n        # if arr[i]>=arr[i+1]\n        if A[i]>=A[i+1]:\n            count+=1\n    return count>0\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    L = len(A)\n    for i in range(L):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l==[]:\n        return True\n    if s in l:\n        return True\n    if is_sublist(l[1:],s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l = list(l)\n    for x in s:\n        if x not in l:\n            return False\n    return True\n    \ndef list_to_string(l):\n    '''\n    Write a function to convert a list to string.\n    '''\n    return ''.join(l)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < 2:\n        return True\n    else:\n        return all([l[i:i+2] == s for i in range(len(l)-1)])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return s in l\n    \n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return is_sublist(l[1:], s + [l[0]])\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < 2:\n        return True\n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i]!= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s) - 1):\n        if s[i:i+2] in l:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check whether list is empty\n    if len(l) == 0:\n        return True\n    \n    # Check whether list contains sublist\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    \n    return False\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < 2:\n        return True\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return True if set(l) == set(s) else False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i]) == 1 and Input[i][0]!= Input[i][0]:\n            return False\n        elif len(Input[i]) == 1 and Input[i][0] == Input[i][0]:\n            continue\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n        else:\n            pass\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    '''\n    Write your code here\n    '''\n    if len(Input) <= 0:\n        return False\n    \n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i + 1]):\n            return False\n    \n    return True\n    \nprint(find_equal_tuple([(1, 2), (1, 3), (1, 4)]))\nprint(find_equal_tuple([(1, 2, 3), (1, 2, 4), (2, 3, 4), (3, 4, 5)]))\nprint(find_equal_tuple([(1, 2, 3), (2, 3, 4), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 5), (1, 2, 6), (1, 2, 6), (1, 2, 7), (1, 2, 7), (1, 2, 8), (1, 2, 8), (1, 2, 9), (1, 2, 9), (1, 2, 10), (1, 2, 10), (1, 2, 11), (1, 2, 11), (1, 2, 12), (1, 2, 12), (1, 2, 13), (1, 2, 13), (1, 2, 14), (1, 2, 14), (1, 2, 15), (1, 2, 15), (1, 2, 16), (1, 2, 16), (1, 2, 17), (1, 2, 17), (1, 2, 18), (1, 2, 18), (1, 2, 19), (1, 2, 19), (1, 2, 20), (1, 2, 20), (1, 2, 21), (1, 2, 21), (1, 2, 22), (1, 2, 22), (1, 2, 23), (1, 2, 23), (1, 2, 24), (1, 2, 24), (1, 2, 25), (1, 2, 25), (1, 2, 26), (1, 2, 26), (1, 2, 27), (1, 2, 27), (1, 2, 28), (1, 2, 28), (1, 2, 29), (1, 2, 29), (1, 2, 30), (1, 2, 30), (1, 2, 31), (1, 2, 31), (1, 2, 32), (1, 2, 32), (1, 2, 33), (1, 2, 33), (1, 2, 34), (1, 2, 34), (1, 2, 35), (1, 2, 35), (1, 2, 36), (1, 2, 36), (1, 2, 37), (1, 2, 37), (1, 2, 38), (1, 2, 38), (1, 2, 39), (1, 2, 39), (1, 2, 40), (1, 2, 40), (1, 2, 41), (1, 2, 41), (1, 2, 42), (1, 2, 42), (1, 2, 43), (1, 2, 43), (1, 2, 44), (1, 2, 44), (1, 2, 45), (1, 2, 45), (1, 2, 46), (1, 2, 46), (1, 2, 47), (1, 2, 47), (1, 2, 48), (1, 2, 48), (1, 2, 49), (1, 2, 49), (1, 2, 50), (1, 2, 50), (1, 2, 51), (1, 2, 51), (1, 2, 52), (1, 2, 52), (1, 2, 53), (1, 2, 53), (1, 2, 54), (1, 2, 54), (1, 2, 55), (1, 2, 55), (1, 2, 56), (1, 2, 56), (1, 2, 57), (1, 2, 57), (1, 2, 58), (1, 2, 58), (1, 2, 59), (1, 2, 59), (1, 2, 60), (1, 2, 60), (1, 2, 61), (1, 2, 61), (1, 2, 62), (1, 2, 62), (1, 2, 63), (1, 2, 63), (1, 2, 64), (1, 2, 64), (1, 2, 65), (1, 2, 65), (1, 2, 66), (1, 2, 66), (1, 2, 67), (1, 2, 67), (1, 2, 68), (1, 2, 68), (1, 2, 69), (1, 2, 69), (1, 2, 70), (1, 2, 70), (1, 2, 71), (1, 2, 71), (1, 2, 72), (1, 2, 72), (1, 2, 73), (1, 2, 73), (1, 2, 74), (1, 2, 74), (1, 2, 75), (1, 2, 75), (1, 2, 76), (1, 2, 76), (1, 2, 77), (1, 2, 77), (1, 2, 78), (1, 2, 78), (1, 2, 79), (1, 2, 79), (1, 2, 80), (1, 2, 80), (1, 2, 81), (1, 2, 81), (1, 2, 82), (1, 2, 82), (1, 2, 83), (1, 2, 83), (1, 2, 84), (1, 2, 84), (1, 2, 85), (1, 2, 85), (1, 2, 86), (1, 2, 86), (1, 2, 87), (1, 2, 87), (1, 2, 88), (1, 2, 88), (1, 2, 89), (1, 2, 89), (1, 2, 90), (1, 2, 90), (1, 2, 91), (1, 2, 91), (1, 2, 92), (1, 2, 92), (1, 2, 93), (1, 2, 93), (1, 2, 94), (1, 2, 94), (1, 2, 95), (1, 2, 95), (1, 2, 96), (1, 2, 96), (1, 2, 97), (1, 2, 97), (1, 2, 98), (1, 2, 98), (1, 2, 99), (1, 2, 99), (1, 2, 100), (1, 2, 100), (1, 2, 101), (1, 2, 101), (1, 2, 102), (1, 2, 102), (1, 2, 103), (1, 2, 103), (1, 2, 104), (1, 2, 104), (1, 2, 105), (1, 2, 105), (1, 2, 106), (1, 2, 106), (1, 2, 107), (1, 2, 107), (1, 2, 108), (1, 2, 108), (1, 2, 109), (1, 2, 109), (1, 2, 110), (1, 2, 110), (1, 2, 111), (1, 2, 111), (1, 2, 112), (1, 2, 112), (1, 2, 113), (1, 2, 113), (1, 2, 114), (1, 2, 114), (1, 2, 115), (1, 2, 115), (1, 2, 116), (1, 2, 116), (1, 2, 117), (1, 2, 117), (1, 2, 118), (1, 2, 118), (1, 2, 119), (1, 2, 119), (1, 2, 120), (1, 2, 120), (1, 2, 121), (1, 2, 121), (1, 2, 122), (1, 2, 122), (1, 2, 123), (1, 2, 123), (1, 2, 124), (1, 2, 124), (1, 2, 125), (1, 2, 125), (1, 2, 126), (1, 2, 126), (1, 2, 127), (1, 2, 127), (1, 2, 128), (1, 2, 128), (1, 2, 129), (1, 2, 129), (1, 2, 130), (1, 2, 130), (1, 2, 131), (1, 2, 131), (1, 2, 132), (1, 2, 132), (1, 2, 133), (1, 2, 133), (1, 2, 134), (1, 2, 134), (1, 2, 135), (1, 2, 13"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    dict = {}\n    for i in Input:\n        dict[i[0]] = i[1]\n    for i in dict.keys():\n        if dict[i]!= i:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    len_list = [len(x) for x in Input]\n    if len(set(len_list)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    num = len(Input[0])\n    if num < 2:\n        return False\n    for i in range(num):\n        if i+1 < num:\n            if Input[i][i+1]!= Input[i+1][i]:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # list = []\n    # for i in Input:\n    #     if len(i) < len(set(i)):\n    #         return False\n    #     else:\n    #         list.append(set(i))\n    #     return True\n    # return list\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tup_list = []\n    for tup in Input:\n        if len(tup)!= 2:\n            return False\n        else:\n            tup_list.append(tup)\n    return tup_list == [[]]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(Input)) == len(Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i] == Input[j]:\n                return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def compare(val1, val2):\n        '''\n        A helper function for the sort.\n        '''\n        if val1 < val2:\n            return 1\n        else:\n            return -1\n    \n    def partition(arr, start, end):\n        '''\n        Partition a sub list.\n        '''\n        # Choose pivot\n        pivot = arr[start]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combs = 0\n    combs_total = 0\n    while combs < len(nums) - 1:\n        combs = 0\n        combs_total = 0\n        for i in range(len(nums) - 1):\n            combs += 1\n            combs_total += 1\n            if nums[i] > nums[i + 1]:\n                combs += 1\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        \n        combs_total += 1\n        nums = sorted(nums)\n        print(combs, combs_total)\n        for i in range(combs_total - 1):\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: \n    # Init the first variable.\n    first_idx = 0\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Your code goes here.\n    #Implement the function here.\n    #Use an empty array to store the sorted elements.\n    #Use the given array to perform a sort operation on the elements of the array.\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return\n    \n    # point 2:\n    point_2 = 2\n    # point 3:\n    point_3 = 3\n    # point 4:\n    point_4 = 4\n    \n    # quick sort, keep the range\n    while point_2 <= len(nums):\n        # sort the list by comparing the elements of the\n        # list and the list of elements after the next point\n        for point in range(point_2, len(nums)):\n            # if the next element is not smaller, swap it with\n            # the last element\n            if nums[point_2] < nums[point]:\n                nums[point], nums[point_2] = nums[point_2], nums[point]\n        # if the element at the point is not larger, break from\n        # point 2\n        if nums[point_2] > nums[point_3]:\n            break\n        point_2 += 1\n    # point 3, move on to next point\n    while point_3 <= len(nums) - 1:\n        # if the next element is smaller, swap it with the\n        # last element\n        if nums[point_2] < nums[point_3]:\n            nums[point_2], nums[point_3] = nums[point_3], nums[point_2]\n        # if the element at the point is larger, break from\n        # point 3\n        if nums[point_3] > nums[point_4]:\n            break\n        point_3 += 1\n    # point 4, move on to the last point\n    while point_4 <= len(nums) - 1:\n        # if the next element is smaller, swap it with the\n        # last element\n        if nums[point_2] < nums[point_4]:\n            nums[point_2], nums[point_4] = nums[point_4], nums[point_2]\n        # if the element at the point is larger, break from\n        # point 4\n        if nums[point_4] > nums[point_3]:\n            break\n        point_4 += 1\n        \n    # sort the remaining elements\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        if nums[i] > nums[j]:\n            nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n        j -= 1\n    \n    # re-sort the list\n    nums[:] = [nums[i] for i in range(len(nums)) if i < len(nums) - 1]\n    \ndef find_rec_sorted_range(nums, r):\n    '''\n    Finds the range that contains the given number\n    '''\n    # check if num is in the range\n    if r < 1 or r > len(nums):\n        return\n    # compare the numbers\n    if nums[r] > nums[r - 1]:\n        r -= 1\n    elif nums[r] < nums[r - 1]:\n        r += 1\n    # return the result\n    return r\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        j = i\n        for j in range(len(nums)):\n            if nums[j] < nums[i]:\n                j = j\n        nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    temp_len = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        start = 0\n        end = len(nums)-1\n        while start < end:\n            if nums[start] > nums[end]:\n                nums[start], nums[end] = nums[end], nums[start]\n                end -= 1\n            start += 1\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the maximum element\n    maximum = max(nums)\n    # divide the list into two parts\n    smaller_part = []\n    bigger_part = []\n    for num in nums:\n        if num < maximum:\n            smaller_part.append(num)\n        else:\n            bigger_part.append(num)\n    # merge two parts\n    sorted_list = []\n    # find the length\n    len_smaller_part = len(smaller_part)\n    len_bigger_part = len(bigger_part)\n    # create a list to store the result\n    i = 0\n    # store the result\n    while i < len_smaller_part:\n        j = 0\n        # store the result\n        while j < len_bigger_part:\n            if i == len_smaller_part - 1:\n                sorted_list.append(bigger_part[j])\n            else:\n                if nums[j] < bigger_part[i + 1]:\n                    sorted_list.append(nums[j])\n                else:\n                    sorted_list.append(bigger_part[i + 1])\n            # decrement the index\n            j += 1\n        # keep decrement\n        i += 1\n    # return the result\n    return sorted_list\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a=n%4\n    b=n//4\n    if a==b:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0: return 0\n    if n==1: return 1\n    \n    return (dif_Square(n//2) + dif_Square(n//2+1))%1000000007\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i, j = 0, 0\n    while n >= 0: \n        #check whether the current number is even \n        if n % 2 == 0: \n            n = n // 2\n            i += 1\n        else: \n            n = (n//2) + 1\n            j += 1\n    #check whether the current number is odd \n    if n % 2 == 0: \n        n = (n//2) + 1\n        j += 1\n    #check whether the current number is multiple of 4 \n    if n % 4 == 0: \n        n = (n//4) + 1\n        i += 1\n    #return the number of squares needed \n    return i, j\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    square = int(n**0.5)\n    return dif_Square(square) + dif_Square(square**2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = n - n // 2\n    if n % 2 == 0: \n        if dif % 2!= 0:\n            print(dif)\n        else: \n            print(dif, 'is an odd number')\n    else:\n        print(dif, 'is an even number')\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if (n % i == 0):\n            print(\"Not Possible\")\n            return\n        else:\n            print(i, \",\", n//i, \",\", n%i)\n    print(\"Possible\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0:\n        print(\"Square can be represented as 2 squares\")\n    else:\n        print(\"Square can be represented as 1 square\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Get the left most square and the right most square in the given square.\n    l = r = 1\n    while l <= n:\n        r = (r + l) // 2\n        d = r - l\n        if d == n:\n            return True\n        elif d < n:\n            l = (r + 1) // 2\n        else:\n            r = (r - 1) // 2\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1: return 0\n    elif n%2==0: return n//2\n    else: \n        return n-1\n    \ndef nCr(n,r):\n    '''\n    Calculate nCr(n,r) by induction formula\n    '''\n    if n==0 or r==0: return 1\n    else:\n        return (nCr(n-1,r) + nCr(n-1,r-1))%mod\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        p1, p2 = 0,1\n        while p2 <= n/2:\n            if n % p1 == 0 and n % p2 == 0:\n                return True\n            p1 += 1\n            p2 += 1\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def is_pattern(pattern):\n        return True if len(pattern) > 1 else False\n    \n    if is_pattern(colors) and is_pattern(patterns):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        for i in range(0,len(colors)):\n            if pattern[1] == colors[i]:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = False\n    for i in range(len(colors)):\n        for j in range(len(colors[0])):\n            if colors[i][j]!= patterns[i][j]:\n                result = False\n                break\n            elif j == len(patterns[0])-1:\n                result = True\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    pattern_count = 0\n    \n    for pattern in patterns:\n        pattern_count += 1\n    \n    for col in colors:\n        for pattern in patterns:\n            if pattern[1] == col:\n                if pattern[0] == pattern_count:\n                    return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Base case\n    if (len(colors) == 0) or (len(patterns) == 0):\n        return True\n    \n    # If there are more than one color, check\n    # whether it follows the pattern\n    elif (len(colors) > 1):\n        for pattern in patterns:\n            # Split the pattern into number of elements\n            # and the color\n            color = pattern.split(',')\n            # Verify whether it follows the color\n            # If it does not match, return False\n            if (not colors[0] in color) or (not colors[1] in color):\n                return False\n    # If there are only one color, return true\n    else:\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = sorted(patterns)\n    \n    for pattern in patterns:\n        temp = []\n        for element in colors:\n            if isinstance(element, list):\n                for element_2 in element:\n                    temp.append(element_2.__eq__(pattern))\n            else:\n                temp.append(element.__eq__(pattern))\n        if any(temp):\n            return True\n    \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            continue\n        for color in colors:\n            count += 1\n            # if it is not in the same color sequence, it is not a pattern\n            if pattern[count % len(pattern)]!= color:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_count = 0\n    patterns_index = 0\n    for pattern in patterns:\n        if patterns_count == len(patterns):\n            return False\n        if patterns[patterns_index] == colors[patterns_index]:\n            patterns_count += 1\n            patterns_index += 1\n        else:\n            patterns_count = 0\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_patterns = {}\n    for i in range(len(colors)):\n        color_patterns[colors[i]] = patterns[i]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern[0]:\n                for i in range(len(pattern[1])):\n                    if pattern[1][i]!= color:\n                        return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for pair in test_list:\n        if all(pair[i]%K==0 for i in range(len(pair))):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tuple in test_list:\n        for i in range(tuple[0], tuple[1]+1):\n            if tuple[0]%i == 0:\n                return [tuple, tuple[0]//i]\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Write your code here\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0]%test_list[j][0]==0 and test_list[i][1]%test_list[j][1]==0:\n                print(test_list[i],test_list[j])\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    def tuple_finder(tuple):\n        return tuple[1]%K==0\n    \n    return [item for item in test_list if tuple_finder(item)]\n    \n    \ntest_list = [(1, 2), (2, 3), (4, 5), (6, 7), (8, 9), (10, 11), (12, 13), (14, 15), (16, 17), (18, 19), (20, 21), (22, 23), (24, 25), (26, 27), (28, 29), (30, 31), (32, 33), (34, 35), (36, 37), (38, 39), (40, 41), (42, 43), (44, 45), (46, 47), (48, 49), (50, 51), (52, 53), (54, 55), (56, 57), (58, 59), (60, 61), (62, 63), (64, 65), (66, 67), (68, 69), (70, 71), (72, 73), (74, 75), (76, 77), (78, 79), (80, 81), (82, 83), (84, 85), (86, 87), (88, 89), (90, 91), (92, 93), (94, 95), (96, 97), (98, 99), (100, 101), (102, 103), (104, 105), (106, 107), (108, 109), (110, 111), (112, 113), (114, 115), (116, 117), (118, 119), (120, 121), (122, 123), (124, 125), (126, 127), (128, 129), (130, 131), (132, 133), (134, 135), (136, 137), (138, 139), (140, 141), (142, 143), (144, 145), (146, 147), (148, 149), (150, 151), (152, 153), (154, 155), (156, 157), (158, 159), (160, 161), (162, 163), (164, 165), (166, 167), (168, 169), (170, 171), (172, 173), (174, 175), (176, 177), (178, 179), (180, 181), (182, 183), (184, 185), (186, 187), (188, 189), (190, 191), (192, 193), (194, 195), (196, 197), (198, 199), (200, 201), (202, 203), (204, 205), (206, 207), (208, 209), (210, 211), (212, 213), (214, 215), (216, 217), (218, 219), (220, 221), (222, 223), (224, 225), (226, 227), (228, 229), (230, 231), (232, 233), (234, 235), (236, 237), (238, 239), (240, 241), (242, 243), (244, 245), (246, 247), (248, 249), (250, 251), (252, 253), (254, 255), (256, 257), (258, 259), (260, 261), (262, 263), (264, 265), (266, 267), (268, 269), (270, 271), (272, 273), (274, 275), (276, 277), (278, 279), (280, 281), (282, 283), (284, 285), (286, 287), (288, 289), (290, 291), (292, 293), (294, 295), (296, 297), (298, 299), (300, 301), (302, 303), (304, 305), (306, 307), (308, 309), (310, 311), (312, 313), (314, 315), (316, 317), (318, 319), (320, 321), (322, 323), (324, 325), (326, 327), (328, 329), (330, 331), (332, 333), (334, 335), (336, 337), (338, 339), (340, 341), (342, 343), (344, 345), (346, 347), (348, 349), (350, 351), (352, 353), (354, 355), (356, 357), (358, 359), (360, 361), (362, 363), (364, 365), (366, 367), (368, 369), (370, 371), (372, 373), (374, 375), (376, 377), (378, 379), (380, 381), (382, 383), (384, 385), (386, 387), (388, 389), (390, 391), (392, 393), (394, 395), (396, 397), (398, 399), (400, 401), (402, 403), (404, 405), (406, 407), (408, 409), (410, 411), (412, 413), (414, 415), (416, 417), (418, 419), (420, 421), (422, 423), (424, 425), (426, 427), (428, 429), (430, 431), (432, 433), (434, 435), (436, 437), (438, 439), (440, 441), (442, 443), (444, 445), (446, 447), (448, 449), (450, 451), (452, 453), (454, 455), (456, 457), (458, 459), (460, 461), (462, 463), (464, 465), (466, 467), (468, 469), (470, 471), (472, 473), (474, 475), (476, 478), (478, 479), (480, 481), (482, 483), (484, 485), (486, 488), (488, 490), (490, 491), (492,493), (494,495), (496,497), (498, 499), (500, 501), (502, 503), (504, 505), (506, 506), (508, 511), (510, 512), (512, 513), (514, 515), (516, 517), (518, 519), (520, 521), (522, 523), (524, 525), (526, 527), (528, 529), (530, 531), (532, 533), (534, 535), (536, 537), (538, 539), (540, 541), (542, 543), (544, 545), (546, 547), (548, 496), (549, 497), (550, 552), (553, 554), (556, 556), (558, 559), (560, 561), (562, 563), (564, 565), (566, 567), (568, 569), (570, 571), (572, 573), (574, 574), (576, 577), (578, 579), (580, 581), (582, 583), (584, 584), (586, 587), (588, 590), (589, 591), (591, 592), (592, 593), (594, 595), (596, 597), (598, 599), (599, 601), (601, 602), (602, 603), (604, 605), (606, 607), (608, 610), (609, 611), (611,612), (612,613), (613,614), (614,615), (616,617), (618, 619), (620, 621), (622, 623), (624, 625), (626, 627), (627, 628), (628, 629), (630, 631), (632, 633), (634, 635), (636, 637), (638, 639), (640, 641), (642, 642), (643, 643), (644, 645), (646, 647), (648, 649), (650, 651), (652, 653), (654, 655), (656, 658), (658, 659), (660, 661), (662, 663), (664, 665), (666, 667), (668, 669), (670, 671), (672, 673), (674, 675), (676, 677), (678, 679), (680, 681), (682, 683), (684, 685), (686, 687), (688, 689), (690, 691), (692, 693), (694, 695), (696, 698), (698, 699), (700, 701), (702, 703), (704, 705), (706, 706), (708, 711), (710, 712), (712, 713), "
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item[0], int) and isinstance(item[1], int) and item[0] % K == 0 and item[1] % K == 0:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) % K == 0:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # search through the given list of tuples\n    for i in range(len(test_list)):\n        if len(test_list[i]) % K!= 0:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # your code here\n    return None\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for x in test_list:\n        if len(x[1]) % K == 0:\n            tuples.append(x)\n    return tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    # if divisible by 11:\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2,n): \n        if (n % i == 0): \n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return(n%10 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    div11 = 0\n    for i in n:\n        if i % 11 == 0:\n            div11 += 1\n    if div11 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 10 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count = count + 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 1: \n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n=len(s)\n    if n%2==0:\n        return 'odd'\n    else:\n        return 'even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return (len(s)) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) > 0:\n        return len(s) % 2 == 1\n    else:\n        return len(s) == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0: \n        return True \n    else: \n        return False\ndef word_check(s): \n    '''\n    Write a python function to check whether the word contains any of the following \n    symbols: a, e, i, o, u.\n    '''\n    for i in s: \n        if i in ['a', 'e', 'i', 'o', 'u']: \n            return False\n    return True\ndef check_symbol(s): \n    '''\n    Write a python function to check whether the word contains any of the following \n    symbols: a, e, i, o, u.\n    '''\n    symbols = ['a', 'e', 'i', 'o', 'u']\n    for i in s: \n        if i in symbols: \n            return False\n    return True\ndef num_check(num): \n    '''\n    Write a python function to check whether the number is valid or not.\n    '''\n    if num<0: \n        return False\n    if num>10**3: \n        return False\n    return True\ndef find_valid_chars(s): \n    '''\n    Write a python function to check whether the given string \n    contains any of the following symbols: a, e, i, o, u.\n    '''\n    if word_check(s): \n        return True\n    for i in s: \n        if i.isdigit(): \n            return True\n    return False\ndef split_list(s): \n    '''\n    Write a python function to split a list of strings \n    into a list of dictionaries. \n    '''\n    list=[]\n    for i in s: \n        if word_check(i): \n            split = i.split() \n            if split[0] in ['a', 'e', 'i', 'o', 'u']: \n                list.append({split[0]:int(split[1])})\n            else:\n                list.append(split)\n    return list\ndef find_value(s): \n    '''\n    Write a python function to check whether the given string \n    contains any of the following symbols: a, e, i, o, u.\n    '''\n    if word_check(s): \n        return True\n    for i in s: \n        if i.isdigit(): \n            return True\n    return False\ndef remove_space(s): \n    '''\n    Write a python function to remove all whitespaces from a given string.\n    '''\n    for i in s: \n        if i =='': \n            s = s.replace(' ', '')\n    return s\ndef add_space(s): \n    '''\n    Write a python function to add spaces to the given string.\n    '''\n    for i in s: \n        if i =='': \n            s = s.replace(' ','')\n    return s\ndef int_to_chars(num): \n    '''\n    Write a python function to convert a number to its characters.\n    '''\n    if num<0: \n        return '-'\n    if num>10**3: \n        return '$'\n    if num>10**4: \n        return '\u00a3'\n    if num>10**5: \n        return '\u00a2'\n    if num>10**6: \n        return '\u00a3$'\n    if num>10**7: \n        return '\u00a3\u00a3'\n    if num>10**8: \n        return '\u00a3$\u00a3'\n    if num>10**9: \n        return '\u00a3\u00a3\u00a3'\n    if num>10**10: \n        return '\u00a3$$\u00a3'\n    if num>10**11: \n        return '\u00a3$\u00a3\u00a3'\n    if num>10**12: \n        return '\u00a3\u00a3\u00a3\u00a3'\n    if num>10**13: \n        return '\u00a3$\u00a3\u00a3\u00a3'\n    if num>10**14: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**15: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**16: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**17: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**18: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**19: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**20: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**21: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**22: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**23: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**24: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3'\n    if num>10**25: \n        return '\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3\u00a3"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    if len(word_list) % 2 == 1:\n        return 0\n    return 1\ndef get_num_lines(fname):\n    with open(fname) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = len(s)\n    if word_len % 2 == 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result = result + (i**2)\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    elif n == 3: return 3\n    elif n == 4: return 4\n    elif n == 5: return 5\n    elif n == 6: return 6\n    elif n == 7: return 7\n    elif n == 8: return 8\n    elif n == 9: return 9\n    elif n == 10: return 10\n    elif n == 11: return 11\n    elif n == 12: return 12\n    elif n == 13: return 13\n    elif n == 14: return 14\n    elif n == 15: return 15\n    elif n == 16: return 16\n    elif n == 17: return 17\n    elif n == 18: return 18\n    elif n == 19: return 19\n    elif n == 20: return 20\n    elif n == 21: return 21\n    elif n == 22: return 22\n    elif n == 23: return 23\n    elif n == 24: return 24\n    elif n == 25: return 25\n    elif n == 26: return 26\n    elif n == 27: return 27\n    elif n == 28: return 28\n    elif n == 29: return 29\n    elif n == 30: return 30\n    elif n == 31: return 31\n    elif n == 32: return 32\n    elif n == 33: return 33\n    elif n == 34: return 34\n    elif n == 35: return 35\n    elif n == 36: return 36\n    elif n == 37: return 37\n    elif n == 38: return 38\n    elif n == 39: return 39\n    elif n == 40: return 40\n    elif n == 41: return 41\n    elif n == 42: return 42\n    elif n == 43: return 43\n    elif n == 44: return 44\n    elif n == 45: return 45\n    elif n == 46: return 46\n    elif n == 47: return 47\n    elif n == 48: return 48\n    elif n == 49: return 49\n    elif n == 50: return 50\n    elif n == 51: return 51\n    elif n == 52: return 52\n    elif n == 53: return 53\n    elif n == 54: return 54\n    elif n == 55: return 55\n    elif n == 56: return 56\n    elif n == 57: return 57\n    elif n == 58: return 58\n    elif n == 59: return 59\n    elif n == 60: return 60\n    elif n == 61: return 61\n    elif n == 62: return 62\n    elif n == 63: return 63\n    elif n == 64: return 64\n    elif n == 65: return 65\n    elif n == 66: return 66\n    elif n == 67: return 67\n    elif n == 68: return 68\n    elif n == 69: return 69\n    elif n == 70: return 70\n    elif n == 71: return 71\n    elif n == 72: return 72\n    elif n == 73: return 73\n    elif n == 74: return 74\n    elif n == 75: return 75\n    elif n == 76: return 76\n    elif n == 77: return 77\n    elif n == 78: return 78\n    elif n == 79: return 79\n    elif n == 80: return 80\n    elif n == 81: return 81\n    elif n == 82: return 82\n    elif n == 83: return 83\n    elif n == 84: return 84\n    elif n == 85: return 85\n    elif n == 86: return 86\n    elif n == 87: return 87\n    elif n == 88: return 88\n    elif n == 89: return 89\n    elif n == 90: return 90\n    elif n == 91: return 91\n    elif n == 92: return 92\n    elif n == 93: return 93\n    elif n == 94: return 94\n    elif n == 95: return 95\n    elif n == 96: return 96\n    elif n == 97: return 97\n    elif n == 98: return 98\n    elif n == 99: return 99\n    elif n == 100: return 100\n    elif n == 101: return 101\n    elif n == 102: return 102\n    elif n == 103: return 103\n    elif n == 104: return 104\n    elif n == 105: return 105\n    elif n == 106: return 106\n    elif n == 107: return 107\n    elif n == 108: return 108\n    elif n == 109: return 109\n    elif n == 110: return 110\n    elif n == 111: return 111\n    elif n == 112: return 112\n    elif n == 113: return 113\n    elif n == 114: return 114\n    elif n == 115: return 115\n    elif n == 116: return 116\n    elif n == 117: return 117\n    elif n == 118: return 118\n    elif n == 119: return 119\n    elif n == 120: return 120\n    elif n == 121: return 121\n    elif n == 122: return 122\n    elif n == 123: return 123\n    elif n == 124: return 124\n    elif n == 125: return 125\n    elif n == 126: return 126\n    elif n == 127: return 127\n    elif n == 128: return 128\n    elif n == 129: return 129\n    elif n == 130: return 130\n    elif n == 131: return 131\n    elif n == 132: return 132\n    elif n == 133: return 133\n    elif n == 134: return 134\n    elif n == 135: return 135\n    elif n == 136: return 136\n    elif n == 137: return 137\n    elif n == 138: return 138\n    elif n == 139: return 139\n    elif n == 140: return 140\n    elif n == 141: return 141\n    elif n == 142: return 142\n    elif n == 143: return 143\n    elif n == 144: return 144\n    elif n == 145: return 145\n    elif n == 146: return 146\n    elif n == 147: return 147\n    elif n == 148: return 148\n    elif n == 149: return 149\n    elif n == 150: return 150\n    elif n == 151: return 151\n    elif n == 152: return 152\n    elif n == 153: return 153\n    elif n == 154: return 154\n    elif n == 155: return 155\n    elif n == 156: return 156\n    elif n == 157: return 157\n    elif n == 158: return 158\n    elif n == 159: return 159\n    elif n == 160: return 160\n    elif n == 161: return 161\n    elif n == 162: return 162\n    elif n == 163: return 163\n    elif n == 164: return 164\n    elif n == 165: return 165\n    elif n == 166: return 166\n    elif n == 167: return 167\n    elif n == 168: return 168\n    elif n == 169: return 169\n    elif n == 170: return 170\n    elif n == 171: return 171\n    elif n == 172: return 172\n    elif n == 173: return 173\n    elif n == 174: return 174\n    elif n == 175: return 175\n    elif n == 176: return 176\n    elif n == 177: return 177\n    elif n == 178: return 178\n    elif n == 179: return 179\n    elif n == 180: return 180\n    elif n == 181: return 181\n    elif n == 182: return 182\n    elif n == 183: return 183\n    elif n == 184: return 184\n    elif n == 185: return 185\n    elif n == 186: return 186\n    elif n == 187: return 187\n    elif n == 188: return 188\n    elif n == 189: return 189\n    elif n == 190: return 190\n    elif n == 191: return 191\n    elif n == 192: return 192\n    elif n == 193: return 193\n    elif n == 194: return 194\n    elif n == 195: return 195\n    elif n == 196: return 196\n    elif n == 197: return 197\n    elif n == 198: return 198\n    elif n == 199: return 199\n    elif n == 200: return 200\n    elif n == 201: return 201\n    elif n ="
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    if n<=0:\n        raise ValueError(\"The n should be an integer greater than 0.\")\n    elif n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        a=tetrahedral_number(n-1)\n        return a+2*tetrahedral_number(n-1)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n_sum = 0\n    for i in range(1, n+1):\n        n_sum += i\n    \n    return n_sum\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return 1+tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100','101','102','103','104','105','106','107','108','109','110','111','112','113','114','115','116','117','118','119','120','121','122','123','124','125','126','127','128','129','130','131','132','133','134','135','136','137','138','139','140','141','142','143','144','145','146','147','148','149','150','151','152','153','154','155','156','157','158','159','160','161','162','163','164','165','166','167','168','169','170','171','172','173','174','175','176','177','178','179','180','181','182','183','184','185','186','187','188','189','190','191','192','193','194','195','196','197','198','199','200','201','202','203','204','205','206','207','208','209','210','211','212','213','214','215','216','217','218','219','220','221','222','223','224','225','226','227','228','229','230','231','232','233','234','235','236','237','238','239','240','241','242','243','244','245','246','247','248','249','250','251','252','253','254','255','256','257','258','259','260','261','262','263','264','265','266','267','268','269','270','271','272','273','274','275','276','277','278','279','280','281','282','283','284','285','286','287','288','289','290','291','292','293','294','295','296','297','298','299','300','301','302','303','304','305','306','307','308','309','310','311','312','313','314','315','316','317','318','319','320','321','322','323','324','325','326','327','328','329','330','331','332','333','334','335','336','337','338','339','340','341','342','343','344','345','346','347','348','349','350','351','352','353','354','355','356','357','358','359','360','361','362','363','364','365','366','367','368','369','370','371','372','373','374','375','376','377','378','379','380','381','382','383','384','385','386','387','388','389','390','391','392','393','394','395','396','397','398','399','400','401','402','403','404','405','406','407','408','409','410','411','412','413','414','415','416','417','418','419','420','421','422','423','424','425','426','427','428','429','430','431','432','433','434','435','436','437','438','439','440','441','442','443','444','445','446','447','448','449','450','451','452','453','454','455','456','457','458','459','460','461','462','463','464','465','466','467','468','469','470','471','472','473','474','475','476','477','478','479','480','481','482','483','484','485','486','487','488','489','490','491','492','493','494','495','496','497','498','499','500','501','502','503','504','505','506','507','508','509','510','511','512','513','514','515','516','517','518','519','520','521','522','523','524','525','526','527','528','529','530','531','532','533','534','535','536','537','538','539','540','541','542','543','544','545','546','547','548','549','550','551','552','553','554','555','556','557','558','559','560','561','562','563','564','565','566','567','568','569','570','571','572','573','574','575','576','577','578','579','580','581','582','583','584','585','586','587','588','589','590','591','592','593','594','595','596','597','598','599','600','601','602','603','604','605','606','607','608','609','610','611','612','613','614','615','616','617','618','619','620','621','622','623','624','625','626','627','628','629','630','631','632','633','634','635','636','637','638','639','640','641','642','643','644','645','646','647','648','649','650','651','652','653','654','655','656','657','658','659','660','661','662','663','664','665','666','667','668','669','670','671','672','673','674','675','676','677','678','679','680','681','682','683','684','685','686','687','688','689','690','691','692','693','694','695','696','697','698','699','700','701','702','703','704','705','706','707','708','709','710','711','712','713','714','715','716','717','718','719','720','721','722','723','724','725','726','727','728','729','730','731','732','733','734','735','736','737','738','739','740','741','742','743','744','745','746','747','748','749','750','751','752','753','754','755','756','757','758','759','760','761','762','763','764','765','766','767','768','769','770','771','772','773','774','775','776','777','778','779','780','781','782','783','784','785','786','787','788','789','790','791','792','793','794','795','796','797','798','799','800','801','802','803','804','805','806','807','808','809','810','811','812','813','814','815','816','817','818','819','820','821','822','823','824','825','826','827','828','829','830','831','832','833','834','835','836','837','838','839','840','841','842','843','844','845','846','847','848','849','850','851','852','853','854','855','856','857','858','859','860','861','862','863','864','865','866','867','868','869','870','871','872','873','874','875','876','877','878','879','880','881','882','883','884','885','886','887','888','889','890','891','892','893','894','895','896','897','898','899','900','901','902','903','904','905','906','907','908','909','910','911','912','913','914','915','916','917','918','919','920','921','922','923','924','925','926','927','928','929','930','931','932','93"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from math import factorial\n    return int(factorial(n))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    factors = [2, 3, 5, 7]\n    def factors_to_list(n):\n        return [i for i in range(1, n + 1) if n % i == 0]\n    def number_by_factor(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return number_by_factor(n // factors[n % 4]) * n % 4\n    return number_by_factor(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n < 1: \n        raise ValueError('n must be an integer greater than 0.') \n    \n    if n == 1: \n        return 0 \n    \n    if n == 2: \n        return 1 \n    \n    if n == 3: \n        return 2 \n    \n    if n == 4: \n        return 3 \n    \n    if n == 5: \n        return 4 \n    \n    if n == 6: \n        return 5 \n    \n    if n == 7: \n        return 6 \n    \n    if n == 8: \n        return 7 \n    \n    if n == 9: \n        return 8 \n    \n    if n == 10: \n        return 9 \n    \n    if n == 11: \n        return 10 \n    \n    if n == 12: \n        return 11 \n    \n    if n == 13: \n        return 12 \n    \n    if n == 14: \n        return 13 \n    \n    if n == 15: \n        return 14 \n    \n    if n == 16: \n        return 15 \n    \n    if n == 17: \n        return 16 \n    \n    if n == 18: \n        return 17 \n    \n    if n == 19: \n        return 18 \n    \n    if n == 20: \n        return 19 \n    \n    if n == 21: \n        return 20 \n    \n    if n == 22: \n        return 21 \n    \n    if n == 23: \n        return 22 \n    \n    if n == 24: \n        return 23 \n    \n    if n == 25: \n        return 24 \n    \n    if n == 26: \n        return 25 \n    \n    if n == 27: \n        return 26 \n    \n    if n == 28: \n        return 27 \n    \n    if n == 29: \n        return 28 \n    \n    if n == 30: \n        return 29 \n    \n    if n == 31: \n        return 30 \n    \n    if n == 32: \n        return 31 \n    \n    if n == 33: \n        return 32 \n    \n    if n == 34: \n        return 33 \n    \n    if n == 35: \n        return 34 \n    \n    if n == 36: \n        return 35 \n    \n    if n == 37: \n        return 36 \n    \n    if n == 38: \n        return 37 \n    \n    if n == 39: \n        return 38 \n    \n    if n == 40: \n        return 39 \n    \n    if n == 41: \n        return 40 \n    \n    if n == 42: \n        return 41 \n    \n    if n == 43: \n        return 42 \n    \n    if n == 44: \n        return 43 \n    \n    if n == 45: \n        return 44 \n    \n    if n == 46: \n        return 45 \n    \n    if n == 47: \n        return 46 \n    \n    if n == 48: \n        return 47 \n    \n    if n == 49: \n        return 48 \n    \n    if n == 50: \n        return 49 \n    \n    if n == 51: \n        return 50 \n    \n    if n == 52: \n        return 51 \n    \n    if n == 53: \n        return 52 \n    \n    if n == 54: \n        return 53 \n    \n    if n == 55: \n        return 54 \n    \n    if n == 56: \n        return 55 \n    \n    if n == 57: \n        return 56 \n    \n    if n == 58: \n        return 57 \n    \n    if n == 59: \n        return 58 \n    \n    if n == 60: \n        return 59 \n    \n    if n == 61: \n        return 60 \n    \n    if n == 62: \n        return 61 \n    \n    if n == 63: \n        return 62 \n    \n    if n == 64: \n        return 63 \n    \n    if n == 65: \n        return 64 \n    \n    if n == 66: \n        return 65 \n    \n    if n == 67: \n        return 66 \n    \n    if n == 68: \n        return 67 \n    \n    if n == 69: \n        return 68 \n    \n    if n == 70: \n        return 69 \n    \n    if n == 71: \n        return 70 \n    \n    if n == 72: \n        return 71 \n    \n    if n == 73: \n        return 72 \n    \n    if n == 74: \n        return 73 \n    \n    if n == 75: \n        return 74 \n    \n    if n == 76: \n        return 75 \n    \n    if n == 77: \n        return 76 \n    \n    if n == 78: \n        return 77 \n    \n    if n == 79: \n        return 78 \n    \n    if n == 80: \n        return 79 \n    \n    if n == 81: \n        return 80 \n    \n    if n == 82: \n        return 81 \n    \n    if n == 83: \n        return 82 \n    \n    if n == 84: \n        return 83 \n    \n    if n == 85: \n        return 84 \n    \n    if n == 86: \n        return 85 \n    \n    if n == 87: \n        return 86 \n    \n    if n == 88: \n        return 87 \n    \n    if n == 89: \n        return 88 \n    \n    if n == 90: \n        return 89 \n    \n    if n == 91: \n        return 90 \n    \n    if n == 92: \n        return 91 \n    \n    if n == 93: \n        return 92 \n    \n    if n == 94: \n        return 93 \n    \n    if n == 95: \n        return 94 \n    \n    if n == 96: \n        return 95 \n    \n    if n == 97: \n        return 96 \n    \n    if n == 98: \n        return 97 \n    \n    if n == 99: \n        return 98 \n    \n    if n == 100: \n        return 99 \n    \n    if n == 101: \n        return 100 \n    \n    if n == 102: \n        return 101 \n    \n    if n == 103: \n        return 102 \n    \n    if n == 104: \n        return 103 \n    \n    if n == 105: \n        return 104 \n    \n    if n == 106: \n        return 105 \n    \n    if n == 107: \n        return 106 \n    \n    if n == 108: \n        return 107 \n    \n    if n == 109: \n        return 108 \n    \n    if n == 110: \n        return 109 \n    \n    if n == 111: \n        return 110 \n    \n    if n == 112: \n        return 111 \n    \n    if n == 113: \n        return 112 \n    \n    if n == 114: \n        return 113 \n    \n    if n == 115: \n        return 114 \n    \n    if n == 116: \n        return 115 \n    \n    if n == 117: \n        return 116 \n    \n    if n == 118: \n        return 117 \n    \n    if n == 119: \n        return 118 \n    \n    if n == 120: \n        return 119 \n    \n    if n == 121: \n        return 120 \n    \n    if n == 122: \n        return 121 \n    \n    if n == 123: \n        return 122 \n    \n    if n == 124: \n        return 123 \n    \n    if n == 125: \n        return 124 \n    \n    if n == 126: \n        return 125 \n    \n    if n == 127: \n        return 126 \n    \n    if n == 128: \n        return 127 \n    \n    if n == 129: \n        return 128 \n    \n    if n == 130: \n        return 129 \n    \n    if n == 131: \n        return 130 \n    \n    if n == 132: \n        return 131 \n    \n    if n == 13"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = (4/3) * pi * pow(r,3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # TODO: Your code goes here\n    #       Don't forget to return the result\n    #       (result, error)\n    volume = 4.0 * math.pi * (r ** 3)\n    return volume\ndef area_sphere(r):\n    '''\n    Write a function that finds the area of a sphere.\n    '''\n    # TODO: Your code goes here\n    #       Don't forget to return the result\n    #       (result, error)\n    #       (area, error)\n    area = 4.0 * math.pi * (r ** 2)\n    return area\ndef is_right_angled(r1, r2):\n    '''\n    Write a function that checks whether or not two points are right angled.\n    '''\n    # TODO: Your code goes here\n    #       Don't forget to return the result\n    #       (result, error)\n    #       (is_right, error)\n    is_right = abs(r2[0] - r1[0]) + abs(r2[1] - r1[1]) < math.sqrt(2)\n    return is_right\ndef angle_between_two_vectors(v1, v2):\n    '''\n    Write a function that finds the angle between two vectors.\n    '''\n    # TODO: Your code goes here\n    #       Don't forget to return the result\n    #       (result, error)\n    #       (theta, error)\n    #       (theta_a, error)\n    #       (if theta_a > 180)\n    if is_right_angled(v1, v2):\n        theta = math.atan2((v1[0] - v2[0]), (v1[1] - v2[1]))\n        return theta\n    elif is_right_angled(v2, v1):\n        theta = math.atan2((v2[0] - v1[0]), (v2[1] - v1[1]))\n        return theta\n    elif is_right_angled(v1, v2):\n        theta_a = math.atan2((v1[0] - v2[0]), (v1[1] - v2[1]))\n        theta = theta_a + math.pi / 2\n        return theta\n    else:\n        return math.pi\ndef point_in_sphere(r, p):\n    '''\n    Write a function that checks if a given point is within the sphere.\n    '''\n    # TODO: Your code goes here\n    #       Don't forget to return the result\n    #       (result, error)\n    #       (is_in_sphere, error)\n    is_in_sphere = True\n    if is_right_angled(r, p):\n        # This means the point is in the right angled\n        is_in_sphere = False\n    elif r > 0:\n        if is_right_angled(r, p - r):\n            # This means the point is in the right angled\n            is_in_sphere = False\n    else:\n        if is_right_angled(r, p - r):\n            # This means the point is in the right angled\n            is_in_sphere = False\n    return is_in_sphere\ndef distance_to_line(p1, p2):\n    '''\n    Write a function that returns the distance between two points.\n    '''\n    # TODO: Your code goes here\n    #       Don't forget to return the result\n    #       (result, error)\n    #       (distance, error)\n    if p1[0] == p2[0]:\n        # This means the two points are on the same axis\n        distance = p1[0]\n    else:\n        # This means p1 and p2 are on different axes\n        distance = p2[0] - p1[0]\n    return distance\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * (r ** 3)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (2 * math.pi * r ** 2) * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4 * math.pi * r ** 2) * (h ** 2)\ndef volume_obstacle(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r * math.pow(r, 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4 * math.pi * (r**2)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4 * math.pi * (r**2)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c=3.14159*(r**3)\n    volume=c*r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    s=3.14*(r**3)\n    return s\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159\n    v = pi * (r**2)\n    print(f'volume of a sphere of radius {r} is {v:.3f}')\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * (r ** 3)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    ascii_val = strr.count(chr(ord(strr[0]) % 26 + ord('a')))\n    return ascii_val\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_arr = []\n    for char in strr:\n        char_arr.append(ord(char))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = \"\"\n    for c in strr:\n        res += chr(ord(c) % 26 + ord('a'))\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    '''\n    For this exercise, we'll assume that the input string is made of lowercase letters only. \n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    Now, take a look at the documentation for the Python string method:\n    '''\n    '''\n    This method is the same as the built-in method upper().\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    In order to find the character made by adding the ASCII value of all the characters of the given string, you must convert each character of the string to a corresponding number. \n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    Let\u2019s write a python function that takes a string and returns a new string made of the characters in the input string with all the characters of the string in reverse order, starting with the ASCII value of the first character in the input string.\n    '''\n    '''\n    For this exercise, we'll assume that the input string is made of lowercase letters only.\n    '''\n    '''\n    In this function, let\u2019s assume that the input string is made of lowercase letters only.\n    '''\n    '''\n    Then, let\u2019s convert the given string to a new one using the reverse of the ASCII value of the character.\n    '''\n    '''\n    Let\u2019s see how this method is used:\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    Let\u2019s get a look at the documentation for the Python string method:\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method reverse().\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    This method is the same as the built-in method __getitem__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattr__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattribute__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    This method is the same as the built-in method __getitem__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattr__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    This method is the same as the built-in method __getattribute__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getitem__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattr__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattribute__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattr__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattribute__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattr__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __getattr__()\n    '''\n    '''\n    The help documentation is available at this link:\n    https://docs.python.org/3/library/functions.html#functions\n    '''\n    '''\n    The input string is made of lowercase letters only.\n    (e.g. \u201chello world\u201d).\n    '''\n    '''\n    This method is the same as the built-in method __ge"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    List1 = list(strr)\n    List1 = [ord(i)%26 for i in List1]\n    return(List1)\n    \n    \n    \ndef main():\n    '''\n    This function takes the list of list that contains the nth decimal value from the list of strings from the file\n    and outputs the binary representation of the nth decimal value.\n    '''\n    def check_comp(n):\n        '''\n        Write a python function that takes a list of n integers, and returns the list of list of binary values that sum to \n        the nth decimal value.\n        '''\n        List = []\n        for i in range(len(nums)):\n            List.append(get_Char(nums[i]))\n        Sum = 0\n        for i in range(len(List)):\n            Sum = Sum + List[i]%26\n        Sum = Sum%n\n        return(List)\n    #Code here\n    n = int(input(\"Enter the n: \"))\n    nums = []\n    with open(\"input.txt\") as f:\n        for line in f:\n            nums.append(line)\n    print(nums)\n    print(check_comp(n))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str1 = ''\n    for i in strr:\n        if i >= '0' and i <= '9':\n            str1 += chr(ord(i)%26)\n        elif i >= 'A' and i <= 'Z':\n            str1 += chr(ord(i)%26)\n        else:\n            str1 += i\n    print(str1)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = ''\n    for i in strr:\n        res += chr(ord(i)%26 + 65)\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    my_dict = {}\n    for char in strr:\n        my_dict[char] = ord(char) % 26\n    print(my_dict)\n    return my_dict\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # I made a function that will return the character at the given index i.e. print the character at the given index\n    def get_Char_mod(i):\n        if i==0:\n            return \" \"\n        else:\n            return chr(i%26)\n    # I made a function that will return the characters of the given string\n    def get_String(string):\n        if string==' ':\n            return string\n        else:\n            return string+get_Char_mod(ord(string[i-1]))\n    # I made a function that will return the characters of the given string that are not equal to the given string\n    def get_Not_String(string, strr):\n        if string==strr:\n            return string\n        else:\n            return str(ord(string[i-1])-ord(strr[i-1]))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    if n % 2 == 1: \n        return sequence(n//2) + sequence(n//2) \n    return n + sequence(n-1) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n > 1:\n        a = n - 1\n        while a > 0:\n            if a % 2 == 0:\n                return a\n            a /= 2\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def check(x): \n        return 0 <= x < n \n    \n    def flipper(x): \n        return x + n - 1\n    \n    return max(flipper(n), check(n) - 1)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    lst = [1] \n    for i in range(n): \n        lst.append(lst[i]+lst[i+1]) \n    return lst[-1] \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n == 4: \n        return 4\n    if n == 5: \n        return 5\n    if n == 6: \n        return 6\n    if n == 7: \n        return 7\n    if n == 8: \n        return 8\n    if n == 9: \n        return 9\n    if n == 10: \n        return 10\n    if n == 11: \n        return 11\n    if n == 12: \n        return 12\n    if n == 13: \n        return 13\n    if n == 14: \n        return 14\n    if n == 15: \n        return 15\n    if n == 16: \n        return 16\n    if n == 17: \n        return 17\n    if n == 18: \n        return 18\n    if n == 19: \n        return 19\n    if n == 20: \n        return 20\n    if n == 21: \n        return 21\n    if n == 22: \n        return 22\n    if n == 23: \n        return 23\n    if n == 24: \n        return 24\n    if n == 25: \n        return 25\n    if n == 26: \n        return 26\n    if n == 27: \n        return 27\n    if n == 28: \n        return 28\n    if n == 29: \n        return 29\n    if n == 30: \n        return 30\n    if n == 31: \n        return 31\n    if n == 32: \n        return 32\n    if n == 33: \n        return 33\n    if n == 34: \n        return 34\n    if n == 35: \n        return 35\n    if n == 36: \n        return 36\n    if n == 37: \n        return 37\n    if n == 38: \n        return 38\n    if n == 39: \n        return 39\n    if n == 40: \n        return 40\n    if n == 41: \n        return 41\n    if n == 42: \n        return 42\n    if n == 43: \n        return 43\n    if n == 44: \n        return 44\n    if n == 45: \n        return 45\n    if n == 46: \n        return 46\n    if n == 47: \n        return 47\n    if n == 48: \n        return 48\n    if n == 49: \n        return 49\n    if n == 50: \n        return 50\n    if n == 51: \n        return 51\n    if n == 52: \n        return 52\n    if n == 53: \n        return 53\n    if n == 54: \n        return 54\n    if n == 55: \n        return 55\n    if n == 56: \n        return 56\n    if n == 57: \n        return 57\n    if n == 58: \n        return 58\n    if n == 59: \n        return 59\n    if n == 60: \n        return 60\n    if n == 61: \n        return 61\n    if n == 62: \n        return 62\n    if n == 63: \n        return 63\n    if n == 64: \n        return 64\n    if n == 65: \n        return 65\n    if n == 66: \n        return 66\n    if n == 67: \n        return 67\n    if n == 68: \n        return 68\n    if n == 69: \n        return 69\n    if n == 70: \n        return 70\n    if n == 71: \n        return 71\n    if n == 72: \n        return 72\n    if n == 73: \n        return 73\n    if n == 74: \n        return 74\n    if n == 75: \n        return 75\n    if n == 76: \n        return 76\n    if n == 77: \n        return 77\n    if n == 78: \n        return 78\n    if n == 79: \n        return 79\n    if n == 80: \n        return 80\n    if n == 81: \n        return 81\n    if n == 82: \n        return 82\n    if n == 83: \n        return 83\n    if n == 84: \n        return 84\n    if n == 85: \n        return 85\n    if n == 86: \n        return 86\n    if n == 87: \n        return 87\n    if n == 88: \n        return 88\n    if n == 89: \n        return 89\n    if n == 90: \n        return 90\n    if n == 91: \n        return 91\n    if n == 92: \n        return 92\n    if n == 93: \n        return 93\n    if n == 94: \n        return 94\n    if n == 95: \n        return 95\n    if n == 96: \n        return 96\n    if n == 97: \n        return 97\n    if n == 98: \n        return 98\n    if n == 99: \n        return 99\n    if n == 100: \n        return 100\n    if n == 101: \n        return 101\n    if n == 102: \n        return 102\n    if n == 103: \n        return 103\n    if n == 104: \n        return 104\n    if n == 105: \n        return 105\n    if n == 106: \n        return 106\n    if n == 107: \n        return 107\n    if n == 108: \n        return 108\n    if n == 109: \n        return 109\n    if n == 110: \n        return 110\n    if n == 111: \n        return 111\n    if n == 112: \n        return 112\n    if n == 113: \n        return 113\n    if n == 114: \n        return 114\n    if n == 115: \n        return 115\n    if n == 116: \n        return 116\n    if n == 117: \n        return 117\n    if n == 118: \n        return 118\n    if n == 119: \n        return 119\n    if n == 120: \n        return 120\n    if n == 121: \n        return 121\n    if n == 122: \n        return 122\n    if n == 123: \n        return 123\n    if n == 124: \n        return 124\n    if n == 125: \n        return 125\n    if n == 126: \n        return 126\n    if n == 127: \n        return 127\n    if n == 128: \n        return 128\n    if n == 129: \n        return 129\n    if n == 130: \n        return 130\n    if n == 131: \n        return 131\n    if n == 132: \n        return 132\n    if n == 133: \n        return 133\n    if n == 134: \n        return 134\n    if n == 135: \n        return 135\n    if n == 136: \n        return 136\n    if n == 137: \n        return 137\n    if n == 138: \n        return 138\n    if n == 139: \n        return 139\n    if n == 140: \n        return 140\n    if n == 141: \n        return 141\n    if n == 142: \n        return 142\n    if n == 143: \n        return 143\n    if n == 144: \n        return 144\n    if n == 145: \n        return 145\n    if n == 146: \n        return 146\n    if n == 147: \n        return 147\n    if n == 148: \n        return 148\n    if n == 149: \n        return 149\n    if n == 150: \n        return 150\n    if n == 151: \n        return 151\n    if n == 152: \n        return 152\n    if n == 153: \n        return 153\n    if n == 154: \n        return 154\n    if n == 155: \n        return 155\n    if n == 156: \n        return 156\n    if n == 157: \n        return 157\n    if n == 158: \n        return 158\n    if n == 159: \n        return 159\n    if n == 160: \n        return 160\n    if n == 161: \n        return 161\n    if n == 162: \n        return 162\n    if n == 163: \n        return 163\n    if n == 164: \n        return 164\n    if n == 165: \n        return 165\n    if n == 166: \n        return 166\n    if n == 167: \n        return 167\n    if n == 168: \n        retur"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90] \n    # e = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n    l1 = []\n    l2 = []\n    for i in range(1, n + 1):\n        l1.append(i)\n    for i in range(len(l1)):\n        l2.append(l1[i])\n    return l2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    result = 0\n    i = 1\n    while i < n: \n        result += i\n        i *= 10\n    return result \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    def four_digit_conway():\n        if n < 2:\n            return [0]\n        elif n == 2:\n            return [0, 0]\n        else:\n            first, second = 0, n % 10\n            if n % 10 <= 4:\n                first = 4\n            else:\n                first = 4\n                second = n % 10\n            return four_digit_conway() + [first] + [second] + four_digit_conway()\n    \n    conway = four_digit_conway()\n    for i in range(0, n + 1):\n        conway.append(conway[i % len(conway)])\n    return conway[-1]\n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = [0 for i in range(n+1)]\n    a[0] = 1\n    for i in range(2, n+1):\n        a[i] = a[i-1] + a[i-2]\n    return a[n]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (r**3)*math.pi\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 0.5 * math.pi * r**2\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    m = 3.14\n    area = 4*m*r*r*math.pi\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 2*pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 3.14 * (r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here\n    x = (2 * (r ** 2)) + 1\n    s = (x * math.pi) * (r ** 3)\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 2 * math.pi * r ** 3\n    print(f'The surface area of a sphere is {s}.')\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    r = float(r)\n    area = (3.14*r*r)*math.pi\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #Calculate the base of the sphere\n    base=3.14*r**2\n    #Calculate volume\n    volume=4*3.14*(r**3)\n    #Calculate the volume of the sphere\n    return base*volume\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # TODO: Complete this function\n    # Return surface area of sphere\n    # Tip: Use math.pi * r**2 to calculate area\n    return 0.5 * r * math.pi * (r**2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = 0\n    while(n > h):\n        h = (n - 1) // 6\n    return h * 6\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return (n * centered_hexagonal_number(n-1))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    for j in range(n,0,-1):\n        if j > 3:\n            break\n        if j % 2 == 1:\n            return n\n        elif j % 2 == 0:\n            return n + j//2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n + 0.5) * 6\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*6)+1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # n is the variable to be created\n    # length of hexagon is defined by n/3 and then n/3, i.e. n is the number of hexagons \n    # (must be odd)\n    # always return an integer\n    \n    # define variables\n    n = n/3\n    length = n*3\n    # define the loop\n    for k in range(0, length):\n        # define a variable with the middle value of hexagon\n        m = (k*3)+1\n        # define a variable with the side value of hexagon\n        s = (k+1)*3-1\n        # create the variable to be returned\n        return(n*(m-s)+(s+m))"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #Hint: Think about the algorithm to find the nth centered hexagonal number\n    return (3 * n) + 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    number = int(n / 2)\n    if n < 0:\n        return 'Not a valid number'\n    else:\n        for i in range(number):\n            print(int(n / 6 * i))\n        \ncentered_hexagonal_number(10)\ncentered_hexagonal_number(12)\ncentered_hexagonal_number(14)\ncentered_hexagonal_number(16)\ncentered_hexagonal_number(17)\ncentered_hexagonal_number(18)\ncentered_hexagonal_number(19)\ncentered_hexagonal_number(20)\ncentered_hexagonal_number(21)\ncentered_hexagonal_number(22)\ncentered_hexagonal_number(23)\ncentered_hexagonal_number(24"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # define a function\n    def hexagonal(n):\n        \"\"\"\n        print(n)\n        for _ in range(n):\n            print('*')\n        \"\"\"\n        for _ in range(n):\n            print(\" \", end=\"\")\n        print(\"*\")\n    if n == 1:\n        hexagonal(n)\n    elif n == 2:\n        hexagonal(n/2)\n        hexagonal(3*n/2)\n    else:\n        hexagonal(n/6)\n        hexagonal(3*n/6)\n        hexagonal(6*n/6)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    m = n % 12\n    if m == 0:\n        return 0\n    elif m == 1:\n        return 1\n    elif m == 2:\n        return 3\n    elif m == 3:\n        return 5\n    elif m == 4:\n        return 7\n    elif m == 5:\n        return 9\n    elif m == 6:\n        return 11\n    elif m == 7:\n        return 13\n    elif m == 8:\n        return 15\n    elif m == 9:\n        return 17\n    elif m == 10:\n        return 19\n    elif m == 11:\n        return 21\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict\ndef set_current_block_time(block_time):\n    '''\n    Set current block time\n    '''\n    print(f'Current block time: {block_time}')\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary\n    merged = {}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    # take out the values which have the same key\n    # we dont need to be concerned about the value, it's just a key\n    # so we can return it\n    # if we have two dictionaries then we combine them into one\n    # e.g. a = {'a': {'x': 0}} and b = {'a': {'x': 0}} then we will have a = {'x': 0, 'a': {'x': 0}}\n    # so a = a or b = a or b\n    # we will return {'a': {'x': 0}, 'b': {'x': 0}}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {k:dict1[k]+dict2[k]+dict3[k] for k in dict1 if k in dict2 and k in dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # TODO: Combine the dictionaries\n    # TODO: Merge the dictionaries\n    # TODO: Return the merged dictionary\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for i in dict1:\n        if i in dict2:\n            merged_dict[i] = dict2[i]\n    for i in dict3:\n        if i in dict2:\n            merged_dict[i] = dict2[i]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for item in dict1.values():\n        for key in dict2.keys():\n            res[key] = item[key]\n    for item in dict2.values():\n        for key in dict3.keys():\n            res[key] = item[key]\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for k,v in dict1.items():\n        if k in dict2:\n            merged[k] = dict2[k] + dict1[k]\n        else:\n            merged[k] = dict1[k]\n    for k,v in dict2.items():\n        if k in dict1:\n            merged[k] = dict1[k] + dict2[k]\n        else:\n            merged[k] = dict2[k]\n    for k,v in dict3.items():\n        if k in dict1:\n            merged[k] = dict1[k] + dict3[k]\n        else:\n            merged[k] = dict3[k]\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    for k,v in dict1.items():\n        merged[k]=v\n    for k,v in dict2.items():\n        merged[k]=v\n    for k,v in dict3.items():\n        merged[k]=v\n    return merged\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq=dict()\n    for i in range(0,len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]]+=1\n        else:\n            freq[list1[i]]=1\n    return freq\n    # return dic\n    # for i in range(0,len(list1)):\n    #     if list1[i] in freq:\n    #         freq[list1[i]]+=1\n    #     else:\n    #         freq[list1[i]]=1\n    # return freq\ndef frequency_list(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq=dict()\n    for i in range(0,len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]]+=1\n        else:\n            freq[list1[i]]=1\n    return freq\n    # return dic\n    # for i in range(0,len(list1)):\n    #     if list1[i] in freq:\n    #         freq[list1[i]]+=1\n    #     else:\n    #         freq[list1[i]]=1\n    # return freq\ndef find_max_freq(dic):\n    '''\n    Find the highest value of a dictionary.\n    '''\n    max_freq=0\n    for k,v in dic.items():\n        if v>max_freq:\n            max_freq=v\n    return max_freq\ndef find_smallest_freq(dic):\n    '''\n    Find the smallest value of a dictionary.\n    '''\n    min_freq=0\n    for k,v in dic.items():\n        if v<min_freq:\n            min_freq=v\n    return min_freq\ndef mean(list1):\n    '''\n    Find the mean of a list of numbers.\n    '''\n    total=0\n    for i in range(0,len(list1)):\n        total+=list1[i]\n    return total/len(list1)\ndef median(list1):\n    '''\n    Find the median of a list of numbers.\n    '''\n    l=len(list1)\n    if l%2==0:\n        return (list1[int(l/2)]+list1[int(l/2)-1])/2\n    else:\n        return list1[int(l/2)]\ndef mode(list1):\n    '''\n    Find the most common element in a list of numbers.\n    '''\n    max_v=find_max_freq(frequency_list(list1))\n    mode_dic=dict()\n    for i in range(0,len(list1)):\n        if list1[i]==max_v:\n            mode_dic[i]=list1[i]\n    if len(mode_dic)<=1:\n        return None\n    else:\n        return mode_dic.values()\ndef make_dict(list1):\n    '''\n    Return a dictionary with all the elements of a list.\n    '''\n    dic=dict()\n    for i in range(0,len(list1)):\n        dic[list1[i]]=1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    new_dict = {}\n    for element in list1:\n        new_dict[element] = list1.count(element)\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dic = collections.Counter(list1)\n    return count_dic\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\n    \nprint(freq_count([2,4,6,8,10]))\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    temp_dict = {}\n    for element in list1:\n        if element in temp_dict:\n            temp_dict[element] += 1\n        else:\n            temp_dict[element] = 1\n    return temp_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for elem in list1:\n        if elem in freq:\n            freq[elem]+=1\n        else:\n            freq[elem]=1\n    return freq\n    \ndef frequency_sort(freq):\n    '''\n    Write a function to sort the elements in a dictionary. The list of elements should be sorted by their frequency.\n    '''\n    sorted_freq={}\n    for elem in freq:\n        if elem not in sorted_freq:\n            sorted_freq[elem]=0\n        sorted_freq[elem]+=1\n    sorted_freq=sorted(sorted_freq.items(),key=lambda item:item[1],reverse=True)\n    return sorted_freq\n    \ndef print_dictionary(freq):\n    '''\n    Write a function to print out the frequency of all the elements in a dictionary.\n    '''\n    for key, value in freq:\n        print(key,\":\",value)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for el in list1:\n        if el in freq_dict:\n            freq_dict[el] += 1\n        else:\n            freq_dict[el] = 1\n    return freq_dict\n    \ndef majority_element(list1):\n    '''\n    Write a function to get the majority element in a list.\n    '''\n    maj_element_dict = collections.Counter(list1)\n    for el in maj_element_dict:\n        if maj_element_dict[el] > len(list1) / 2:\n            return el\n    \ndef inter_elements(list1, list2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    list1.sort()\n    list2.sort()\n    common_elements = []\n    for el in list1:\n        if el in list2:\n            common_elements.append(el)\n    return common_elements\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    print(freq_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Initialize the dictionary\n    freq = collections.Counter(list1)\n    # Print the dictionary\n    print(freq)\n    # Return the dictionary\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    freq_dict = collections.OrderedDict(sorted(freq_dict.items(),key=lambda t:t[1]))\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 1000\n    closest_index = 0\n    for i in range(N):\n        if nums[i] > nums[closest_index]:\n            closest = i\n            closest_index = i\n    return closest_index\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Print the first three values\n    print(\"N:\", N)\n    \n    # Determine if the number is a perfect number\n    is_perfect_number = True\n    for i in range(2, N+1):\n        if (N%i) == 0:\n            is_perfect_number = False\n    \n    if is_perfect_number:\n        # If the number is a perfect number, return the number\n        return N\n    else:\n        # Else, return the closest smaller number\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = []\n    for i in range(1, N + 1):\n        num_list.append(i)\n    num_list.sort()\n    index = -1\n    for i in range(N):\n        if num_list[i] == num_list[index]:\n            index -= 1\n    return num_list[index]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(0,N):\n        if(abs(i-int(i))<i):\n            return i\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_smaller(num):\n        if num % 10 == 0:\n            return True\n        return False\n    \n    def closest(num):\n        if num == 1:\n            return num\n        if is_smaller(num):\n            return num - 1\n        return num + 1\n    \n    smaller_nums = set(map(closest, range(1,N+1)))\n    return min(smaller_nums)"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 1\n    elif N == 1:\n        return N\n    else:\n        l = closest_num(N-1)\n        r = closest_num(N-2)\n        if l > r:\n            return N\n        else:\n            return l + 1\n    \ndef main():\n    '''\n    For testing.\n    '''\n    print(closest_num(5))\n    print(closest_num(4))\n    print(closest_num(3))\n    print(closest_num(2))\n    print(closest_num(1))\n    print(closest_num(0))\n    print(closest_num(5))\n    print(closest_num(4))\n    print(closest_num(3))\n    print(closest_num(2))\n    print(closest_num(1))\n    print(closest_num(0))\n    print(closest_num(5))\n    print(closest_num(4))\n    print(closest_num(3))\n    print(closest_num(2))\n    print(closest_num(1))\n    print(closest_num(0))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # your code here\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def num_closest(n):\n        '''\n        Find the closest number.\n        '''\n        closest = n\n        for i in range(N):\n            if num_closest(i) < num_closest(closest):\n                closest = i\n        return closest\n    return num_closest(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return 2**(N+1) - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num1(n):\n        '''\n        Write a function that takes a number as a parameter and finds the closest number to that number\n        '''\n        pass\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # Your code here\n    \n    print(\"This function returns the length of the longest word in list.\")\n    return(len(max(list1, key = len)))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in list1:\n        if(len(i) > length):\n            length = len(i)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(list1, key=len)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return max(dict1, key=dict1.get)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"LENGTH OF THE LONGEST WORD: \", end=\"\")\n    print(max(map(len, list1)))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 == None:\n        return\n    else:\n        if len(list1) == 1:\n            print(\"the length of the longest word is: \", len(list1[0]))\n            return\n        elif len(list1) > 1:\n            print(\"the length of the longest word is: \", len(list1[0]))\n            len_log(list1[1:])\n        else:\n            print(\"the length of the longest word is: \", len(list1[0]))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if sub_str in str1[i:]:\n            print(str1[i:])\n            return True\n    print(str1)\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    substring = []\n    for word in sub_str:\n        word_list = list(word)\n        for i in range(len(str1)):\n            if str1[i:i+len(word)] == word_list:\n                substring.append(word)\n                break\n    return substring\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #convert the string to lowercase\n    sub_str = sub_str.lower()\n    #search for the string in the string using index\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if(len(str1) <= 0):\n        return False\n    for char in sub_str:\n        if(char in str1):\n            return True\n    return False\n    \ndef check_substring(str1, sub_str):\n    '''\n    Given a string and a substring, write a function that returns True if\n    the substring is present in the given string and False otherwise.\n    '''\n    if(len(str1) <= 0):\n        return False\n    \n    for char in sub_str:\n        if(char in str1):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1.find(sub) >= 0 for sub in sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Initialize an empty array\n    arr = []\n    # Iterate through the string\n    for i in range(0, len(str1)):\n        # Append the characters of the string at the current position\n        arr.append(str1[i:i+len(sub_str)])\n    # Check if substring is present in the array\n    for i in arr:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # your code goes here\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str) >= 0:\n        print(\"Present\")\n        return\n    else:\n        print(\"Not Present\")\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #s1 = \"ababcbacadefegdehijhklsdfghjklmnoqtuvwxyz\"\n    #s2 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s3 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s4 = \"ababcbacadefegdehijhklsdfghjklmnoqtuvwxyz\"\n    #s5 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s6 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s7 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s8 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s9 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s10 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s11 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s12 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s13 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s14 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s15 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s16 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s17 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s18 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s19 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s20 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s21 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s22 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s23 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s24 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s25 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s26 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s27 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s28 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s29 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s30 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s31 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s32 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s33 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s34 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s35 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s36 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s37 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s38 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s39 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s40 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s41 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s42 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s43 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s44 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s45 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s46 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s47 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s48 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s49 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s50 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s51 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s52 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s53 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s54 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s55 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s56 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s57 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s58 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s59 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s60 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s61 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s62 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s63 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s64 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s65 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s66 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s67 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s68 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s69 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s70 = \"abcdefghijklmnopqrstuvwxyz\"\n    #s71 = \"ababcbacadefegdehijhklsdfghjklmnopqrstuvwxyz\"\n    #s72 = \"abcdefghijklmnopqrstuvwxyz\"\n    "
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    dict = {}\n    result = 0\n    for i in range(len(str1)):\n        if str1[i] in dict.keys():\n            dict[str1[i]] += 1\n        else:\n            dict[str1[i]] = 1\n    for key in dict.keys():\n        if dict[key] >= sub_str:\n            result += 1\n    return result\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False\ndef is_sum_duplicated(n): \n    '''\n    Write a function to check whether the given number is a sum \n    of duplicates or not.\n    '''\n    count = 0\n    for i in range(1, n + 1): \n        if n % i == 0: \n            count += 1\n            if count == 2: \n                return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    elif n < 10:\n        return True\n    else:\n        return n % 10 > 9\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%4==0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not (abs(n) % 3 == 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n<0: \n        print(n, \"is negative\") \n        return False\n    elif n==0: \n        print(n, \"is zero\") \n        return True\n    elif n==1: \n        print(n, \"is one\") \n        return True\n    elif n==2: \n        print(n, \"is two\") \n        return True\n    elif n==3: \n        print(n, \"is three\") \n        return True\n    elif n==4: \n        print(n, \"is four\") \n        return True\n    elif n==5: \n        print(n, \"is five\") \n        return True\n    elif n==6: \n        print(n, \"is six\") \n        return True\n    elif n==7: \n        print(n, \"is seven\") \n        return True\n    elif n==8: \n        print(n, \"is eight\") \n        return True\n    elif n==9: \n        print(n, \"is nine\") \n        return True\n    elif n==10: \n        print(n, \"is ten\") \n        return True\n    elif n==11: \n        print(n, \"is eleven\") \n        return True\n    elif n==12: \n        print(n, \"is twelve\") \n        return True\n    elif n==13: \n        print(n, \"is thirteen\") \n        return True\n    elif n==14: \n        print(n, \"is fourteen\") \n        return True\n    elif n==15: \n        print(n, \"is fifteen\") \n        return True\n    elif n==16: \n        print(n, \"is sixteen\") \n        return True\n    elif n==17: \n        print(n, \"is seventeen\") \n        return True\n    elif n==18: \n        print(n, \"is eighteen\") \n        return True\n    elif n==19: \n        print(n, \"is nineteen\") \n        return True\n    elif n==20: \n        print(n, \"is twenty\") \n        return True\n    elif n==21: \n        print(n, \"is twenty one\") \n        return True\n    elif n==22: \n        print(n, \"is twenty two\") \n        return True\n    elif n==23: \n        print(n, \"is twenty three\") \n        return True\n    elif n==24: \n        print(n, \"is twenty four\") \n        return True\n    elif n==25: \n        print(n, \"is twenty five\") \n        return True\n    elif n==26: \n        print(n, \"is twenty six\") \n        return True\n    elif n==27: \n        print(n, \"is twenty seven\") \n        return True\n    elif n==28: \n        print(n, \"is twenty eight\") \n        return True\n    elif n==29: \n        print(n, \"is twenty nine\") \n        return True\n    elif n==30: \n        print(n, \"is twenty ten\") \n        return True\n    elif n==31: \n        print(n, \"is twenty eleven\") \n        return True\n    elif n==32: \n        print(n, \"is twenty twelve\") \n        return True\n    elif n==33: \n        print(n, \"is twenty thirteen\") \n        return True\n    elif n==34: \n        print(n, \"is twenty fourteen\") \n        return True\n    elif n==35: \n        print(n, \"is twenty fifteen\") \n        return True\n    elif n==36: \n        print(n, \"is twenty sixteen\") \n        return True\n    elif n==37: \n        print(n, \"is twenty seventeen\") \n        return True\n    elif n==38: \n        print(n, \"is twenty eighteen\") \n        return True\n    elif n==39: \n        print(n, \"is twenty nineteen\") \n        return True\n    elif n==40: \n        print(n, \"is twenty twenty\") \n        return True\n    elif n==41: \n        print(n, \"is twenty twenty one\") \n        return True\n    elif n==42: \n        print(n, \"is twenty twenty two\") \n        return True\n    elif n==43: \n        print(n, \"is twenty twenty three\") \n        return True\n    elif n==44: \n        print(n, \"is twenty twenty four\") \n        return True\n    elif n==45: \n        print(n, \"is twenty twenty five\") \n        return True\n    elif n==46: \n        print(n, \"is twenty twenty six\") \n        return True\n    elif n==47: \n        print(n, \"is twenty twenty seven\") \n        return True\n    elif n==48: \n        print(n, \"is twenty twenty eight\") \n        return True\n    elif n==49: \n        print(n, \"is twenty twenty nine\") \n        return True\n    elif n==50: \n        print(n, \"is twenty twenty ten\") \n        return True\n    elif n==51: \n        print(n, \"is twenty twenty eleven\") \n        return True\n    elif n==52: \n        print(n, \"is twenty twenty twelve\") \n        return True\n    elif n==53: \n        print(n, \"is twenty twenty thirteen\") \n        return True\n    elif n==54: \n        print(n, \"is twenty twenty fourteen\") \n        return True\n    elif n==55: \n        print(n, \"is twenty twenty fifteen\") \n        return True\n    elif n==56: \n        print(n, \"is twenty twenty sixteen\") \n        return True\n    elif n==57: \n        print(n, \"is twenty twenty seventeen\") \n        return True\n    elif n==58: \n        print(n, \"is twenty twenty eighteen\") \n        return True\n    elif n==59: \n        print(n, \"is twenty twenty nineteen\") \n        return True\n    elif n==60: \n        print(n, \"is twenty twenty twenty\") \n        return True\n    elif n==61: \n        print(n, \"is twenty twenty twenty one\") \n        return True\n    elif n==62: \n        print(n, \"is twenty twenty twenty two\") \n        return True\n    elif n==63: \n        print(n, \"is twenty twenty twenty three\") \n        return True\n    elif n==64: \n        print(n, \"is twenty twenty twenty four\") \n        return True\n    elif n==65: \n        print(n, \"is twenty twenty twenty five\") \n        return True\n    elif n==66: \n        print(n, \"is twenty twenty twenty six\") \n        return True\n    elif n==67: \n        print(n, \"is twenty twenty twenty seven\") \n        return True\n    elif n==68: \n        print(n, \"is twenty twenty twenty eight\") \n        return True\n    elif n==69: \n        print(n, \"is twenty twenty twenty nine\") \n        return True\n    elif n==70: \n        print(n, \"is twenty twenty twenty ten\") \n        return True\n    elif n==71: \n        print(n, \"is twenty twenty twenty eleven\") \n        return True\n    elif n==72: \n        print(n, \"is twenty twenty twenty twelve\") \n        return True\n    elif n==73: \n        print(n, \"is twenty twenty twenty thirteen\") \n        return True\n    elif n==74: \n        print(n, \"is twenty twenty twenty fourteen\") \n        return True\n    elif n==75: \n        print(n, \"is twenty twenty twenty fifteen\") \n        return True\n    elif n==76: \n        print(n, \"is twenty twenty twenty sixteen\") \n        return True\n    elif n==77: \n        print(n, \"is twenty twenty twenty seventeen\") \n        return True\n    elif n==78"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n % 2 == 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0: \n        k = n - 1\n        while k > 0: \n            if k % 2 == 0:\n                return False\n            else:\n                k //= 2\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    if n % 2!= 0:\n        return False\n    # Check for odd numbers using recursion\n    return is_undulating(n - 1) or is_undulating(n / 2)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return (a ** b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    elif b == 1:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    c = 1\n    if b==0:\n        return 1\n    elif b>0:\n        while b>0:\n            c = a*c\n            a = b\n            b = c\n    else:\n        while b>0:\n            c = c*a\n            a = b\n            b = c\n    return c\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    c=a**b\n    return c\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \ndef my_function(a):\n    '''\n    Write a function that takes two parameters 'a' and 'b' and returns the value of 'a' to the power of 'b'.\n    '''\n    # YOUR CODE HERE\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = test_list[0]\n    for tuple in test_list:\n        if tuple[1] < result[1]:\n            result = tuple\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    # For your reference:\n    #    [(10, 3), (2, 5), (3, 1), (4, 6), (7, 3), (6, 6), (6, 7), (6, 8), (6, 9)]\n    #\n    # Output: 3\n    #\n    # For this question, the reference answer is not included, but you are welcome to add it.\n    # Write a function named minimum_element_index that accepts a list of tuples as an argument.\n    # Your function should return the index of the element with the smallest second value.\n    #\n    # You may not modify the lines of code in any way beyond those marked with #ifndef and #endif\n    #\n    # You are welcome to add code using these formatting guides:\n    #    https://www.w3resource.com/python-exercises/python-basic-exercises.php\n    #    https://www.w3resource.com/python-exercises/python-basic-exercises.php?language=Python\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # create a sorted list from the tuples\n    test_list.sort(key=itemgetter(1))\n    #get the index of the first value in the list\n    minimum = test_list[0][0]\n    # loop through the sorted list and\n    for index, element in enumerate(test_list):\n        if minimum > element[0]:\n            minimum = element[0]\n            index_smallest_element = index\n    return minimum, index_smallest_element\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def index_minimum_value(val, map):\n        if val not in map:\n            return -1\n        else:\n            return map[val]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code goes here\n    if len(test_list) == 0:\n        return None\n    min_val = test_list[0][0]\n    min_idx = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n            min_idx = i\n    return min_val, min_idx\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_first = test_list[0][0]\n    smallest_second = test_list[0][1]\n    for item in test_list:\n        if item[1] < smallest_second:\n            smallest_second = smallest_second\n            smallest_first = item[0]\n    return smallest_first\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest_second = []\n    for item in test_list:\n        if item[1] > item[0]:\n            smallest_second.append(item)\n    return smallest_second[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    t = sorted(test_list)\n    for i in range(len(t)-1):\n        if t[i][1] > t[i+1][1]:\n            return t[i]\n    return t[0]\ndef index_minimum_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    t = sorted(test_list, key=itemgetter(1))\n    for i in range(len(t)-1):\n        if t[i][1] > t[i+1][1]:\n            return t[i]\n    return t[0]\ndef prime_factorization(num):\n    '''\n    Given a number, find all the prime factors of it.\n    '''\n    \n    # Return a list of all the prime factors. \n    # Make sure your list only contains integers.\n    '''\n    prime_list = []\n    for i in range(2, num+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime_list.append(i)\n    '''\n    # Prime factorization using backtracking algorithm\n    # Write a backtracking function to solve for prime factors.\n    # If the current number is a prime factor, return that number.\n    # Otherwise, check if the next number can be divided by the previous number.\n    # Repeat until the next number is a prime factor.\n    # Return a list of all the prime factors.\n    \n    # Your function should return a list of prime factors, not the original list of numbers.\n    \n    def prime_factorization(number):\n        # If the next number is a prime factor, return it\n        # Else, check if the next number can be divided by the previous number\n        # Repeat until the next number is a prime factor.\n        # Return a list of prime factors.\n        \n        # Check if the next number can be divided by the previous number\n        # If so, return it\n        # Else, return the original numbers\n        \n        # For this problem, we want to know if the next number is prime or not, and return only if it's not prime.\n        # If the next number is prime, return the next number.\n        # If it's not prime, return the next number.\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    my_list = sorted(test_list, key=itemgetter(1,2))\n    return my_list[0][1]\n    # note: you can use any sort function to order the test list \n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return min(len(lst), Find_Min_Length(lst[1:]))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100000\n    min_index = 0\n    for index, item in enumerate(lst):\n        if len(item) < min_length:\n            min_length = len(item)\n            min_index = index\n    return min_index, min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # sort the list in ascending order\n    lst.sort()\n    length = len(lst)\n    # check if the length is equal to zero or not\n    if length == 0:\n        return 0\n    # check if the length is odd or not\n    if length % 2 == 0:\n        # find the mid and add it to the list\n        mid = length // 2\n        i = 0\n        while i < mid:\n            if lst[i] > lst[mid]:\n                lst[i], lst[mid] = lst[mid], lst[i]\n            i = i + 1\n        # return the length\n        return len(lst) - i\n    else:\n        # find the mid and add it to the list\n        mid = length // 2\n        i = 0\n        while i < mid:\n            if lst[i] > lst[mid]:\n                lst[i], lst[mid] = lst[mid], lst[i]\n            i = i + 1\n        # return the length\n        return mid\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_len=9999999999\n    smallest_i=0\n    for i in range(len(lst)):\n        if lst[i][1]<smallest_len:\n            smallest_len=lst[i][1]\n            smallest_i=i\n    return smallest_i+1\n    \ndef find_answers(lst):\n    '''\n    Write a python function to return the index of the minimum answer possible.\n    '''\n    min_ans=9999999999\n    min_i=0\n    for i in range(len(lst)):\n        if lst[i][1]<min_ans:\n            min_ans=lst[i][1]\n            min_i=i\n    return min_i+1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0]\n    for lst_item in lst[1:]:\n        if len(lst_item) < min_len:\n            min_len = len(lst_item)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    import itertools\n    longest = 0\n    for i in lst:\n        if len(i)>longest:\n            longest = len(i)\n    return longest\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in lst:\n        min_length += len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Create a set with all the items in the list\n    lst_set = set(lst) \n    \n    # Create a set with the items that are not the set\n    lst_not_set = set(lst) - set(lst_set)\n    \n    # Initialize an empty dictionary\n    min_length_dict = dict()\n    \n    # Loop through all the items in the set, and increment the length of the list by 1\n    for lst_item in lst_not_set:\n        min_length_dict[lst_item] = min(lst_set, key=len)\n        \n    return min_length_dict\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return \"List is empty\"\n    elif len(lst) == 1:\n        return f\"The list is: {lst[0]}\"\n    elif len(lst) == 2:\n        return f\"The list is: {lst[0]}, {lst[1]}\"\n    elif len(lst) == 3:\n        return f\"The list is: {lst[0]}, {lst[1]}, {lst[2]}\"\n    elif len(lst) > 3:\n        return f\"The list is: {lst[0]}, {lst[1]}, {lst[2]}, {lst[3]}, {lst[4]}, {lst[5]}, {lst[6]}, {lst[7]}, {lst[8]}, {lst[9]}, {lst[10]}, {lst[11]}, {lst[12]}\"\n    \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the largest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return \"List is empty\"\n    elif len(lst) == 1:\n        return f\"The list is: {lst[0]}\"\n    elif len(lst) == 2:\n        return f\"The list is: {lst[0]}, {lst[1]}\"\n    elif len(lst) == 3:\n        return f\"The list is: {lst[0]}, {lst[1]}, {lst[2]}\"\n    elif len(lst) > 3:\n        return f\"The list is: {lst[0]}, {lst[1]}, {lst[2]}, {lst[3]}, {lst[4]}, {lst[5]}, {lst[6]}, {lst[7]}, {lst[8]}, {lst[9]}, {lst[10]}, {lst[11]}, {lst[12]}\"\n    \ndef Find_Sum(lst):\n    '''\n    Write a python function to find the sum of all the elements in a list.\n    '''\n    if len(lst) == 0:\n        return \"List is empty\"\n    elif len(lst) == 1:\n        return f\"The list is: {lst[0]}\"\n    elif len(lst) == 2:\n        return f\"The list is: {lst[0]}, {lst[1]}\"\n    elif len(lst) == 3:\n        return f\"The list is: {lst[0]}, {lst[1]}, {lst[2]}\"\n    elif len(lst) > 3:\n        return f\"The list is: {lst[0]}, {lst[1]}, {lst[2]}, {lst[3]}, {lst[4]}, {lst[5]}, {lst[6]}, {lst[7]}, {lst[8]}, {lst[9]}, {lst[10]}, {lst[11]}, {lst[12]}\"\n    \n    \ndef main():\n    print(\"The program has been started!\")\n    print(\"\\nPlease, input the two numbers.\")\n    print(\"\\nThe program will calculate the sum, the average and the minimum element.\")\n    print(\"\\nThen, the program will print the results.\")\n    print(\"\\nIf you have entered a empty list, it will print a list with zero elements.\")\n    print(\"\\nIf you entered a list with only one element, it will print it.\")\n    print(\"\\nIf you entered a list with two elements, it will print it.\")\n    print(\"\\nIf you entered a list with three elements, it will print it.\")\n    print(\"\\nIf you entered a list with three elements, it will print it.\")\n    print(\"\\nIf you entered a list with four elements, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list with one element, it will print it.\")\n    print(\"\\nIf you entered a list with two element, it will print it.\")\n    print(\"\\nIf you entered a list with three element, it will print it.\")\n    print(\"\\nIf you entered a list with four element, it will print it.\")\n    print(\"\\nIf you entered a list with five elements, it will print it.\")\n    print(\"\\nIf you entered a list wit"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = []\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            temp = lst[i] + lst[j]\n            if len(temp) < min_len:\n                min_len = len(temp)\n    return [min_len]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        while n % 2 == 0:\n            i = i + 1\n            n = n // 2\n        return i\n    \ndef coprime(a, b):\n    '''\n    Write a python function to find if two numbers are coprime.\n    '''\n    a_power = a**2\n    b_power = b**2\n    \n    while a_power!= b_power:\n        if a_power == b_power:\n            return False\n        else:\n            a_power = a_power**2\n            b_power = b_power**2\n    \n    return True\n    \ndef main():\n    '''\n    Main function which calls all other functions.\n    '''\n    print(\"Divisors of a given number: \")\n    \n    a = int(input(\"Enter an integer: \"))\n    b = int(input(\"Enter another integer: \"))\n    \n    print(\"Number of divisors: \")\n    print(\"1. \", divisor(a))\n    print(\"2. \", coprime(a, b))\n    print()\n    print(\"Number of coprime numbers: \")\n    \n    num = 1\n    \n    while num <= 10:\n        if coprime(a, num):\n            print(\"Number %d is coprime with number %d\" % (num, num))\n        else:\n            print(\"Number %d is not coprime with number %d\" % (num, num))\n        num = num + 1\n        \n    print()\n    \nmain("
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #n = int(input('enter a number: '))\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n        elif i==n:\n            pass\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 0\n    for i in range(1, n):\n        if n%i==0:\n            print(i, \" is divisible by\", n//i)\n            break\n    else:\n        print(n, \"is not divisible by any number\")\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    elif n%2 == 0:\n        return 0\n    else:\n        return divisor(n-1) + divisor(n-2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    elif n%2==0:\n        return 2\n    else:\n        return 1+divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #count_divisors = 0\n    #for i in range(1,n+1):\n    #    if n%i==0:\n    #        count_divisors += 1\n    #return count_divisors\n    count_divisors = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            count_divisors += 1\n    return count_divisors"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        divisors = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors += 1\n        return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n % 2 == 0:\n        return n // 2\n    elif n % 2 == 1:\n        return 4 * n // 3 + 1\n    else:\n        return 4 * n // 3 + 2\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for list_element in list1:\n        for item in list_element:\n            if item not in frequency_dict:\n                frequency_dict[item] = 1\n            else:\n                frequency_dict[item] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_dic = {}\n    \n    for element in list1:\n        if element not in list_dic:\n            list_dic[element] = 1\n        else:\n            list_dic[element] += 1\n    return list_dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store counts\n    frequency_dict = {}\n    # Iterate over every element in list\n    for element in list1:\n        # Check if element is in dictionary and store count if it's a new key\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    # Return dictionary\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    l1 = []\n    # iterate through the list and add each element to list1\n    for i in range(len(list1)):\n        l1.append(list1[i])\n    # create dictionary with all unique elements and their frequency\n    freq_dict = {}\n    for i in l1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for index, value in enumerate(list1):\n        if value in dictionary:\n            dictionary[value] += 1\n        else:\n            dictionary[value] = 1\n    return dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    freq_dict = {}\n    \n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    \n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j]+=1\n            else:\n                freq[j]=1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i][0])\n    return dict(Counter(l))\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Your code here\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult_list = []\n    for num in numbers:\n        mult_list.append(num * len(numbers))\n    return sum(mult_list)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code goes here\n    lst = [int(number) for number in numbers]\n    return [n*l for n,l in zip(lst, lst[1:])]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_list = []\n    for num in numbers:\n        new_list.append(num * len(numbers))\n    return new_list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for num in numbers:\n        num = num ** len(numbers)\n        print(num)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [n * i for n, i in zip(numbers, len(numbers))]\n    \ndef to_string(numbers):\n    '''\n    Write a function to convert all the numbers in a list into a string.\n    '''\n    return [str(number) for number in numbers]\n    \ndef to_int(numbers):\n    '''\n    Write a function to convert all the numbers in a list into an integer.\n    '''\n    return [int(number) for number in numbers]\n    \ndef to_float(numbers):\n    '''\n    Write a function to convert all the numbers in a list into a float.\n    '''\n    return [float(number) for number in numbers]\n    \ndef to_bool(numbers):\n    '''\n    Write a function to convert all the numbers in a list into a boolean value.\n    '''\n    return [bool(number) for number in numbers]\n    \ndef num_to_str(numbers):\n    '''\n    Write a function to convert all the numbers in a list into a string.\n    '''\n    return ''.join(numbers)\n    \ndef num_to_int(numbers):\n    '''\n    Write a function to convert all the numbers in a list into an integer.\n    '''\n    return [int(number) for number in numbers]\n    \ndef num_to_float(numbers):\n    '''\n    Write a function to convert all the numbers in a list into a float.\n    '''\n    return [float(number) for number in numbers]\n    \ndef num_to_bool(numbers):\n    '''\n    Write a function to convert all the numbers in a list into a boolean value.\n    '''\n    return [bool(number) for number in numbers]\n    \ndef nth_number(n, numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a number in the list that is the nth number from the list.\n    '''\n    return [numbers[i] for i in range(len(numbers)) if i+n == len(numbers)][0]\n    \ndef swap_nth(n, numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and swaps all the numbers from the first index to the last index (in the list).\n    '''\n    return [numbers[i], numbers[-1] for i in range(len(numbers)) if i!= len(numbers) - 1]\n    \ndef swap_nth_end(n, numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and swaps all the numbers from the last index to the first index (in the list).\n    '''\n    return [numbers[i] for i in range(len(numbers)) if i!= 0]\n    \ndef insert_nth(n, numbers, values):\n    '''\n    Write a function that takes in a number and a list of numbers and inserts all the values into the nth index in the list.\n    '''\n    return [values[i] for i in range(len(numbers)) if i!= n and i!= len(numbers) - 1]\n    \ndef find_nth(n, numbers, values):\n    '''\n    Write a function that takes in a number and a list of numbers and returns the first value from the list that is located at the nth index from the end of the list.\n    '''\n    return [values[i] for i in range(len(numbers)) if i!= 0 and i!= len(numbers) - 1 and i + n == len(numbers)]\n    \ndef to_list(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of numbers as a copy of the input list.\n    '''\n    return [number for number in numbers]\n    \ndef to_string_list(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of strings as a copy of the input list.\n    '''\n    return [str(number) for number in numbers]\n    \ndef to_int_list(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of integers as a copy of the input list.\n    '''\n    return [int(number) for number in numbers]\n    \ndef is_even(number):\n    '''\n    Write a function that takes in a number and returns True if it is even and False if it is odd.\n    '''\n    return number % 2 == 0\n    \ndef to_float_list(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of floats as a copy of the input list.\n    '''\n    return [float(number) for number in numbers]\n    \ndef to_int_list_float(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of integers as a copy of the input list.\n    '''\n    return [int(number) for number in numbers]\n    \ndef to_int_list_float_2(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of integers as a copy of the input list.\n    '''\n    return [int(number) for number in numbers]\n    \ndef to_bool_list(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of booleans as a copy of the input list.\n    '''\n    return [bool(number) for number in numbers]\n    \ndef num_to_int_list(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of integers as a copy of the input list.\n    '''\n    return [int(number) for number in numbers]\n    \ndef num_to_int_list_2(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of integers as a copy of the input list.\n    '''\n    return [int(number) for number in numbers]\n    \ndef num_to_bool_list(numbers):\n    '''\n    Write a function that takes in a number and a list of numbers and returns a list of booleans as a copy of the input list.\n    '''\n    return [bool(number) for number in numbers]\n    \ndef string_to_int_list(numbers):\n    '''\n    Write a function that takes in a number and a list of strings and returns a list of integers as a copy of the input list.\n    '''\n    return [int(number) for number in numbers]\n    \ndef string_to_int_list_2(numbers):\n    '''\n    Write a function that takes in a number and a list of strings and returns a list of integers as a copy of the input list.\n    '''\n    return [int(number) for number in numbers]\n    \ndef string_to_bool_list(numbers):\n    '''\n    Write a function that takes in a number and a list of strings and returns a list of booleans as a copy of the input list.\n    '''\n    return [bool(number) for number in numbers]\n    \ndef num_to_bool_list(numbers):\n    '''\n    Write a function that takes in a number and a list of strings and returns a list of booleans as a copy of the input list.\n    '''\n    return [bool(number) for number in numbers]\n    \ndef is_prime(number):\n    '''\n    Write a function that takes in a number and returns True if it is prime and False if it is not prime.\n    '''\n    return number % 2 == 0\n    \ndef is_prime_list(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns True if it is prime and False if it is not prime.\n    '''\n    return [number % 2 == 0 for number in numbers]\n    \ndef is_prime_list_2(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns True if it is prime and False if it is not prime.\n    '''\n    return [number % 2 == 0 for number in numbers]\n    \ndef prime_list("
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for i in range(len(numbers)):\n        mult *= numbers[i]\n    return mult\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i]*i\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for num in numbers:\n        result.append(num * len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    for i in numbers:\n        result.append(i * len(numbers))\n    return result\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Initialize counters to 0\n    counter = 0\n    # Iterate through the list and multiply each number with the length of the list\n    # Also, add the length of the list to the counter\n    for num in numbers:\n        counter += num\n    # Return the result of the multiplication\n    return counter\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ret_str = ''\n    # First, convert to string, then back to int\n    n = str(n)\n    n = n[::-1]\n    for num in n:\n        ret_str += num\n    return ret_str\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n:\n        n, q = n % 2, n // 2\n        binary = str(q) + binary\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    result = '' \n    while n: \n        result = str(n % 2) + result \n        n = n // 2 \n    return result \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    string_to_convert = str(n)\n    return string_to_convert[::-1].zfill(len(string_to_convert))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = '{0:0>{0}b}'.format(n,2) # this formater will return the same value when the decimal number is divided by 2\n    # print(f'{n} is {binary_number}')\n    return binary_number\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        raise Exception(\"Decimal number must be non-negative\")\n    elif n == 0:\n        return \"0\"\n    else:\n        return str(n)[len(str(n))-1] + \"0\"*(len(str(n))-1-len(str(n)[:len(str(n))-1]))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_str = ''\n    while n > 0: \n        bin_str += str(n % 2)\n        n = n // 2\n    return bin_str \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n:\n        digit = n % 2\n        n //= 2\n        res += str(digit)\n    return res[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        print(\"Incorrect input. The decimal number should be greater or equal than 0.\")\n        return\n    dec = int(str(n)[::-1])\n    bin = str(bin(dec)[2:])\n    print(bin)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace('0b','')\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Input: An integer\n    # Output: An integer\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 2\n    while True:\n        if i*i == num:\n            return i\n        else:\n            if num < i:\n                i = i*2\n            else:\n                i = i*3\n    \n    \nif __name__ == '__main__':\n    try:\n        n = int(sys.argv[1])\n        print(next_smallest_palindrome(n))\n    except IndexError:\n        print('Usage:'+ sys.argv[0] +'<number>')\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    index = 0\n    for i in range(1, int(num**0.5)+1):\n        if (int(num**0.5) % i == 0):\n            break\n    if (int(num**0.5) == int(num**0.5)):\n        return int(num**0.5)\n    else:\n        return int(num**0.5) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # number of digits in the number \n    n = len(str(num))\n    # find a palindrome \n    if n == 1: \n        return num \n    # if len of the string is odd then it's not a palindrome \n    if n % 2 == 0: \n        return \n    # if length of the string is odd then it's not a palindrome \n    if n % 2 == 1: \n        return \n    # if there are two consecutive numbers with the same value, we can break \n    # out and return the next value \n    # to check if a palindrome has to be yielded \n    if num % 10 == 0: \n        return \n    # if the next number is a palindrome \n    return next_smallest_palindrome(num + 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        sys.exit(\"\\n\\n\\tError: Negative integer passed\")\n    elif num <= 9:\n        return num\n    else:\n        smallest = num\n        prev = num - 1\n        while prev >= 0 and num % prev == 0:\n            prev -= 1\n            smallest = num\n        return smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    last_palindrome = num\n    for i in range(int(num/2), 0, -1):\n        if is_palindrome(i):\n            last_palindrome = i\n    return last_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def check_palindrome(n):\n        '''\n        A function to check if a number is palindrome.\n        '''\n        return n == n[::-1]\n    def is_palindrome_helper(n):\n        '''\n        Helper function to check if a number is palindrome.\n        '''\n        if (n == int(n)):\n            return n\n        else:\n            return is_palindrome_helper(int(n[1:]))\n    def is_palindrome_recursive(n):\n        '''\n        A recursive function to check if a number is palindrome.\n        '''\n        if (n == int(n)):\n            return n\n        else:\n            if n == int(n[::-1]):\n                return n\n            elif check_palindrome(n):\n                return is_palindrome_recursive(n[1:])\n            else:\n                return is_palindrome_recursive(n[1:])\n    return is_palindrome_helper(str(num)) if (num) else is_palindrome_recursive(str(num))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    c = -1 # next smallest palindrome\n    n = 1 # number\n    while (n < num):\n        c += 1\n        n += 1\n        if (c % 2 == 0):\n            if(num % (n - 1)) == 0: # this is a palindrome\n                return c\n        else:\n            if (num % (n - 1)) == 0: # this is a palindrome\n                return c\n    return c\ndef next_smallest_palindrome_recursive(num):\n    '''\n    This is a recursive function which uses the next_smallest_palindrome function.\n    '''\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 1\n    elif num % 2 == 0:\n        return next_smallest_palindrome(num // 2)\n    else:\n        return next_smallest_palindrome(num // 2) + 1\ndef next_smallest_palindrome_recursive_dp(num):\n    '''\n    This is a recursive function which uses the next_smallest_palindrome function.\n    '''\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 1\n    elif num % 2 == 0:\n        return next_smallest_palindrome_recursive(num // 2)\n    else:\n        return next_smallest_palindrome_recursive(num // 2) + 1\ndef next_smallest_palindrome_dp(num):\n    '''\n    This is a recursive function which uses the next_smallest_palindrome function.\n    '''\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 1\n    elif num % 2 == 0:\n        return next_smallest_palindrome_dp(num // 2)\n    else:\n        return next_smallest_palindrome_dp(num // 2) + 1\ndef next_smallest_palindrome_dp_recursive(num):\n    '''\n    This is a recursive function which uses the next_smallest_palindrome function.\n    '''\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 1\n    elif num % 2 == 0:\n        return next_smallest_palindrome_dp_recursive(num // 2)\n    else:\n        return next_smallest_palindrome_dp_recursive(num // 2) + 1\ndef next_smallest_palindrome_dp_recursive_dp(num):\n    '''\n    This is a recursive function which uses the next_smallest_palindrome function.\n    '''\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 1\n    elif num % 2 == 0:\n        return next_smallest_palindrome_dp_recursive(num // 2)\n    else:\n        return next_smallest_palindrome_dp_recursive(num // 2) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num\n    while n % 10 == 0:\n        n /= 10\n    res = n\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    while left <= right:\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] < k:\n            left = mid + 1\n        elif arr[mid] > k:\n            right = mid - 1\n        mid = (left + right) // 2\n    if left > right:\n        return -1\n    else:\n        return left\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] < k:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return -1\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def kth(arr, k):\n        arr = sorted(arr, reverse=True)\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        \n        elif arr[mid] > k:\n            high = mid - 1\n        else:\n            low = mid + 1\n        \n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Base case\n    if k == 0:\n        return arr[k]\n    # Divide by length\n    mid = (k - 1) // arr.length\n    # Divide by length\n    return kth_element(arr[mid + 1 :], k - mid - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if the length of the array is not even, return -1\n    if len(arr)%2!=0:\n        return -1\n    \n    # return the kth element if the array is sorted\n    if arr[0]<=k:\n        return arr[0]\n    \n    # get the kth element from the middle of the array\n    low=0\n    high=len(arr)-1\n    mid = (low+high)//2\n    \n    # if the array is already sorted\n    if arr[mid] > arr[mid+1]:\n        return arr[mid+1]\n    \n    # if the array is sorted, return the kth element\n    else:\n        return arr[mid]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1)+1]"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for character in word:\n        if character == \" \":\n            new_word += \"_\"\n        elif character.isupper():\n            new_word += character.lower()\n        else:\n            new_word += character.capitalize()\n    return new_word\n    "
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(camel_case.capitalize(c) for c in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in word:\n        if i == \" \":\n            new_word += \" \"\n        elif i == \".\":\n            new_word += \".\"\n        elif i == \"!\" or i == \"?\", or i == \"!\":\n            new_word += \"!\"\n        elif i == \";\":\n            new_word += \";\"\n        elif i == \":\":\n            new_word += \":\"\n        elif i == \";\":\n            new_word += \";\"\n        elif i == \".\":\n            new_word += \".\"\n        elif i == \"!\":\n            new_word += \"!\"\n        elif i == \",\":\n            new_word += \",\"\n        elif i == \";\":\n            new_word += \";\"\n        elif i == \":\":\n            new_word += \":\"\n        else:\n            new_word += i\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.capitalize()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_', '')\n    word = word.title()\n    word = word.replace('.', '-')\n    word = word.replace(' ', '-').replace('-','').replace('_','')\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    list_of_words = word.split('_')\n    list_of_words[0] = list_of_words[0].title()\n    for i in range(len(list_of_words)-1):\n        list_of_words[i] = list_of_words[i].capitalize()\n    return '_'.join(list_of_words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_list = []\n    word_list = word.split('_')\n    for i in range(0, len(word_list)):\n        camel_list.append(word_list[i].capitalize())\n    return ''.join(camel_list)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    words[0] = words[0].title()\n    words[1] = words[1].title()\n    return ''.join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for letter in word:\n        if letter.isupper():\n            camel_word += letter.lower()\n        elif letter.islower():\n            camel_word += letter.upper()\n        else:\n            camel_word += letter\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    \n    for i in range(1, m):\n        j = i\n        while j < n:\n            a[j] = a[j] + a[j - 1]\n            j += 1\n    return a[n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n\n    elif m < 0:\n        return eulerian_num(n, -m)\n    elif n == 0:\n        return m\n    else:\n        return eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif m == 1:\n        return 0\n    elif n < m:\n        return eulerian_num(n, m - 1) + eulerian_num(n - 1, m)\n    else:\n        return eulerian_num(n - 1, m)\n    \n    \ndef is_perfect_group(n):\n    '''\n    A function to check whether a number is a perfect group.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    return False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def edge_of_the_tree(number):\n        '''\n        Generate the edges of the given tree.\n        '''\n        # First, create a dictionary for the tree edges\n        edge_dict = {}\n        # Look through all nodes and their values\n        for i in number:\n            edge_dict[i] = 1\n            # Add all nodes to the dictionary\n            for j in number:\n                if i!= j:\n                    edge_dict[j] = edge_dict[i]\n                if i == j:\n                    edge_dict[i] = edge_dict[i] + 1\n        return edge_dict\n    \n    # Create a dictionary of all numbers\n    tree_dict = {}\n    # Create a dictionary of the tree edges\n    tree_edges = edge_of_the_tree(number)\n    # Loop through each node to find the number\n    for i in range(n + 1):\n        tree_dict[i] = 1\n    # Loop through each number and make sure that it is not in the dictionary\n    for i in number:\n        # If the number is in the dictionary\n        if i in tree_dict:\n            # Loop through all edges and get the edge\n            for edge in tree_edges:\n                if i == edge[0] and edge[1] == i:\n                    # If the edge starts with i and ends with i\n                    # Then add the number\n                    tree_dict[edge[1]] = tree_dict[edge[0]] + 1\n    return tree_dict[n]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if the input values are greater than 2 and less than 10\n    if(n > 2 and n < 10):\n        # Check if the input values are greater than 1 and less than 10\n        if(m > 2 and m < 10):\n            # Check if the input values are greater than 1 and less than 10\n            if((n - 1) * (m - 1) < 2):\n                # Check if the input values are greater than 1 and less than 10\n                if(n - 1 * m < 10):\n                    # Check if the input values are greater than 1 and less than 10\n                    if(n - 1 + m < 10):\n                        # If all the inputs are correct, return the values as a number\n                        return n * m\n                else:\n                    # If the input values are wrong, print the error message\n                    return \"The number must be less than 10\"\n            else:\n                # If the input values are wrong, print the error message\n                return \"The number must be greater than 10\"\n        else:\n            # If the input values are wrong, print the error message\n            return \"The number must be greater than 10\"\n    else:\n        # If the input values are wrong, print the error message\n        return \"The number must be greater than 10\""
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m == 0:\n        return 1\n    elif n == m == 1:\n        return 0\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define a nested list of lists that represents the time steps\n    # The first level list will consist of all the previous steps\n    # The second level will consist of the total steps\n    # The third level will consist of the steps in reverse order\n    # The fourth level will consist of all the steps in reverse order\n    # The fifth level will consist of the reversed steps\n    # Let's initialize the list that will contain all the time steps.\n    # The first step is always the last one\n    # The second step is always the first one\n    # The third step is always the second one\n    # The fourth step is always the third one\n    # The fifth step is always the fourth one\n    # We can see that the first step contains all the steps in reverse order\n    # The second step contains the total steps\n    # The third step contains the reversed steps\n    # The fourth step contains all the reversed steps\n    # The fifth step contains the reversed steps\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # eulerian_num is a function that\n    # checks if an element is a non-decreasing\n    # element of the given number n and m.\n    #\n    # Input: \n    # n and m are positive integers\n    #\n    # Output: \n    # If a(n, m) is a non-decreasing element, \n    # return 1, otherwise return 0.\n    \n    # A number is a non-decreasing element if the\n    # following conditions are true:\n    #\n    #   n > 0, m > 0\n    #\n    # Example 1:\n    #\n    #   Input: n = 1, m = 0\n    #   Output: 1\n    #   \n    #   Input: n = 1, m = 1\n    #   Output: 0\n    #\n    # Example 2:\n    #\n    #   Input: n = 5, m = 3\n    #   Output: 5\n    #   \n    #   Input: n = 5, m = 2\n    #   Output: 0\n    #\n    # Example 3:\n    #\n    #   Input: n = 4, m = 4\n    #   Output: 3\n    #\n    # Hint: https://en.wikipedia.org/wiki/Euler%27s_convergence\n    \n    # Implementation:\n    \n    # Solution:\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base Case\n    if n == 0:\n        if m == 1:\n            return 0\n        elif m == 2:\n            return 1\n        elif m == 3:\n            return 2\n        elif m == 4:\n            return 3\n        elif m == 5:\n            return 4\n    # Eulerian numbers are numbered from 0, 1, 2, 3, 4,...\n    # If m is a natural number, then we can generate a corresponding\n    # list of eulerian numbers\n    num_list = [0] * (m + 1)\n    # For each m, add to the list\n    for m_add in range(1, m + 1):\n        # Make a list of all the numbers that will be \n        # formed by dividing n by m_add\n        for i in range(m_add):\n            num_list[m_add] += num_list[i]\n    # We then sum them to obtain the Eulerian number\n    return sum(num_list)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return n \n    elif n == 0: \n        return 0\n    elif n > 0: \n        return eulerian_num(n-1, m) + m\n    elif n < 0: \n        return -1\n    else: \n        return -1\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: len(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda a_list: len(a_list[0]))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for subitem in sublist:\n            print(subitem)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = [i[0] for i in input_list]\n    return sorted(l)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if input_list[i][j] == ')':\n                input_list[i][j] = ']'\n                input_list[i-1][j] = '['\n                break\n            elif input_list[i][j] == '(':\n                input_list[i][j] = ')'\n                input_list[i-1][j] = '('\n                break\n            elif input_list[i][j] == '{':\n                input_list[i][j] = '}'\n                input_list[i-1][j] = '{'\n                break\n            elif input_list[i][j] == '}':\n                input_list[i][j] = '{'\n                input_list[i-1][j] = '}'\n                break\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list to store result\n    result = []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def swap(item1, item2):\n        temp = item1[0]\n        item1[0] = item2[0]\n        item2[0] = temp\n        return item1, item2\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    assert(type(input_list) is list and all(type(el) in [str, list] for el in input_list))\n    for i, sublist in enumerate(input_list):\n        for el in sublist:\n            if type(el) is list:\n                print(f'el: {el}')\n                print(f'sublist[{i}]: {sublist[i]}')\n                sort_sublists(sublist)\n            else:\n                print(f'el: {el}')\n                print(f'sublist[{i}]: {sublist[i]}')\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #Your code goes here\n    \n    #Create a new list to store the sorted sublists.\n    sublists = []\n    for item in input_list:\n        #create a new list for each item in the input_list\n        for i in item:\n            sublists.append(i)\n            #sort the list.\n            sublists.sort()\n            #store the sorted list in a new list\n            new_sublists = []\n            for i in range(len(sublists)):\n                new_sublists.append(sublists[i])\n            sublists = new_sublists\n    #return the list.\n    return sublists\n    \n    \n    \n    \n    "
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(input_list,current_sublist):\n        current_sublist.sort(key=lambda x: len(x),reverse=False)\n        for index,item in enumerate(current_sublist):\n            input_list[index].extend(item)\n        return input_list\n    \n    def sort_sublists_2(input_list,current_sublist):\n        input_list.sort(key=lambda x: len(x),reverse=False)\n        for index,item in enumerate(current_sublist):\n            for x in range(len(item)):\n                input_list[index][x].extend(item[x])\n        return input_list\n    \n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list')\n    if type(input_list[0]) is not list:\n        raise TypeError('input_list must be a list')\n    if len(input_list) > 1:\n        if type(input_list[0]) is not list:\n            raise TypeError('Each sublist of the input_list must only contain elements of the same type')\n        else:\n            for i in range(len(input_list)):\n                if len(input_list[i]) > 1:\n                    raise TypeError('Each sublist of the input_list must only contain elements of the same type')\n            \n            for sublist in input_list:\n                current_sublist = sublist.copy()\n                current_sublist.sort(key=lambda x: len(x),reverse=False)\n                input_list = sort_sublist(input_list,current_sublist)\n    else:\n        current_sublist = input_list[0].copy()\n        current_sublist.sort(key=lambda x: len(x),reverse=False)\n        input_list = sort_sublist(input_list,current_sublist)\n    return input_list\n    \ndef sort_sublists_3(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(input_list,current_sublist):\n        current_sublist.sort(key=lambda x: len(x),reverse=False)\n        for index,item in enumerate(current_sublist):\n            input_list[index].extend(item)\n        return input_list\n    \n    if type(input_list) is not list:\n        raise TypeError('input_list must be a list')\n    if type(input_list[0]) is not list:\n        raise TypeError('input_list must be a list')\n    if len(input_list) > 1:\n        if type(input_list[0]) is not list:\n            raise TypeError('Each sublist of the input_list must only contain elements of the same type')\n        else:\n            for i in range(len(input_list)):\n                if len(input_list[i]) > 1:\n                    raise TypeError('Each sublist of the input_list must only contain elements of the same type')\n            \n            for sublist in input_list:\n                current_sublist = sublist.copy()\n                current_sublist.sort(key=lambda x: len(x),reverse=False)\n                input_list = sort_sublist(input_list,current_sublist)\n    else:\n        current_sublist = input_list[0].copy()\n        current_sublist.sort(key=lambda x: len(x),reverse=False)\n        input_list = sort_sublist(input_list,current_sublist)\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # TODO: complete this function\n    return len([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counts=[]\n    for i in lst:\n        if i == True:\n            counts.append(1)\n        else:\n            counts.append(0)\n    return counts\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([1 for i in lst if i == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # TODO: Write your Python code here\n    result = 0\n    for elem in lst:\n        if(elem):\n            result += 1\n    print(result)\n    \n    return result\n    \ndef swap(lst, index1, index2):\n    '''\n    Write a python function to swap elements of the given list.\n    '''\n    # TODO: Write your Python code here\n    lst[index1], lst[index2] = lst[index2], lst[index1]\n    print(lst)\n    return lst\n    \ndef reverse(lst):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    # TODO: Write your Python code here\n    return lst[::-1]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    result = 0\n    for i in lst:\n        if i == True:\n            result+=1\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # code here\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count\n    "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for i in range(0,len(lst)):\n        if lst[i] == True:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #lst = [1,2,3,4,5,6]\n    c=0\n    for i in lst:\n        if i%2==0:\n            c+=1\n    return c\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for ele in test_tup:\n        test_list.append(ele)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list()\n    for tup in test_tup:\n        if tup not in new_list:\n            new_list.append(tup)\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_list.append(test_tup[i][0])\n    for j in range(len(test_tup)):\n        test_tup[j].append(test_list[j])\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup[0].extend(test_list)\n    test_tup[1].extend(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) > 0:\n        test_list += test_tup\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for element in test_tup:\n        test_list.append(element)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    i = 0\n    while i < len(num1):\n        if num1[i] > num2[i] and num2[i] > num3[i]:\n            if num2[i] not in merge_list:\n                merge_list.append(num2[i])\n            else:\n                i += 1\n        elif num1[i] < num2[i] and num2[i] < num3[i]:\n            if num2[i] not in merge_list:\n                merge_list.append(num2[i])\n            else:\n                i += 1\n        else:\n            merge_list.append(num1[i])\n        i += 1\n    i = 0\n    while i < len(num3):\n        if num3[i] > num1[i] and num3[i] > num2[i]:\n            if num3[i] not in merge_list:\n                merge_list.append(num3[i])\n            else:\n                i += 1\n        elif num3[i] < num1[i] and num3[i] < num2[i]:\n            if num3[i] not in merge_list:\n                merge_list.append(num3[i])\n            else:\n                i += 1\n        else:\n            merge_list.append(num1[i])\n        i += 1\n    merge_list = sorted(merge_list)\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    s=[]\n    heapq.heapify(s)\n    p=[]\n    q=[]\n    i=0\n    while i<len(num1):\n        if num1[i]<num2[i] or num2[i]<num1[i] or num3[i]<num2[i] or num3[i]<num1[i]:\n            heapq.heappush(p,-num2[i])\n            heapq.heappush(q,-num1[i])\n        else:\n            heapq.heappush(p,num1[i])\n            heapq.heappush(q,num2[i])\n        i+=1\n    while len(p)>0 and len(q)>0:\n        if p[0]<q[0]:\n            heapq.heappush(p,-q[0])\n            heapq.heappush(q,-p[0])\n        elif p[0]>q[0]:\n            heapq.heappush(q,-p[0])\n            heapq.heappush(p,-q[0])\n        else:\n            heapq.heappush(p,-p[0])\n            heapq.heappush(q,-q[0])\n        s=heapq.heappop(p)\n        heapq.heappop(q)\n    s_list =[]\n    for i in range(len(s)):\n        s_list.append(s[i])\n    return s_list\ndef merge_sorted_list_2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    s=[]\n    heapq.heapify(s)\n    p=[]\n    q=[]\n    i=0\n    while i<len(num1):\n        if num1[i]<num2[i] or num2[i]<num1[i] or num3[i]<num2[i] or num3[i]<num1[i]:\n            heapq.heappush(p,-num2[i])\n            heapq.heappush(q,-num1[i])\n        else:\n            heapq.heappush(p,num1[i])\n            heapq.heappush(q,num2[i])\n        i+=1\n    while len(p)>0 and len(q)>0:\n        if p[0]<q[0]:\n            heapq.heappush(p,-q[0])\n            heapq.heappush(q,-p[0])\n        elif p[0]>q[0]:\n            heapq.heappush(q,-p[0])\n            heapq.heappush(p,-q[0])\n        else:\n            heapq.heappush(p,-p[0])\n            heapq.heappush(q,-q[0])\n        s=heapq.heappop(p)\n        heapq.heappop(q)\n    s_list =[]\n    for i in range(len(s)):\n        s_list.append(s[i])\n    return s_list\ndef merge_sorted_list_3(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    s=[]\n    heapq.heapify(s)\n    p=[]\n    q=[]\n    i=0\n    while i<len(num1):\n        if num1[i]<num2[i] or num2[i]<num1[i] or num3[i]<num2[i] or num3[i]<num1[i]:\n            heapq.heappush(p,-num2[i])\n            heapq.heappush(q,-num1[i])\n        else:\n            heapq.heappush(p,num1[i])\n            heapq.heappush(q,num2[i])\n        i+=1\n    while len(p)>0 and len(q)>0:\n        if p[0]<q[0]:\n            heapq.heappush(p,-q[0])\n            heapq.heappush(q,-p[0])\n        elif p[0]>q[0]:\n            heapq.heappush(q,-p[0])\n            heapq.heappush(p,-q[0])\n        else:\n            heapq.heappush(p,-p[0])\n            heapq.heappush(q,-q[0])\n        s=heapq.heappop(p)\n        heapq.heappop(q)\n    s_list =[]\n    for i in range(len(s)):\n        s_list.append(s[i])\n    return s_list\ndef merge_sorted_list_4(num1,num2,num3,num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    s=[]\n    heapq.heapify(s)\n    p=[]\n    q=[]\n    i=0\n    while i<len(num1):\n        if num1[i]<num2[i] or num2[i]<num1[i] or num3[i]<num2[i] or num3[i]<num1[i]:\n            heapq.heappush(p,-num2[i])\n            heapq.heappush(q,-num1[i])\n        else:\n            heapq.heappush(p,num1[i])\n            heapq.heappush(q,num2[i])\n        i+=1\n    while len(p)>0 and len(q)>0:\n        if p[0]<q[0]:\n            heapq.heappush(p,-q[0])\n            heapq.heappush(q,-p[0])\n        elif p[0]>q[0]:\n            heapq.heappush(q,-p[0])\n            heapq.heappush(p,-q[0])\n        else:\n            heapq.heappush(p,-p[0])\n            heapq.heappush(q,-q[0])\n        s=heapq.heappop(p)\n        heapq.heappop(q)\n    s_list =[]\n    for i in range(len(s)):\n        s_list.append(s[i])\n    return s_list\ndef merge_sorted_list_5(num1,num2,num3,num4):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    s=[]\n    heapq.heapify(s)\n    p=[]\n    q=[]\n    i=0\n    while i<len(num1):\n        if num1[i]<num2[i] or num2[i]<num1[i] or num3[i]<num2[i] or num3[i]<num1[i]:\n            heapq.heappush(p,-num2[i])\n            heapq.heappush(q,-num1[i])\n        else:\n            heapq.heappush(p,num1[i])\n            heapq.heappush(q,num2[i])\n        i+=1\n    while len(p)>0 and len(q)>0:\n        if p[0]<q[0]:\n            heapq.heappush(p,-q[0])\n            heapq.heappush(q,-p[0])\n        elif p[0]>q[0]:\n            heapq.heappush(q,-p[0])\n            heapq.heappush(p,-q[0])\n        else:\n            heapq.heappush(p,-p[0])\n            heapq.heappush(q,-q[0])\n        s=heapq.heappop(p)\n        heap"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    while i < len(num1):\n        while i < len(num2):\n            if num1[i] == num2[i]:\n                merged_list.append(num1[i])\n                i = i + 1\n            else:\n                break\n        if i == len(num2):\n            break\n        else:\n            while i < len(num1):\n                if num1[i] < num2[i]:\n                    merged_list.append(num1[i])\n                    i = i + 1\n                else:\n                    break\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a heap\n    num_heap = []\n    num_heap.append((num1[0],num1[1],num1[2],num1[3]))\n    num_heap.append((num2[0],num2[1],num2[2],num2[3]))\n    num_heap.append((num3[0],num3[1],num3[2],num3[3]))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    if num1 == None:\n        return res\n    if num2 == None:\n        return res\n    if num3 == None:\n        return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #getting the length of the three lists\n    len1 = len(num1)\n    len2 = len(num2)\n    len3 = len(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = [x for x in sorted(list(set(num1) | set(num2) | set(num3)))]\n    heapq.heapify(heap)\n    return heap[0]\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    heapq.heapify(merged)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    if num1 and num2 and num3:\n        heapq.heappush(heap,(num1[0]+num2[0]+num3[0],num1[0],num2[0],num3[0]))\n    if num1 and num2:\n        heapq.heappush(heap,(num1[0]+num2[0],num1[0],num2[0]))\n    if num1 and num3:\n        heapq.heappush(heap,(num1[0]+num3[0],num1[0],num3[0]))\n    if num2 and num3:\n        heapq.heappush(heap,(num2[0]+num3[0],num2[0],num3[0]))\n    if num1 and num3:\n        heapq.heappush(heap,(num1[0]+num3[0],num1[0],num3[0]))\n    if num2 and num3:\n        heapq.heappush(heap,(num2[0]+num3[0],num2[0],num3[0]))\n    if num1 and num3:\n        heapq.heappush(heap,(num1[0]+num3[0],num1[0],num3[0]))\n    if num2 and num3:\n        heapq.heappush(heap,(num2[0]+num3[0],num2[0],num3[0]))\n    if num1 and num3:\n        heapq.heappush(heap,(num1[0]+num3[0],num1[0],num3[0]))\n    return heap\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #initialize merged list\n    merged = []\n    #assign the values to the merged list\n    merged.append(num1)\n    merged.append(num2)\n    merged.append(num3)\n    #print(merged)\n    #calculate the sum and return the result\n    total = merged[0] + merged[1] + merged[2]\n    #print(total)\n    return total\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    d=0\n    for i in range(n):\n        if s[i]=='1':\n            d=d+2\n        else:\n            d=d+1\n    return d\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    count = 0\n    for i in range(len(s)-n+1):\n        if odd_Binary(s,i,n):\n            count+=1\n    return count\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    \n    count = 0\n    for i in range(len(s)-n+1):\n        if even_Binary(s,i,n):\n            count+=1\n    return count\n    \ndef odd_Binary(s,i,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    count = 0\n    if i+n < len(s):\n        for j in range(i,i+n):\n            count+=1\n    else:\n        for j in range(i,len(s)):\n            count+=1\n    return count\n    \ndef even_Binary(s,i,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    \n    count = 0\n    if i+n < len(s):\n        for j in range(i,i+n):\n            count+=1\n    else:\n        for j in range(i,len(s)):\n            count+=1\n    return count\n    \ndef main():\n    s = '123456789'\n    n = 3\n    print(odd_Equivalent(s,n))\n    print(even_Equivalent(s,n))\n    print(odd_Binary(s,n,n))\n    print(even_Binary(s,n,n))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #your code here\n    count=0\n    for i in range(n):\n        if(s[i]==\"1\"):\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # define an empty string\n    '''\n    *Hint* You can assume the string is a binary string\n    *Reminder*\n    string = '0000011'\n    *Algorithm*\n    *\n    number = string[0] + string[1] + string[2] + string[3] + string[4] + string[5] + string[6]\n    *if* number is odd then add it to the result\n    '''\n    # convert the string into an array\n    string = list(s)\n    # shift by one\n    for i in range(len(string)):\n        string[i] = '0' + string[i]\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 0\n    else:\n        if n%2==0:\n            return odd_Equivalent(s,(n-1)/2)+1\n        else:\n            return odd_Equivalent(s,n-1)+1\n        \ndef letter_Combinations(s):\n    '''\n    Given a string, return all of its possible permutations.\n    '''\n    if len(s) == 0:\n        return []\n    \n    combinations = []\n    def _helper(index, curr):\n        if len(curr) == 0:\n            combinations.append(list(curr))\n        for i in range(index,len(s)):\n            curr.append(s[i])\n            _helper(i+1, curr)\n            curr.pop()\n    _helper(0, [])\n    return combinations\n        \ndef is_palindrome(s):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    return all(c.isalnum() for c in s.lower()) and not s.isalpha()\n    \ndef palindrome(s):\n    '''\n    Given a string, return true if it is a palindrome, otherwise return false.\n    '''\n    return is_palindrome(s) and len(s) == len(s[::-1])\n    \ndef is_palindrome_v2(s):\n    '''\n    Given a string, return true if it is a palindrome, otherwise return false.\n    '''\n    return s==s[::-1]\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    for i in range(1,n+1):\n        odd = odd + int(s[i-1] == '0')\n    return odd\n    \n    #time = 0\n    #for i in range(n):\n    #    time = time + int(s[i] == '0')\n    #return time\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Your code here\n    result = 0\n    for i in range(n):\n        result += int(s[i%n])\n    result = result*2 % n\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0: \n        return 0\n    if n<0: \n        n=n*-1\n    return s+sum([int(x) for x in list(bin(n)[2:][::-1])])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return int(s[n//2]+s[n-n//2])\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    return int(s[n//2]+s[n-n//2])\n    \ndef rotate(s,n): \n    '''\n    Write a python function to find the number of rotations of a binary string when rotating a given number of times.\n    '''\n    return int(s[n-n//2:n+n//2])\n    \ndef comp(s): \n    '''\n    Write a python function to count the number of characters in a string.\n    '''\n    return len(s)\n    \ndef main():\n    '''\n    Write a python function to find the number of rotations of a binary string when rotating a given number of times.\n    '''\n    s = input('Enter a binary string')\n    n = int(input('Enter a number of times'))\n    print('Number of rotations: ', rotate(s,n))\n    print('Number of rotations: ',comp(s))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Function to rotate a given string\n    def rotate_string(s,n): \n        \n        # Base case\n        if n==0:\n            return 1\n        \n        # Number of rotations \n        l = n//2\n        \n        # Return the number of rotations \n        return rotate_string(s,l)\n    \n    # Number of rotations \n    l = n//2\n    \n    # Count the number of each digit \n    odd_cnt = 0\n    for i in range(l): \n        if s[i]%2==1: \n            odd_cnt += 1\n    \n    # Return the number of rotations \n    return rotate_string(s,odd_cnt)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set([*nestedlist]))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # write your code here\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if nestedlist[i]==nestedlist[j]:\n                return nestedlist[i]\n        \ndef common_elements(nestedlist):\n    '''\n    Write a function that, given a nested list, returns the\n    common elements.\n    '''\n    # write your code here\n    if type(nestedlist)!= list:\n        raise TypeError(\"nestedlist must be a list\")\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        if len(lst) > 0:\n            common_elements.extend(lst)\n        else:\n            common_elements.append(None)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    print(nestedlist)\n    for i in nestedlist:\n        print(i)\n    return(nestedlist[0])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Base Case\n    if len(nestedlist) == 0:\n        return []\n    # Stack\n    stack = []\n    for element in nestedlist:\n        if element not in stack:\n            stack.append(element)\n    # Dictionaries\n    in_list = {}\n    for element in nestedlist:\n        if element not in in_list:\n            in_list[element] = 1\n        else:\n            in_list[element] += 1\n    # Return\n    return in_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    list_length = len(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1,len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_list.append(nestedlist[i])\n    return common_list\n    \n    \ndef check_if_even_or_odd(nested_list):\n    '''\n    Write a function to return True if all elements in given nested list are even.\n    '''\n    for i in range(len(nested_list)):\n        if nested_list[i] % 2 == 0:\n            return False\n    return True\n    \ndef find_even_or_odd_elements(nested_list):\n    '''\n    Write a function to return the elements of nested list that are even.\n    '''\n    elements_even = []\n    elements_odd = []\n    for i in range(len(nested_list)):\n        if nested_list[i] % 2 == 0:\n            elements_even.append(nested_list[i])\n        else:\n            elements_odd.append(nested_list[i])\n    return elements_even,elements_odd\n    \n    \ndef find_even_or_odd_even_or_odd(nested_list):\n    '''\n    Write a function to return the elements of nested list that are even.\n    '''\n    elements_even = []\n    elements_odd = []\n    for i in range(len(nested_list)):\n        if nested_list[i] % 2 == 0:\n            elements_even.append(nested_list[i])\n        else:\n            elements_odd.append(nested_list[i])\n    return elements_even,elements_odd\n    \n    \ndef find_even_or_odd_nested_list(nested_list):\n    '''\n    Write a function to return the elements of nested list that are even.\n    '''\n    elements_even = []\n    elements_odd = []\n    for i in range(len(nested_list)):\n        if nested_list[i] % 2 == 0:\n            elements_even.append(nested_list[i])\n        else:\n            elements_odd.append(nested_list[i])\n    return elements_even,elements_odd\n    \n    \ndef main():\n    '''\n    Call the functions.\n    '''\n    print(\"\\n###### FUNCTIONS ######\\n\")\n    print(\"1. check_if_even_or_odd\")\n    print(\"2. find_even_or_odd_even_or_odd\")\n    print(\"3. find_even_or_odd_nested_list\")\n    print(\"4. find_even_or_odd_elements\")\n    \n    try:\n        number_to_check = int(input(\"\\n\\nType the number of the function you want to check or enter 0 to quit: \"))\n        if number_to_check == 0:\n            exit()\n        elif number_to_check == 1:\n            print(\"\\n##### FUNCTION #########\\n\")\n            print(\"1. common_in_nested_lists\")\n            print(\"2. find_even_or_odd_elements\")\n            print(\"3. find_even_or_odd_nested_list\")\n            print(\"4. find_even_or_odd_even_or_odd\\n\")\n            number_to_check = int(input(\"\\n\\nType the number of the function you want to check or enter 0 to quit: \"))\n            if number_to_check == 0:\n                exit()\n            elif number_to_check == 1:\n                print(common_in_nested_lists(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 2:\n                print(find_even_or_odd_elements(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 3:\n                print(find_even_or_odd_nested_list(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 4:\n                print(find_even_or_odd_even_or_odd(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n        elif number_to_check == 2:\n            print(\"\\n##### FUNCTION #########\\n\")\n            print(\"1. check_if_even_or_odd\")\n            print(\"2. find_even_or_odd_even_or_odd\")\n            print(\"3. find_even_or_odd_nested_list\")\n            print(\"4. find_even_or_odd_elements\")\n            number_to_check = int(input(\"\\n\\nType the number of the function you want to check or enter 0 to quit: \"))\n            if number_to_check == 0:\n                exit()\n            elif number_to_check == 1:\n                print(check_if_even_or_odd(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 2:\n                print(find_even_or_odd_elements(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 3:\n                print(find_even_or_odd_nested_list(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 4:\n                print(find_even_or_odd_even_or_odd(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n        elif number_to_check == 3:\n            print(\"\\n##### FUNCTION #########\\n\")\n            print(\"1. find_even_or_odd_even_or_odd\")\n            print(\"2. find_even_or_odd_nested_list\")\n            print(\"3. find_even_or_odd_elements\")\n            number_to_check = int(input(\"\\n\\nType the number of the function you want to check or enter 0 to quit: \"))\n            if number_to_check == 0:\n                exit()\n            elif number_to_check == 1:\n                print(find_even_or_odd_elements(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 2:\n                print(find_even_or_odd_nested_list(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 3:\n                print(find_even_or_odd_even_or_odd(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n        elif number_to_check == 4:\n            print(\"\\n##### FUNCTION #########\\n\")\n            print(\"1. find_even_or_odd_even_or_odd\")\n            print(\"2. find_even_or_odd_nested_list\")\n            print(\"3. find_even_or_odd_elements\")\n            number_to_check = int(input(\"\\n\\nType the number of the function you want to check or enter 0 to quit: \"))\n            if number_to_check == 0:\n                exit()\n            elif number_to_check == 1:\n                print(find_even_or_odd_elements(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 2:\n                print(find_even_or_odd_nested_list(list_of_lists[random.randint(0,len(list_of_lists)-1)]))\n            elif number_to_check == 3:\n                print(find_even_or_odd_even_or_odd"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    from collections import Counter\n    c = Counter(nestedlist)\n    print(c.most_common())\n    return list(c.keys())\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Code here\n    lst=[]\n    l=[]\n    for i in nestedlist:\n        lst.append(i)\n    for j in lst:\n        if (j not in l):\n            l.append(j)\n    return l\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested in nestedlist:\n        if isinstance(nested, list):\n            common_elements += common_in_nested_lists(nested)\n        else:\n            common_elements.append(nested)\n    return common_elements\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a text.\n    '''\n    text = text.strip('.')\n    text = text.strip(',')\n    text = text.strip('!')\n    text = text.strip('?')\n    text = text.strip('$')\n    text = text.strip('&')\n    text = text.strip('%')\n    text = text.strip('(')\n    text = text.strip(')')\n    text = text.strip(';')\n    text = text.strip('.')\n    text = text.strip(',')\n    text = text.strip('!')\n    text = text.strip('?')\n    text = text.strip('$')\n    text = text.strip('&')\n    text = text.strip('%')\n    text = text.strip('(')\n    text = text.strip(')')\n    text = text.strip(';')\n    text = text.strip('.')\n    text = text.strip(',')\n    text = text.strip('!')\n    text = text.strip('?')\n    text = text.strip('$')\n    text = text.strip('&')\n    text = text.strip('%')\n    return text\n    \ndef word_length(text):\n    '''\n    Write a function to calculate the word length of a text.\n    '''\n    words = text.split(' ')\n    length = 0\n    for word in words:\n        length += len(word)\n    return length\n    \ndef replace_numbers(text):\n    '''\n    Write a function to replace numbers in a text with their words.\n    '''\n    # data = text.split(\" \")\n    # return data[:2] +'' + data[2:]\n    return''.join([word.title() for word in text.split(' ') if word.isdigit()]).title()\n    \ndef counter(text):\n    '''\n    Write a function to count the number of times a word appears in a text.\n    '''\n    d = {}\n    for word in text.split(' '):\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    return d\n    \ndef lower_text(text):\n    '''\n    Write a function to convert all letters to lowercase.\n    '''\n    return text.lower()\n    \ndef uppercase_text(text):\n    '''\n    Write a function to convert all letters to uppercase.\n    '''\n    return text.upper()\n    \ndef upper_text(text):\n    '''\n    Write a function to convert all letters to upper case.\n    '''\n    return text.upper()\n    \ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from a text.\n    '''\n    return text.replace(' ', '')\n    \ndef remove_acronym(text):\n    '''\n    Write a function to remove an acronym from a text.\n    '''\n    return text.replace('@', '')\n    \ndef remove_numbers(text):\n    '''\n    Write a function to remove numbers from a text.\n    '''\n    return text.replace('!', '')\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a text.\n    '''\n    return text.replace('.', '')\n    \ndef is_alpha(text):\n    '''\n    Write a function to check whether a text is alpha or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef is_digit(text):\n    '''\n    Write a function to check whether a text is digit or not.\n    '''\n    for letter in text:\n        if letter.isdigit():\n            return False\n    return True\n    \ndef is_punctuation(text):\n    '''\n    Write a function to check whether a text is punctuation or not.\n    '''\n    for letter in text:\n        if letter in punctuation:\n            return False\n    return True\n    \ndef is_word(text):\n    '''\n    Write a function to check whether a text is word or not.\n    '''\n    for letter in text:\n        if letter in word_letters:\n            return False\n    return True\n    \ndef is_alphabet(text):\n    '''\n    Write a function to check whether a text is alphabet or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef replace_space(text):\n    '''\n    Write a function to replace spaces in a text with their word.\n    '''\n    return text.replace(' ','')\n    \ndef replace_acronym(text):\n    '''\n    Write a function to replace an acronym in a text with their word.\n    '''\n    return text.replace('@', '')\n    \ndef replace_numbers(text):\n    '''\n    Write a function to replace numbers in a text with their word.\n    '''\n    return text.replace('!', '')\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a text.\n    '''\n    return text.replace('.', '')\n    \ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from a text.\n    '''\n    return text.replace(' ', '')\n    \ndef remove_acronym(text):\n    '''\n    Write a function to remove an acronym from a text.\n    '''\n    return text.replace('@', '')\n    \ndef remove_numbers(text):\n    '''\n    Write a function to remove numbers from a text.\n    '''\n    return text.replace('!', '')\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a text.\n    '''\n    return text.replace('.', '')\n    \ndef is_alphabet(text):\n    '''\n    Write a function to check whether a text is alphabet or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef is_digit(text):\n    '''\n    Write a function to check whether a text is digit or not.\n    '''\n    for letter in text:\n        if letter.isdigit():\n            return False\n    return True\n    \ndef is_word(text):\n    '''\n    Write a function to check whether a text is word or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef is_alphabet(text):\n    '''\n    Write a function to check whether a text is alphabet or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef is_punctuation(text):\n    '''\n    Write a function to check whether a text is punctuation or not.\n    '''\n    for letter in text:\n        if letter in punctuation:\n            return False\n    return True\n    \ndef is_digit(text):\n    '''\n    Write a function to check whether a text is digit or not.\n    '''\n    for letter in text:\n        if letter.isdigit():\n            return False\n    return True\n    \ndef is_word(text):\n    '''\n    Write a function to check whether a text is word or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef is_word(text):\n    '''\n    Write a function to check whether a text is word or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef is_alphabet(text):\n    '''\n    Write a function to check whether a text is alphabet or not.\n    '''\n    for letter in text:\n        if letter.isalpha():\n            return False\n    return True\n    \ndef is"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text, int):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list1_len = len(list1)\n    for i in list1:\n        if not isinstance(i, dict):\n            return False\n    if list1_len == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(dict1.values() == {} for dict1 in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        for key1, value1 in dict1.items():\n            if value1 is None:\n                return \"Dictionaries can't be empty\"\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return len(list1) == 0\n    \ndef list_contains(list1, number):\n    '''\n    Write a function that checks whether a value exists in a list.\n    '''\n    # case 1: List is empty\n    if len(list1) == 0:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return list1 == []\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    print(\"Empty Dictionary?\")\n    print(list1)\n    list1.clear()\n    print(\"Empty dictionary is cleared\")\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in nums)"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(num * 1000 for num in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #print(nums)\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    def nums_to_tuple():\n        '''\n        Write a function to convert a given tuple of positive integers into a tuple of integers.\n        '''\n        \n        def add_int_nums(tup):\n            '''\n            Write a function to add two integers in a tuple of integers.\n            '''\n            \n            def add_int_nums(tup):\n                '''\n                Write a function to add two integers in a tuple of integers.\n                '''\n                \n                def add_int_nums_len():\n                    '''\n                    Write a function to add two integers in a tuple of integers.\n                    '''\n                    \n                    def add_int_nums_len(tup):\n                        '''\n                        Write a function to add two integers in a tuple of integers.\n                        '''\n                        \n                        def add_int_nums_len(tup):\n                            '''\n                            Write a function to add two integers in a tuple of integers.\n                            '''\n                            \n                            def add_int_nums_len_len():\n                                '''\n                                Write a function to add two integers in a tuple of integers.\n                                '''\n                                \n                                def add_int_nums_len_len(tup):\n                                    '''\n                                    Write a function to add two integers in a tuple of integers.\n                                    '''\n                                    \n                                    def add_int_nums_len_len(tup):\n                                        '''\n                                        Write a function to add two integers in a tuple of integers.\n                                        '''\n                                        \n                                        def add_int_nums_len_len_len(tup):\n                                            '''\n                                            Write a function to add two integers in a tuple of integers.\n                                            '''\n                                            \n                                            def add_int_nums_len_len_len(tup):\n                                                '''\n                                                Write a function to add two integers in a tuple of integers.\n                                                '''\n                                                \n                                                def add_int_nums_len_len_len(tup):\n                                                    '''\n                                                    Write a function to add two integers in a tuple of integers.\n                                                    '''\n                                                    \n                                                    def add_int_nums_len_len_len(tup):\n                                                        '''\n                                                        Write a function to add two integers in a tuple of integers.\n                                                        '''\n                                                        \n                                                        def add_int_nums_len_len_len(tup):\n                                                        '''\n                                                        Write a function to add two integers in a tuple of integers.\n                                                        '''\n                                                        \n                                                        def add_int_nums_len_len_len(tup):\n                                                            '''\n                                                            Write a function to add two integers in a tuple of integers.\n                                                            '''\n                                                            \n                                                            def add_int_nums_len_len_len(tup):\n                                                                '''\n                                                                Write a function to add two integers in a tuple of integers.\n                                                                '''\n                                                                \n                                                                def add_int_nums_len_len_len(tup):\n                                                                    '''\n                                                                    Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len_len(tup):\n                                                                        '''\n                                                                        Write a function to add two integers in a tuple of integers.\n                                                                    '''\n                                                                    \n                                                                    def add_int_nums_len_len"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for i in nums:\n        int_list.append(i)\n    return int(sum(int_list))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def convert(nums):\n        sum = 0\n        for n in nums:\n            sum += n\n        return sum\n    return tuple(map(convert, nums))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    test_list = test_list[1]\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j]!='':\n                if j == 0:\n                    test_list[i][j] = float(test_list[i][j])\n                else:\n                    if test_list[i][j - 1] =='':\n                        test_list[i][j] = float(test_list[i][j])\n                    else:\n                        test_list[i][j] = float(test_list[i][j]) + float(test_list[i][j - 1])\n    test_list = [float(i) for i in test_list]\n    \n    test_list = [i for i in test_list if i!='']\n    test_list = [i for i in test_list if i!= '']\n    \n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [list(elem) for elem in test_list]\n    float_list = []\n    for elem in test_list:\n        for elem_index in range(len(elem)):\n            if elem_index == 0:\n                elem[elem_index] = float(elem[elem_index])\n            else:\n                elem[elem_index] = float(str(elem[elem_index]))\n        float_list.append(elem)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return [float(x) for x in test_list]\n    except:\n        return [x for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        for j in range(len(i)):\n            if j < len(i) - 1:\n                new_list.append(float(i[j] + i[j+1]))\n            else:\n                new_list.append(float(i[j]))\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = [float(el) for el in test_list[i]]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list.replace('(', '').replace(')', '').replace(' ', '').replace(',', '.')\n    test_list = test_list.split('.')\n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if isinstance(test_list,list):\n        for i in test_list:\n            if isinstance(i, list):\n                list_to_float(i)\n            elif isinstance(i, float):\n                test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j][0] =='' or test_list[i][j][0] == '.':\n                test_list[i][j] = float(test_list[i][j])\n            if test_list[i][j][0] == '\"':\n                test_list[i][j] = float(test_list[i][j][1:-1])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(test_list)\n    for l in test_list:\n        for i in l:\n            if isinstance(i, (int, float)):\n                pass\n            else:\n                l.remove(i)\n                break\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for element in test_list:\n        for nested_list in element:\n            for element in nested_list:\n                if type(element) is str:\n                    result.append(float(element))\n                elif type(element) is float:\n                    result.append(element)\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    # raise NotImplementedError()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [s.strip().split(',') for s in string.split()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # define the list of strings\n    list = []\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [ s.strip() for s in string.split(' ') ]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    temp = arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a new list and save it in it\n    new_list = []\n    # pass all items to sort\n    # count how many times they appear\n    # and return it\n    for i in arr:\n        new_list.append(i)\n    # create a counter\n    c = Counter(new_list)\n    # print the count\n    # use a print statement so that you can see the data\n    # go through the count and print the count\n    # in a sorted fashion\n    # make sure that you indent the output\n    # so that it is readable\n    for k,v in c.items():\n        if v == 1:\n            print(k, end ='')\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    left = 0\n    right = n-1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def count(arr, x):\n        n = len(arr)\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        return count\n    \n    def is_duplicate(arr):\n        n = len(arr)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                if arr[i] == arr[j] and count(arr, arr[i]) == 1:\n                    return False\n        return True\n    \n    print(is_duplicate(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    k = 0\n    arr_len = len(arr)\n    for i in range(arr_len):\n        if arr[i] == arr[k]:\n            k += 1\n        else:\n            if k == 0:\n                return arr[i]\n            else:\n                k = 0\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print(arr)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)-1):\n            if arr[j] == arr[j+1]:\n                return arr[j]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    \n    left = 0\n    right = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        \n        if arr[mid] == mid:\n            return mid\n        elif arr[mid] < mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for lst in list1:\n        max_product = max(max_product, lst[0]*lst[1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            tup = list1[i] + list1[j]\n            if(tup > max_product):\n                max_product = tup\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) <= 0:\n        return 0\n    else:\n        return max(list(map(lambda x: max(list(map(lambda y: max(list(map(lambda z: max(list(map(lambda y: max(list(map(lambda x: x*y, list(zip(*x)))))),list(zip(*list(map(lambda x: x*x, list(zip(*x)))))[0]))))))),list(map(lambda x: max(list(map(lambda y: max(list(map(lambda z: max(list(map(lambda y: max(list(map(lambda x: x*y, list(zip(*x)))))[0]))))))))))),list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: x*x, list(zip(*list(map(lambda x: "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Code here\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    max_product = 0\n    for i in list1:\n        for j in list1:\n            if i[0] < j[0] and i[1] > j[1]:\n                max_product = max(i[0]*j[0], i[1]*j[1], max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Define max_product\n    max_product = 0\n    # Iterate through list\n    for i in range(len(list1)):\n        # If list is odd\n        if i % 2 == 1:\n            # Iterate through list\n            for j in range(i+1, len(list1), 2):\n                # Calculate product\n                product = list1[i] * list1[j]\n                # Append product to max_product\n                max_product = max(max_product, product)\n                # Clear list\n                list1.pop(j)\n        else:\n            # Iterate through list\n            for j in range(i+1, len(list1), 2):\n                # Calculate product\n                product = list1[i] * list1[j]\n                # Append product to max_product\n                max_product = max(max_product, product)\n                # Clear list\n                list1.pop(j)\n    # Return max_product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = max(list1)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product_tuple = ()\n    for a, b in list1:\n        product_tuple = (product_tuple[0]*a, product_tuple[1]*b)\n    return product_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(0,len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i] > list1[j]):\n                max_product = max(max_product, list1[i] * list1[j])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Write your code here\n    def max_product(num1, num2, num3):\n        if num1 >= num2:\n            if num1 >= num3:\n                return num1 * num1\n            elif num2 >= num3:\n                return num2 * num2\n            else:\n                return num3 * num3\n        else:\n            if num2 >= num3:\n                return num2 * num2\n            elif num1 >= num3:\n                return num1 * num1\n            else:\n                return num3 * num3\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_numbers = 0\n    for i in range(1, limit + 1):\n        if i < 10 and i > 1:\n            sum_numbers += i\n        else:\n            if i in range(2, i) and i not in [1, 3, 5, 7, 11, 13]:\n                sum_numbers += i\n    return sum_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        number = 0\n        \n        # check each number is amicable\n        for j in range(1, int(i ** 0.5) + 1):\n            if i % j == 0:\n                number += j\n                \n        # if number is greater than 0, add it to amicable numbers list\n        if number > 0:\n            amicable_numbers.append(number)\n    \n    # return the sum of amicable numbers\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1, limit) if i > 1 and i % 2 == 0 and i not in amicable_numbers]\n    amicable_numbers = sum(amicable_numbers)\n    return amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [num for num in range(1, limit + 1) if num % 2 == 0]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1,limit+1):\n        if i == 0:\n            continue\n        if i == 1:\n            if i!= 1:\n                return i\n            else:\n                continue\n        \n        if i % 2 == 0:\n            amicable_sum += i\n        else:\n            if i % 3 == 0:\n                amicable_sum += i\n            if i % 5 == 0:\n                amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    def is_amicable(num):\n        n = num\n        m = int(math.sqrt(n))\n        \n        for i in range(1, m):\n            if n % i == 0 and n // i == i:\n                return True\n        return False\n    \n    amicable_numbers = []\n    \n    for num in range(1,limit):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    \n    sum = 0\n    for am in amicable_numbers:\n        sum += am\n    \n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # 1. Create a list to count the amicable numbers\n    amicable_numbers = []\n    for num in range(1, limit):\n        sum_of_amicable_numbers = 0\n        for i in range(1, num):\n            if num % i == 0:\n                sum_of_amicable_numbers += i\n        if sum_of_amicable_numbers == num:\n            amicable_numbers.append(num)\n        print('sum_of_amicable_numbers =', sum_of_amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    divisor = 0\n    for x in range(1, limit + 1):\n        divisor = x\n        if divisor == 1:\n            continue\n        else:\n            for i in range(1, divisor):\n                if divisor % i == 0:\n                    if divisor // i == divisor // i:\n                        continue\n                    else:\n                        amicable_numbers.append(divisor)\n                    break\n    return amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    #Base case\n    if limit == 1:\n        return 1\n    \n    #If the number is a factor\n    if limit % 2 == 0:\n        return amicable_numbers_sum(limit - 1) + amicable_numbers_sum(limit - 2)\n    else:\n        #If we have already evaluated the number, add the result\n        #Otherwise, return the sum\n        return amicable_numbers_sum(limit - 1) + amicable_numbers_sum(limit - 2)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a.real,a.imag)\n    d = complex(b.real,b.imag)\n    angle = acos(d)/abs(d)\n    return angle*180/pi\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        a=complex(1,0)\n    if b==0:\n        b=complex(0,1)\n        \n    if a==b:\n        return 90\n        \n    s=b/a\n    if s.imag==0:\n        return cmath.acos(s.real)\n    else:\n        return cmath.acos(1/s.imag)\n        \n    \n    \n    \n    \n    \ndef cross_product(a,b):\n    '''\n    Write a function to get the cross product of two vectors.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        a=complex(1,0)\n    if b==0:\n        b=complex(0,1)\n        \n    if a==b:\n        return 0\n        \n    return a*b\n    \n    \ndef magnitude(a):\n    '''\n    Write a function to get the magnitude of a vector.\n    '''\n    a=a.real\n    \n    if a==0:\n        return 0\n        \n    m=abs(a)\n    return m\n    \ndef angle(a,b):\n    '''\n    Write a function to get the angle of two vectors.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n    if b==0:\n        return 180\n    \n    \n    \n    a=cmath.acos(a)\n    b=cmath.acos(b)\n    \n    if a.imag==0 and b.imag==0:\n        return 0\n    \n    c=(a.real*b.real-a.imag*b.imag)\n    if c.imag==0:\n        return 180+cmath.acos(c.real)\n    else:\n        return 180+cmath.acos(c.imag)\n        \n    \n    \n    \ndef projection_vector(a,b):\n    '''\n    Write a function to get the projection of a vector.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        a=complex(1,0)\n    if b==0:\n        b=complex(0,1)\n        \n    if a==b:\n        return 0\n        \n    r=a.imag\n    return r*cross_product(a,b)/(magnitude(a)+magnitude(b))\n    \n    \ndef vector_length(a):\n    '''\n    Write a function to get the length of a vector.\n    '''\n    a=a.real\n    \n    if a==0:\n        return 0\n        \n    l=magnitude(a)\n    return l\n    \n    \ndef angle_signed(a,b):\n    '''\n    Write a function to get the angle of a vector.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n        \n    m=abs(a)\n    s=b/m\n    if s.imag==0:\n        return cmath.acos(s.real)\n    else:\n        return cmath.acos(1/s.imag)\n        \n    \n    \ndef angle_signed_comp(a,b):\n    '''\n    Write a function to get the angle of a vector.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n        \n    m=abs(a)\n    s=b/m\n    if s.imag==0:\n        return cmath.acos(s.real)\n    else:\n        return cmath.acos(1/s.imag)\n        \n    \n    \n    \ndef angle_signed_comp_complex(a,b):\n    '''\n    Write a function to get the angle of a vector.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n        \n    m=abs(a)\n    s=b/m\n    if s.imag==0:\n        return cmath.acos(s.real)\n    else:\n        return cmath.acos(1/s.imag)\n        \n    \n    \ndef angle_signed_comp_complex_comp(a,b):\n    '''\n    Write a function to get the angle of a vector.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n        \n    m=abs(a)\n    s=b/m\n    if s.imag==0:\n        return cmath.acos(s.real)\n    else:\n        return cmath.acos(1/s.imag)\n        \n    \n    \n    \ndef angle_signed_comp_complex_comp_complex(a,b):\n    '''\n    Write a function to get the angle of a vector.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n        \n    m=abs(a)\n    s=b/m\n    if s.imag==0:\n        return cmath.acos(s.real)\n    else:\n        return cmath.acos(1/s.imag)\n        \n    \n    \n    \n    \ndef angle_complex_comp(a,b):\n    '''\n    Write a function to get the angle of two complex numbers.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n    if b==0:\n        return 90\n        \n    a=cmath.acos(a)\n    b=cmath.acos(b)\n    \n    if a.imag==0 and b.imag==0:\n        return 0\n    \n    c=(a.real*b.real-a.imag*b.imag)\n    if c.imag==0:\n        return 90+cmath.acos(c.real)\n    else:\n        return 90+cmath.acos(c.imag)\n        \n    \n    \n    \n    \n    \n    \n    \n    \ndef angle_complex_comp_complex(a,b):\n    '''\n    Write a function to get the angle of two complex numbers.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        return 0\n    if b==0:\n        return 90\n        \n    a=cmath.acos(a)\n    b=cmath.acos(b)\n    \n    if a.imag==0 and b.imag==0:\n        return 0\n    \n    c=(a.real*b.real-a.imag*b.imag)\n    if c.imag==0:\n        return 90+cmath.acos(c.real)\n    else:\n        return 90+cmath.acos(c.imag)\n        \n    \n    \n    \n    \n    \ndef distance(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        a=complex(1,0)\n    if b==0:\n        b=complex(0,1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef distance_complex(a,b):\n    '''\n    Write a function to get the distance between two vectors.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        a=complex(1,0)\n    if b==0:\n        b=complex(0,1)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef angle_angle(a,b):\n    '''\n    Write a function to get the angle of two vectors.\n    '''\n    a=a.real\n    b=b.real\n    \n    if a==0:\n        a=complex(1,0)\n    if b==0:\n        b=complex(0,1)\n    "
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r = (a.real**2+a.imag**2)**0.5\n    theta = cmath.acos(r)\n    return theta\ndef angle_real(a,b):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    theta = (a.real*b.real-a.imag*b.imag)/(a.real**2+a.imag**2)\n    return theta\ndef angle_imag(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r = (a.real*b.imag-a.imag*b.real)/(a.real**2+a.imag**2)\n    theta = cmath.asin(r)\n    return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (a.real + b.real)/2\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x, y = complex(a.real, a.imag), complex(b.real, b.imag)\n    return acos(cmath.sqrt(x**2+y**2))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = acos(a/b)\n    angle = angle*180/pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=cmath.rect(a,b)\n    angle=c.angle()\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = b.real**2 + a.real**2 - a.imag**2 - 2*a.real*b.imag\n    y = 2*a.real*b.imag + 2*a.imag**2\n    angle = atan2(y,x)\n    angle = (angle*180)/pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(a) + cmath.phase(b)) * (180 / cmath.pi)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Import Cmath\n    from cmath import *\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            max_length = max(max_length, len(string) - i)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #Initialize variables\n    num_zeros = 0\n    num_ones = 0\n    #Loop through the string\n    for i in range(len(string)):\n        if string[i] == 0:\n            num_zeros += 1\n        elif string[i] == 1:\n            num_ones += 1\n    #Check if there are any zeroes or ones in the string\n    if num_zeros > num_ones:\n        return num_zeros - num_ones\n    #Else we have two zeroes\n    elif num_zeros == num_ones:\n        return num_zeros\n    #else we have two ones\n    else:\n        return num_ones - num_zeros\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    count = 0\n    for i in range(length):\n        if string[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Your code here\n    length=0\n    for i in range(0,len(string)):\n        if string[i]=='0':\n            length+=1\n        else:\n            length-=1\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string is None: \n        return 0\n    else: \n        n = len(string)\n        \n        for i in range(n): \n            if string[i] == '0': \n                temp = 0\n            else:\n                temp = 1\n            \n            temp = temp + int(find_length(string[i + 1:]) - temp)\n        \n        return temp\n    \n    \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pos = 0\n    max_diff = 0\n    while pos < len(string):\n        current_char = string[pos]\n        count_0 = string.count(current_char, 0)\n        count_1 = string.count(current_char, 1)\n        count_0 -= 1\n        count_1 -= 1\n        max_diff = max(max_diff, count_0 - count_1)\n        pos += 1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    i=0\n    j=0\n    k=0\n    \n    while(j<len(string)):\n        if(string[i]=='0' and string[j]=='1'):\n            k+=1\n        i+=1\n        j+=1\n    return k\n    \n    \n    "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: \n        return 0 \n    elif len(string) == 1: \n        return 1 \n    else: \n        return find_length(string[1:]) - find_length(string[:-1]) \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    #Convert the given string to a list of all 1's and 0's\n    list = [int(char) for char in string]\n    #Create an empty array to store max diff\n    max_diff = []\n    #Loop through every char in list\n    for char in list:\n        #If the char is 1, append it to max_diff\n        if char == 1:\n            #Add the index of the first occurence of 1 to the max_diff array\n            max_diff.append(list.index(1))\n        #If the char is 0, append it to max_diff\n        else:\n            #Add the index of the first occurence of 0 to the max_diff array\n            max_diff.append(list.index(0))\n    #Find the max diff\n    return max(max_diff)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"1\":\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return b\n    if b==0:\n        return a\n    return a+b+sum(a,b-1)\n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        small=a\n        big=b\n    else:\n        small=b\n        big=a\n    #print(small,big)\n    c=0\n    while True:\n        if big%small==0:\n            c+=1\n            big=big/small\n            if c==3:\n                break\n        else:\n            c=0\n            small=small/big\n            if c==3:\n                break\n    return small\n    "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return int(a/b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    try: \n        a=int(a)\n        b=int(b) \n        if a==0 or b==0: \n            return 0\n        while a%b==0: \n            a=a//b \n        return a \n    except: \n        print(\"Please enter a number\")\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Your code here\n    # Variables\n    lst = list(a)\n    lst2 = list(b)\n    # Call your function here\n    common = set(lst) & set(lst2)\n    return sum(common)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=0\n    a,b=min(a,b),max(a,b)\n    for i in range(a,b+1):\n        if i%2==0:\n            s+=i\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return (a % b) if (a % b)!= 0 else 0\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum(x for x in range(a,b+1) if a % x == 0 and b % x == 0)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    a=abs(a)\n    b=abs(b)\n    if a==b:\n        return a\n    elif a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(sum(a,b))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef add(x, y):\n    '''\n    Write a function to compute the sum of x and y.\n    '''\n    return x + y\n    \ndef subtract(x, y):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - y\n    \ndef divide(x, y):\n    '''\n    Write a function to compute the quotient of x and y.\n    '''\n    return x / y\n    \ndef multiply(x, y):\n    '''\n    Write a function to compute the product of x and y.\n    '''\n    return x * y\n    \ndef square(x):\n    '''\n    Write a function to square a number.\n    '''\n    return x * x\n    \ndef power(x, y):\n    '''\n    Write a function to raise x to the power of y.\n    '''\n    return x**y\n    \ndef modulo(x, y):\n    '''\n    Write a function to compute the remainder of x divided by y.\n    '''\n    return x % y\n    \ndef power_x_y(x, y):\n    '''\n    Write a function to compute the square root of x and y.\n    '''\n    return x**y\n    \ndef power_x_y_modulo_y(x, y, z):\n    '''\n    Write a function to compute the square root of x and y multiplied\n    by z.\n    '''\n    return x**y*z**(x%y)\n    \ndef make_divisible(x, y):\n    '''\n    Write a function that returns the integer x rounded down to the nearest\n    multiple of y. For example, make_divisible(10, 3) returns 10.\n    '''\n    return int(x * (y/10))\n    \ndef absolute(x):\n    '''\n    Write a function to return the absolute value of a number.\n    '''\n    return x\n    \ndef neg(x):\n    '''\n    Write a function to return the negated number.\n    '''\n    return -x\n    \ndef add_strings(a, b):\n    '''\n    Write a function that concatenates the strings a and b into strings.\n    '''\n    return a + b\n    \ndef repeat(x, y):\n    '''\n    Write a function that repeats x times.\n    '''\n    return x * y\n    \ndef plus(x, y):\n    '''\n    Write a function that returns the sum of x and y.\n    '''\n    return x + y\n    \ndef subtract(x, y):\n    '''\n    Write a function that returns the difference of x and y.\n    '''\n    return x - y\n    \ndef divide(x, y):\n    '''\n    Write a function that returns the quotient of x and y.\n    '''\n    return x / y\n    \ndef mult_string(x, y):\n    '''\n    Write a function that multiplies a string with a number x.\n    '''\n    return x * y\n    \ndef mult_int(x, y):\n    '''\n    Write a function that multiplies a number with a string x.\n    '''\n    return x * y\n    \ndef substract(x, y):\n    '''\n    Write a function that subtracts a number from x.\n    '''\n    return x - y\n    \ndef div_int(x, y):\n    '''\n    Write a function that divides a number by x.\n    '''\n    return x / y\n    \ndef div_string(x, y):\n    '''\n    Write a function that divides a string by a number.\n    '''\n    return x / y\n    \ndef div_int_string(x, y):\n    '''\n    Write a function that divides a number by a string.\n    '''\n    return x / y\n    \ndef divide_int(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x // y\n    \ndef modulo_int(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x % y\n    \ndef modulo_string(x, y):\n    '''\n    Write a function that divides a number by a string.\n    '''\n    return x % y\n    \ndef divide_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x // y\n    \ndef modulo_string_modulo_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x % y\n    \ndef float_convert(x):\n    '''\n    Write a function that converts a float x to a string.\n    '''\n    return str(x)\n    \ndef float_convert_modulo(x):\n    '''\n    Write a function that converts a float x to a string.\n    '''\n    return str(x % 1)\n    \ndef convert_to_sign(x):\n    '''\n    Write a function that converts a string to a number.\n    '''\n    return -1\n    \ndef convert_to_modulo(x):\n    '''\n    Write a function that converts a number to a string.\n    '''\n    return x\n    \ndef convert_to_int(x):\n    '''\n    Write a function that converts a number to a string.\n    '''\n    return int(x)\n    \ndef convert_to_string(x):\n    '''\n    Write a function that converts a number to a string.\n    '''\n    return str(x)\n    \ndef increment(x):\n    '''\n    Write a function that increments a number by 1.\n    '''\n    return x + 1\n    \ndef divide_by(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x / y\n    \ndef divide_by_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x // y\n    \ndef multiply_by(x, y):\n    '''\n    Write a function that multiplies a number by a number.\n    '''\n    return x * y\n    \ndef divide_by_modulo_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x // y\n    \ndef divide_by_string(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x * y\n    \ndef modulo_string_by_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x % y\n    \ndef modulo_int_by_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x % y\n    \ndef modulo_string_by_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x % y\n    \ndef power_modulo_modulo(x, y):\n    '''\n    Write a function that powers a number by a number.\n    '''\n    return x ** y\n    \ndef power_modulo_string(x, y):\n    '''\n    Write a function that powers a number by a number.\n    '''\n    return x ** y\n    \ndef power_modulo_int(x, y):\n    '''\n    Write a function that powers a number by a number.\n    '''\n    return x ** y\n    \ndef divide_string_modulo(x, y):\n    '''\n    Write a function that divides a number by a number.\n    '''\n    return x / y\n    \ndef negative(x):\n    '''\n    Write a function that returns the negated number.\n    '''\n    return -x\n    \ndef negative_modulo(x):\n    '''\n    Write a function that returns the negated number.\n    '''\n    return -x\n    \ndef power_modulo_string_modulo(x, y):\n    '''\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    result = x\n    \n    if y == 0:\n        return result\n    if y < 0:\n        result = -1 * result\n        y = -y\n    \n    while y:\n        result = result * y % 10\n        y = y // 10\n    \n    return result\n    \nprint(multiply_int(\"12345678\", \"4\"))\nprint(multiply_int(\"12345678\", \"15\"))"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = x * y\n    return x\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        return x\n    elif y < 0:\n        return -1\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Check types\n    assert isinstance(x, int), 'X must be an integer.'\n    assert isinstance(y, int), 'Y must be an integer.'\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    \n    # Our solution, not working at the moment\n    # My solution:\n    \n    x = str(x)\n    y = str(y)\n    if y=='0':\n        pass\n    else:\n        x = int(x)\n        y = int(y)\n        return x*y\n    # base case:\n    \n    # return x*y\n    \n    # This solution is pretty much\n    # working, but may need tweaking\n    \n    # return x*y\n    \n    \n    \n    # \n    \n    # or\n    \n    # return (x*y)\n    \n    \n    \n    \n    \n    # return x*y\n    \n    # return (x*y)\n    \n    # return (x*y)\n    \n    \n    \n    # # This is an old solution\n    \n    # return x*y\n    \n    \n    # return x*y\n    \n    # return x*y\n    \n    \n    # return x*y\n    \n    # return x*y\n    \n    \n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # return x*y\n    \n    # retur"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"n must be an integer\")\n    elif n < 2:\n        raise ValueError(\"n must be an integer that is greater than 1\")\n    elif type(str)!= list:\n        raise TypeError(\"str must be a list\")\n    elif len(str) == 0:\n        raise ValueError(\"list of strings must not be empty\")\n    else:\n        words = []\n        for word in str:\n            if len(word) > n:\n                words.append(word)\n        return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n < 1:\n        return []\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    i = 0\n    j = 1\n    j2 = 2\n    #check if a word has more than 1 character\n    while (j <= n):\n        if(i < n):\n            if(str[i]!= str[j]):\n                if(str[i] < str[j]):\n                    i += 1\n                    j += 2\n                    j2 = 2\n                else:\n                    i += 1\n                    j += 2\n                    j2 = 2\n            else:\n                i += 1\n                j += 2\n                j2 = 2\n        else:\n            j += 1\n    #check if a word has more than 1 character\n    if(j2 >= n):\n        return n\n    #return n if no word has more than 1 character\n    else:\n        return n\n        \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #if n is greater than the length of the string\n    if len(str) > n:\n        #loop through the string and find the words with a length greater than n\n        for i in range(len(str)):\n            if len(str[i]) > n:\n                #print the word\n                print(str[i])\n                #return the word\n                return\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str_len = len(str)\n    list_words = [word for word in str.split() if len(word) >= n]\n    return list_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l = []\n    for word in str:\n        l.append(word)\n        \n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    short_words = []\n    for word in str:\n        if len(word) < n:\n            short_words.append(word)\n    return short_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>=n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import math\n    max_length = math.ceil(math.log2(len(str)))\n    word_list = []\n    for i in str:\n        if len(str) - 1 < i < max_length:\n            word_list.append(str)\n    return word_list\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] == 0:\n                continue\n            elif my_matrix[i][j] == my_matrix[i][j-1] or my_matrix[i][j] == my_matrix[i-1][j] or my_matrix[i][j] == my_matrix[i+1][j] or my_matrix[i][j] == my_matrix[i-1][j-1]:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def check_magic_square(matrix):\n        row = len(matrix)\n        column = len(matrix[0])\n        for row_idx in range(0,row):\n            for column_idx in range(0,column):\n                if matrix[row_idx][column_idx]!= 1:\n                    return False\n        return True\n    return check_magic_square(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #TODO: Implement this function!\n    matrix_length = len(my_matrix)\n    \n    sum_of_digits = 0\n    for row in range(0, matrix_length):\n        for column in range(0, matrix_length):\n            if row!= column:\n                sum_of_digits += my_matrix[row][column]\n            \n    if sum_of_digits == 28:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if sum(my_matrix) == sum(my_matrix):\n        print(\"It is a magic square!\")\n    else:\n        print(\"It is not a magic square!\")\n        \nmagic_square_test([[1,2],[2,1]])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if is_magic(my_matrix):\n        print(\"The matrix is a magic square\")\n    else:\n        print(\"The matrix is not a magic square\")\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return my_matrix[0][0] == my_matrix[0][1] == my_matrix[1][0] == my_matrix[1][1]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if all(row == 0 for row in my_matrix):\n        return True\n    \n    for row in my_matrix:\n        if all(row[i] == 0 for i in range(len(row))):\n            return False\n    return True\n    \ndef magic_square_test_2(my_matrix):\n    '''\n    Write a function that returns whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(i+1, len(my_matrix)):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    if len(my_matrix)!= len(my_matrix[0][0]):\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for i in nums:\n        freq_dict[i] += 1\n    freq_list = list(freq_dict.values())\n    return max(freq_list)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums.remove(0)\n        for j in range(i+1, len(nums)):\n            if nums[j] == 0:\n                nums.remove(0)\n    return(nums[0])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    for num in nums:\n        max_freq[num] = max_freq[num] + 1\n    max_freq_value = max(max_freq.values())\n    for num in nums:\n        if max_freq[num] == max_freq_value:\n            return num\n    return None\n    \ndef min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    min_freq = defaultdict(int)\n    for num in nums:\n        min_freq[num] = min_freq[num] + 1\n    min_freq_value = min(min_freq.values())\n    for num in nums:\n        if min_freq[num] == min_freq_value:\n            return num\n    return None\n    \ndef get_dict(nums):\n    '''\n    Write a function to get the dictionary that maps a given list of numbers\n    to a unique integer.\n    '''\n    # { 1: 1, 2: 1, 3: 1,... }\n    dict = defaultdict(int)\n    for num in nums:\n        dict[num] += 1\n    return dict\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrence = defaultdict(list)\n    for num in nums:\n        occurrence[num].append(nums.count(num))\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # for any number of unique values of n, make a dictionary to store this value\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_num = 0\n    for num in d.keys():\n        if d[num] > max_num:\n            max_num = d[num]\n            max_index = num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = {}\n    for num in nums:\n        frequency[num] = frequency.get(num,0) + 1\n    print(frequency)\n    return max(frequency, key=frequency.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = {}\n    for i in nums:\n        if i in max_freq:\n            max_freq[i] += 1\n        else:\n            max_freq[i] = 1\n    for i in nums:\n        if max_freq[i] > 0:\n            return i\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occur = defaultdict(int)\n    for num in nums:\n        occur[num] += 1\n    return max(occur, key=occur.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max = 0\n    idx = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for item in nums:\n        freq[item] += 1\n    for key in freq:\n        if freq[key] == max(freq.values()):\n            return key\n    return 'no such item'\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    l = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] == \"y\":\n            l.append(str1[i])\n    l = \"\".join(l)\n    \n    return l\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1=list(str1)\n    str1.reverse()\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # your code goes here\n    vowels=set(['a','e','i','o','u'])\n    x=str1.lower()\n    for i in x:\n        if i in vowels:\n            if i=='y':\n                x=x.replace(i,'z')\n            else:\n                x=x.replace(i,'a')\n        else:\n            x=x.replace(i,'n')\n    return(x)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = []\n    vowel_list.append(str1[0])\n    vowel_list.append(str1[1])\n    vowel_list.append(str1[2])\n    for i in range(3,len(str1)):\n        if str1[i] in vowels:\n            vowel_list.append(str1[i])\n    answer = \"\".join(vowel_list)\n    return answer\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels_dict = {\"a\": \"z\", \"e\": \"u\", \"i\": \"o\", \"o\": \"a\", \"u\": \"e\", \"y\": \"i\", \"A\": \"Z\", \"E\": \"U\", \"I\": \"O\", \"O\": \"U\"}\n    \n    str1 = str1.lower()\n    \n    vowels_set = set(vowels_dict.values())\n    \n    for char in vowels_set:\n        if char in str1:\n            print(char + str1[::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    string_to_rev = \"\"\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            string_to_rev = string_to_rev + str1[i].lower() + \" \"\n        else:\n            string_to_rev = string_to_rev + str1[i] + \" \"\n    return string_to_rev\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in 'aeiouAEIOU':\n            new_str += str1[-i-1]\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TODO: Write your code here\n    vowels = {'a','e','i','o','u'}\n    str1 = str1.lower()\n    for i in vowels:\n        if i in str1:\n            str1 = str1.replace(i,'')\n            \n    return str1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    rev = ''\n    for char in str1:\n        if char in vowels:\n            rev += char\n        else:\n            rev += char[::-1]\n    return rev\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str1_reverse = str1[::-1]\n    for char in str1_reverse:\n        if char in vowels:\n            return char\n    return str1_reverse[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + str(tup1[0]) + \",\" + str(tup1[1]) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2=list(tup1)\n    for i in range(len(tup2)):\n        tup2[i]=str(tup2[i])\n    tup3=tuple(tup2)\n    return str(tup3)\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join([str(x) for x in tup1]) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join([str(x) for x in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for i in range(len(tup1)):\n        result += tup1[i] + \" \"\n    return result[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = \"\"\n    for i in tup1:\n        string1 += i + \",\"\n    return string1\ndef list_tup(lst1):\n    '''\n    Write a function to convert a list of tuples into a string.\n    '''\n    string2 = \",\"\n    for i in lst1:\n        string2 += str(i[0]) + \",\"\n    return string2\ndef json_tup(lst):\n    '''\n    Write a function to convert a list of tuples into a json string.\n    '''\n    return json.dumps(lst)\ndef sort_list(lst):\n    '''\n    Write a function to sort the list.\n    '''\n    new_lst = []\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n            if lst[i][j] < 0:\n                lst[i][j] = -lst[i][j]\n            else:\n                pass\n        new_lst.append(lst[i])\n    return new_lst\ndef get_key(list1, key):\n    '''\n    Write a function to return the index of the key, given a list and a key.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i][0] == key:\n            return i\n    return -1\ndef replace_key(list1, key, new_key, new_value):\n    '''\n    Write a function to replace the key with a new value in a list.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i][0] == key:\n            list1[i][0] = new_key\n            list1[i][1] = new_value\n            return list1\n    return list1\ndef add_key(list1, key, value):\n    '''\n    Write a function to add a key and value to a list.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i][0] == key:\n            list1[i][1] = value\n            return list1\n    return list1\ndef add_key_and_value(list1, key, value):\n    '''\n    Write a function to add a key and value to a list, and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list[len(new_list)-1][0] = key\n    new_list[len(new_list)-1][1] = value\n    return new_list\ndef remove_key(list1, key):\n    '''\n    Write a function to remove a key from a list.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i][0] == key:\n            list1.remove(list1[i])\n            return list1\n    return list1\ndef remove_key_and_value(list1, key):\n    '''\n    Write a function to remove a key from a list and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list[len(new_list)-1][1] = key\n    return new_list\ndef get_key_and_value(list1, key, value):\n    '''\n    Write a function to return the index of the key and value, given a list and a key and value.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i][0] == key:\n            return i, list1[i][1]\n    return -1, -1\ndef insert_key(list1, key, value):\n    '''\n    Write a function to insert a key and value to a list.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i][0] == key:\n            list1.insert(i, [value, 0])\n            return list1\n    return list1\ndef insert_key_and_value(list1, key, value):\n    '''\n    Write a function to insert a key and value to a list, and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.append([value, 0])\n    return new_list\ndef extend_key_and_value(list1, key, value):\n    '''\n    Write a function to insert a key and value to a list, and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.append([value, key])\n    return new_list\ndef insert_key_and_value_and_key(list1, key, value, key_1):\n    '''\n    Write a function to insert a key and value to a list, and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.append([key, value, key_1])\n    return new_list\ndef extend_key_and_value_and_key(list1, key, value, key_1):\n    '''\n    Write a function to insert a key and value to a list, and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.append([key, value, key_1])\n    return new_list\ndef delete_key(list1, key):\n    '''\n    Write a function to delete a key from a list.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i][0] == key:\n            list1.remove(list1[i])\n            return list1\n    return list1\ndef delete_key_and_value(list1, key):\n    '''\n    Write a function to delete a key from a list and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.remove(list1[0])\n    return new_list\ndef delete_key_and_value_and_key(list1, key):\n    '''\n    Write a function to delete a key from a list and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.remove(list1[0])\n    new_list.remove(list1[1])\n    return new_list\ndef delete_key_and_value_and_key_1(list1, key):\n    '''\n    Write a function to delete a key from a list and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.remove(list1[0])\n    new_list.remove(list1[1])\n    new_list.remove(list1[2])\n    return new_list\ndef delete_key_and_value_and_key_2(list1, key):\n    '''\n    Write a function to delete a key from a list and then add a new key and value to the list.\n    '''\n    new_list = list1\n    new_list.remove(list1[0])\n    new_list.remove(list1[1])\n    new_list.remove(list1[2])\n    return new_list\ndef check_tup_same(tup1):\n    '''\n    Write a function to check if a given tuple is a same type as a tuple.\n    '''\n    for i in range(0,len(tup1)):\n        if tup1[i][0] == tup1[i][1]:\n            return True\n    return False\ndef search_tup(tup1, key):\n    '''\n    Write a function to check if a given tuple is a same type as a tuple.\n    '''\n    for i in range(0,len(tup1)):\n        if tup1[i][0] == key:\n            return i\n    return -1\ndef remove_tup(tup1, key):\n    '''\n    Write a function to remove a tuple.\n    '''\n    new_tup = []\n    for i in range(0,len(tup1)):\n        if tup1[i][0] == key:\n        "
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    lst = []\n    for x in tup1:\n        lst.append(str(x))\n    return '(' + ', '.join(lst) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    strt = \"\"\n    for i in tup1:\n        strt += str(i)\n    return strt\n    \n    \n    \nif __name__ == '__main__':\n    #print(tup_string((1,2,3)))\n    tup = (1,2,3,4)\n    print(tup_string(tup))"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a=''\n    for i in tup1:\n        a=a+str(i)\n    return a\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for x in tup1:\n        str1 += str(x)\n    return str1"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg = 0\n    for i in range(0,len(nums)):\n        if nums[i] < 0:\n            neg = neg + nums[i]\n    return neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-num if num < 0 else 0 for num in nums])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        total += -1 * num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Your code here\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_num = 0\n    for num in nums:\n        if num < 0:\n            neg_num += num\n    return neg_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s=0\n    for num in nums:\n        if num<0:\n            s+=num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    return sum(negatives)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for num in nums:\n        if num < 0:\n            negative_num += num\n    return negative_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negative = negative + nums[i]\n    return negative\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    else:\n        n = n-1\n        return hexagonal_num(n) * 4 + 2\n    \nprint(hexagonal_num(5)"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    elif n % 2 == 0: \n        return (n**2 + 1)**0.5 \n    else: \n        return (n**2 + 1)**0.5 * 3 + 1 \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    sum = 0\n    while n > 0:\n        sum += (n * (n+1)) // 2\n        n = n//6\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return n\n    if n == 1:\n        return n\n    \n    f = n//2\n    h = 2*f\n    a = f\n    b = (2*f-1)\n    c = (2*f-2)\n    d = (2*f-3)\n    e = (2*f-4)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 0\n    if n % 4 == 0:\n        return n\n    if n % 2 == 0:\n        num = (n//4) * 4\n    else:\n        num = (n//2) * 2 + (n//4) * 4\n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return hexagonal_num(n - 1) + 2 * hexagonal_num(n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for i in range(1, n):\n        if i**2 == n:\n            return i\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n**2 + (n+1)**2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 6:\n        return n * n \n    else:\n        # print (n)\n        for i in range(n):\n            if i == 0 or i == (n - 1):\n                print (n)\n                return n \n            else:\n                if i % 2 == 0:\n                    print (n - i - 1)\n                else:\n                    print (n - i + 1)\n                return n \n        return n\n    return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    print(zero_count, nonzero_count)\n    return (zero_count/len(nums))*100\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for n in nums:\n        if n == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # return 0 if there is no zero in the array\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return float(zero_count) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nonzero = 0\n    zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero += 1\n        else:\n            nonzero += 1\n    ratio = zero/nonzero\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count+=1\n        else:\n            count+=0\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return int(len(nums)/(len(nums)-nums.count(0)))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # TODO: Implement this function!\n    # Return the ratio of zeroes to non-zeroes of nums.\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0): \n        return False\n    # get non zero powers of 2\n    # then sum of power of 2\n    sum = 0\n    while n > 0: \n        sum += n % 2\n        n = n // 2\n    # check whether the sum of power of 2 is zero or not\n    return sum == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    for i in range(2, n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n in [1,2,3]:\n        return True\n    else:\n        for i in range(1,n):\n            if (n%i) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    return n==nth_sum_of_powers_of_two(n)\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(2,n):\n        if (n%i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2) and is_Sum_Of_Powers_Of_Two(n*3+1)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_pow = 0\n    for power in range(1, n + 1):\n        if n % power == 0:\n            sum_of_pow += power\n    if sum_of_pow!= n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # taking input value\n    n = int(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 1): \n        return True\n    if (n == 2): \n        return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14*(2*(r**2))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r ** 2"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*pi*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r ** 2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list)==0:\n        return None\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # find all the numbers inside the lists and store them in a list\n    numbers = []\n    for test_list in test_list:\n        if type(test_list)!= type([]):\n            return_list = []\n            for value in test_list:\n                return_list.append(value)\n            numbers.append(return_list)\n        else:\n            for item in test_list:\n                if type(item)!= type([]):\n                    return_list = []\n                    for value in item:\n                        return_list.append(value)\n                    numbers.append(return_list)\n                else:\n                    for value in item:\n                        if type(value)!= type([]):\n                            return_list = []\n                            for value_2 in value:\n                                return_list.append(value_2)\n                            numbers.append(return_list)\n                        else:\n                            for value_2 in value:\n                                if type(value_2)!= type([]):\n                                    return_list = []\n                                    for value_3 in value_2:\n                                        return_list.append(value_3)\n                                    numbers.append(return_list)\n                                else:\n                                    for value_3 in value_2:\n                                        if type(value_3)!= type([]):\n                                            return_list = []\n                                            for value_4 in value_3:\n                                                return_list.append(value_4)\n                                            numbers.append(return_list)\n                                        else:\n                                            for value_4 in value_3:\n                                                if type(value_4)!= type([]):\n                                                    return_list = []\n                                                    for value_5 in value_4:\n                                                        return_list.append(value_5)\n                                                    numbers.append(return_list)\n                                            break\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for items in test_list:\n        flattened.extend(items)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    '''\n    Example:\n    lst = [0,1,2,3,4,5,6,7,8,9]\n    extract_singly(lst) = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    def extract_singly(test_list):\n        for x in test_list:\n            if type(x) == int:\n                yield x\n    return extract_singly(test_list)\n    # could also return list(extract_singly(test_list))\n    # can also flatten a generator into a single list\n    # but I don't know how to do that\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == []:\n        return []\n    elif isinstance(test_list[0], list):\n        flatten_list = []\n        for i in test_list:\n            if isinstance(i, list):\n                flatten_list += i\n            else:\n                flatten_list.append(i)\n        return flatten_list\n    else:\n        return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        result += i\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for items in test_list:\n        if isinstance(items, list):\n            for item in items:\n                flattened.append(item)\n        else:\n            flattened.append(items)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    numbers = []\n    for x in test_list:\n        for y in x:\n            numbers.append(y)\n    print numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = list(test_list)\n    flatten_test_list = []\n    for lst in test_list:\n        if isinstance(lst, (list, tuple)):\n            flatten_test_list.extend(lst)\n    return flatten_test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return reduce(lambda acc, elem: acc + [elem], test_list, [])\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def move_to_max(nums, position, end):\n        '''\n        Given a list of elements, sort it by inserting numbers\n        at the end of it, so that it becomes the largest element.\n        '''\n        position += 1\n        end = nums[position]\n        while position < end:\n            if nums[position] > end:\n                nums[position], nums[end] = nums[end], nums[position]\n                position += 1\n                end = nums[position]\n            position += 1\n        return nums, position\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Use quick sort to sort the list\n    # If you don't know quick sort then\n    # compare two lists, and sort them accordingly\n    # then return the new sorted list\n    def quick_sort(nums, low, high):\n        if low < high:\n            # Pivot for quick sort\n            # Use a condition to sort from left to right\n            # This way it will sort from smallest to largest\n            # You can loop through the array and compare it\n            # to the pivot value, and the values will be compared\n            # If it is less than the pivot, then you swap the values\n            # and it will be compared to the last element\n            # If it is greater than the pivot, then you swap the values\n            # and it will be compared to the last element\n            mid = nums[low]\n            low = low + 1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # https://www.w3resource.com/python-exercises/python-basic-exercises.php\n    # https://stackoverflow.com/questions/56897523/how-to-sort-a-list-of-items-in-python\n    # create a new list which is the same as the original list but with the value of the index from the new list\n    # insert that index of the original list value which we want to replace in the new list\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        min_ind = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_ind]:\n                min_ind = j\n        temp = nums[i]\n        nums[i] = nums[min_ind]\n        nums[min_ind] = temp\n    print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initiate the bubble sort\n    for i in range(len(nums)):\n        # If the current element is greater than the current maximum element, swap it with the maximum element\n        if nums[i] > nums[i+1]:\n            temp = nums[i+1]\n            nums[i+1] = nums[i]\n            nums[i] = temp\n    # return the sorted list\n    return num"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #create a pivot\n    pivot = len(nums)\n    #loop through the list\n    for i in range(pivot):\n        #get the pivot\n        j = i\n        #while the left side of the pivot is not the first or last\n        while j>0 and nums[j-1] > nums[j]:\n            j-=1\n        nums[i], nums[j] = nums[j], nums[i]\n    #now check for the second last element\n    for i in range(pivot, len(nums)):\n        #get the pivot\n        j = i\n        #while the right side of the pivot is not the first or last\n        while j<len(nums) and nums[j] > nums[j-1]:\n            j+=1\n        nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return sorted(nums, reverse=True)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    count = 1\n    for i in range(len(nums)-1):\n        # find the smallest number and compare it to the next smallest number\n        for j in range(i,len(nums)-1):\n            if nums[j] < nums[i]:\n                # swap\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def reverse(l):\n        '''\n        Use the built-in reverse function\n        '''\n        l = l[::-1]\n        return l\n        \n    i = 0\n    while i < len(nums):\n        if i == len(nums) - 1:\n            if nums[i] < nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n        else:\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        i += 1\n        \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # invariant: nums[0] <= nums[1] <=... <= nums[n-2]\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]>nums[j]:\n                nums[j],nums[i]=nums[i],nums[j]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    counter = 0\n    for i in list1:\n        if i == list2[0] or i == list2[1] or i == list2[2] or i == list2[3]:\n            counter += 1\n    for j in list3:\n        if j == list1[0] or j == list1[1] or j == list1[2] or j == list1[3]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)!= len(list2):\n        count = 0\n    for x in range(len(list1)):\n        if list1[x]!= list2[x]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # initialize an empty dictionary\n    dict = {}\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(3):\n        if list1[i]!=list2[i] and list1[i]!=list3[i]:\n            samepair+=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    from collections import Counter\n    list1_counter=Counter(list1)\n    list2_counter=Counter(list2)\n    list3_counter=Counter(list3)\n    \n    for key,value in list1_counter.items():\n        if value==1:\n            list3.append(key)\n    for key,value in list2_counter.items():\n        if value==1:\n            list3.append(key)\n    for key,value in list3_counter.items():\n        if value==1:\n            list3.append(key)\n    return len(list3)"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #Your code here\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] or list1[i]==list3[i] or list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] = dict[i]+1\n        else:\n            dict[i]=1\n    for j in list2:\n        if j in dict:\n            dict[j] = dict[j]+1\n        else:\n            dict[j]=1\n    for k in list3:\n        if k in dict:\n            dict[k] = dict[k]+1\n        else:\n            dict[k]=1\n    for i,j in dict.items():\n        if j>1:\n            dict[i]=dict[i]-1\n    return dict[list3[0]]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i==j and i==k:\n                    count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j] and list2[i]==list3[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input.sort()\n    S=set(Input)\n    return len(S)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = 0\n    for i in Input:\n        if type(i) == list:\n            l += 1\n    return l\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    elif len(Input) == 1:\n        return 1\n    else:\n        return find_lists(Input[0]) + find_lists(Input[1:])\n        \ndef find_lists_v2(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    elif len(Input) == 1:\n        return 1\n    else:\n        return find_lists(Input[0]) + find_lists_v2(Input[1:])\n        \ndef find_recursive_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    elif len(Input) == 1:\n        return 1\n    else:\n        return find_recursive_lists(Input[0]) + find_recursive_lists(Input[1:])\n        \ndef find_recursive_lists_v2(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    elif len(Input) == 1:\n        return 1\n    else:\n        return find_recursive_lists(Input[0]) + find_recursive_lists_v2(Input[1:])\n        \ndef print_lists(Input):\n    '''\n    Write a function that prints all the lists found in the given tuple.\n    '''\n    if len(Input) == 0:\n        return\n    else:\n        print_lists(Input[0])\n        print_lists(Input[1:])\n        \ndef print_recursive_lists(Input):\n    '''\n    Write a function that prints all the lists found in the given tuple.\n    '''\n    if len(Input) == 0:\n        return\n    else:\n        print_recursive_lists(Input[0])\n        print_recursive_lists(Input[1:])\n        \ndef generate_lists(n):\n    '''\n    Write a function that generates a random list of size n.\n    '''\n    if len(n) == 0:\n        return []\n    elif len(n) == 1:\n        return [n[0]]\n    else:\n        return [n[0]] + generate_lists(n[1:])\n    \ndef remove_duplicates(Input):\n    '''\n    Write a function that removes duplicates from a list.\n    '''\n    if len(Input) == 0:\n        return []\n    elif len(Input) == 1:\n        return Input\n    else:\n        return [Input[0]] + remove_duplicates(Input[1:])\n        \ndef generate_list_of_unique_elements(Input):\n    '''\n    Write a function that generates a list of unique elements present in the given list.\n    '''\n    if len(Input) == 0:\n        return []\n    elif len(Input) == 1:\n        return Input\n    else:\n        return [x for x in Input if Input.count(x) == 1]\n    \ndef delete_list_by_index(Input, index):\n    '''\n    Write a function that deletes the element at the given index from the given list.\n    '''\n    if len(Input) == 0:\n        return []\n    elif len(Input) == 1:\n        if Input[0] == index:\n            return []\n        else:\n            return Input\n    else:\n        if Input[0] == index:\n            return [Input[1:]] + delete_list_by_index(Input[1:], index)\n        else:\n            return [Input[0]] + delete_list_by_index(Input[1:], index)\n        \ndef find_index(Input, index):\n    '''\n    Write a function that returns the index of the element in the given list.\n    '''\n    if len(Input) == 0:\n        return -1\n    elif len(Input) == 1:\n        if Input[0] == index:\n            return 0\n        else:\n            return -1\n    else:\n        if Input[0] == index:\n            return 0\n        else:\n            return find_index(Input[1:], index)\n        \ndef read_file(Input):\n    '''\n    Write a function that reads a file from a given path.\n    '''\n    if len(Input) == 0:\n        return []\n    elif len(Input) == 1:\n        return Input\n    else:\n        return [x for x in open(Input).read().splitlines() if x!= \"\"]\n    \ndef read_file_v2(Input):\n    '''\n    Write a function that reads a file from a given path.\n    '''\n    if len(Input) == 0:\n        return []\n    elif len(Input) == 1:\n        return Input\n    else:\n        return [x for x in open(Input).read().splitlines() if x!= \"\"]\n    \ndef append_to_file(Input, Output, size):\n    '''\n    Write a function that appends the given data to the given file.\n    '''\n    if len(Input) == 0:\n        return\n    elif len(Input) == 1:\n        return [Input] + Output + size\n    else:\n        return [Input] + Output + size + [Input]\n    \ndef read_file_v3(Input):\n    '''\n    Write a function that reads a file from a given path.\n    '''\n    if len(Input) == 0:\n        return []\n    elif len(Input) == 1:\n        return [Input]\n    else:\n        return [x for x in open(Input).read().splitlines() if x!= \"\"]\n    \ndef write_file(Input, Output):\n    '''\n    Write a function that writes the given data to the given file.\n    '''\n    if len(Input) == 0:\n        return\n    elif len(Input) == 1:\n        return Output + open(Input).read()\n    else:\n        return Output + open(Input).read().splitlines()\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    from collections import Counter\n    k = Counter(Input)\n    #k = Counter(Counter(Input))\n    return len(k)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    my_list=[]\n    for i in range(len(Input)):\n        my_list.append(Input[i][1])\n    my_list.sort()\n    return len(my_list)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = 0\n    for x in Input:\n        if x == '#':\n            l += 1\n    return l\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == tuple:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n_list = 0\n    for i in Input:\n        for j in i:\n            if j == '[' or j == ']' or j == '{' or j == '}' or j == ',':\n                n_list += 1\n    return n_list\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1=[]\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j]=='[':\n                list1.append(j)\n            if Input[i][j]==']':\n                if len(list1)>0:\n                    list1.pop()\n        if len(list1)>0:\n            list1.pop()\n    return len(list1)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return(len(list(filter(lambda x: x!= 0, Input))))\n    \ndef find_non_empty_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([x for x in Input if x!= 0])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    index=0\n    while index < len(arr)-1:\n        if arr[index] > arr[index+1]:\n            arr[index] = arr[index+1]\n            arr[index+1] = arr[index]\n            index+=2\n        else:\n            arr[index] = arr[index+1]\n            arr[index+1] = arr[index]\n            index+=1\n        if arr[index] > max_diff:\n            max_diff = arr[index]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #if all elements are the same, return 0\n    if len(arr)==1: \n        return arr[0]\n    #if first element has a value greater than second element, return max of all the values\n    elif arr[0] > arr[1]: \n        return arr[1]\n    #if second element has a value greater than first element, return max of all the values\n    else: \n        return arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    if len(arr) <= 2:\n        return max(abs(arr[0] - arr[1]), abs(arr[1] - arr[0]))\n    \n    diffs = []\n    \n    # A diff between the first index and the last index\n    for i in range(len(arr)-1):\n        diffs.append(abs(arr[i+1] - arr[i]))\n    \n    # A diff between the last index and the first index\n    diffs.append(abs(arr[0] - arr[-1]))\n    \n    # For the second index we need to calculate the dif between the previous two indices\n    for i in range(1, len(arr)):\n        diffs.append(abs(arr[i] - arr[i-1]))\n    \n    # Return the max of all the differences\n    return max(diffs)"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > max_diff:\n            max_diff = arr[i + 1] - arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if abs(arr[i] - arr[j]) > abs(arr[i] - arr[j + 1]):\n            return abs(arr[i] - arr[j + 1])\n        elif abs(arr[i] - arr[j]) < abs(arr[i] - arr[j + 1]):\n            i = i + 1\n        else:\n            j = j - 1\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_diff = max(max_diff,abs(arr[i] - arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            max_abs_diff = max(abs_diff,max_abs_diff)\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)): \n        max_diff = max(max_diff, arr[i] - arr[i - 1])\n    return max_diff\n    \n    \ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    min_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)): \n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff\n    \n    \ndef average_Abs_Diff(arr): \n    '''\n    Write a python function to find the average difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    avg_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)): \n        avg_diff = avg_diff + arr[i] - arr[i - 1]\n    avg_diff = avg_diff / len(arr)\n    return avg_diff\n    \n    \ndef median_Abs_Diff(arr): \n    '''\n    Write a python function to find the median difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    med_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)): \n        med_diff = med_diff + arr[i] - arr[i - 1]\n    med_diff = med_diff // 2\n    return med_diff\n    \n    \ndef mode_Abs_Diff(arr): \n    '''\n    Write a python function to find the mode difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    mode = arr[0] - arr[1]\n    for i in range(2, len(arr)): \n        if arr[i] == mode:\n            mode += 1\n        else:\n            mode = arr[i] - mode\n    return mode\n    \n    \ndef count_Abs_Diff(arr): \n    '''\n    Write a python function to find the number of elements in a given array which are bigger than or equal to a given value.\n    '''\n    if arr is None or len(arr) == 0: \n        return 0\n    count = 0\n    for i in range(2, len(arr)): \n        if arr[i] >= arr[i - 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef find_Relative_Difference(arr, min, max): \n    '''\n    Write a python function to find the difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)): \n        diff = diff + (abs(arr[i] - arr[i - 1]))\n    diff = max(diff, min)\n    diff = min(diff, max)\n    return diff\n    \n    \ndef count_Relative_Diff(arr): \n    '''\n    Write a python function to find the difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return 0\n    count = 0\n    for i in range(2, len(arr)): \n        if arr[i] >= arr[i - 1]:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef find_Absolute_Diff(arr): \n    '''\n    Write a python function to find the difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)): \n        diff = diff + abs(arr[i] - arr[i - 1])\n    diff = min(diff, max(arr))\n    return diff\n    \n    \ndef find_Absolute_Diff_Median(arr): \n    '''\n    Write a python function to find the difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)): \n        if arr[i] >= arr[i - 1]:\n            diff += abs(arr[i] - arr[i - 1])\n        else:\n            break\n    diff = max(diff, min(arr))\n    if len(arr) % 2 == 1: \n        med = (diff + arr[len(arr) - 1]) // 2\n    else: \n        med = (diff + arr[len(arr) // 2]) // 2\n    return med\n    \n    \ndef median_Abs_Diff_Median(arr): \n    '''\n    Write a python function to find the median difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    med = arr[len(arr) // 2] - arr[len(arr) // 2 - 1]\n    for i in range(2, len(arr)): \n        if arr[i] >= med:\n            med = arr[i] - med\n        else:\n            break\n    return med\n    \n    \ndef mode_Abs_Diff_Median(arr): \n    '''\n    Write a python function to find the mode difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    mode = arr[0] - arr[1]\n    for i in range(2, len(arr)): \n        if arr[i] >= mode:\n            mode += 1\n        else:\n            break\n    return mode\n    \n    \ndef find_Absolute_Diff_Mode(arr): \n    '''\n    Write a python function to find the difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)): \n        if arr[i] >= arr[i - 1]:\n            diff += abs(arr[i] - arr[i - 1])\n        else:\n            break\n    return diff\n    \n    \ndef mode_Abs_Diff_Mode(arr): \n    '''\n    Write a python function to find the mode difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    mode = arr[0] - arr[1]\n    for i in range(2, len(arr)): \n        if arr[i] >= mode:\n            mode += 1\n        else:\n            break\n    return mode\n    \n    \ndef find_Absolute_Diff_Mode_Median(arr): \n    '''\n    Write a python function to find the difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return -1\n    diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)): \n        if arr[i] >= diff:\n            diff += 1\n        else:\n            break\n    return diff\n    \n    \ndef count_Abs_Diff_Mode_Median(arr): \n    '''\n    Write a python function to find the difference between any two elements in a given array.\n    '''\n    if arr is None or len(arr) == 0: \n        return 0\n    count = 0\n    fo"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[0]-arr[1]),abs(arr[1]-arr[0]))\n    \ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    return min(abs(arr[0]-arr[1]),abs(arr[1]-arr[0]))\n    \ndef equal(num1,num2): \n    '''\n    Write a python function to check whether a given list of numbers is equal to the given list of numbers.\n    '''\n    return num1 == num2\n    \ndef equal_string(num1,num2): \n    '''\n    Write a python function to check whether a given list of strings is equal to the given list of strings.\n    '''\n    return num1 == num2\n    \ndef middle_number(num1,num2): \n    '''\n    Write a python function to calculate the middle element of two numbers.\n    '''\n    return num1 + num2\n    \ndef reverse(arr): \n    '''\n    Write a python function to reverse a given list of elements.\n    '''\n    arr.reverse()\n    return arr\n    \ndef get_powers(num,base): \n    '''\n    Write a python function to calculate a given number in a given base of base.\n    '''\n    if num < 0: \n        return -get_powers(-num,base)\n    elif num == 0: \n        return 0\n    elif num == 1: \n        return base\n    else: \n        return base*get_powers(num-1,base)\n    \ndef last_digits(num): \n    '''\n    Write a python function to calculate the last two digits of a given number.\n    '''\n    return int(str(num)[-2:])\n    \ndef last_digits_2(num): \n    '''\n    Write a python function to calculate the last two digits of a given number.\n    '''\n    return int(str(num)[-2:])*2\n    \ndef add_two_digits(num): \n    '''\n    Write a python function to calculate the sum of two digits in a given number.\n    '''\n    return get_powers(num,10)\n    \ndef add_two_digits_2(num): \n    '''\n    Write a python function to calculate the sum of two digits in a given number.\n    '''\n    return get_powers(num,100)\n    \ndef add_two_digits_3(num): \n    '''\n    Write a python function to calculate the sum of two digits in a given number.\n    '''\n    return get_powers(num,1000)\n    \ndef convert(num,first_digit,second_digit): \n    '''\n    Write a python function to convert a given number in a given first_digit to the given second_digit.\n    '''\n    return num*(first_digit + second_digit)\n    \ndef sign(num): \n    '''\n    Write a python function to determine the sign of a given number.\n    '''\n    if num < 0: \n        return -1\n    elif num == 0: \n        return 0\n    elif num == 1: \n        return 1\n    else: \n        return -1\n    \ndef log(num,base): \n    '''\n    Write a python function to calculate the logarithm of a given number.\n    '''\n    return math.log(num,base)\n    \ndef log10(num): \n    '''\n    Write a python function to calculate the logarithm of a given number.\n    '''\n    return math.log(num,10)\n    \ndef base10(num): \n    '''\n    Write a python function to calculate the base 10 of a given number.\n    '''\n    return num/10\n    \ndef to_radians(num): \n    '''\n    Write a python function to calculate the angle in radians of a given number.\n    '''\n    return num*(math.pi/180)\n    \ndef to_degrees(num): \n    '''\n    Write a python function to calculate the angle in degrees of a given number.\n    '''\n    return num*(180/math.pi)\n    \ndef to_radians_2(num): \n    '''\n    Write a python function to calculate the angle in radians of a given number.\n    '''\n    return num*(180/math.pi)\n    \ndef to_degrees_2(num): \n    '''\n    Write a python function to calculate the angle in degrees of a given number.\n    '''\n    return num*(180/math.pi)\n    \ndef to_radians_3(num): \n    '''\n    Write a python function to calculate the angle in radians of a given number.\n    '''\n    return num*(180/math.pi)\n    \ndef to_degrees_3(num): \n    '''\n    Write a python function to calculate the angle in degrees of a given number.\n    '''\n    return num*(180/math.pi)\n    \ndef round(num): \n    '''\n    Write a python function to round a given number to the nearest integer.\n    '''\n    return int(round(num))\n    \ndef square_root(num): \n    '''\n    Write a python function to calculate the square root of a given number.\n    '''\n    return math.sqrt(num)\n    \ndef round_up(num,base): \n    '''\n    Write a python function to round a given number to the nearest integer.\n    '''\n    return round(num*base,base)\n    \ndef square_root_2(num): \n    '''\n    Write a python function to calculate the square root of a given number.\n    '''\n    return math.sqrt(num)\n    \ndef round_up_2(num,base): \n    '''\n    Write a python function to round a given number to the nearest integer.\n    '''\n    return round(num*base,base)\n    \ndef square_root_3(num): \n    '''\n    Write a python function to calculate the square root of a given number.\n    '''\n    return math.sqrt(num)\n    \ndef round_up_3(num,base): \n    '''\n    Write a python function to round a given number to the nearest integer.\n    '''\n    return round(num*base,base)\n    \ndef round_up_4(num,base): \n    '''\n    Write a python function to round a given number to the nearest integer.\n    '''\n    return round(num*base,base)\n    \ndef get_int(num): \n    '''\n    Write a python function to calculate the integer part of a given number.\n    '''\n    return num/10\n    \ndef get_dec(num): \n    '''\n    Write a python function to calculate the decimal part of a given number.\n    '''\n    return num%10\n    \ndef get_int_2(num): \n    '''\n    Write a python function to calculate the integer part of a given number.\n    '''\n    return num/100\n    \ndef get_dec_2(num): \n    '''\n    Write a python function to calculate the decimal part of a given number.\n    '''\n    return num%100\n    \ndef get_int_3(num): \n    '''\n    Write a python function to calculate the integer part of a given number.\n    '''\n    return num/1000\n    \ndef get_dec_3(num): \n    '''\n    Write a python function to calculate the decimal part of a given number.\n    '''\n    return num%1000\n    \ndef get_int_4(num): \n    '''\n    Write a python function to calculate the integer part of a given number.\n    '''\n    return num/10000\n    \ndef get_dec_4(num): \n    '''\n    Write a python function to calculate the decimal part of a given number.\n    '''\n    return num%10000\n    \ndef get_int_5(num): \n    '''\n    Write a python function to calculate the integer part of a given number.\n    '''\n    return num/100000\n    \ndef get_dec_5(nu"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # max_Abs = max_Abs = arr[0] - arr[1]\n    max_Abs = arr[0] - arr[1]\n    for i in range(1,len(arr)-1):\n        max_Abs = max(max_Abs,arr[i] - arr[i+1])\n    return max_Abs\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = -1\n    y = -1\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    print(a, b, n)\n    if n == 0:\n        return (x, y)\n    \n    if a*b == n:\n        return a*b\n    \n    if a*b > n:\n        return None\n    \n    if (n % 2 == 0):\n        return find_solution(a/2, b/2, n//2)\n    \n    else:\n        return find_solution(a, b*2, n//2)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n < 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n < 10:\n        return None\n    if n % 10 == 0:\n        if (a[0] + b[0]) % 10 == 0:\n            return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10\n        if (a[0] + b[1]) % 10 == 0:\n            return (a[0] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10\n        if (a[0] + b[2]) % 10 == 0:\n            return (a[0] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10\n        if (a[0] + b[3]) % 10 == 0:\n            return (a[0] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10\n        if (a[0] + b[4]) % 10 == 0:\n            return (a[0] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10\n        if (a[0] + b[5]) % 10 == 0:\n            return (a[0] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10\n        if (a[0] + b[6]) % 10 == 0:\n            return (a[0] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10, (a[9] + b[9]) // 10\n        if (a[0] + b[7]) % 10 == 0:\n            return (a[0] + b[7]) // 10, (a[8] + b[8]) // 10, (a[9] + b[9]) // 10, (a[10] + b[10]) // 10\n    if n % 10 == 0:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10\n    if n % 10 == 1:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10\n    if n % 10 == 2:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10\n    if n % 10 == 3:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10, (a[9] + b[9]) // 10, (a[10] + b[10]) // 10\n    if n % 10 == 4:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10, (a[9] + b[9]) // 10, (a[10] + b[10]) // 10, (a[11] + b[11]) // 10, (a[12] + b[12]) // 10\n    if n % 10 == 5:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10, (a[9] + b[9]) // 10, (a[10] + b[10]) // 10, (a[11] + b[11]) // 10, (a[12] + b[12]) // 10, (a[13] + b[13]) // 10\n    if n % 10 == 6:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10, (a[9] + b[9]) // 10, (a[10] + b[10]) // 10, (a[11] + b[11]) // 10, (a[12] + b[12]) // 10, (a[13] + b[13]) // 10, (a[14] + b[14]) // 10, (a[15] + b[15]) // 10, (a[16] + b[16]) // 10\n    if n % 10 == 7:\n        return (a[0] + b[0]) // 10, (a[1] + b[1]) // 10, (a[2] + b[2]) // 10, (a[3] + b[3]) // 10, (a[4] + b[4]) // 10, (a[5] + b[5]) // 10, (a[6] + b[6]) // 10, (a[7] + b[7]) // 10, (a[8] + b[8]) // 10, (a[9] + b[9]) // 10, (a[10] + b[10]) // 10, (a[11] + b[11]) // 10, (a[12] + b[12]) // 10, (a[13] + b[13]) // 10, (a[14] + b[14]) // 10, (a[15] + b[15]) // 10, (a[16] + b[16]) // 10, (a[17] + b[17]) // 10, (a[18] + b[18]) // 10, (a[19] + b[19]) // 10, (a[20] + b[20]) // 10, (a[21] + b[21]) // 10"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == n:\n        return a, n\n    elif a == 0:\n        return None\n    else:\n        return find_solution(a, b-a, n)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x,y=None,None\n    if len(a)!= len(b) or len(b)==0:\n        return None\n    if n==0:\n        return (x,y)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if n == 0:\n        return x, y\n    if a > b:\n        x, y = b, a\n    else:\n        x, y = a, b\n    \n    for i in range(2, x+1):\n        if a%i == 0 and b%i == 0:\n            x_ = i\n            y_ = n//i\n            if y_ == 0 and x_ == y:\n                return (x,y)\n            elif y_!= 0:\n                return (x,y)\n        if y%i == 0 and a%i == 0:\n            x_ = i\n            y_ = n//i\n            if x_ == 0 and y_ == 0:\n                return (x,y)\n            elif x_!= 0:\n                return (x,y)\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(0, len(list1)):\n        list1.remove(list1[i])\n    for i in range(0, len(list2)):\n        list2.remove(list2[i])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if (list1 == None or list2 == None):\n        raise TypeError(\"You must pass a list to remove elements\")\n    if (type(list1)!= list or type(list2)!= list):\n        raise TypeError(\"You must pass a list to remove elements\")\n    if (len(list1) == 0 or len(list2) == 0):\n        raise ValueError(\"You must pass a list to remove elements\")\n    result = []\n    for elem in list1:\n        if (list2.count(elem)!= 1):\n            result.append(elem)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.remove(list2)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Code here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        for j in range(len(list1)):\n            if i == list1[j]:\n                del list1[j]\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n    \nprint(remove_elements(['a', 'b', 'c', 'd', 'e', 'f'], ['d', 'e', 'f']))\nprint(remove_elements([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]))"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print(list1)\n    print(list2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    i = 1\n    while i <= n // 2:\n        s += i * (n - i)\n        i += 1\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-1)\n    \n    \n    \ndef test_sum_series():\n    assert sum_series(4) == 13\n    assert sum_series(8) == 21\n    assert sum_series(16) == 36\n    assert sum_series(24) == 72\n    assert sum_series(24) == 72\n    assert sum_series(26) == 216\n    assert sum_series(24) == 216\n    assert sum_series(25) == 75\n    assert sum_series(25) == 75\n    assert sum_series(26) == 216\n    assert sum_series(26) == 216\n    assert sum_series(27) == 72\n    assert sum_series(27) == 72\n    assert sum_series(28) == 216\n    assert sum_series(28) == 216\n    assert sum_series(29) == 75\n    assert sum_series(29) == 75\n    assert sum_series(30) == 216\n    assert sum_series(30) == 216\n    assert sum_series(31) == 72\n    assert sum_series(31) == 72\n    assert sum_series(32) == 216\n    assert sum_series(32) == 216\n    assert sum_series(33) == 72\n    assert sum_series(33) == 72\n    assert sum_series(34) == 216\n    assert sum_series(34) == 216\n    assert sum_series(35) == 75\n    assert sum_series(35) == 75\n    assert sum_series(36) == 216\n    assert sum_series(36) == 216\n    assert sum_series(37) == 72\n    assert sum_series(37) == 72\n    assert sum_series(38) == 216\n    assert sum_series(38) == 216\n    assert sum_series(39) == 75\n    assert sum_series(39) == 75\n    assert sum_series(40) == 216\n    assert sum_series(40) == 216\n    assert sum_series(41) == 72\n    assert sum_series(41) == 72\n    assert sum_series(42) == 216\n    assert sum_series(42) == 216\n    assert sum_series(43) == 75\n    assert sum_series(43) == 75\n    assert sum_series(44) == 216\n    assert sum_series(44) == 216\n    assert sum_series(45) == 72\n    assert sum_series(45) == 72\n    assert sum_series(46) == 216\n    assert sum_series(46) == 216\n    assert sum_series(47) == 75\n    assert sum_series(47) == 75\n    assert sum_series(48) == 216\n    assert sum_series(48) == 216\n    assert sum_series(49) == 72\n    assert sum_series(49) == 72\n    assert sum_series(50) == 216\n    assert sum_series(50) == 216\n    assert sum_series(51) == 75\n    assert sum_series(51) == 75\n    assert sum_series(52) == 216\n    assert sum_series(52) == 216\n    assert sum_series(53) == 72\n    assert sum_series(53) == 72\n    assert sum_series(54) == 216\n    assert sum_series(54) == 216\n    assert sum_series(55) == 75\n    assert sum_series(55) == 75\n    assert sum_series(56) == 216\n    assert sum_series(56) == 216\n    assert sum_series(57) == 72\n    assert sum_series(57) == 72\n    assert sum_series(58) == 216\n    assert sum_series(58) == 216\n    assert sum_series(59) == 75\n    assert sum_series(59) == 75\n    assert sum_series(60) == 216\n    assert sum_series(60) == 216\n    assert sum_series(61) == 72\n    assert sum_series(61) == 72\n    assert sum_series(62) == 216\n    assert sum_series(62) == 216\n    assert sum_series(63) == 75\n    assert sum_series(63) == 75\n    assert sum_series(64) == 216\n    assert sum_series(64) == 216\n    assert sum_series(65) == 72\n    assert sum_series(65) == 72\n    assert sum_series(66) == 216\n    assert sum_series(66) == 216\n    assert sum_series(67) == 75\n    assert sum_series(67) == 75\n    assert sum_series(68) == 216\n    assert sum_series(68) == 216\n    assert sum_series(69) == 75\n    assert sum_series(69) == 75\n    assert sum_series(70) == 216\n    assert sum_series(70) == 216\n    assert sum_series(71) == 72\n    assert sum_series(71) == 72\n    assert sum_series(72) == 216\n    assert sum_series(73) == 72\n    assert sum_series(73) == 72\n    assert sum_series(74) == 216\n    assert sum_series(74) == 216\n    assert sum_series(75) == 72\n    assert sum_series(75) == 72\n    assert sum_series(76) == 216\n    assert sum_series(76) == 216\n    assert sum_series(77) == 75\n    assert sum_series(77) == 75\n    assert sum_series(78) == 216\n    assert sum_series(78) == 216\n    assert sum_series(79) == 75\n    assert sum_series(79) == 75\n    assert sum_series(80) == 216\n    assert sum_series(80) == 216\n    assert sum_series(81) == 73\n    assert sum_series(81) == 73\n    assert sum_series(82) == 216\n    assert sum_series(82) == 216\n    assert sum_series(83) == 73\n    assert sum_series(83) == 73\n    assert sum_series(84) == 216\n    assert sum_series(84) == 216\n    assert sum_series(85) == 73\n    assert sum_series(85) == 73\n    assert sum_series(86) == 216\n    assert sum_series(86) == 216\n    assert sum_series(87) == 73\n    assert sum_series(87) == 73\n    assert sum_series(88) == 216\n    assert sum_series(88) == 216\n    assert sum_series(89) == 73\n    assert sum_series(89) == 73\n    assert sum_series(90) == 216\n    assert sum_series(90) == 216\n    assert sum_series(91) == 73\n    assert sum_series(91) == 73\n    assert sum_series(92) == 216\n    assert sum_series(92) == 216\n    assert sum_series(93) == 73\n    assert sum_series(93) == 73\n    assert sum_series(94) == 216\n    assert sum_series(94) == 216\n    assert sum_series(95) == 73\n    assert sum_series(95) == 73\n    assert sum_series(96) == 216\n    assert sum_series(96) == 216\n    assert sum_series(97) == 73\n    assert sum_series(97) == 73\n    assert sum_series(98) == 216\n    assert sum_series(98) == 216\n    assert sum_series(99) == 73\n    assert sum_series(99) == 73\n    assert sum_series(100) == 216\n    assert sum_series(100) == 216\n    assert sum_series(101) == 73\n    assert sum_series(101) == 73\n    assert sum_series(102) == 216\n    assert sum_series(102) == 216\n    assert sum_series(103) == 73\n    assert sum_series(103) == 73\n    assert sum_series(104) == 216\n    assert sum_series(104) == 216\n    assert sum_series(105) == 73\n    assert sum_series(105) == 73\n    assert sum_series(106) == 216\n    assert sum_series(106) == 216\n    assert sum_series(107) == 73\n    assert sum_series(107) == 73\n    assert sum_series(108) == 216\n    assert sum_series(108) == 216\n    assert sum_series(109) == 73\n    assert sum_series(109) == 73\n    assert sum_series(110) ="
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n):\n        s += i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    if n == 0:\n        return s\n    else:\n        for i in range(0, n, 2):\n            s = s + (i+1) * sum_series(i+1)\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n\n    elif n == 2:\n        return n - 2\n    elif n % 2 == 0:\n        return n + (n - 2) + (n - 4)\n    else:\n        return (n - 2) + (n - 4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return (n+2*sum_series(n-2)) + (n+sum_series(n-4))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n+sum_series(n-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n,0,-1):\n        s += i\n    return s\nprint(sum_series(25)"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    if n <= 1:\n        return n\n    \n    return n - 2*sum_series(n-2) + sum_series(n-4)\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return (n-2) + sum_series(n-2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += 2 * tan(i * pi / s) * l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 4 * pi * l**2\ndef area_rectangle(s, l):\n    '''\n    Write a function to calculate the area of a rectangular polygon given the length and width of its sides.\n    '''\n    return (2 * pi * l) * s\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    return (2 * pi * l) + 4 * s\ndef perimeter_rectangle(s, l):\n    '''\n    Write a function to calculate the perimeter of a rectangular polygon given the length and width of its sides.\n    '''\n    return (2 * pi * l) + 4 * s\ndef area_triangle(s, l):\n    '''\n    Write a function to calculate the area of a triangle given the length and width of its sides.\n    '''\n    return (s * (l ** 2)) / 2\ndef perimeter_triangle(s, l):\n    '''\n    Write a function to calculate the perimeter of a triangle given the length and width of its sides.\n    '''\n    return (2 * pi * l) + 4 * s\ndef area_quad_rectangle(s, l):\n    '''\n    Write a function to calculate the area of a quadrilateral rectangle given the length and width of its sides.\n    '''\n    return (s * (l ** 2)) / 2\ndef perimeter_quad_rectangle(s, l):\n    '''\n    Write a function to calculate the perimeter of a quadrilateral rectangle given the length and width of its sides.\n    '''\n    return (2 * pi * l) + 4 * s\ndef perimeter_circle(c, l):\n    '''\n    Write a function to calculate the perimeter of a circle given its radius and its diameter.\n    '''\n    return (2 * pi * l) + 4 * c\ndef volume_polygon(s, l):\n    '''\n    Write a function to calculate the volume of a polygon given the length and width of its sides.\n    '''\n    return (4 * pi * l**2) * s\ndef volume_rectangle(s, l):\n    '''\n    Write a function to calculate the volume of a rectangular polygon given the length and width of its sides.\n    '''\n    return (2 * pi * l) * s\ndef volume_triangle(s, l):\n    '''\n    Write a function to calculate the volume of a triangle given the length and width of its sides.\n    '''\n    return (2 * pi * l) * s\ndef volume_quad_rectangle(s, l):\n    '''\n    Write a function to calculate the volume of a quadrilateral rectangle given the length and width of its sides.\n    '''\n    return (2 * pi * l) * s\ndef volume_circle(c, l):\n    '''\n    Write a function to calculate the volume of a circle given its radius and its diameter.\n    '''\n    return (2 * pi * l) * c\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l * (s ** 2)\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s>l:\n        return 0\n    return (l*tan(pi/l) * s)/2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s) < 2:\n        return 0\n    elif len(s) > 3:\n        return -1\n    elif len(s) == 3:\n        a = s[0] * s[1] * s[2]\n        b = s[1] * s[2] * s[0]\n        c = s[0] * s[0]\n        return b * c\n    else:\n        a = s[0] * s[1] * s[2]\n        b = s[2] * s[1] * s[0]\n        c = s[0] * s[2]\n        d = s[2] * s[1]\n        return b * c - d * a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return sum([pow(s,2) for s in l])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s==l:\n        return s\n    return (s*(s-l)*(s-l))/(2*l*l-l*l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0.0\n    for i in range(0,len(s),2):\n        a += s[i]*s[i+1]\n    return (l*a)/2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    total = 0\n    for i in range(0, l):\n        total = total + s\n    return total/l\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = int(n / 2)\n    return div * div\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def check(n):\n        '''\n        Write your function here\n        '''\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    if check(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0:\n            return False\n    return True \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1 \n    summ = 0 \n    while (i <= n):\n        if (n % i == 0):\n            summ = summ + i\n            n = n//i\n            i = 1\n        else:\n            i = i + 1\n    if summ == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # start with the sum of the divisors\n    sum1 = 0\n    # for each value in the divisors list\n    for i in range(1,n+1):\n        # add the values of the two numbers\n        sum1 += i\n    # if the sum equals the sum of the two values\n    if sum1 == n:\n        # if the sum equals the sum of the two values\n        # then return true\n        return True\n    # if the sum does not equal the sum of the two values\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i == i:\n                count += 1\n    if count == 2:\n        return True\n    return False\ndef int_sum(n):\n    '''\n    Write a function to calculate the sum of the digits of an integer.\n    '''\n    sum = 0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    if n==0:\n        return False\n    elif n<0:\n        return False\n    else:\n        divs=[]\n        for i in range(1, n+1):\n            if n%i==0:\n                divs.append(i)\n                divs.append(n//i)\n        return True \n    \ndef is_prime(n): \n    '''\n    n must be a positive integer.\n    \n    Returns True if n is a prime number, \n    False otherwise.\n    '''\n    if n<2:\n        return False\n    elif n==2 or n==3:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    m=1\n    while m<=n:\n        m=m+m\n        if n%m==0:\n            return True\n        elif n%m==1:\n            return False\n    return False\ndef is_perfect(n):\n    '''\n    Write a function to check if a number is perfect or not.\n    '''\n    if n==1:\n        return True\n    elif n==2 or n==3 or n==5 or n==7:\n        return True\n    elif n==0:\n        return False\n    elif n==4:\n        return False\n    elif n==6:\n        return True\n    else:\n        return False\ndef is_perfect_divisors(n):\n    '''\n    Write a function to calculate all possible perfect divisors of a given number.\n    '''\n    if n==0:\n        return [[]]\n    elif n==1:\n        return [[1]]\n    else:\n        l=[]\n        for i in range(1,n):\n            if n%i==0:\n                l.append([i,n//i])\n        return l\ndef is_prime(n):\n    '''\n    Write a function to check if the number is prime or not.\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return False\n    elif n%2==0:\n        return False\n    elif n==3:\n        return True\n    else:\n        d=3\n        while d*d<=n:\n            if n%d==0:\n                return False\n            d+=2\n        return True\ndef is_perfect_number(n):\n    '''\n    Write a function to check if a number is a perfect number or not.\n    '''\n    if n==1:\n        return True\n    elif n==2 or n==3 or n==5 or n==7:\n        return False\n    elif n==0:\n        return False\n    elif n==4:\n        return True\n    elif n==6:\n        return False\n    else:\n        m=1\n        while m<=math.sqrt(n):\n            if n%m==0:\n                return False\n            m+=1\n        return True\ndef list_prod(a,b):\n    '''\n    Write a function to calculate the product of two lists.\n    '''\n    if len(a)==1 and len(b)==1:\n        return a[0]*b[0]\n    elif len(a)==1:\n        return a[0]*b[0]\n    elif len(b)==1:\n        return a[0]*b[0]\n    elif len(a)==1 and len(b)==2:\n        return a[0]*b[1]\n    elif len(a)==2 and len(b)==1:\n        return a[1]*b[0]\n    elif len(a)==2 and len(b)==2:\n        return a[1]*b[1]\n    else:\n        for i in range(2,len(a)+1):\n            m=1\n            while m<=math.sqrt(i):\n                if i%m==0:\n                    return 0\n                m+=1\n        return a[0]*b[0]\ndef list_mul(a,b):\n    '''\n    Write a function to calculate the product of two lists.\n    '''\n    if len(a)==1 and len(b)==1:\n        return a[0]*b[0]\n    elif len(a)==1:\n        return a[0]*b[0]\n    elif len(b)==1:\n        return a[0]*b[0]\n    elif len(a)==2 and len(b)==2:\n        return a[0]*b[1]\n    elif len(a)==2 and len(b)==3:\n        return a[0]*b[1]*b[2]\n    elif len(a)==3 and len(b)==2:\n        return a[1]*b[0]\n    elif len(a)==3 and len(b)==3:\n        return a[1]*b[0]*b[1]\n    elif len(a)==3 and len(b)==4:\n        return a[1]*b[0]*b[1]*b[2]\n    elif len(a)==4 and len(b)==3:\n        return a[1]*b[0]*b[1]*b[2]*b[3]\n    elif len(a)==4 and len(b)==4:\n        return a[1]*b[0]*b[1]*b[2]*b[3]*b[4]\n    elif len(a)==5 and len(b)==4:\n        return a[1]*b[0]*b[1]*b[2]*b[3]*b[4]*b[5]\n    elif len(a)==5 and len(b)==5:\n        return a[1]*b[0]*b[1]*b[2]*b[3]*b[4]*b[5]*b[6]\n    else:\n        for i in range(2,len(a)+1):\n            m=1\n            while m<=math.sqrt(i):\n                if i%m==0:\n                    return 0\n                m+=1\n        return a[0]*b[0]\ndef list_div(a,b):\n    '''\n    Write a function to calculate the product of two lists.\n    '''\n    if len(a)==1 and len(b)==1:\n        return a[0]/b[0]\n    elif len(a)==1:\n        return a[0]/b[0]\n    elif len(b)==1:\n        return a[0]/b[0]\n    elif len(a)==2 and len(b)==2:\n        return a[0]/b[1]\n    elif len(a)==2 and len(b)==3:\n        return a[0]/b[1]*b[2]\n    elif len(a)==3 and len(b)==2:\n        return a[0]/b[1]*b[2]*b[3]\n    elif len(a)==3 and len(b)==3:\n        return a[0]/b[1]*b[2]*b[3]*b[4]\n    elif len(a)==4 and len(b)==2:\n        return a[0]/b[1]*b[2]*b[3]*b[4]\n    elif len(a)==4 and len(b)==3:\n        return a[0]/b[1]*b[2]*b[3]*b[4]*b[5]\n    elif len(a)==5 and len(b)==2:\n        return a[0]/b[1]*b[2]*b[3]*b[4]*b[5]*b[6]\n    elif len(a)==5 and len(b)==3:\n        return a[0]/b[1]*b[2]*b[3]*b[4]*b[5]*b[6]*b[7]\n    elif len(a)==5 and len(b)==4:\n        return a[0]/b[1]*b[2]*b[3]*b[4]*b[5]*b[6]*b[7]*b[8]\n    elif len(a)==6 and len(b)==4:\n        return a[0]/b[1]*b[2]*b[3]*b[4]*b[5]*b[6]*b[7]*b[8]*b[9]\n    else:\n        for i in range(2,len(a)+1):\n            m=1\n            while m<=math.sqrt(i):\n                if i%m==0"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = n%10\n    s = n//10\n    while s > 1:\n        if s % 10 == div:\n            return False\n        s = s // 10\n    return True\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            continue\n        else:\n            for j in range(i,len(str1)):\n                if str1[j] == str1[0] and str1[i]!= str1[j]:\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict_count={}\n    for char in str1:\n        if char in dict_count:\n            dict_count[char]+=1\n        else:\n            dict_count[char]=1\n    return dict_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(0,len(str1)):\n        if str1[i] in English_alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Solution 1 - Brute force \n    # check_str = []\n    # for i in range(len(str1)):\n    #     check_str.append(str1[i].lower())\n    #     if str1[i].lower() in check_str:\n    #         check_str.remove(str1[i].lower())\n    # return len(check_str)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for i in str1:\n        count += str1.count(i)\n    return count\n    \ndef count_string_length(str1): \n    '''\n    Write a function to count the number of characters in a string that occur in the same place as in the English alphabet.\n    '''\n    count = 0\n    for i in str1:\n        count += str1.count(i)\n    return count\n    \n    \ndef count_unique_char(str1): \n    '''\n    Write a function to count the number of unique characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i not in str1:\n            count += 1\n    return count\n    \n    \n    \ndef count_max_string_length(str1): \n    '''\n    Write a function that returns the maximum number of characters in a string that occur in the same place as in the English alphabet.\n    '''\n    count = 0\n    for i in str1:\n        count += max(str1.count(i), str1.count(i))\n    return count\n    \n    \ndef test_function(test_case):\n    output = find_missing_char('BATTKAGGCDMST', test_case)\n    if output == test_case:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    ans = 0\n    for char in str1:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            ans += 1\n    return ans\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if(str1[i] == str1[0]):\n            c += 1\n    return c\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return str1.count('a')+str1.count('e')+str1.count('i')+str1.count('o')+str1.count('u')+str1.count('A')+str1.count('E')+str1.count('I')+str1.count('O')+str1.count('U')\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_frequency = {}\n    for char in str1:\n        letter_frequency[char] = letter_frequency.get(char,0) + 1\n    return letter_frequency\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    sum = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]&A[j]==0:\n                sum+=1\n    return su"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    i = 0\n    j = len(A) - 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # make a dictionary to keep track of which pair is odd\n    d = {} \n    odd_even = 0 \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] & A[j] == 0) and (A[i] in d):\n                d[A[i]] += 1\n            if (A[j] & A[i] == 0) and (A[j] in d):\n                d[A[j]] += 1\n            if (A[i] & A[j] == 0) and (A[j] not in d):\n                d[A[j]] = 1\n            if (A[i] & A[j] == 0) and (A[i] not in d):\n                d[A[i]] = 1\n    \n    # iterate over the dictionary and find the pairs of even numbers, unless there's only one pair\n    for key in d:\n        if d[key]!= 1:\n            odd_even += 1\n    return odd_even\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    dic = {}\n    for i in range(0, n):\n        if (i + 1) % 2 == 0:\n            dic[A[i]] = dic.get(A[i], 0) + 1\n    odd_list = []\n    for i in range(0, n):\n        if (i + 1) % 2!= 0:\n            odd_list.append(A[i])\n    return odd_list\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    \n    for x in A:\n        if x % 2 == 0:\n            even += 1\n    return even\n    \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(len(A)): \n            if(A[i] & A[j] == 0): \n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in A:\n        if i%2==0:\n            even_count+=1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    even_index = []\n    for x in range(len(A)):\n        for y in range(x, len(A)):\n            if A[x] & A[y] == 0:\n                pairs += 1\n                even_index.append(x)\n                even_index.append(y)\n    return pairs, even_index\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    i = 0\n    n = len(A)\n    # Initialize the count variable\n    count = 0\n    # For the range of 0 and n\n    while (i < n): \n        # If the current element in A is an odd element\n        if (A[i] & 1): \n            # Increase the count by 1\n            count += 1\n        # If the current element in A is an even element\n        else: \n            # Decrease the count by 1\n            count -= 1\n        # Increment the i variable\n        i += 1\n    # Return the count\n    return count "
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i]!= A[j] and A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 2\n    while 2**p <= n:\n        p += 1\n    return 2**(p-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= i:\n            if j == i:\n                return j\n            j = j * 2\n        i = i + 1\n    return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return n // i\n        i = i + 2\n    return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while i <= n:\n        if (n % i) == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return 3\n    return n*next_power_of_2(n//2)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    power_of_2 = 0\n    while n % 2 == 0:\n        n = n / 2\n        power_of_2 = 2\n    while n > 1:\n        if n % 2 == 1:\n            n = n / 2\n        else:\n            n = 3*n + 1\n        power_of_2 += 1\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 2\n    while p < n:\n        p = p << 1\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Let's try to define a function that we can use to compute the next power of 2 of an integer\n    def next_power_of_2(n):\n        if n <= 1:\n            return n\n        else:\n            return next_power_of_2(n-1)**2\n    \n    # We need to keep looping until there are no more numbers greater than or equal to n.\n    # We'll try to do this for all the values below n that are divisible by 2.\n    # If we go back to the original n, we'll get a number greater than or equal to n.\n    # If we get a number divisible by two, we'll go back to the original n.\n    # So, if n is even, we'll go back to n/2.\n    # If n is odd, we'll go back to n//2.\n    # If n is equal to the original value, we'll go back to the original value.\n    while n < 2 ** 31:\n        if n % 2 == 0:\n            return n\n        else:\n            return next_power_of_2(n)\n    \n    # We were not able to get any answers so we'll get here\n    return 'Impossible'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    l = 0\n    r = n - 1\n    while (r - l > 1):\n        m = l + r\n        if m > n:\n            r -= 1\n            m -= 1\n        else:\n            l += 1\n            m -= 1\n    return m\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return n + next_power_of_2(n-1)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            c += 1\n    return c\n    \ndef solution(participant, completion):\n    '''\n    Write a function that returns the participant string with the given participant and completion strings.\n    The function should use two different rules:\n    1. The given participant string should only consist of lowercase letters.\n    2. The given completion string should only consist of digits, the string cannot contain the space character.\n    '''\n    if len(participant)!= len(completion):\n        return participant + completion\n    \n    elif len(completion)!= len(participant):\n        return participant + completion\n    else:\n        return participant + completion[0:2] + completion[2:4]"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq={}\n    for i in range(0,len(a)):\n        if a[i] in freq:\n            freq[a[i]]+=1\n        else:\n            freq[a[i]]=1\n    return(freq)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort()\n    count = 0\n    for i in range(len(a)): \n        if x == a[i]: \n            count+=1\n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == a[x]:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n == 0:                                                                                                                                                                                    \n        return 0                                                                                                                                                                                    \n    elif n < 0:                                                                                                                                                                                    \n        return -list1[n]                                                                                                                                                \n    elif n > len(list1):                                                                                                                                                                                    \n        return -list1[len(list1)-n]                                                                                                                                                \n    else:                                                                                                                                                                                                                        \n        return list1[n] + sum_range_list(list1, m-1, n-1)                                                                                                                                                "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in range(m, n):\n        sum = sum + list1[x]\n    return sum\n    \ndef sum_range_dict(dict1, m, n):\n    '''\n    Write a function to find the sum of numbers in a dict within a range specified by two indices.\n    '''\n    sum = 0\n    for x in range(m, n):\n        sum = sum + dict1[x]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    resultn                                        'DIRECTIONAL': '''\n                                ''',\n                                'VIEW': ''\n                            },\n                        'Image': {\n                            'S3': '''\n                                ```bash\n                                ```\n                                ```\n                                ```\n                            ''',\n                            'Text': '''\n                                ```bash\n                                ```\n                                ```\n                                ```\n                            '''\n                        },\n                        'Block 1': {\n                            'EXECUTED': '''\n                                $exec_name = $main_name\n                                $language = $main_language\n                                $script = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $script = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_name = $script_name\n                                $language = $language\n                                $exec_nam"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i + m])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i] for i in range(m-1, n+1))                                                                                                        \n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    print (list1)\n    \n    if len(list1) <= 0:\n        print ('List is empty')\n    elif m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        print ('Indices are out of bounds')\n    else:\n        i = m\n        j = n\n        sum = 0\n        while i < len(list1):\n            if (i >= m and i <= n):\n                sum += list1[i]\n                i += 1\n            else:\n                sum += list1[i]\n                i += 1\n        print(sum)\n        \nlist1 = [1, 2, 3, 4, 5]\nsum_range_list(list1, 0, 2)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in list1:\n        s = s + i\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = abs(a)\n    return (2*a + 3*math.sqrt(6*a**2 - 1))\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    a = abs(a)\n    return (2*a + 6*math.sqrt(2*a**2 - 1))\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    a = abs(a)\n    return (2*a + 6*math.sqrt(2*a**2 - 1))\ndef area_rectangle(a, b, c):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (a*b*c)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi*(r**2))\ndef volume_rectangle(l, w, h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (l*w*h)\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (3.14*r*r*r)\ndef volume_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon.\n    '''\n    return (math.pi*(math.pow(a, 2)*a))\ndef volume_hexagon(a):\n    '''\n    Write a function to find the volume of a regular hexagon.\n    '''\n    return (math.pow(a, 3)*a)\ndef volume_octagon(a):\n    '''\n    Write a function to find the volume of a regular octagon.\n    '''\n    return (math.pow(a, 4)*a)\ndef perimeter_rectangle(a, b, c):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (a+b+c)\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return (2*math.pi*r)\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon.\n    '''\n    return (math.pi*(a**2))\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon.\n    '''\n    return (math.pow(a, 3)*a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon.\n    '''\n    return (math.pow(a, 4)*a)\ndef area_rectangle(l, w, h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*w*h)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (3.14*r*r)\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon.\n    '''\n    return (math.pow(a, 2)*a)\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon.\n    '''\n    return (math.pow(a, 3)*a)\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon.\n    '''\n    return (math.pow(a, 4)*a)\ndef perimeter_rectangle(a, b, c):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return (a+b+c)\ndef perimeter_circle(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    return (2*math.pi*r)\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon.\n    '''\n    return (math.pow(a, 2)*a)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon.\n    '''\n    return (math.pow(a, 3)*a)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon.\n    '''\n    return (math.pow(a, 4)*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    numSides = len(a) - 3\n    perimeter = (2*(a[0]*(a[numSides - 1] + a[numSides - 2] + a[numSides - 3])))\n    return perimeter\ndef volume_pentagon(a):\n    '''\n    Write a function that returns the volume of a regular pentagon from the length of its sides.\n    '''\n    numSides = len(a) - 3\n    volume = (4 * (a[0]**3)) + (4 * (a[1]**3)) + (4 * (a[2]**3)) + (4 * (a[numSides - 1]**3))\n    return volume\ndef area_pentagon(a):\n    '''\n    Write a function that returns the area of a regular pentagon from the length of its sides.\n    '''\n    numSides = len(a) - 3\n    area = 4 * a[0] * a[numSides - 1] + (4 * a[1] * a[numSides - 2] + 4 * a[2] * a[numSides - 3])\n    return area\ndef change_shape(shape,n):\n    '''\n    This function changes the shape of the shape based on the parameter n.\n    '''\n    if shape == \"Triangle\":\n        a = n*2\n        return a\n    elif shape == \"Rectangle\":\n        b = n*3\n        return b\n    elif shape == \"Circle\":\n        c = n*4\n        return c\n    elif shape == \"Square\":\n        d = n*5\n        return d\ndef change_shape_shape(shape,n):\n    '''\n    This function changes the shape of the shape based on the parameter n.\n    '''\n    if shape == \"Triangle\":\n        a = n*2\n        return a\n    elif shape == \"Rectangle\":\n        b = n*3\n        return b\n    elif shape == \"Circle\":\n        c = n*4\n        return c\n    elif shape == \"Square\":\n        d = n*5\n        return d\ndef make_shape_triangle(n):\n    '''\n    This function returns the correct shape for a triangle.\n    '''\n    if n == 1:\n        return \"Triangle\"\n    elif n == 2:\n        return \"Rectangle\"\n    elif n == 3:\n        return \"Circle\"\n    else:\n        return \"Square\"\ndef make_shape_rectangle(n):\n    '''\n    This function returns the correct shape for a rectangle.\n    '''\n    if n == 1:\n        return \"Triangle\"\n    elif n == 2:\n        return \"Rectangle\"\n    elif n == 3:\n        return \"Circle\"\n    else:\n        return \"Square\"\ndef make_shape_circle(n):\n    '''\n    This function returns the correct shape for a circle.\n    '''\n    if n == 1:\n        return \"Triangle\"\n    elif n == 2:\n        return \"Rectangle\"\n    elif n == 3:\n        return \"Circle\"\n    else:\n        return \"Square\"\ndef make_shape_square(n):\n    '''\n    This function returns the correct shape for a square.\n    '''\n    if n == 1:\n        return \"Triangle\"\n    elif n == 2:\n        return \"Rectangle\"\n    elif n == 3:\n        return \"Circle\"\n    else:\n        return \"Square\"\ndef make_shape_square_triangle(n):\n    '''\n    This function returns the correct shape for a square.\n    '''\n    if n == 1:\n        return \"Triangle\"\n    elif n == 2:\n        return \"Rectangle\"\n    elif n == 3:\n        return \"Circle\"\n    else:\n        return \"Square\"\ndef make_shape_square_rectangle(n):\n    '''\n    This function returns the correct shape for a rectangle.\n    '''\n    if n == 1:\n        return \"Triangle\"\n    elif n == 2:\n        return \"Rectangle\"\n    elif n == 3:\n        return \"Circle\"\n    else:\n        return \"Square\"\ndef make_shape_square_circle(n):\n    '''\n    This function returns the correct shape for a square.\n    '''\n    if n == 1:\n        return \"Triangle\"\n    elif n == 2:\n        return \"Rectangle\"\n    elif n == 3:\n        return \"Circle\"\n    else:\n        return \"Square\"\ndef shape_menu():\n    '''\n    This function returns a menu with all the shapes.\n    '''\n    print(\"\\n\")\n    print(\"Welcome to the shape manager!\\n\")\n    print(\"Choose a shape:\")\n    print(\"\\t1. Triangle\")\n    print(\"\\t2. Rectangle\")\n    print(\"\\t3. Circle\")\n    print(\"\\t4. Square\")\n    print(\"\\t5. Square and Rectangle\")\n    print(\"\\t6. Square and Circle\")\n    print(\"\\t7. Square and Square\")\n    print(\"\\t8. Square and Rectangle\")\n    print(\"\\t9. Square and Square\")\n    print(\"\\t10. Square and Square and Rectangle\")\n    print(\"\\t11. Square and Square and Square\")\n    print(\"\\t12. Square and Square and Square and Circle\")\n    print(\"\\t13. Square and Square and Square and Circle\")\n    print(\"\\t14. Square and Square and Square and Square\")\n    print(\"\\t15. Square and Square and Square and Square and Circle\")\n    print(\"\\t16. Square and Square and Square and Square and Square\")\n    print(\"\\t17. Square and Square and Square and Square and Square\")\n    print(\"\\t18. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t19. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t20. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t21. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t22. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t23. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t24. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t25. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t26. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t27. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t28. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t29. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t30. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t31. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t32. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t33. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t34. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t35. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t36. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t37. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t38. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t39. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t40. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t41. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t42. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t43. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t44. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t45. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t46. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t47. Square and Square and Square and Square and Square and Square\")\n    print(\"\\t48. Square and Square an"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 3*a*(a+1)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # python 3.9.3\n    # https://www.python.org/dev/peps/pep-3159/\n    # https://www.python.org/dev/peps/pep-runtime/\n    # math.gcd(a, b)\n    # 2.2.2\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # sqrt(a**2 + b**2)\n    # s"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # BASE CASE\n    if a < 0:\n        return 0\n    elif a <= 1:\n        return (a * 6)\n    elif a > 1:\n        return (a * 5) + (a * 4) + (a * 3) + (a * 2) + (a * 1)\n    \n    \n    # IF POSITION NUMBER IS GREATER THAN 1\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 3) + (a * 3) + (a * 5) + (a * 6)\n    else:\n        return ((a - 1) * 4) + (a * 5) + (a * 6) + (a * 7) + (a * 8) + (a * 9) + (a * 10)\n    \n    # IF POSITION NUMBER IS GREATER THAN 2\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 5) + (a * 7) + (a * 9) + (a * 10) + (a * 11)\n    else:\n        return ((a - 1) * 7) + (a * 8) + (a * 10) + (a * 11) + (a * 12)\n    \n    # IF POSITION NUMBER IS GREATER THAN 3\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 9) + (a * 13) + (a * 15) + (a * 17) + (a * 19)\n    else:\n        return ((a - 1) * 9) + (a * 13) + (a * 17) + (a * 15) + (a * 19) + (a * 21)\n    \n    # IF POSITION NUMBER IS GREATER THAN 4\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 13) + (a * 19) + (a * 23) + (a * 25)\n    else:\n        return ((a - 1) * 13) + (a * 19) + (a * 23) + (a * 25) + (a * 27)\n    \n    # IF POSITION NUMBER IS GREATER THAN 5\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 15) + (a * 27) + (a * 30) + (a * 33)\n    else:\n        return ((a - 1) * 15) + (a * 27) + (a * 30) + (a * 33) + (a * 35)\n    \n    # IF POSITION NUMBER IS GREATER THAN 6\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 17) + (a * 35) + (a * 41) + (a * 43) + (a * 45) + (a * 47)\n    else:\n        return ((a - 1) * 17) + (a * 35) + (a * 41) + (a * 43) + (a * 45) + (a * 47) + (a * 49)\n    \n    # IF POSITION NUMBER IS GREATER THAN 7\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 21) + (a * 49) + (a * 63) + (a * 65) + (a * 67) + (a * 71)\n    else:\n        return ((a - 1) * 21) + (a * 49) + (a * 63) + (a * 65) + (a * 67) + (a * 71) + (a * 73)\n    \n    # IF POSITION NUMBER IS GREATER THAN 8\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 23) + (a * 75) + (a * 81) + (a * 83) + (a * 85) + (a * 87) + (a * 89)\n    else:\n        return ((a - 1) * 23) + (a * 75) + (a * 81) + (a * 83) + (a * 85) + (a * 87) + (a * 89) + (a * 91)\n    \n    # IF POSITION NUMBER IS GREATER THAN 9\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 25) + (a * 91) + (a * 93) + (a * 95) + (a * 97) + (a * 99) + (a * 101)\n    else:\n        return ((a - 1) * 25) + (a * 91) + (a * 93) + (a * 95) + (a * 97) + (a * 99) + (a * 101) + (a * 103)\n    \n    # IF POSITION NUMBER IS GREATER THAN 10\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 27) + (a * 100) + (a * 103) + (a * 105) + (a * 107) + (a * 109) + (a * 111) + (a * 113)\n    else:\n        return ((a - 1) * 27) + (a * 100) + (a * 103) + (a * 105) + (a * 107) + (a * 109) + (a * 111) + (a * 113) + (a * 115)\n    \n    # IF POSITION NUMBER IS GREATER THAN 11\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 29) + (a * 111) + (a * 113) + (a * 115) + (a * 117) + (a * 119) + (a * 121) + (a * 123) + (a * 125)\n    else:\n        return ((a - 1) * 29) + (a * 111) + (a * 113) + (a * 115) + (a * 117) + (a * 119) + (a * 121) + (a * 123) + (a * 125) + (a * 127)\n    \n    # IF POSITION NUMBER IS GREATER THAN 12\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 31) + (a * 123) + (a * 125) + (a * 127) + (a * 129) + (a * 131) + (a * 133) + (a * 135) + (a * 137) + (a * 139)\n    else:\n        return ((a - 1) * 31) + (a * 123) + (a * 125) + (a * 127) + (a * 129) + (a * 131) + (a * 133) + (a * 135) + (a * 137) + (a * 139) + (a * 141)\n    \n    # IF POSITION NUMBER IS GREATER THAN 13\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 33) + (a * 141) + (a * 143) + (a * 145) + (a * 147) + (a * 149) + (a * 151) + (a * 153) + (a * 155) + (a * 157) + (a * 159) + (a * 161)\n    else:\n        return ((a - 1) * 33) + (a * 141) + (a * 143) + (a * 145) + (a * 147) + (a * 149) + (a * 151) + (a * 153) + (a * 155) + (a * 157) + (a * 159) + (a * 161) + (a * 163)\n    \n    # IF POSITION NUMBER IS GREATER THAN 14\n    # THEN IT IS THE BASE CASE\n    if a % 2 == 0:\n        return ((a - 1) * 35) + (a * 163) + (a * 165) + (a * 167) + (a * 169) + (a * 171) + (a * 173) + (a * 175) + (a * 177) + (a * 179) + (a * 181) + (a * 183)\n    else:\n        return ((a - 1) * 35) + (a * 163) + (a * 165) + (a * 167) + (a * 169) + (a * 171) + (a * 173) + (a * 175) + (a * 177) + (a * 179) + "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    import math\n    if a == 0:\n        return 0\n    else:\n        p = 3*a+4\n        return p\ndef triangle(a):\n    '''\n    Write a function to find the triangle with side lengths of a and b.\n    '''\n    import math\n    if a == 0:\n        return 0\n    else:\n        if a == 1:\n            p = 1\n        else:\n            p = 4*(a-1)/3\n            if (a-1)**2 - a**2 + (a**3+a**2+1)**2 == a**4:\n                p = math.sqrt(a**3+a**2+1)\n            else:\n                p = 0\n        return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sum_side = 0\n    for side in range(1,a):\n        sum_side += side\n    return sum_side * 6\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # print(\"INP {}\".format(a))\n    # return 'NOT_INPUT'\n    # i = 1\n    # while i < 3:\n    #     a = (a+1)**2\n    #     i += 1\n    # return a\n    # return round(a/6,1)\n    '''\n    if a%2 == 0:\n        return math.sqrt(a**2/2)\n    elif a%2 == 1:\n        return math.sqrt(a**2/4)\n    elif a%2 == 3:\n        return a**(1/3)\n    else:\n        return round((a/2)*(a**3/12))\n    '''\n    # for i in range(0,a,2):\n    #     return round(a/6,1)\n    # return round(a/4,1)\n    \n    if a == 1:\n        return round(math.sqrt(a))\n    elif a == 2:\n        return round(math.sqrt(3))\n    elif a == 3:\n        return round(math.sqrt(math.sqrt(6)))\n    elif a == 4:\n        return round(math.sqrt(3**2))\n    elif a == 5:\n        return round(math.sqrt(math.sqrt(5)))\n    elif a == 6:\n        return round(math.sqrt(3**3))\n    elif a == 7:\n        return round(math.sqrt(math.sqrt(7)))\n    elif a == 8:\n        return round(math.sqrt(5**3))\n    elif a == 9:\n        return round(math.sqrt(3**5))\n    elif a == 10:\n        return round(math.sqrt(5**5))\n    elif a == 11:\n        return round(math.sqrt(3**6))\n    elif a == 12:\n        return round(math.sqrt(5**7))\n    elif a == 13:\n        return round(math.sqrt(3**8))\n    elif a == 14:\n        return round(math.sqrt(5**9))\n    elif a == 15:\n        return round(math.sqrt(3**10))\n    elif a == 16:\n        return round(math.sqrt(5**11))\n    elif a == 17:\n        return round(math.sqrt(3**12))\n    elif a == 18:\n        return round(math.sqrt(5**13))\n    elif a == 19:\n        return round(math.sqrt(3**14))\n    elif a == 20:\n        return round(math.sqrt(5**15))\n    elif a == 21:\n        return round(math.sqrt(3**16))\n    elif a == 22:\n        return round(math.sqrt(5**17))\n    elif a == 23:\n        return round(math.sqrt(3**18))\n    elif a == 24:\n        return round(math.sqrt(5**19))\n    elif a == 25:\n        return round(math.sqrt(3**20))\n    elif a == 26:\n        return round(math.sqrt(5**21))\n    elif a == 27:\n        return round(math.sqrt(3**22))\n    elif a == 28:\n        return round(math.sqrt(5**23))\n    elif a == 29:\n        return round(math.sqrt(3**24))\n    elif a == 30:\n        return round(math.sqrt(5**25))\n    elif a == 31:\n        return round(math.sqrt(3**26))\n    elif a == 32:\n        return round(math.sqrt(5**27))\n    elif a == 33:\n        return round(math.sqrt(3**28))\n    elif a == 34:\n        return round(math.sqrt(5**29))\n    elif a == 35:\n        return round(math.sqrt(3**30))\n    elif a == 36:\n        return round(math.sqrt(5**31))\n    elif a == 37:\n        return round(math.sqrt(3**32))\n    elif a == 38:\n        return round(math.sqrt(5**33))\n    elif a == 39:\n        return round(math.sqrt(3**34))\n    elif a == 40:\n        return round(math.sqrt(5**35))\n    elif a == 41:\n        return round(math.sqrt(3**36))\n    elif a == 42:\n        return round(math.sqrt(5**37))\n    elif a == 43:\n        return round(math.sqrt(3**38))\n    elif a == 44:\n        return round(math.sqrt(5**39))\n    elif a == 45:\n        return round(math.sqrt(3**40))\n    elif a == 46:\n        return round(math.sqrt(5**41))\n    elif a == 47:\n        return round(math.sqrt(3**42))\n    elif a == 48:\n        return round(math.sqrt(5**43))\n    elif a == 49:\n        return round(math.sqrt(3**44))\n    elif a == 50:\n        return round(math.sqrt(5**45))\n    elif a == 51:\n        return round(math.sqrt(3**46))\n    elif a == 52:\n        return round(math.sqrt(5**47))\n    elif a == 53:\n        return round(math.sqrt(3**48))\n    elif a == 54:\n        return round(math.sqrt(5**49))\n    elif a == 55:\n        return round(math.sqrt(3**50))\n    elif a == 56:\n        return round(math.sqrt(5**51))\n    elif a == 57:\n        return round(math.sqrt(3**52))\n    elif a == 58:\n        return round(math.sqrt(5**53))\n    elif a == 59:\n        return round(math.sqrt(3**54))\n    elif a == 60:\n        return round(math.sqrt(5**55))\n    elif a == 61:\n        return round(math.sqrt(3**56))\n    elif a == 62:\n        return round(math.sqrt(5**57))\n    elif a == 63:\n        return round(math.sqrt(3**58))\n    elif a == 64:\n        return round(math.sqrt(5**59))\n    elif a == 65:\n        return round(math.sqrt(3**60))\n    elif a == 66:\n        return round(math.sqrt(5**61))\n    elif a == 67:\n        return round(math.sqrt(3**62))\n    elif a == 68:\n        return round(math.sqrt(5**63))\n    elif a == 69:\n        return round(math.sqrt(3**64))\n    elif a == 70:\n        return round(math.sqrt(5**65))\n    elif a == 71:\n        return round(math.sqrt(3**66))\n    elif a == 72:\n        return round(math.sqrt(5**67))\n    elif a == 73:\n        return round(math.sqrt(3**68))\n    elif a == 74:\n        return round(math.sqrt(5**69))\n    elif a == 75:\n        return round(math.sqrt(3**70))\n    elif a == 76:\n        return round(math.sqrt(5**71))\n    elif a == 77:\n        return round(math.sqrt(3**72))\n    elif a == 78:\n        return round(math.sqrt(5**73))\n    elif a == 79:\n        return round(math.sqrt(3**74))\n    elif a == 80:\n        return round(math.sqrt(5**75))\n    elif a == 81:\n        return round(math.sqrt(3**76))\n    elif a == 82:"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Get the side lengths\n    s = 0\n    for i in range(1,a):\n        s += math.sqrt(2) * (i+1)\n    \n    #Find the perimeter\n    return s * 3\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the side lengths of a triangle.\n    '''\n    #Get the side lengths\n    s = 0\n    for i in range(1,a):\n        s += math.sqrt(2) * (i+1)\n    \n    #Find the perimeter\n    return s * 4\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    #Get the side lengths\n    s = 0\n    for i in range(1,a):\n        s += math.sqrt(2) * (i+1)\n    \n    #Find the perimeter\n    return s * 3\ndef perimeter_rectangle(a):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the width and the height of a rectangle.\n    '''\n    #Get the side lengths\n    s = 0\n    for i in range(1,a):\n        s += math.sqrt(2) * (i+1)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = 5\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    p = perimeter_pentagon(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    s = 6\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    p = perimeter_hexagon(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    s = 7\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    p = perimeter_heptagon(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    s = 8\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    p = perimeter_octagon(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    s = 4\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    p = perimeter_square(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_octagon_square(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from a square of length of its sides.\n    '''\n    s = 4\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_octagon_square(a):\n    '''\n    Write a function to find the area of a regular octagon from a square of length of its sides.\n    '''\n    p = perimeter_octagon_square(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_straw(a):\n    '''\n    Write a function to find the perimeter of a regular straw from the length of its sides.\n    '''\n    s = 3\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_straw(a):\n    '''\n    Write a function to find the area of a regular straw from the length of its sides.\n    '''\n    p = perimeter_straw(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    s = 2\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    p = perimeter_triangle(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_square_rectangle(a):\n    '''\n    Write a function to find the perimeter of a rectangle from its length of its sides.\n    '''\n    s = 4\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_square_rectangle(a):\n    '''\n    Write a function to find the area of a rectangle from its length of its sides.\n    '''\n    p = perimeter_square_rectangle(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_triangle_square(a):\n    '''\n    Write a function to find the perimeter of a triangle from its length of its sides.\n    '''\n    s = 4\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_triangle_square(a):\n    '''\n    Write a function to find the area of a triangle from its length of its sides.\n    '''\n    p = perimeter_triangle_square(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_pentagon_rectangle(a):\n    '''\n    Write a function to find the perimeter of a pentagon from the length of its sides.\n    '''\n    s = 5\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_pentagon_rectangle(a):\n    '''\n    Write a function to find the area of a pentagon from the length of its sides.\n    '''\n    p = perimeter_pentagon_rectangle(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_heptagon_rectangle(a):\n    '''\n    Write a function to find the perimeter of a heptagon from the length of its sides.\n    '''\n    s = 6\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_heptagon_rectangle(a):\n    '''\n    Write a function to find the area of a heptagon from the length of its sides.\n    '''\n    p = perimeter_heptagon_rectangle(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_octagon_rectangle(a):\n    '''\n    Write a function to find the perimeter of a octagon from the length of its sides.\n    '''\n    s = 7\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_octagon_rectangle(a):\n    '''\n    Write a function to find the area of a octagon from the length of its sides.\n    '''\n    p = perimeter_octagon_rectangle(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_square_rectangle_square(a):\n    '''\n    Write a function to find the perimeter of a rectangle from its length of its sides.\n    '''\n    s = 4\n    p = math.sqrt((s**2) - (a**2))\n    return p\ndef area_square_rectangle_square(a):\n    '''\n    Write a function to find the area of a rectangle from its length of its sides.\n    '''\n    p = perimeter_square_rectangle_square(a)\n    p_a = (math.sqrt(p**2 + a**2))\n    return p_a\ndef perimeter_triangle_square_rectangle(a):\n    '''\n    Write a function to find the perimeter o"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    #TODO: Create a function to find the frequency of'std' in a given string\n    def count_occurance_string(s):\n        count_occ = {}\n        for x in s:\n            if x in count_occ:\n                count_occ[x] += 1\n            else:\n                count_occ[x] = 1\n        return count_occ\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    words = s.split()\n    dic = dict()\n    for i in range(len(words)):\n        if words[i] not in dic:\n            dic[words[i]] = 1\n        else:\n            dic[words[i]] += 1\n    return(len(dic))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurance_counter = {}\n    count = 0\n    for char in s:\n        if char in occurance_counter:\n            occurance_counter[char] += 1\n        else:\n            occurance_counter[char] = 1\n    for char in occurance_counter:\n        if occurance_counter[char] > occurance_counter[char - 1]:\n            count += occurance_counter[char]\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    word_set = set(s.split())\n    count = 0\n    for word in word_set:\n        if word =='std':\n            count += 1\n        else:\n            continue\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l=[]\n    for i in range(len(s)):\n        if s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u':\n            l.append(0)\n        else:\n            l.append(s.count(s[i]))\n    return l\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    \n    output = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            output += 1\n        else:\n            output = 0\n    \n    return output\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_type = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n    for i in range(len(test_tuple)):\n        try:\n            check_type[i]\n        except IndexError:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        try:\n            assert(type(i) == type(i[0])), \"Type of the element in tuple must be same\"\n        except AssertionError:\n            raise AssertionError(\"Tuple contains non numeric data\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #create tuple and assign it to variables\n    tup = tuple(test_tuple)\n    #check size of tuple\n    if len(tup) < 2:\n        return False\n    #get first element\n    first_element = tup[0]\n    #get second element\n    second_element = tup[1]\n    #get the element from dictionary\n    for i in range(len(tup)):\n        if tup[i]!= first_element:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if test_tuple[0] not in [int, float, str, bytes, bytearray]:\n        raise ValueError('Type cannot be changed')\n    if type(test_tuple[0]) == int:\n        if type(test_tuple[1]) == int:\n            return int(test_tuple[1])\n        elif type(test_tuple[1]) == float:\n            if type(test_tuple[1]) == int:\n                return int(test_tuple[1])\n            elif type(test_tuple[1]) == float:\n                return float(test_tuple[1])\n            else:\n                raise ValueError('All elements in tuple must be integers or floats')\n    elif type(test_tuple[0]) == float:\n        if type(test_tuple[1]) == int:\n            return int(test_tuple[1])\n        elif type(test_tuple[1]) == float:\n            if type(test_tuple[1]) == int:\n                return int(test_tuple[1])\n            elif type(test_tuple[1]) == float:\n                return float(test_tuple[1])\n            else:\n                raise ValueError('All elements in tuple must be integers or floats')\n    elif type(test_tuple[0]) == str:\n        if type(test_tuple[1]) == int:\n            return int(test_tuple[1])\n        elif type(test_tuple[1]) == float:\n            if type(test_tuple[1]) == int:\n                return int(test_tuple[1])\n            elif type(test_tuple[1]) == float:\n                return float(test_tuple[1])\n            else:\n                raise ValueError('All elements in tuple must be integers or floats')\n    elif type(test_tuple[0]) == bytes:\n        if type(test_tuple[1]) == int:\n            return int(test_tuple[1])\n        elif type(test_tuple[1]) == float:\n            if type(test_tuple[1]) == int:\n                return int(test_tuple[1])\n            elif type(test_tuple[1]) == float:\n                return float(test_tuple[1])\n            else:\n                raise ValueError('All elements in tuple must be integers or floats')\n    else:\n        raise ValueError('All elements in tuple must be integers or floats')\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_data = test_tuple[0]\n    test_list = test_tuple[1]\n    for data in test_list:\n        if type(data)!= str:\n            return 'Data type not allowed'\n    if len(test_list) < 3:\n        return 'At least two elements of the tuple required'\n    for data in test_list:\n        if type(data)!= str:\n            return 'Data type not allowed'\n    for i in range(len(test_list)):\n        if type(test_list[i])!= str:\n            return 'Data type not allowed'\n    if not all(map(str.isalpha, test_list)):\n        return 'The tuple must contain only lowercase letters'\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_item, second_item = test_tuple\n    if type(first_item) is type(second_item):\n        return \"They have the same data type\"\n    else:\n        return f\"They have different data type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_list = []\n    for i in test_tuple:\n        check_list.append(i.data_type)\n    if len(set(check_list)) == len(check_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    i = 0\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            item = tuple(item)\n        if type(item) is tuple:\n            item = tuple(item)\n        if type(item) not in [tuple, list, dict]:\n            i+=1\n            print(f\"Checking {i}th element of tuple {item}\")\n            return False\n        if item is not tuple:\n            i+=1\n            continue\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list1 = test_tuple[0]\n    list2 = test_tuple[1]\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # start with an empty list\n    data_list = []\n    # iterate through the tuple, and check if the elements of list are same data type\n    # add them to the list\n    for i in test_tuple:\n        if isinstance(i, list):\n            for j in i:\n                if not isinstance(j, list):\n                    data_list.append(j)\n        else:\n            data_list.append(i)\n    # compare all the values of the list to make sure they have same data type\n    # if they have different data type then return false\n    # return true\n    if len(set(data_list))!= len(data_list):\n        return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if n/2 > 0, n/2 is the largest number in the array.\n    # because the last number is counted twice, that is the number of occurances of the current number.\n    # if n/2 < len(arr), it is the same as n.\n    # So, if the number is the majority element, it is equal to the first element in arr.\n    if n/2 < len(arr) and arr[0] == x:\n        return True\n    # If the number is not in the array, it is the same as the last element in arr.\n    elif n/2 >= len(arr):\n        return arr[-1] == x\n    else:\n        mid = n/2\n        for i in range(n-1):\n            if arr[i] == x and arr[i+1] == x:\n                return True\n            elif arr[i] == x:\n                arr[i+1] = x\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # declaring a variable\n    # variable to store the value of x\n    # declaring the length of the array as n\n    # declaring the x as the element to be compared\n    # checking to see if the x is greater than the length of the array\n    # declaring a counter to store the count of x in the array\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        if arr[i] == x:\n            return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Write your code here.\n    index=0\n    while index < n:\n        if arr[index] == x:\n            index+=1\n        else:\n            break\n    return arr[index]==x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #A value must be in the array if the current value is the majority value.\n    if arr[0] == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count/n > 0.5:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 1:\n        return arr[0] == x\n    # If the list is length 1, return True\n    if n == 1:\n        return arr[0] == x\n    # If the list is not length 1, return True\n    if n > len(arr):\n        return True\n    # Now we'll go through the list and check each element against the other elements\n    # If this element is a majority, return True\n    for i in range(n):\n        if is_majority(arr[i+1:], n, x):\n            return arr[i+1] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or arr[0] == x:\n        return True\n    elif n == 1:\n        return False\n    else:\n        i = 1\n        while i < n-1:\n            if arr[i] < arr[i-1]:\n                break\n            i = i+1\n        if i < n-1:\n            return True\n        else:\n            return False\n        \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    \n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if is_majority(arr, n, arr[mid]):\n            left = mid + 1\n        else:\n            right = mid\n    return left % n == n // 2"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # The input value must be an integer\n    # If the input value is less than 2, then it is assumed to be zero.\n    # If the input value is greater than 9, then it is assumed to be a one-digit number.\n    # The output is the sum of the number of set bits.\n    def bincount(n):\n        count = 0\n        while n!= 0:\n            n &= n-1\n            count += 1\n        return count\n    \n    # Convert the number to binary \n    # representation.\n    def bin2int(n):\n        bin = ''\n        while n!= 0:\n            n >>= 1\n            bin += str(n%2)\n            n = n//2\n        return int(bin)\n    \n    # Convert the binary representation to\n    # decimal number.\n    def int2bin(n):\n        res = ''\n        while n!= 0:\n            n //= 2\n            res += str(n%2)\n            n = n//2\n        return res\n    \n    # Check whether the given number is a one-digit number or not.\n    def isOneDigit(n):\n        return n == bin2int(n) or n == int2bin(n)\n        \n    # Check whether the given number is in the set.\n    def isSet(n):\n        return n == bin2int(n)\n    \n    # Count the number of set bits.\n    return bincount(n)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    d
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Counter variables \n    counts = 0\n    q = 1\n    while n!= 0:\n        # Check if it's odd or even\n        if q % 2 == 0:\n            # It's an even, so it's the last bit\n            counts += 1\n            # Change the number\n            n = n >> 1\n        else:\n            # It's an odd, so it's the first bit\n            counts += 1\n            # Change the number\n            n = n << 1\n        q += 1\n    return counts\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    import os, sys\n    # check that function is in current directory\n    if not os.path.exists('counting.py'): \n        sys.exit('Function counting.py does not exist') \n    # call counting.py\n    counting = __import__('counting') \n    result = counting.count_Set_Bits(n) \n    return result"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    return (bin(n)[2:]).count('1')\n    "
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # TODO: Count the set bits in a given number.\n    # Input: n (int)\n    # Output: an integer representing the number of set bits in a given number.\n    count = 0\n    i = 0\n    while(i<n):\n        if(i&1):\n            count += 1\n        i+=1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    bits = count_Set_Bits_Binary(n)\n    return bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    B = n\n    i = 1\n    while i <= B:\n        if (n & 1) == 1:\n            B = B - 1\n        if (n & 1) == 0:\n            B = B - 1\n        i = i + 1\n    return B\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(0,n): \n        if (n & 1) == 0: \n            count += 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # variable to store number\n    num = n\n    count = 0\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd(s):\n        odd = 0\n        for i in range(len(s)):\n            if s[i] % 2 == 1:\n                odd += 1\n                if odd >= 3:\n                    return False\n        if odd >= 3:\n            return True\n        else:\n            return False\n    return str.replace(s, odd)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str.replace(str, str[::2])\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for i in str:\n        if i % 2!= 0:\n            odd_index.append(i)\n    return \"\".join(odd_index)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_values_string_v2(str):\n        \"\"\"\n        This function accepts a string as an argument.\n        The function returns the string without the odd values of characters.\n        \"\"\"\n        odd_values = []\n        for i in range(len(str)):\n            if i % 2 == 0:\n                odd_values.append(str[i])\n        return \"\".join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace('e', '').replace('E', '').replace('o', '').replace('O', '').replace('t', '').replace('T', '').replace('s', '').replace('S', '').replace('r', '').replace('R', '').replace('u', '').replace('U', '').replace('i', '').replace('I', '').replace('v', '').replace('V', '').replace('w', '').replace('W', '').replace('y', '').replace('Y', '').replace('x', '').replace('X', '').replace('{', '').replace('}', '').replace('|', '').replace('/', '').replace('.', '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_values(str, odd_index):\n        odd_indices = []\n        for i in range(len(str)):\n            if i % 2 == 0:\n                if odd_index == str[i]:\n                    odd_indices.append(i)\n        return odd_indices\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_index(str):\n        '''\n        Returns the indices of odd values of the given string\n        '''\n        output = []\n        for i in range(len(str)):\n            if str[i] % 2 == 0:\n                output.append(i)\n        return output\n    return ''.join(str[i] for i in odd_index(str))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for x in str:\n        if int(x)%2!= 0:\n            odd_values.append(x)\n    return odd_values\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odds = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            if int(str[i]) % 2!= 0:\n                odds.append(str[i])\n    return \"\".join(odds)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l=list(str)\n    for i in range(len(l)):\n        if l[i]%2==1:\n            l[i]=l[i]-1\n    return ''.join(l)\nstr=\"5(3742)+76(98345)-91(34)(9(5678))\"\nprint(odd_values_string(str)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c: \n        return a\n    elif b < c < a: \n        return b\n    else: \n        return c\n \n "
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c\na=int(input(\"Enter first value of the function: \"))\nb=int(input(\"Enter second value of the function: \"))\nc=int(input(\"Enter third value of the function: \"))\nprint(f\"{a}+{b}+{c}=0\")\nprint(f\"Result of the function is: {min_of_three(a,b,c)}\")\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        print (a)\n    elif b>a and b>c:\n        print (b)\n    else:\n        print (c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    return None\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n    return\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c:\n        return b\n    elif a<c and c<b:\n        return c\n    else:\n        return b\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    elif c > a and c > b:\n        return c\n    else:\n        return \"You didn't find a minimum of all three numbers\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    elif c>a and c>b:\n        return c\n    else:\n        return \"Invalid Input\"\n    \n    \ndef max_of_four(a,b,c,d): \n    '''\n    Write a function to find the maximum of four numbers.\n    '''\n    if a>b and a>c and a>d:\n        return a\n    elif b>a and b>c and b>d:\n        return b\n    elif c>a and c>b and c>d:\n        return c\n    elif d>a and d>b and d>c:\n        return d\n    else:\n        return \"Invalid Input\"\n    \n    \ndef average(a,b,c,d): \n    '''\n    Write a function to find the average of four numbers.\n    '''\n    if a>b and a>c and a>d:\n        return a\n    elif b>a and b>c and b>d:\n        return b\n    elif c>a and c>b and c>d:\n        return c\n    elif d>a and d>b and d>c:\n        return d\n    else:\n        return \"Invalid Input\"\n    \n    \ndef mode(a,b,c,d): \n    '''\n    Write a function to find the mode of four numbers.\n    '''\n    if a>b and a>c and a>d:\n        return a\n    elif b>a and b>c and b>d:\n        return b\n    elif c>a and c>b and c>d:\n        return c\n    elif d>a and d>b and d>c:\n        return d\n    else:\n        return \"Invalid Input\"\n    \n    \ndef fact(n): \n    '''\n    Write a function factorial.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*fact(n-1)\n        \n    \ndef factorial(n): \n    '''\n    Write a function factorial.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \n    \ndef even_odd(n): \n    '''\n    Write a function which returns even or odd number as a string.\n    '''\n    if n==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n        \n    \ndef primality(n): \n    '''\n    Write a function which returns true if n is prime and return false otherwise.\n    '''\n    if n==2:\n        return True\n    elif n%2==0 or n==3:\n        return False\n    elif n==4:\n        return True\n    elif n%4==0:\n        return False\n    elif n==5:\n        return True\n    elif n%2!=0 and n%3!=0 and n%4!=0:\n        return False\n    else:\n        return True\n    \n    \ndef gcd(a,b): \n    '''\n    Write a function to find the Greatest Common Divisor of two integers.\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    if a%b==0:\n        return b\n    else:\n        return gcd(b,a%b)\n    \n    \ndef lcm(a,b): \n    '''\n    Write a function to find the least common multiple of two integers.\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    if a%b==0:\n        return a\n    else:\n        return a*b/gcd(a,b)\n    \n    \ndef word_length(text): \n    '''\n    Write a function to find the word length.\n    '''\n    if len(text)>0:\n        return len(text)\n    else:\n        return \"Invalid Input\"\n    \n    \ndef word_length_in_string(text): \n    '''\n    Write a function to find the word length in a given string.\n    '''\n    if text:\n        if len(text)==1:\n            return len(text[0])\n        else:\n            return len(text[0])+word_length(text[1:])\n    else:\n        return \"Invalid Input\"\n    \n    \ndef count_chars(text): \n    '''\n    Write a function to find the number of characters in a given string.\n    '''\n    if text:\n        count=0\n        for char in text:\n            if char.isalpha():\n                count+=1\n            else:\n                continue\n        return count\n    else:\n        return \"Invalid Input\"\n    \n    \ndef count_chars_in_string(text): \n    '''\n    Write a function to find the number of characters in a given string.\n    '''\n    if text:\n        count=0\n        for char in text:\n            if char.isalpha():\n                count+=1\n            else:\n                continue\n        return count\n    else:\n        return \"Invalid Input\"\n    \n    \ndef nth_power(n): \n    '''\n    Write a function to find the nth-power of a given number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return n*nth_power(n-1)\n    \n    \ndef factorial_recursive(n): \n    '''\n    Write a function which returns the factorial of a given integer.\n    '''\n    if n==1:\n        return 1\n    elif n==0:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return n*factorial_recursive(n-1)\n    \n    \ndef palindrome_check(string): \n    '''\n    Write a function which checks whether a given string is a palindrome or not.\n    '''\n    if string==string[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef palindrome_check_in_string(string): \n    '''\n    Write a function which checks whether a given string is a palindrome or not.\n    '''\n    if string==string[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_valid_index(x,l,c): \n    '''\n    Write a function which checks whether the given index is valid or not.\n    '''\n    if x>l:\n        return False\n    elif x<0:\n        return False\n    else:\n        return True\n    \n    \ndef reverse(string): \n    '''\n    Write a function which reverses the string.\n    '''\n    if len(string)>0:\n        return string[::-1]\n    else:\n        return \"Invalid Input\"\n    \n    \ndef is_palindrome(string): \n    '''\n    Write a function which checks whether the given string is a palindrome or not.\n    '''\n    if string==string[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_in_string(string): \n    '''\n    Write a function which checks whether the given string is a palindrome or not.\n    '''\n    if string==string[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_in_string_in_string(string,string_1): \n    '''\n    Write a function which checks whether the given string is a palindrome or not.\n    '''\n    if string==string[::-1]:\n        return string_1==string\n    else:\n        return False\n    \n    \ndef first_index(string): \n    '''\n    Write a function which returns the first index of a given string.\n    '''\n    if string==string[::-1]:\n        return 0\n    else:\n        return 1\n    \n    \ndef second_inde"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>r:\n        return False\n    \n    Binary_string = bin(n)[2:]\n    for i in range(0,len(Binary_string)):\n        if Binary_string[i] == '1':\n            if n&(1<<i):\n                return False\n        if Binary_string[i] == '0':\n            if n&(1<<i):\n                return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(n):\n        #print(i)\n        if (i >= l and i <= r):\n            count += 1\n    return count\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l == r):\n        return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n=int(n)\n    l=int(l)\n    r=int(r)\n    # Your code here\n    if(l>=n or r>=n):\n        return False\n    return True\n    \n    \ndef all_Bits_Set_In_The_Range_Original(n,l,r):  \n    '''\n    Write a python function to check whether all the bits in the given range have been set or not.\n    '''\n    n=int(n)\n    l=int(l)\n    r=int(r)\n    # Your code here\n    if(l>=n or r>=n):\n        return False\n    return True\n    \ndef all_Bits_Set_In_The_Range_Original2(n,l,r):  \n    '''\n    Write a python function to check whether all the bits in the given range have been set or not.\n    '''\n    n=int(n)\n    l=int(l)\n    r=int(r)\n    # Your code here\n    if(l>=n or r>=n):\n        return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l<=r): \n        for i in range(l,r+1):\n            if(i&n==0):\n                return 0\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l <= n < r : return \"True\"\n    elif n > l and n <= r : return \"False\"\n    else : return \"None\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>r:\n        print(\"Please enter the given range\")\n        return\n    return all_Bits_Set_In_The_Given_Range(n,l,r+1)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_set = 0\n    i = l\n    while (i<=r):\n        if (l&i) == 0:\n            all_set = all_set + 1\n        i = i << 1\n    print (\"All bits are unset in range [\",l, \",\",r,\"]: \",all_set)\n    return all_set\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if n < 2**8:\n        return True\n    else:\n        if n in range(l,r):\n            return False\n        else:\n            return all_Bits_Set_In_The_Given_Range(n,l,r+1)\n        \ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    n_bits = bin(n)[2:]\n    if len(n_bits)%8 == 0:\n        n_bits = int(n_bits,2)\n    else:\n        n_bits = int(n_bits,2) + 1\n    \n    return all_Bits_Set_In_The_Given_Range_2_Bit(n_bits,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    def is_bits_Set(num,pos,bit):\n        '''\n        Is the given number set in bit position pos \n        '''\n        return (num & (1 << pos)) > 0\n    \n    def all_Bits_Set_In_The_Given_Range(n,l,r):\n        '''\n        All the bits are set in the given range or not\n        '''\n        return all([is_bits_Set(n,i,j) for i in range(l,r+1) for j in range(l,r+1)])\n        \n    def is_bits_Set_In_The_Given_Range(n,l,r):\n        '''\n        Is the given number set in bit position pos \n        '''\n        return all([is_bits_Set(n,i,j) for i in range(l,r+1) for j in range(l,r+1)])\n        \n    if l == r:\n        return True\n        \n    if all_Bits_Set_In_The_Given_Range(n,l,r) and all_Bits_Set_In_The_Given_Range(n,l,r-1):\n        return all_Bits_Set_In_The_Given_Range(n,l,r)\n        \n    if all_Bits_Set_In_The_Given_Range(n,l,r):\n        return all_Bits_Set_In_The_Given_Range(n,l,r-1)\n        \n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l,r-1)\n        \n    \n    \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:-n]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    '''\n    Given an array and an integer n, return a re-arranged array such that all negative elements appear first, then all positive ones, and finally all positive elements.\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [arr[0]]\n    else:\n        pos = arr[0]\n        negative = []\n        positive = []\n        for i in range(n):\n            if arr[i] < pos:\n                positive.append(arr[i])\n            elif arr[i] > pos:\n                negative.append(arr[i])\n            else:\n                positive.append(arr[i])\n                negative.append(arr[i])\n        positive = positive[::-1]\n        negative = negative[::-1]\n        for i in range(n):\n            arr[i] = negative[i]\n            arr[n-1-i] = positive[i]\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: Write the function.\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # your code goes here\n    # hint: you may use a for loop to work through all n elements of the array\n    new_arr = []\n    for i in range(n):\n        if arr[i] > 0:\n            new_arr.append(arr[i])\n        else:\n            new_arr.append(arr[i]*-1)\n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Use the while loop to keep a running tally of the number of negative elements.\n    current_count = 0\n    while current_count < n:\n        # Find a negative element and decrement the current count by one.\n        current_negative = arr[current_count]\n        current_count += 1\n        # Keep iterating till you find a positive element.\n        while current_negative < 0 and current_count < n:\n            current_negative = arr[current_count]\n            current_count += 1\n    # Reverse the array, so that the negative elements appear before the positive ones.\n    arr.reverse()\n    # And keep iterating until you have reached the beginning of the original array.\n    while current_count < n:\n        # Keep iterating till you find a positive element.\n        while current_negative < 0 and current_count < n:\n            current_negative = arr[current_count]\n            current_count += 1\n    # Reorder the array by using the negative elements.\n    i = 0\n    while i < n:\n        if current_negative < 0:\n            arr[i] = -arr[i]\n        i += 1\n    # Return the result.\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    if (n < 1):\n        raise Exception('n must be greater than or equal to 1')\n    \n    # Make a copy of the array\n    new_arr = arr[:]\n    \n    # Sort array in ascending order\n    new_arr.sort()\n    \n    # Find the position where all negative elements appear\n    n_negative = []\n    for i in range(n):\n        if new_arr[i] < 0:\n            n_negative.append(i)\n    \n    # Check if there are any negative elements\n    if len(n_negative) > 0:\n        # Reorder negative elements\n        new_arr = np.array([new_arr[i] for i in n_negative])\n        # Check if the original array has negative elements\n        # If so, the elements are shifted by 1 to the left so that the original array is in ascending order\n        # If not, the elements are shifted by -1 to the right so that the original array is in ascending order\n        # Return the modified array.\n        if len(new_arr) % 2 == 0:\n            new_arr = np.concatenate((new_arr[0:len(new_arr) // 2], new_arr[len(new_arr) // 2 + 1:]), axis=None)\n        else:\n            new_arr = np.concatenate((new_arr[0:len(new_arr) // 2], new_arr[len(new_arr) // 2 + 1:]), axis=None)\n    \n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = list(range(n))\n    for i in range(n):\n        if arr[i] < 0:\n            temp[i] = -1 * arr[i]\n    return temp\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_length = len(arr)\n    if arr_length == 0:\n        return arr\n    arr_length_negative = len(arr)\n    if arr_length_negative < n:\n        for i in range(0, n):\n            if arr[i] < 0:\n                arr[i] *= -1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if not str1:\n        return \"\"\n    if char =='':\n        return str1.replace(' ', '0')\n    else:\n        return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\"+char+\" \")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    temp_str=str1.replace(char, '')\n    return temp_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if str1[i] == char:\n            str2 += char\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i]!='':\n            result += str1[i]\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i =='':\n            i = char\n        else:\n            i =''\n        str2 += i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=''\n    str1=str1.replace(' ',char)\n    for char in str1:\n        if char==char.lstrip():\n            str2+=char.replace(' ',char)\n        else:\n            str2+=char\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # your code here\n    return str1.replace(char,' ')\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1) # heapify creates a sorted list and returns it\n    return [heapq.heappop(list1) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) == n:\n        return list1\n    # Condition to check if the number of elements in list is less than the n\n    if len(list1) < n:\n        # sort the list of numbers\n        list1.sort()\n        # add the elements to the list if they are not already in the list\n        for i in range(n):\n            list1.append(list1.pop(0))\n        return list1\n    # Condition to check if the list is empty\n    if len(list1) > n:\n        # sort the list of numbers\n        list1.sort()\n        # add the elements to the list if they are not already in the list\n        for i in range(n):\n            list1.append(list1.pop(0))\n        return list1\n    else:\n        # if list is not empty add to the list\n        return list1 + list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(\"The list is\",list1)\n    # output = sorted(list1,reverse=True)\n    output = heapq.nlargest(n,list1)\n    print(\"The n largest number is\",output)\n    return output\ndef cus_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    output = sorted(list1,reverse=True)\n    print(\"The n smallest number is\",output)\n    return output\ndef larg_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(\"The list is\",list1)\n    output = heapq.nlargest(n,list1)\n    print(\"The n largest number is\",output)\n    return output\ndef cus_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    output = heapq.nsmallest(n,list1)\n    print(\"The n smallest number is\",output)\n    return output\ndef v_list(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the v numbers in the list.\n    '''\n    output = sorted(list1,reverse=True)\n    print(\"The v numbers in the list is\",output)\n    return output\ndef heapsort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    output = sorted(list1,reverse=True)\n    print(\"The n largest number is\",output)\n    heapq.heapify(output)\n    return output\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    final_list = []\n    heap = []\n    final_list.append(list1[0])\n    heapq.heapify(final_list)\n    for i in range(1,n+1):\n        heapq.heappush(final_list,final_list[0]+heapq.heappop(final_list))\n    return final_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list(enumerate(list1))\n    heapq.heapify(heap)\n    newlist=[]\n    for i in heap:\n        if len(newlist)<n:\n            newlist.append(i[1])\n        else:\n            if i[1]<newlist[-1]:\n                newlist.append(i[1])\n            else:\n                newlist.append(i[1])\n    return newlist\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    lst=[]\n    for i in range(n):\n        lst.append(heapq.heappop(heap))\n    return lst\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    heapq.nlargest(n,list1,key=lambda x: x[2])\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) == 0:\n        return []\n    #print(len(list1))\n    #print(list1)\n    heapq.heapify(list1)\n    #print(heapq.heappop(list1))\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    out = []\n    for i in list1:\n        if len(list1) > n:\n            out.append(i)\n            list1.remove(i)\n            if len(list1) == 0:\n                break\n    return out\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    nnum=[]\n    while len(list1)>0:\n        nnum.append(list1[0])\n        list1.remove(list1[0])\n        if len(list1)>0:\n            heapq.heapify(list1)\n    return nnum\ndef main():\n    '''\n    This is the main function that reads in the input file and outputs the number of unique elements,\n    the number of unique values, and the number of unique values per value, and the number of unique values per value per value.\n    '''\n    infile = open(input_file,'r')\n    output = open(output_file,'w')\n    n = int(infile.readline())\n    s = infile.readline()\n    l = infile.readline()\n    e = infile.readline()\n    print(n,s,l,e,sep=\"\\n\")\n    #print(n,s,l,e,sep=\"\\n\")\n    #print(n,s,l,e,sep=\"\\n\")\n    #print(n,s,l,e,sep=\"\\n\")\n    list1 = s.split(\",\")\n    #print(list1)\n    output.write(str(n) + \",\" + str(len(list1)) + \",\" + str(len(list1)) + \",\" + str(len(list1)) + \",\" + str(len(list1)) + \"\\n\")\n    #print(list1)\n    #print(l)\n    #print(e)\n    #print(sep=\"\\n\")\n    #print(n,s,l,e,sep=\"\\n\")\n    for i in range(len(list1)):\n        list2 = list1[i].split(\",\")\n        list2 = list2[0:n]\n        #print(list2)\n        output.write(str(n) + \",\" + str(list2) + \",\" + str(l) + \",\" + str(e) + \",\" + str(sep=\"\\n\") + \"\\n\")\n        #print(list2)\n        #print(l)\n        #print(e)\n        #print(sep=\"\\n\")\n    output.close()\n    infile.close()\n    output.close()\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (4/3) * np.pi * r**3 * np.exp(-r**2 / 2)\n    \n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    cyl_height = h\n    cyl_length = r\n    cyl_area = cyl_height * cyl_length\n    print('Cylinder height:',cyl_height)\n    print('Cylinder length:',cyl_length)\n    print('Cylinder area:',cyl_area)\n    return cyl_area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    #import math as m\n    #cylinder_side = math.pi*r*0.5\n    cylinder_side = r*0.5\n    #cylinder_length = math.pi*r*0.75\n    cylinder_length = r*0.75\n    #cylinder_z_length = cylinder_length/2\n    cylinder_z_length = cylinder_length*0.5\n    cylinder_area = math.pi*cylinder_side*cylinder_length*cylinder_length\n    cylinder_volume = cylinder_area*h\n    cylinder_perimeter = math.pi*(cylinder_side**2)*cylinder_length*cylinder_length\n    cylinder_perimeter = math.sqrt(cylinder_perimeter)\n    cylinder_volume = math.pi*cylinder_side*cylinder_length*cylinder_length\n    cylinder_volume = math.sqrt(cylinder_volume)\n    return cylinder_volume,cylinder_perimeter,cylinder_volume\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*(r*h))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s=2*r*np.cos(h)\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Imports\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as patches\n    import scipy.constants\n    from scipy.interpolate import interp1d\n    from scipy.spatial.transform import Rotation as R\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    ## circumference\n    c = 2*r*h\n    ## volume\n    v = 4/3*h*r\n    ## axial sum\n    a = (4/3)*(2*c - h**2)*(1-np.cos(h))\n    ## lateral sum\n    l = a*(1-np.cos(h))\n    return c,v,a,l\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula is r*h/2\n    # Write a function that returns the lateral surface area of a cylinder\n    # Where r is radius and h is height\n    \n    # Create variables\n    h = h * 2\n    r = r * 2\n    # Exercise\n    # Complete the code below to calculate the lateral surface area of a cylinder\n    # Use the function above to calculate the lateral surface area of a cylinder\n    return (r * h)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = h**2*np.pi*r**2\n    return area\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    area = 6 * l**2\n    volume = 4 * np.pi * l**3\n    return area, volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l*l*l\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    x = float(l)/3\n    print(f'The volume of the cube is: {(x*x)*x*x}')\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print('dealing with cube...')\n    volume = l * l * l * l\n    print(volume)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 1\n    for x in range(l):\n        volume = volume*(l**2)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    assert type(l) == int,'side length must be int'\n    assert l > 0,'side length must be positive'\n    assert l >= 1,'side length must be positive'\n    l = float(l)\n    v = l**3\n    return l*l*l*l\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # if the number is odd, set it to 1. \n    if (n%2) == 0: \n        n = n + 1\n    # if the number is even, set it to 0. \n    else: \n        n = n - 1\n    # return the number as a string and the result.\n    return n, \"Even number\"\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            even_bit_set = even_bit_set + 1\n    return even_bit_set\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n:\n        if n & 0x1 == 0:\n            print(n, \"is even\")\n        n = n & (n-1)\n        print(n, \"is odd\")\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        even_bits = 0\n        for i in range(1, n+1): \n            if i % 2 == 0: \n                even_bits = even_bits | 1\n        return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n <= 0: \n        raise ValueError(\"The number should be a positive integer\") \n    elif n < 10: \n        n = 10\n    else: \n        n = n - 10 \n    while n % 2 == 0: \n        n = n / 2\n    return n \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even = 0\n    for x in str(n):\n        if x == \"0\":\n            even = even + 1\n    return even\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit_set = \"\"\n    if n < 0: \n        return \"Input must be non-negative. \"\n    while (n & 0x1)!= 0: \n        even_bit_set += \"1\"\n        n = n & 0x1\n    return even_bit_set\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0\n    while n > 0:\n        if (n & 0x01) == 0:\n            n = n >> 1\n        else:\n            n = n << 1\n        i += 1\n    return i\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    set_bits = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            set_bits = set_bits + 1\n    return set_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i%2) == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    unique_tuple_set = set()\n    unique_tuple_dict = {}\n    for element in test_list:\n        if element not in unique_tuple_set:\n            unique_tuple_set.add(element)\n            unique_tuple_dict[element] = 1\n        else:\n            unique_tuple_dict[element] += 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tupl in test_list:\n        test_dict[tupl] = test_dict.get(tupl, 0) + 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i[0] in d:\n            d[i[0]] += 1\n        else:\n            d[i[0]] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary\n    dictionary = {}\n    for tup in test_list:\n        if tup[0] in dictionary:\n            dictionary[tup[0]] = dictionary[tup[0]] + 1\n        else:\n            dictionary[tup[0]] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_list = {}\n    for i in test_list:\n        if tuple(i) not in dict_list:\n            dict_list[tuple(i)] = 1\n        else:\n            dict_list[tuple(i)] += 1\n    return dict_list\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = {}\n    for i in test_list:\n        if i[0] in counter.keys():\n            counter[i[0]] += 1\n        else:\n            counter[i[0]] = 1\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in range(len(test_list)):\n        result[tuple(test_list[i])] = test_list[i].count(test_list[i])\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for tuple in test_list:\n        if tuple[0] in dictionary:\n            dictionary[tuple[0]] += 1\n        else:\n            dictionary[tuple[0]] = 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return { tuple: count for tuple, count in Counter(test_list).items() }\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counts = {}\n    for i in test_list:\n        if i[0] not in counts:\n            counts[i[0]] = 1\n        else:\n            counts[i[0]] = counts[i[0]] + 1\n    return counts\n    \ndef check_duplicates(test_list):\n    '''\n    Write a function that takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counts = {}\n    for i in test_list:\n        if i[0] not in counts:\n            counts[i[0]] = 1\n        else:\n            counts[i[0]] = counts[i[0]] + 1\n    return counts\n    \n    \ndef check_contains(test_list):\n    '''\n    Write a function that takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counts = {}\n    for i in test_list:\n        if i[0] not in counts:\n            counts[i[0]] = 1\n        else:\n            counts[i[0]] = counts[i[0]] + 1\n    return counts\n    \ndef check_all_exist(test_list):\n    '''\n    Write a function that takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counts = {}\n    for i in test_list:\n        if i[0] not in counts:\n            counts[i[0]] = 1\n        else:\n            counts[i[0]] = counts[i[0]] + 1\n    return counts\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    pass\n    \ndef number_of_substrings_ex(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    pass\n    \ndef palindrome_pattern(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    # your code here\n    pass\n    \ndef remove_space(str):\n    '''\n    Write a python function to remove spaces from a given string.\n    '''\n    # your code here\n    pass\n    \ndef remove_special_characters(str):\n    '''\n    Write a python function to remove special characters in a given string.\n    '''\n    # your code here\n    pass\n    \ndef reverse_a_string(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    # your code here\n    pass\n    \ndef reverse_a_string_ex(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    # your code here\n    pass\n    \ndef simple_palindrome_permutation(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    # your code here\n    pass\n    \ndef reverse_only_letters(str):\n    '''\n    Write a python function to reverse only letters of a given string.\n    '''\n    # your code here\n    pass\n    \ndef run_tests():\n    '''\n    Test your functions.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    substr_len = []\n    for i in range(len(str) - 1):\n        \n        if str[i]!= str[i + 1]:\n            substr_len.append(i)\n    \n    return len(substr_len)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)-1):\n        for j in range(i,len(str)-1):\n            if str[i]!= str[j]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    substring_length = [len(s) for s in str]\n    for i, val in enumerate(substring_length): \n        if val == 1: \n            n += 1\n    return n\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    str = str.lower()\n    for i in range(0, len(str) - 1):\n        if str[i] == str[i + 1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    sub = 0\n    length = len(str)\n    for i in range(0, length):\n        for j in range(i+1, length):\n            if str[i] == str[j]:\n                sub = sub + 1\n    return sub\n    \ndef words_with_substring(str):\n    '''\n    Write a python function to find all words whose starting substring is a given string.\n    '''\n    words = []\n    for i in range(0, len(str)):\n        if str[i] == str[i+1]:\n            sub = str[i:i+2]\n            if sub not in words:\n                words.append(sub)\n    return words\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = str.lower()\n    n = 0\n    if s == '':\n        n = 0\n    else:\n        for i in range(len(s)):\n            if s[i:i+len(s)] == s:\n                n += 1\n    return n\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    # The for loop goes through each string and adds 1 to the count\n    for i in range(len(str)-1):\n        # If the substring starts with a 0, it is 1\n        if str[i] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    answer = 0\n    for i in range(n+1):\n        for j in range(i, n+1):\n            if j - (i) * m > 0 and j - (i) * m <= m:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # TODO: WRITE YOUR CODE HERE\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(m) * (int(2*m) - 1) + (int(m) - 1) * int(n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (2**n)-1\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m >= 0\n    assert n >= 0\n    assert m <= m\n    assert n <= m\n    assert type(m) == int\n    assert type(n) == int\n    assert type(m) == int\n    assert type(n) == int\n    assert m!= 0\n    assert n!= 0\n    assert type(m + n) == int\n    assert m < n\n    assert (m + n) % 2 == 0\n    return int(math.factorial(math.gcd(m,n)))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0 or n == 0: \n        return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(m,n+1):\n        total += (((2*i) - 1)**2)\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m * (m + 1) // 2 \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    print(list2)\n    print(list1)\n    list1[len(list1)-1] = list2[len(list2)-1]\n    print(list1)\n    print(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2.pop())\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # your code here\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    result = []\n    list1.append(list2[-1])\n    for i in range(len(list2)-1):\n        result.append(list2[i])\n    return result\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    return list1[:-1] + list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > len(list2):\n        for x in range(len(list2)):\n            list1[x] = list2[x]\n    else:\n        for x in range(len(list1)):\n            list1[x] = list2[x]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    newlist = list1.copy()\n    if len(list1) == 0:\n        newlist.append(list2)\n    else:\n        newlist.append(list2[-1])\n    return newlist\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return len(char_dict)\n    \ndef char_frequency(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char in char_dict:\n            count += char_dict[char]\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for letter in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = {}\n    c = 0\n    for i in str1:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    for key, value in result.items():\n        c += value\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0,len(str1)):\n        for j in range(i,len(str1)):\n            if str1[i] == str1[j]:\n                count += 1\n            else:\n                continue\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac=0\n    for char in str1:\n        charac+=1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c_count = 0\n    for i in str1:\n        if i =='':\n            c_count += 1\n        else:\n            break\n    return c_count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for i in str1:\n        total += 1\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # pass\n    # count = 0\n    # for i in str1:\n    #     if i in 'aeiou':\n    #         count += 1\n    # return count\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return(len(str1))\n    \ndef is_palindrome(word):\n    '''\n    A word is a palindrome if it reads the same forwards and backwards as long as it remains a palindrome. \n    For example: Tact Coa becomes Chaco (same as rloso)\n    '''\n    return(word[0] == word[-1])\n    \ndef count_words(str1):\n    '''\n    Write a function to return the number of words in a string.\n    '''\n    return(len(str1.split()))\n    \ndef is_alpha(word):\n    '''\n    A word is either all alphabetic or all alphanumeric.\n    '''\n    return(word[0].isalpha())\n    \ndef is_numeric(word):\n    '''\n    A word is either all alphabetic or all alphanumeric.\n    '''\n    return(word[0].isnumeric())\n    \ndef is_valid_name(name):\n    '''\n    A valid name has all of the following properties:\n    It must be a string of at least 3 letters, at least 2 numbers, and at most 15 letters.\n    It must not consist only of digits.\n    '''\n    return(len(name) >= 3 and len(name) <= 15 and name.isalnum())\n    \ndef is_valid_email(email):\n    '''\n    A valid email must have a domain consisting of letters, numbers, and dot characters. \n    It must end with an @ symbol.\n    '''\n    return(email[-4:] == '@gmail.com')\n    \ndef is_valid_ip(ip):\n    '''\n    A valid ip must have at least one @, then a dot, and then a space separated hostname.\n    '''\n    return(ip.find('.')!= -1) and ip.count('@') == 1 and len(ip.split('.')) == 2\n    \ndef is_valid_site(site):\n    '''\n    A valid site must have a valid domain, a valid email, and a valid ip.\n    '''\n    return(site.endswith('.com') and site.count('.') == 3 and site.count('@') == 1 and len(site.split('.')) == 2)\n    \ndef is_valid_domain(domain):\n    '''\n    A valid domain must have an @, then a dot, and then a space separated hostname.\n    '''\n    return(domain.find('.')!= -1 and domain[-1]!= '.')\n    \ndef is_valid_url(url):\n    '''\n    A valid URL must not have a leading http or https.\n    '''\n    return(not url.startswith('http'))\n    \ndef is_valid_url_name(url, name):\n    '''\n    A valid URL must not have an http or https.\n    '''\n    return(not url.startswith('http') and url.startswith('https'))\n    \ndef is_valid_url_domain(url, domain):\n    '''\n    A valid URL must not have a http or https.\n    '''\n    return(not url.startswith('http') and url.startswith('https') and url.endswith(domain))\n    \ndef is_valid_url_email(url, email):\n    '''\n    A valid URL must not have an @ symbol, then a dot, and then a space separated hostname.\n    '''\n    return(not url.startswith('http') and email.find('@')!= -1)\n    \ndef is_valid_url_ip(url, ip):\n    '''\n    A valid URL must not have a http or https, then a dot, and then a space separated hostname.\n    '''\n    return(not url.startswith('http') and ip.find('.')!= -1 and ip.count('.') == 2)\n    \ndef is_valid_url_domain_email(url, domain, email):\n    '''\n    A valid URL must not have a http or https, then a dot, and then a space separated hostname.\n    '''\n    return(not url.startswith('http') and domain.count('.') == 3 and email.count('@') == 1 and url.endswith(domain))\n    \ndef is_valid_url_domain_ip(url, domain, ip):\n    '''\n    A valid URL must not have a http or https, then a dot, and then a space separated hostname.\n    '''\n    return(not url.startswith('http') and domain.count('.') == 3 and ip.count('.') == 2 and url.endswith(domain))\n    \ndef is_valid_domain_email_ip(domain, email, ip):\n    '''\n    A valid domain must not have a http or https, then a dot, and then a space separated hostname.\n    '''\n    return(not domain.count('.') == 3 and email.count('@') == 1 and ip.count('.') == 2 and url.endswith(domain))\n    \ndef is_valid_domain_domain_email(domain, domain2, email, ip):\n    '''\n    A valid domain must not have a http or https, then a dot, and then a space separated hostname.\n    '''\n    return(not domain.count('.') == 3 and domain2.count('.') == 3 and email.count('@') == 1 and ip.count('.') == 2 and url.endswith(domain))\n    \ndef is_valid_domain_email_ip(domain, domain2, email, ip):\n    '''\n    A valid domain must not have a http or https, then a dot, and then a space separated hostname.\n    '''\n    return(not domain.count('.') == 3 and domain2.count('.') == 3 and email.count('@') == 1 and ip.count('.') == 2 and url.endswith(domain))\n    \ndef is_valid_subdomain(domain, subdomain):\n    '''\n    A valid subdomain must have a valid domain.\n    '''\n    return(not subdomain.count('.') == 3)\n    \ndef is_valid_hostname(hostname):\n    '''\n    A valid hostname must consist only of numbers, alphabetic characters, and special characters.\n    '''\n    return(hostname.isalnum())\n    \ndef is_valid_ip_address(ip_address):\n    '''\n    A valid ip must consist of numbers, alphabetic characters, and special characters.\n    '''\n    return(ip_address.isalnum())\n    \ndef is_valid_domain_with_subdomain(domain, subdomain, subdomain2):\n    '''\n    A valid domain with a subdomain must have a valid domain.\n    '''\n    if is_valid_subdomain(subdomain, subdomain2):\n        return(domain.count('.') == 3 and subdomain.count('.') == 3)\n    else:\n        return(False)\n    \ndef is_valid_domain_without_subdomain(domain, subdomain):\n    '''\n    A valid domain without a subdomain must have a valid domain.\n    '''\n    if not is_valid_subdomain(subdomain, subdomain2):\n        return(False)\n    else:\n        return(domain.count('.') == 3)\n    \ndef is_valid_domain_with_subdomain_without_subdomain(domain, subdomain, subdomain2):\n    '''\n    A valid domain with a subdomain without a subdomain must have a valid domain.\n    '''\n    if is_valid_domain_without_subdomain(subdomain, subdomain2):\n        return(domain.count('.') == 3 and subdomain.count('.') == 3)\n    else:\n        return(False)\n    \ndef is_valid_domain_without_subdomain2(domain, subdomain):\n    '''\n    A valid domain without a subdomain must have a valid domain.\n    '''\n    if not is_valid_subdomain(subdomain, subdomain2):\n        return(False)\n    else:\n        return(domain.count('.') == 3)\n    \ndef is_valid_domain_with_subdomain2(domain, subdomain, subdomain2):\n    '''\n    A valid domain with a subdomain and a subdomain2 must have a valid domain.\n    '"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    if N==0 or N==1:\n        return N\n    elif N==2 or N==3:\n        return 4\n    else:\n        a = 1\n        b = int(math.sqrt(N))\n        while a<b:\n            m = a+b//2\n            c = m//2\n            if N>m**2:\n                a = m\n            else:\n                b = m\n        return a+b\n        \n    \n    \ndef check_for_Perfect_Square(N):\n    '''\n    Return the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    if N==0 or N==1:\n        return N\n    elif N==2 or N==3:\n        return 4\n    else:\n        a = 1\n        b = int(math.sqrt(N))\n        while a<=b:\n            m = a+b//2\n            c = m//2\n            if N>m**2:\n                a = m\n            else:\n                b = m\n        return a+b\n        \ndef is_Perfect_Square(N):\n    '''\n    Return a boolean value to indicate whether a given number is a perfect square or not.\n    '''\n    N = int(N)\n    if N==0 or N==1:\n        return N\n    elif N==2 or N==3:\n        return True\n    else:\n        a = 1\n        b = int(math.sqrt(N))\n        while a<=b:\n            m = a+b//2\n            c = m//2\n            if N>m**2:\n                return False\n            else:\n                a = m\n        return False\n        \ndef is_Perfect_Square_2(N):\n    '''\n    Return a boolean value to indicate whether a given number is a perfect square or not.\n    '''\n    N = int(N)\n    if N==0 or N==1:\n        return N\n    elif N==2 or N==3:\n        return True\n    else:\n        a = 1\n        b = int(math.sqrt(N))\n        while a<=b:\n            m = a+b//2\n            c = m//2\n            if N>m**2:\n                return False\n            else:\n                a = m\n        return False\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    if N == 1:\n        return 2\n    if N == 2:\n        return 3\n    if N % 2 == 0:\n        mid = N // 2\n        return (next_Perfect_Square(mid) + next_Perfect_Square(mid - 1)) * 1.5\n    else:\n        if N % 2 == 1:\n            return (next_Perfect_Square(N - 1) + next_Perfect_Square(N - 2)) * 1.5\n        else:\n            mid = N // 2\n            return (next_Perfect_Square(mid) + next_Perfect_Square(mid - 1)) * 1.5\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    a = N\n    b = math.sqrt(N)\n    c = a * a\n    d = b * b\n    e = c * c\n    delta = 0\n    if (a < b) and (a < c):\n        delta = b * d + a * e\n    elif (b < c) and (b < d):\n        delta = c * d + b * e\n    elif (c < d) and (c < e):\n        delta = d * d + c * e\n    else:\n        delta = e * e\n    return delta\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<=1:\n        return None\n    if N%2==0:\n        mid = N/2\n        if N>mid:\n            print(mid,\"is the mid\")\n            return next_Perfect_Square(mid)\n        else:\n            print(mid,\"is the mid\")\n            return next_Perfect_Square(mid+1)\n    else:\n        print(N,\"is the perfect square\")\n        return next_Perfect_Square(N-1)"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # use while loop to get the next perfect square\n    s = int(math.sqrt(N))\n    if N % s == 0:\n        return next_Perfect_Square(N//s)\n    else:\n        return next_Perfect_Square(N//s + 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # n is a perfect square of which we are looking for \n    if N==0 or N==1:\n        return N\n    else:\n        return (next_Perfect_Square(N-1) + next_Perfect_Square(N-2)) \n    # if we are going to find the next perfect square greater than a given number, then we have to return the next perfect square greater than a given number \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    i = 1\n    while i * i <= N:\n        j = 2\n        while j * j <= N:\n            if (N - j * j) % i == 0:\n                break\n            j += 1\n        if j * j > N:\n            break\n        i += 1\n    \n    return i\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0 or N == 1:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 3\n    \n    return next_Perfect_Square(N//2) + N%2"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1: \n        return N\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    start = arr.index(max(arr))\n    end = arr.index(min(arr))\n    sum = 0\n    for i in range(start, end + 1):\n        if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if array is empty return 0\n    if len(arr)==0:\n        return 0\n    # if array is not a valid array return 0\n    if not isinstance(arr,list):\n        return 0\n    # if array is only one item return 0\n    if len(arr)==1:\n        return arr[0]\n    \n    # if array is only two elements return 0\n    if len(arr)==2:\n        return max(arr[0],arr[1])\n    \n    # recursively call max_sum to get the max of the remaining elements\n    res=arr[0]\n    for i in range(1,len(arr)):\n        res=max(res,arr[i]+max_sum(arr[i:]))\n    return res\n    "
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    \n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2: \n        return 0\n    max_sum = 0\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            max_sum = max(max_sum, arr[i] + arr[i-1] + arr[i+1])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Your code here\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i-1] > arr[i]:\n            max_sum += arr[i]\n        else:\n            max_sum -= arr[i]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    sum_arr = [0 for i in range(n)]\n    max_sum = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] < arr[j] and sum_arr[j] <= sum_arr[i]:\n                sum_arr[i] = sum_arr[j] + arr[i]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    i, j = 0, len(arr) - 1\n    answer = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def findMaxSubsequence(arr, start, end):\n        if start > end:\n            return 0\n        elif start == end:\n            return arr[start]\n        else:\n            if arr[start] <= arr[end]:\n                return findMaxSubsequence(arr, start + 1, end)\n            else:\n                return findMaxSubsequence(arr, start, end - 1) + arr[end]\n        \n    return findMaxSubsequence(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # The recurrence relation\n    # base case is when the array is at the end\n    # for every element, the index of the leftmost element\n    # is the index of the maximum sum\n    # for the next element, the index of the leftmost element\n    # is the index of the maximum sum\n    # the sum is the leftmost element plus the maximum sum\n    # and so on\n    \n    # for every element in the array, we check if we can increase the leftmost element by the maximum sum\n    # since we are only checking for elements that are decreasing and increasing\n    # if yes, we update the max sum\n    # if no, we return the sum of the array\n    \n    # if we are not able to increase the leftmost element, we return the maximum sum,\n    # otherwise, we return the sum of the array\n    \n    \n    # You will need to create a recursive implementation of max_sum\n    \n    # you can create an array where elements are the indices of the elements\n    # you will need to find the maximum sum for every element\n    # here is the max subarray of size N-1\n    \n    # you need to use the base case to make sure we are at the end\n    \n    # for each element in the array,\n    # update the index of the leftmost element,\n    # and sum the elements up to the leftmost element\n    \n    \n    # we can find the max subarray of size N\n    # since we are not at the end of the array\n    # we can add one to the sum, because we can add any number,\n    # so we can add a number as the maximum sum\n    \n    # for each element in the array,\n    # update the index of the leftmost element,\n    # and add the value of the element to the max subarray\n    \n    \n    # we can also solve this using a stack and get the maximum sum\n    \n    \n    # return the maximum sum\n    \n    \n    def max_sum_recursive(arr, i, j, max_sum):\n        # base case\n        if i == j:\n            return arr[i]\n        \n        # otherwise, we can calculate the value of the element\n        # at the leftmost index\n        # and add the value of the element to the max subarray\n        \n        \n        # we can calculate the value of the element at the rightmost index\n        # and add the value of the element to the max subarray\n        max_sum = max(max_sum, arr[i] + arr[j])\n        \n        # we can check if we can increase the leftmost element by the maximum sum\n        # since we are only checking for elements that are decreasing and increasing\n        if i < j and arr[i] <= arr[j]:\n            max_sum = max(max_sum, arr[i] + arr[j])\n            \n        # now we can calculate the value of the element at the leftmost index\n        # and add the value of the element to the max subarray\n        max_sum = max(max_sum, arr[i] + arr[j])\n        \n        return max_sum\n    \n    # return the maximum sum\n    return max_sum_recursive(arr, 0, len(arr) - 1, 0)\n    \narr = [1, 2, 3, 5, 7, 8, 7, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15]\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if (number < 0):\n        print(\"Cannot compute square roots of negative numbers\")\n        return\n    if (number == 0):\n        return 1\n    if (number < 2):\n        print(\"Cannot compute square roots of negative numbers\")\n        return\n    n = 2\n    x = 3\n    while (n <= number):\n        if (number % n == 0):\n            print(n, \" is the square root of\", number, \"and\", n * x, \"is the nth term.\")\n            break\n        n += 1\n    else:\n        print(number, \"is the square root of\", number, \"and\", n * x, \"is the nth term.\")\n        return\n    x = 2\n    while (number >= x):\n        if (number % x == 0):\n            print(x, \" is the square root of\", number, \"and\", n * x, \"is the nth term.\")\n            break\n        x += 1\n    else:\n        print(number, \"is the square root of\", number, \"and\", n * x, \"is the nth term.\")\n        return\n    return\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square = number ** 0.5\n    return square\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # base case\n    if number == 0:\n        return 0\n    # recurrence relation\n    else:\n        sqrt = babylonian(number, number)\n        return sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0.0\n    for i in range(1, number):\n        square_root += (number ** 2 - i) ** 2\n    square_root = (math.sqrt(square_root))\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    print(\"\\n\", \"================== square roots ============================\")\n    if number > 0:\n        print(\"sqrt(\",number,\") = \",\"%.2f\"%(1/sqrt(number)),\"\\n\")\n        babylonian_squareroot(number=number/2)\n    elif number < 0:\n        print(\"sqrt(\",number,\") = \",\"%.2f\"%(1/sqrt(number)))\n        babylonian_squareroot(-number)\n    else:\n        print(\"sqrt(\",number,\") = \",\"%.2f\"%(1/sqrt(number)))\n        print(\"No error: \",\"sqrt(\",number,\") = \",\"%.2f\"%(1/sqrt(number)))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    while True:\n        print('babylonian squareroot')\n        num = input('what number do you want to compute?')\n        if num.isdigit():\n            if int(num) > 0:\n                num = int(num)\n                if num <= 0:\n                    print('number must be positive')\n                    num = input('what number do you want to compute?')\n                else:\n                    break\n            else:\n                print('number must be a positive integer')\n                num = input('what number do you want to compute?')\n        else:\n            print('number must be a positive integer')\n            num = input('what number do you want to compute?')\n    \n    squareroot = int(num)**0.5\n    print(squareroot)\n    \n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = 1\n    while result < number:\n        if number % result == 0:\n            return result\n        result += 2\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def sqrt(number):\n        if number < 0:\n            raise Exception(f'Input {number} is negative')\n        else:\n            squareRoot = 0\n            while number > 0:\n                result = number % 10\n                squareRoot += (result ** 2)\n                number = number // 10\n            return squareRoot\n    return sqrt(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number > 0:\n        num = number\n        for i in range(1, num + 1):\n            if (num % i) == 0:\n                return num\n    else:\n        num = -number\n        for i in range(1, num + 1):\n            if (num % i) == 0:\n                return num\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    try:\n        return round(number**0.5)\n    except:\n        print(\"Number can't be divided by zero.\")\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = []\n    \n    def isPal(s):\n        n = len(s)\n        d = {}\n        for i in range(n):\n            d[s[i]] = i\n            \n        for i in range(n-1):\n            j = i\n            while j < n and s[i] == s[j]:\n                j += 1\n            lps.append(j - i - 1)\n            \n    def longestPalSubstr(s):\n        n = len(s)\n        lps = []\n        \n        def checkPal(s,i):\n            if i < 0 or s[i] == s[i-1]:\n                return False\n            \n            while i < n and s[i] == s[i-1]:\n                i -= 1\n            \n            return (i >= 0) and (lps[i] + 1 >= lps[i-1])\n        \n        for i in range(n):\n            if not checkPal(s,i):\n                continue\n            \n            if i == 0:\n                lps.append(0)\n            \n            if i == n - 1:\n                lps.append(n - 1)\n                \n            if s[i]!= s[i-1]:\n                checkPal(s,i)\n                lps[lps.index(max(lps[i],lps[i-1]))] = max(lps[i-1],lps[i])\n                \n        return lps[-1]\n        \n    \n    \n    return longestPalSubstr(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Your code here\n    if (str == None or str == '') : return None\n    pal = []\n    for i in range(len(str)):\n        pal.append(str[i:i+2].replace(str[i], str[i]))\n    i = 0\n    max_len = 1\n    while i < len(pal):\n        if pal[i] == pal[i+1]:\n            i += 1\n        else:\n            if len(pal[i]) > len(pal[i+1]):\n                pal[i], pal[i+1] = pal[i+1], pal[i]\n                max_len = max(len(pal), max_len)\n            else:\n                i += 2\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Declare variables\n    lps = [[0]*(len(str)+1) for _ in range(len(str)+1)]\n    i = 1\n    j = 0\n    for k in range(1, len(str)+1):\n        lps[i][j] = 1\n        if str[i-1] == str[j]:\n            lps[i][j] = 2\n            i += 1\n        else:\n            j = k-1\n    lps[i][j] = 1\n    for k in range(2, len(lps)+1):\n        for l in range(1, len(lps)+1):\n            if lps[i][l] == lps[i][j] == 2:\n                if (l > k):\n                    lps[i][j] = 2\n                else:\n                    lps[i][j] = 1\n    print(lps)\n    return len(str)+1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1:\n        return 1\n    else:\n        return 1 + max(lps(str[1:]), lps(str[:-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # return max(lps(s[i:j]))\n    # return lps(s[i:j]) if s[i:j] == s[j:i] else 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def LPS(str): \n        '''\n        Write a function that returns the length of the longest palindromic subsequence in the given string.\n        '''\n        lps = [0] * (len(str)+1)\n        lps[0] = 1\n        for i in range(1, len(str)+1):\n            lps[i] = 0\n            for j in range(i):\n                if str[j]!= str[i-1]:\n                    lps[i] = max(lps[j] + 1, lps[i])\n        return lps[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # For each character, keep track of previous one, if any, else set to None\n    index = 0\n    prev = 0\n    \n    # Loop through the string\n    for char in str:\n        # If character is not a valid palindrome, increment index\n        if char not in ('a','e','i','o','u'):\n            index += 1\n            \n            # If character is the last one, set previous to the current one\n            if index == len(str):\n                prev = index\n        # If character is a palindrome, return the length of the subsequence\n        else:\n            index += 1\n            \n            # Set current to previous\n            prev = index\n    \n    # Return length of longest palindromic subsequence\n    return len(str) - prev"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_recur(st, fr): \n        if fr < len(st) and st[fr] == st[fr-1]:\n            return lps_recur(st, fr-1)\n        else:\n            ans = max(ans, len(st) - fr)\n            return ans\n    ans = 0\n    return lps_recur(str, 0)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return 0\n    elif len(str) == 2:\n        return 1 if str[0] == str[1] else 0\n    else:\n        lps = lps(str[1:])\n        for i in range(len(str) - 1): \n            if str[i] == str[i + 1]: \n                lps += 1\n        return lps \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    num_map = {}\n    max_len = 0\n    def rec_palindrom(s):\n        nonlocal max_len\n        if s in num_map:\n            return num_map[s]\n        if not s:\n            return 0\n        num = rec_palindrom(s[1:]) + 1\n        if num > max_len:\n            max_len = num\n            num_map[s] = num\n        return num\n    rec_palindrom(str)\n    return max_len\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for x in range(n,0,-1):\n        total += x\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1.0 + (n - 1.0) * 0.5)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 1\n    for i in range(n-1):\n        s = s + 2*i*s\n    return s\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n<=0:\n        return n\n    else:\n        return n+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = (1/n) * n * (n + 1) * (1 - 1/n)\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    #Determine the sum of 1/n\n    sum_1 = 0\n    for i in range(1,n+1):\n        sum_1 += 1/i\n    return sum_1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 1\n    for i in range(1, n+1):\n        s = s + i*(i+1)/2\n    return s\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def harmonic_sum(n):\n        return int(n) + int(n - 1)\n    \n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s = s + i * i\n    return s\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)>len(array_nums2):\n        return(array_nums1)\n    elif len(array_nums2)>len(array_nums1):\n        return(array_nums2)\n    \n    result = []\n    for i in range(0,len(array_nums1)):\n        for j in range(0,len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                result.append(array_nums1[i])\n    return(result)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict_nums1 = {}\n    dict_nums2 = {}\n    for num in array_nums1:\n        if num in dict_nums1.keys():\n            dict_nums1[num] += 1\n        else:\n            dict_nums1[num] = 1\n    for num in array_nums2:\n        if num in dict_nums2.keys():\n            dict_nums2[num] += 1\n        else:\n            dict_nums2[num] = 1\n    if len(dict_nums1) == 0 or len(dict_nums2) == 0:\n        return []\n    for key,value in dict_nums1.items():\n        if key in dict_nums2.keys():\n            if value >= dict_nums2[key]:\n                return [key]\n    return []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    output=[]\n    for i in array_nums1:\n        for j in array_nums2:\n            if i==j:\n                output.append(i)\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_index=[]\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i]==array_nums2[j]:\n                intersection_index.append(i)\n    return intersection_index\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 and array_nums2:\n        \n        intersection_list = []\n        for i in range(len(array_nums1)):\n            if array_nums1[i] in array_nums2:\n                intersection_list.append(array_nums1[i])\n                \n        return intersection_list\n    else:\n        return None\n        \n    \n    "
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)==0:\n        return []\n    if len(array_nums2)==0:\n        return []\n    if len(array_nums1)>len(array_nums2):\n        return_list=array_nums2\n    else:\n        return_list=array_nums1\n    intersection_index=[]\n    for index in range(0,len(return_list)):\n        if return_list[index] in array_nums2:\n            intersection_index.append(return_list[index])\n    return intersection_index\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == len(array_nums2):\n        count = 0\n        for num in array_nums1:\n            if num in array_nums2:\n                count += 1\n        return count\n    else:\n        return \"Arrays are not of equal size\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                intersection.append(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Check if all the numbers in the array are in the list\n    if not array_nums1: return []\n    if not array_nums2: return []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect_set = set(array_nums1).intersection(set(array_nums2))\n    return list(intersect_set)\n    # or\n    # return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if x in tup:\n        return tup.count(x)\n    else:\n        return 0\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return sum(1 for i in tup if i == x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = tup + (x,)\n    counts = 0\n    for item in tup:\n        counts = counts + 1\n    return counts\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count = count + 1\n    return count\n        \ndef count_Y(tup, y):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == y:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = list(tup)\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element = [element]\n    list.sort()\n    if len(list)>1:\n        for i in range(len(list)-1):\n            index = list[i]\n            if index!=i:\n                if list[i]==list[i+1]:\n                    element.insert(0,list[i])\n                else:\n                    element.insert(0,list[i])\n                    element.append(list[i+1])\n    return element\n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    else:\n        for i in range(len(list)):\n            if list[i] == element:\n                return insert_element(list,element)\n    return list.insert(0,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for item in list:\n        newlist.append(item)\n    \n    newlist.insert(0,element)\n    return newlist\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist=[]\n    for i in range(len(list)):\n        newlist.append(list[i])\n        newlist.append(element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list[i] = list[i] + element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element not in list:\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in list:\n        if i==element:\n            new_list.append(i)\n            continue\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for x in range(len(list)):\n        new_list.append(list[x])\n    new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    new_list = []\n    for index, element in enumerate(list):\n        new_list.append(element)\n        new_list.insert(index, element)\n    return new_list\n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for e in list:\n        if e < element:\n            result.append(e)\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    num_1 = numbers[0]\n    num_2 = numbers[1]\n    den = num_2 + num_1*1j\n    polar_coordinates = complex(num_2/den)\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    i = 0\n    while i < len(numbers):\n        # Add all numbers to a new variable\n        numbers[i] = [cmath.polar(cmath.rect(numbers[i][0],numbers[i][1]))]\n        i = i + 1\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # List of complex numbers\n    complex_list = []\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for i in range(len(numbers)):\n        result.append((numbers[i]*cmath.pi)/2)\n    return result\ndef base_conversion(base_num, base):\n    '''\n    Write a python function to convert a number to a base.\n    '''\n    convert = {}\n    for i in range(base):\n        convert[base_num - 1 - i] = base_num - 1 - i\n    return convert\ndef num_to_base(num, base):\n    '''\n    Write a python function to convert a number to a base.\n    '''\n    convert = base_conversion(base, base)\n    if num < 0:\n        num = -1 - num\n        convert = base_conversion(-base, base)\n    return num, convert\ndef base_to_num(convert, base):\n    '''\n    Write a python function to convert a base to a number.\n    '''\n    num = 0\n    for i in range(len(convert)):\n        num = num*convert[i] + i\n    return num\ndef power_by_2(base):\n    '''\n    Write a python function to return the power of a number as a base.\n    '''\n    power = 1\n    for i in range(len(base)):\n        power = power*base[i]\n    return power\ndef power_by_10(base):\n    '''\n    Write a python function to return the power of a number as a base.\n    '''\n    power = 1\n    for i in range(len(base)):\n        power = power*base[i]**2\n    return power\ndef inverse(x,y):\n    '''\n    Write a python function to compute the inverse of a number.\n    '''\n    inv = 1/(x*y)\n    return inv\ndef sqrt(num):\n    '''\n    Write a python function to return the square root of a number.\n    '''\n    result = 1\n    for i in range(len(num)):\n        result = result*(num[i]**2)\n    return result\ndef exponent(exp):\n    '''\n    Write a python function to compute the exponential of a number.\n    '''\n    result = 1\n    for i in range(len(exp)):\n        result = result*(exp[i]**2)\n    return result\ndef log(num, base):\n    '''\n    Write a python function to compute the log of a number.\n    '''\n    result = 1\n    for i in range(len(base)):\n        result = result*base[i]**num\n    return result\ndef sin(num, base):\n    '''\n    Write a python function to compute the sin of a number.\n    '''\n    result = 1\n    for i in range(len(base)):\n        result = result*base[i]**(num/2)\n    return result\ndef cos(num, base):\n    '''\n    Write a python function to compute the cos of a number.\n    '''\n    result = 1\n    for i in range(len(base)):\n        result = result*base[i]**(num/2)\n    return result\ndef tan(num, base):\n    '''\n    Write a python function to compute the tan of a number.\n    '''\n    result = 1\n    for i in range(len(base)):\n        result = result*base[i]**(num/2)\n    return result\ndef log_base_2(num, base):\n    '''\n    Write a python function to compute the log of a number in base 2.\n    '''\n    result = 1\n    for i in range(len(base)):\n        result = result*base[i]**num\n    return result\ndef exp_base_2(num, base):\n    '''\n    Write a python function to compute the exponential of a number in base 2.\n    '''\n    result = 1\n    for i in range(len(base)):\n        result = result*base[i]**num\n    return result\ndef factorial(num):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    result = 1\n    for i in range(1, num+1):\n        result = result*i\n    return result\ndef factorial_base_2(num, base):\n    '''\n    Write a python function to compute the factorial of a number in base 2.\n    '''\n    result = 1\n    for i in range(num):\n        result = result*base[i]**num\n    return result\ndef log_base_10(num, base):\n    '''\n    Write a python function to compute the log of a number in base 10.\n    '''\n    result = 1\n    for i in range(1, num+1):\n        result = result*base[i]**num\n    return result\ndef factorial_base_10(num, base):\n    '''\n    Write a python function to compute the factorial of a number in base 10.\n    '''\n    result = 1\n    for i in range(num):\n        result = result*base[i]**num\n    return result\ndef log_base_16(num, base):\n    '''\n    Write a python function to compute the log of a number in base 16.\n    '''\n    result = 1\n    for i in range(1, num+1):\n        result = result*base[i]**num\n    return result\ndef factorial_base_16(num, base):\n    '''\n    Write a python function to compute the factorial of a number in base 16.\n    '''\n    result = 1\n    for i in range(num):\n        result = result*base[i]**num\n    return result\ndef add(a,b):\n    '''\n    Write a python function to return the sum of a and b.\n    '''\n    sum = a+b\n    return sum\ndef subtract(a,b):\n    '''\n    Write a python function to return the difference of a and b.\n    '''\n    diff = a-b\n    return diff\ndef multiply(a,b):\n    '''\n    Write a python function to return the product of a and b.\n    '''\n    product = a*b\n    return product\ndef divide(a,b):\n    '''\n    Write a python function to return the quotient of a and b.\n    '''\n    quotient = a/b\n    return quotient\ndef inverse_mod(a,mod):\n    '''\n    Write a python function to compute the inverse of a number.\n    '''\n    num = inverse(a,mod)\n    return num\ndef logarithm(a,b,mod):\n    '''\n    Write a python function to return the logarithm of a number.\n    '''\n    num = log(a,mod)\n    num = log(num,mod)\n    num = log(b,mod)\n    num = log(num,mod)\n    return num\ndef log_base_8(num, base):\n    '''\n    Write a python function to compute the log of a number in base 8.\n    '''\n    result = 1\n    for i in range(1, num+1):\n        result = result*base[i]**num\n    return result\ndef factor(num):\n    '''\n    Write a python function to return the factor of a number.\n    '''\n    result = 1\n    for i in range(len(num)):\n        result = result*num[i]**i\n    return result\ndef exponent_base_8(num, base):\n    '''\n    Write a python function to compute the exponential of a number in base 8.\n    '''\n    result = 1\n    for i in range(len(base)):\n        result = result*base[i]**num\n    return result\ndef add_base_8(a,b,mod):\n    '''\n    Write a python function to add two numbers in base 8.\n    '''\n    result = a+b\n    return result\ndef mul_base_8(a,b,mod):\n    '''\n    Write a python function to multiply two numbers in base 8.\n    '''\n    result = a*b\n    return result\ndef divide_base_8(a,b,mod):\n    '''\n    Write a python function to divide two numbers in base "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if len(numbers[i].imag) > 0:\n            raise Exception('imaginary numbers not allowed')\n        elif len(numbers[i].real) > 0:\n            raise Exception('real numbers not allowed')\n        else:\n            numbers[i] = complex(numbers[i].real, numbers[i].imag)\n            #print numbers[i], n\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = cmath.rect(numbers[i], 'D')\n    return numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if (numbers.imag == 0):\n        x = cmath.phase(numbers.real)\n        y = cmath.phase(numbers.imag)\n        return (x,y)\n    else:\n        p = cmath.polar(numbers.real)\n        q = cmath.polar(numbers.imag)\n        return (p[0], q[0], p[1], q[1])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    l = len(numbers)\n    x = 0\n    y = 0\n    #y = 0\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radians = cmath.pi/180.0\n    result = list()\n    for i in range(len(numbers)):\n        result.append(list())\n        result[i].append(round(numbers[i].real*radians,3))\n        result[i].append(round(numbers[i].imag*radians,3))\n    return result\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = numbers.real\n    y = numbers.imag\n    return x, y\n    \ndef convert_xyz(x, y, z):    \n    '''\n    Write a python function to convert polar coordinates to real numbers.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    if(z == 0):\n        z = 1\n    return x, y, z\n    \ndef check_imag(x, y, z):\n    '''\n    Write a python function to check whether x is imaginary or not.\n    '''\n    if(y!= 0):\n        return True\n    else:\n        return False\n        \ndef convert_xyz_to_real(x, y, z):\n    '''\n    Write a python function to convert polar coordinates to real numbers.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    return x, y, z\n    \ndef convert_real_to_xyz(x, y, z):\n    '''\n    Write a python function to convert real numbers to polar coordinates.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    return x, y, z\n    \ndef convert_xyz_to_real_circles(x, y, z):\n    '''\n    Write a python function to convert polar coordinates to real numbers.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    x_circle = cmath.rect(x, 2)\n    y_circle = cmath.rect(y, 2)\n    z_circle = cmath.rect(z, 2)\n    x_circle_real = convert_xyz_to_real(x_circle.real, y_circle.real, z_circle.real)\n    x_circle_imag = convert_xyz_to_real(x_circle.imag, y_circle.imag, z_circle.imag)\n    return x_circle_real, x_circle_imag, z_circle_real, z_circle_imag\n    \ndef is_real(x, y, z):\n    '''\n    Write a python function to check whether x is real or not.\n    '''\n    if(check_imag(x, y, z)):\n        return True\n    else:\n        return False\n        \ndef find_z_angle(x, y, z, y_angle, x_angle):\n    '''\n    Write a python function to find the z-angle of a circle.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    y_angle = round(y_angle, 3)\n    x_angle = round(x_angle, 3)\n    y_angle = round(y_angle, 3)\n    z_angle = round(z_angle, 3)\n    if(x_angle == y_angle):\n        z_angle = round(math.atan(z/y) - math.atan(z/x), 3)\n    else:\n        z_angle = round(math.atan(z/y) - math.atan(z/x), 3)\n    return z_angle\n    \ndef rotate_spherical_to_cylindrical(x, y, z):\n    '''\n    Write a python function to rotate a spherical object in a cylindrical plane.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    x_angle = round(cmath.phase(x), 3)\n    y_angle = round(cmath.phase(y), 3)\n    z_angle = round(cmath.phase(z), 3)\n    if(x_angle == y_angle == z_angle):\n        return False\n    else:\n        return True\n    \ndef calc_spherical_to_cylindrical(x, y, z):\n    '''\n    Write a python function to calcuate spherical object in a cylindrical plane.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    y_angle = round(cmath.phase(y), 3)\n    z_angle = round(cmath.phase(z), 3)\n    if(y_angle == z_angle):\n        return False\n    else:\n        return True\n    \ndef calc_cylindrical_to_spherical(x, y, z):\n    '''\n    Write a python function to calcuate cylindrical object in a spherical plane.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    x_angle = round(cmath.phase(x), 3)\n    y_angle = round(cmath.phase(y), 3)\n    z_angle = round(cmath.phase(z), 3)\n    if(x_angle == y_angle == z_angle):\n        return False\n    else:\n        return True\n    \ndef convert_cylindrical_to_spherical(x, y, z):\n    '''\n    Write a python function to convert cylindrical coordinates to spherical coordinates.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    y_angle = round(cmath.phase(y), 3)\n    x_angle = round(cmath.phase(x), 3)\n    if(y_angle == x_angle == z_angle):\n        return False\n    else:\n        return True\n    \ndef calc_spherical_to_cylindrical_circles(x, y, z):\n    '''\n    Write a python function to calcuate spherical object in a cylindrical plane.\n    '''\n    x = round(x, 3)\n    y = round(y, 3)\n    z = round(z, 3)\n    x_angle = round(cmath.phase(x), 3)\n    y_angle = round(cmath.phase(y), 3)\n    z_angle = round(cmath.phase(z), 3)\n    x_angle_real = convert_real_to_xyz(x_angle, y_angle, z_angle)\n    y_angle_real = convert_real_to_xyz(y_angle, x_angle, z_angle)\n    z_angle_real = convert_real_to_xyz(z_angle, y_angle, x_angle)\n    x_angle_imag = convert_imag_to_xyz(x_angle, y_angle, z_angle)\n    y_angle_imag = convert_imag_to_xyz(y_angle, x_angle, z_angle)\n    z_angle_imag = convert_imag_to_xyz(z_angle, y_angle, x_angle)\n    x_angle_circles = convert_real_to_xyz_circles(x_angle_real, x_angle_imag, x_angle_real)\n    y_angle_circles = convert_real_to_xyz_circles(y_angle_real, y_angle_imag, y_angle_real)\n    z_angle_circles = convert_real_to_xyz_circles(z_angle_real, z_angle_imag, z_angle_real)\n    return x_angle_circles, y_angle_circles, z_angle_circles\n    \ndef convert_real_to_xyz_circles(x_circles, y_circles, z_circles):\n    '''\n    Write a python function to convert real numbers to polar coordinates.\n    '''\n    x_circles = round(x_circles, 3)\n    y_circles = round(y_circles, 3)\n    z_circles = round(z_circles, 3)\n    x_circles = convert_real_to_xyz(x_circles, y_circles, z_circles)\n    return x_circles\n    \ndef convert_x"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c = 0\n    for i in list1:\n        if type(i) == int:\n            c += 1\n    return c\n        \n    \n    \n    \n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n    "
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) is int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if type(item) is int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # your code here\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Write your code here\n    return len(list1)\n    \ndef list_division(list1, list2):\n    '''\n    This function takes two lists as input and outputs the smallest possible result.\n    '''\n    # Write your code here\n    return min(count_integer(list1), count_integer(list2))\n    \nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('list1 = [1, 2, 3, 0], list2 = [4, 3, 2, 1]')\n    print('Exception :')\n    print('3')\n    print('Output :')\n    print(list_division([1, 2, 3, 0], [4, 3, 2, 1]))\n    \n    print('Example 2:')\n    print('Input : ')\n    print('list1 = [1, 2, 3, 0], list2 = [4, 3, 2, 1]')\n    print('Exception :')\n    print('1')\n    print('Output :')\n    print(list_division([1, 2, 3, 0], [4, 3, 2, 1]))\n    \n    print('Example 3:')\n    print('Input : ')\n    print('list1 = [0], list2 = [1]')\n    print('Exception :')\n    print('2')\n    print('Output :')\n    print(list_division([0], [1]))\n    \n    print('Example 4:')\n    print('Input : ')\n    print('list1 = [1, 2, 3, 4], list2 = [3, 4, 5, 6]')\n    print('Exception :')\n    print('5')\n    print('Output :')\n    print(list_division([1, 2, 3, 4], [3, 4, 5, 6]))\n    \n    print('Example 5:')\n    print('Input : ')\n    print('list1 = [0, 0], list2 = [1, 2]')\n    print('Exception :')\n    print('1')\n    print('Output :')\n    print(list_division([0, 0], [1, 2])"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    total = 0\n    for i in list1:\n        if type(i) == int:\n            total += 1\n    return total\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    colors = list(itertools.combinations(l, n))\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    print(l)\n    result = []\n    combinations = combinations_with_replacement(l,n)\n    print(combinations)\n    for element in combinations:\n        result.append(tuple(element))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            combos.append((l[i], l[j]))\n    return combos\n    \n    \n    \n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(tuple(elem) for elem in combinations_with_replacement(l, n))]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    if n == 0:\n        return comb_list\n    for i in range(l[0]):\n        comb_list.append((l[0],i))\n        for j in range(l[1]):\n            comb_list.append((i,j))\n    comb_list.append((l[1],l[0]))\n    return comb_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = [i for i in l]\n    for i in range(1, n):\n        yield tuple(l)\n        l[0] += 1\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    assert(n >= 1), 'Length of the input must be at least 1.'\n    assert(len(l) == n), 'List must have {} elements.'.format(n)\n    list_ = []\n    for i in range(n):\n        for e in combinations_with_replacement(l, i+1):\n            list_.append(tuple(e))\n    return list_\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #use a recursion function\n    count = 0\n    #def isPrime(num):\n    #    if num > 1:\n    #        for i in range(2, num):\n    #            if (num % i) == 0:\n    #                return False\n    #        return True\n    #    else:\n    #        return False\n    #def prime_numbers(n):\n    #    for i in range(2, n):\n    #        if isPrime(i):\n    #            count += 1\n    #    return count\n    \n    #def helper(n):\n    #    if n <= 1:\n    #        return 0\n    #    elif n % 2 == 0:\n    #        return 2\n    #    else:\n    #        return helper(3 * n + 1)\n    \n    #return helper(n) - helper(n) // 2\n    \n    #return sum(filter(lambda x: x % 2, range(2, n)))\n    return sum(filter(lambda x: x % 2 == 0, range(2, n)))\n    #return sum(filter(lambda x: x % 2 == 0, range(2, n))) - sum(map(lambda x: x % 2 == 0, range(2, n)))\n    #return sum(filter(lambda x: x % 2 == 0, range(2, n))) - sum(map(lambda x: x % 2 == 0, range(2, n))) - sum(map(lambda x: x % 2 == 0, range(2, n)))\n    #return sum(map(lambda x: x % 2 == 0, range(2, n))) - sum(filter(lambda x: x % 2 == 0, range(2, n)))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    return len([prime for prime in range(n) if not is_prime(prime)])\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    return len(list(filter(lambda num: num <= n, range(1, n))))\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 0:\n        return 0\n    \n    prime_number_list = []\n    \n    for i in range(1, n + 1):\n        if is_prime(i):\n            prime_number_list.append(i)\n            \n    return len(prime_number_list)"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n == 1:\n        return count\n    for x in range(2,n):\n        for y in range(2,x):\n            if x % y == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    list_of_primes = []\n    for num in range(2, n):\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                list_of_primes.append(num)\n    return len(list_of_primes)"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    cnt = 0\n    for i in range(1, n + 1):\n        if isprime(i):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # code here\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count = count+1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        for i in range(2,n+1):\n            if n%i==0:\n                return 0\n        return 1+count_Primes_nums(n//2)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n    \nprint(swap_numbers(0,1))\nprint(swap_numbers(1,2))\nprint(swap_numbers(0,2)"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a>b:\n        a,b=b,a\n    if a==b:\n        return a,b\n    else:\n        a,b=b,a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        t = b\n        b = a\n        a = t\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    return (second, first)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # write your code here\n    x=a\n    y=b\n    return x,y\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max = test_tup1[0]\n    min = test_tup1[1]\n    for item in test_tup1[2]:\n        if item > max:\n            max = item\n        if item < min:\n            min = item\n    return (max, min)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = (None, None)\n    if test_tup1 > test_tup2:\n        return test_tup1\n    if test_tup1 == test_tup2:\n        return test_tup1\n    while test_tup1!= test_tup2:\n        if test_tup1 < test_tup2:\n            test_tup1 = test_tup1 + test_tup2\n            test_tup2 = (test_tup2 * -1)\n        else:\n            test_tup2 = test_tup2 + test_tup1\n            test_tup1 = (test_tup1 * -1)\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    tup3 = test_tup1[1]\n    tup4 = test_tup2[1]\n    \n    if tup1[0] > tup2[0] or tup1[1] > tup2[1] or tup2[0] > tup3[0] or tup2[1] > tup3[1]:\n        tup1 = tup3\n        tup2 = tup3\n        tup3 = tup4\n        tup4 = tup1\n    return tup1, tup2, tup3, tup4\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == 0:\n        return max(test_tup2)\n    elif len(test_tup2) == 0:\n        return min(test_tup1)\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return maximize_elements(test_tup1, test_tup2[1:])\n        elif test_tup1[0] < test_tup2[0]:\n            return maximize_elements(test_tup2, test_tup1[1:])\n        else:\n            return test_tup1[0]\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # An unfilled tuple, and a filled tuple\n    \n    unf, fd = test_tup1, test_tup2\n    \n    # If the size of a tuple is not at the end, then the number of elements of the tuple is greater than the number of elements in the second tuple.\n    if len(flds[0]) < len(flds[1]):\n        return True\n    \n    # If the number of elements in both tuples is not at the end, then the number of elements in the first tuple is greater than the number of elements in the second tuple.\n    if len(flds[0]) > len(flds[1]):\n        return False\n    \n    # If the number of elements in both tuples is not at the end, then the number of elements in the first tuple is greater than the number of elements in the second tuple.\n    elif len(flds[0]) == len(flds[1]):\n        if fd[0] <= fd[1]:\n            return True\n        else:\n            return False\n    \n    # If the number of elements in both tuples is not at the end, then the number of elements in the first tuple is greater than the number of elements in the second tuple.\n    elif len(flds[0]) > len(flds[1]):\n        return False\n    \n    # If the number of elements in both tuples is not at the end, then the number of elements in the first tuple is greater than the number of elements in the second tuple.\n    elif len(flds[0]) == len(flds[1]):\n        if fd[0] > fd[1]:\n            return True\n        else:\n            return False\n    \n    # If the number of elements in both tuples is not at the end, then the number of elements in the first tuple is greater than the number of elements in the second tuple.\n    elif len(flds[0]) < len(flds[1]):\n        return False\n    \n    # If the number of elements in both tuples is not at the end, then the number of elements in the first tuple is greater than the number of elements in the second tuple.\n    else:\n        return False\n    \n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    #write your code here\n    \n    return test_tup1\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # YOUR CODE HERE\n    if test_tup1[0] > test_tup2[0]:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_elem = test_tup1[0]\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > result_elem:\n            result_elem = test_tup1[i]\n    return result_elem\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1: \n        return 1\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_check = True\n    for i in range(2,n): \n        if n % i == 0: \n            prime_check = False \n            break\n    if prime_check: \n        return n\n    return newman_prime(n+1)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = []\n    def isprime(n):\n        if n%2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        for i in range(5,int(n**0.5)+2, 6):\n            if n%i == 0:\n                return False\n        return True\n    def mersenne(n):\n        s = 0\n        while s < 9:\n            s += (n//(10**(9-s)))*(10**(9-s-1))\n        if n%s!= 0:\n            return False\n        else:\n            return True\n    for k in range(n+1, 100001, 2):\n        if isprime(k):\n            if mersenne(k):\n                a.append(k)\n    return a[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #check to see if the number is a prime number, if not print a warning\n    #if it is, return False\n    #if the number is prime, return it\n    #if it is not prime, generate a new number\n    \n    #define the base cases\n    #if n is 0, return False\n    #if n is 1, return True\n    #if the number is 0, the new number will always be the base case \n    #if the number is 1, the new number will always be the base case\n    \n    #create a set to store the primes\n    primes = set()\n    #loop through n to check for primes\n    #if the number is 0, n is a prime number\n    #if the number is 1, n is not a prime number\n    #if n is not a prime number, it is not a prime number \n    #add the primes to the set\n    #set will be an empty list, which will be used to store primes in \n    #order of size of primes \n    for p in range(2,n):\n        #if n is divisible by p\n        #if the number is divisible by p\n        #check if the number is prime\n        #if it is prime, return it\n        #if it is not a prime number, then add the primes to the set\n        #set will be an empty list, which will be used to store primes in \n        #order of size of primes \n        if n%p == 0:\n            primes.add(p)\n    #return the new number if the number is not prime\n    #if it is prime, then return false\n    #if it is not prime, then return the list of primes\n    #return a list of primes\n    if n not in primes:\n        return False\n    else:\n        return n\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while i < n: \n        if prime(i) == True: \n            p = i \n            q = n - i \n            if p > q: \n                break\n            elif p == q: \n                if (p - 1) % 2 == 0: \n                    return p \n                else: \n                    return p - 1 \n            else: \n                while q % 2 == 0: \n                    q = q // 2 \n                while (p - 1) % 2 == 0: \n                    p = p // 2 \n        i += 1 \n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n >= 1\n    if n <= 5:\n        return 2\n    elif n <= 8:\n        return 3\n    elif n <= 13:\n        return 5\n    elif n <= 16:\n        return 7\n    else:\n        return 10\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    else:\n        x=n*(n+1)/2\n        for i in range(3,x,1):\n            if i%2!=0:\n                j=i\n                break\n        y=i\n        while y<x:\n            if y%2==0:\n                y+=1\n            else:\n                y-=1\n        return y\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n==2): \n        return 2\n    else: \n        m = n-2\n        for i in range(3,m+1): \n            if (n%i==0): \n                break\n        else: \n            return n\n        return(newman_prime(n-2)) \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # finding the first n newman prime numbers\n    for i in range(2,n):\n        if n%i==0:\n            return i\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    list_of_prime_numbers = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            list_of_prime_numbers.append(i)\n    list_of_prime_numbers.remove(2)\n    return list_of_prime_numbers[len(list_of_prime_numbers)-1]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n    \ndef division_by_zero(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n    \ndef one_of_3(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (4, 5, 6)\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup3 = (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2])\n    return test_tup3\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        assert(len(test_tup1) == len(test_tup2))\n    except AssertionError:\n        print('Error: The input tuples have unequal length.\\n')\n        sys.exit()\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # first tup1 is an element to be divided\n    # tup1 is a tuple containing the element to be divided\n    # second tup2 is an element to be divided\n    # tup2 is a tuple containing the element to be divided\n    \n    test_tup1, test_tup2 = test_tup1[0], test_tup2[0]\n    test_tup1, test_tup2 = test_tup1[1], test_tup2[1]\n    test_tup1, test_tup2 = test_tup1[0], test_tup2[0]\n    \n    # calculating the common divisor\n    common_divisor = max(test_tup1, test_tup2)\n    \n    # calculating the number of integer\n    # digits in common divisor\n    number_of_int = len(str(common_divisor))\n    \n    # calculating the number of decimal digits in common divisor\n    number_of_dec = len(str(common_divisor)[1:])\n    \n    # returning the common divisor\n    return common_divisor, number_of_int, number_of_dec\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    # The first tuple will be the product of the list of ints. The second tuple will be the sum of the ints in the first tuple.\n    #\n    # The function should return the result of the division.\n    #\n    # EXAMPLE\n    #\n    # division_elements((3,5),(7,11)) => (7, 0)\n    # division_elements((5,7),(2,8)) => (6, 0)\n    #\n    # In your test case, the first tuple will have 3 and the second tuple will have 7 and the result will be 0\n    #\n    # Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    # The first tuple will be the product of the list of ints. The second tuple will be the sum of the ints in the first tuple.\n    #\n    # The function should return the result of the division.\n    #\n    # EXAMPLE\n    #\n    # division_elements((1,2),(3,4)) => (0, 0)\n    # division_elements((2,3),(1,5)) => (0, 1)\n    #\n    # In your test case, the first tuple will have 1 and the second tuple will have 2 and the result will be 1\n    #\n    #\n    # WRITE CODE HERE\n    #\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get the first tuple\n    tup1 = test_tup1[0]\n    # Get the second tuple\n    tup2 = test_tup2[0]\n    # Check that both tuples have dimensions of the same number\n    if len(tup1)!= len(tup2):\n        return \"Tuples are not of the same size!\"\n    # Check that the tuples are of the same dimension\n    if len(tup1)!= 1:\n        return \"Tuples must have dimensions of the same size as the first one!\"\n    # Check that both tuples have the same string representation\n    if tup1 == tup2:\n        return \"Tuples are identical!\"\n    # Create the list of strings that represent each element of the tuples\n    numerator = []\n    denominator = []\n    for i in range(len(tup1)):\n        numerator.append(tup1[i])\n        denominator.append(tup2[i])\n    # For each element of the numerator tuple, check that it is a number\n    # For each element of the denominator tuple, check that it is a number\n    for num in numerator:\n        if not isinstance(num, int) or not isinstance(denominator[0], int):\n            return \"Numbers are not of the same type!\"\n    # Create a new list of the the tuples in this order\n    new_numerator = list(numerator)\n    new_denominator = list(denominator)\n    # Iterate through each element and multiply it by the respective numbers\n    # Create the new list of strings\n    for num in range(len(new_numerator)):\n        new_numerator[num] = str(new_numerator[num]) + new_denominator[num]\n    # Return the string with the new numbers\n    return \"\".join(new_numerator)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def mul(num1, num2):\n        mul_result = num1 * num2\n        return mul_result\n    \n    returned_tuple = ()\n    for i in range(len(test_tup1)):\n        returned_tuple = returned_tuple + (test_tup1[i] / test_tup2[i])\n    \n    return returned_tuple\n    \n    \n    \n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    list_divided = []\n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i]/test_tup2[i] == test_tup2[i]:\n                list_divided.append(i)\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i]/test_tup1[i] == test_tup1[i]:\n                list_divided.append(i)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division = test_tup1/test_tup2\n    return division\n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    multiply = test_tup1*test_tup2\n    return multiply\n    \ndef subtract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical substraction operation element-wise across the given tuples.\n    '''\n    subtract = test_tup1 - test_tup2\n    return subtract\n    \ndef add_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical addition operation element-wise across the given tuples.\n    '''\n    add = test_tup1 + test_tup2\n    return add\n    \ndef subtract_from_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical substraction operation element-wise across the given tuples.\n    '''\n    subtract = test_tup1 - test_tup2\n    return subtract\n    \ndef subtract_elements_from_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    subtract = test_tup1 - test_tup2\n    return subtract\n    \ndef divide_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division = test_tup1/test_tup2\n    return division\n    \ndef multiply_elements_from_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    multiply = test_tup1*test_tup2\n    return multiply\n    \ndef subtract_from_elements_from_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical substraction operation element-wise across the given tuples.\n    '''\n    subtract = test_tup1 - test_tup2\n    return subtract\n    \ndef multiply_elements_from_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    multiply = test_tup1*test_tup2\n    return multiply\n    \ndef divide_elements_from_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division = test_tup1/test_tup2\n    return division\n    \ndef main():\n    print(\"3/2 =\", divide_elements(3, 2))\n    print(\"3/5 =\", divide_elements(3, 5))\n    print(\"3/6 =\", divide_elements(3, 6))\n    print(\"3/8 =\", divide_elements(3, 8))\n    print(\"3/10 =\", divide_elements(3, 10))\n    print(\"3/100 =\", divide_elements(3, 100))\n    print(\"5/4 =\", multiply_elements(5, 4))\n    print(\"5/6 =\", multiply_elements(5, 6))\n    print(\"5/8 =\", multiply_elements(5, 8))\n    print(\"5/10 =\", multiply_elements(5, 10))\n    print(\"5/12 =\", multiply_elements(5, 12))\n    print(\"5/20 =\", multiply_elements(5, 20))\n    print(\"6/2 =\", subtract_elements(6, 2))\n    print(\"6/4 =\", subtract_elements(6, 4))\n    print(\"6/6 =\", subtract_elements(6, 6))\n    print(\"6/8 =\", subtract_elements(6, 8))\n    print(\"6/10 =\", subtract_elements(6, 10))\n    print(\"6/12 =\", subtract_elements(6, 12))\n    print(\"6/20 =\", subtract_elements(6, 20))\n    print(\"7/2 =\", add_elements(7, 2))\n    print(\"7/4 =\", add_elements(7, 4))\n    print(\"7/6 =\", add_elements(7, 6))\n    print(\"7/8 =\", add_elements(7, 8))\n    print(\"7/10 =\", add_elements(7, 10))\n    print(\"7/12 =\", add_elements(7, 12))\n    print(\"7/20 =\", add_elements(7, 20))\n    print(\"8/2 =\", subtract_from_elements(8, 2))\n    print(\"8/4 =\", subtract_from_elements(8, 4))\n    print(\"8/6 =\", subtract_from_elements(8, 6))\n    print(\"8/8 =\", subtract_from_elements(8, 8))\n    print(\"8/10 =\", subtract_from_elements(8, 10))\n    print(\"8/12 =\", subtract_from_elements(8, 12))\n    print(\"8/20 =\", subtract_from_elements(8, 20))\n    print(\"9/2 =\", multiply_elements(9, 2))\n    print(\"9/4 =\", multiply_elements(9, 4))\n    print(\"9/6 =\", multiply_elements(9, 6))\n    print(\"9/8 =\", multiply_elements(9, 8))\n    print(\"9/10 =\", multiply_elements(9, 10))\n    print(\"9/12 =\", multiply_elements(9, 12))\n    print(\"9/20 =\", multiply_elements(9, 20))\n    print(\"10/2 =\", multiply_elements(10, 2))\n    print(\"10/4 =\", multiply_elements(10, 4))\n    print(\"10/6 =\", multiply_elements(10, 6))\n    print(\"10/8 =\", multiply_elements(10, 8))\n    print(\"10/10 =\", multiply_elements(10, 10))\n    print(\"10/12 =\", multiply_elements(10, 12))\n    print(\"10/20 =\", multiply_elements(10, 20))\n    print(\"11/2 =\", multiply_elements(11, 2))\n    print(\"11/4 =\", multiply_elements(11, 4))\n    print(\"11/6 =\", multiply_elements(11, 6))\n    print(\"11/8 =\", multiply_elements(11, 8))\n    print(\"11/10 =\", multiply_elements(11, 10))\n    print(\"11/12 =\", multiply_elements(11, 12))\n    print(\"11/20 =\", multiply_elements(11, 20))\n    print(\"12/2 =\", multiply_elements(12, 2))\n    print(\"12/4 =\", multiply_elements(12, 4))\n    print(\"12/6 =\", multiply_elements(12, 6))\n    print(\"12/8 =\", multiply_elements(12, 8))\n    print(\"12/10 =\", multiply_elements(12, 10))\n    print(\"12/12 =\", multiply_elements(12, 12))\n    print(\"12/20 =\", multiply_elements(12, 20))\n    print(\"13/2 =\", divide_elements(13, 2))\n    print(\"13/4 =\", divide_elements(13, 4))\n    print(\"13/6 =\", divide_elements(13, 6))\n    print(\"13/8 =\", divide_elements(13, 8))\n    print(\"13/10 =\", divide_"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i:i+L])\n    return new_list\n    \ndef find_max_val(list):\n    '''\n    Write a function that takes in a list and returns the maximum value in the list.\n    '''\n    max_val = 0\n    for i in list:\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 2:\n        return (list1, [])\n    else:\n        return split_two_parts(list1[:L//2], L//2) + split_two_parts(list1[L//2:], L//2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:]\n    \n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L==0:\n        return [[], []]\n    elif L==1:\n        return [list1[0:L], []]\n    else:\n        return split_two_parts(list1[0:L], L-1) + split_two_parts(list1[L:], L-1)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        raise Exception('Length of list must be a multiple of L.')\n    \n    return list1[:int(len(list1)/L)], list1[int(len(list1)/L):]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == L:\n        return list1\n    elif len(list1) < L:\n        return list1, list1\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the list needs to be greater than or equal to L.\")\n    elif L == 0:\n        raise ValueError(\"Cannot split the list to zero length.\")\n    else:\n        list2 = []\n        list1_length = len(list1)\n        for i in range(0,L):\n            if i % 2 == 0:\n                list2.append(list1[i])\n        if list1_length % 2 == 0:\n            list2.append(list1[list1_length - 1])\n        return list2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Hint: https://stackoverflow.com/questions/2994762/split-a-list-into-two-lists\n    return list1[0:L], list1[L:]\n    \ndef split_by_quotation_marks(string, quotation_marks):\n    '''\n    Write a function that takes in a string and a string of quotation marks and returns the string split by each of the quotation marks.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split(quotation_marks)\n    \ndef split_by_punctuation(string, punctuation):\n    '''\n    Write a function that takes in a string and a string of punctuation marks and returns the string split by each of the punctuation marks.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split(punctuation)\n    \ndef split_by_letters(string, letters):\n    '''\n    Write a function that takes in a string and a string of letters and returns the string split by each of the letters.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split(letters)\n    \ndef split_by_hashes(string, hashes):\n    '''\n    Write a function that takes in a string and a string of letters and returns the string split by each of the hashes.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split(hashes)\n    \ndef split_by_digits(string, digits):\n    '''\n    Write a function that takes in a string and a string of digits and returns the string split by each of the digits.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split(digits)\n    \ndef split_by_whitespace(string, whitespace):\n    '''\n    Write a function that takes in a string and a string of whitespace and returns the string split by each of the whitespace.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split(whitespace)\n    \ndef split_by_line_breaks(string):\n    '''\n    Write a function that takes in a string and returns the string split by line breaks.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.splitlines()\n    \ndef split_by_tabs(string):\n    '''\n    Write a function that takes in a string and returns the string split by tab delimited.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split('\\t')\n    \ndef split_by_arrows(string):\n    '''\n    Write a function that takes in a string and returns the string split by arrow delimited.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split('\\n')\n    \ndef split_by_nl(string):\n    '''\n    Write a function that takes in a string and returns the string split by new line delimited.\n    '''\n    # Hint: https://www.geeksforgeeks.org/split-string-to-separate-strings/\n    return string.split('\\n')\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return list(dict.fromkeys(list1))\n    \ndef remove_duplicates_old(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [item for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef remove_duplicates_special(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [item for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef remove_duplicates_with_reverse(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [list1[item] for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef remove_duplicates_with_replace(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [list1[item] for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef remove_duplicates_with_count(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [item for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef remove_duplicates_with_reverse_count(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [list1[item] for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef remove_duplicates_with_replace_count(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [list1[item] for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef remove_duplicates_with_count_replace(list1):\n    '''\n    Write a function that takes in a list and returns a new list that only contains unique elements.\n    '''\n    # Hint: https://www.geeksforgeeks.org/remove-duplicates-in-python/\n    return [list1[item] for item, count in collections.Counter(list1).items() if count > 1]\n    \ndef is_valid_email(email):\n    '''\n    Given a string of a valid email address, returns True if it is a valid email address or False if it is not.\n    '''\n    # Hint: https://www.geeksforgeeks.org/valid-email-address/\n    regex = r'^(\\w|\\.|\\_|\\-)+[@](\\w|\\_|\\-|\\.)+[.]\\w{2,3}$'\n    if re.match(regex, email):\n        return True\n    else:\n        return False\n    \ndef is_valid_email_with_spaces(email):\n    '''\n    Given a string of a valid email address, returns True if it is a valid email address or False if it is not.\n    '''\n    # Hint: https://www.geeksforg"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Fill in the blanks\n    if not list1:\n        return (list1, list1)\n    elif len(list1) <= L:\n        return (list1, list1)\n    else:\n        return split_two_parts(list1[:L//2], L//2) + split_two_parts(list1[L//2:], L//2)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    from math import ceil\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <=1:\n        print(h_age, \"is a dog.\")\n    elif h_age <=2:\n        print(h_age, \"is a dog.\")\n    elif h_age <=3:\n        print(h_age, \"is a dog.\")\n    elif h_age <=4:\n        print(h_age, \"is a dog.\")\n    elif h_age <=5:\n        print(h_age, \"is a dog.\")\n    else:\n        print(h_age, \"is a dog.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 2:\n        return 0\n    elif h_age >= 3 and h_age <= 5:\n        return 1\n    elif h_age >= 6 and h_age <= 8:\n        return 2\n    elif h_age >= 9 and h_age <= 12:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import datetime\n    import time\n    \n    dog_age = time.time() - h_age\n    \n    if dog_age < 60:\n        return \"a dog's age is %.1f years old\" % (dog_age)\n    else:\n        return \"a dog's age is %.1f years old\" % (dog_age + 60)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    def dog_age(h_age):\n        '''\n        Write a function to calculate a dog's age in dog's years.\n        '''\n        if h_age < 3:\n            return f\"{h_age} years old.\"\n        elif 3 <= h_age < 7:\n            return f\"{h_age} years old.\"\n        elif 7 <= h_age < 12:\n            return f\"{h_age} years old.\"\n        else:\n            return f\"{h_age} years old.\"\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return \"No, no dog.\"\n    else:\n        return \"dog with age {}\".format(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    animal_age = 0\n    if h_age >= 60:\n        animal_age = h_age - 60\n    else:\n        animal_age = 60 - h_age\n    \n    return animal_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 60:\n        return h_age\n    else:\n        return 'No dog.'\n    \n    \n    #DONE\n    \ndef can_i_consume_my_lunch(d_age):\n    '''\n    Write a function that, given a dog's age in dog's years and a list \n    of food they can consume, return a list that contains only those food \n    which can be consumed in the next 4 weeks.\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 6:\n        return h_age\n    elif h_age >= 2:\n        return h_age+1\n    else:\n        return h_age\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here.\n    if not step:\n        return [[]]\n    if len(S) == 1:\n        return [[S[0]]]\n    elif len(S) == 2:\n        if S[0] == S[1]:\n            return [[S[0]]]\n        else:\n            return [[S[0], S[1]], [S[0], S[1]]]\n    return [\n        [S[0], S[1]],\n        [S[0], S[1]],\n        list_split(S[1:], step-1),\n        list_split(S[1:], step-1)\n    ]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_S = []\n    for i in range(0, len(S), step):\n        new_S.append(S[i:i+step])\n    return new_S\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    print(S)\n    n = len(S)\n    for i in range(0,n,step):\n        yield S[i:i+step]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # find the length of the list\n    len = len(S)\n    # initialize an empty list\n    output = []\n    # iterate through the list\n    for i in range(0, len, step):\n        # if there is only one element left, append it to the output\n        if len == 1:\n            output.append(S)\n        # if there is more than one element left, recurse\n        else:\n            output.append(S[i:i+step])\n    return output\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here\n    return\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 0:\n        return []\n    elif step == 0:\n        return [S]\n    elif step == 1:\n        return [[S]]\n    elif step > 1:\n        return [[S] for i in range(step)]\n    elif step == 0:\n        return [[S]]\n    \ndef list_split2(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 0:\n        return [[S]]\n    elif step == 0:\n        return [[S]]\n    elif step == 1:\n        return [[S]]\n    elif step > 1:\n        return [[S] for i in range(step)]\n    elif step == 0:\n        return [[S]]\n    \n    \ndef main():\n    # Step 1: Create a list of words to split, split using list_split.\n    words = ['the', 'a', 'an', 'a', 'the', 'and', 'an', 'a', 'and', 'an', 'is', 'a', '.', 'be', 'and', 'an', 'and', 'is', '.', 'your', 'name', 'is','sir', '.', 'and', 'an', 'and', 'is', '.', 'you','may', 'the', 'a', 'and', 'be', '.', 'are', '.', 'and', 'the', 'of', '.', 'and', 'an
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while i < len(S):\n        #This will take in a list\n        res.append(S[i:i+step])\n        #Reset the i\n        i = i + step\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(len(S)):\n        lst.append(S[i:i+step])\n    return lst\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l == 0:\n        return 1.0\n    if l == 1:\n        return 3.0\n    if l == 2:\n        return 6.0\n    if l == 3:\n        return 12.0\n    if l == 4:\n        return 24.0\n    if l == 5:\n        return 60.0\n    if l == 6:\n        return 180.0\n    if l == 7:\n        return 720.0\n    if l == 8:\n        return 840.0\n    if l == 9:\n        return 1260.0\n    if l == 10:\n        return 1760.0\n    if l == 11:\n        return 2160.0\n    if l == 12:\n        return 2480.0\n    if l == 13:\n        return 3680.0\n    if l == 14:\n        return 4680.0\n    if l == 15:\n        return 5120.0\n    if l == 16:\n        return 5240.0\n    if l == 17:\n        return 5460.0\n    if l == 18:\n        return 5760.0\n    if l == 19:\n        return 6160.0\n    if l == 20:\n        return 6300.0\n    if l == 21:\n        return 6660.0\n    if l == 22:\n        return 7080.0\n    if l == 23:\n        return 7120.0\n    if l == 24:\n        return 7240.0\n    if l == 25:\n        return 7600.0\n    if l == 26:\n        return 7800.0\n    if l == 27:\n        return 8160.0\n    if l == 28:\n        return 8460.0\n    if l == 29:\n        return 8800.0\n    if l == 30:\n        return 9120.0\n    if l == 31:\n        return 9240.0\n    if l == 32:\n        return 9600.0\n    if l == 33:\n        return 9880.0\n    if l == 34:\n        return 10080.0\n    if l == 35:\n        return 10460.0\n    if l == 36:\n        return 10860.0\n    if l == 37:\n        return 11120.0\n    if l == 38:\n        return 11240.0\n    if l == 39:\n        return 11600.0\n    if l == 40:\n        return 11980.0\n    if l == 41:\n        return 12160.0\n    if l == 42:\n        return 12240.0\n    if l == 43:\n        return 12600.0\n    if l == 44:\n        return 13000.0\n    if l == 45:\n        return 13120.0\n    if l == 46:\n        return 13240.0\n    if l == 47:\n        return 13600.0\n    if l == 48:\n        return 14000.0\n    if l == 49:\n        return 14120.0\n    if l == 50:\n        return 14240.0\n    if l == 51:\n        return 14600.0\n    if l == 52:\n        return 15000.0\n    if l == 53:\n        return 15120.0\n    if l == 54:\n        return 15240.0\n    if l == 55:\n        return 15600.0\n    if l == 56:\n        return 16000.0\n    if l == 57:\n        return 16120.0\n    if l == 58:\n        return 16240.0\n    if l == 59:\n        return 16600.0\n    if l == 60:\n        return 17000.0\n    if l == 61:\n        return 17120.0\n    if l == 62:\n        return 17240.0\n    if l == 63:\n        return 17600.0\n    if l == 64:\n        return 18000.0\n    if l == 65:\n        return 18120.0\n    if l == 66:\n        return 18240.0\n    if l == 67:\n        return 18600.0\n    if l == 68:\n        return 19000.0\n    if l == 69:\n        return 19120.0\n    if l == 70:\n        return 19240.0\n    if l == 71:\n        return 19600.0\n    if l == 72:\n        return 20000.0\n    if l == 73:\n        return 20120.0\n    if l == 74:\n        return 20240.0\n    if l == 75:\n        return 20600.0\n    if l == 76:\n        return 21000.0\n    if l == 77:\n        return 21120.0\n    if l == 78:\n        return 21240.0\n    if l == 79:\n        return 21600.0\n    if l == 80:\n        return 22000.0\n    if l == 81:\n        return 22120.0\n    if l == 82:\n        return 22240.0\n    if l == 83:\n        return 22600.0\n    if l == 84:\n        return 23000.0\n    if l == 85:\n        return 23120.0\n    if l == 86:\n        return 23240.0\n    if l == 87:\n        return 23600.0\n    if l == 88:\n        return 24000.0\n    if l == 89:\n        return 24120.0\n    if l == 90:\n        return 24240.0\n    if l == 91:\n        return 24600.0\n    if l == 92:\n        return 25000.0\n    if l == 93:\n        return 25120.0\n    if l == 94:\n        return 25240.0\n    if l == 95:\n        return 25600.0\n    if l == 96:\n        return 26000.0\n    if l == 97:\n        return 26120.0\n    if l == 98:\n        return 26240.0\n    if l == 99:\n        return 26600.0\n    if l == 100:\n        return 27000.0\n    if l == 101:\n        return 27120.0\n    if l == 102:\n        return 27240.0\n    if l == 103:\n        return 27600.0\n    if l == 104:\n        return 28000.0\n    if l == 105:\n        return 28120.0\n    if l == 106:\n        return 28240.0\n    if l == 107:\n        return 28600.0\n    if l == 108:\n        return 29000.0\n    if l == 109:\n        return 29120.0\n    if l == 110:\n        return 29240.0\n    if l == 111:\n        return 29600.0\n    if l == 112:\n        return 300000.0\n    if l == 113:\n        return 30120.0\n    if l == 114:\n        return 30240.0\n    if l == 115:\n        return 30600.0\n    if l == 116:\n        return 31000.0\n    if l == 117:\n        return 3120.0\n    if l == 118:\n        return 3240.0\n    if l == 119:\n        return 3600.0\n    if l == 120:\n        return 3800.0\n    if l == 121:\n        return 34000.0\n    if l == 122:\n        return 34120.0\n    if l == 123:\n        return 34240.0\n    if l == 124:\n        return 34600.0\n    if l == 125:\n        return 35000.0\n    if l == 126:\n        return 35120.0\n    if l == 127:\n        return 35240.0\n    if l == 128:\n        return 35600.0\n    if l == 129:\n        return 36000.0\n    if l == 130:\n        return 36120.0\n    if l == 131:\n        return 36240.0\n    if l == 132:\n        return 36600.0\n    if l == 133:\n        return 37000.0\n    if l == 134:\n        return 37120.0\n    if l == 135:\n        return 37240.0\n    if l == 136:\n        return 37600.0\n    if l == 137:\n        return 38000.0\n    if l == 138:\n        return 38120.0\n    if l == 139:\n        return 38240.0\n    if l == 140:\n        return 38600.0\n    if l == 141:\n        return 39000.0\n    if l == 142:\n        return 39120.0\n    if l == 143:\n        return 39240.0\n    if "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    elif l == 1:\n        return 0.5\n    else:\n        return l*(l-1)*(l-2)*(l-3)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code here\n    \n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # From the documentation: The formula for the lateral surface area of a cube is:\n    # l(x) = A * (1 - A**2)\n    # Where A is the height of the cube and l(x) is the lateral surface area of the cube.\n    # To calculate the lateral surface area of the cube, we need to multiply by its vertical height.\n    # In this equation, the vertical height of the cube is the ratio of the cube's height to its sides.\n    # As we assume that the height of the cube is 1, we find the vertical height of the cube.\n    # So, for example, if the height of the cube is 1, we have the vertical height of the cube.\n    # If we are not able to calculate the vertical height, then we will use the formula below:\n    # vertical_height = (height / sides)^2.\n    # So, if the height of the cube is 1, the vertical height will be 1.\n    # Let's do the calculation of the vertical height.\n    lateral_height = 1/l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    ### YOUR CODE HERE ###\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Make a new 2D matrix with a boundary of 1.0 (the origin is at the origin)\n    b = np.zeros(l.shape, dtype=np.double)\n    b[0] = 1.0\n    b[l.shape[0]-1] = 1.0\n    b[l.shape[0]-2] = 1.0\n    b[l.shape[0]-3] = 1.0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # The surface area of a cube is given by (l**2)\n    # The total surface area of a cube is the sum of the length of the sides\n    #         and the area of a cube is the perimeter of a triangle (side A, side B and side C).\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Create a variable to store the values of the left, bottom, top, and right side of the cube\n    side_length = l\n    # Calculate the minimum allowable side length\n    min_side_length = side_length\n    # Loop through the sides of the cube\n    for i in range(3):\n        for j in range(3):\n            # Get the coordinates of the corner of the side of the cube\n            corner_of_the_side = i * side_length + j * side_length\n            # Get the side length of the side of the cube\n            side_length_of_the_side = side_length\n            # Create a variable to store the values of the minimum allowable side length\n            min_side_length = min(min_side_length, side_length_of_the_side)\n    # Return the minimum allowable side length\n    return min_side_length\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    elif l == 1:\n        return 30\n    else:\n        return l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    answer = 0\n    for i in range(1, n, 2):\n        answer += i ** 2\n    return answer\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n    \nprint(square_Sum(4))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    import math\n    square_list = []\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    answer = 0\n    for i in range(1, n+1):\n        answer += i**2\n    return answer\nprint(square_Sum(100)"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += (i**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return n * n\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #  Write your code here\n    #  Convert string to int\n    #  Return sum of squares of numbers\n    \n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i ** 2\n    return su"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    n = n % 2\n    if n == 0:\n        return 0\n    else:\n        for i in range(1, n + 1, 2):\n            sum_of_squares = sum_of_squares + i**2\n        return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for x in range(1, n+1):\n        if x % 2 == 1:\n            print(x)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1:\n        return n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1 or n == 0: return n\n    elif n == 2 or n == 3: return n\n    else:\n        star_num = find_star_num(n - 2)\n        star_num = star_num + 1\n        return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    #Write your code here\n    numbers = range(1, n + 1)\n    return next(x for x in numbers if x*2 == n)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # define the list of starting points\n    s = []\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n    print(\"n is \", n)\n    return (n+1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0: \n        return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 0\n    while n > 1:\n        result += n % 10\n        n = n // 10\n    return result\n    \n    \ndef find_sum_of_powers_of_3(n):\n    '''\n    Return the sum of the powers of 3.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 3\n    return result\n    \n    \ndef find_sum_of_powers_of_5(n):\n    '''\n    Return the sum of the powers of 5.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 5\n    return result\n    \n    \ndef find_sum_of_powers_of_7(n):\n    '''\n    Return the sum of the powers of 7.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 7\n    return result\n    \n    \ndef find_sum_of_powers_of_8(n):\n    '''\n    Return the sum of the powers of 8.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 8\n    return result\n    \n    \ndef find_sum_of_powers_of_10(n):\n    '''\n    Return the sum of the powers of 10.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 10\n    return result\n    \n    \ndef find_sum_of_powers_of_11(n):\n    '''\n    Return the sum of the powers of 11.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 11\n    return result\n    \n    \ndef find_sum_of_powers_of_12(n):\n    '''\n    Return the sum of the powers of 12.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 12\n    return result\n    \n    \ndef find_sum_of_powers_of_13(n):\n    '''\n    Return the sum of the powers of 13.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 13\n    return result\n    \n    \ndef find_sum_of_powers_of_14(n):\n    '''\n    Return the sum of the powers of 14.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 14\n    return result\n    \n    \ndef find_sum_of_powers_of_15(n):\n    '''\n    Return the sum of the powers of 15.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 15\n    return result\n    \n    \ndef find_sum_of_powers_of_16(n):\n    '''\n    Return the sum of the powers of 16.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 16\n    return result\n    \n    \ndef find_sum_of_powers_of_17(n):\n    '''\n    Return the sum of the powers of 17.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 17\n    return result\n    \n    \ndef find_sum_of_powers_of_18(n):\n    '''\n    Return the sum of the powers of 18.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 18\n    return result\n    \n    \ndef find_sum_of_powers_of_19(n):\n    '''\n    Return the sum of the powers of 19.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 19\n    return result\n    \n    \ndef find_sum_of_powers_of_20(n):\n    '''\n    Return the sum of the powers of 20.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 20\n    return result\n    \n    \ndef find_sum_of_powers_of_21(n):\n    '''\n    Return the sum of the powers of 21.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 21\n    return result\n    \n    \ndef find_sum_of_powers_of_22(n):\n    '''\n    Return the sum of the powers of 22.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 22\n    return result\n    \n    \ndef find_sum_of_powers_of_23(n):\n    '''\n    Return the sum of the powers of 23.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 23\n    return result\n    \n    \ndef find_sum_of_powers_of_24(n):\n    '''\n    Return the sum of the powers of 24.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 24\n    return result\n    \n    \ndef find_sum_of_powers_of_25(n):\n    '''\n    Return the sum of the powers of 25.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 25\n    return result\n    \n    \ndef find_sum_of_powers_of_26(n):\n    '''\n    Return the sum of the powers of 26.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 26\n    return result\n    \n    \ndef find_sum_of_powers_of_27(n):\n    '''\n    Return the sum of the powers of 27.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 27\n    return result\n    \n    \ndef find_sum_of_powers_of_28(n):\n    '''\n    Return the sum of the powers of 28.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 28\n    return result\n    \n    \ndef find_sum_of_powers_of_29(n):\n    '''\n    Return the sum of the powers of 29.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 29\n    return result\n    \n    \ndef find_sum_of_powers_of_30(n):\n    '''\n    Return the sum of the powers of 30.\n    '''\n    if n <= 0:\n        return 0\n    result = 0\n    for i in range(1, n + 1):\n        result += i ** 30\n    return result\n    \n    \ndef find_sum_o"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == \" \":\n        return \" \"\n    if k == \",\":\n        return \",\"\n    if k == \".\":\n        return \".\"\n    if k == \"/\":\n        return \"/\"\n    if k == \" \":\n        return \" \"\n    if k == \"*\":\n        return \"*\"\n    if k == \"+\":\n        return \"+\"\n    if k == \"-\":\n        return \"-\"\n    if k == \"=\":\n        return \"=\"\n    if k == \">\":\n        return \">\"\n    if k == \"<\":\n        return \"<\"\n    if k == \"&\":\n        return \"&\"\n    if k == \"|\":\n        return \"|\"\n    if k == \"^\":\n        return \"^\"\n    if k == \"~\":\n        return \"~\"\n    if k == \"\\n\":\n        return \"-\"\n    if k == \"\\t\":\n        return \".\"\n    if k == \"0\":\n        return \"0\"\n    if k == \"1\":\n        return \"1\"\n    if k == \"2\":\n        return \"2\"\n    if k == \"3\":\n        return \"3\"\n    if k == \"4\":\n        return \"4\"\n    if k == \"5\":\n        return \"5\"\n    if k == \"6\":\n        return \"6\"\n    if k == \"7\":\n        return \"7\"\n    if k == \"8\":\n        return \"8\"\n    if k == \"9\":\n        return \"9\"\n    if k == \".\":\n        return \".\"\n    if k == \",\":\n        return \",\"\n    if k == \".\":\n        return \".\"\n    if k == \"=\":\n        return \"=\"\n    if k == \">\":\n        return \">\"\n    if k == \"<\":\n        return \"<\"\n    if k == \"&\":\n        return \"&\"\n    if k == \"|\":\n        return \"|\"\n    if k == \"^\":\n        return \"^\"\n    if k == \"~\":\n        return \"~\"\n    if k == \"vowels\":\n        return \"vowels\"\n    if k == \"combos\":\n        return \"combos\"\n    if k == \"exclamation\":\n        return \"!\"\n    if k == \"question\":\n        return \"?\"\n    if k == \"answer\":\n        return \"?\"\n    if k == \"number\":\n        return \".\"\n    if k == \"percent\":\n        return \"%\"\n    if k == \"two\":\n        return \"2\"\n    if k == \"six\":\n        return \"6\"\n    if k == \"seven\":\n        return \"7\"\n    if k == \"eight\":\n        return \"8\"\n    if k == \"nine\":\n        return \"9\"\n    if k == \"ascii\":\n        return \"ascii\"\n    if k == \"ascii_value\":\n        return ascii_value(k)\n    if k == \"+\":\n        return \"+\"\n    if k == \"*\":\n        return \"*\"\n    if k == \"-\":\n        return \"-\"\n    if k == \"=\":\n        return \"=\"\n    if k == \">\":\n        return \">\"\n    if k == \"<\":\n        return \"<\"\n    if k == \"&\":\n        return \"&\"\n    if k == \"|\":\n        return \"|\"\n    if k == \"^\":\n        return \"^\"\n    if k == \"~\":\n        return \"~\"\n    if k == \"vowels\":\n        return vowels\n    if k == \"combos\":\n        return combos\n    if k == \"exclamation\":\n        return \"!\"\n    if k == \"question\":\n        return \"?\"\n    if k == \"answer\":\n        return \"?\"\n    if k == \"number\":\n        return \".\"\n    if k == \"percent\":\n        return \"%\"\n    if k == \"two\":\n        return \"2\"\n    if k == \"six\":\n        return \"6\"\n    if k == \"seven\":\n        return \"7\"\n    if k == \"eight\":\n        return \"8\"\n    if k == \"nine\":\n        return \"9\"\n    if k == \"ascii\":\n        return \"ascii\"\n    if k == \"ascii_value\":\n        return ascii_value(k)\n    if k == \"+\":\n        return \"+\"\n    if k == \"*\":\n        return \"*\"\n    if k == \"-\":\n        return \"-\"\n    if k == \"=\":\n        return \"=\"\n    if k == \">\":\n        return \">\"\n    if k == \"<\":\n        return \"<\"\n    if k == \"&\":\n        return \"&\"\n    if k == \"|\":\n        return \"|\"\n    if k == \"^\":\n        return \"^\"\n    if k == \"~\":\n        return \"~\"\n    if k == \"vowels\":\n        return vowels\n    if k == \"combos\":\n        return combos\n    if k == \"exclamation\":\n        return \"!\"\n    if k == \"question\":\n        return \"?\"\n    if k == \"answer\":\n        return \"?\"\n    if k == \"number\":\n        return \".\"\n    if k == \"percent\":\n        return \"%\"\n    if k == \"two\":\n        return \"2\"\n    if k == \"six\":\n        return \"6\"\n    if k == \"seven\":\n        return \"7\"\n    if k == \"eight\":\n        return \"8\"\n    if k == \"nine\":\n        return \"9\"\n    if k == \"ascii\":\n        return \"ascii\"\n    if k == \"ascii_value\":\n        return ascii_value(k)\n    if k == \"+\":\n        return \"+\"\n    if k == \"*\":\n        return \"*\"\n    if k == \"-\":\n        return \"-\"\n    if k == \"=\":\n        return \"=\"\n    if k == \">\":\n        return \">\"\n    if k == \"<\":\n        return \"<\"\n    if k == \"&\":\n        return \"&\"\n    if k == \"|\":\n        return \"|\"\n    if k == \"^\":\n        return \"^\"\n    if k == \"~\":\n        return \"~\"\n    if k == \"vowels\":\n        return vowels\n    if k == \"combos\":\n        return combos\n    if k == \"exclamation\":\n        return \"!\"\n    if k == \"question\":\n        return \"?\"\n    if k == \"answer\":\n        return \"?\"\n    if k == \"number\":\n        return \".\"\n    if k == \"percent\":\n        return \"%\"\n    if k == \"two\":\n        return \"2\"\n    if k == \"six\":\n        return \"6\"\n    if k == \"seven\":\n        return \"7\"\n    if k == \"eight\":\n        return \"8\"\n    if k == \"nine\":\n        return \"9\"\n    if k == \"ascii\":\n        return \"ascii\"\n    if k == \"ascii_value\":\n        return ascii_value(k)\n    if k == \"=\":\n        return \"=\"\n    if k == \">\":\n        return \">\"\n    if k == \"<\":\n        return \"<\"\n    if k == \"&\":\n        return \"&\"\n    if k == \"|\":\n        return \"|\"\n    if k == \"^\":\n        return \"^\"\n    if k == \"~\":\n        return \"~\"\n    if k == \"vowels\":\n        return vowels\n    if k == \"combos\":\n        return combos\n    if k == \"exclamation\":\n        return \"!\"\n    if k == \"question\":\n        return \"?\"\n    if k == \"answer\":\n        return \"?\"\n    if k == \"number\":\n        return \".\"\n    if k == \"percent\":\n        return \"%\"\n    if k == \"two\":\n        return \"2\"\n    if k == \"six\":\n        return \"6\"\n    if k == \"seven\":\n        return \"7\"\n    if k == \"eight\":\n        return \"8\"\n    if k == \"nine\":\n        return \"9\"\n    if k == \"ascii\":\n        return \"ascii\"\n    if k == \"ascii_value\":\n        return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if (type(k)!= str):\n        raise TypeError('k must be a string.')\n    return (''.join(map(str, list(range(ord(k[i % len(k)]), ord(k[i % len(k) + 1]) + 1))))).upper()\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # noinspection PyTypeChecker\n    # noinspection PyUnresolvedReferences\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = int(k)\n    if 0 <= k < len(ascii_alphabet):\n        return ascii_alphabet[k]\n    else:\n        print(\"the value doesn't exist\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    for char in k:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = index + 1\n            new_index = new_index % 26\n            return chr(new_index + 97)\n    return 'None'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert type(k) == str, 'Must pass a string'\n    assert k, 'Must pass a valid character'\n    assert len(k) == 1, 'Must pass a single character'\n    assert ord(k) >= 97 and ord(k) <= 122, 'Must pass a character between 97 and 122'\n    return ord(k) - 97\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isprintable():\n        return ord(k)\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in ascii_table:\n        return ascii_table[k]\n    return None\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return k.encode('ascii')\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for number in arr:\n        if number % 2 == 0:\n            even_sum = even_sum + number\n        else:\n            odd_sum = odd_sum + number\n    return (even_sum, odd_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            sum += value\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for x in range(len(arr)):\n        if(arr[x] % 2 == 0):\n            even_sum += arr[x]\n            if(arr[x] > 0):\n                even_index += 1\n    return even_sum, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            sum_even += arr[index]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(i for i in arr if i % 2 == 0)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = [i for i, n in enumerate(arr) if n % 2 == 0]\n    sum = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even\n    \n    "
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if (n==0):\n        return 0\n    if (n<0):\n        return 0\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i = i**2\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if (i%3==0):\n            sum=sum+i\n        elif (i%5==0):\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    \n    \n    n_power_sum = 0\n    if n < 0:\n        return \n    \n    for power in range(1,n+1):\n        num = n**power\n        if num % 2 == 0:\n            n_power_sum += num\n            \n    return n_power_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        print(\"Please input a positive integer\")\n        return\n    else:\n        x = n\n        power = 0\n        sum = 0\n        while x >= 0:\n            power = power * 10\n            if (power % 2 == 0):\n                sum = sum + pow(x, power)\n            x = x - 1\n        if sum % 5 == 0:\n            print(\"{} is a sum of {} and {}\".format(n, sum, n**2))\n        else:\n            print(\"{} is not a sum of {} and {}\".format(n, sum, n**2))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Create a function that finds the sum of the first n even natural numbers.\n    sum = 0\n    for i in range(1,n+1):\n        # Find the sum of the first n even numbers.\n        if i % 2 == 0:\n            sum += (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for x in range(n):\n        result = result + (2**x)\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * even_Power_Sum(n - 1)\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list.sort()\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)):\n        rear.append(test_list[i][1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tuple in test_list:\n        rear.append(tuple[0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tuple in test_list:\n        result.append(tuple[1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_rear = []\n    for item in test_list:\n        list_rear.append(item[-1])\n    return list_rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for index, tuple_item in enumerate(test_list):\n        rear_list.append(tuple_item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[-1][1]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i]-test_tup2[i])\n        return tuple(result)\n    else:\n        return False"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    count = 0\n    for i in test_tup1:\n        count += i\n    for j in test_tup2:\n        count -= j\n    return count\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_1 = test_tup1[1:]\n    test_tup2_1 = test_tup2[1:]\n    \n    test_tup1_2 = test_tup1[0]\n    test_tup2_2 = test_tup2[0]\n    \n    return (test_tup1_1 - test_tup1_2, test_tup2_1 - test_tup2_2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # define a second list to store the modified tuples\n    second_list = []\n    # define a third list to store the modified tuples\n    third_list = []\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n    for i in range(len(test_tup1)):\n        new_tup1 += (test_tup1[i] - test_tup2[i])\n    return new_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if type(test_tup1[0])!= tuple:\n        return(\"Incorrect input format. The first tuple must be a tuple\")\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    dic = {i: tup1[i] - tup2[i] for i in range(len(tup1))}\n    return dic\n    \n    \nif __name__ == '__main__':\n    test_tup1 = (1,2,3,4)\n    test_tup2 = (10,20,30,40)\n    \n    print(substract_elements(test_tup1, test_tup2))\n    \n    print()\n    \n    test_tup1 = (1,2,3,4)\n    test_tup2 = (10,20,30,40)\n    \n    print(substract_elements(test_tup1, test_tup2))\n    \n    print()\n    \n    test_tup1 = (1,2,3,4)\n    test_tup2 = (10,20,30,40)\n    \n    print(substract_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(\"TEST CASE 1\")\n    print(test_tup1)\n    print(test_tup2)\n    \n    first_list = []\n    second_list = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(f\"List lengths don't match: {len(test_tup1)} vs {len(test_tup2)}\")\n    \n    for item in test_tup1:\n        first_list.append(item)\n    \n    for item in test_tup2:\n        second_list.append(item)\n    \n    print(first_list)\n    print(second_list)\n    \n    index_first_list = 0\n    index_second_list = 0\n    \n    for i in range(len(first_list)):\n        if first_list[i]!= second_list[i]:\n            second_list[index_second_list] = second_list[index_second_list] - first_list[index_first_list]\n            second_list[index_second_list] = round(second_list[index_second_list])\n            index_second_list = index_second_list + 1\n    \n    print(first_list)\n    print(second_list)\n    \n    return first_list, second_list\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n <= 0): \n        return 0\n    elif (n == 1): \n        return 1\n    elif (n % 2 == 0): \n        return even_binomial_Coeff_Sum(n // 2)\n    else:\n        return even_binomial_Coeff_Sum(3 * n)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    total_odd = n * (2 ** (n - 1))\n    return total_odd\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n<=0):\n        return 0\n    if(n==2):\n        return 1\n    if(n%2==0):\n        return even_binomial_Coeff_Sum(n//2) + even_binomial_Coeff_Sum(n//2)\n    else:\n        return even_binomial_Coeff_Sum(n//2) + even_binomial_Coeff_Sum(n//2 + 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 1): return 1\n    if (n == 0): return 0\n    if (n < 0): return 0\n    return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the number of distinct ways to divide n\n    n_distinct_ways = 2*n\n    # Calculate the number of ways to divide n\n    n_ways = int(math.sqrt(n_distinct_ways))\n    # Set the sum of even index binomial coefficients to 0\n    sum_even_index_binom_coeffs = 0\n    # Set the sum of odd index binomial coefficients to 0\n    sum_odd_index_binom_coeffs = 0\n    # For every index n/2 \n    for index_n_2 in range(0, n_distinct_ways, 2):\n        # Set the sum of even index binomial coefficients\n        sum_even_index_binom_coeffs += even_binomial_Coeff_Sum(n-index_n_2*2)\n    # For every index n/4\n    for index_n_4 in range(0, n_distinct_ways, 4):\n        # Set the sum of odd index binomial coefficients\n        sum_odd_index_binom_coeffs += odd_binomial_Coeff_Sum(n-index_n_4*4)\n    # Return the sum of even index binomial coefficients \n    return sum_even_index_binom_coeffs\ndef even_binomial_Coeff_Sum_Iter(n):\n    '''\n    Return the sum of even index binomial coefficients.\n    '''\n    # n_2 = 2 * n / 2\n    # n_4 = 4 * n / 4\n    # n_6 = 6 * n / 6\n    n_distinct_ways = 2*n\n    sum_even_index_binom_coeffs = 0\n    # Set the sum of even index binomial coefficients\n    for index_n_2 in range(0, n_distinct_ways, 2):\n        # Set the sum of even index binomial coefficients\n        sum_even_index_binom_coeffs += even_binomial_Coeff_Sum(n-index_n_2*2)\n    # Set the sum of odd index binomial coefficients\n    for index_n_4 in range(0, n_distinct_ways, 4):\n        # Set the sum of odd index binomial coefficients\n        sum_odd_index_binom_coeffs += odd_binomial_Coeff_Sum(n-index_n_4*4)\n    return sum_even_index_binom_coeffs\ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Return the sum of odd index binomial coefficients.\n    '''\n    # n_2 = 2 * n / 2\n    # n_4 = 4 * n / 4\n    # n_6 = 6 * n / 6\n    n_distinct_ways = 2*n\n    sum_odd_index_binom_coeffs = 0\n    # Set the sum of odd index binomial coefficients\n    for index_n_2 in range(0, n_distinct_ways, 2):\n        # Set the sum of odd index binomial coefficients\n        sum_odd_index_binom_coeffs += odd_binomial_Coeff_Sum(n-index_n_2*2)\n    # Set the sum of even index binomial coefficients\n    for index_n_4 in range(0, n_distinct_ways, 4):\n        # Set the sum of even index binomial coefficients\n        sum_even_index_binom_coeffs += even_binomial_Coeff_Sum(n-index_n_4*4)\n    return sum_odd_index_binom_coeffs\ndef binomial_Coeff_Sum_Iter(n):\n    '''\n    Return the sum of binomial coefficients.\n    '''\n    n_distinct_ways = 2*n\n    sum_even_index_binom_coeffs = 0\n    sum_odd_index_binom_coeffs = 0\n    # Set the sum of even index binomial coefficients\n    for index_n_2 in range(0, n_distinct_ways, 2):\n        # Set the sum of even index binomial coefficients\n        sum_even_index_binom_coeffs += even_binomial_Coeff_Sum(n-index_n_2*2)\n    # Set the sum of odd index binomial coefficients\n    for index_n_4 in range(0, n_distinct_ways, 4):\n        # Set the sum of odd index binomial coefficients\n        sum_odd_index_binom_coeffs += odd_binomial_Coeff_Sum(n-index_n_4*4)\n    return sum_even_index_binom_coeffs + sum_odd_index_binom_coeffs\ndef binomial_Coeff_Sum(n):\n    '''\n    Return the sum of binomial coefficients.\n    '''\n    # n_2 = 2 * n / 2\n    # n_4 = 4 * n / 4\n    # n_6 = 6 * n / 6\n    n_distinct_ways = 2*n\n    sum_even_index_binom_coeffs = 0\n    sum_odd_index_binom_coeffs = 0\n    # Set the sum of even index binomial coefficients\n    for index_n_2 in range(0, n_distinct_ways, 2):\n        # Set the sum of even index binomial coefficients\n        sum_even_index_binom_coeffs += even_binomial_Coeff_Sum(n-index_n_2*2)\n    # Set the sum of odd index binomial coefficients\n    for index_n_4 in range(0, n_distinct_ways, 4):\n        # Set the sum of odd index binomial coefficients\n        sum_odd_index_binom_coeffs += odd_binomial_Coeff_Sum(n-index_n_4*4)\n    return sum_even_index_binom_coeffs + sum_odd_index_binom_coeffs\ndef create_list_of_numbers(limit):\n    '''\n    Creates a list of numbers from 1 to limit\n    '''\n    # Create the list of numbers\n    lst = []\n    # For each number in 1 to limit\n    for num in range(1, limit + 1):\n        # Append the number to the list\n        lst.append(num)\n    # Return the list of numbers\n    return lst\ndef create_list_of_numbers2(limit):\n    '''\n    Creates a list of numbers from 1 to limit\n    '''\n    # Create the list of numbers\n    lst = []\n    # For each number in 1 to limit\n    for num in range(1, limit + 1):\n        # Append the number to the list\n        lst.append(num)\n    # Return the list of numbers\n    return lst\ndef create_list_of_numbers3(limit):\n    '''\n    Creates a list of numbers from 1 to limit\n    '''\n    # Create the list of numbers\n    lst = []\n    # For each number in 1 to limit\n    for num in range(1, limit + 1):\n        # Append the number to the list\n        lst.append(num)\n    # Return the list of numbers\n    return lst\ndef create_list_of_numbers4(limit):\n    '''\n    Creates a list of numbers from 1 to limit\n    '''\n    # Create the list of numbers\n    lst = []\n    # For each number in 1 to limit\n    for num in range(1, limit + 1):\n        # Append the number to the list\n        lst.append(num)\n    # Return the list of numbers\n    return lst\ndef create_list_of_numbers5(limit):\n    '''\n    Creates a list of numbers from 1 to limit\n    '''\n    # Create the list of numbers\n    lst = []\n    # For each number in 1 to limit\n    for num in range(1, limit + 1):\n        # Append the number to the list\n        lst.append(num)\n    # Return the list of numbers\n    return lst\ndef create_list_of_numbers6(limit):\n    '''\n    Creates a list of numbers from 1 to limit\n    '''\n    # Create the list of numbers\n    lst = []"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n<=1:\n        return n\n    else:\n        even_coeff_sum = n - even_binomial_Coeff_Sum(n//2)\n        odd_coeff_sum = n - even_binomial_Coeff_Sum(n//2)\n        \n        return even_coeff_sum + odd_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_binomial_coeff = 0\n    for i in range(1, n + 1):\n        sum_binomial_coeff = sum_binomial_coeff + math.binomial(i, 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return n*((n+1)/2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0 : return 0\n    if n == 1 : return 1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # n = input number to find the sum of even index binomail coefficients.\n    # n = 5\n    # n = 2\n    # n = 3\n    # n = 4\n    # n = 5\n    # n = 6\n    # n = 7\n    # n = 8\n    # n = 9\n    # n = 10\n    # n = 11\n    # n = 12\n    # n = 13\n    # n = 14\n    # n = 15\n    # n = 16\n    # n = 17\n    # n = 18\n    # n = 19\n    # n = 20\n    # n = 21\n    # n = 22\n    # n = 23\n    # n = 24\n    # n = 25\n    # n = 26\n    # n = 27\n    # n = 28\n    # n = 29\n    # n = 30\n    # n = 31\n    # n = 32\n    # n = 33\n    # n = 34\n    # n = 35\n    # n = 36\n    # n = 37\n    # n = 38\n    # n = 39\n    # n = 40\n    # n = 41\n    # n = 42\n    # n = 43\n    # n = 44\n    # n = 45\n    # n = 46\n    # n = 47\n    # n = 48\n    # n = 49\n    # n = 50\n    # n = 51\n    # n = 52\n    # n = 53\n    # n = 54\n    # n = 55\n    # n = 56\n    # n = 57\n    # n = 58\n    # n = 59\n    # n = 60\n    # n = 61\n    # n = 62\n    # n = 63\n    # n = 64\n    # n = 65\n    # n = 66\n    # n = 67\n    # n = 68\n    # n = 69\n    # n = 70\n    # n = 71\n    # n = 72\n    # n = 73\n    # n = 74\n    # n = 75\n    # n = 76\n    # n = 77\n    # n = 78\n    # n = 79\n    # n = 80\n    # n = 81\n    # n = 82\n    # n = 83\n    # n = 84\n    # n = 85\n    # n = 86\n    # n = 87\n    # n = 88\n    # n = 89\n    # n = 90\n    # n = 91\n    # n = 92\n    # n = 93\n    # n = 94\n    # n = 95\n    # n = 96\n    # n = 97\n    # n = 98\n    # n = 99\n    # n = 100\n    # n = 101\n    # n = 102\n    # n = 103\n    # n = 104\n    # n = 105\n    # n = 106\n    # n = 107\n    # n = 108\n    # n = 109\n    # n = 110\n    # n = 111\n    # n = 112\n    # n = 113\n    # n = 114\n    # n = 115\n    # n = 116\n    # n = 117\n    # n = 118\n    # n = 119\n    # n = 120\n    # n = 121\n    # n = 122\n    # n = 123\n    # n = 124\n    # n = 125\n    # n = 126\n    # n = 127\n    # n = 128\n    # n = 129\n    # n = 130\n    # n = 131\n    # n = 132\n    # n = 133\n    # n = 134\n    # n = 135\n    # n = 136\n    # n = 137\n    # n = 138\n    # n = 139\n    # n = 140\n    # n = 141\n    # n = 142\n    # n = 143\n    # n = 144\n    # n = 145\n    # n = 146\n    # n = 147\n    # n = 148\n    # n = 149\n    # n = 150\n    # n = 151\n    # n = 152\n    # n = 153\n    # n = 154\n    # n = 155\n    # n = 156\n    # n = 157\n    # n = 158\n    # n = 159\n    # n = 160\n    # n = 161\n    # n = 162\n    # n = 163\n    # n = 164\n    # n = 165\n    # n = 166\n    # n = 167\n    # n = 168\n    # n = 169\n    # n = 170\n    # n = 171\n    # n = 172\n    # n = 173\n    # n = 174\n    # n = 175\n    # n = 176\n    # n = 177\n    # n = 178\n    # n = 179\n    # n = 180\n    # n = 181\n    # n = 182\n    # n = 183\n    # n = 184\n    # n = 185\n    # n = 186\n    # n = 187\n    # n = 188\n    # n = 189\n    # n = 190\n    # n = 191\n    # n = 192\n    # n = 193\n    # n = 194\n    # n = 195\n    # n = 196\n    # n = 197\n    # n = 198\n    # n = 199\n    # n = 200\n    # n = 201\n    # n = 202\n    # n = 203\n    # n = 204\n    # n = 205\n    # n = 206\n    # n = 207\n    # n = 208\n    # n = 209\n    # n = 210\n    # n = 211\n    # n = 212\n    # n = 213\n    # n = 214\n    # n = 215\n    # n = 216\n    # n = 217\n    # n = 218\n    # n = 219\n    # n = 220\n    # n = 221\n    # n = 222\n    # n = 223\n    # n = 224\n    # n = 225\n    # n = 226\n    # n = 227\n    # n = 228\n    # n = 229\n    # n = 230\n    # n = 231\n    # n = 232\n    # n = 233\n    # n = 234\n    # n = 235\n    # n = 236\n    # n = 237\n    # n = 238\n    # n = 239\n    # n = 240\n    # n = 241\n    # n = 242\n    # n = 243\n    # n = 244\n    # n = 245\n    # n = 246\n    # n = 247\n    # n = 248\n    # n = 249\n    # n = 250\n    # n = 251\n    # n = 252\n    # n = 253\n    # n = 254\n    # n = 255\n    # n = 256\n    # n = 257\n    # n = 258\n    # n = 259\n    # n = 260\n    # n = 261\n    # n = 262\n    # n = 263\n    # n = 264\n    # n = 265\n    # n = 266\n    # n = 267\n    # n = 268\n    # n = 269\n    # n = 270\n    # n = 271\n    # n = 272\n    # n = 273\n    # n = 274\n    # n = 275\n    # n = 276\n    # n = 277\n    # n = 278\n    # n = 279\n    # n = 280\n    # n = 281\n    # n = 282\n    # n = 283\n    # n = 284\n    # n = 285\n    # n = 286\n    # n = 287\n    # n = 288\n    # n = 289\n    # n = 290\n    # n = 291\n    # n = 292\n    # n = 293\n    # n = 294\n    # n = 295\n    # n = 296\n    # n = 297\n    # n = 298\n    # n = 299\n    # n = 300\n    # n = 301\n    # n = 302\n    # n = 303\n    # n = 304\n    # n = 305\n    # n = 306\n    # n = 307\n    # n = 308\n    # n = 309\n    # n = 310\n    # n = 311\n    # n = 312\n    # n = 313\n    # n = 314\n    # n = 315\n    # n = 316\n    # n = 317\n    # n = 318\n    # n = 319\n    # n = 320\n    # n = 321\n    # n = 322\n    # n = 323\n    # n = 324\n    # n = 325\n    # n = 326\n    # n = 327\n    # n = 328\n    # n = 329\n    # "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    r=float(r)\n    h=float(h)\n    print(\"Volume is\",(4/3)*pi*r*h)\n    return(4/3)*pi*r*h"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4 * pi * r**2 * h**2\n    print(volume)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 4/3*math.pi*r**3\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.141592653589793*(r**2)*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*4\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return h*3.14159*r*r\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4 * 3.14 * r * h\n    return volume\n    "
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(f'The volume of a cylinder with radius {r} and height {h} is : {volume_cylinder(r,h)}')\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = dict.copy()\n    for key in result:\n        if result[key] >= n:\n            result.pop(key)\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if isinstance(dict, dict):\n        filtered_dict = {}\n        for entry in dict:\n            if entry <= n:\n                filtered_dict[entry] = dict[entry]\n        return filtered_dict\n    else:\n        raise ValueError(\"Input is not a dictionary\")\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key,value in dict.items():\n        if key >= n:\n            filtered[key] = value\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered[key] = value\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value > n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    temp = {}\n    for key, value in dict.items():\n        temp[key] = value\n        if value >= n:\n            temp.pop(key)\n    return temp\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = dict.copy()\n    for key,value in filtered_dict.items():\n        if value > n:\n            filtered_dict.pop(key)\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.copy()\n    #return dict.copy().difference(dict.fromkeys(list(n)))\n    #return dict.difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).union(dict.fromkeys(list(n)).difference(dict.fromkeys(list(n)).unio"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code here\n    l = len(test_tup[0])\n    for i in range(l):\n        for j in range(l):\n            if test_tup[0][i] >= test_tup[1][j]:\n                return i-j-1\n    return 0\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    # your code here\n    l = len(test_tup[0])\n    for i in range(l-1, -1, -1):\n        for j in range(l):\n            if test_tup[1][j] >= test_tup[0][i]:\n                return i\n    return 0\ndef count_repeat_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs two times before the tuple element in the given tuple.\n    '''\n    # your code here\n    l = len(test_tup[0])\n    i = 0\n    for i in range(l):\n        for j in range(l):\n            if test_tup[0][i] > test_tup[1][j]:\n                break\n        else:\n            continue\n        break\n    return i-j-1\ndef count_first_occurrences(test_tup):\n    '''\n    Write a function to find the number of elements that occur the first time in the given tuple.\n    '''\n    # your code here\n    l = len(test_tup[0])\n    i = 0\n    for i in range(l):\n        if test_tup[0][i] == test_tup[0][i-1]:\n            i += 1\n        else:\n            break\n    return i\ndef count_last_occurrences(test_tup):\n    '''\n    Write a function to find the number of elements that occur the last time in the given tuple.\n    '''\n    # your code here\n    l = len(test_tup[0])\n    i = l-1\n    for i in range(l):\n        if test_tup[0][i] == test_tup[0][i+1]:\n            i -= 1\n        else:\n            break\n    return i\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    if len(test_tup)!= 1:\n        for i in range(len(test_tup)):\n            if test_tup[i] < test_tup[0]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    len = 0\n    for elem in test_tup:\n        if elem == test_tup[0]:\n            len += 1\n        else:\n            pass\n    return len\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    elements = tuple(test_tup)\n    first = elements[0]\n    count = 0\n    for i in elements:\n        if i == first:\n            count += 1\n        if count > 1:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    elements_list = []\n    i = 0\n    while i < len(test_tup):\n        if test_tup[i] == test_tup[0]:\n            elements_list.append(i)\n        i += 1\n    return elements_list[0]\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for i in range(len(test_tup)):\n        if(test_tup[i][1]<test_tup[i][0]):\n            count+=1\n    return count\ndef first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for i in range(len(test_tup)):\n        if(test_tup[i][0]<test_tup[i][1]):\n            count+=1\n    return count\ndef find_type_of_element(test_tup):\n    '''\n    Write a function to find the type of the element in the given tuple.\n    '''\n    return test_tup[0][1]\ndef find_type_of_index(test_tup):\n    '''\n    Write a function to find the type of the element in the given tuple.\n    '''\n    return test_tup[len(test_tup)-1][1]\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pos = 0\n    lenght = len(test_tup)\n    while pos < lenght:\n        if test_tup[pos] == test_tup[pos + 1]:\n            pos += 2\n        else:\n            pos += 1\n    return pos + 1"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    if len(test_tup) == 1:\n        return 0\n    \n    count = 0\n    for i in range(1, len(test_tup)):\n        if test_tup[i - 1] == test_tup[i]:\n            count = count + 1\n    \n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    else:\n        return 1 + count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup[0] == test_tup[1]:\n        return 2\n    else:\n        count = 0\n        for i in range(len(test_tup) - 1):\n            if test_tup[i] == test_tup[i + 1]:\n                count += 1\n        return count\n    "
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_dec = 1\n    if n == 0: \n        return 0\n    else: \n        while (n-1) % num_dec == 0:\n            n -= 1\n            num_dec += 1\n        return num_dec \n        \ndef is_num_palin(n): \n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    num_pal = 1\n    if n == 0: \n        return False\n    else: \n        while (n-1) % 2 == 0: \n            n -= 1\n            num_pal += 1\n        while (n-1) % 2!= 0: \n            n -= 1\n            num_pal += 1\n        return num_pal == n \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num_list = []\n    i = 1\n    while i < n:\n        print(i)\n        num_list.append(i)\n        i += 1\n    num_list.reverse()\n    print(num_list)\n    print(len(num_list))\n    return num_list[-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return n\n    elif n == 1: \n        return 1\n    else: \n        return is_num_decagonal(n-1) + is_num_decagonal(n-2) \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0 or n==1:\n        return 1\n    elif n>1:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = n\n    while n > 1:\n        n -= 1\n        if n % 2 == 1:\n            result = n // 2\n            break\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n // 2\n    else:\n        return n - 1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    start = 1\n    end = n\n    while start <= end:\n        mid = (start + end) // 2\n        if is_num_decagonal(mid):\n            end = mid\n        else:\n            start = mid + 1\n    return start\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n=abs(n)\n    return n<0 and n==1 or (n>=0 and n%2==0 and n%3==0)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n//3 + (n%3)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i,e in enumerate(dlist):\n        if e == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # return_index = (False, -1)\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    # return return_index\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for index, value in enumerate(dlist):\n        if value == item:\n            pos = index\n            found = True\n    return (found, pos)\n    "
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Loop through the array and compare each element to each element in the array to determine if the element is present. If it is present return the index position.\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            pos = i\n            return (True, pos)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    from collections import Counter\n    counter = Counter(test_list)\n    if not counter.values() == 1:\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    from collections import Counter\n    return Counter(test_list) == Counter(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #Code here\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set()\n    for item in test_list:\n        if item not in test_set:\n            test_set.add(item)\n    return len(test_set) == len(set(test_set)"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 1:\n        return True\n    else:\n        for i in test_list:\n            if i in test_list:\n                return False\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    all_list = []\n    for i in test_list:\n        all_list.append(i)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Write your code here\n    count = len(set(test_list))\n    if count == len(test_list):\n        return True\n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    from collections import Counter\n    from itertools import combinations\n    cnt = Counter(test_list)\n    res = [k for k,v in cnt.items() if v==1]\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    i,j = len(nums1)-1, len(nums2)-1\n    nums1.append(0)\n    nums2.append(0)\n    while i>=0 and j>=0:\n        if nums1[i] == nums2[j]:\n            nums1.pop(i)\n            nums2.pop(j)\n            i-=1\n            j-=1\n            continue\n        elif nums1[i] > nums2[j]:\n            i -= 1\n        else:\n            j -= 1\n    return nums1[::-1],nums2[::-1]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return None\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    if len(nums2) < len(nums1):\n        nums2,nums1 = nums1,nums2\n    for i in range(len(nums2)):\n        new_list.append(nums2[i]-nums1[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # sub_list = []\n    # for i in range(len(nums1)):\n    #     sub_list.append(nums1[i] - nums2[i])\n    \n    sub_list = []\n    for i in range(len(nums1)):\n        # sub_list.append(nums1[i]-nums2[i])\n        if nums1[i] == nums2[i]:\n            sub_list.append(nums1[i])\n        else:\n            sub_list.append(nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Your code here\n    return nums1\n    \n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Your code here\n    return nums1[:len(nums2)]-nums2[:len(nums1)]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return map(lambda x,y: x-y,nums1,nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    numbers = []\n    for i in str(n):\n        numbers.append(int(i))\n    print(numbers)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # test your code here\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # CODE\n    counter = 0\n    for num in str(n):\n        if not num.isdigit():\n            return False\n        if int(num) < 10:\n            return False\n        else:\n            counter+=1\n    if counter == len(str(n)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0:\n        raise ValueError('Input must be positive')\n    digitCount = [0] * 10\n    for i in range(0, n):\n        digitCount[int(str(i)[-1])] += 1\n    for i in range(0, n):\n        if digitCount[i] < 1:\n            raise ValueError('Input must be positive')\n    return digitCount\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def is_valid(num): \n        if not(type(num) is int): \n            raise TypeError('Input must be an integer')\n        if num < 0: \n            raise ValueError('Input must be >= 0')\n        if (num % 10) == 0: \n            return num\n        else: \n            return \"This is not a valid number\"\n    try: \n        ans = is_valid(n) \n        if ans!= \"This is not a valid number\": \n            print(ans)\n    except ValueError as e: \n        print(e)\nn=int(input())\nis_valid(n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #Iterate through each digit and check that it is lower than or equal to the number in the dictionary \n    total = 0\n    for i in range(n):\n        total += int(i)\n    for k in range(n):\n        if int(k) >= total:\n            return(False)\n    return(True)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(n) < 10: \n        return \"Please enter a whole number greater than or equal to 10 digits\"\n    if len(n) > 10: \n        return \"Please enter a whole number less than or equal to 10 digits\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if(n<10): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        print('Element not found')\n        return False\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n    \ndef element_exists(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether the list contains the element given.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return True\n    return False\n    \ndef check_index(list,index):\n    '''\n    Write a function that takes in a list and index and checks whether the index value is within the list.\n    '''\n    if index < len(list):\n        return True\n    else:\n        return False\n    \ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and element and deletes the element from the list.\n    '''\n    if element_exists(list,element):\n        list.pop(element)\n    else:\n        print('Element not found')\n    return True\n    \ndef delete_element_at(list,element):\n    '''\n    Write a function that takes in a list and element and deletes the element at the given index.\n    '''\n    if element_exists(list,element):\n        index = int(input('Enter the index: '))\n        if check_index(list,index):\n            if delete_element(list,list[index]):\n                print('Deleted')\n            else:\n                print('Element not found')\n        else:\n            print('Index value is invalid')\n    else:\n        print('Element not found')\n    \ndef find_index(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether the element is in the list.\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            return i\n    else:\n        return -1\n    \ndef index_exists(list,index):\n    '''\n    Write a function that takes in a list and index and checks whether the index value is within the list.\n    '''\n    for i in range(len(list)):\n        if list[i] == index:\n            return True\n    else:\n        return False\n    \ndef count_elements(list):\n    '''\n    Write a function that takes in a list and returns the number of elements in the list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if element_exists(list,list[i]):\n            count += 1\n    print(count)\n    \ndef find_elements(list):\n    '''\n    Write a function that takes in a list and returns a list with the elements of the list in alphabetical order.\n    '''\n    list_copy = list[:]\n    list_copy.sort()\n    return list_copy\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not list:\n        return False\n    if len(list) == 1 and element == list[0]:\n        return True\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == None:\n        return None\n    else:\n        for item in list:\n            if item!= element:\n                return False\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if(item!= element):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    def check(l,e):\n        for i in range(len(l)):\n            if l[i]!= e:\n                return False\n        return True\n    return check\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    element_set = set(list)\n    if element in element_set:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    # Note: you don't need to worry about the situation where a string starts with 'A' and ends with 'B', or it's not a string.\n    #       But you don't want to worry about the situation where a string is very short, and you only have a few 'b' characters\n    #       and that doesn't mean you're looking at a string that starts with 'A' and ends with 'B'.\n    #       You need to make sure that you only use lowercase letters, not uppercase letters.\n    #       You may not use any punctuation marks that might be used in your text, such as whitespace and case.\n    #       You will have to check whether the string is \"happy\".\n    #\n    #      .. coding: utf-8.\n    #\n    #       Ouput:\n    #       -> The function should return the string \"happy\".\n    #       >>> text_match_two_three('I like this')\n    #       'I like this'\n    #       >>> text_match_two_three('I am my ass')\n    #       'I am my ass'\n    #       >>> text_match_two_three('This is good!')\n    #       'This is good!'\n    #       >>> text_match_two_three('I like this')\n    #       'I like this'\n    #       >>> text_match_two_three('I am my ass')\n    #       'I am my ass'\n    #       >>> text_match_two_three('This is good!')\n    #       'This is good!'\n    #       >>> text_match_two_three('I like this')\n    #       'I like this'\n    #       >>> text_match_two_three('I am my ass')\n    #       'I am my ass'\n    #       >>> text_match_two_three('This is good!')\n    #       'This is good!'\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a = ''\n    b = ''\n    #check if the first character is a \n    if text[0] == 'a':\n        a = 'a'\n        #check if the second character is a\n        if text[1] == 'a':\n            b = 'a'\n        #check if the third character is a\n        if text[2] == 'a':\n            b = 'a'\n    #check if the first character is a \n    elif text[0] == 'b':\n        a = 'b'\n        #check if the second character is a\n        if text[1] == 'b':\n            b = 'b'\n        #check if the third character is a\n        if text[2] == 'b':\n            b = 'b'\n    #check if the first character is a \n    elif text[0] == 'c':\n        a = 'c'\n        #check if the second character is a\n        if text[1] == 'c':\n            b = 'c'\n        #check if the third character is a\n        if text[2] == 'c':\n            b = 'c'\n    #check if the first character is a \n    elif text[0] == 'd':\n        a = 'd'\n        #check if the second character is a\n        if text[1] == 'd':\n            b = 'd'\n        #check if the third character is a\n        if text[2] == 'd':\n            b = 'd'\n    #check if the first character is a \n    elif text[0] == 'e':\n        a = 'e'\n        #check if the second character is a\n        if text[1] == 'e':\n            b = 'e'\n        #check if the third character is a\n        if text[2] == 'e':\n            b = 'e'\n    #check if the first character is a \n    elif text[0] == 'f':\n        a = 'f'\n        #check if the second character is a\n        if text[1] == 'f':\n            b = 'f'\n        #check if the third character is a\n        if text[2] == 'f':\n            b = 'f'\n    #check if the first character is a \n    elif text[0] == 'g':\n        a = 'g'\n        #check if the second character is a\n        if text[1] == 'g':\n            b = 'g'\n        #check if the third character is a\n        if text[2] == 'g':\n            b = 'g'\n    #check if the first character is a \n    elif text[0] == 'h':\n        a = 'h'\n        #check if the second character is a\n        if text[1] == 'h':\n            b = 'h'\n        #check if the third character is a\n        if text[2] == 'h':\n            b = 'h'\n    #check if the first character is a \n    elif text[0] == 'i':\n        a = 'i'\n        #check if the second character is a\n        if text[1] == 'i':\n            b = 'i'\n        #check if the third character is a\n        if text[2] == 'i':\n            b = 'i'\n    #check if the first character is a \n    elif text[0] == 'j':\n        a = 'j'\n        #check if the second character is a\n        if text[1] == 'j':\n            b = 'j'\n        #check if the third character is a\n        if text[2] == 'j':\n            b = 'j'\n    #check if the first character is a \n    elif text[0] == 'k':\n        a = 'k'\n        #check if the second character is a\n        if text[1] == 'k':\n            b = 'k'\n        #check if the third character is a\n        if text[2] == 'k':\n            b = 'k'\n    #check if the first character is a \n    elif text[0] == 'l':\n        a = 'l'\n        #check if the second character is a\n        if text[1] == 'l':\n            b = 'l'\n        #check if the third character is a\n        if text[2] == 'l':\n            b = 'l'\n    #check if the first character is a \n    elif text[0] =='m':\n        a ='m'\n        #check if the second character is a\n        if text[1] =='m':\n            b ='m'\n        #check if the third character is a\n        if text[2] =='m':\n            b ='m'\n    #check if the first character is a \n    elif text[0] == 'n':\n        a = 'n'\n        #check if the second character is a\n        if text[1] == 'n':\n            b = 'n'\n        #check if the third character is a\n        if text[2] == 'n':\n            b = 'n'\n    #check if the first character is a \n    elif text[0] == 'o':\n        a = 'o'\n        #check if the second character is a\n        if text[1] == 'o':\n            b = 'o'\n        #check if the third character is a\n        if text[2] == 'o':\n            b = 'o'\n    #check if the first character is a \n    elif text[0] == 'p':\n        a = 'p'\n        #check if the second character is a\n        if text[1] == 'p':\n            b = 'p'\n        #check if the third character is a\n        if text[2] == 'p':\n            b = 'p'\n    #check if the first character is a \n    elif text[0] == 'q':\n        a = 'q'\n        #check if the second character is a\n        if text[1] == 'q':\n            b = 'q'\n        #check if the third character is a\n        if text[2] == 'q':\n            b = 'q'\n    #check if the first character is a \n    elif text[0] == 'r':\n        a = 'r'\n        #check if the second character is a\n        if text[1] == 'r':\n            b = 'r'\n        #check if the third character is a\n        if text[2] == 'r':\n            b = 'r'\n    #check if the first character is a \n    elif text[0] =='s':\n        a ='s'\n        #check if the second character is a\n        if text[1] =='s':\n            b ='s'\n        #check if the third character is a\n        if text[2] =='s':\n            b ='s'\n    #check if the first character is a \n    elif text[0] == 't':\n        a = 't'\n        #check if the second character is a\n        if text[1] == 't':\n            b = 't'\n        #check if the third character is a\n        if text[2] == 't':\n            b = 't'\n    #check if the first character is a \n    elif text[0] == 'u':\n        a = 'u'\n        #check if the second character is a\n        if text[1] == 'u':\n            b = 'u'\n        #check if the third character is a\n        if text[2] == 'u':\n            b = 'u'\n    #check if the first character is a \n    elif text[0] == 'v':\n        a = 'v'\n        #check if the second character is a\n        if text[1] == 'v':\n            b = 'v'\n        #check if the third character is a\n        if text[2] == 'v':\n            b = 'v'\n    #check if the first character is a \n    elif text[0] == 'w':\n        a = 'w'\n        #check if the second character is a\n        if text[1] == 'w':\n            b = 'w'\n        #check if the third character is a\n        if text[2] == 'w':\n            b = 'w'\n    #check if the first character is a \n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text)<2:\n        return False\n    if re.search('[a-i]'+'$',text):\n        return True\n    elif re.search('[a-i]'+'b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if text.count('a') == 2 or text.count('b') == 2:\n        return True\n    else:\n        return False\n    \ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or five 'c' characters.\n    '''\n    \n    if text.count('a') == 4 or text.count('b') == 4 or text.count('c') == 4:\n        return True\n    else:\n        return False\n    \ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six or seven 'd' characters.\n    '''\n    \n    if text.count('a') == 6 or text.count('b') == 6 or text.count('c') == 6 or text.count('d') == 6:\n        return True\n    else:\n        return False\n    \ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten or eleven 'e' characters.\n    '''\n    \n    if text.count('a') == 10 or text.count('b') == 10 or text.count('c') == 10 or text.count('d') == 10 or text.count('e') == 10:\n        return True\n    else:\n        return False\n    \ndef text_match_twelve_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve or eleven 'f' characters.\n    '''\n    \n    if text.count('a') == 12 or text.count('b') == 12 or text.count('c') == 12 or text.count('d') == 12 or text.count('e') == 12 or text.count('f') == 12:\n        return True\n    else:\n        return False\n    \ndef text_match_thirteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirteen or eleven 'g' characters.\n    '''\n    \n    if text.count('a') == 13 or text.count('b') == 13 or text.count('c') == 13 or text.count('d') == 13 or text.count('e') == 13 or text.count('f') == 13 or text.count('g') == 13:\n        return True\n    else:\n        return False\n    \ndef text_match_fourteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fourteen or eleven 'h' characters.\n    '''\n    \n    if text.count('a') == 14 or text.count('b') == 14 or text.count('c') == 14 or text.count('d') == 14 or text.count('e') == 14 or text.count('f') == 14 or text.count('g') == 14 or text.count('h') == 14:\n        return True\n    else:\n        return False\n    \ndef text_match_fifteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifteen or eleven 'i' characters.\n    '''\n    \n    if text.count('a') == 15 or text.count('b') == 15 or text.count('c') == 15 or text.count('d') == 15 or text.count('e') == 15 or text.count('f') == 15 or text.count('g') == 15 or text.count('h') == 15 or text.count('i') == 15:\n        return True\n    else:\n        return False\n    \ndef text_match_sixteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by sixteen or eleven 'j' characters.\n    '''\n    \n    if text.count('a') == 16 or text.count('b') == 16 or text.count('c') == 16 or text.count('d') == 16 or text.count('e') == 16 or text.count('f') == 16 or text.count('g') == 16 or text.count('h') == 16 or text.count('i') == 16 or text.count('j') == 16:\n        return True\n    else:\n        return False\n    \ndef text_match_seventeen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seventeen or eleven 'k' characters.\n    '''\n    \n    if text.count('a') == 17 or text.count('b') == 17 or text.count('c') == 17 or text.count('d') == 17 or text.count('e') == 17 or text.count('f') == 17 or text.count('g') == 17 or text.count('h') == 17 or text.count('i') == 17 or text.count('j') == 17 or text.count('k') == 17:\n        return True\n    else:\n        return False\n    \ndef text_match_eighteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eighteen or eleven 'l' characters.\n    '''\n    \n    if text.count('a') == 18 or text.count('b') == 18 or text.count('c') == 18 or text.count('d') == 18 or text.count('e') == 18 or text.count('f') == 18 or text.count('g') == 18 or text.count('h') == 18 or text.count('i') == 18 or text.count('j') == 18 or text.count('k') == 18:\n        return True\n    else:\n        return False\n    \ndef text_match_nineteen_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nineteen or eleven 'o' characters.\n    '''\n    \n    if text.count('a') == 19 or text.count('b') == 19 or text.count('c') == 19 or text.count('d') == 19 or text.count('e') == 19 or text.count('f') == 19 or text.count('g') == 19 or text.count('h') == 19 or text.count('i') == 19 or text.count('j') == 19 or text.count('k') == 19 or text.count('o') == 19:\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twenty or eleven 'p' characters.\n    '''\n    \n    if text.count('a') == 20 or text.count('b') == 20 or text.count('c') == 20 or text.count('d') == 20 or text.count('e') == 20 or text.count('f') == 20 or text.count('g') == 20 or text.count('h') == 20 or text.count('i') == 20 or text.count('j') == 20 or text.count('k') == 20 or text.count('p') == 20:\n        return True\n    else:\n        return False\n    \ndef text_match_thirty_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirty or eleven 'q' characters.\n    '''\n    \n    if text.count('a') == 21 or text.count('b') == 21 or text.count('c') == 21 or text.count('d') == 21 or text.count('e') == 21 or text.count('f') == 21 or text.count('g') == 21 or text.count('h') == 21 or text.count('i') == 21 or text.count('j') == 21 or text.count('k') == 21 or text.count('q') == 21:\n        return True\n    else:\n        return False\n    \ndef text_match_fourty_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or eleven 'r' characters.\n    '''\n    \n    if text.count('a') == 22 or text.count('b') == 22 or text.count('c') == 22 or text.count('d') == 22 or text.count('e') == 22 or text.count('f') == 2"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'^([\\w]+)\\*\\w*$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'^a(?:[bc])\\1?b(?:[bc])\\1?'\n    return pattern.match(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\b')\n    return bool(pattern.search(text))\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_two_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_three_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_four_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_four_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_four_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_four_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b', text)\n    return len(x)>0\n    \ndef text_match_four_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.findall(r'(a){0,1}b'"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return any(char in text for char in ['ab','abc'])\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Test case #1\n    if(len(text) < 2):\n        return True\n    # Test case #2\n    if(text[0] == 'a' and text[1] == 'b'):\n        return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    for i in range(n):\n        a[i] = a[i] + a[i+k]\n        if a[i] > max_sum:\n            max_sum = a[i]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return 0\n    \n    res = 0\n    for i in range(k, len(a)):\n        res += a[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return 0\n    else:\n        d = {}\n        for i in range(k):\n            temp = 0\n            for j in range(n):\n                temp += a[j]\n            d[temp] = 1\n        result = 0\n        for i in range(k):\n            result += d[a[i]]*d[a[i+k]]\n        return result\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    dp = [[0 for x in range(k+1)] for y in range(n)]\n    for i in range(n):\n        for j in range(k):\n            dp[i][j] = a[i]\n            if j >= 1:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i])\n    return dp[-1][-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_array_sum = []\n    for i in range(k):\n        sub_array_sum.append(a[i] * k)\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i] * sub_array_sum[i]\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Step 1 : Initialize Sum = 0\n    Sum = 0\n    \n    # Step 2 : Repeat array k times and store sum\n    for i in range(k):\n        Sum = Sum + a[i]\n    \n    # Step 3 : Return the maximum sum\n    return Sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #Base case\n    if n == 0:\n        return 0\n    \n    #Initilize the new list\n    new_list = []\n    \n    #Iterate through the list\n    for i in range(k):\n        #append the new array to the list\n        new_list.append(a[0])\n        #extend the list\n        a = a[1:]\n        \n    #Get the sum of the new array\n    sum = 0\n    for i in range(k):\n        sum += new_list[i]\n    \n    #Return the maximum\n    return max(sum, new_list[-1])\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(k): \n        a[i] = a[i] + a[i+1] \n    i = 0\n    j = 0\n    m = 0 \n    while (j < n and i < n): \n        m = a[i] \n        j = i+1 \n        while (j < n and m < a[j]): \n            j = j+1 \n        if (j == n): \n            i = i+1\n            j = 0\n        else: \n            i = j \n            j = j+1 \n    return a[i] \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    m = a[0]\n    k = k + 1\n    max_sum = m\n    while(i <= n):\n        m = a[i]\n        j = 1\n        while(j <= k):\n            if(m <= 0):\n                return max_sum\n            m = m - a[i]\n            j = j + 1\n        k = k + 1\n        max_sum = max(max_sum,m)\n        i = i + 1\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    print(\"Calculating the sum of squares of first\", n, \"numbers...\")\n    return sum([(i)**2 for i in range(1, n+1) if i%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * n + square_Sum(n-1)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    a = n*(n+1)/2\n    return a\n    \nn = int(input(\"Enter an integer :\"))\nprint(square_Sum(n)"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # return square_of_squares(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1,2):\n        s += i**2\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * n + square_sum(n - 1)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n + 1):\n        if i % 2 == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    i = 1\n    while i <= n:\n        result = result + i * i\n        i = i + 1\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = len(list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        for j in i:\n            if j not in new_list:\n                new_list.append(j)\n    print(new_list)\n    return new_list[0]\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = list1[0][0]\n    for i in range(1, len(list1)):\n        if max < list1[i][0]:\n            max = list1[i][0]\n    return max\n    \n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    # Create a blank list\n    max_length = []\n    \n    # Iterate through each list\n    for i in range(len(list1)):\n        \n        # iterate through each item in list\n        for j in range(len(list1[i])):\n            \n            # find the length of the list\n            length = len(list1[i][j])\n            \n            # append length to the max_length list\n            if length > len(max_length):\n                max_length = [length]\n            \n            # append the length to the length list\n            elif length == len(max_length):\n                max_length.append(length)\n                \n            # if length is bigger, append it to max_length\n            else:\n                max_length.append(max(length, len(max_length)))\n                \n    # Return the length of the longest list\n    return max(max_length)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Write your code here\n    if len(list1) == 0:\n        return 0\n    else:\n        for element in list1:\n            if len(element) > len(list1[0]):\n                list1 = element\n        return len(list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for list1_item in list1:\n        if len(str(list1_item)) > max_len:\n            max_len = len(str(list1_item))\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If the fence has only 1 or 2 posts, return 1\n    if n<=2 or k<=2: return 1\n    # If the fence has only 3 or 4 posts, return 1\n    if n>=3 or k>=3: return 1\n    # If the fence has only 2 posts and one adjacent post with the same color\n    if n>=2 and k==2: return 2\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def calculate_ways(n, k):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n > 2:\n            return 0\n        ways = 0\n        for i in range(n-1):\n            ways += calculate_ways(n-2, k) + 1\n        ways += calculate_ways(n-2, k)\n        return ways\n    return calculate_ways(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Create dictionary\n    dic = {}\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            dic[(i, j)] = 1 + dic.get((i, j), 0)\n            dic[(j, i)] = 1 + dic.get((j, i), 0)\n    \n    # Create list\n    ways = []\n    for i in range(1, n + 1):\n        ways.append(dic[(i, n + 1)])\n    ways.append(0)\n    \n    # Create count\n    count = 0\n    \n    # Loop through the list\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j!= i:\n                if j + i in ways:\n                    count += ways[j + i]\n    \n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1 or n == k:\n        return 1\n    elif n == 2:\n        return 2\n    elif k == 2:\n        return 3\n    else:\n        return count_no_of_ways(n - 1, k - 1) + count_no_of_ways(n - 2, k - 1) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # your code goes here\n    def count_ways(k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return (count_ways(k-1) + count_ways(k))\n    return count_ways(k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: return n\n    if k < n: return n\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2: \n        return n\n    if n == 2 or k == 1: \n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Step 1: initialization\n    if n <= 0 or k <= 0: \n        return 0\n    # Step 2: find the closest number of ways for a fence of n posts and k colors\n    # the number of ways is the number of ways that the fence is painted with the same color\n    # for i = 0 to n-1\n    # i = 0 to k-1\n    # i = 0 to k-1\n    # i = 0 to n-1\n    # i = 0 to k-1\n    # i = 0 to n-1\n    # i = 0 to k-1\n    ways_per_col = 0\n    for i in range(n): \n        for j in range(k):\n            if j == k-1 or i == j:\n                continue\n            if i == 0 or j == 0:\n                ways_per_col += 1\n                continue\n            if i == 0: \n                ways_per_col += count_no_of_ways(n-1, k-1)\n                continue\n            if i == k-1:\n                ways_per_col += count_no_of_ways(n-1, k-1)\n                continue\n            ways_per_col += count_no_of_ways(n-1, k-1)\n            ways_per_col += count_no_of_ways(i, j)\n    return ways_per_col\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # count_ways takes as an argument the fence, n, and k, a tuple of two integers.\n    # The function return a tuple of two integers that is the answer of n ways of painting the fence.\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    #first, check if fence is empty or not\n    if n == 0 or k == 0:\n        return 1\n    \n    #second, check if fence is full or not\n    if n == 1:\n        return 1\n    if k == 1:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m==0):\n        return n\n    else:\n        return find(n,m//2)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<0:\n        n=n*-1\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    #return n/m\n    return n/m\n    \ndef find2(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<0:\n        n=n*-1\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return n/m\n    \n    \ndef main():\n    '''\n    The main program function\n    '''\n    #Taking input\n    n, m = input().split(' ')\n    n,m = int(n), int(m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return m\n    else:\n        return find(n-1,m/10**(n%10))\n    "
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return n\n    return find(n//m,m-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m<0): \n        return -1 # negative numbers aren't valid quotient numbers, which is a mistake\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < 0 or m < 0:\n        return -1\n    elif n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return find(n%10,m%10)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m < n:\n        print(f'The quotient is: {n//m}')\n    else:\n        print(f'The quotient is: {m//n}')\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        n = abs(n)\n        if n % 10 == 0:\n            return find(n//10,m)\n        else:\n            return find(n//10,m) + 10 * find(n%10,m)\n    else:\n        if n % 10 == 0:\n            return n//10\n        else:\n            return n//10 + 10 * find(n%10,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        s = n - m\n        if s >= 0:\n            return find(s,n)\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    return (w/2)+((h/2)/math.tan(math.radians(45)))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_3 = math.sqrt(w*w+h*h)\n    side_3 = round(side_3,2)\n    print(\"\\nThe third side of a right angled triangle is: \" + str(side_3))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>h:\n        return w\n    elif h>w:\n        return h\n    else:\n        return w\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h==2:\n        return math.sqrt(w*h)\n    elif w==3 and h==2:\n        return math.sqrt((w+h)/2)\n    elif w==2 and h==3:\n        return math.sqrt(w*h)\n    elif w==3 and h==3:\n        return math.sqrt(w*h)\n    elif w==1 and h==1:\n        return 0\n    elif w==1 and h==2:\n        return math.sqrt(w*h)\n    elif w==2 and h==1:\n        return math.sqrt(w*h)\n    elif w==3 and h==1:\n        return math.sqrt(w*h)\n    elif w==1 and h==2:\n        return math.sqrt(w*h)\n    elif w==2 and h==3:\n        return math.sqrt(w*h)\n    elif w==3 and h==3:\n        return math.sqrt(w*h)\n    elif w==2 and h==1:\n        return 0\n    elif w==3 and h==2:\n        return math.sqrt(w*h)\n    elif w==3 and h==3:\n        return math.sqrt(w*h)\n    else:\n        return otherside_rightangle(w,h-1)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return w/2\ndef otherside_rightangle_aux(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return w/2\ndef otherside_rightangle_aux2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return h/2\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return w/2\ndef otherside_leftangle_aux(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return w/2\ndef otherside_leftangle_aux2(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return h/2\ndef otherside_rightangle_aux2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return w/2\ndef otherside_rightangle_aux(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return w/2\ndef left_side_angle(w,h):\n    '''\n    Write a function to find the angle of the left side of a triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef right_side_angle(w,h):\n    '''\n    Write a function to find the angle of the right side of a triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef left_side_angle2(w,h):\n    '''\n    Write a function to find the angle of the left side of a triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef right_side_angle2(w,h):\n    '''\n    Write a function to find the angle of the right side of a triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_right_angle(w,h):\n    '''\n    Write a function to find the angle of the parabola of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_right_angle2(w,h):\n    '''\n    Write a function to find the angle of a parabola of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_right_angle_aux(w,h):\n    '''\n    Write a function to find the angle of a parabola of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_right_angle_aux2(w,h):\n    '''\n    Write a function to find the angle of a parabola of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_left_angle(w,h):\n    '''\n    Write a function to find the angle of the parabola of a left angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_left_angle2(w,h):\n    '''\n    Write a function to find the angle of a parabola of a left angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_left_angle_aux(w,h):\n    '''\n    Write a function to find the angle of a parabola of a left angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_left_angle_aux2(w,h):\n    '''\n    Write a function to find the angle of a parabola of a left angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_right_angle_aux2(w,h):\n    '''\n    Write a function to find the angle of a parabola of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_right_angle_aux(w,h):\n    '''\n    Write a function to find the angle of a parabola of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math.acos(float(w)/(h))\ndef parabola_right_angle(w,h):\n    '''\n    Write a function to find the angle of a parabola of a right angled triangle.\n    '''\n    #print(\"Dicision angle is \" + str(math.degrees(math.acos(float(w)/(h/2))))+\" degree\")\n    return math"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h : \n        return (w*1.0)/2.0\n    elif w < h :\n        return (w*1.0)/2.0 + (h*1.0)/2.0\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # generate three angles\n    angles = (0,90,180,270,360)\n    # check if angle is in angles\n    if 0 <= angles[0] <= 180:\n        return h/2\n    elif 90 < angles[0] < 270:\n        return h/2*math.cos(math.radians(angles[0]))\n    elif 180 < angles[0] < 360:\n        return h/2*math.cos(math.radians(angles[0]-90))\n    else:\n        return h/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = ((math.sqrt((w/2)**2+(h/2)**2))/2)*math.pi\n    side2 = ((math.sqrt((w/2)**2+(h/2)**2)-1)/2)*math.pi\n    return side1,side2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Your code here\n    triangle_area = h*w\n    theta = math.atan((w**2)+(h**2))\n    phi = math.atan2(h,w)\n    area_perimeter = 2*h*w\n    perimeter_perimeter = math.sqrt(area_perimeter**2+triangle_area**2)\n    area_perimeter = math.sqrt(area_perimeter**2+area_perimeter**2)\n    perimeter_perimeter = math.sqrt(perimeter_perimeter**2+triangle_area**2)\n    angle = math.acos(math.sin(phi)/(math.sin(phi)*math.cos(theta-phi)+(math.cos(phi)*math.sin(theta-phi))**2))\n    area_of_cube = triangle_area*triangle_area\n    return(area_of_cube*area_perimeter*perimeter_perimeter/angle)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Define a variable to track the lengths of the sides\n    side_length = 0.0\n    # Calculate the length of the first side\n    side_length = w/2*math.sin(math.radians(angle_degrees/2))\n    # Calculate the length of the second side\n    side_length = h/2*math.sin(math.radians(angle_degrees/2))\n    # Calculate the length of the third side\n    side_length = h/2*math.sin(math.radians(angle_degrees/2))\n    # Return the lengths\n    return side_length\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    # Define a variable to track the lengths of the sides\n    side_length = 0.0\n    # Calculate the length of the first side\n    side_length = w/2*math.sin(math.radians(angle_degrees/2))\n    # Calculate the length of the second side\n    side_length = h/2*math.sin(math.radians(angle_degrees/2))\n    # Calculate the length of the third side\n    side_length = w/2*math.sin(math.radians(angle_degrees/2))\n    # Return the lengths\n    return side_length\ndef otherside_identity(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    # Return the length of the side\n    side_length = w\n    # Return the length of the third side\n    side_length = h\n    # Return the length of the third side\n    return side_length\ndef side_calculator(w,h):\n    '''\n    Write a function to calculate the length of a triangle.\n    '''\n    # Calculate the angles for the sides\n    angle_degrees = int(w/2)\n    # Calculate the lengths of the sides\n    side_length = w/2*math.sin(math.radians(angle_degrees/2))\n    # Return the lengths\n    return side_length\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float(\"-inf\")\n    for item in listval:\n        if(item > max_val):\n            max_val = item\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #print('We have a list of length: ', len(listval))\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Your code here\n    \n    pas"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError(\"List is empty\")\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    # if the value is the first element in the list\n    if listval[0] == '1':\n        return listval[0]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > val:\n            val = listval[i]\n    return val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval:\n        return max(listval)\n    return None\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    sum = 0\n    for j in divisors:\n        if number % j == 0:\n            sum += j\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number <= 1:\n        return number\n    else:\n        for i in range(2,number+1):\n            if (number % i) == 0:\n                return (number)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number==0:\n        return 0\n    elif number<0:\n        return -number\n    elif number==1:\n        return 1\n    else:\n        return sum_div(number-1) + sum_div(number-2)\n        \nprint(sum_div(6))"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum=0\n    for i in range(1, number+1):\n        if number%i==0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i=2\n    while i <= number:\n        if number % i == 0:\n            if i!= number:\n                return number\n            else:\n                return i\n        i+=1\n    return -1\n    \n    \n    \n    \n    "
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i=0\n    sum=0\n    while i<number:\n        if number%i==0:\n            sum=sum+i\n            if i==2:\n                sum=sum+1\n        i+=1\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # def cal_div(x):\n    #     if x % 2 == 0:\n    #         return x\n    #     else:\n    #         return x + cal_div(x//2)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if(number == 1):\n        return 1\n    \n    if(number % 2 == 0):\n        return 1 + sum_div(number//2)\n    \n    else:\n        return 1 + sum_div(number-1) + 1\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_total = 0\n    for num in range(1, number + 1):\n        if number % num == 0:\n            div_total += num\n    return div_total\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # if arr is empty or not an array\n    if arr is None or len(arr) == 0: \n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Find the inversion size\n    inversion_size = len(arr)\n    # Stores the total number of elements which is the count of inversions in it\n    total_count = 0\n    # For loop\n    for i in range(inversion_size): \n        for j in range(inversion_size): \n            if arr[i] > arr[j]: \n                total_count += 1\n    # return count\n    return total_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr==None or len(arr)<2:\n        return 0\n    else:\n        inv_count=0\n        i=1\n        while i<len(arr):\n            if arr[i]<arr[i-1]:\n                arr[i],arr[i-1]=arr[i-1],arr[i]\n                inv_count+=1\n            else:\n                i+=1\n        return inv_count\n        "
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    counter =0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                counter +=1\n    return counter\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Store the original array in an array\n    arr = arr.copy()\n    # Create a new array for the inverted count\n    inv_count = []\n    # Loop through the array\n    for i in range(len(arr)-1, -1, -1):\n        # If the current element is less than or equal to the previous element\n        if arr[i] > arr[i+1]:\n            # Add the current element to the inversion count\n            inv_count.append(arr[i])\n            # Reverse the array\n            arr[i] = arr[len(arr)-1]\n            arr[len(arr)-1] = arr[i]\n    # Return the inversion count\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr == []:\n        return 0\n    \n    count_list = []\n    for i in range(len(arr)):\n        count_list.append(arr[i]+1)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr == []:\n        return 0\n    m = len(arr)\n    l = len(arr)\n    left, right, i, j = 0, 0, 0, m - 1\n    while left <= right:\n        left = left + 1\n        right = left + 1\n        if i < l and arr[i] > arr[i+1]:\n            right = right - 1\n        if j >= m - left and arr[j] > arr[j-left]:\n            left = left - 1\n        if i < l and j >= m - right:\n            i = i + 1\n            j = j - 1\n        if i < l and j >= m - left:\n            j = j - 1\n    return left\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    inversion = arr.count(1)\n    for i in range(len(arr)): \n        if (i+1 < len(arr)) and arr[i] > arr[i+1] and (arr[i] > arr[i+1-1] or arr[i+1-1] >= arr[i+1]): \n            count += 1\n    return count \n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for element in list1:\n        if type(element) is list:\n            flatten_list(element)\n        else:\n            flattened_element = element\n            flattened_element.insert(0, '')\n            flattened_element.append('')\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    if isinstance(list1, list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for x in list1:\n        if type(x) == list:\n            for y in x:\n                y.append(y)\n            list1.append(x)\n        else:\n            list1.append(x)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n    else:\n        if type(list1[0]) == type([]):\n            list1 = flatten_list(list1[0])\n            list1.append(list1[1])\n            return list1\n        elif type(list1[0]) == type([]):\n            list1[0] = flatten_list(list1[0][0])\n            list1[1] = flatten_list(list1[1])\n            return list1\n        else:\n            return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    out_lst = []\n    for sub_lst in list1:\n        if type(sub_lst) == list:\n            out_lst.extend(flatten_list(sub_lst))\n        else:\n            out_lst.append(sub_lst)\n    return out_lst\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for x in list1:\n        if isinstance(x, list):\n            list2 = flatten_list(x)\n        else:\n            list2 = [x]\n        list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = []\n    for item in list1:\n        if type(item) is list:\n            for subitem in flatten_list(item):\n                list1.append(subitem)\n        else:\n            list1.append(item)\n    return list1\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    max_agg_vals = []\n    for tup in stdata:\n        if tup[1] > max_agg:\n            max_agg = tup[1]\n            max_agg_vals = [tup[0]]\n        elif tup[1] == max_agg:\n            max_agg_vals.append(tup[0])\n    return max_agg_vals\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = defaultdict(int)\n    for i in range(len(stdata)):\n        maxagg[stdata[i][0]] = max(stdata[i][1], maxagg[stdata[i][0]])\n    return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata=stdata[1:] #the first row has not been updated\n    d=[i[0] for i in stdata] #data in list\n    return max(d)\n    #print(d)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    _sum = 0\n    _max = -float('inf')\n    for tup in stdata:\n        _sum += tup[1]\n        if _sum > _max:\n            _max = _sum\n    return _max\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = []\n    for i in range(len(stdata)):\n        if stdata[i][0] == stdata[i][1]:\n            for j in range(i+1, len(stdata)):\n                if stdata[j][0]!= stdata[i][1]:\n                    break\n                else:\n                    if stdata[j][2] > stdata[i][2] and stdata[i][2] > stdata[j][2]:\n                        stdata[i][2] = stdata[j][2]\n                        stdata[j][2] = stdata[i][2]\n    return stdata\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    '''\n    Stories with maximum number of items:\n    (a) A movie has more than 4,000 reviews\n    (b) Some other books (like the Big 5) have reviews, but the average rating is 3.5, \n        and the number of reviews is greater than 5.\n    (c) A book has a good title or a good rating, but a bad title, and a good or bad rating, but the number of reviews is greater than 5.\n    (d) A book is in the library.\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for t in stdata:\n        aggregate += t[1]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    l = len(stdata)\n    if l==0:\n        return 0\n    if l<=2:\n        return max(stdata)\n    if stdata[l-1][0]==\"True\":\n        return max_aggregate(stdata[0:l-1])\n    if stdata[l-1][0]==\"False\":\n        return max_aggregate(stdata[0:l-1])\n    lst = []\n    for tup in stdata:\n        if tup[0]==\"True\":\n            lst.append(tup)\n        else:\n            lst.append((\"False\",tup))\n    return max_aggregate(lst)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    for item in stdata:\n        if not isinstance(item, tuple):\n            item = (item, )\n        if len(item) > 1:\n            aggregate = max(item, key = lambda x: x[1])[0]\n            print(aggregate, item[0], aggregate)\n    return stdata\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #construct a dict containing the counts of the distinct values.\n    #this will be used to calculate the median and the median aggregation.\n    #the function will require a list of tuples to be passed in as the input.\n    agg = dict()\n    for i in range(len(stdata)):\n        for j in range(len(stdata[i])):\n            if stdata[i][j] not in agg:\n                agg[stdata[i][j]] = 1\n            else:\n                agg[stdata[i][j]] += 1\n    #print(agg)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    binary_seq = [int(b) for b in bin(n)[2:]]\n    prefix_sum = [sum(bin(i)[2:]) for i in range(1, n)]\n    prefix_sum = sum(prefix_sum)\n    def count_binary_seq_helper(prefix_sum, n):\n        if prefix_sum == n:\n            return 1\n        if prefix_sum < n:\n            return 0\n        count = 0\n        for i in range(n):\n            count += count_binary_seq_helper(prefix_sum-2**i, n-1)\n        return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    for i in range(1,n):\n        number = 0\n        for j in range(0,n-i+1):\n            number += 1\n            if(j==i):\n                continue\n            if(number % 2!= 0):\n                break\n        else:\n            return number\n    return 0\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = []\n    mask = 2 ** n\n    while mask:\n        \n        i = (mask & n) // 2\n        j = (mask & (mask-1)) // 2\n        \n        mask = mask >> 1\n        \n        result.append([i, j])\n        \n    result.sort()\n    \n    count = 0\n    \n    for s, e in result:\n        if s+e == n:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq(n): \n        l = 0\n        r = n \n        while r!= 0:\n            l = l + 1\n            r = r//2\n        return l\n    return count_binary_seq(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_of_bits = 0\n    for i in range(1, n+1): \n        sum_of_bits = sum_of_bits + (1 << i) \n    return sum_of_bits\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # count sum of first 2n bits\n    # count sum of last 2n bits\n    def binary_count(n, k):\n        # check if binary_count is already calculated\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            # count for 2k bits\n            res = 0\n            for bit in range(n):\n                # check if bit is one\n                # if it's one bit, count it as 1\n                if bit % 2 == 0:\n                    res += binary_count(n - bit, k)\n                # if it's not, count it as 0\n                else:\n                    res += binary_count(n - bit, k - 1)\n            return res\n    return binary_count(n, n)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    x=n-1\n    count=0\n    while x >=0:\n        if x%2 ==1:\n            count+=1\n        x=x//2\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if n & 1:\n                count += 1\n            else:\n                count += count_binary_seq(j)\n            n = n >> 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    seq = []\n    x = 1\n    while x <= n:\n        seq.append(bin(x).count('1'))\n        x += 1\n    return seq\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    import sys\n    depth = 0\n    while type(d)!= type(''):\n        if type(d) == type({}):\n            d = d.keys()\n        elif type(d) == type([]):\n            d = d[0]\n        else:\n            d = d.items()\n            depth = depth + 1\n    return depth\n    \ndef dict_find(d, key):\n    '''\n    Write a function to find a dictionary key.\n    '''\n    import sys\n    return key in d.keys()\n    \ndef dict_count(d):\n    '''\n    Write a function to count the number of entries in a dictionary.\n    '''\n    import sys\n    import collections\n    count = 0\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type([]):\n        d = d[0]\n    for key in d.keys():\n        if type(d) == type({}):\n            if type(d[key]) == type({}):\n                count += dict_count(d[key])\n        elif type(d) == type(''):\n            if d == key:\n                count += 1\n    return count\n    \ndef dict_search(d, key):\n    '''\n    Write a function to search a dictionary for a given key.\n    '''\n    import sys\n    key = key.lower()\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    for key in d.keys():\n        if type(d) == type({}):\n            if key == key:\n                return d.get(key)\n        elif type(d) == type(''):\n            if d == key:\n                return d\n    raise KeyError('Key \"%s\" does not exist' % key)\n    \ndef dict_get(d, key):\n    '''\n    Write a function to retrieve a dictionary's value.\n    '''\n    import sys\n    key = key.lower()\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    for key in d.keys():\n        if type(d) == type({}):\n            if key == key:\n                return d.get(key)\n        elif type(d) == type(''):\n            if d == key:\n                return d\n    raise KeyError('Key \"%s\" does not exist' % key)\n    \ndef dict_keys(d):\n    '''\n    Write a function to list the dictionary's keys.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return d.keys()\n    \ndef dict_values(d):\n    '''\n    Write a function to list the dictionary's values.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return d.values()\n    \ndef dict_items(d):\n    '''\n    Write a function to list the dictionary's key-value pairs.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return d.items()\n    \ndef dict_flat(d):\n    '''\n    Write a function to flatten a dictionary into a list of all its values.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return list(d.values())\n    \ndef dict_keys_inv(d):\n    '''\n    Write a function to list all the dictionary keys in reverse order.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return list(reversed(d.keys()))\n    \ndef dict_values_inv(d):\n    '''\n    Write a function to list all the dictionary values in reverse order.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return list(reversed(d.values()))\n    \ndef dict_items_inv(d):\n    '''\n    Write a function to list all the dictionary keys and values in reverse order.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return list(reversed(list(d.items())))\n    \ndef dict_count_inv(d):\n    '''\n    Write a function to list the number of entries in a dictionary.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return dict_count(d)\n    \ndef dict_invert(d):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return dict([(reversed(v), k) for k, v in d.items()])\n    \ndef dict_find_and_replace(d, key, replacement):\n    '''\n    Write a function to find a dictionary and replace a value with a replacement.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    for key in d.keys():\n        if type(d) == type({}):\n            if type(d[key]) == type({}):\n                d[key] = dict_find_and_replace(d[key], key, replacement)\n            else:\n                if key == key:\n                    d[key] = replacement\n        elif type(d) == type(''):\n            if d == key:\n                d = dict_find_and_replace(d, key, replacement)\n    return d\n    \ndef dict_reverse(d):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    for key in d.keys():\n        if type(d) == type({}):\n            if key == key:\n                d = dict_reverse(d[key])\n            else:\n                d[key] = d.pop(key)\n        elif type(d) == type(''):\n            if d == key:\n                d = dict_reverse(d[key])\n            else:\n                d = dict_reverse(d)\n    return d\n    \ndef dict_reversed(d):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    return dict_reverse(d)\n    \ndef dict_key_in_val(d, key):\n    '''\n    Write a function to determine whether a dictionary has a given key.\n    '''\n    import sys\n    if type(d)!= type({}):\n        d = d.keys()\n    if type(d) == type(''):\n        d = d[0]\n    for key in d.keys():\n        if type(d) == type({}):\n            if key == key:\n                return True\n        elif type(d) == type(''):\n            i"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d.items()\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Make the depth 0 if the dictionary is empty\n    if not d:\n        return 0\n    # Count the depth if the dictionary has a single element\n    if len(d) == 1:\n        return 1\n    # Make the depth of each key\n    depth = 0\n    for key in d:\n        depth += dict_depth(d[key])\n    return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        for key in d:\n            if type(d[key]) == dict:\n                print(dict_depth(d[key]))\n            else:\n                print(d[key])\n    else:\n        print(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return(d.__len__())\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        raise TypeError('d must be a dictionary')\n    else:\n        depth = 0\n        # Iterate through the keys\n        for key in d:\n            if type(d[key]) is dict:\n                depth = depth + 1 + dict_depth(d[key])\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d.keys():\n        depth += dict_depth(d[k])\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = []\n    for key, value in d.items():\n        if value > 0:\n            while len(stack) > 0:\n                top = stack.pop()\n                if top == key:\n                    value -= 1\n                    continue\n                elif top < key:\n                    break\n            stack.append(key)\n    return len(stack)"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d.keys():\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    else:\n        return 1 + dict_depth(d.keys())\n    \ndef dfs(d, visited, path, count):\n    '''\n    Print the children of dictionary d.\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations\n    \n    l = len(arr)\n    ranges[l-1][1] = l-1\n    if r == 0 :\n        return arr[r-1]\n    else :\n        if r >= 2 :\n            for i in range(0,r-2) :\n                if arr[r-i-1] > arr[r-i+1] :\n                    ranges[r-i-1][1] = r-i\n                    ranges[r-i+1][0] = r-i\n                    arr[r-i-1] = arr[r-i+1]\n                    arr[r-i+1] = arr[r-i]\n        \n        if r >= 1 :\n            if arr[r-1] > arr[r-2] :\n                arr[r-1] = arr[r-2]\n                ranges[r-1][1] = r-2\n                ranges[r-2][0] = r-1\n        \n        for i in range(r-1,l-1) :\n            if arr[i] < arr[ranges[i][0]] and arr[i] < arr[ranges[i][1]] :\n                ranges[i][0] = ranges[i][1]\n                ranges[i][1] = ranges[i][0]\n                arr[ranges[i][1]] = arr[ranges[i][0]]\n                arr[ranges[i][0]] = arr[ranges[i][1]]\n        \n        for i in range(r-2,l-2) :\n            if arr[i] > arr[ranges[i][0]] and arr[i] > arr[ranges[i][1]] :\n                ranges[i][0] = ranges[i][1]\n                ranges[i][1] = ranges[i][0]\n                arr[ranges[i][1]] = arr[ranges[i][0]]\n                arr[ranges[i][0]] = arr[ranges[i][1]]\n        \n        if arr[l-1] < arr[ranges[l-1][1]] and arr[l-1] < arr[ranges[l-1][0]] :\n            ranges[l-1][0] = ranges[l-1][1]\n            ranges[l-1][1] = ranges[l-1][0]\n            arr[ranges[l-1][1]] = arr[ranges[l-1][0]]\n            arr[ranges[l-1][0]] = arr[ranges[l-1][1]]\n        \n        return arr[ranges[l-1][0]]\n        \ndef is_sorted(arr) :\n    '''\n    Write a python function to check if a given array is sorted.\n    '''\n    l = len(arr)\n    if l == 0 :\n        return True\n    for i in range(0,l-1) :\n        if arr[i] > arr[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        for j in range(len(arr)) :\n            if arr[j] >= ranges[0][0] and arr[j] <= ranges[0][1] and arr[j] < ranges[1][0] and arr[j] >= ranges[1][1] :\n                temp_arr = arr[:]\n                temp_arr[j] = temp_arr[j] + ranges[0][1] - ranges[0][0]\n                temp_arr[j] = temp_arr[j] + ranges[1][0] - ranges[1][1]\n                arr = temp_arr\n                break\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # if range exists\n    if ranges == None :\n        return arr[index]\n    # if index is in range\n    if arr[index] >= ranges[0] and arr[index] <= ranges[1] :\n        if rotations == 0 :\n            return arr[index]\n        else :\n            return find_Element(arr,ranges,rotations-1,index)\n    else :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if not ranges and not rotations : return arr[index]\n    if ranges[0] <= index <= ranges[1] : \n        return find_Element(arr,ranges,rotations-1,index)\n    elif ranges[1] <= index <= ranges[2] : \n        return find_Element(arr,ranges,rotations,index)\n    elif ranges[2] <= index <= ranges[3] : \n        return find_Element(arr,ranges,rotations,index)\n    else : \n        return arr[index]\n    \n    \ndef rotate(arr,rotations):\n    '''\n    Write a python function to rotate arr around a given index.\n    '''\n    for index in range(len(arr)) : \n        arr[index] = find_Element(arr,(index,index),rotations,index)\n    \n    \ndef rotate_v2(arr):\n    '''\n    Write a python function to rotate arr around a given index in two-dimensional\n    form.\n    '''\n    for index in range(len(arr)) : \n        rotate(arr,len(arr)-1-index)\n        arr[index] = arr[index+len(arr)-1]\n        \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if arr[ranges[0]][index]!= ranges[1] :\n        for i in range(index,ranges[0],rotations[0]) :\n            arr[ranges[1]][i] = arr[ranges[1]][i]\n    \n    if arr[ranges[0]][index]!= ranges[2] :\n        for i in range(index,ranges[0],rotations[1]) :\n            arr[ranges[2]][i] = arr[ranges[2]][i]\n    \n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(arr) == 0 :\n        return -1\n    if rotations == 1 and ranges == 0:\n        return arr[index]\n    elif rotations == 1 and ranges!= 0:\n        return find_Element(arr,ranges,rotations - 1,index)\n    elif rotations!= 0 and ranges == 0:\n        return arr[index + ranges]\n    elif rotations!= 0 and ranges!= 0:\n        return find_Element(arr,ranges,rotations,index + ranges)\n    else :\n        return arr[index + ranges + 1]\n    \ndef rotate_array(arr, rotations):\n    '''\n    Rotate a given array by a given number of rotations.\n    '''\n    if rotations == 0:\n        return arr\n    else:\n        return [find_Element(arr,rotations,1,0) for i in range(len(arr))]\n        \n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (ranges[index][0] <= ranges[index][1]) :\n        return arr[ranges[index][0]]\n    return arr[ranges[index][1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for j in range(ranges[0],ranges[1]) :\n        for i in range(rotations) :\n            if arr[index] == arr[i] :\n                index += 1\n                break\n        else :\n            return arr[index]\n    return -1\n    \ndef merge(arr,l,r) :\n    '''\n    Merge two subarrays of arr[l..r] into one subarray arr[l].\n    '''\n    #print(l,r)\n    if l == r :\n        return\n    i = l\n    j = r\n    mid = (l+r)//2\n    #print(mid)\n    while i < mid :\n        if arr[i] >= arr[j] :\n            arr[l],arr[i] = arr[i],arr[l]\n            l += 1\n            i += 1\n        else :\n            arr[r],arr[j] = arr[j],arr[r]\n            j -= 1\n    #print(l,r,arr)\n    while j<len(arr) :\n        arr[l],arr[j] = arr[j],arr[l]\n        l += 1\n        j += 1\n    #print(l,r,arr)\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        if(rotations == 1 and arr[i] == 'r'):\n            return i\n        elif(rotations == 2 and arr[i] == 'r'):\n            return i\n        elif(rotations == 3 and arr[i] == 'r'):\n            return i\n        elif(rotations == 4 and arr[i] == 'r'):\n            return i\n        elif(rotations == 5 and arr[i] == 'r'):\n            return i\n        elif(rotations == 6 and arr[i] == 'r'):\n            return i\n        elif(rotations == 7 and arr[i] == 'r'):\n            return i\n        elif(rotations == 8 and arr[i] == 'r'):\n            return i\n        elif(rotations == 9 and arr[i] == 'r'):\n            return i\n        elif(rotations == 10 and arr[i] == 'r'):\n            return i\n    return -"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Define variables\n    N = len(arr)\n    M = len(arr[0])\n    index = index\n    result = []\n    # Find the index of the element in the array and calculate the actual index.\n    for i in range(N):\n        if arr[i][index]!= -1:\n            result.append(arr[i][index])\n    # Print the rotated list.\n    for i in range(len(result)):\n        print(result[i], end=\" \")\n    print()\n    # Find the index in the array where the given element is located\n    for i in range(M):\n        if arr[i][index]!= -1:\n            result.append(arr[i][index])\n            break\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = words[0]\n    for w in words:\n        if w.startswith(p):\n            return p,w\n    return None,None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            return (words[i], words[i])\n    return None\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][-1] == \"p\":\n            return (words[i], words[i])\n    return None\ndef space(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][-1] == \"p\":\n            return (words[i], words[i])\n    return None\ndef one(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            return (words[i], words[i])\n    return None\ndef two(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                return (words[i], words[i])\n    return None\ndef three(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    return (words[i], words[i])\n    return None\ndef four(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        return (words[i], words[i])\n    return None\ndef five(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            return (words[i], words[i])\n    return None\ndef six(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef seven(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef eight(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef nine(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef ten(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef eleven(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef twelve(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef thirteen(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        if words[i][-4] == \"p\":\n                            if words[i][-5] == \"p\":\n                                return (words[i], words[i])\n    return None\ndef fourteen(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0, len(words)):\n        if words[i][0] == \"p\":\n            if words[i][-1] == \"p\":\n                if words[i][-2] == \"p\":\n                    if words[i][-3] == \"p\":\n                        i"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    found = []\n    for word in words:\n        for letter in word:\n            if letter == 'p':\n                found.append(word)\n            else:\n                found.remove(word)\n    return found\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_index = 0\n    while p_index < len(words):\n        if words[p_index].lower() == 'p':\n            return words[p_index:p_index+2], words[p_index+1:p_index+3]\n        p_index += 1\n    return words[0:p_index], words[p_index:]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0], words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0], words[-1][0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith(\"p\"):\n            return word, True\n    return word, False\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res1, res2 = [], []\n    for word in words:\n        if word[0].lower() == 'p':\n            res1.append(word)\n        elif word[0].lower() == 'i':\n            res2.append(word)\n    return res1, res2\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #find first word\n    start=0\n    for word in words:\n        if word[0]=='p':\n            start=start+1\n    #add it to the return values\n    return(words[start:])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    i = 0\n    while i < len(words):\n        if words[i] == 'p':\n            return words[i:len(words)], words[0:i]\n        i += 1\n    return False\ndef start_withv(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'v'.\n    '''\n    i = 0\n    while i < len(words):\n        if words[i] == 'v':\n            return words[i:len(words)], words[0:i]\n        i += 1\n    return False\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    i = 0\n    while i < len(words):\n        if words[i] == 'n':\n            return words[i:len(words)], words[0:i]\n        i += 1\n    return False\ndef stop_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    i = len(words) - 1\n    while i >= 0:\n        if words[i] == 'p':\n            return words[0:i], words[i+1:]\n        i -= 1\n    return False\ndef stop_withv(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'v'.\n    '''\n    i = len(words) - 1\n    while i >= 0:\n        if words[i] == 'v':\n            return words[0:i], words[i+1:]\n        i -= 1\n    return False\ndef stop_withn(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'n'.\n    '''\n    i = len(words) - 1\n    while i >= 0:\n        if words[i] == 'n':\n            return words[0:i], words[i+1:]\n        i -= 1\n    return False\ndef vn(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'vn'.\n    '''\n    i = 0\n    for word in words:\n        if word == 'vn':\n            return words[:i] + words[i+1:]\n        i += 1\n    return False\ndef vnv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'vn' followed by a 'v' followed by a 'v'.\n    '''\n    i = 0\n    for word in words:\n        if word == 'vn':\n            return words[:i] + words[i+1:i+2] + words[i+2:]\n        i += 1\n    return False\ndef vnv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'vn' followed by a 'v' followed by a 'n'.\n    '''\n    i = 0\n    for word in words:\n        if word == 'vn':\n            return words[:i] + words[i+1:i+2] + words[i+2:]\n        i += 1\n    return False\ndef n(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n'.\n    '''\n    i = 0\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:]\n        i += 1\n    return False\ndef nn(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:len(words)]\n        i -= 1\n    return False\ndef nnv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'v' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:i+2] + words[i+2:]\n        i -= 1\n    return False\ndef nnvv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'v' followed by a 'v' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:i+2] + words[i+2:] + words[i+3:i+4]\n        i -= 1\n    return False\ndef nnvnv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'v' followed by a 'v' followed by a 'n' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:i+2] + words[i+2:] + words[i+3:i+4] + words[i+4:i+5]\n        i -= 1\n    return False\ndef nnv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'n' followed by a 'n' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:i+2] + words[i+2:] + words[i+3:i+4] + words[i+4:i+5] + words[i+5:i+6]\n        i -= 1\n    return False\ndef nnvv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'v' followed by a 'v' followed by a 'n' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:i+2] + words[i+2:] + words[i+3:i+4] + words[i+4:i+5] + words[i+5:i+6] + words[i+6:i+7]\n        i -= 1\n    return False\ndef nnvnv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'v' followed by a 'v' followed by a 'n' followed by a 'n' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:i+2] + words[i+2:] + words[i+3:i+4] + words[i+4:i+5] + words[i+5:i+6] + words[i+6:i+7] + words[i+7:i+8]\n        i -= 1\n    return False\ndef nnvv(words):\n    '''\n    Given a list of words, write a function to return a list of words that starts with 'n' followed by a 'v' followed by a 'v' followed by a 'n' followed by a 'n'.\n    '''\n    i = len(words) - 1\n    for word in words:\n        if word == 'n':\n            return words[:i] + words[i+1:i+2] + words[i+2:] + words[i+3:i+4] + words[i+4:i+5] + words[i+5:i+6] + word"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(k > n):\n        return a[0]\n    if(index == n):\n        return sum(a)\n    if(k == 0):\n        return max(a)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    #Base Case\n    if index == n:\n        return sum(a) - k * min(a)\n    \n    #If there are multiple elements to consider in the given subsequence\n    if index < n:\n        #Add all elements to the current subsequence\n        #Add the subsequence to the list\n        a[index] = a[index] + a[index - 1]\n        \n        #Add the kth element of the next subsequence\n        return max_sum_increasing_subseq(a, n, index + 1, k + a[index])\n        \n    else:\n        return 0\n    \ndef test_max_sum_increasing_subseq():\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 1))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 2))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 3))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 4))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 5))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 6))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 7))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 8))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 9))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 10))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 11))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 12))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 13))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 14))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 15))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 16))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 17))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 18))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 19))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 20))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 21))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 22))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 23))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 24))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 25))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 26))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 27))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 28))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 29))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 30))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 31))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 32))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 33))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 34))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 35))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 36))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 37))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 38))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 39))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 40))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 41))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 42))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 43))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 44))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 45))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 46))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 47))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 48))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 49))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 50))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 51))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 52))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1, 0, 1, 2], 2, 0, 53))\n    print(\"Testing: \", max_sum_increasing_subseq([-2, -1"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 0:\n        return 0\n    if index == n:\n        return a[n-1]\n    if index == 0:\n        return a[index-1]\n    res = 0\n    for i in range(index, n):\n        res = max(res, a[i] + max_sum_increasing_subseq(a, n, i-1, k) + a[i])\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if k >= index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        max_m = a[index]\n        for i in range(index+1, n):\n            if a[i] <= max_m:\n                max_m = a[i]\n        return max_m + max_sum_increasing_subseq(a, n, index+1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n < index:\n        return 0\n    if n == index:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= k:\n        return 0\n    if index == n:\n        return a[n-1]\n    left = max_sum_increasing_subseq(a, n, index+1, k)\n    right = a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    return max(left, right)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    # find prefix array\n    if index == n:\n        for i in range(k):\n            max_sum += a[i]\n        return max_sum\n    else:\n        if k == 0:\n            return a[index]\n        # find last element\n        elif k == 1:\n            return a[index]\n        else:\n            max_sum = max(max_sum_increasing_subseq(a, n, index + 1, k - 1), a[index] + a[index + 1])\n            return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    i = index\n    while i!= n and a[i] <= a[i + 1]:\n        if k > i:\n            k -= 1\n        else:\n            max_sum = max(max_sum, a[i + 1] - a[i])\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[i] + k < a[i + 1]:\n        # if k is greater than the current element, do a max sum check\n        return max(a[i] + max_sum_increasing_subseq(a, n, index, k),\n                max_sum_increasing_subseq(a, n, index + 1, k) + k)\n    else:\n        return a[i] + max(a[i + 1] + k, max_sum_increasing_subseq(a, n, index, k) + k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #first, find the maximum sub sequence of k elements and store them as values for our current sub sequence\n    max_subseq_value = a[index]\n    if index == n - 1:\n        return max_subseq_value\n    if k == 0:\n        return max_subseq_value\n    for i in range(index, n):\n        if a[i] > max_subseq_value and k > 0:\n            max_subseq_value = a[i]\n            k -= 1\n        else:\n            if i == index and k > 0:\n                k -= 1\n            else:\n                a[i] = a[i] + max_subseq_value\n                if k == 0:\n                    return max_subseq_value\n    return max_subseq_value + min_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if (tuplex[i][1] == n):\n            return tuplex[i][0]\n    return None\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        if m == 1:\n            return tuplex[0]\n        if n == 1:\n            return tuplex[0]\n        else:\n            return tuplex[0][n-1]\n    elif len(tuplex) == 2:\n        if m == 1:\n            return tuplex[0]\n        if n == 1:\n            return tuplex[0][n-1]\n        else:\n            return tuplex[0][0][n-1]\n    else:\n        if m == 1:\n            return tuplex[m-1]\n        if n == 1:\n            return tuplex[m-1][n-1]\n        else:\n            return tuplex[m-1][0][n-1]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex)\n    #print(m)\n    #print(n)\n    for i in range(n):\n        #print(i)\n        if tuplex[i][1] == m or tuplex[i][2] == n:\n            return tuplex[i][1],tuplex[i][2]\n    return 0,0\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return n\n    else:\n        if tuplex[m]!=None:\n            return tuplex[m]\n        elif n==len(tuplex):\n            return tuplex[n]\n        else:\n            return colon_tuplex(tuplex,m-1,n+1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m]*tuplex[n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    '''\n    Define the function below. The function takes in a tuple tuplex \n    and a matrix m and n as input. \n    '''\n    pass\n    \ndef write_matrix(m):\n    '''\n    Write a function to write a matrix m to file.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if not tuplex:\n        return []\n    else:\n        return tuplex[0][:m] + colon_tuplex(tuplex[1:],m,n)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==0:\n            m[i]=tuplex[i]\n        elif tuplex[i]==1:\n            n[i]=tuplex[i]\n        else:\n            print(\"ERROR: Non-zero value given.\")\n            exit()\ndef colon_tuple(tuplex):\n    '''\n    Write a function to get a tuple of a colon.\n    '''\n    if len(tuplex)<2:\n        print(\"ERROR: Colon tuple must have more than 2 elements.\")\n        exit()\n    else:\n        m=[]\n        n=[]\n        for i in range(len(tuplex)):\n            if tuplex[i]==0:\n                m.append(0)\n                n.append(tuplex[i])\n            elif tuplex[i]==1:\n                m.append(tuplex[i])\n                n.append(0)\n            else:\n                print(\"ERROR: Non-zero value given.\")\n                exit()\n        return m,n\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # TO-DO\n    \n    # To Do\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO-DO\n    \n    # TO"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(m[i]+n[i] for i in range(len(m)))\ndef combo(m,n):\n    '''\n    Write a function to get a combo of a tuple.\n    '''\n    # Write your code here\n    return tuple(m[i]+n[i] for i in range(len(m)))\ndef get_cols(m,n,cols):\n    '''\n    Write a function to get a set of cols of a tuple.\n    '''\n    # Write your code here\n    return tuple(cols[i]+n[i] for i in range(len(m)))\ndef get_rows(m,n,rows):\n    '''\n    Write a function to get a set of rows of a tuple.\n    '''\n    # Write your code here\n    return tuple(rows[i]+n[i] for i in range(len(m)))\ndef coord_to_col(cols,coord):\n    '''\n    Write a function to get a coord of a tuple.\n    '''\n    # Write your code here\n    return cols[coord[1]]+coord[0]\ndef coord_to_row(rows,coord):\n    '''\n    Write a function to get a coord of a tuple.\n    '''\n    # Write your code here\n    return rows[coord[1]]+coord[0]\ndef add_val(m,n,val):\n    '''\n    Write a function to add a value to a tuple.\n    '''\n    # Write your code here\n    return tuple([i+val for i in m]+[n]+[val])\ndef col_to_row(m,col):\n    '''\n    Write a function to get a col of a tuple.\n    '''\n    # Write your code here\n    return tuple(m[i]+col for i in range(len(m)))\ndef row_to_col(m,row):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    # Write your code here\n    return tuple([row[i]+col for i in range(len(row))]+m[row[-1]])\ndef get_min_col(m,n):\n    '''\n    Write a function to get a min col of a tuple.\n    '''\n    # Write your code here\n    return min(cols[i] for i in range(len(cols)))\ndef get_max_row(m,n):\n    '''\n    Write a function to get a max row of a tuple.\n    '''\n    # Write your code here\n    return max(rows[i] for i in range(len(rows)))\ndef get_min_row(m,n):\n    '''\n    Write a function to get a min row of a tuple.\n    '''\n    # Write your code here\n    return min(rows[i] for i in range(len(rows)))\ndef get_max_row(m,n):\n    '''\n    Write a function to get a max row of a tuple.\n    '''\n    # Write your code here\n    return max(rows[i] for i in range(len(rows)))\ndef get_col(m,n):\n    '''\n    Write a function to get a col of a tuple.\n    '''\n    # Write your code here\n    return cols[n]\ndef get_row(m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    # Write your code here\n    return rows[n]\ndef make_m(m,n):\n    '''\n    Write a function to make a matrix of a certain size.\n    '''\n    # Write your code here\n    return [col_to_row(m,i) for i in range(n)]\ndef make_n(m,n):\n    '''\n    Write a function to make a list of a certain size.\n    '''\n    # Write your code here\n    return [col_to_row(m,i) for i in range(n)]\ndef make_grid(m,n):\n    '''\n    Write a function to make a grid of a certain size.\n    '''\n    # Write your code here\n    return [make_n(m,n)]\ndef make_grid2(m,n):\n    '''\n    Write a function to make a grid of a certain size.\n    '''\n    # Write your code here\n    return [make_n(m,n)]\ndef get_tuple(m,n):\n    '''\n    Write a function to get a tuple of a certain size.\n    '''\n    # Write your code here\n    return [coord_to_row(m,i) for i in range(n)]\ndef get_coord(m,n):\n    '''\n    Write a function to get a tuple of a certain size.\n    '''\n    # Write your code here\n    return [coord_to_col(m,i) for i in range(n)]\ndef flip_cols(m,n):\n    '''\n    Write a function to flip a cols of a tuple.\n    '''\n    # Write your code here\n    return [row_to_col(m,i) for i in range(n,0,-1)]+[row_to_col(m,i) for i in range(n,0,-1)]\ndef flip_rows(m,n):\n    '''\n    Write a function to flip a rows of a tuple.\n    '''\n    # Write your code here\n    return [row_to_col(m,i) for i in range(n,0,-1)]+[row_to_col(m,i) for i in range(n,0,-1)]\ndef flip_rows2(m,n):\n    '''\n    Write a function to flip a rows of a tuple.\n    '''\n    # Write your code here\n    return [row_to_col(m,i) for i in range(n,0,-1)]+[row_to_col(m,i) for i in range(n,0,-1)]\ndef flip_rows3(m,n):\n    '''\n    Write a function to flip a rows of a tuple.\n    '''\n    # Write your code here\n    return [row_to_col(m,i) for i in range(n,0,-1)]+[row_to_col(m,i) for i in range(n,0,-1)]\ndef flip_rows4(m,n):\n    '''\n    Write a function to flip a rows of a tuple.\n    '''\n    # Write your code here\n    return [row_to_col(m,i) for i in range(n,0,-1)]+[row_to_col(m,i) for i in range(n,0,-1)]\ndef get_min_row(m,n):\n    '''\n    Write a function to get a min row of a tuple.\n    '''\n    # Write your code here\n    return min(rows[i] for i in range(len(rows)))\ndef get_max_row(m,n):\n    '''\n    Write a function to get a max row of a tuple.\n    '''\n    # Write your code here\n    return max(rows[i] for i in range(len(rows)))\ndef get_min_row(m,n):\n    '''\n    Write a function to get a min row of a tuple.\n    '''\n    # Write your code here\n    return min(rows[i] for i in range(len(rows)))\ndef get_max_row(m,n):\n    '''\n    Write a function to get a max row of a tuple.\n    '''\n    # Write your code here\n    return max(rows[i] for i in range(len(rows)))\ndef get_cols(m,n):\n    '''\n    Write a function to get a set of cols of a tuple.\n    '''\n    # Write your code here\n    return tuple(cols[i]+n[i] for i in range(len(m)))\ndef get_rows(m,n):\n    '''\n    Write a function to get a set of rows of a tuple.\n    '''\n    # Write your code here\n    return tuple(rows[i]+n[i] for i in range(len(m)))\ndef col_to_row(m,col):\n    '''\n    Write a function to get a col of "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #i = 0\n    #while i < len(nums1):\n    #    j = 0\n    #    while j < len(nums2):\n    #        if nums1[i] * nums2[j] > nums1[i] * nums2[j]:\n    #            nums1[i] *= nums2[j]\n    #            nums2[j] = -nums1[i]\n    #            j -= 1\n    #        else:\n    #            j += 1\n    #    i += 1\n    def factorize(x):\n        '''\n        To find the factor of a number.\n        '''\n        if x < 2:\n            return 1\n        else:\n            k = x//2\n            return factorize(k) + factorize(x-k)\n    \n    return sum([factorize(N) for N in nums1])*factorize(N)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factor1 = []\n    factor2 = []\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                if nums1[i] * nums2[j] > nums1[i] * nums2[i]:\n                    factor1.append(nums1[i])\n                    factor2.append(nums2[i])\n                elif nums1[i] * nums2[j] == nums1[i] * nums2[j]:\n                    factor1.append(nums1[i])\n                    factor2.append(nums2[j])\n                else:\n                    factor1.append(nums1[j])\n                    factor2.append(nums2[i])\n    lprod = []\n    for i in range(N):\n        lprod.append(factor1[i] * factor2[i])\n    return max(lprod)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # choose first factor\n    factors = {}\n    for i in range(1, N + 1):\n        if i not in factors:\n            factors[i] = 1\n        else:\n            factors[i] += 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    ans=[]\n    for i in range(N):\n        ans.append(0)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]!=nums2[j]:\n                ans[i]+=1\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    count = 0\n    for i in range(N):\n        max_product = 0\n        for j in range(len(nums1)):\n            if max_product < nums1[j] * nums2[i]:\n                max_product = nums1[j] * nums2[i]\n        result.append(max_product)\n        count += 1\n    return count, result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # TO DO: Write your code here.\n    result = []\n    for i in range(N):\n        result.append([])\n    for i in range(N):\n        for j in range(N):\n            if nums1[i] > nums2[j]:\n                result[i].append(nums1[j])\n            elif nums1[i] == nums2[j]:\n                result[i].append(nums1[i])\n            else:\n                result[i].append(nums2[j])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    s = []\n    for i in range(N):\n        s.append(nums1[i] * nums2[i])\n    s.sort(reverse=True)\n    final = []\n    for i in range(N):\n        if s[i] > 0:\n            final.append(s[i])\n    return final\n    \ndef large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    f = [0] * N\n    for i in range(N):\n        f[i] = nums1[i] * nums2[i]\n    f.sort(reverse=True)\n    final = []\n    for i in range(N):\n        if f[i] > 0:\n            final.append(f[i])\n    return final\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    fractions1 = []\n    fractions2 = []\n    \n    for i in range(N):\n        fractions1.append(nums1[i])\n        fractions2.append(nums2[i])\n    \n    for i in range(N):\n        if fractions1[i] > fractions2[i]:\n            fractions1[i], fractions2[i] = fractions2[i], fractions1[i]\n    \n    return fractions"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the lists\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    result = [1] * N\n    # iterate over the indices\n    for i in range(N):\n        if nums1[i] < nums2[i]:\n            result[i] = nums2[i]\n        else:\n            result[i] = nums1[i]\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return a\n    pass\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a\n    pass\ndef sum_up_2(x,y):\n    '''\n    Write a python function to sum up two numbers.\n    '''\n    return x+y\n    pass\ndef add_two_numbers(x,y):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return x+y\n    pass\ndef multiplication_of_two_numbers(x,y):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return x*y\n    pass\ndef floor_division_of_two_numbers(x,y):\n    '''\n    Write a python function to floor division two numbers.\n    '''\n    return x//y\n    pass\ndef print_cube_of_two_numbers(x,y):\n    '''\n    Write a python function to print the cube of two numbers.\n    '''\n    return x**3\n    pass\ndef print_square_of_two_numbers(x,y):\n    '''\n    Write a python function to print the square of two numbers.\n    '''\n    return x**2\n    pass\ndef sub_two_numbers(x,y):\n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return x-y\n    pass\ndef multiply_two_numbers(x,y):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return x*y\n    pass\ndef divide_two_numbers(x,y):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return x/y\n    pass\ndef remainder_of_two_numbers(x,y):\n    '''\n    Write a python function to find the remainder of two numbers.\n    '''\n    return x%y\n    pass\ndef exponentiation_of_two_numbers(x,y):\n    '''\n    Write a python function to find the exponentiation of two numbers.\n    '''\n    return x**y\n    pass\ndef power_of_two_numbers(x,y):\n    '''\n    Write a python function to find the power of two numbers.\n    '''\n    return x**2\n    pass\ndef square_of_two_numbers(x,y):\n    '''\n    Write a python function to find the square of two numbers.\n    '''\n    return x**3\n    pass\ndef square_root_of_two_numbers(x,y):\n    '''\n    Write a python function to find the square root of two numbers.\n    '''\n    return x**0.5\n    pass\ndef square_of_triangle_numbers(x,y):\n    '''\n    Write a python function to find the square of triangle numbers.\n    '''\n    return (x**2+y**2)**0.5\n    pass\ndef cube_of_triangle_numbers(x,y):\n    '''\n    Write a python function to find the cube of triangle numbers.\n    '''\n    return (x**3+y**3)**0.25\n    pass\ndef cube_of_two_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers.\n    '''\n    return x**3+y**3\n    pass\ndef cube_root_of_two_numbers(x,y):\n    '''\n    Write a python function to find the cube root of two numbers.\n    '''\n    return (x**0.5)+((y**0.5)**0.5)\n    pass\ndef cube_of_triangle_numbers_of_2_numbers(x,y):\n    '''\n    Write a python function to find the cube of triangle numbers of two numbers.\n    '''\n    return (x**2+y**2)**0.25\n    pass\ndef cube_of_two_numbers_of_2_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers of two numbers.\n    '''\n    return (x**2)+((y**2)**0.5)\n    pass\ndef cube_of_triangle_numbers_of_3_numbers(x,y,z):\n    '''\n    Write a python function to find the cube of triangle numbers of three numbers.\n    '''\n    return (x**3+y**3+z**3)**0.25\n    pass\ndef cube_of_two_numbers_of_3_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers of three numbers.\n    '''\n    return (x**3+y**3)**0.25\n    pass\ndef cube_of_triangle_numbers_of_4_numbers(x,y,z,w):\n    '''\n    Write a python function to find the cube of triangle numbers of four numbers.\n    '''\n    return (x**4+y**4+z**4+w**4)**0.25\n    pass\ndef cube_of_two_numbers_of_4_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers of four numbers.\n    '''\n    return (x**4+y**4)**0.25\n    pass\ndef cube_of_triangle_numbers_of_5_numbers(x,y,z,w,x1,y1):\n    '''\n    Write a python function to find the cube of triangle numbers of five numbers.\n    '''\n    return (x**5+y**5+z**5+w**5+x1**5+y1**5)**0.25\n    pass\ndef cube_of_two_numbers_of_5_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers of five numbers.\n    '''\n    return (x**5+y**5)**0.25\n    pass\ndef cube_of_triangle_numbers_of_6_numbers(x,y,z,w):\n    '''\n    Write a python function to find the cube of triangle numbers of six numbers.\n    '''\n    return (x**6+y**6+z**6+w**6)**0.25\n    pass\ndef cube_of_two_numbers_of_6_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers of six numbers.\n    '''\n    return (x**6+y**6)**0.25\n    pass\ndef cube_of_triangle_numbers_of_7_numbers(x,y,z,w):\n    '''\n    Write a python function to find the cube of triangle numbers of seven numbers.\n    '''\n    return (x**7+y**7+z**7+w**7)**0.25\n    pass\ndef cube_of_two_numbers_of_7_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers of seven numbers.\n    '''\n    return (x**7+y**7)**0.25\n    pass\ndef cube_of_triangle_numbers_of_8_numbers(x,y,z,w):\n    '''\n    Write a python function to find the cube of triangle numbers of eight numbers.\n    '''\n    return (x**8+y**8+z**8+w**8)**0.25\n    pass\ndef cube_of_two_numbers_of_8_numbers(x,y):\n    '''\n    Write a python function to find the cube of two numbers of eight numbers.\n    '''\n    return (x**8+y**8)**0.25\n    pass\ndef cube_of_triangle_numbers_of_9_numbers(x,y,z,w):\n    '''\n    Write a python function to find the cube of triangle numbers of nine numbers."
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    return a\n    "
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b < a:\n        a,b = b,a\n    if a == 0:\n        print(b)\n        return\n    print(a,b)\n    maximum(a-1,b-1)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a\n    if b>a:\n        maximum = b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # Hint: The maximum can be calculated with two for loops\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\ndef sum_of_two_numbers(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    sum=a+b\n    return sum\ndef subtract(a,b):\n    '''\n    Write a python function to calculate the difference between two numbers.\n    '''\n    difference=a-b\n    return difference\ndef divide(a,b):\n    '''\n    Write a python function to calculate the quotient of two numbers.\n    '''\n    quotient=a/b\n    return quotient\ndef add(a,b):\n    '''\n    Write a python function to calculate the addition of two numbers.\n    '''\n    return a+b\ndef subtract_2(a,b):\n    '''\n    Write a python function to calculate the difference between two numbers.\n    '''\n    difference=a-b\n    return difference\ndef multiply(a,b):\n    '''\n    Write a python function to calculate the multiplication of two numbers.\n    '''\n    product=a*b\n    return product\ndef divide_2(a,b):\n    '''\n    Write a python function to calculate the quotient of two numbers.\n    '''\n    quotient=a/b\n    return quotient\ndef main():\n    print(\"Enter the first number to find the maximum:\")\n    a=int(input())\n    print(\"Enter the second number to find the maximum:\")\n    b=int(input())\n    print(\"Enter the type of calculation to perform:\")\n    print(\"1:maximum\\n2:sum\\n3:subtract\\n4:divide\\n5:multiply\\n6:subtract_2\\n7:multiply_2\")\n    choice=input()\n    print(\"Enter the value to be calculated:\")\n    print(\"1:sum\\n2:difference\\n3:quotient\\n4:product\\n5:quotient_2\\n6:product_2\")\n    x=int(input())\n    if choice==\"1\":\n        print(\"The maximum of \" +str(a) + \" and \" + str(b) + \" is \" +str(maximum(a,b)))\n    elif choice==\"2\":\n        print(\"The sum of \" +str(a) + \" and \" + str(b) + \" is \" + str(sum_of_two_numbers(a,b)))\n    elif choice==\"3\":\n        print(\"The difference between \" +str(a) + \" and \" + str(b) + \" is \" + str(subtract(a,b)))\n    elif choice==\"4\":\n        print(\"The quotient of \" +str(a) + \" and \" + str(b) + \" is \" + str(divide(a,b)))\n    elif choice==\"5\":\n        print(\"The product of \" +str(a) + \" and \" + str(b) + \" is \" + str(multiply(a,b)))\n    elif choice==\"6\":\n        print(\"The quotient of \" +str(a) + \" and \" + str(b) + \" is \" + str(divide_2(a,b)))\n    elif choice==\"7\":\n        print(\"The product of \" +str(a) + \" and \" + str(b) + \" is \" + str(multiply_2(a,b)))\n    else:\n        print(\"Invalid input\")\nmain("
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) is not int or type(b) is not int:\n        return \"Please enter two numbers\"\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef maximum_in_array(arr):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(arr) is not list:\n        return \"Please enter a list of numbers\"\n    if len(arr) == 0:\n        return \"Please enter numbers\"\n    maximum = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_tuple = []\n    for char in str1:\n        str_tuple.append(char)\n    return tuple(str_tuple)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = list(str1)\n    # create a new list of characters\n    new_char_list = []\n    for char in char_list:\n        # get all chars and remove first\n        new_char_list.append(char)\n        new_char_list.pop(0)\n    # combine the chars with a comma\n    new_char_list = ''.join(new_char_list)\n    return new_char_list\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # tuples are immutable - we can't change the elements\n    # tuples can be created like this: (0, 1, 2, 3, 4, 5, 6, 7, 8)\n    # tuples are a kind of list\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = []\n    for char in str1:\n        if char not in t:\n            t.append(char)\n    return tuple(t)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(s.lower() for s in str1.split())\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n_bit = 0\n    for bit in format(n, 'b').zfill(8):\n        if bit == \"1\":\n            n_bit = 1\n        else:\n            n_bit = 0\n    return n_bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # check if n is set (true) or not (false)\n    if n == True:\n        n = 1\n    else:\n        n = 0\n    # return number\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n&((1<<n.bit_length())-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    while (i * i + i) <= n:\n        i += 1\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    c = 1\n    x = n\n    while x & c: c += 1\n    n |= c\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return\n    if n & 0x1 == 1:\n        n ^= 0x1\n    if n & 0x2 == 0:\n        n ^= 0x2\n    if n & 0x4 == 0:\n        n ^= 0x4\n    if n & 0x8 == 1:\n        n ^= 0x8\n    if n & 0x10 == 0:\n        n ^= 0x10\n    if n & 0x20 == 1:\n        n ^= 0x20\n    if n & 0x40 == 1:\n        n ^= 0x40\n    if n & 0x80 == 0:\n        n ^= 0x80\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(n):\n        val = False\n        if n & (1<<i):\n            val = True\n        \n        n &= n-1\n        n |= val\n        \n    return n\n        \ndef get_left_most_unset_bit(n):\n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    for i in range(n):\n        val = False\n        if n & (1<<i):\n            val = True\n        \n        n &= n-1\n        n |= val\n        \n    return n\n        \ndef get_leftmost_unset_bit_index(n):\n    '''\n    Write a python function to get the leftmost unset bit index.\n    '''\n    n = get_left_most_unset_bit(n)\n    \n    for i in range(n):\n        bit = False\n        if n & (1<<i):\n            bit = True\n        \n        n &= n-1\n        n |= bit\n        \n    return n\n        \ndef get_leftmost_unset_bits(n):\n    '''\n    Write a python function to get the leftmost unset bits.\n    '''\n    bits = []\n    \n    n = get_leftmost_unset_bit_index(n)\n    \n    for i in range(n):\n        bits.append(n & (1<<i))\n        \n    return bits\n    \ndef get_leftmost_unset_bits_as_int(n):\n    '''\n    Write a python function to get the leftmost unset bits as an integer.\n    '''\n    bits = get_leftmost_unset_bits(n)\n    \n    return int(''.join(map(str, bits)), 2)\n    \ndef get_right_most_unset_bit(n):\n    '''\n    Write a python function to get the right most unset bit.\n    '''\n    for i in range(n):\n        val = False\n        if n & (1<<i):\n            val = True\n        \n        n &= n-1\n        n |= val\n        \n    return n\n        \ndef get_right_most_unset_bit_index(n):\n    '''\n    Write a python function to get the rightmost unset bit index.\n    '''\n    n = get_right_most_unset_bit(n)\n    \n    for i in range(n):\n        bit = False\n        if n & (1<<i):\n            bit = True\n        \n        n &= n-1\n        n |= bit\n        \n    return n\n        \ndef get_right_most_unset_bits(n):\n    '''\n    Write a python function to get the rightmost unset bits.\n    '''\n    bits = []\n    \n    n = get_right_most_unset_bit_index(n)\n    \n    for i in range(n):\n        bits.append(n & (1<<i))\n        \n    return bits\n    \ndef get_right_most_unset_bits_as_int(n):\n    '''\n    Write a python function to get the rightmost unset bits as an integer.\n    '''\n    bits = get_right_most_unset_bits(n)\n    \n    return int(''.join(map(str, bits)), 2)\n    \ndef get_rightmost_unset_bits_as_bitstring(n):\n    '''\n    Write a python function to get the rightmost unset bits as a bitstring.\n    '''\n    bits = get_right_most_unset_bits(n)\n    \n    return ''.join(map(str, bits))\n    \ndef get_first_unset_bit(n):\n    '''\n    Write a python function to get the first unset bit.\n    '''\n    for i in range(n):\n        val = False\n        if n & (1<<i):\n            val = True\n        \n        n &= n-1\n        n |= val\n        \n    return n\n        \ndef get_first_unset_bit_index(n):\n    '''\n    Write a python function to get the first unset bit index.\n    '''\n    n = get_first_unset_bit(n)\n    \n    for i in range(n):\n        bit = False\n        if n & (1<<i):\n            bit = True\n        \n        n &= n-1\n        n |= bit\n        \n    return n\n        \ndef get_first_unset_bits(n):\n    '''\n    Write a python function to get the first unset bits.\n    '''\n    bits = []\n    \n    n = get_first_unset_bit_index(n)\n    \n    for i in range(n):\n        bits.append(n & (1<<i))\n        \n    return bits\n    \ndef get_first_unset_bits_as_int(n):\n    '''\n    Write a python function to get the first unset bits as an integer.\n    '''\n    bits = get_first_unset_bits(n)\n    \n    return int(''.join(map(str, bits)), 2)\n    \ndef get_first_unset_bits_as_bitstring(n):\n    '''\n    Write a python function to get the first unset bits as a bitstring.\n    '''\n    bits = get_first_unset_bits(n)\n    \n    return ''.join(map(str, bits))\n    \ndef get_second_unset_bit(n):\n    '''\n    Write a python function to get the second unset bit.\n    '''\n    for i in range(n):\n        val = False\n        if n & (1<<i):\n            val = True\n        \n        n &= n-1\n        n |= val\n        \n    return n\n        \ndef get_second_unset_bit_index(n):\n    '''\n    Write a python function to get the second unset bit index.\n    '''\n    n = get_second_unset_bit(n)\n    \n    for i in range(n):\n        bit = False\n        if n & (1<<i):\n            bit = True\n        \n        n &= n-1\n        n |= bit\n        \n    return n\n        \ndef get_second_unset_bits(n):\n    '''\n    Write a python function to get the second unset bits.\n    '''\n    bits = []\n    \n    n = get_second_unset_bit_index(n)\n    \n    for i in range(n):\n        bits.append(n & (1<<i))\n        \n    return bits\n    \ndef get_second_unset_bits_as_int(n):\n    '''\n    Write a python function to get the second unset bits as an integer.\n    '''\n    bits = get_second_unset_bits(n)\n    \n    return int(''.join(map(str, bits)), 2)\n    \ndef get_second_unset_bits_as_bitstring(n):\n    '''\n    Write a python function to get the second unset bits as a bitstring.\n    '''\n    bits = get_second_unset_bits(n)\n    \n    return ''.join(map(str, bits))\n    \ndef get_last_unset_bit(n):\n    '''\n    Write a python function to get the last unset bit.\n    '''\n    for i in range(n):\n        val = False\n        if n & (1<<i):\n            val = True\n        \n        n &= n-1\n        n |= val\n        \n    return n\n        \ndef get_last_unset_bit_index(n):\n    '''\n    Write a python function to get the last unset bit index.\n    '''\n    n = get_last_unset_bit(n)\n    \n    for i in range(n):\n        bit = False\n        if n & (1<<i):\n            bit = True\n        \n        n &= n-1\n        n |= bit\n        \n    return n\n        \ndef get_last_unset_bits(n):\n    '''\n    Write a python function to get the last unset bits.\n    '''\n    bits = []\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    def find_set_bit(n):\n        return (n & (n-1))\n    \n    if n == 0: return None\n    if n == 1: return 0\n    \n    #Find the position where n is set bit\n    for i in range(0, n):\n        if find_set_bit(i)!= 0: return i\n    \n    #If n is set bit, use the find_set_bit to find the next position\n    return find_set_bit(n-1) + 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n >= 0:\n        i = n & 0x01\n    else:\n        i = 0x01\n    n = n >> 1\n    n = n | (i << 1)\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Set the angle of the cone\n    #print(\"----> looking at cone angle {} degrees\".format(math.degrees(math.atan(math.sin(math.radians(r))/math.cos(math.radians(h))))))\n    #print(\"----> looking at cone angle {} degrees\".format(math.degrees(math.atan(math.sin(math.radians(r))/math.cos(math.radians(h))))))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * (math.pi * r**2) * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4/3 * math.pi * (r**3)*(h**2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (3.14*(math.pow(r,2))*h)*math.pow(r,3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return h*r*(1-math.sqrt(1-r*r))*math.sqrt(1-r*r)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * math.pi * r * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=0\n    for i in range(1,r+1):\n        volume+=1/math.pow(math.sin(math.radians(i*h)),2)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = 4*math.pi*r**2*h**3\n    return vol\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(2**i < n):\n        i += 1\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        return 1\n    else:\n        a = highest_Power_of_2(n//2)\n        b = highest_Power_of_2(n*2)\n        return max(a,b)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 0\n    while n%2==0:\n        x+=1\n        n//=2\n    if n%2==1:\n        x+=1\n        n=n//2\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_3(n):\n    '''\n    Write a python function to find the highest power of 3 that is less than or equal to n.\n    '''\n    x=0\n    while n%3==0:\n        x+=1\n        n//=3\n    if n%3==1:\n        x+=1\n        n=n//3\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_4(n):\n    '''\n    Write a python function to find the highest power of 4 that is less than or equal to n.\n    '''\n    x=0\n    while n%4==0:\n        x+=1\n        n//=4\n    if n%4==1:\n        x+=1\n        n=n//4\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_5(n):\n    '''\n    Write a python function to find the highest power of 5 that is less than or equal to n.\n    '''\n    x=0\n    while n%5==0:\n        x+=1\n        n//=5\n    if n%5==1:\n        x+=1\n        n=n//5\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_6(n):\n    '''\n    Write a python function to find the highest power of 6 that is less than or equal to n.\n    '''\n    x=0\n    while n%6==0:\n        x+=1\n        n//=6\n    if n%6==1:\n        x+=1\n        n=n//6\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_7(n):\n    '''\n    Write a python function to find the highest power of 7 that is less than or equal to n.\n    '''\n    x=0\n    while n%7==0:\n        x+=1\n        n//=7\n    if n%7==1:\n        x+=1\n        n=n//7\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_8(n):\n    '''\n    Write a python function to find the highest power of 8 that is less than or equal to n.\n    '''\n    x=0\n    while n%8==0:\n        x+=1\n        n//=8\n    if n%8==1:\n        x+=1\n        n=n//8\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_9(n):\n    '''\n    Write a python function to find the highest power of 9 that is less than or equal to n.\n    '''\n    x=0\n    while n%9==0:\n        x+=1\n        n//=9\n    if n%9==1:\n        x+=1\n        n=n//9\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_10(n):\n    '''\n    Write a python function to find the highest power of 10 that is less than or equal to n.\n    '''\n    x=0\n    while n%10==0:\n        x+=1\n        n//=10\n    if n%10==1:\n        x+=1\n        n=n//10\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_11(n):\n    '''\n    Write a python function to find the highest power of 11 that is less than or equal to n.\n    '''\n    x=0\n    while n%11==0:\n        x+=1\n        n//=11\n    if n%11==1:\n        x+=1\n        n=n//11\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_12(n):\n    '''\n    Write a python function to find the highest power of 12 that is less than or equal to n.\n    '''\n    x=0\n    while n%12==0:\n        x+=1\n        n//=12\n    if n%12==1:\n        x+=1\n        n=n//12\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_13(n):\n    '''\n    Write a python function to find the highest power of 13 that is less than or equal to n.\n    '''\n    x=0\n    while n%13==0:\n        x+=1\n        n//=13\n    if n%13==1:\n        x+=1\n        n=n//13\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_14(n):\n    '''\n    Write a python function to find the highest power of 14 that is less than or equal to n.\n    '''\n    x=0\n    while n%14==0:\n        x+=1\n        n//=14\n    if n%14==1:\n        x+=1\n        n=n//14\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_15(n):\n    '''\n    Write a python function to find the highest power of 15 that is less than or equal to n.\n    '''\n    x=0\n    while n%15==0:\n        x+=1\n        n//=15\n    if n%15==1:\n        x+=1\n        n=n//15\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_16(n):\n    '''\n    Write a python function to find the highest power of 16 that is less than or equal to n.\n    '''\n    x=0\n    while n%16==0:\n        x+=1\n        n//=16\n    if n%16==1:\n        x+=1\n        n=n//16\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_17(n):\n    '''\n    Write a python function to find the highest power of 17 that is less than or equal to n.\n    '''\n    x=0\n    while n%17==0:\n        x+=1\n        n//=17\n    if n%17==1:\n        x+=1\n        n=n//17\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_18(n):\n    '''\n    Write a python function to find the highest power of 18 that is less than or equal to n.\n    '''\n    x=0\n    while n%18==0:\n        x+=1\n        n//=18\n    if n%18==1:\n        x+=1\n        n=n//18\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_19(n):\n    '''\n    Write a python function to find the highest power of 19 that is less than or equal to n.\n    '''\n    x=0\n    while n%19==0:\n        x+=1\n        n//=19\n    if n%19==1:\n        x+=1\n        n=n//19\n    if x>0:\n        return n+x\n    else:\n        return \"No high power!\"\ndef highest_Power_of_20(n):\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def factorial(n): \n        return factorial_iterative(n)\n    def factorial_iterative(n): \n        if n == 0: \n            return 1\n        else: \n            return n * factorial_iterative(n - 1) \n    return max(0,n * factorial(n) // 2) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return n \n    elif n > 0: \n        for i in range(n-1, 0, -1): \n            if (n % i) == 0: \n                return i \n            else: \n                return n \n    else: \n        print(\"number is not greater than 0\") \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    if n <= 0:\n        print(\"Invalid input\")\n    elif n == 1:\n        print(1)\n    elif n == 2:\n        print(1)\n    elif n >= 3:\n        for i in range(2, n + 1):\n            if n%i == 0:\n                print(i)\n                break\n        if n %i!= 0:\n            print(\"cannot divide\")\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    assert (isinstance(n,int)), 'n must be an integer'\n    return n**2 if n <= 2 else highest_Power_of_2(n/2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    f = n/2\n    while f >= 1:\n        if f == 2:\n            return f\n        else:\n            f = f/2\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > power:\n        power = power + 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return n // 2\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a, b = 0, 1\n    for x in range(n, 1, -1):\n        a, b = b, a + b\n        print(b)\n    return a\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = [3,5,7]\n    result = x[n]\n    for i in range(3,n+1):\n        if i in x:\n            result = result * 2\n        else:\n            result = result * 3\n    return result\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    while n > 1:\n        if n%2 == 0:\n            n = n//2\n            lucas = n\n        else:\n            n = n//2+1\n            lucas = n\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    if n<=0:\n        raise ValueError(\"The value of n must be greater than 0\")\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_pow = [\n        [1,2,3,4,5,6,7,8,9],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n        [1,3,6,10,15,21,34,55,89],\n        [2,4,7,12,32,44,81,96,124],\n       "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = []\n    for i in range(2,n+1):\n        if i == 2:\n            lucas.append(1)\n        elif i == 3:\n            lucas.append(2)\n        elif i == 4:\n            lucas.append(3)\n        elif i == 5:\n            lucas.append(4)\n        elif i == 6:\n            lucas.append(5)\n        elif i == 7:\n            lucas.append(6)\n        else:\n            lucas.append(lucas[i-2]+lucas[i-3])\n    return lucas[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = n + 1\n    def find_lucas(n):\n        if n <= 2:\n            return n\n        elif n == 3:\n            return 2\n        else:\n            return 3 * find_lucas(n-2) + 4 * find_lucas(n-3) + 5 * find_lucas(n-4) + 6 * find_lucas(n-5)\n    return find_lucas(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = []\n    for i in range(n):\n        lucas.append(find_lucas_0(i))\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    if n == 0 or n == 1: \n        return n \n    if n == 2 or n == 3: \n        return 1 \n    if n == 4 or n == 5: \n        return 2 \n    if n == 6 or n == 7: \n        return 3 \n    if n == 8 or n == 9: \n        return 4 \n    if n == 10 or n == 11: \n        return 5 \n    if n == 12 or n == 13: \n        return 6 \n    if n == 14 or n == 15: \n        return 7 \n    if n == 16 or n == 17: \n        return 8 \n    if n == 18 or n == 19: \n        return 9 \n    if n == 20 or n == 21: \n        return 10 \n    if n == 22 or n == 23: \n        return 11 \n    if n == 24 or n == 25: \n        return 12 \n    if n == 26 or n == 27: \n        return 13 \n    if n == 28 or n == 29: \n        return 14 \n    if n == 30 or n == 31: \n        return 15 \n    if n == 32 or n == 33: \n        return 16 \n    if n == 34 or n == 35: \n        return 17 \n    if n == 36 or n == 37: \n        return 18 \n    if n == 38 or n == 39: \n        return 19 \n    if n == 40 or n == 41: \n        return 20 \n    if n == 42 or n == 43: \n        return 21 \n    if n == 44 or n == 45: \n        return 22 \n    if n == 46 or n == 47: \n        return 23 \n    if n == 48 or n == 49: \n        return 24 \n    if n == 50 or n == 51: \n        return 25 \n    if n == 52 or n == 53: \n        return 26 \n    if n == 54 or n == 55: \n        return 27 \n    if n == 56 or n == 57: \n        return 28 \n    if n == 58 or n == 59: \n        return 29 \n    if n == 60 or n == 61: \n        return 30 \n    if n == 62 or n == 63: \n        return 31 \n    if n == 64 or n == 65: \n        return 32 \n    if n == 66 or n == 67: \n        return 33 \n    if n == 68 or n == 69: \n        return 34 \n    if n == 70 or n == 71: \n        return 35 \n    if n == 72 or n == 73: \n        return 36 \n    if n == 74 or n == 75: \n        return 37 \n    if n == 76 or n == 77: \n        return 38 \n    if n == 78 or n == 79: \n        return 39 \n    if n == 80 or n == 81: \n        return 40 \n    if n == 82 or n == 83: \n        return 41 \n    if n == 84 or n == 85: \n        return 42 \n    if n == 86 or n == 87: \n        return 43 \n    if n == 88 or n == 89: \n        return 44 \n    if n == 90 or n == 91: \n        return 45 \n    if n == 92 or n == 93: \n        return 46 \n    if n == 94 or n == 95: \n        return 47 \n    if n == 96 or n == 97: \n        return 48 \n    if n == 98 or n == 99: \n        return 49 \n    if n == 100 or n == 101: \n        return 50 \n    if n == 102 or n == 103: \n        return 51 \n    if n == 104 or n == 105: \n        return 52 \n    if n == 106 or n == 107: \n        return 53 \n    if n == 108 or n == 109: \n        return 54 \n    if n == 110 or n == 111: \n        return 55 \n    if n == 112 or n == 113: \n        return 56 \n    if n == 114 or n == 115: \n        return 57 \n    if n == 116 or n == 117: \n        return 58 \n    if n == 118 or n == 119: \n        return 59 \n    if n == 120 or n == 121: \n        return 60 \n    if n == 122 or n == 123: \n        return 61 \n    if n == 124 or n == 125: \n        return 62 \n    if n == 126 or n == 127: \n        return 63 \n    if n == 128 or n == 129: \n        return 64 \n    if n == 130 or n == 131: \n        return 65 \n    if n == 132 or n == 133: \n        return 66 \n    if n == 134 or n == 135: \n        return 67 \n    if n == 136 or n == 137: \n        return 68 \n    if n == 138 or n == 139: \n        return 69 \n    if n == 140 or n == 141: \n        return 70 \n    if n == 142 or n == 143: \n        return 71 \n    if n == 144 or n == 145: \n        return 72 \n    if n == 146 or n == 147: \n        return 73 \n    if n == 148 or n == 149: \n        return 74 \n    if n == 150 or n == 151: \n        return 75 \n    if n == 152 or n == 153: \n        return 76 \n    if n == 154 or n == 155: \n        return 77 \n    if n == 156 or n == 157: \n        return 78 \n    if n == 158 or n == 159: \n        return 79 \n    if n == 160 or n == 161: \n        return 80 \n    if n == 162 or n == 163: \n        return 81 \n    if n == 164 or n == 165: \n        return 82 \n    if n == 166 or n == 167: \n        return 83 \n    if n == 168 or n == 169: \n        return 84 \n    if n == 170 or n == 171: \n        return 85 \n    if n == 172 or n == 173: \n        return 86 \n    if n == 174 or n == 175: \n        return 87 \n    if n == 176 or n == 177: \n        return 88 \n    if n == 178 or n == 179: \n        return 89 \n    if n == 180 or n == 181: \n        return 90 \n    if n == 182 or n == 183: \n        return 91 \n    if n == 184 or n == 185: \n        return 92 \n    if n == 186 or n == 187: \n        return 93 \n    if n == 188 or n == 189: \n        return 94 \n    if n == 190 or n == 191: \n        return 95 \n    if n == 192 or n == 193: \n        return 96 \n    if n == 194 or n == 195: \n        return 97 \n    if n == 196 or n == 197: \n        return 98 \n    if n == 198 or n == 199: \n        return 99 \n    if n == 200 or n == 201: \n        return 100 \n    if n == 202 or n == 203: \n        return 101 \n    if n == 204 or n == 205: \n        return 102 \n    if n == 206 or n == 207: \n        return 103 \n    if n == 208 or n == 209: \n        return 104 \n    if n == 210 or n == 211: \n        return 105 \n    if n == 212 or n == 213: \n        return 106 \n    if n == 214 or n == 215: \n        return 107 \n    if n == 216 or n == 217: \n        return 108 \n    if n == 218 or n == 219: \n        return 109 \n    if n == 220 or n == 221: \n        return 110 \n    if n == 222 or n == 223: \n        return 111 \n    if n == 224 or n == 225: \n        return 112 \n    if n == 226 or n == 227: \n        return 113 \n    if n == 228 or n == 229: \n        return 114 \n    if n == 230 or n == 231: \n        return 115 \n    if n == 232 or n == 233: \n        return 116 \n    if n == 234 or n == 235: \n        return 117 "
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string == '':\n        return list_\n    elif string == '{':\n        i = 0\n        while i < len(list_):\n            list_[i] = list_[i] + string + list_[i+1]\n            i = i + 1\n    elif string == '}':\n        i = 0\n        while i < len(list_):\n            list_[i] = list_[i] + string + list_[i+1]\n            i = i + 1\n    else:\n        i = 0\n        while i < len(list_):\n            list_[i] = list_[i] + string + list_[i+1]\n            i = i + 1\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_ + [string]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = str(list_[i])\n        if list_[i] == 'True':\n            list_[i] = '1'\n        elif list_[i] == 'False':\n            list_[i] = '0'\n        elif list_[i] == 'None':\n            list_[i] = 'null'\n        elif list_[i] == 'null':\n            list_[i] = 'null'\n        elif list_[i] == '0':\n            list_[i] = '0'\n        else:\n            list_[i] = list_[i]\n    list_ = list(list_)\n    for i in range(len(list_)):\n        if list_[i]!= 'null':\n            list_[i] = list_[i].replace(',','')\n            list_[i] = list_[i].replace('.','')\n            list_[i] = list_[i].replace('/','')\n            list_[i] = list_[i].replace('+','')\n            list_[i] = list_[i].replace('-','')\n            list_[i] = list_[i].replace('*','')\n            list_[i] = list_[i].replace('?','')\n    return list"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        if string.find('[') >= 0:\n            if string.find(']') >= 0:\n                string = string[:string.find(']')]\n            else:\n                string = string[:string.find('[')]\n            string = string.replace('{', '[').replace('}', ']')\n            if string == \"\":\n                string = \"[]\"\n            list_[i] = string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(element.format(string))\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print(list_)\n    for element in list_:\n        print(element)\n        print(element.format(string))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(list_) == 0:\n        return list_\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list()\n    list_.append(string)\n    return list_\n    \ndef add_string_in_random(list_, string, n):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(n):\n        list_.append(string.format(i))\n    return list_\n    \ndef add_string_in_random_with_format(list_, string, n, format):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(n):\n        list_.append(format.format(i))\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not list_:\n        list_.append(string)\n        return list_\n    for element in list_:\n        list_.append(string.format(element))\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not string:\n        return list_\n    elif string[0] == '{':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '{':\n        index = string.find('{')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '[':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '[':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '<':\n        index = string.find('>')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '<':\n        index = string.find('>')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '{':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '}':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '{':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '[':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '[' or string[0] == '[' or string[0] == '{':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == ']' or string[0] == ']' or string[0] == '}':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '}':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '{':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '}':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '<':\n        index = string.find('>')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '<':\n        index = string.find('>')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '&':\n        index = string.find('&')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '{':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '}':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '{':\n        index = string.find('}')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '[':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '[' or string[0] == '[' or string[0] == '{':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == '[' or string[0] == ']' or string[0] == '}':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == ']' or string[0] == ']' or string[0] == '}':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, output)\n    elif string[0] == ']':\n        index = string.find(']')\n        output = string[1:index]\n        list_[index] = output\n        add_string(list_, outpu"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {'subject':l2[i],'marks':l3[i]}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_l1 = {}\n    for i in l1:\n        dict_l1[i] = []\n        for j in l2:\n            dict_l1[i].append(j)\n    for i in l3:\n        dict_l1[i] = l3[i]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        if i not in d1.keys():\n            d1[i] = [l2[l3[i]]]\n        else:\n            d1[i].append(l2[l3[i]])\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    \n    for x in range(0,len(l1)):\n        for y in range(0,len(l2)):\n            if l1[x] == l2[y]:\n                d[l3[y]] = d.get(l3[y], [])\n                d[l3[y]].append(l1[x])\n    return d\n    \ndef main():\n    '''\n    Write a program to solve the problem of two\n    numbers.\n    '''\n    # Taking input\n    l1 = input(\"Enter two numbers : \")\n    l2 = input(\"Enter two numbers : \")\n    l3 = input(\"Enter two numbers : \")\n    \n    # Convert the input\n    l1 = list(map(int, l1.split()))\n    l2 = list(map(int, l2.split()))\n    l3 = list(map(int, l3.split()))\n    \n    # Converting the input to dictionary\n    d1 = convert_list_dictionary(l1, l2, l3)\n    \n    print(\"\\nConverted input to dictionary :\\n\")\n    print(d1)\n    \n    # Printing result\n    for y in d1.keys():\n        print(y, end = \" \")\n    print(\"\\n\")\n    for z in d1.values():\n        print(\"\".join(z))\n    print(\"\\n\")\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # If the length is different\n    if len(l1)!= len(l2):\n        l1_l2_dict = {}\n        for i in range(len(l1)):\n            # If the key is not an integer\n            if not isinstance(l1[i], int):\n                l1_l2_dict[i] = {}\n                for j in range(len(l2)):\n                    # If the value is not an integer\n                    if not isinstance(l2[j][i], int):\n                        l1_l2_dict[i][j] = {}\n                        for k in range(len(l3)):\n                            # If the value is not an integer\n                            if not isinstance(l3[k][i], int):\n                                l1_l2_dict[i][j][k] = {}\n                                for m in range(len(l2)):\n                                    # If the key is not an integer\n                                    if not isinstance(l2[m][i], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l3[k][i], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[m][i][k], int):\n                                                l1_l2_dict[i][j][k][m] = {}\n                                                for o in range(len(l2)):\n                                                    # If the key is not an integer\n                                                    if not isinstance(l2[m][i][k], int):\n                                                            # If the value is not an integer\n                                                            if not isinstance(l3[k][i][m][o], int):\n                                                                l1_l2_dict[i][j][k][m][o] = l2[m][i][k][m][o]\n                                \n                                        elif not isinstance(l2[m][i][k], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l3[k][i][m][o], int):\n                                                # If the value is not an integer\n                                                if not isinstance(l2[m][i][k][o], int):\n                                                    l1_l2_dict[i][j][k][m][o] = l2[m][i][k][o]\n                                \n                                        else:\n                                            l1_l2_dict[i][j][k][m][o] = l2[m][i][k][o]\n                                \n                                # If the key is not an integer\n                                if not isinstance(l1[i][j], int):\n                                    # If the value is not an integer\n                                    if not isinstance(l3[k][i][m][o], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[m][i][k][o], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[m][i][k][o][j], int):\n                                                l1_l2_dict[i][j][k][m][o][j] = l2[m][i][k][o][j]\n                                \n                                    elif not isinstance(l2[m][i][k][o][j], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l3[k][i][m][o][j], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[m][i][k][o][j][j], int):\n                                                l1_l2_dict[i][j][k][m][o][j][j] = l2[m][i][k][o][j][j]\n                                \n                                    else:\n                                        l1_l2_dict[i][j][k][m][o][j] = l2[m][i][k][o][j]\n                            else:\n                                for k in range(len(l1)):\n                                    # If the key is not an integer\n                                    if not isinstance(l1[k][i], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[k][i][k][k], int):\n                                                l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                                \n                                        else:\n                                            l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                \n                                    # If the value is not an integer\n                                    if not isinstance(l1[k][i], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[k][i][k][k], int):\n                                                l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                \n                                    # If the value is not an integer\n                                    elif not isinstance(l1[k][i], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[k][i][k][k], int):\n                                                l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                \n                                    elif not isinstance(l1[k][i], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[k][i][k][k], int):\n                                                l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                \n                                    # If the value is not an integer\n                                    elif not isinstance(l1[i][k], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[k][i][k][k], int):\n                                                l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                    \n                                    elif not isinstance(l1[i][k], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k], int):\n                                            # If the value is not an integer\n                                            if not isinstance(l2[k][i][k][k], int):\n                                                l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                \n                                # If the key is not an integer\n                                if not isinstance(l1[i][j], int):\n                                    # If the value is not an integer\n                                    if not isinstance(l2[k][i][k], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k][k], int):\n                                            l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                    \n                                    # If the value is not an integer\n                                    elif not isinstance(l2[k][i][k], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k][k], int):\n                                            l1_l2_dict[i][j][k][k] = l2[k][i][k]\n                                    \n                                    # If the value is not an integer\n                                    elif not isinstance(l2[k][i][k], int):\n                                        # If the value is not an integer\n                                        if not isinstance(l2[k][i][k][k], int):\n                                            l1_l2_dict[i][j][k][k] = l2[k][i][k]"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    for element in l1:\n        d[element] = l2[l2.index(element)]\n    for element in l2:\n        d[element] = l3[l3.index(element)]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out_dict = {}\n    for k in l1:\n        if l1[k] in out_dict.keys():\n            out_dict[l1[k]] = out_dict[l1[k]] + l2[k]\n        else:\n            out_dict[l1[k]] = l2[k]\n    for k in l2:\n        if l2[k] in out_dict.keys():\n            out_dict[l2[k]] = out_dict[l2[k]] + l3[k]\n        else:\n            out_dict[l2[k]] = l3[k]\n    return out_dict\n    "
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(zip(l1, l2, l3))\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    for i in range(len(l2)):\n        d[l2[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        for j in range(len(l1[i])):\n            d1[l1[i][j]] = l2[i][j]\n    for i in range(len(l2)):\n        for j in range(len(l2[i])):\n            d2[l2[i][j]] = l3[i][j]\n    for i in range(len(l3)):\n        for j in range(len(l3[i])):\n            d3[l3[i][j]] = l1[i][j]\n    return(d1, d2, d3)\n    \n    \n    \n    \n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if (n % 2 == 0):\n            return (n//2) + (n//3) + (n//4) + (n//5)\n        return n\n    i = 1\n    max_sum = 0\n    while (i <= n):\n        max_sum = max(f(i), max_sum)\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case. If n is odd, the maximum will always be n/2\n    if n % 2 == 0:\n        return n / 2\n    # If n is even, the maximum will always be n/3\n    else:\n        return n / 3\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n_list = [2, 3, 4, 5, 6, 7]\n    #for i in range (1, 10):\n    sum_lst = [f(x) for x in n_list]\n    max_sum = sum_lst[0]\n    for i in range (1, len(sum_lst)):\n        if sum_lst[i] > max_sum:\n            max_sum = sum_lst[i]\n    print (f'The maximum sum possible by using the given equation is : {max_sum}')\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum = 0\n    # for i in range (1, n + 1):\n    #     sum = sum + f(i)\n    for i in range (1,n+1):\n        sum = sum + f(i)\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range (2, n+1):\n        res = res + ((i+1)//2)\n    return res\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    elif (n == 2):\n        return 1\n    elif (n == 3):\n        return 2\n    elif (n == 4):\n        return 3\n    elif (n == 5):\n        return 4\n    elif (n == 6):\n        return 5\n    else:\n        return (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_max_sum (n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int (n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n + max(sum(map(lambda x: (x/2),range(1,int(n**0.5)))) + sum(map(lambda x: (x/3),range(1,int(n**0.5))))) + n**0.5)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output_list = input_list\n    output_list.sort(key=len, reverse=True)\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    temp_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output_list = [0] * len(input_list)\n    for i in range(len(input_list)):\n        output_list[i] = max(input_list[i:i + 2])\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    # iterate through each element\n    for element in input_list:\n        # if length is greater than max_length\n        if len(element) > max_length:\n            max_length = len(element)\n    # return max_length\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for x in input_list:\n        if len(x) > max_length:\n            max_length = len(x)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for element in input_list:\n        if len(element) > max:\n            max = len(element)\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for value in input_list:\n        if len(value) > max_length:\n            max_length = len(value)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 1:\n        return input_list\n    else:\n        return [input_list[0]] + max_length_list(input_list[1:])\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return ''\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    t = tuple(test_tup)\n    for i in t:\n        if t.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst=[]\n    for i in test_tup:\n        if i not in lst:\n            lst.append(i)\n    if len(lst)>1:\n        print(\"Invalid\")\n        return False\n    else:\n        print(\"Valid\")\n        return True\n    # pass\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup.count(test_tup[i])!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return True if not set(test_tup) == set(test_tup) else False\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1_splitted = str1.split(\" \")\n    res = \"\"\n    for i in range(len(str1_splitted)):\n        if str1_splitted[i] == str1_splitted[i+1]:\n            pass\n        else:\n            res += str1_splitted[i]\n    return res\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # TODO: Write your solution here\n    \n    # s = list(str1)\n    # num_list = [int(i) for i in s]\n    # ans = 0\n    # for i in num_list:\n    #     if i == ans:\n    #         ans = i\n    # return ans\n    \n    def find_first_non_repeating_character(str1):\n        '''\n        Write a python function to find the first non-repeated character in a given string.\n        '''\n        \n        # TODO: Write your solution here\n        \n        # s = list(str1)\n        # ans = 0\n        # for i in s:\n        #     if i == ans:\n        #         ans = i\n        # return ans\n        \n        count = {}\n        for i in str1:\n            if i not in count:\n                count[i] = 1\n            else:\n                count[i] += 1\n        for i in count.keys():\n            if count[i] == 1:\n                return i\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_of_occurrences = {}\n    for char in str1:\n        if char in dict_of_occurrences:\n            dict_of_occurrences[char] += 1\n        else:\n            dict_of_occurrences[char] = 1\n    \n    for char in str1:\n        if char not in dict_of_occurrences:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # all characters in the string\n    char_list = list(str1)\n    \n    # start the iterator from the beginning and find the first occurence\n    i = 0\n    while(i < len(char_list)):\n        if char_list[i] == char_list[i + 1]:\n            del char_list[i]\n            del char_list[i]\n            i -= 1\n        else:\n            i += 1\n    \n    # if all characters are same, return the first one\n    if len(char_list) == 0:\n        return char_list[0]\n    \n    return char_list[0]\n    \n    \ndef first_repeating_character(str1):\n    '''\n    Write a python function to find the first repeating character in a given string.\n    '''\n    \n    # all characters in the string\n    char_list = list(str1)\n    \n    # start the iterator from the beginning and find the first occurence\n    i = 0\n    while(i < len(char_list)):\n        if char_list[i] in char_list[i+1:]:\n            del char_list[i]\n            del char_list[i]\n            i -= 1\n        else:\n            i += 1\n    \n    # if all characters are same, return the first one\n    if len(char_list) == 0:\n        return char_list[0]\n    \n    return char_list[0]\n        \n        \ndef remove_sub_str(str1, substring):\n    '''\n    Write a python function to remove all occurrences of substring from a given string.\n    '''\n    \n    # all characters in the string\n    char_list = list(str1)\n    \n    # start the iterator from the beginning and find the first occurence\n    i = 0\n    while(i < len(char_list)):\n        if char_list[i] == substring:\n            del char_list[i]\n            i -= 1\n        else:\n            i += 1\n    \n    # if all characters are same, return the first one\n    if len(char_list) == 0:\n        return char_list[0]\n    \n    return char_list[0]\n        \n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # code to find the first non-repeating character\n    # find first occurrence of the character in the string\n    # if there is 1 occurrence of the character in the string\n    # return the first occurrence of the character in the string\n    i = 0\n    for i in range(0, len(str1)):\n        if str1[i]!= str1[i]:\n            if str1[i] not in str1:\n                return str1[i]\n    return 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 is None or len(str1) <= 0:\n        return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    import string\n    characters = list(str1.lower())\n    letters = []\n    for char in characters:\n        if char not in letters:\n            letters.append(char)\n    return letters[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in str1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    for key, value in dict.items():\n        if value == 1:\n            return key\n    return \"Not found\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) <= 1:\n        return str1[0]\n    else:\n        result = str1[0]\n        for i in range(len(str1)):\n            if str1[i]!= result:\n                result = str1[i]\n        return result\n    \ndef get_words(file_path):\n    '''\n    Read a file and return its words.\n    '''\n    with open(file_path) as f:\n        return f.read().split()\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Take a list of strings, where each item is a string.\n    # Use a set and a dictionary to find each character, starting from the leftmost character,\n    # and incrementing as needed until the end.\n    # Output is the first non-repeating character, or -1 if there are no non-repeating characters.\n    # Put all the characters into a new list, and return it.\n    # Iterate through the string and find the first non-repeating character.\n    # Do not include empty strings, or strings with zero characters.\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # regex = r'^[a-z]+$|^([a-z]).*\\1$'\n    # regex = r'^[a-z]+\\.+?[a-z]$'\n    # regex = r'^[a-z]+\\.+?\\1$'\n    # regex = r'^[a-z]+\\.+?\\1'\n    # regex = r'^[a-z]+\\.+?[a-z]$'\n    # regex = r'^[a-z]+\\.+?[a-z]$'\n    # regex = r'^[a-z]+\\.+?\\1'\n    regex = r'^([a-z]).*\\1$'\n    regex = r'^([a-z]).*\\1$'\n    regex = r'^([a-z]).*\\1'\n    # regex = r'^([a-z])\\1\\1$'\n    # regex = r'^([a-z])\\1\\1$'\n    # regex = r'^([a-z])\\1\\1$'\n    # regex = r'^([a-z])\\1\\1'\n    # regex = r'^([a-z])\\1\\1'\n    # regex = r'^([a-z])\\1\\1$'\n    # regex = r'^([a-z])\\1\\1$'\n    # regex = r'^([a-z])\\1\\1$'\n    # regex = r'^([a-z])\\1\\1'\n    # regex = r'^([a-z])\\1\\1$'\n    # regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z])\\1\\1$'\n    regex = r'^([a-z]"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^([a-z])([a-z])([a-z])([a-z])(\\1)'\n    if re.search(regex, string):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex_string = '^[a-zA-Z]$|^[a-z].*\\1$'\n    if bool(re.search(regex_string, string)):\n        return True\n    else:\n        return False\ndef check_digit(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same digit or not.\n    '''\n    regex_digit = '^[0-9]$'\n    if bool(re.search(regex_digit, string)):\n        return True\n    else:\n        return False\ndef check_numbers(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same number of digits or not.\n    '''\n    regex_numbers = r'^[0-9]{3,4}$'\n    if bool(re.search(regex_numbers, string)):\n        return True\n    else:\n        return False\ndef check_hashes(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same hash code or not.\n    '''\n    regex_hashes = r'^[a-z]{3,}$'\n    if bool(re.search(regex_hashes, string)):\n        return True\n    else:\n        return False\ndef check_alphanum(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same alphanumeric character or not.\n    '''\n    regex_alphanum = '^[a-zA-Z0-9]$'\n    if bool(re.search(regex_alphanum, string)):\n        return True\n    else:\n        return False\ndef check_punct(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same punctuation character or not.\n    '''\n    regex_punct = r'^[a-zA-Z0-9]*$'\n    if bool(re.search(regex_punct, string)):\n        return True\n    else:\n        return False\ndef check_zero(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same zero or not.\n    '''\n    regex_zero = r'^[a-zA-Z0-9]{3,}$'\n    if bool(re.search(regex_zero, string)):\n        return True\n    else:\n        return False\ndef check_valid(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid character or not.\n    '''\n    regex_valid = '^[a-zA-Z]$'\n    if bool(re.search(regex_valid, string)):\n        return True\n    else:\n        return False\ndef check_valid_numbers(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid number of digits or not.\n    '''\n    regex_valid_numbers = r'^[0-9]{3,4}$'\n    if bool(re.search(regex_valid_numbers, string)):\n        return True\n    else:\n        return False\ndef check_valid_alphanum(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid alphanumeric character or not.\n    '''\n    regex_valid_alphanum = '^[a-zA-Z0-9]$'\n    if bool(re.search(regex_valid_alphanum, string)):\n        return True\n    else:\n        return False\ndef check_valid_alphanum_numbers(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid alphanumeric number of digits or not.\n    '''\n    regex_valid_alphanum_numbers = r'^[0-9]{3,4}$'\n    if bool(re.search(regex_valid_alphanum_numbers, string)):\n        return True\n    else:\n        return False\ndef check_valid_punct(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid punctuation character or not.\n    '''\n    regex_valid_punct = r'^[a-zA-Z0-9]*$'\n    if bool(re.search(regex_valid_punct, string)):\n        return True\n    else:\n        return False\ndef check_valid_zero(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid zero or not.\n    '''\n    regex_valid_zero = r'^[a-zA-Z0-9]{3,}$'\n    if bool(re.search(regex_valid_zero, string)):\n        return True\n    else:\n        return False\ndef check_valid_digits(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid digits or not.\n    '''\n    regex_valid_digits = r'^[0-9]{3,4}$'\n    if bool(re.search(regex_valid_digits, string)):\n        return True\n    else:\n        return False\ndef check_valid_hashes(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid hash code or not.\n    '''\n    regex_valid_hashes = r'^[a-z]{3,}$'\n    if bool(re.search(regex_valid_hashes, string)):\n        return True\n    else:\n        return False\ndef check_valid_alphanum_numbers(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid alphanumeric number of digits or not.\n    '''\n    regex_valid_alphanum_numbers = r'^[0-9]{3,4}$'\n    if bool(re.search(regex_valid_alphanum_numbers, string)):\n        return True\n    else:\n        return False\ndef check_valid_alphanum_alphanum(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid alphanumeric character or not.\n    '''\n    regex_valid_alphanum_alphanum = '^[a-zA-Z0-9]$'\n    if bool(re.search(regex_valid_alphanum_alphanum, string)):\n        return True\n    else:\n        return False\ndef check_valid_punct(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid punctuation character or not.\n    '''\n    regex_valid_punct = r'^[a-zA-Z0-9]*$'\n    if bool(re.search(regex_valid_punct, string)):\n        return True\n    else:\n        return False\ndef check_valid_zero(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid zero or not.\n    '''\n    regex_valid_zero = r'^[a-zA-Z0-9]{3,}$'\n    if bool(re.search(regex_valid_zero, string)):\n        return True\n    else:\n        return False\ndef check_valid_digits(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same valid digits or not.\n    '''\n    regex_valid_digits = r'^[0-9]{3,4}$'\n    if bool(re.search(regex_valid_digits, string)):\n        return True\n    else:\n        return False\ndef check_valid_alphanum_numbers(string): \n    '"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_line(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same line or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_word(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same word or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_phone(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same phone number or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_domain(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same domain or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_special(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same special character or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_caps(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same capitalization or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_dollars(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same currency or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_percent(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same percent symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_hundreds(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same hundred symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_tens(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same ten symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_fifths(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same fifth symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_nines(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same nine symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_ones(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same one symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_exclamation(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same exclamation symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_question(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same question symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_answer(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same anssymbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_swap_marks(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same swap marks symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_number(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same number symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_approx(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same approx symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_lparen(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same lparen symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_rparen(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same rparen symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_lbracket(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same lbracket symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_rbracket(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same rbracket symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_lbrace(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same lbrace symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_rbrace(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same rbrace symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_square_bracket(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same square bracket symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_numbers(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same number symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_special(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same special symbol or not.\n    '''\n    if not bool(re.match(regex, string)):\n        return False\n    else:\n        return True\ndef check_sans_punctuation(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same punctuation symbol or not.\n    '''"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (re.match(regex, string)!= None)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #List to store possible matched characters\n    possible_chars = []\n    #A list to store possible matched characters for each character\n    possible_chars_for_each_character = []\n    #Check character\n    for i in range(len(string)):\n        #Append the character to possible_chars\n        possible_chars.append(string[i])\n        #Check character\n        if string[i] in possible_chars:\n            #Append the character to possible_chars_for_each_character\n            possible_chars_for_each_character.append(string[i])\n            \n    #Check if character is a duplicate\n    for i in possible_chars_for_each_character:\n        #Check if the character is a duplicate\n        if i in possible_chars:\n            #Return true if the character is a duplicate\n            return True\n        #Check if the character is a duplicate\n        elif i in possible_chars_for_each_character:\n            #Return false if the character is a duplicate\n            return False\n        #Check if the character is a duplicate\n        else:\n            #Append the character to possible_chars_for_each_character\n            possible_chars_for_each_character.append(i)\n        \n    #Check if character is a duplicate\n    for i in possible_chars:\n        #Check if the character is a duplicate\n        if i in possible_chars:\n            #Return false if the character is a duplicate\n            return False\n        #Check if the character is a duplicate\n        elif i in possible_chars_for_each_character:\n            #Return true if the character is a duplicate\n            return True\n        #Check if the character is a duplicate\n        else:\n            #Append the character to possible_chars_for_each_character\n            possible_chars_for_each_character.append(i)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    # len(a) & len(b) & len(c) should be equal\n    if len(a) < len(b) or len(a) < len(c):\n        a, b, c = b, a, c\n    if len(a) % 2 == 0:\n        # set a, b and c to equal length\n        # now we have to find the position of the median of b\n        l = len(b) // 2\n        r = len(b) - l\n        if len(c) % 2 == 0:\n            # if c is even, get the median of c\n            return (a[l] + a[r]) / 2\n        else:\n            # if c is odd, get the median of a\n            return a[l]\n    else:\n        # set a, b and c to equal length\n        # now we have to find the position of the median of b\n        l = len(b) // 2\n        r = len(b) - l\n        if len(c) % 2 == 0:\n            # if c is even, get the median of c\n            return a[l]\n        else:\n            # if c is odd, get the median of a\n            return b[l]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_a = a.count(1)\n    num_b = b.count(1)\n    num_c = c.count(1)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3:\n        return a[0]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b and b == c:\n        return a\n    elif b == a:\n        return b\n    elif a > b:\n        return a\n    elif a > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #Write your code here\n    return a,b,c\n    "
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c == 0:\n        return 0\n    elif b == 0:\n        return a\n    elif c == 0:\n        return b\n    elif a > b:\n        a,b = b,a\n    elif a > c:\n        a,c = c,a\n    else:\n        return b\n    if a % 2 == 0:\n        return a//2\n    else:\n        return (a+c)//2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_list = [a,b,c]\n    sorted_a_list = sorted(a_list)\n    if len(a_list)%2 == 0:\n        return sorted_a_list[int(len(a_list)/2)]\n    else:\n        return (sorted_a_list[int(len(a_list)/2)-1]+sorted_a_list[int(len(a_list)/2)])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    b = sorted(b)\n    return (b[int(len(b)/2)])\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def quartiles(a,b,c):\n        # sort the array by the first half\n        a.sort(reverse=True)\n        b.sort(reverse=True)\n        c.sort(reverse=True)\n        # compute the median\n        return (int((a[0]+b[0]+c[0])/3),int((a[1]+b[1]+c[1])/3),int((a[2]+b[2]+c[2])/3))\n    #check if the arrays are sorted\n    if a[0]>a[1]>a[2]>b[0]>b[1]>b[2]:\n        #check if there are even numbers in the list\n        if a[0]>b[1] and a[1]>c[1]:\n            #return the median of the first half\n            return quartiles(a,b,c)\n        elif b[1]>c[1]:\n            #return the median of the second half\n            return quartiles(a,b,c)\n        elif a[2]>c[1]:\n            #return the median of the third half\n            return quartiles(a,b,c)\n    else:\n        #check if there are even numbers in the list\n        if a[0]>c[1] and a[1]>b[1]:\n            #return the median of the first half\n            return quartiles(a,b,c)\n        elif c[1]>b[1]:\n            #return the median of the second half\n            return quartiles(a,b,c)\n        elif a[2]>b[1]:\n            #return the median of the third half\n            return quartiles(a,b,c)\n    \na=[1,2,3,4,5,6,7,8,9]\nb=[10,11,12,13,14,15,16,17,18]\nc=[20,21,22,23,24,25,26,27,28]\nprint(median_numbers(a,b,c)"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums.sort()\n    return sum(nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Check if input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"The argument is not a list\")\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # an array\n    res = [0] * len(nums)\n    # base case\n    for i in range(len(nums)):\n        res[i] = nums[i]\n    # recursive formula\n    def compute(nums, index):\n        if index < 0:\n            # error\n            raise Exception\n        res[index] += nums[index]\n        compute(nums, index - 1)\n        compute(nums, index - 2)\n    compute(nums, len(nums) - 1)\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    # import math\n    # num = []\n    # for i in nums:\n    #     num.append(int(i))\n    # print(num)\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += num\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for number in nums:\n        total += number\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = 0\n    for n in nums:\n        sums += n\n    return sums\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for number in nums:\n        digits.append(int(str(number)[0]))\n    return sum(digits)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Store the values in a variable as a tuple\n    test_tup1 = test_tup1[:]\n    test_tup2 = test_tup2[:]\n    # Convert both tuples into list of integers\n    t1 = [int(i) for i in test_tup1]\n    t2 = [int(i) for i in test_tup2]\n    # Define a 2D array as a two dimensional list\n    t3 = [[0 for x in range(len(t2))] for y in range(len(t1))]\n    # Loop through each list within the 2D array\n    for i in range(len(t1)):\n        for j in range(len(t2)):\n            # Check if the index is not out of bounds\n            if(i > len(t1)-1):\n                i = i - len(t1) + 1\n            if(j > len(t2)-1):\n                j = j - len(t2) + 1\n            # Check if the values are in the correct range\n            if(t1[i] > t2[j]):\n                t3[i][j] = t3[i][j] + 1\n            elif(t1[i] < t2[j]):\n                t3[i][j] = t3[i][j] - 1\n            else:\n                t3[i][j] = t3[i][j]\n    # Create the 2D array as a 3D array\n    t3 = np.array(t3)\n    # Return the result\n    return t3\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = []\n    tup2 = []\n    for i in test_tup1:\n        tup1.append(i[0])\n    for i in test_tup2:\n        tup2.append(i[0])\n    if len(tup1) == len(tup2):\n        for i in range(len(tup1)):\n            tup1[i] = int(tup1[i]) ^ int(tup2[i])\n    return tup1\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_index = 0 if len(test_tup1) == 1 else test_tup1[-1]\n    test_tup2_index = 0 if len(test_tup2) == 1 else test_tup2[-1]\n    return [test_tup1[i] ^ test_tup2[i] for i in range(len(test_tup1))]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = []\n    for i in range(len(test_tup1)):\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        a.append(xor_result)\n    return a\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #Write your code here\n    return tuple([int(''.join(i),2) for i in zip(*test_tup1,*test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        result = result ^ test_tup2[i]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    print(f\"{test_tup1} and {test_tup2}:\\n\")\n    print(f\"{test_tup1 ^ test_tup2}\")\n    #print(test_tup1 ^ test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i] ^ test_tup2[i])\n    return test_list\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for t in test_tup1:\n        for b in test_tup2:\n            if t[0] < b[0] and t[1] < b[1]:\n                t[0], t[1] = t[1], t[0]\n            elif t[0] > b[0] and t[1] > b[1]:\n                t[0], t[1] = t[1], t[0]\n            elif t[0] < b[0] and t[1] > b[1]:\n                t[0], t[1] = t[1], t[0]\n            elif t[0] > b[0] and t[1] < b[1]:\n                t[0], t[1] = t[1], t[0]\n            elif t[0] < b[0] and t[1] < b[1]:\n                t[0], t[1] = t[1], t[0]\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    num_tuple = []\n    for i in test_list:\n        num_tuple.append(len(i))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_list = []\n    for test in test_list:\n        freq_list.append(len(test))\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n    \ndef get_filename(file_path):\n    '''\n    Read the file_path.\n    '''\n    if os.path.isfile(file_path):\n        with open(file_path, 'r') as f:\n            lines = f.readlines()\n            return lines[0].split()[0]\n    return \"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    freq = Counter(test_list)\n    print(freq)\n    freq_list = list(freq.values())\n    print(freq_list)\n    freq_list.sort()\n    print(freq_list)\n    return freq_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    word_freq = collections.Counter(test_list)\n    print(f'Top {len(test_list)} words in the list are: ')\n    for word, freq in word_freq.items():\n        print(word, freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    #n_unique_tuples = 0\n    \n    #for item in test_list:\n    #    if item in tuple_counter:\n    #        n_unique_tuples += 1\n    \n    #return n_unique_tuples\n    \n    \n    # Creating a dictionary with the key being the label and the value being the number of occurrences\n    dict_test = {}\n    \n    for item in test_list:\n        if item in dict_test:\n            dict_test[item] += 1\n        else:\n            dict_test[item] = 1\n    \n    # Calculate the frequencies of each label\n    for k in dict_test:\n        dict_test[k] = dict_test[k] / len(test_list)\n    \n    return dict_test\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    f=open(test_list)\n    raw_test_list=[]\n    for line in f:\n        tuple_list=line.split()\n        raw_test_list.append(tuple_list)\n    f.close()\n    unique_list=[]\n    for i in raw_test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for line in test_list:\n        line = line.strip().split()\n        for i in range(len(line)):\n            line[i] = int(line[i])\n        test_list.append(line)\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    all_dict = {}\n    count = 0\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(sum, zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # First parameter should be tuple, second parameter should be tuple\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError('parameter should be a tuple')\n    # Check if one tuple is passed\n    if not len(test_tup1) == len(test_tup2):\n        raise TypeError('parameter should be a tuple of same length')\n    # Create a list of tuples\n    test_tup_list = []\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Iterate through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Append the tuple\n            test_tup_list.append((test_tup1[i][j], test_tup2[i][j]))\n    # Return the tuple\n    return tuple(test_tup_list)"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # create an empty list\n    nested_tuple_list = []\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # pass in test_tup1 and test_tup2\n    # pass in tuples as parameters\n    # then call function\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print('Index wise addition of tuple elements in the given two tuples.')\n    print('Example: (1, 2, 3) and (1, 3, 2).')\n    test_tup1 = tuple(map(int, test_tup1))\n    test_tup2 = tuple(map(int, test_tup2))\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = test_tup1[:]\n    for i in range(len(test_tup1)):\n        result[i] = test_tup2[i][:]\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    # Step 1: Initialize Indexed Tuples\n    test_tup1 = (test_tup1)\n    test_tup2 = (test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([(tup1[i]+tup2[i]) for i in range(len(tup1))])\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def AddNestedTuples():\n        result = test_tup1[0] + test_tup2[0]\n        return result\n    return AddNestedTuples\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a==b):\n        return a\n    if(a<b):\n        a=a+b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # your code here\n    if a < b:\n        a, b = b, a\n    print(a,b)\n    if b == 0:\n        print(a)\n    else:\n        minimum = a\n        print(a,b,minimum)\n        return minimum\n    if a == 0:\n        print(b)\n    else:\n        minimum = a\n        print(a,b,minimum)\n        return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        smaller=a\n    else:\n        smaller=b\n    return smaller\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a==b:\n        return a\n    else:\n        return a if a>b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    x = min(a,b)\n    return x\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = a\n    if a > b:\n        minimum = b\n    return minimum\n    #print(minimum)\n    pass\ndef maximum(a,b): \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a\n    if a < b:\n        maximum = b\n    return maximum\n    #print(maximum)\n    pass\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    average = (a+b)/2\n    return average\n    #print(average)\n    pass\ndef variance(a,b):\n    '''\n    Write a python function to find the variance of two numbers.\n    '''\n    variance = (a-b)**2\n    return variance\n    #print(variance)\n    pass\ndef standard_deviation(a,b):\n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    standard_deviation = (a-b)/math.sqrt(a*b)\n    return standard_deviation\n    #print(standard_deviation)\n    #pass\ndef binomial_coefficient(n,p):\n    '''\n    Write a python function to find the binomial coefficient of two numbers.\n    '''\n    binomial_coefficient = n*math.pow((1-p),n-1)\n    return binomial_coefficient\n    #print(binomial_coefficient)\n    #pass\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    factorial = n * (n-1) * (n-2)\n    return factorial\n    #print(factorial)\n    #pass\ndef factorial_recursive(n):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * factorial_recursive(n-1)\n    #print(factorial_recursive(n))\n    #pass\ndef sum_of_squares(a,b):\n    '''\n    Write a python function to calculate the sum of squares of a and b.\n    '''\n    sum_of_squares = a + b\n    return sum_of_squares\n    #print(sum_of_squares)\n    #pass\ndef count_of_squares(a,b):\n    '''\n    Write a python function to calculate the count of squares of a and b.\n    '''\n    count_of_squares = a + b\n    return count_of_squares\n    #print(count_of_squares)\n    #pass\ndef x_coordinate(a,b):\n    '''\n    Write a python function to calculate the X coordinate of a and b.\n    '''\n    x_coordinate = a*b\n    return x_coordinate\n    #print(x_coordinate)\n    #pass\ndef y_coordinate(a,b):\n    '''\n    Write a python function to calculate the Y coordinate of a and b.\n    '''\n    y_coordinate = b*b\n    return y_coordinate\n    #print(y_coordinate)\n    #pass\ndef calculate_area(a,b):\n    '''\n    Write a python function to calculate the area of a circle with radius b.\n    '''\n    area = math.pi * b * b\n    return area\n    #print(area)\n    #pass\ndef calculate_perimeter(a,b):\n    '''\n    Write a python function to calculate the perimeter of a circle with radius b.\n    '''\n    perimeter = 2 * math.pi * b\n    return perimeter\n    #print(perimeter)\n    #pass\ndef area_of_sector(a,b):\n    '''\n    Write a python function to calculate the area of a sector with radius a and b.\n    '''\n    area = math.pi * a * b\n    return area\n    #print(area)\n    #pass\ndef volume_of_sector(a,b):\n    '''\n    Write a python function to calculate the volume of a sector with radius a and b.\n    '''\n    volume = math.pi * a * b\n    return volume\n    #print(volume)\n    #pass\ndef distance_from_origin(a,b):\n    '''\n    Write a python function to calculate the distance from origin to the origin.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef distance_from_center(a,b):\n    '''\n    Write a python function to calculate the distance from center to the origin.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef distance_from_other_point(a,b):\n    '''\n    Write a python function to calculate the distance from origin to another point.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef distance_to_other_point(a,b):\n    '''\n    Write a python function to calculate the distance to another point.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef distance_to_sector(a,b):\n    '''\n    Write a python function to calculate the distance to a sector.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef distance_to_center(a,b):\n    '''\n    Write a python function to calculate the distance to center.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef distance_to_sector_angle(a,b):\n    '''\n    Write a python function to calculate the distance to a sector in angle of sector.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef distance_to_center_angle(a,b):\n    '''\n    Write a python function to calculate the distance to center in angle of sector.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef center_to_sector_angle(a,b):\n    '''\n    Write a python function to calculate the sector in angle of center.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef center_to_sector_angle_tuple(a,b):\n    '''\n    Write a python function to calculate the sector in angle of center in tuple of sectors.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef sector_to_center_angle(a,b):\n    '''\n    Write a python function to calculate the sector in angle of sector.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef sector_to_sector_angle(a,b):\n    '''\n    Write a python function to calculate the sector in angle of sector.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef sector_to_sector_angle_tuple(a,b):\n    '''\n    Write a python function to calculate the sector in angle of sector in tuple of sectors.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef angle_to_sector_angle(a,b):\n    '''\n    Write a python function to calculate the sector in angle of sector.\n    '''\n    distance = math.sqrt((a-b)**2)\n    return distance\n    #print(distance)\n    #pass\ndef angle_to_sector_angle_tupl"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return -1\n    return\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.count(tuple1) > 0\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    flag=False\n    for i in range(0,len(tuplex)):\n        if tuplex[i]==tuple1:\n            flag=True\n    return flag\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0] == tuplex[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check_tuplex = True\n    for val in tuplex:\n        if val in tuple1:\n            return True\n        else:\n            check_tuplex = False\n    return check_tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex) is tuple:\n        if len(tuplex)!= len(tuple1):\n            return False\n        for elem in tuplex:\n            if elem not in tuple1:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1[0]!= tuplex[0]: return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for el in tuplex:\n        if el in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    print(\"This is a funtion!\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!=0: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n    if (x%2):\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num_list = []\n    for num in range(1, x+1):\n        if num % 2 == 1:\n            num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd_count=0\n    \n    for i in range(1,x):\n        if (x % i) == 0:\n            odd_count+=1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True \n    else: \n        return False \n    #Write your code here\n    \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x % 2\n    if y == 0: \n        print(\"The given number is even.\")\n    else: \n        print(\"The given number is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd_count = 0\n    for i in range(x):\n        if x % i == 0:\n            if i % 2 == 0:\n                odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    max_num = max(n)\n    new_num = []\n    for i in range(len(n)):\n        new_num.append(n[i])\n        if i < len(n)-1:\n            new_num[i] = str(new_num[i])\n    return \"\".join(new_num)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #For the biggest number, we must add the largest of the digits of the number\n    #Then create a new number.\n    #Then concatenate all the new numbers together.\n    #This method is called in the function.\n    def rearrange_bigger(n):\n        arr = [int(i) for i in str(n)]\n        arr.sort()\n        arr.reverse()\n        new = 0\n        for i in range(len(arr)):\n            new += arr[i]*(10**i)\n        return int(str(new)[::-1])\n    return rearrange_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = 0\n    while n:\n        digits = n % 10\n        result = result * 10 + digits\n        n = n // 10\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return rearrange_bigger(n//10) + 10*(n%10)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # your code goes here\n    if n == 0:\n        return 0\n    for i in range(len(str(n))):\n        if len(str(n)) - 1 >= i:\n            return n + rearrange_bigger(n // 10)\n        \n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #Your code here\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = \"\"\n    # storing the reversed numbers\n    rev = list(map(str, reversed(str(n))))\n    for i in range(len(rev)):\n        if(i % 2 == 0):\n            new_num += rev[i]\n        else:\n            new_num += rev[i].upper()\n    return int(new_num)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    new_num = \"\"\n    digit = 1\n    while n > 0:\n        new_num = str(n % 10) + new_num\n        n //= 10\n    return new_num\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    c = 0\n    for i in range(0,n):\n        if n%10 > 0:\n            n = n//10\n            c += 1\n        else:\n            n = n//10\n            c += 1\n    return n+1+c\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], nums1[i]))\n    for i in range(len(nums2)):\n        heapq.heappush(heap, (nums2[i], nums2[i]))\n    for _ in range(k):\n        min_heap.append((heapq.heappop(heap)[1], heapq.heappop(heap)[1]))\n    return min_heap\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return 0\n    if k < 0:\n        return 0\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    small = []\n    small.append(nums1[0])\n    small.append(nums1[1])\n    small.sort()\n    small.reverse()\n    small = list(small)\n    small.append(nums2[0])\n    small.append(nums2[1])\n    small.sort()\n    small.reverse()\n    for i in range(k-1):\n        small.pop()\n    small.pop()\n    return small\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # find a pair that has minimum value\n    def find_pair(nums1, nums2):\n        # find the index of the first element\n        idx1 = nums1.index(min(nums1))\n        # find the index of the second element\n        idx2 = nums2.index(min(nums2))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Given two sorted arrays, return the minimum number of pairs.\n    # Time complexity - O(log n).\n    # Space Complexity - O(1).\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # define the heaps for the array\n    heap1 = []\n    heap2 = []\n    heap1.extend(nums1)\n    heap2.extend(nums2)\n    # define the max heap\n    max1 = heapq.nlargest(k, heap1, key=lambda x: x)\n    max2 = heapq.nlargest(k, heap2, key=lambda x: x)\n    # find all the pairs\n    return(find_all_pairs(max1, max2))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if k > len(nums1):\n        return [nums1, nums2]\n    else:\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    if k == 0:\n                        pairs.append([nums1[i], nums2[j]])\n                    elif k == 1:\n                        if nums1[i] in nums2:\n                            pairs.append([nums1[i], nums2[j]])\n                        else:\n                            pairs.append([nums1[i], nums2[j]])\n                    else:\n                        if nums1[i] in nums2:\n                            heapq.heapify(pairs)\n                            pairs.sort()\n                            pairs = pairs[:k]\n                        else:\n                            heapq.heapify(pairs)\n                            pairs.sort()\n                            heapq.heapify(pairs)\n        return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort by using heapsort\n    heap = []\n    heapq.heapify(heap)\n    # keep going untill k number of pairs is found\n    while len(nums1) > 0 and len(nums2) > 0:\n        a = heapq.heappop(heap)\n        b = heapq.heappop(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # simple approach\n    # nums1 = sorted(nums1)\n    # nums2 = sorted(nums2)\n    #\n    # # initialise heap with len of length of nums1 and nums2\n    # heaps = []\n    # for i in range(len(nums1)):\n    #     heapq.heappush(heaps, (nums1[i], i))\n    # for j in range(len(nums2)):\n    #     heapq.heappush(heaps, (nums2[j], j))\n    #\n    # # call the k smallest pairs function on the heap and store in a list\n    # result = []\n    # for i in range(k):\n    #     smallest_pair = heapq.heappop(heaps)\n    #     result.append(smallest_pair)\n    # return result\n    #\n    # # this is awesome, but can be optimized\n    # result = []\n    # for i in range(len(nums1)):\n    #     heapq.heappush(heaps, (nums1[i], i))\n    # for j in range(len(nums2)):\n    #     heapq.heappush(heaps, (nums2[j], j))\n    #\n    # # pop one pair and put it in the result\n    # for _ in range(k):\n    #     smallest_pair = heapq.heappop(heaps)\n    #     result.append(smallest_pair)\n    #\n    # return result\n    #\n    # # this is also not ideal, but less efficient\n    # result = []\n    # for num1 in nums1:\n    #     for num2 in nums2:\n    #         heapq.heappush(heaps, (num1 + num2, num1 * num2))\n    #\n    # # call the k smallest pairs function on the heap and store in a list\n    # result = []\n    # for i in range(k):\n    #     smallest_pair = heapq.heappop(heaps)\n    #     result.append(smallest_pair)\n    # return result\n    \n    # TODO: write your own version here\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    heaps = []\n    for i in range(len(nums1)):\n        heapq.heappush(heaps, (nums1[i], i))\n    for j in range(len(nums2)):\n        heapq.heappush(heaps, (nums2[j], j))\n    \n    result = []\n    for _ in range(k):\n        smallest_pair = heapq.heappop(heaps)\n        result.append(smallest_pair)\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    num = []\n    pair = []\n    for i in range(len(nums1)):\n        num.append(nums1[i])\n    for i in range(len(nums2)):\n        num.append(nums2[i])\n    for i in range(len(num)):\n        for j in range(i+1,len(num)):\n            if num[i] == num[j]:\n                pair.append([i,j])\n    s = sorted(pair, key=lambda x: x[1])\n    print(s)\n    print(k-len(pair))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    min_val = list1[0][1]\n    for i in range(1,len(list1)):\n        if list1[i][1] < min_val:\n            min_val = list1[i][1]\n            min_product = list1[i][0]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Write your code here\n    min_product=0\n    for i in range(len(list1)-1):\n        min_product=list1[i][1]+list1[i+1][1]\n    \n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product=list1[0]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i][1]<list1[j][1]:\n                min_product=min(list1[i][1],min_product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0][1]\n    min_product = list1[0][1]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][1] < list1[j][1]:\n                min_product = min(min_product,list1[i][1]*list1[j][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # your code here\n    return max(list1)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    temp_list = list1\n    min_product = list1[0][0] * list1[1][0]\n    for item in list1[1:]:\n        if item[0] < min_product:\n            min_product = item[0]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = list1[0][0]*list1[0][1] + list1[1][0]*list1[1][1]\n    for i in range(2,len(list1)):\n        minimum = min(minimum, list1[i][0]*list1[i][1] + minimum)\n    return minimum\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product=list1[0][1]\n    for i in range(1,len(list1)):\n        min_product=min(min_product,list1[i][1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            minimum.append(list1[i][0]*list1[j][1])\n    return minimum\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(tuple(map(min, zip(*list1))))\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = 0\n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(0, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    valmin = listval[0]\n    for element in listval:\n        if element < valmin:\n            valmin = element\n    return valmin\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return -1\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    i = 0\n    if len(listval) > 0:\n        for item in listval:\n            if item < listval[i]:\n                i = listval.index(item)\n    return listval[i]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in listval:\n        if i < min(listval):\n            min = i\n            \n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #we could use a regular expression, but the regex is quite hard to work with\n    #this is the basic idea\n    #first, capitalize the first letter, then make all the letters uppercase\n    #then, capitalize the rest of the word\n    #the idea is to apply this to the word\n    #remove any characters outside of the uppercase letter and lowercase the word\n    #then lowercase everything, and concatenate the result to the original word\n    #then use regex to find the match, if one is found, then return the result\n    #note: the match should be of the form \"[A-Za-z0-9_]*\", e.g. 'hello' or 'HELLO'\n    #note: special characters are now removed from the resulting string\n    if len(word) == 0:\n        return word\n    if len(word) == 1:\n        if word[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return word.upper()\n        if word[0] in 'abcdefghijklmnopqrstuvwxyz':\n            return word.lower()\n    if len(word) > 1:\n        if re.match(r'^[A-Za-z0-9_]+$', word[0]):\n            return word.upper()\n        if re.match(r'^[A-Za-z0-9]+$', word[1:]):\n            return word.lower()\n    else:\n        return word\n    "
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.match(r'^[A-Z]', word):\n        return word[:2].lower() + word[2:]\n    else:\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.search(r\"[^a-zA-Z0-9-]+\", word):\n        return \"\"\n    else:\n        return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x[0].upper() + x[1:] for x in re.split(r'([A-Z][a-z]+)', word.strip('_')))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(w.capitalize() for w in word.split(\"_\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.split('([a-z]+)', word)\n    s = map(lambda x: x.lower(), s)\n    return ''.join(i for i in s if not i.isdigit())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    word = word.replace('-', '_')\n    word = word.replace('_', '-')\n    word = word.replace('.', '_')\n    word = word.replace(',', '_')\n    word = word.replace('.', '_')\n    word = word.lower()\n    word = re.sub(r'^[^_a-z0-9]*', '', word)\n    word = re.sub(r'_+$', '', word)\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Can this function be made more clever?\n    # Create a regex that matches a snake case string and converts it to camel case.\n    # This is easier to do by just creating a regular expression.\n    # For instance, create a regular expression that matches a case insensitive\n    # snake case string and converts it to camel case.\n    # Use a '\\w' for the underscore character.\n    # You'll need to add quotes around the string.\n    \n    # Create a regular expression to match an upper case letter followed by an\n    # underscore.\n    # Use the newlines at the end of each word to avoid that.\n    # Then add the regular expression to a list called data.\n    \n    # Use regex to match an upper case letter followed by an underscore.\n    # Append the result to a new list called uppercase_data.\n    # Now change the uppercase_data to lower case.\n    \n    # Use regex to match a lower case letter followed by an underscore.\n    # Append the result to a new list called lowercase_data.\n    # Now change the lowercase_data to upper case.\n    \n    # Use regex to match a capital letter followed by an underscore.\n    # Append the result to a new list called snake_case_data.\n    # Now change the snake_case_data to lower case.\n    \n    # Get the lower case data and convert it to upper case.\n    lowercase_data = re.sub(r'[a-z]', '_', word.lower())\n    \n    # Get the upper case data and convert it to lower case.\n    uppercase_data = re.sub(r'[A-Z]', '_', word.upper())\n    \n    # Get the snake case data and convert it to lower case.\n    snake_case_data = re.sub(r'[a-z]', '_', word.title())\n    \n    # Get the camel case data and convert it to upper case.\n    camel_case_data = re.sub(r'[A-Z]', '_', lowercase_data)\n    \n    # Get the uppercase data and convert it to lower case.\n    uppercase_data = re.sub(r'[A-Z]', '_', uppercase_data)\n    \n    # Get the snake case data and convert it to lower case.\n    snake_case_data = re.sub(r'[a-z]', '_', snake_case_data)\n    \n    # Get the camel case data and convert it to lower case.\n    camel_case_data = re.sub(r'[A-Z]', '_', camel_case_data)\n    \n    # Get the uppercase data and convert it to lower case.\n    uppercase_data = re.sub(r'[A-Z]', '_', uppercase_data)\n    \n    # Get the snake case data and convert it to lower case.\n    snake_case_data = re.sub(r'[a-z]', '_', snake_case_data)\n    \n    # Add the data to a new list called data.\n    data = [uppercase_data, camel_case_data, lowercase_data, snake_case_data]\n    \n    # Replace the underscore character with a space.\n    data[3] = data[3].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[0] = data[0].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[1] = data[1].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[2] = data[2].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[3] = data[3].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[4] = data[4].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[5] = data[5].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[6] = data[6].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[7] = data[7].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[8] = data[8].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[9] = data[9].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[10] = data[10].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[11] = data[11].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[12] = data[12].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[13] = data[13].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[14] = data[14].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[15] = data[15].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[16] = data[16].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[17] = data[17].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[18] = data[18].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[19] = data[19].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[20] = data[20].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[21] = data[21].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[22] = data[22].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[23] = data[23].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[24] = data[24].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[25] = data[25].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[26] = data[26].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[27] = data[27].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[28] = data[28].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[29] = data[29].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[30] = data[30].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[31] = data[31].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[32] = data[32].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[33] = data[33].replace('_','')\n    \n    # Replace all snake case letters with a space.\n    data[34] = data[34].replace('_','')\n    \n    # Replace all camel case letters with a space.\n    data[35] = data[35].replace('_','')\n    \n    # Replace all uppercase letters with a space.\n    data[36] = data[36].replace('_','')\n    \n    # Replace all lower case letters with a space.\n    data[37] = data[37]"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort(reverse=True)\n    n = len(l)\n    \n    if n < 2:\n        return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    print('remove odd numbers')\n    result = []\n    for i in l:\n        if(i%2!= 0):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i=0\n    new_l=[]\n    while i<len(l):\n        if l[i]%2==0:\n            l.pop(i)\n        else:\n            i+=1\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    temp=[]\n    for i in l:\n        if(i%2==1):\n            temp.append(i)\n    l=temp\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # your code here\n    if not l:\n        return []\n    return [i for i in l if i%2==1]\n    \n    # remove odd numbers\n    # your code here\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [i for i in l if i%2!= 0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 1:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2 == 1:\n            new_l.append(i)\n    return new_l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i%2!= 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    assert n >= 1, 'n must be >= 1'\n    assert n <= len(list1), 'n must be <= len(list1)'\n    l = len(list1)\n    if n == 0:\n        return list1[l-1]\n    else:\n        return list1[l-n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    assert n >= 0, 'The n must be a non-negative integer'\n    return list1[(n+1)%len(list1)]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if (len(list1) < n):\n        return None\n    elif (n < 1):\n        return None\n    else:\n        return list1[n - 1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a list\n    first_list = list1[:]\n    # Create a list\n    second_list = list2[:]\n    # Create a nested loop to check if there is any value in both the lists\n    for i in second_list:\n        if i in first_list:\n            first_list.remove(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        for item1 in list2:\n            if item in item1:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True if list1 and list2 else False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1=list1\n    list2=list2\n    temp=[]\n    \n    if(type(list1)!=list):\n        return False\n    \n    if(type(list2)!=list):\n        return False\n    \n    for i in range(len(list1)):\n        if(list1[i] not in temp):\n            temp.append(list1[i])\n        if(list2[i] not in temp):\n            temp.append(list2[i])\n    \n    return temp\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.count(list2[0])>=len(list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (len(list1)<len(list2)):\n        list1, list2 = list2, list1\n    elif (len(list1)>len(list2)):\n        list1, list2 = list1, list2\n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    return (count==len(list1))\n    \n    \n    \n    \ndef compare(num1,num2,diff):\n    '''\n    Write a python function to compare two numbers in a sequence.\n    '''\n    if (overlapping(num1,num2)):\n        if (num1>num2):\n            num1,num2=num2,num1\n        if (num1<diff):\n            num1,diff=diff,num1\n        if (num2<diff):\n            num2,diff=diff,num2\n    return (num1,num2,diff)\n    \n    \n    \ndef main():\n    \n    print(compare(1,2,5))\n    print(compare(1,3,5))\n    print(compare(3,2,5))\n    print(compare(1,2,0))\n    print(compare(10,3,5))\n    print(compare(0,0,0))\n    print(compare(4,0,1))\n    print(compare(4,4,4))\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    check = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                check += 1\n    if check == len(list1) - len(list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        if list1[0] <= list2[0] and list1[-1] >= list2[-1]:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for num in arr:\n        if num > max_product:\n            max_product = num\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > arr[j]:\n                return arr[i], arr[j]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest_product = 1\n    for num in arr:\n        product = num*highest_product\n        if product > highest_product:\n            highest_product = product\n    return highest_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = arr[0] * arr[0]\n    for num in arr:\n        product = num*num\n        if product > maxProduct:\n            maxProduct = product\n    return maxProduct\narr = [2,3,2,3]\nprint(maxProduct(arr))\narr = [1,2,3,2,5,6]\nprint(maxProduct(arr)"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    n = len(arr)\n    if n == 0:\n        return None\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = -sys.maxsize\n    for i in range(len(arr)): \n        for j in range(i, len(arr)): \n            if arr[i] * arr[j] > max: \n                max = arr[i] * arr[j]\n    return max\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return arr[max_index]\n    \ndef find_K_Pairs(arr, k):\n    '''\n    Given an array arr of integers and an integer k, \n    find a pair of arr[i] and arr[i+k-1] such that \n    their product is maximum. \n    '''\n    arr.sort()\n    product_max = max_Product(arr)\n    if product_max == arr[k]:\n        return arr[k]\n    else:\n        return None\n    \n    \ndef binary_search(arr, x):\n    '''\n    Given an array arr of integers and a number x, \n    return the index of the element x in arr. \n    If it is not present, return -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1\n    \ndef count_non_repeted_elements(arr):\n    '''\n    Given a given array of integers, \n    return the number of non-repeated elements.\n    '''\n    counter = 0\n    for element in arr:\n        if element!= arr[0]:\n            counter += 1\n    return counter\n    \ndef find_K_elements(arr, k):\n    '''\n    Given a sorted array, k, return the K elements \n    that are sorted in the array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < k:\n            left = mid + 1\n        elif arr[mid] > k:\n            right = mid - 1\n        else:\n            return arr[mid]\n    return None\n    \ndef find_greater_sum_numbers(arr, k):\n    '''\n    Given an array arr of integers, \n    return the greatest sum in arr that is \n    smaller than the given number k.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        greater_sum = arr[mid] + arr[mid + 1]\n        if greater_sum > k:\n            right = mid - 1\n        elif greater_sum < k:\n            left = mid + 1\n        else:\n            return arr[mid]\n    return None\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n    print(\"the maximum product is : \",max_prod)\n    return max_i, max_j\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code goes here\n    return''.join(sorted(list(set(Input))))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Empty list.\n    lst = []\n    # Function to get common first element.\n    def common_first(input_list, input_list2): \n        # Check if the input list contains the same values as the input list.\n        if input_list == input_list2:\n            return input_list[0]\n        # If it doesn't have the same value, return input_list[0].\n        elif input_list!= input_list2:\n            return input_list[0]\n        # If it contains same value, return None.\n        else:\n            return None\n    # Function to check if list is length of two.\n    def check(input_list):\n        # If list is length of two, return None.\n        if len(input_list) == 2:\n            return None\n        # Check if the first element in the list is the same as the second element in the list.\n        elif input_list[0] == input_list[1]:\n            return common_first(input_list, input_list)\n        # If they are not equal, return None.\n        else:\n            return None\n    # Function to sort the list.\n    def sort_list(input_list):\n        # Sort the list in descending order.\n        return sorted(input_list, key=lambda x: x[1])\n    # Function to check if the input list has any element.\n    def has_no_duplicate(input_list):\n        # If it doesn't have duplicate elements, return True.\n        if len(input_list) == len(set(input_list)):\n            return False\n        # If it does have duplicate, return False.\n        else:\n            return True\n    # Function to get the unique elements in the list.\n    def unique(input_list):\n        # Check if the input list contains atleast one element.\n        if len(input_list) < 2:\n            return []\n        # If it contains duplicate elements, return an empty list.\n        elif len(set(input_list)) == len(input_list):\n            return []\n        # If it contains element which is not duplicate, return it.\n        else:\n            return sorted(input_list, key=lambda x: x[1])\n    # Function to remove duplicates from the input list.\n    def remove_duplicate(input_list):\n        # If it doesn't contain any duplicate, return None.\n        if not has_no_duplicate(input_list):\n            return input_list\n        # If it contains duplicate, return None.\n        elif not unique(input_list):\n            return None\n        # If it contains element which is not duplicate, return it.\n        else:\n            return sorted(input_list, key=lambda x: x[1])\n    # Function to check the given list is empty or not.\n    def is_empty(input_list):\n        # If it doesn't have duplicate elements, return False.\n        if not has_no_duplicate(input_list):\n            return False\n        # If it contains duplicate elements, return True.\n        elif not unique(input_list):\n            return True\n        # If it contains element which is not duplicate, return False.\n        else:\n            return True\n    # Function to return the first element in the given list.\n    def get_first(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first2(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first3(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first4(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first5(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first6(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first7(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first8(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first9(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empty, return None.\n        else:\n            return None\n    # Function to return the first element in the given list.\n    def get_first10(input_list):\n        # Check if the list is length of two.\n        if len(input_list) == 2:\n            return input_list[0]\n        # Check if it is not of length two, return None.\n        elif not is_empty(input_list):\n            return sorted(input_list, key=lambda x: x[1])[0]\n        # If it is empt"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create list of tuples \n    input_tuple = []\n    for i in range(0, len(Input)):\n        input_tuple.append(Input[i])\n    # create a set of all the unique elements in the list\n    unique_elements = set(input_tuple)\n    # create a dictionary of unique elements and their respective indices in the list\n    unique_index_dict = {}\n    for i in unique_elements:\n        unique_index_dict[i] = input_tuple.index(i)\n    return unique_index_dict\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    list1 = [ele for ele in Input if ele[0] > 0]\n    list2 = [ele for ele in Input if ele[1] > 0]\n    \n    if len(list1) == len(list2):\n        list1 = sorted(list1)\n        list2 = sorted(list2)\n        return list1[0], list2[0]\n    else:\n        return None\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    #Initialize the output list\n    Output = []\n    \n    #Iterate through the input list\n    for element in Input:\n        #Check if the element is in the list\n        if element in Output:\n            #If so, add the element to the output\n            continue\n        #Add the element to the list\n        Output.append(element)\n        \n    #Return the output list\n    return Output\n    \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for index, elem in enumerate(Input):\n        if index!= 0:\n            if elem[0] == Input[index-1][0]:\n                continue\n            else:\n                return elem\n        else:\n            return elem\n    return Input[0][0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\ndef dict_tuple_formatter(d):\n    '''\n    Make a dictionary in tuple form.\n    '''\n    pass\ndef string_formatter(d):\n    '''\n    Make a dictionary in string form.\n    '''\n    pass\ndef test():\n    print('Tests passed!')\ntest()\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create empty list \n    i = 0\n    lst = []\n    # initialize index \n    index = 0\n    # length of the list \n    n = len(Input) \n    while i < n: \n        # add all the elements in the list in the same order \n        lst.append(Input[i]) \n        i += 1\n    # find the first element \n    for j in range(n): \n        if lst[j] not in lst: \n            lst.remove(lst[j]) \n            lst.insert(j, lst[j]) \n    # return the first element \n    return lst[0] \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            lst.append(Input[i])\n            lst.append(Input[j])\n    print(lst)\n    return set(lst)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)): \n        Input.sort() \n        try: \n            return Input[i][0] \n        except IndexError: \n            return -1\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in range(0, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = lst[0]\n    for item in lst: \n        if len(item) > len(max_length): \n            max_length = item\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    l = []\n    for i in lst:\n        if len(str(i)) > len(l):\n            l.append(i)\n    return l[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return None\n    else: \n        return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    largest = 0\n    for i in range(len(lst)):\n        if lst[i]>largest:\n            largest = lst[i]\n    return largest\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # e.g. \n    # [[2, 1, 3, 4], [1, 2, 3, 4]]\n    # Output\n    # 3\n    # Example:\n    # lst = [2, 1, 3, 4]\n    # Find_Max(lst) -> 3\n    # lst = [2, 2, 1, 2, 3, 4]\n    # Find_Max(lst) -> 3\n    # lst = [1, 3, 2, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [2, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [3, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [3, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [3, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [3, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [3, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [3, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [3, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 4\n    # lst = [2, 2, 1, 2, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 1, 3, 4, 1, 3, 1, 1, 2, 3, 4, 1, 3, 1]\n    # Find_Max(lst) -> 3\n    # lst = [1, 2, 3, 4, "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    elif len(lst) == 2:\n        return lst[0] if lst[0] > lst[1] else lst[1]\n    elif len(lst) == 3:\n        return lst[0] if lst[0] > lst[1] else lst[1] if lst[1] > lst[0] else lst[0]\n    elif len(lst) == 4:\n        return lst[0] if lst[0] > lst[1] else lst[1] if lst[1] > lst[2] else lst[2] if lst[2] > lst[0] else lst[0] if lst[0] > lst[1] else lst[1] if lst[1] > lst[2] else lst[2] if lst[2] > lst[0] else lst[0] if lst[0] > lst[1] else lst[1] if lst[1] > lst[2] else lst[2] if lst[2] > lst[0] else lst[0] if lst[0] > lst[1] else lst[1] if lst[1] > lst[2] else lst[2] if lst[2] > lst[0] else None\n    else:\n        return Find_Max(lst[3:])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if i>max:\n            max = i\n    return max\n    \nprint(Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total = total + number\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # YOUR CODE HERE\n    list1 = sorted(list1)\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i]\n    print(sum)\n    return sum\n    \ndef main():\n    print('Your function:')\n    print('1. Sort list')\n    print('2. Round numbers')\n    print('3. Sum')\n    choice = input('Please enter your choice: ')\n    \n    if choice == '1':\n        # YOUR CODE HERE\n        list1 = sorted(input('Please enter list of numbers: ').split(','))\n        print(list1)\n    elif choice == '2':\n        # YOUR CODE HERE\n        list1 = [int(x) for x in input('Please enter list of numbers: ').split(',')]\n        print(round_and_sum(list1))\n    else:\n        # YOUR CODE HERE\n        list1 = [int(x) for x in input('Please enter list of numbers: ').split(',')]\n        print(round_and_sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Set up the variables\n    total_sum = 0\n    \n    #Loop through each number in the list\n    for num in list1:\n        total_sum = total_sum + num\n    \n    #Return the total sum\n    return total_sum\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for number in list1:\n        list1[number] = round(list1[number], 2)\n        print(list1[number])\n    print(f\"The total of all numbers in the list is {sum(list1)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Iterate through each item in the list\n    for i in list1:\n        print(i,end=\" \")\n    print()\n    #Sum the items\n    total = 0\n    #Add the items in the list and add the items into the sum\n    for j in range(len(list1)):\n        total = total + list1[j]\n    #print the total sum\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    # round_and_sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = [round(i, 2) for i in list1]\n    print(new_list[0])\n    print(new_list[1])\n    print(new_list[2])\n    print(new_list[3])\n    print(new_list[4])\n    print(new_list[5])\n    print(new_list[6])\n    print(new_list[7])\n    print(new_list[8])\n    print(new_list[9])\n    print(new_list[10])\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for number in list1:\n        total += number\n    print(\"The total sum of all numbers in the list is {}\".format(total))\n    \ndef build_list_from_file(filename):\n    '''\n    Write a function that takes a filename as input, read it, split the file line by line,\n    then build a list of numbers from each of the numbers in the file, \n    then write the resulting list to the file.\n    '''\n    file_input = open(filename, 'r')\n    file_output = open(\"out.txt\", \"w\")\n    \n    numbers = []\n    line = file_input.readline().rstrip()\n    while line:\n        numbers.append(int(line))\n        line = file_input.readline().rstrip()\n    file_input.close()\n    \n    numbers = numbers[::-1]\n    \n    for num in numbers:\n        file_output.write(str(num) + \" \")\n        \n    file_output.close()\n    \ndef main():\n    filename = \"numbers.txt\"\n    build_list_from_file(filename)\n    round_and_sum(list(range(5,25)))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    i = 0\n    sum = 0\n    while i < len(list1):\n        sum += list1[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        sum += number\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = []\n    for i in range(1, n+1):\n        a.append(i**3)\n    s = 0\n    for i in a:\n        if i%2==0:\n            s += i\n    return s\nprint(cube_Sum(10))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + i**3\n        i = i**2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube=[]\n    for i in range(1,n):\n        cube.append(i**3)\n    print(\"cube sum of\",n,\"=\",sum(cube))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return n*cube_Sum(n-1)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 1\n    for i in range(2, n):\n        cube = cube * i\n    return cube\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if (n<=0): \n        return 0\n    elif (n==1): \n        return 1\n    elif (n%2==0): \n        return n*cube_Sum(n-1) \n    else: \n        return n*cube_Sum(n-1) + (n*cube_Sum(n-2)) \n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple_list = list(test_tup)\n    for i in range(len(tuple_list)):\n        tuple_list[i] = tuple_list[i].split(\",\")\n        #tuple_list[i] = list(map(str.strip, tuple_list[i]))\n        tuple_list[i] = tuple(map(str.strip, tuple_list[i]))\n    return tuple(tuple_list)\n    \n    \ndef split_test_string(string):\n    '''\n    Write a function that splits the string into a list of words.\n    '''\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] == \",\":\n            string_list[i] = string_list[i].split(\",\")\n            string_list[i] = list(map(str.strip, string_list[i]))\n    return string_list\n    \n    \ndef main():\n    '''\n    Write a function to find the number of prime numbers below 10.\n    '''\n    print(sum([1 for i in range(10001) if i%2==1]))\n    \n    '''\n    Write a function to sum the number of prime numbers less than a given number.\n    '''\n    print(sum(range(2, 101)))\n    \n    '''\n    Write a function to find the number of prime numbers that are less than a given number.\n    '''\n    print(sum(list(filter(lambda n: n<=10001, range(2, 101))))\n    \n    '''\n    Write a function to print the numbers from 1 to 10.\n    '''\n    print(list(range(1,11)))\n    \n    '''\n    Write a function to sort a sequence of numbers.\n    '''\n    print(sorted(list(range(10))))\n    \n    '''\n    Write a function that accepts a list of numbers and returns a new list that contains all the numbers except for the numbers 2 and 5.\n    '''\n    print(list(range(6,6+2)))\n    \n    '''\n    Write a function to get a string made of 3 consecutive numbers separated by a dash.\n    '''\n    print(\" \".join(list(map(str, range(3, 6))))\n    \n    '''\n    Write a function to add two matrices.\n    '''\n    print(np.add(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can multiply two matrices using scalars.\n    '''\n    print(np.multiply(np.arange(1, 11).reshape(3, 3), 2))\n    \n    '''\n    Write a function that can add two matrices using lists.\n    '''\n    print(np.add(np.array([[1, 2], [3, 4]]), np.array([[5, 6], [7, 8]])))\n    \n    '''\n    Write a function that can print a matrix element in a specific manner.\n    '''\n    print(np.matmul(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can multiply a matrix.\n    '''\n    print(np.multiply(np.arange(1, 11).reshape(3, 3), 2))\n    \n    '''\n    Write a function that can create a 3x3 matrix from a matrix\n    '''\n    print(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    \n    '''\n    Write a function that can multiply two matrices using python\n    '''\n    print(np.dot(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can convert a matrix to a list and vice versa.\n    '''\n    print(np.flip(np.arange(1, 11).reshape(3, 3)))\n    \n    '''\n    Write a function that can remove a specific element from a matrix\n    '''\n    print(np.delete(np.arange(1, 11).reshape(3, 3), 1, 0))\n    \n    '''\n    Write a function that can perform an elementary mathematical operation on a matrix\n    '''\n    print(np.add(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can perform an elementary mathematical operation on a matrix\n    '''\n    print(np.linalg.det(np.array([[3, 4, 1], [1, 2, 1], [4, 2, 2]])))\n    \n    '''\n    Write a function that can perform an elementary mathematical operation on a matrix\n    '''\n    print(np.linalg.inv(np.array([[3, 4, 1], [1, 2, 1], [4, 2, 2]])))\n    \n    '''\n    Write a function that can perform an elementary mathematical operation on a matrix\n    '''\n    print(np.linalg.det(np.array([[-1, 2, 1], [2, 4, 3], [3, -1, 1]])))\n    \n    '''\n    Write a function that can perform an elementary mathematical operation on a matrix\n    '''\n    print(np.dot(np.array([[-1, 2, 1], [2, 4, 3], [3, -1, 1]]), np.array([[3, 4, 1], [1, 2, 1], [4, 2, 2]])))\n    \n    '''\n    Write a function that can perform an elementary mathematical operation on a matrix\n    '''\n    print(np.matmul(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can perform an elementary mathematical operation on a matrix\n    '''\n    print(np.matmul(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can perform a matrix power using a scalar.\n    '''\n    print(np.power(np.arange(1, 11).reshape(3, 3), 2))\n    \n    '''\n    Write a function that can perform a matrix power using a list.\n    '''\n    print(np.matmul(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can perform a matrix power using a list.\n    '''\n    print(np.power(np.arange(1, 11).reshape(3, 3), 2))\n    \n    '''\n    Write a function that can perform a matrix power using a list.\n    '''\n    print(np.matmul(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can perform a matrix power using a list.\n    '''\n    print(np.power(np.arange(1, 11).reshape(3, 3), 2))\n    \n    '''\n    Write a function that can perform a matrix power using a list.\n    '''\n    print(np.matmul(np.arange(1, 11).reshape(3, 3), np.arange(5, 8).reshape(3, 3)))\n    \n    '''\n    Write a function that can perform a matrix power using a list.\n    '''\n    print(np.power(np.arange(1, 11).reshape(3, 3), 2))\n    \n    '''\n    Write a function that can perform a matrix power using a list.\n    '''\n    print(np.matmul(np.arange(1, 11).reshape(3, 3), np.arange"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # using loop to iterate each element of the tuple\n    # making a list of the tuple element by concatenating the list\n    # of the elements of the tuple\n    new_tuple = []\n    for x in test_tup:\n        new_tuple.append(x)\n    # returning the list as a concatenated tuple\n    return tuple(new_tuple)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return ''.join(test_tup)\n    \n    \ndef test_concatenate_tuple():\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    tup = (1,2,3,4,5)\n    test_tup = (1,2,3,4,5,6)\n    \n    print(concatenate_tuple(tup))\n    print(concatenate_tuple(test_tup))\n    \n    \ndef main():\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    tup = (1,2,3,4,5)\n    test_tup = (1,2,3,4,5,6)\n    \n    print(concatenate_tuple(tup))\n    print(concatenate_tuple(test_tup))\n    \n    \n    \nif __name__ == \"__main__\":\n    main()\n    "
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return (test_tup[0], concatenate_tuple(test_tup[1:]))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join([str(element) for element in test_tup])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delim = ','\n    list_tup = []\n    for i in test_tup:\n        list_tup.append(i)\n    return delim.join(list_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tup = tuple(test_tup)\n    return tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + '_' + test_tup[1]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join([str(i) for i in test_tup])\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    print(sum/n)\n    "
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = n - 1\n    num_sum = 0\n    for i in range(n):\n        num_sum += i**3\n    avg = num_sum / n\n    return avg\n    \ndef main():\n    '''\n    Write a python program to find the average of cube of the\n    first n natural numbers.\n    '''\n    n = 5\n    cube = find_Average_Of_Cube(n)\n    print(f\"The average of cubes is {cube}\")\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum_of_Cube = 0\n    for i in range(1, n+1):\n        Sum_of_Cube += i*(i**2)\n    return Sum_of_Cube/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n + 1):\n        avg = avg + i\n    return avg / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    cubes = []\n    for i in range(n):\n        cubes.append(i**3)\n    sum = 0\n    for i in cubes:\n        sum += i\n    avg = sum / n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = []\n    for i in range(1, n + 1):\n        cube.append(i**3)\n    avg = sum(cube) / len(cube)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1,n+1):\n        avg = avg + i**3\n    return avg/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total / (n * n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def find_average(l,n): \n        result=0\n        for i in range(n): \n            result+=l[i]*l[i] \n        return result/n \n    l=[1,2,3,4,5,6,7,8,9,10]\n    print(find_average(l,n)) \n    \nfind_Average_Of_Cube(7) \n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 0\n    for i in range(n):\n        cube += n * (n**3)\n    average = cube / (n * (n**3))\n    print(average)\n    \nfind_Average_Of_Cube(5)\n    "
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple_1 = tuple(test_tuple)\n    test_tuple_2 = tuple(reversed(test_tuple_1))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indexes = []\n    for index in range(0, len(test_tuple), 1):\n        rear_indexes.append(test_tuple[index])\n    return rear_indexes\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for element in test_tuple:\n        rear_index.append(element[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for string in test_tuple:\n        for index, element in enumerate(string):\n            if index == len(string) - 1:\n                break\n            if element == 'R':\n                rear.append(string[index: index + len(element)])\n    return tuple(rear)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = 0\n    for t in test_tuple:\n        rear += len(t)\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_rear_index_lst = [index for index, item in enumerate(test_tuple) if item == 'Rear' ]\n    return list_rear_index_lst\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1][-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    temp_tuple = []\n    for item in test_tuple:\n        temp_tuple.append(item[0])\n    return temp_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = list()\n    for index, string in enumerate(test_tuple):\n        result.append(string[index])\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear = test_tuple\n    return front\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = len(list1)\n    c = 0\n    for i in range(n):\n        for j in range(0, n):\n            if list1[j] == x:\n                c += 1\n    return c\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count+=1\n    return count\nprint(count_element_in_list([1,2,3,4,5,6],5))\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    result = []\n    # do not change the 'pass' line \n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)): \n        if list1[i] == x: \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    res = 0\n    for i in list1:\n        if i == x:\n            res += 1\n    return res\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if(list1[i][j] == x):\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # start at the end and continue until the end is reached\n    # this would be useful when working with an array.\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            nums[i]=nums[i]+1\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda n: n%2==1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    lst = []\n    for num in nums:\n        if num%2==0:\n            lst.append(num)\n    return lst\n    \n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for n in nums:\n        if n%2!= 0:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    i = 0\n    odds = []\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            odds.append(nums[i])\n        i = i + 1\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # To keep the list.\n    odds = []\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums_odd = []\n    for num in nums:\n        if num % 2!= 0:\n            nums_odd.append(num)\n    return nums_odd\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd=[]\n    for i in nums:\n        if i%2==0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not dt:\n        return \"\"\n    date = dt.split('-')\n    \n    if len(date) > 2:\n        day = date[0]\n        month = date[1]\n        year = date[2]\n    else:\n        day = date[0]\n        month = date[1]\n        year = date[2]\n        \n    \n    if len(day) == 1:\n        day = '0' + day\n    \n    if len(month) == 1:\n        month = '0' + month\n    \n    if len(year) == 1:\n        year = '0' + year\n    \n    return day + '-' + month + '-' + year\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # if dt is None, return dt\n    if not dt:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    arr = dt.split('-')\n    arr.reverse()\n    y = arr[0]\n    m = arr[1]\n    d = arr[2]\n    d = d.zfill(2)\n    d = d[::-1]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    newdt = dt.replace('-', '.')\n    newdt = newdt.replace('.', '-')\n    newdt = newdt.replace('/', '-')\n    newdt = newdt.replace(' ','-')\n    newdt = newdt.replace(' ','-')\n    newdt = newdt.replace(':','-')\n    return newdt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Method 1\n    # dd-mm-yy = MM-DD-YY\n    # Create a pattern to find date format.\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Split the string into the pattern.\n    match = re.match(pattern, dt)\n    # Convert to integer.\n    date = int(match.group(1))\n    # Format the date so it can be converted to dd-mm-yyyy.\n    # dd-mm-yy = dd-mm-yyyy\n    return \"%02d-%02d-%04d\"%(date//10000, date//100%100, date%100)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Python 3.6+\n    # https://docs.python.org/3.6/library/datetime.html#strftime-strptime-behavior\n    # this can be used with a regex.\n    # https://docs.python.org/3.6/library/datetime.html#re.match\n    # https://stackoverflow.com/questions/648075/convert-a-string-into-a-number-in-python\n    # https://stackoverflow.com/questions/24331711/how-do-i-format-a-date-like-a-month-of-a-year\n    # https://stackoverflow.com/questions/8819873/how-to-convert-a-string-to-a-date-in-python\n    # https://stackoverflow.com/questions/1819846/how-to-read-a-date-in-python-using-a-regex\n    dt_input = dt\n    regex_pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})$\"\n    # split the date and convert it into a month, day and year\n    # https://stackoverflow.com/questions/8819873/how-to-convert-a-string-to-a-date-in-python\n    # https://stackoverflow.com/questions/8819873/how-to-convert-a-string-to-a-date-in-python\n    # https://stackoverflow.com/questions/1819846/how-to-read-a-date-in-python-using-a-regex\n    # https://stackoverflow.com/questions/8819873/how-to-convert-a-string-to-a-date-in-python\n    pattern = re.compile(regex_pattern)\n    match = pattern.match(dt_input)\n    if match:\n        # The match object contains a match group that matched the pattern.\n        # Extract the month, day, and year from the match object.\n        # The string is formatted with a leading zero (yyyy) to the right.\n        # Format is dd-mm-yyyy. Example: 2006-02-20, example is 2006-02-20\n        # https://stackoverflow.com/questions/1885883/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/8819873/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/8819873/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/8819873/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1885883/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1885883/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1885883/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1885883/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1885883/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1885883/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/how-to-convert-a-string-to-a-date-in-python\n        # https://stackoverflow.com/questions/1819846/ho"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Create a regular expression.\n    regex = r\"(^|[^0-9])[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\"\n    # Use regular expressions to parse the date.\n    match = re.match(regex, dt)\n    # Check if it is a valid date.\n    if match:\n        # Use the regular expression to convert the date.\n        day = int(match.group(1))\n        month = int(match.group(2))\n        year = int(match.group(3))\n        # Calculate the day of the year.\n        day_of_year = 365*(year-1970)+day\n        # Convert the day to dd-mm-yyyy format.\n        dd = day_of_year+1\n        mm = (month+1)%12+1\n        yy = year+((month+1)*100+day)%100\n        return f\"{yy}-{mm}-{dd}\"\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # if format is not yyyy-mm-dd format, try it now\n    try:\n        y,m,d = dt.split(\"-\")\n        # try:\n        #     # date is yyyy-mm-dd format\n        #     return d+\"-\"+y+\"-\"+m+\"-\"+d\n        # except:\n        #     # date is dd-mm-yyyy format\n        #     return d+\"-\"+y+\"-0\"+m+\"-\"+d\n    except:\n        # date is dd-mm-yyyy format\n        return d+\"-0\"+m+\"-\"+d\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    return re.sub(pattern, str(dt), dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex\n    import re\n    # create regular expression\n    regex = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    # match the date\n    m = regex.match(dt)\n    # convert it to dd-mm-yyyy format\n    return dt[0:3] + '-' + dt[4:6] + '-' + dt[8:10] +'' + dt[11:13] + ':' + dt[14:16] + ':' + dt[17:19]\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_improved(my_list):\n        '''\n        Write an improved implementation of shell sort.\n        '''\n        def sort(arr):\n            '''\n            Perform a shell sort on the given array.\n            '''\n            sorted = []\n            n = len(arr)\n            gap = n // 2\n            while gap > 0:\n                for i in range(gap, n):\n                    sorted.append(arr[i])\n                for j in range(gap, n):\n                    x = arr[j]\n                    j += 1\n                    while j < n and arr[j] > x:\n                        arr[j] = arr[j - 1]\n                        j += 1\n                    arr[j] = x\n                gap = gap // 2\n            return sorted\n        \n        def get_len(arr):\n            '''\n            Count the number of elements in the given array.\n            '''\n            return len(arr) - 1\n        \n        def shell_sort(arr):\n            '''\n            Perform a shell sort on the given array.\n            '''\n            gap = get_len(arr)\n            while gap > 0:\n                for i in range(gap, len(arr)):\n                    arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap = gap // 2\n        \n        def shell_sort_improved_arr(arr):\n            '''\n            Write an improved implementation of shell sort.\n            '''\n            gap = get_len(arr)\n            while gap > 0:\n                for i in range(gap, len(arr)):\n                    arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap = gap // 2\n        \n        def insertion_sort(arr):\n            '''\n            Perform an insertion sort on the given array.\n            '''\n            gap = len(arr) - 1\n            while gap >= 0:\n                for i in range(gap, len(arr)):\n                    if arr[i] < arr[i - gap]:\n                        arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap -= 1\n        \n        def insertion_sort_improved(arr):\n            '''\n            Write an improved implementation of insertion sort.\n            '''\n            gap = get_len(arr)\n            while gap > 0:\n                for i in range(gap, len(arr)):\n                    if arr[i] < arr[i - gap]:\n                        arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap -= 1\n        \n        arr = my_list\n        while len(arr) > 1:\n            for i in range(1, len(arr)):\n                arr[i], arr[0] = arr[0], arr[i]\n                x = arr[i]\n                for j in range(i, len(arr)):\n                    arr[j] = arr[j - 1]\n                arr[j] = x\n            gap = get_len(arr)\n            while gap > 0:\n                for i in range(gap, len(arr)):\n                    arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap = gap // 2\n            \n        if len(arr) == 2:\n            return arr\n        else:\n            return shell_sort_improved(arr)\n        \n    def insert_sort(my_list):\n        '''\n        Write a function to sort the given array by using insertion sort.\n        '''\n        def insertion_sort(arr):\n            '''\n            Perform an insertion sort on the given array.\n            '''\n            gap = len(arr) - 1\n            while gap >= 0:\n                for i in range(gap, len(arr)):\n                    if arr[i] < arr[i - gap]:\n                        arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap -= 1\n        \n        arr = my_list\n        while len(arr) > 1:\n            for i in range(1, len(arr)):\n                arr[i], arr[0] = arr[0], arr[i]\n                x = arr[i]\n                for j in range(i, len(arr)):\n                    arr[j] = arr[j - 1]\n                arr[j] = x\n            gap = get_len(arr)\n            while gap > 0:\n                for i in range(gap, len(arr)):\n                    arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap -= 1\n        \n        if len(arr) == 2:\n            return arr\n        else:\n            return insertion_sort(arr)\n    \n    def bubble_sort(my_list):\n        '''\n        Write a function to sort the given array by using bubble sort.\n        '''\n        def bubble_sort(arr):\n            '''\n            Perform a bubble sort on the given array.\n            '''\n            def swap(arr, i, j):\n                arr[i], arr[j] = arr[j], arr[i]\n            def bubble_sort_improved(arr):\n                def swap(arr, i, j):\n                    x = arr[i]\n                    y = arr[j]\n                    while i < len(arr) and arr[i] < x:\n                        arr[i] = arr[i + 1]\n                    while j < len(arr) and arr[j] < y:\n                        arr[j] = arr[j + 1]\n                    arr[i + 1] = x\n                    arr[j + 1] = y\n                i = 0\n                j = len(arr) - 1\n                while i < len(arr):\n                    while j >= 0 and arr[j] < arr[j - 1]:\n                        j -= 1\n                    if j < 0:\n                        break\n                    swap(arr, i, j)\n                    i += 1\n                    j -= 1\n                if i < len(arr):\n                    while i < len(arr):\n                        arr[i] = arr[i + 1]\n                        i += 1\n            \n            def bubble_sort_improved_arr(arr):\n                def swap(arr, i, j):\n                    arr[i], arr[j] = arr[j], arr[i]\n                def bubble_sort_improved_arr(arr):\n                    def swap(arr, i, j):\n                        arr[i], arr[j] = arr[j], arr[i]\n                    def bubble_sort_improved_arr(arr):\n                        i = 0\n                        j = len(arr) - 1\n                        while i < len(arr):\n                            while j >= 0 and arr[j] < arr[j - 1]:\n                                j -= 1\n                            if j < 0:\n                                break\n                            swap(arr, i, j)\n                            i += 1\n                        if i < len(arr):\n                            while i < len(arr):\n                                arr[i] = arr[i + 1]\n                                i += 1\n                arr = my_list\n                while len(arr) > 1:\n                    for i in range(len(arr)):\n                        swap(arr, i, i + 1)\n                    i = 0\n                    j = len(arr) - 1\n                    while j >= 0 and arr[i] < arr[j]:\n                        swap(arr, i, j)\n                        i += 1\n                    if i < len(arr):\n                        while i < len(arr):\n                            arr[i] = arr[i + 1]\n                            i += 1\n                if i < len(arr):\n                    while i < len(arr):\n                        arr[i] = arr[i + 1]\n                        i += 1\n            \n            if len(arr) == 2:\n                return arr\n            else:\n                return bubble_sort_improved_arr(arr)\n        \n        arr = my_list\n        while len(arr) > 1:\n            for i in range(len(arr)):\n                arr[i], arr[0] = arr[0], arr[i]\n                x = arr[i]\n                for j in range(i, len(arr)):\n                    arr[j] = arr[j - 1]\n                arr[j] = x\n            gap = get_len(arr)\n            while gap > 0:\n                for i in range(gap, len(arr)):\n                    arr[i], arr[i - gap] = arr[i - gap], arr[i]\n                gap -"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    while len(my_list) > 1:\n        size = len(my_list)\n        gap = size // 2\n        while gap > 0:\n            for i in range(gap, size):\n                my_list[i] = my_list[i - gap]\n            for j in range(gap, size):\n                my_list[j] = my_list[j + gap]\n            gap = gap // 2\n        \n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_iter(arr,n):\n        '''\n        Write the implementation of shell_sort_iter\n        '''\n        gap = n//2\n        while gap>=1:\n            for i in range(gap,n):\n                value = arr[i]\n                j = i\n                while j>=gap and arr[j-gap]>value:\n                    arr[j] = arr[j-gap]\n                    j-=gap\n                arr[j] = value\n            gap = gap//2\n    \n    # define the parameters of the algorithm\n    n = len(my_list)\n    gap = n//2\n    while gap>0:\n        shell_sort_iter(my_list,n)\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # We are going to use a gap parameter (this can be useful in some cases).\n    def sort_gap(array, gap):\n        gap_size = len(array)\n        for i in range(gap_size):\n            for j in range(gap_size - i - 1):\n                if array[j] > array[j + 1]:\n                    array[j], array[j + 1] = array[j + 1], array[j]\n        return array\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    '''\n    Hint:\n        1. If the input array is already sorted, don't sort it again.\n        2. Sort the subarray by keeping track of the minimum difference between the\n            sorted and unsorted subarrays.\n        3. Repeat until there are no subarrays left to sort.\n    '''\n    # TODO: Write your function here\n    diff = len(my_list)\n    # print(diff)\n    while diff > 1:\n        # print(diff)\n        # print(diff // 2)\n        for i in range(diff // 2):\n            print(my_list[i])\n            print(my_list[i + diff // 2])\n            temp = my_list[i]\n            j = i\n            while j >= diff // 2 and my_list[j - diff // 2] > temp:\n                my_list[j] = my_list[j - diff // 2]\n                j -= diff // 2\n            my_list[j] = temp\n        diff = diff // 2\n    print(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    count = 0\n    while count < len(my_list):\n        for index in range(len(my_list) - count):\n            # Find the middle point\n            middle_index = index + count\n            # If the middle index is not less than the current index,\n            # swap it with the middle index\n            if middle_index < len(my_list) and my_list[middle_index] > my_list[index]:\n                tmp = my_list[index]\n                my_list[index] = my_list[middle_index]\n                my_list[middle_index] = tmp\n        count += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    gap = length // 2\n    while gap > 0:\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_2(my_list):\n        # the length of the list\n        n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # number of steps we need to make.\n    # This is a hint, you can always try increasing it.\n    steps = n // 2\n    while steps > 0:\n        for i in range(0, n-1):\n            step = i\n            for j in range(i+1, n):\n                if my_list[j] < my_list[i]:\n                    step = j\n            my_list[i], my_list[step] = my_list[step], my_list[i]\n        # update remaining values\n        for i in range(steps, n):\n            my_list[i], my_list[i+steps] = my_list[i+steps], my_list[i]\n        steps -= steps // 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Your code here\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The tuples must be the same length\")\n    else:\n        return tuple(map(list, zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    assert type(test_tup1) == tuple, 'test_tup1 must be a tuple'\n    assert type(test_tup2) == tuple, 'test_tup2 must be a tuple'\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for x in test_tup1:\n        if x in test_tup2:\n            res.append(x)\n    for x in test_tup2:\n        if x in test_tup1:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Write your code here.\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = test_tup1 + test_tup2\n    return res\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0], test_tup1[1], test_tup2[1]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a_tup = (test_tup1[0],test_tup1[1])\n    b_tup = (test_tup2[0],test_tup2[1])\n    return a_tup,b_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return test_tup1[0] or test_tup2[0], test_tup1[1] or test_tup2[1]\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return b*b - 4*a*c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == 0 and b!= 0) or (a!= 0 and b == 0): \n        return [a, 0, 0, 0, b, 0]\n    if a == 0 or b == 0:\n        return [a, 0, 0, 0, 0, b]\n    if a!= 0 and b!= 0:\n        return [a, b, 0, 0, 0, c]\n    if a!= 0:\n        return [a, 0, c, 0, 0, 0]\n    if a!= 0:\n        return [0, c, 0, a, b, 0]\n    if b!= 0:\n        return [0, 0, c, b, 0, a]\n    if b!= 0:\n        return [a, 0, 0, c, b, 0]\n    if c!= 0:\n        return [0, 0, a, 0, c, b]\n    if c!= 0:\n        return [0, 0, a, b, c, 0]\n    if c!= 0:\n        return [0, 0, a, 0, c, b]\n    if a!= 0:\n        return [0, 0, a, b, 0, c]\n    if b!= 0:\n        return [0, 0, a, 0, b, c]\n    if c!= 0:\n        return [0, 0, a, 0, 0, c]\n    return [0, 0, a, b, c, 0]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b**2) - (4*a*c) ) / (2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = lambda a,b,c,x: c*(x-a)*(b-x) - a*(b-x)\n    return sum(map(x, a, b, c))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (a**2 + b**2 + c**2 - a*b - b*c)/(2*a*b)\n    return round(x,2)\n    \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_0 = float(input(\"Enter the value of x_0: \"))\n    x_1 = float(input(\"Enter the value of x_1: \"))\n    x_2 = float(input(\"Enter the value of x_2: \"))\n    x_3 = float(input(\"Enter the value of x_3: \"))\n    x_4 = float(input(\"Enter the value of x_4: \"))\n    x_5 = float(input(\"Enter the value of x_5: \"))\n    x_6 = float(input(\"Enter the value of x_6: \"))\n    x_7 = float(input(\"Enter the value of x_7: \"))\n    x_8 = float(input(\"Enter the value of x_8: \"))\n    x_9 = float(input(\"Enter the value of x_9: \"))\n    x_10 = float(input(\"Enter the value of x_10: \"))\n    x_11 = float(input(\"Enter the value of x_11: \"))\n    x_12 = float(input(\"Enter the value of x_12: \"))\n    x_13 = float(input(\"Enter the value of x_13: \"))\n    x_14 = float(input(\"Enter the value of x_14: \"))\n    x_15 = float(input(\"Enter the value of x_15: \"))\n    x_16 = float(input(\"Enter the value of x_16: \"))\n    x_17 = float(input(\"Enter the value of x_17: \"))\n    x_18 = float(input(\"Enter the value of x_18: \"))\n    x_19 = float(input(\"Enter the value of x_19: \"))\n    x_20 = float(input(\"Enter the value of x_20: \"))\n    x_21 = float(input(\"Enter the value of x_21: \"))\n    x_22 = float(input(\"Enter the value of x_22: \"))\n    x_23 = float(input(\"Enter the value of x_23: \"))\n    x_24 = float(input(\"Enter the value of x_24: \"))\n    x_25 = float(input(\"Enter the value of x_25: \"))\n    x_26 = float(input(\"Enter the value of x_26: \"))\n    x_27 = float(input(\"Enter the value of x_27: \"))\n    x_28 = float(input(\"Enter the value of x_28: \"))\n    x_29 = float(input(\"Enter the value of x_29: \"))\n    x_30 = float(input(\"Enter the value of x_30: \"))\n    x_31 = float(input(\"Enter the value of x_31: \"))\n    x_32 = float(input(\"Enter the value of x_32: \"))\n    x_33 = float(input(\"Enter the value of x_33: \"))\n    x_34 = float(input(\"Enter the value of x_34: \"))\n    x_35 = float(input(\"Enter the value of x_35: \"))\n    x_36 = float(input(\"Enter the value of x_36: \"))\n    x_37 = float(input(\"Enter the value of x_37: \"))\n    x_38 = float(input(\"Enter the value of x_38: \"))\n    x_39 = float(input(\"Enter the value of x_39: \"))\n    x_40 = float(input(\"Enter the value of x_40: \"))\n    x_41 = float(input(\"Enter the value of x_41: \"))\n    x_42 = float(input(\"Enter the value of x_42: \"))\n    x_43 = float(input(\"Enter the value of x_43: \"))\n    x_44 = float(input(\"Enter the value of x_44: \"))\n    x_45 = float(input(\"Enter the value of x_45: \"))\n    x_46 = float(input(\"Enter the value of x_46: \"))\n    x_47 = float(input(\"Enter the value of x_47: \"))\n    x_48 = float(input(\"Enter the value of x_48: \"))\n    x_49 = float(input(\"Enter the value of x_49: \"))\n    x_50 = float(input(\"Enter the value of x_50: \"))\n    x_51 = float(input(\"Enter the value of x_51: \"))\n    x_52 = float(input(\"Enter the value of x_52: \"))\n    x_53 = float(input(\"Enter the value of x_53: \"))\n    x_54 = float(input(\"Enter the value of x_54: \"))\n    x_55 = float(input(\"Enter the value of x_55: \"))\n    x_56 = float(input(\"Enter the value of x_56: \"))\n    x_57 = float(input(\"Enter the value of x_57: \"))\n    x_58 = float(input(\"Enter the value of x_58: \"))\n    x_59 = float(input(\"Enter the value of x_59: \"))\n    x_60 = float(input(\"Enter the value of x_60: \"))\n    x_61 = float(input(\"Enter the value of x_61: \"))\n    x_62 = float(input(\"Enter the value of x_62: \"))\n    x_63 = float(input(\"Enter the value of x_63: \"))\n    x_64 = float(input(\"Enter the value of x_64: \"))\n    x_65 = float(input(\"Enter the value of x_65: \"))\n    x_66 = float(input(\"Enter the value of x_66: \"))\n    x_67 = float(input(\"Enter the value of x_67: \"))\n    x_68 = float(input(\"Enter the value of x_68: \"))\n    x_69 = float(input(\"Enter the value of x_69: \"))\n    x_70 = float(input(\"Enter the value of x_70: \"))\n    x_71 = float(input(\"Enter the value of x_71: \"))\n    x_72 = float(input(\"Enter the value of x_72: \"))\n    x_73 = float(input(\"Enter the value of x_73: \"))\n    x_74 = float(input(\"Enter the value of x_74: \"))\n    x_75 = float(input(\"Enter the value of x_75: \"))\n    x_76 = float(input(\"Enter the value of x_76: \"))\n    x_77 = float(input(\"Enter the value of x_77: \"))\n    x_78 = float(input(\"Enter the value of x_78: \"))\n    x_79 = float(input(\"Enter the value of x_79: \"))\n    x_80 = float(input(\"Enter the value of x_80: \"))\n    x_81 = float(input(\"Enter the value of x_81: \"))\n    x_82 = float(input(\"Enter the value of x_82: \"))\n    x_83 = float(input(\"Enter the value of x_83: \"))\n    x_84 = float(input(\"Enter the value of x_84: \"))\n    x_85 = float(input(\"Enter the value of x_85: \"))\n    x_86 = float(input(\"Enter the value of x_86: \"))\n    x_87 = float(input(\"Enter the value of x_87: \"))\n    x_88 = float(input(\"Enter the value of x_88: \"))\n    x_89 = float(input(\"Enter the value of x_89: \"))\n    x_90 = float(input(\"Enter the value of x_90: \"))\n    x_91 = float(input(\"Enter the value of x_91: \"))\n    x_92 = float(input(\"Enter the value of x_92: \"))\n    x_93 = float(input(\"Enter the value of x_93: \"))\n    x_94 = float(input(\"Enter the value of x_94: \"))\n    x_95 = float(input(\"Enter the value of x_95: \"))\n    x_96 = float(input(\"Enter the value of x_96: \"))\n    x_97 = float(input(\"Enter the value of x_97: \"))\n    x_98 = float(input(\"Enter the value of x_98: \"))\n    x_99 = float(input(\"Enter the value of x_99: \"))\n    x_100 = float(inpu"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def calcular_directrix(x):\n        '''\n        Calculates the directrix of a parabola.\n        '''\n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1/3\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = a*(x**2)\n    x2 = b*x\n    x3 = c*x\n    return x1+x2+x3\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt, pi, cos, sin, log, log10, exp, log2, floor\n    import time\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * (b**2) + a * c + b * a + b * b * c + b * c * a + c * b * a + a * b * c\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list1 = list1.copy()\n    list2 = list2.copy()\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0:\n        return False\n    elif len(list2) == 0:\n        return False\n    elif list1 == list2:\n        return True\n    else:\n        common = list1[0]\n        for item in list1:\n            if common == item:\n                return False\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        return len(list1) > len(list2)\n    elif len(list1) < len(list2):\n        return False\n    return list1[0] == list2[0]\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # my_list1 = list(set(list1))\n    # my_list2 = list(set(list2))\n    # return any(my_list1 == my_list2)\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    if not list1:\n        return False\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # TODO: Write your code here\n    common_elem = False\n    common_elem = True\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            common_elem = False\n        else:\n            common_elem = True\n    return common_elem\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list_common_elements = []\n    for x in list1:\n        for y in list2:\n            if x == y:\n                list_common_elements.append(x)\n    return len(list_common_elements) == 1\n    \ndef common_elements(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    list_common_elements = []\n    for x in list1:\n        for y in list2:\n            if x == y:\n                list_common_elements.append(x)\n    return len(list_common_elements) == 1\n    \ndef has_duplicates(list):\n    '''\n    Write a function that returns true if the given list contains any duplicate entries.\n    '''\n    return len(list)!= len(set(list))\n    \ndef has_duplicates2(list):\n    '''\n    Write a function that returns true if the given list contains any duplicate entries.\n    '''\n    return len(set(list)) == len(list)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    # initialize an empty set to hold all the elements\n    common_set = set(list1[0])\n    \n    # loop through elements of list1\n    for element in list1:\n        # initialize a set with all the elements of list1 as elements\n        # so that if any of them are contained within a common set,\n        # they should be true\n        if element in common_set:\n            common_set.remove(element)\n    \n    # check if the list2 contains any common element\n    if len(list2) > 0:\n        # iterate through elements of list2 and compare\n        # the list2 with the elements in common set\n        for element in list2:\n            if element in common_set:\n                return True\n    \n    # if lists don't contain any common elements\n    return False\n    "
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Constraints:\n    # 1. All the elements of list1 must be unique.\n    # 2. All the elements of list2 must be unique.\n    # 3. You will be given two lists.\n    # 4. No missing elements\n    # 5. No duplicates\n    # 6. Both lists must be of the same length.\n    # 7. No duplicates.\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) > len(list2) and len(set(list1).intersection(list2)) > 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if(height>base1 and height>base2):\n        h1=float(height)/2\n        h2=float(height)/2\n        n1=float(base1)\n        n2=float(base2)\n        l=0\n        while n1+n2 >= h1:\n            m1=(n1+n2)/2\n            m2=m1**2\n            if(height>m1):\n                n2=m1\n            else:\n                n1=m1\n            if(height>m2):\n                n2=m2\n            else:\n                n1=m2\n            l+=1\n        return l\n    else:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(x,y):\n        return (height/2*(x+y+1))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height == 0:\n        return 0\n    elif height == 1:\n        return base1\n    elif height == 2:\n        return base1 + base2\n    elif height == 3:\n        return (base1 + base2 + base2) / 3\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length1 = 0\n    length2 = 0\n    length3 = 0\n    width = 0\n    for x in range(height):\n        if base1 >= x*height/2:\n            length1 += x\n        if base2 >= x*height/2:\n            length2 += x\n        if base3 >= x*height/2:\n            length3 += x\n        if width >= x*height/2:\n            width += x\n    if length1 > length2 and length1 > length3:\n        return length1\n    if length2 > length1 and length2 > length3:\n        return length2\n    if length3 > length1 and length3 > length2:\n        return length3\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Define array to hold result\n    result = []\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Only works for a single element.\n    if not base1 or not base2:\n        return 0\n    \n    # If the element is greater than the first base.\n    if base1 > base2:\n        return median_trapezium(base1,base2,height)\n    \n    # If the element is greater than the second base.\n    elif base2 > base1:\n        return median_trapezium(base1,base2,height)\n    \n    else:\n        return base1 + height/2\n        \n    \n    "
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    top_most_longer = 0\n    base1_lengt = 0\n    base2_lengt = 0\n    while (base2 - base1) > (height/2):\n        base2 = base1 + (base2 - base1)/2\n        base2_lengt = base2_lengt + 1\n        print(base1,base2,base2_lengt)\n        base1_lengt = base1_lengt + 1\n        if base2 < top_most_longer:\n            top_most_longer = base2\n    return top_most_longer\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a,b = 0,1\n    while a<=b:\n        mid = (a+b)/2\n        trapezium_length = mid * (mid-1)\n        if trapezium_length < height:\n            a = mid + 1\n        else:\n            b = mid\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1==base2:\n        return (base1*(height/2))\n    else:\n        return (height/2 + (base1*height)/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # By using a variable, we can avoid hardcoding the minimum and maximum values of height.\n    minimum = min(base1,base2)\n    maximum = max(base1,base2)\n    # Find the midpoint of the trapezium.\n    midpoint = (minimum + maximum) / 2.0\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # declare a greater than variable\n    greater = False\n    # iterate through the list\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    # if all elements in the array are greater than the entered number then it is greater than the number\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr[number] > arr[number + 1]\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for el in arr:\n        if el > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    result = arr.index(number)\n    for i in range(result, len(arr)):\n        if arr[i] >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    # write your code here\n    if len(arr) == 1:\n        if arr[0] > number:\n            return False\n        else:\n            return True\n    else:\n        if arr[0] > number:\n            return check_greater(arr[1:], number)\n        elif arr[-1] > number:\n            return check_greater(arr[:-1], number)\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return 'Please enter non empty array'\n    else:\n        if number > arr[-1]:\n            return 'Please enter a positive number'\n        elif number < arr[0]:\n            return 'Please enter a positive number'\n        else:\n            return arr[-1] < arr[0]\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for index, element in enumerate(arr):\n        if number == element:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    max_number = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_number:\n            max_number = arr[i]\n    if number > max_number:\n        return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return any(re.match('(a)', text).group() == 'a')\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    words = re.findall(r\"[\\w']+|[a-z]\", text)\n    return words\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    pattern = r'(\\b\\w+a)\\b'\n    return re.findall(pattern, text, flags=re.MULTILINE)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    res = re.search(r\"^[a-zA-Z]+\", text)\n    if res is None:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = r'(?:(\\w+)(\\w+))' #group p means a, and b means b\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's, followed by one or more a's, followed by one or more b's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's, followed by one or more a's followed by one or more b's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's followed by one or more b's followed by one or more a's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's followed by one or more a's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's followed by one or more b's, followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's followed by one or more a's followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's, followed by one or more b's, followed by one or more a's.\n    '''\n    p = r'(?:(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+)(\\w+))'\n    match_text = re.findall(p, text)\n    return match_text\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by on"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall(r'a(?=\\b)', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(\"(a|b)\",text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t\\t\\t-*-')\n    print('\\t\\t\\t"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace(\"-\",\" \").replace(\".\",\"\").replace(\"/\",\"\")\n    text = re.sub(r\"[^a-zA-Z0-9-]\",\"\",text)\n    return text\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return \"Error: number must be a positive number\"\n    elif n == 0:\n        return 0\n    else :\n        return n % 10\n        \n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    lastDigit = 0\n    for i in range(0, n) :\n        lastDigit = lastDigit + (n % 10)\n        n = n // 10\n    return lastDigit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 0 :\n        return last_Digit(n % 10)\n    else :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if(type(n)!= int) : \n        print(\"Type Error!\")\n        return -1\n    if(n < 10):\n        return n\n    else:\n        return int(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else :\n        last = n%10\n        last = last - n//10\n        return last\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return lastDigit(n * -1)\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n    \n    \ndef sum_digits(n) :\n    '''\n    Write a python function to compute sum of digits of a given number.\n    '''\n    sum = 0\n    while n!= 0 :\n        n = last_Digit(n)\n        sum += n\n    return sum\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for num in list1:\n        neg_nos.append(-num)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg=[]\n    for num in list1:\n        if num<0:\n            neg.append(num)\n    return neg\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result=[]\n    for item in list1:\n        if item<0:\n            result.append(-1)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_nos_list.append(list1[i])\n    return neg_nos_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    print(list1)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for item in list1:\n        if item < 0:\n            neg_list.append(-1*item)\n        else:\n            neg_list.append(item)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    sum = 0\n    for item in list1:\n        sum += item\n    print(sum)\n    return sum\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for x in range(len(list1)):\n        if(list1[x] < 0):\n            list2.append(list1[x])\n        else:\n            list2.append(list1[x])\n    return list2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1=str1.lower()\n    str1=str1.replace('a','f')\n    str1=str1.replace('b','g')\n    str1=str1.replace('c','h')\n    str1=str1.replace('d','i')\n    str1=str1.replace('e','j')\n    str1=str1.replace('f','k')\n    str1=str1.replace('g','l')\n    str1=str1.replace('h','m')\n    str1=str1.replace('j','n')\n    str1=str1.replace('k','o')\n    str1=str1.replace('l','p')\n    str1=str1.replace('m','q')\n    str1=str1.replace('n','r')\n    str1=str1.replace('o','s')\n    str1=str1.replace('p','t')\n    str1=str1.replace('q','u')\n    str1=str1.replace('r','v')\n    str1=str1.replace('s','w')\n    str1=str1.replace('t','x')\n    str1=str1.replace('u','y')\n    str1=str1.replace('v','z')\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = [char for char in str1]\n    lst.sort(reverse=True)\n    return ''.join(lst)"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Write your code here.\n    #s=''\n    #for i in str1:\n    #    if i%2==1:\n    #        s+=i\n    #return s\n    return str1[::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.strip()\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return str1\n    else:\n        odd = set(str1)\n        for i in odd:\n            str1 = str1.replace(i, \"\")\n        return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char if char % 2!= 0 else '' for char in str1])\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    '''\n    Write your own function\n    '''\n    odd_char = 0\n    if not str1:\n        return str1\n    if len(str1) == 1:\n        return str1\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            odd_char += 1\n            if odd_char == len(str1):\n                return str1[:i]+str1[i+1:]\n            str1 = str1[:i]+str1[i+1:]\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Write your code here\n    return str1.replace(str1[0], \"\", 1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1)==0:\n        return str1\n    for i in range(len(str1)):\n        if str1[i]%2!=0:\n            str1=str1[:i]+str1[i+1:]\n    return str1\n    \nprint(remove_odd('abacd'))\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = ''\n    for i in str1:\n        if i % 2 == 1:\n            odd = odd + i\n    return odd\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # TODO: define bidirectional_count\n    '''\n    create a dictionary of count values\n    for each word in the list\n    and check if the key is already in the dictionary\n    If not, increase the count value\n    '''\n    dictionary = {}\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #bidirectional_count = 0\n    bidirectional_count = 0\n    #bidirectional_count = bidirectional_count + 1\n    for i in range(len(test_list)-1):\n        if test_list[i][1] == test_list[i+1][0]:\n            bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    \n    # Traverse from top to bottom\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            # Check if bidirectional\n            if test_list[j][0] < test_list[j + 1][1]:\n                # Bidirectional\n                bidirectional_count += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    '''\n    Class is User(top_k,bids,bids_history,open_list,bid_bids,bid_bids_history)\n    '''\n    \n    \n    class User:\n        '''\n        attributes: top_k, bids, bids_history, open_list, bid_bids, bid_bids_history\n        '''\n        def __init__(self, top_k, bids, bids_history, open_list, bid_bids, bid_bids_history):\n            self.top_k = top_k\n            self.bids = bids\n            self.bids_history = bids_history\n            self.open_list = open_list\n            self.bid_bids = bid_bids\n            self.bid_bids_history = bid_bids_history\n        \n    '''\n    calculates Bidirectional tally\n    '''\n    def calculate_bidirectional(self, bid_bids):\n        '''\n        calculates bidirectional tally\n        '''\n        '''\n        creates bidirectional tally\n        '''\n        '''\n        attributes: bid_bids\n        '''\n        bid_bids = bid_bids.copy()\n        '''\n        top_k: top k bids that are compared to bids_history\n        bid_bids: bid_bids that will be compared to bids\n        '''\n        '''\n        top_k: top k bids\n        bid_bids: bid_bids\n        '''\n        top_k = 0\n        bid_bids = bid_bids.copy()\n        '''\n        bid_bids_history: bid_bids that have already been bid_bids_history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids_history: bid_bids history that have already been bid_bids_history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        open_list: list of bids that are in the open list\n        bid_bids: bid_bids\n        bid_bids_history: bid_bids history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids_history: bid_bids history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        open_list: open list\n        '''\n        open_list = open_list.copy()\n        '''\n        top_k: top k bids\n        bid_bids: bid_bids\n        '''\n        top_k = 0\n        bid_bids = bid_bids.copy()\n        '''\n        bid_bids_history: bid_bids history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids_history: bid_bids history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids = bid_bids.copy()\n        '''\n        bid_bids_history: bid_bids history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids_history: bid_bids history\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_bids: bid_bids\n        '''\n        bid_bids_history = bid_bids_history.copy()\n        '''\n        bid_"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([pair for pair in test_list if pair[0] > pair[1]])\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x in range(len(test_list)):\n        for y in range(len(test_list)):\n            if test_list[x] == test_list[y]:\n                if y > x:\n                    count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    forward_count = 0\n    backward_count = 0\n    for item in test_list:\n        if item[1] == \"F\":\n            forward_count += 1\n        elif item[1] == \"B\":\n            backward_count += 1\n        else:\n            print(item[0], item[1])\n            print(\"\")\n    return forward_count, backward_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Base case.\n    if not test_list:\n        return 0\n    # Bidirectional tuples.\n    duplicates = []\n    # Remove duplicate items from the list.\n    for i in range(len(test_list)):\n        if test_list[i] in duplicates:\n            continue\n        duplicates.append(test_list[i])\n    # Count the pairs.\n    return len(duplicates) // 2\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join_ints(list_of_ints):\n        '''\n        Take a list and join the elements in the list into a single integer.\n        '''\n        if len(list_of_ints) == 1:\n            return list_of_ints[0]\n        else:\n            # TODO: make this work for unequal lists\n            return int(list_of_ints[0]) + int(list_of_ints[1])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not isinstance(L, list):\n        raise TypeError(\"Input must be a list\")\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return L[0] + L[1]\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = []\n    for item in L:\n        s.append(item)\n    return int(\"\".join(s))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = sorted(L)\n    for i in range(len(L)-1):\n        L[i] = L[i] * 10 + L[i+1]\n    L[-1] = L[-1] * 10 + L[-2]\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    assert all([isinstance(x, int) for x in L]), 'Cannot join lists of different length'\n    if len(L) == 1:\n        return L[0]\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    ans = 0\n    for x in L:\n        ans = ans * 10 + x\n    return ans\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_len = len(L)\n    L_s = [str(x) for x in L]\n    return int(''.join(L_s))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Implement your function here\n    # TODO: return tuple of (adverb, position)\n    adverb = re.findall(\"(.*?)([aeiou]{1}|-{1}){1}\", text)\n    position = re.search('[aeiou]+', text)\n    return adverb, position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile(r'\\b(VB|V|MD|V|NN|DT|MD|NN|DT|MD|V|VB|NN|DT|MD|V|NN|DT|VB|NN|V|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN|DT|MD|V|VB|NN"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.finditer(r'[aA+]$', text)\n    adverb_positions = []\n    for adv in adverbs:\n        adverb_positions.append(adv.span())\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['am', 'are', 'is', 'was', 'were', 'have', 'has', 'do', 'does', 'did', 'but']\n    adverbs.insert(0, 'be')\n    adverbs.insert(0, 'am')\n    adverbs.insert(0, 'are')\n    adverbs.insert(0, 'is')\n    adverbs.insert(0, 'was')\n    adverbs.insert(0, 'were')\n    adverbs.insert(0, 'have')\n    adverbs.insert(0, 'has')\n    adverbs.insert(0, 'do')\n    adverbs.insert(0, 'does')\n    adverbs.insert(0, 'did')\n    adverbs.insert(0, 'but')\n    result = {}\n    for element in text.split():\n        for adverb in adverbs:\n            if re.match(r'.*' + adverb + '.*', element):\n                element = re.sub(r'.*' + adverb + '.*', '', element)\n                result[element] = [element, re.search(r'\\b{}\\b'.format(adverb), element).start()]\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def is_adverb(word):\n        if word in ['i', 'a']:\n            return False\n        return True\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.replace('.', '')\n    text = text.replace('-', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('...', '')\n    text = text.replace('\u2026', '')\n    text = text.replace('.', '')\n    text = text.replace('*', '')\n    text = text.replace(',', '')\n    text = text.replace('?', '')\n    text = text.replace('!', '')\n    text = text.replace('&', '')\n    text = text.replace('\"', '')\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    text = text.replace('\\t', '')\n    text = text.replace('\\r\\n', '')\n    text = text.replace('\\r', '')\n    text = text.replace('\\t', '')\n    text = text.lower()\n    pattern = re.compile('[a-z]')\n    adverb_text = text.split(' ')\n    adverb_text = [s for s in adverb_text if len(s)>0]\n    adverb_text = [s for s in adverb_text if pattern.search(s)]\n    adverb_positions = []\n    for adverb in adverb_text:\n        if adverb.count('.') == 1:\n            adverb_positions.append(adverb.index('.') + 1)\n        elif adverb.count('.') == 2:\n            adverb_positions.append(adverb.index('.') + 1)\n        else:\n            adverb_positions.append(adverb.index('.') + 1)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    num_adverb = 0\n    adverbs = ['a','e','i','o','u']\n    for i in range(0,len(text)):\n        if text[i].lower() in adverbs:\n            num_adverb+=1\n            if num_adverb > 1:\n                break\n    num_adverb+=1\n    # first adverb in the sentence\n    adverb = text[num_adverb]\n    adverb_positions = [i for i, x in enumerate(text) if x.lower() == adverb]\n    adverb_positions = sorted(adverb_positions, key=lambda i:i+num_adverb)\n    adverb_position = adverb_positions[0]\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match = re.search(r\"^(a|an|the|to|for|without|with|at|of|to|from|like|at|at|with|at|at|at|of|the|that|on|those|is|not|have|with|with|with|with|at|at|about|so|at|about|the|from|that|at|at|at|at|at|at|at|with|with|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at|at"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['a', 'an', 'the', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for adverb in adverbs:\n        indicator_list.remove(adverb)\n    indicator_list.append(' ')\n    adverb_position_list = []\n    for i in range(0,len(indicator_list)):\n        adverb_position_list.append([i,text.find(indicator_list[i])])\n    return adverb_position_list\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    nouns = ['a', 'the', 'an', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for noun in nouns:\n        indicator_list.remove(noun)\n    indicator_list.append(' ')\n    noun_position_list = []\n    for i in range(0,len(indicator_list)):\n        noun_position_list.append([i,text.find(indicator_list[i])])\n    return noun_position_list\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verbs = ['an', 'the', 'anly', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for verb in verbs:\n        indicator_list.remove(verb)\n    indicator_list.append(' ')\n    verb_position_list = []\n    for i in range(0,len(indicator_list)):\n        verb_position_list.append([i,text.find(indicator_list[i])])\n    return verb_position_list\ndef find_adj_position(text):\n    '''\n    Write a function to find the first adjverb and their positions in a given sentence.\n    '''\n    adjectives = ['a', 'an', 'the', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for adjective in adjectives:\n        indicator_list.remove(adjective)\n    indicator_list.append(' ')\n    adj_position_list = []\n    for i in range(0,len(indicator_list)):\n        adj_position_list.append([i,text.find(indicator_list[i])])\n    return adj_position_list\ndef find_noun_and_adj_position(text):\n    '''\n    Write a function to find the first noun and adjverb and their positions in a given sentence.\n    '''\n    nouns = ['a', 'an', 'the', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for noun in nouns:\n        indicator_list.remove(noun)\n    indicator_list.append(' ')\n    noun_position_list = []\n    for i in range(0,len(indicator_list)):\n        noun_position_list.append([i,text.find(indicator_list[i])])\n    adj_position_list = []\n    for i in range(0,len(indicator_list)):\n        adj_position_list.append([i,text.find(indicator_list[i])])\n    return noun_position_list, adj_position_list\ndef find_verb_and_adj_position(text):\n    '''\n    Write a function to find the first verb and adjverb and their positions in a given sentence.\n    '''\n    verbs = ['an', 'the', 'anly', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for verb in verbs:\n        indicator_list.remove(verb)\n    indicator_list.append(' ')\n    verb_position_list = []\n    for i in range(0,len(indicator_list)):\n        verb_position_list.append([i,text.find(indicator_list[i])])\n    adj_position_list = []\n    for i in range(0,len(indicator_list)):\n        adj_position_list.append([i,text.find(indicator_list[i])])\n    return verb_position_list, adj_position_list\ndef find_verb_and_adj_position_lazy(text):\n    '''\n    Write a function to find the first verb and adjverb and their positions in a given sentence.\n    '''\n    verbs = ['an', 'the', 'anly', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for verb in verbs:\n        indicator_list.remove(verb)\n    indicator_list.append(' ')\n    verb_position_list = []\n    for i in range(0,len(indicator_list)):\n        verb_position_list.append([i,text.find(indicator_list[i])])\n    adj_position_list = []\n    for i in range(0,len(indicator_list)):\n        adj_position_list.append([i,text.find(indicator_list[i])])\n    return verb_position_list, adj_position_list\ndef find_verb_and_adj_position_special(text):\n    '''\n    Write a function to find the first verb and adjverb and their positions in a given sentence.\n    '''\n    verbs = ['an', 'the', 'anly', 'for', 'if', 'anly']\n    text = re.sub('[\\(|\\)|\\s]', '', text.lower())\n    text = re.sub('[\\\"|\\'|\\s]', '', text)\n    indicator_list = ['\\'', '\\\"', ':']\n    for indicator in indicator_list:\n        text = re.sub(indicator, '', text)\n    for verb in verbs:\n        indicator_list.remove(verb)\n    indicator_list.append(' ')\n    verb_position_list = []\n    for i in range(0,len(indicato"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    # your code goes here\n    # return (1/3)*(l**3)\n    return 1/3*(l**3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # n = int(input(\"Enter the number of rows: \"))\n    # m = int(input(\"Enter the number of columns: \"))\n    # return 1/3 * (l*(l+1)*m)\n    return 3 * (l**2)\n    # return 0.5 * l * (l + 1) * m\n    # return l * (l + 1)\n    # return l * l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                area += ((i+j+k)/3)**2\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 0.5 * (l[0][0] * l[1][0] * l[2][0] + l[0][1] * l[1][1] * l[2][1] + l[0][2] * l[1][2] * l[2][2])\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    result = 0\n    for r in range(0, l, 2):\n        for c in range(0, l, 2):\n            result += (c*c*c)\n    return result\n    \n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    l[0] = l[0]**3\n    for i in range(len(l)-1):\n        s += l[i]*l[i+1]\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 0\n    for a in range(l):\n        for b in range(l):\n            for c in range(l):\n                if abs(a-b)!= abs(a-c)!= abs(b-c)!= 0:\n                    if a + b + c == l**3:\n                        surfacearea += 6\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l**2\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0.5 * l * l\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfaceArea = l**3\n    return surfaceArea\n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    surfaceArea = 3.14 * r**2\n    return surfaceArea\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_nums.append(nums[i])\n    return pos_nums\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    neg_nums = []\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            neg_nums.append(nums[i])\n    return neg_nums\ndef sum(nums):\n    '''\n    Write a function that finds the sum of all positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\ndef average(nums):\n    '''\n    Write a function that finds the average of all positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum/len(nums)\ndef median(nums):\n    '''\n    Write a function that finds the median of all positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    if len(nums) % 2 == 0:\n        return nums[len(nums)//2]\n    return sum/2\ndef mode(nums):\n    '''\n    Write a function that finds the mode of all positive numbers in an array of integers.\n    '''\n    pos_count = positive_count(nums)\n    if len(pos_count) == 0:\n        return -1\n    else:\n        mode = -1\n        for i in range(len(pos_count)):\n            if pos_count[i] == mode:\n                mode = i\n            elif pos_count[i] > mode:\n                mode = i\n        return mode\ndef num_greater_or_equal(nums):\n    '''\n    Write a function that returns the number of elements in a set that are greater than or equal to a given value.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] >= nums[i]:\n            sum += 1\n    return sum\ndef num_less_or_equal(nums):\n    '''\n    Write a function that returns the number of elements in a set that are less than or equal to a given value.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] <= nums[i]:\n            sum += 1\n    return sum\ndef count_pair(nums):\n    '''\n    Write a function that returns the number of pairs in a set that have the same value.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                count += 1\n    return count\ndef set_checker(nums):\n    '''\n    Return True if the set has an element equal to its value and False otherwise.\n    '''\n    if nums[0] == nums[1] == nums[2]:\n        return True\n    return False\ndef unique_elements(nums):\n    '''\n    Return the number of unique elements in a set.\n    '''\n    return len(set(nums))\ndef no_duplicates(nums):\n    '''\n    Return the number of elements that are duplicates of the set.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            count += 1\n    return count\ndef product_set(nums):\n    '''\n    Return the product set from a set.\n    '''\n    prod = 1\n    for i in range(len(nums)):\n        prod *= nums[i]\n    return prod\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of an integer.\n    '''\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\ndef gcd(n, m):\n    '''\n    Write a function that returns the GCD of two integers.\n    '''\n    while m!= 0:\n        n, m = m, n%m\n    return n\ndef lcm(n, m):\n    '''\n    Write a function that returns the LCM of two integers.\n    '''\n    if n > m:\n        n, m = m, n\n    while m % n!= 0:\n        n, m = m, n % m\n    return n\ndef freq_compare(nums, k):\n    '''\n    Return the frequency of occurrence of a given value in a list of numbers.\n    '''\n    count = {}\n    for i in range(len(nums)):\n        if nums[i] in count:\n            count[nums[i]] += 1\n        else:\n            count[nums[i]] = 1\n    return count\ndef modular_exponent(n, e, p):\n    '''\n    Compute the modular exponentiation of a number using a power law.\n    '''\n    result = 1\n    if n < 0:\n        n = -n\n        result = -result\n    while p > 0:\n        if p & 1:\n            result *= n\n        n >>= 1\n        p >>= 1\n    return result\ndef modular_inverse(n, p):\n    '''\n    Compute the modular inverse of a number using a power law.\n    '''\n    if n == 1:\n        return 0\n    while n % p!= 0:\n        tmp = p\n        p = n % p\n        n = tmp\n    return p\ndef modular_exp(n, e, p):\n    '''\n    Compute the modular exponentiation of a number using a power law.\n    '''\n    if n == 0:\n        return 0\n    while n % p!= 0:\n        tmp = p\n        p = n % p\n        n = tmp\n    return p\ndef invert(n, p):\n    '''\n    Compute the inverse of a number using a power law.\n    '''\n    return modular_inverse(n, p)\ndef modinv(n, p):\n    '''\n    Compute the modular inversion of a number using a power law.\n    '''\n    return modular_exponent(n, p-2, p)\ndef gcd_fast(a, b):\n    '''\n    Compute the greatest common divisor of a and b.\n    '''\n    while b!= 0:\n        a, b = b, a % b\n    return a\ndef is_prime(n):\n    '''\n    Computes whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_number(n):\n    '''\n    Computes whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\ndef is_factor_prime(n):\n    '''\n    Computes whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\ndef binomial_coefficient(n, k):\n    '''\n    Computes the binomial coefficient of a number and a give"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #Convert the array to a list\n    arr = list(nums)\n    #Divide the list by the length\n    div = len(arr) / 2\n    #Check if the division result is greater than 1\n    if div > 1:\n        #Divide the list by the values\n        arr1 = arr[:div]\n        arr2 = arr[div:]\n        #Compute the ratio of positive numbers\n        pos_ratio = (len(arr1) + len(arr2)) / len(arr)\n        return pos_ratio\n    #Divide the list by the length\n    else:\n        return arr\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            positives+=1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p_count = 0\n    for num in nums:\n        if num > 0:\n            p_count += 1\n    return p_count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    num_negative = 0\n    for num in nums:\n        if num >= 0:\n            num_positive += 1\n        else:\n            num_negative += 1\n    \n    return num_positive/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums == []:\n        return 0\n    return len(nums)/(sum(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c = 0\n    for i in nums:\n        if i > 0:\n            c = c + 1\n    return c/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    return count_positive\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    # Take the absolute value of the elements\n    abs_vals = list(map(abs, nums))\n    \n    # Find the absolute value of the elements\n    abs_vals.sort()\n    positive_count = 0\n    for i in abs_vals:\n        if i > 0:\n            positive_count += 1\n    \n    return positive_count\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sum = 0\n    for item in list1:\n        sum = sum + item\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maxneg = 0 \n    for i in list1: \n        if i < 0: \n            i = -i \n        if i < maxneg: \n            maxneg = i \n    return maxneg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -99\n    for i in list1:\n        if i < 0:\n            break\n        else:\n            if i < largest:\n                largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    i = 0\n    while(list1[i] < 0): \n        i = i + 1 \n        if(i == len(list1)): \n            break\n    largest = list1[i] \n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -99999\n    for i in list1:\n        if i < 0:\n            if i > largest:\n                largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for number in list1:\n        if number < 0:\n            max_num = number\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0]\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for i in list1:\n        if i < 0:\n            return i\n    return max_neg\ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    min_neg = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            return list1[i]\n    return min_neg\ndef main():\n    list1 = [5, -1, -4, 0, -3, 3, 7, 6, -6, -7, -4, -2]\n    print(list1)\n    print(smallest_neg(list1))\n    print(largest_neg(list1))\n    print(largest_neg(list1))\n    print(smallest_neg(list1))\nmain()"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K==1:\n        return list(test_list)\n    \n    temp_list = []\n    for i in test_list:\n        for j in range(K):\n            temp_list.append(i[j])\n    return tuple(temp_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for value in test_list:\n        if type(value)!= tuple:\n            trimmed_list.append(value)\n        else:\n            length = len(value)\n            for j in range(length - K):\n                trimmed_list.append(value[j])\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        if len(item) == K:\n            test_list.remove(item)\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return test_list\n    else:\n        return list(trim_tuple(test_list[0:K], K)) + list(trim_tuple(test_list[K:], K))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        if len(item) >= K:\n            new_list.append(item[:K])\n        else:\n            new_list.append(item)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    def trim_tuple_2(tuple_list, K):\n        '''\n        Write a function to trim each tuple by k in the given tuple list.\n        '''\n        if len(tuple_list) <= K:\n            return tuple_list\n        else:\n            return [tuple_list[:K]] + trim_tuple_2(tuple_list[K:], K)\n    \n    trimmed_list = trim_tuple_2(test_list, K)\n    return trimmed_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    result = []\n    for item in test_list:\n        if len(item) < K:\n            item += ('',) * (K - len(item))\n        result.append(tuple(item))\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for t in test_list:\n        if len(t)>K:\n            new_list.append(t[:K])\n        else:\n            new_list.append(t)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        t = i[:K]\n        test_list.remove(i)\n        test_list.insert(0,t)\n    \n    return test_list\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Your code here\n    res = 1\n    for i in range(0, len(test_tup1)):\n        res = res * test_tup1[i]\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pas"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += test_tup1[i] * test_tup2[i]\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must be of equal length\")\n        return\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = 0\n    for i in range(len(test_tup1)):\n        res += test_tup1[i] * test_tup2[i]\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        return \"Incorrect number of elements, please select different numbers\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] * test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Use dictionary to store index as key: element pairs in given pair\n    # Converts tuple to dictionary\n    index_dict = {i:element for i, element in enumerate(test_tup1)}\n    # Make copies of the dicts\n    index_dict2 = index_dict.copy()\n    # Multiply each element of the tuple by each element of the second tuple\n    # And store into the new dictionary\n    index_dict = {index_dict[key]:index_dict2[key] for key in index_dict.keys()}\n    return index_dict\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # tup1 = {1,2,3,4}\n    # tup2 = {3,2,1,0}\n    # result = (1,3,3,5)\n    #\n    # print(result)\n    #\n    # print(tup1 * tup2)\n    #\n    # print(tup1 * result)\n    \n    return (\n        (\n            (tup1[0] * test_tup2[0]) + (tup1[1] * test_tup2[1])\n        )\n        / (tup1[2] * test_tup2[2])\n        / (tup1[3] * test_tup2[3])\n    )\n    \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    total = 0\n    for i in range(len(lst)):\n        total += lst[i]\n    return total\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(lst)\n    if len(tup) == 0:\n        return occ\n    else:\n        for i in tup:\n            occ[i] += 1\n        return occ\ndef remove_Rouge(tup, lst):\n    '''\n    Write a python function to remove ROUGE and the other frequent elements from a list.\n    '''\n    if len(tup) == 0:\n        return lst\n    else:\n        for i in lst:\n            if tup[0] == i:\n                lst.remove(i)\n    return lst\ndef remove_keyword(tup, lst, keyword):\n    '''\n    Write a python function to remove keyword from a list.\n    '''\n    if len(tup) == 0:\n        return lst\n    else:\n        for i in lst:\n            if tup[0] == i:\n                if tup[0] == keyword:\n                    lst.remove(i)\n    return lst\ndef remove_stopwords(tup, lst):\n    '''\n    Write a python function to remove stopwords from a list.\n    '''\n    if len(tup) == 0:\n        return lst\n    else:\n        for i in lst:\n            if tup[0] == i:\n                lst.remove(i)\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    for key in tup: \n        c[key] = c[key] + 1\n    return c \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = 0\n    for i in lst: \n        occurence += tup.count(i)\n    return occurence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    dic = {}\n    for i in lst: \n        if i in dic: \n            dic[i] += 1 \n        else: \n            dic[i] = 1 \n    return dic\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    occur = counter.most_common()\n    return(occur)"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for i in lst:\n        counter = counter + 1\n    return counter\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    return c.most_common(1)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).most_common(len(lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ_tuple = Counter(tup) \n    occ_list = [occ_tuple[occ] for occ in lst] \n    print(occ_tuple) \n    print(occ_list) \n    return occ_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # brute force solution\n    return [num*num for num in range(1, len(nums) + 1)]\n    # also solution - try using recursion\n    # return sum([num*num for num in range(1, len(nums) + 1)])\n    \n    # dp solution\n    \n    # return sum([num*num for num in nums])\n    \n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [0] * len(nums)\n    \n    cubes[0] = 1\n    \n    for i in range(len(nums) - 1):\n        cubes[i + 1] = cubes[i] * cubes[i]\n    \n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return sum([n**3 for n in nums])\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube(num):\n        return num*num*num\n    for i in nums:\n        nums[nums.index(i)] = cube(i)\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    sum = 0\n    cubes = []\n    for i in nums:\n        sum = sum + i**3\n    cubes = [sum]*(len(nums))\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    cubes = []\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in range(len(nums)):\n        cube_list.append(nums[i]**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    ans = 0\n    for i in nums:\n        ans += i ** 3\n    return ans\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    elif n == 1:\n        return 1\n    \n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s = s + i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    x=0\n    for i in range(n):\n        x+=i\n    return x\n    \ndef calc_perrin(n): \n    '''\n    Write a function to calculate the sum of the perrin numbers.\n    '''\n    x=0\n    for i in range(n):\n        x=cal_sum(i)\n    return x\n    \ndef calc_product(n): \n    '''\n    Write a function to calculate the product of perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*i\n    return x\n    \ndef calc_average(n): \n    '''\n    Write a function to calculate the average of the perrin numbers.\n    '''\n    x=0\n    for i in range(n):\n        x+=i\n    return x/n\n    \ndef calc_square(n): \n    '''\n    Write a function to calculate the square of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*i\n    return x\n    \ndef calc_triangle(n): \n    '''\n    Write a function to calculate the triangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_cube(n): \n    '''\n    Write a function to calculate the cube of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_circle(n): \n    '''\n    Write a function to calculate the circle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_sphere(n): \n    '''\n    Write a function to calculate the sphere of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_rectangle(n): \n    '''\n    Write a function to calculate the rectangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_circle_perrin(n): \n    '''\n    Write a function to calculate the circle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_square_perrin(n): \n    '''\n    Write a function to calculate the square of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_triangle_perrin(n): \n    '''\n    Write a function to calculate the triangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_cube_perrin(n): \n    '''\n    Write a function to calculate the cube of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_sphere_perrin(n): \n    '''\n    Write a function to calculate the sphere of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_rectangle_perrin(n): \n    '''\n    Write a function to calculate the rectangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_circle_perrin_perrin(n): \n    '''\n    Write a function to calculate the circle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_square_perrin_perrin(n): \n    '''\n    Write a function to calculate the square of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_triangle_perrin_perrin(n): \n    '''\n    Write a function to calculate the triangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_cube_perrin_perrin(n): \n    '''\n    Write a function to calculate the cube of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_sphere_perrin_perrin(n): \n    '''\n    Write a function to calculate the sphere of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_rectangle_perrin_perrin(n): \n    '''\n    Write a function to calculate the rectangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_circle_perrin_perrin(n): \n    '''\n    Write a function to calculate the circle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_square_perrin_perrin(n): \n    '''\n    Write a function to calculate the square of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_triangle_perrin_perrin(n): \n    '''\n    Write a function to calculate the triangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_cube_perrin_perrin(n): \n    '''\n    Write a function to calculate the cube of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_sphere_perrin_perrin(n): \n    '''\n    Write a function to calculate the sphere of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_rectangle_perrin_perrin(n): \n    '''\n    Write a function to calculate the rectangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_circle_perrin_perrin(n): \n    '''\n    Write a function to calculate the circle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_square_perrin_perrin(n): \n    '''\n    Write a function to calculate the square of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)\n    return x\n    \ndef calc_triangle_perrin_perrin(n): \n    '''\n    Write a function to calculate the triangle of the perrin numbers.\n    '''\n    x=1\n    for i in range(n):\n        x=x*(i+1)"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def sum(n): \n        result = 0\n        if n == 0: \n            return 0\n        elif n == 1: \n            return n \n        else: \n            result = n + sum(n - 1) \n            return result \n    return sum(n) \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    for i in range(1, n + 1): \n        a = a + i \n    return a\n    "
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for n in range(n):\n        sum += n\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s=0\n    for i in range(1,n+1): \n        s+=i\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < len(str):\n        if str[i] == \"\\\\\":\n            # \"\\\\\" detected, do not skip\n            i += 1\n        elif str[i] == \"#\":\n            # \"#\" detected, do not skip\n            i += 1\n        elif str[i] == \"\\n\":\n            # \"\\\\n\" detected, do not skip\n            i += 1\n        elif str[i] == \"$\":\n            # \"$\" detected, return first $\n            i += 1\n        elif str[i] == \"%\":\n            # %\" detected, do not skip\n            i += 1\n        elif str[i] == \" \":\n            # \" \" detected, do not skip\n            i += 1\n        elif str[i] == \"\\t\":\n            # \"\\t\" detected, do not skip\n            i += 1\n        elif str[i] == \"\\r\":\n            # \"\\r\" detected, do not skip\n            i += 1\n        elif str[i] == \"\\b\":\n            # \"\\b\" detected, do not skip\n            i += 1\n        elif str[i] == \"\\f\":\n            # \"\\f\" detected, do not skip\n            i += 1\n        elif str[i] == \"\\v\":\n            # \"\\v\" detected, do not skip\n            i += 1\n        else:\n            return(i)\n    return(i)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = list(l)\n    l[0] = str.find(l[0])\n    if l[0] == -1:\n        l[0] = len(l)\n    l[0] += 1\n    l[1] = l[1].split(\":\")\n    l[1] = int(l[1][0])\n    return l\n    "
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str)<l:\n        return \"\"\n    else:\n        return str[l-1]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for element in l:\n        if len(element) >= l[1]:\n            return element\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Implement your code here\n    \n    l_len = len(l)\n    return l[:l_len]\n    \ndef is_palindrome(str):\n    '''\n    A string is palindrome if it has only one\n    '''\n    # Implement your code here\n    return True if len(str) == 1 else False\n    \ndef get_strings(str):\n    '''\n    '''\n    # Implement your code here\n    return [extract_string(str, string) for string in list(str)]\n    \ndef main():\n    # Read the string\n    str = input()\n    # Check if palindrome\n    print('YES' if is_palindrome(str) else 'NO')\n    \n    # Write your code here\n    \nmain()"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [string[l:l+str] for string in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    strs = []\n    i = 0\n    for c in str:\n        strs.append(c)\n        i = i + 1\n        if i == l:\n            break\n    return strs\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Define the size\n    n = len(str)\n    # Create an array to store the extracted values\n    extracted_value = []\n    # Loop through each element in the list\n    for i in l:\n        # Check if the current element is a string\n        if type(i) == str:\n            # If so, add the current element to extracted_value\n            extracted_value.append(i)\n    # Return the extracted values\n    return extracted_value\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' +','', text1)\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    for char in text1:\n        if char == \" \":\n            pass\n        else:\n            text2 += char\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # TODO: create a regex for removing whitespace from the text\n    #   and remove the whitespace\n    # E.g.\n    #    '  python\\n'\n    #    'python'\n    #    '  python\\n'\n    #    'python'\n    #\n    # RETURN:\n    #   string with all whitespace removed\n    \n    # Example:\n    # string =' python\\n'\n    # string = 'python'\n    # string =' python\\n'\n    # string = 'python'\n    # string =''\n    # string ='   python'\n    # string =' python\\n'\n    # string = 'python'\n    # string ='  python'\n    # string = 'python\\n    '\n    # string = 'python'\n    # string = 'python'\n    # string =' python'\n    # string = 'python'\n    # string = 'python  '\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'^\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(\"\\n\", \" \", text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\n','')\n    text1 = text1.replace(' ','')\n    text1 = text1.replace('\\t','')\n    text1 = text1.replace('\\n','')\n    text1 = text1.replace('\\r','')\n    text1 = text1.replace('\\t','')\n    text1 = text1.replace('\\s','')\n    text1 = text1.replace('\\v','')\n    text1 = text1.replace('\\f','')\n    text1 = text1.replace('\\r','')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    for i in text1:\n        if i!='' and i!= '\\t':\n            text2 = text2 + i\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace('\\n','')\n    text1 = text1.replace('\\t','')\n    text1 = text1.replace('  ','')\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('\\s+','', text1)\n    return text\ndef remove_quotes(text1):\n    '''\n    Write a function to remove all quotes from the given string.\n    '''\n    text = re.sub('\\'', '', text1)\n    return text\ndef remove_non_numeric(text1):\n    '''\n    Write a function to remove all non-numeric characters from the given string.\n    '''\n    text = re.sub('[^0-9]', '', text1)\n    return text\ndef remove_numbers(text1):\n    '''\n    Write a function to remove all non-numeric characters from the given string.\n    '''\n    text = re.sub('[^0-9]', '', text1)\n    return text\ndef remove_symbols(text1):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    text = re.sub('[^a-zA-Z]', '', text1)\n    return text\ndef remove_special(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text = re.sub('[!@#$%^&*()_+?|><~0-9]=?|'\n                 '\\n|&\\)|\\'\\''\n                 '\\(\\)|\\(|\\{|\\}|\\[|\\]|\\{|\\}|\\,|\\+|\\=|\\-|\\.|\\?|\\;|\\\\|\\\\\\\\|\\`|\\~',\n                 '', text1)\n    return text\ndef remove_symbols2(text1):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    text = re.sub('[!@#$%^&*()_+?|><~0-9]=?|'\n                 '\\n|&\\)|\\'\\''\n                 '\\(\\)|\\(|\\{|\\}|\\[|\\]|\\{|\\}|\\,|\\+|\\=|\\-|\\.|\\?|\\;|\\\\\\\\|\\`|\\~',\n                 '', text1)\n    return text\ndef remove_numbers2(text1):\n    '''\n    Write a function to remove all non-numeric characters from the given string.\n    '''\n    text = re.sub('[^0-9]', '', text1)\n    return text\ndef remove_symbols3(text1):\n    '''\n    Write a function to remove all symbols from the given string.\n    '''\n    text = re.sub('[!@#$%^&*()_+?|><~0-9]=?|'\n                 '\\n|&\\)|\\'\\''\n                 '\\(\\)|\\(|\\{|\\}|\\[|\\]|\\{|\\}|\\,|\\+|\\=|\\-|\\.|\\?|\\;|\\\\\\\\|\\`|\\~',\n                 '', text1)\n    return text\ndef remove_symbols4(text1):\n    '''\n    Write a function to remove all non-numeric characters from the given string.\n    '''\n    text = re.sub('[^0-9]', '', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1).strip().lower()\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == 0: \n        return 0.0\n    else: \n        return actual_cost - sale_amount \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost=actual_cost.replace(\"$\",\"\")\n    actual_cost=actual_cost.replace(\",\",\"\")\n    actual_cost=actual_cost.replace(\".\",\"\")\n    actual_cost=float(actual_cost)\n    sale_amount=sale_amount.replace(\"$\",\"\")\n    sale_amount=sale_amount.replace(\",\",\"\")\n    sale_amount=float(sale_amount)\n    if sale_amount>=actual_cost:\n        return (sale_amount-actual_cost)\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #(Base Case)\n    if actual_cost < sale_amount: \n        return actual_cost - sale_amount \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = sale_amount - actual_cost\n    if loss_amount < 0:\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<= actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return 0\n    else: \n        return sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n <= 0:\n        return 0\n    factors = [1]\n    while n%2 == 0:\n        n //= 2\n        factors.append(2)\n    while n%3 == 0:\n        n //= 3\n        factors.append(3)\n    if n <= 1:\n        return factors[-1]\n    else:\n        return sumofFactors(n//3) + sumofFactors(n//2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # if n is even, then n should be divisible by 2\n    # n should be divisible by 3, 5, 7\n    # return n\n    if n < 2 :\n        return n\n    else :\n        return sumofFactors(n-1) + sumofFactors(n-2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0) : \n        return 0\n    if (n == 1) : \n        return 1\n    if (n == 2) : \n        return 2\n    if (n % 2 == 0) : \n        return 2 + sumofFactors(n//2)\n    else : \n        return int(math.sqrt(n)) + sumofFactors(n - (int(math.sqrt(n))*int(math.sqrt(n))))\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=2\n    while (i*i)<=n : \n        if (n%i)==0 : \n            return i \n        else : \n            i=i+1\n    return -1\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==0: \n        return 0\n    i=1\n    while (i<=math.sqrt(n)) : \n        if (n%i==0) : \n            return i \n        i+=1\n    return -1\n    \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            sum += i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    else : \n        i = 2\n        while i * i <= n :\n            if n % i == 0 : \n                if i % 2 == 0 : \n                    return i\n                else : \n                    return i * 2\n            i += 1\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n==0:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 0) : \n        return 0\n    while (n!= 0) : \n        if (n % 2 == 0) : \n            n = n / 2\n            continue\n        if (n % 3 == 0) : \n            n = n / 3\n            continue\n        if (n % 5 == 0) : \n            n = n / 5\n            continue\n        if (n % 7 == 0) : \n            n = n / 7\n            continue\n        if (n % 11 == 0) : \n            n = n / 11\n            continue\n        if (n % 13 == 0) : \n            n = n / 13\n            continue\n        if (n % 17 == 0) : \n            n = n / 17\n            continue\n        if (n % 19 == 0) : \n            n = n / 19\n            continue\n        if (n % 23 == 0) : \n            n = n / 23\n            continue\n        if (n % 29 == 0) : \n            n = n / 29\n            continue\n        if (n % 31 == 0) : \n            n = n / 31\n            continue\n        if (n % 33 == 0) : \n            n = n / 33\n            continue\n        if (n % 37 == 0) : \n            n = n / 37\n            continue\n        if (n % 39 == 0) : \n            n = n / 39\n            continue\n        if (n % 41 == 0) : \n            n = n / 41\n            continue\n        if (n % 43 == 0) : \n            n = n / 43\n            continue\n        if (n % 47 == 0) : \n            n = n / 47\n            continue\n        if (n % 49 == 0) : \n            n = n / 49\n            continue\n        if (n % 51 == 0) : \n            n = n / 51\n            continue\n        if (n % 53 == 0) : \n            n = n / 53\n            continue\n        if (n % 59 == 0) : \n            n = n / 59\n            continue\n        if (n % 61 == 0) : \n            n = n / 61\n            continue\n        if (n % 67 == 0) : \n            n = n / 67\n            continue\n        if (n % 71 == 0) : \n            n = n / 71\n            continue\n        if (n % 73 == 0) : \n            n = n / 73\n            continue\n        if (n % 79 == 0) : \n            n = n / 79\n            continue\n        if (n % 81 == 0) : \n            n = n / 81\n            continue\n        if (n % 83 == 0) : \n            n = n / 83\n            continue\n        if (n % 89 == 0) : \n            n = n / 89\n            continue\n        if (n % 91 == 0) : \n            n = n / 91\n            continue\n        if (n % 93 == 0) : \n            n = n / 93\n            continue\n        if (n % 95 == 0) : \n            n = n / 95\n            continue\n        if (n % 97 == 0) : \n            n = n / 97\n            continue\n        if (n % 99 == 0) : \n            n = n / 99\n            continue\n        if (n % 101 == 0) : \n            n = n / 101\n            continue\n        if (n % 103 == 0) : \n            n = n / 103\n            continue\n        if (n % 107 == 0) : \n            n = n / 107\n            continue\n        if (n % 109 == 0) : \n            n = n / 109\n            continue\n        if (n % 111 == 0) : \n            n = n / 111\n            continue\n        if (n % 113 == 0) : \n            n = n / 113\n            continue\n        if (n % 119 == 0) : \n            n = n / 119\n            continue\n        if (n % 121 == 0) : \n            n = n / 121\n            continue\n        if (n % 123 == 0) : \n            n = n / 123\n            continue\n        if (n % 125 == 0) : \n            n = n / 125\n            continue\n        if (n % 127 == 0) : \n            n = n / 127\n            continue\n        if (n % 129 == 0) : \n            n = n / 129\n            continue\n        if (n % 131 == 0) : \n            n = n / 131\n            continue\n        if (n % 133 == 0) : \n            n = n / 133\n            continue\n        if (n % 135 == 0) : \n            n = n / 135\n            continue\n        if (n % 137 == 0) : \n            n = n / 137\n            continue\n        if (n % 139 == 0) : \n            n = n / 139\n            continue\n        if (n % 141 == 0) : \n            n = n / 141\n            continue\n        if (n % 143 == 0) : \n            n = n / 143\n            continue\n        if (n % 145 == 0) : \n            n = n / 145\n            continue\n        if (n % 147 == 0) : \n            n = n / 147\n            continue\n        if (n % 149 == 0) : \n            n = n / 149\n            continue\n        if (n % 151 == 0) : \n            n = n / 151\n            continue\n        if (n % 155 == 0) : \n            n = n / 155\n            continue\n        if (n % 157 == 0) : \n            n = n / 157\n            continue\n        if (n % 159 == 0) : \n            n = n / 159\n            continue\n        if (n % 161 == 0) : \n            n = n / 161\n            continue\n        if (n % 163 == 0) : \n            n = n / 163\n            continue\n        if (n % 165 == 0) : \n            n = n / 165\n            continue\n        if (n % 167 == 0) : \n            n = n / 167\n            continue\n        if (n % 169 == 0) : \n            n = n / 169\n            continue\n        if (n % 171 == 0) : \n            n = n / 171\n            continue\n        if (n % 173 == 0) : \n            n = n / 173\n            continue\n        if (n % 175 == 0) : \n            n = n / 175\n            continue\n        if (n % 177 == 0) : \n            n = n / 177\n            continue\n        if (n % 179 == 0) : \n            n = n / 179\n            continue\n        if (n % 181 == 0) : \n            n = n / 181\n            continue\n        if (n % 183 == 0) : \n            n = n / 183\n            continue\n        if (n % 185 == 0) : \n            n = n / 185\n            continue\n        if (n % 187 == 0) : \n            n = n / 187\n            continue\n        if (n % 189 == 0) : \n            n = n / 189\n            continue\n        if (n % 191 == 0) : \n            n = n / 191\n            continue\n        if (n % 193 == 0) : \n            n = n / 193\n            continue\n        if (n % 195 == 0) : \n            n = n / 195\n            continue\n        if (n % 197 == 0) : \n            n = n / 197\n            continue\n        if (n % 199 == 0) : \n            n = n / 199\n            continue\n        if (n % 201 == 0) : \n            n = n / 201\n            continue\n        if (n % 203 == 0) : \n            n = n / 203\n            continue\n        if (n % 205 == 0) : \n            n = n / 205\n            continue\n        if (n % 207 == 0) : \n            n = n / 207\n            continue\n        if (n % 209 == 0) : \n            n = n / 209\n            continue\n        if (n % 211 == 0) : \n            n = n / 211\n            continue\n        if (n % 213 == 0) : \n            n = n / 213\n            continue\n        if (n % 215 == 0) : \n            n = n / 215\n            continue\n        if (n % 217 == 0) : \n            n = n / 217\n            continue\n        if (n % 219 == 0) : \n            n = n / 219\n            continue\n        if ("
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall('\\w+', text)\n    for word in words:\n        print('word: {}'.format(word))\n        print('len: {}'.format(len(word)))\n        if(word.endswith('z')):\n            print('word ends with z')\n            print('word: {}'.format(word))\n            print('len: {}'.format(len(word)))\n            return\n        elif(word.endswith('s')):\n            print('word ends with s')\n            print('word: {}'.format(word))\n            print('len: {}'.format(len(word)))\n            return\n        elif(word.endswith('p')):\n            print('word ends with p')\n            print('word: {}'.format(word))\n            print('len: {}'.format(len(word)))\n            return\n        else:\n            print('word does not end with p or z')\n            print('word: {}'.format(word))\n            print('len: {}'.format(len(word)))\n    return\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"^\\s*([a-zA-Z0-9]+)\\s*\\.*?(.*)\"\n    reg = re.compile(pattern)\n    result = reg.match(text)\n    if result == None:\n        return False\n    return result.group(1) == ''\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'(?:[a-z])(?:[0-9]{1,2})(?:[0-9]{1,3})(?:[0-9]{1,4})'\n    matches = re.search(pattern, text)\n    #print(matches.groups())\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.strip()\n    \n    # remove any spacial characters\n    pattern = re.compile(\"[^\\w\\s]\")\n    text = pattern.sub(\" \", text)\n    \n    # remove any spaces\n    pattern = re.compile(\"[\\s]+\")\n    text = pattern.sub(\" \", text)\n    \n    # strip any non-word characters and any spaces\n    pattern = re.compile(\"[^a-zA-Z\\s]+\")\n    text = pattern.sub(\" \", text)\n    \n    # remove any letters or numbers\n    pattern = re.compile(\"[^0-9a-zA-Z\\s]\")\n    text = pattern.sub(\" \", text)\n    \n    # remove any punctuation\n    pattern = re.compile(\"[%s]\" % re.escape(string.punctuation))\n    text = pattern.sub(\"\", text)\n    \n    # remove numbers\n    pattern = re.compile(\"[0-9]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any special characters\n    pattern = re.compile(\"[%s]\" % re.escape(string.punctuation))\n    text = pattern.sub(\"\", text)\n    \n    # remove any special characters that are at the beginning or end of a word\n    pattern = re.compile(\"[^a-zA-Z0-9\\s]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any capital letters\n    pattern = re.compile(\"[A-Z]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any symbols\n    pattern = re.compile(\"[!@#$%^&*?\\\\|<>;:.,?^_`{}~]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any remaining symbols\n    pattern = re.compile(\"[a-zA-Z0-9]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any double-quotes\n    pattern = re.compile(\"\\\"\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any surrounding quotes\n    pattern = re.compile(\"\\'\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any quotes around words\n    pattern = re.compile(\"[\\'\\\"]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any more quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any double quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any words containing whitespace or punctuation\n    pattern = re.compile(\"\\S\")\n    text = pattern.sub(\" \", text)\n    \n    # remove any non-word characters\n    pattern = re.compile(\"[^a-zA-Z\\s]+\")\n    text = pattern.sub(\" \", text)\n    \n    # remove numbers\n    pattern = re.compile(\"[0-9]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any special characters\n    pattern = re.compile(\"[%s]\" % re.escape(string.punctuation))\n    text = pattern.sub(\"\", text)\n    \n    # remove any special characters that are at the beginning or end of a word\n    pattern = re.compile(\"[^a-zA-Z0-9\\s]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any capital letters\n    pattern = re.compile(\"[A-Z]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any symbols\n    pattern = re.compile(\"[!@#$%^&*?\\\\|<>;:.,?^_`{}~]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any remaining symbols\n    pattern = re.compile(\"[a-zA-Z0-9]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any double-quotes\n    pattern = re.compile(\"\\\"\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any surrounding quotes\n    pattern = re.compile(\"\\'\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any double quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any words containing whitespace or punctuation\n    pattern = re.compile(\"\\S\")\n    text = pattern.sub(\" \", text)\n    \n    # remove any non-word characters\n    pattern = re.compile(\"[^a-zA-Z\\s]+\")\n    text = pattern.sub(\" \", text)\n    \n    # remove numbers\n    pattern = re.compile(\"[0-9]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any special characters\n    pattern = re.compile(\"[%s]\" % re.escape(string.punctuation))\n    text = pattern.sub(\"\", text)\n    \n    # remove any special characters that are at the beginning or end of a word\n    pattern = re.compile(\"[^a-zA-Z0-9\\s]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any capital letters\n    pattern = re.compile(\"[A-Z]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any symbols\n    pattern = re.compile(\"[!@#$%^&*?\\\\|<>;:.,?^_`{}~]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any remaining symbols\n    pattern = re.compile(\"[a-zA-Z0-9]\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any double-quotes\n    pattern = re.compile(\"\\\"\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any surrounding quotes\n    pattern = re.compile(\"\\'\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\'])\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any double quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any double quotes around words\n    pattern = re.compile(\"[\\\"\\']\")\n    text = pattern.sub(\"\", text)\n    \n    # remove any single quotes around words\n    pattern = re.compile(\"[\\\""
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(0,len(text)):\n        if text[i] == 'z':\n            wordz = text[i]\n            break\n    for i in range(0,len(text)-1):\n        if text[i] == 'z' and text[i+1] == wordz:\n            wordz = text[i]\n            break\n    if text[-1] == wordz:\n        return True\n    else:\n        return False\ndef text_match_wordz_g(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z':\n            return True\n    return False\ndef text_match_wordz_h(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z':\n            return True\n    return False\ndef text_match_wordz_i(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z':\n            return True\n    return False\ndef text_match_wordz_j(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z':\n            return True\n    return False\ndef text_match_wordz_k(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z':\n            return True\n    return False\ndef text_match_wordz_l(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z' and text[i+7] == 'z':\n            return True\n    return False\ndef text_match_wordz_m(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z' and text[i+7] == 'z' and text[i+8] == 'z':\n            return True\n    return False\ndef text_match_wordz_n(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z' and text[i+7] == 'z' and text[i+8] == 'z' and text[i+9] == 'z':\n            return True\n    return False\ndef text_match_wordz_o(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z' and text[i+7] == 'z' and text[i+8] == 'z' and text[i+9] == 'z' and text[i+10] == 'z':\n            return True\n    return False\ndef text_match_wordz_p(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z' and text[i+7] == 'z' and text[i+8] == 'z' and text[i+9] == 'z' and text[i+10] == 'z' and text[i+11] == 'z':\n            return True\n    return False\ndef text_match_wordz_q(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z' and text[i+7] == 'z' and text[i+8] == 'z' and text[i+9] == 'z' and text[i+10] == 'z' and text[i+11] == 'z' and text[i+12] == 'z':\n            return True\n    return False\ndef text_match_wordz_r(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == 'z' and text[i+4] == 'z' and text[i+5] == 'z' and text[i+6] == 'z' and text[i+7] == 'z' and text[i+8] == 'z' and text[i+9] == 'z' and text[i+10] == 'z' and text[i+11] == 'z' and text[i+12] == 'z' and text[i+13] == 'z' and text[i+14] == 'z' and text[i+15] == 'z' and text[i+16] == 'z':\n            return True\n    return False\ndef text_match_wordz_s(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for i in range(len(text)-1):\n        if text[i] == 'z' and text[i+1] == 'z' and text[i+2] == 'z' and text[i+3] == "
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Split the input into a list of words.\n    words = text.split()\n    \n    # Check if the word contains a 'z'.\n    if len(words) < 1:\n        return 'You entered nothing.'\n    \n    # Iterate through the words.\n    for word in words:\n        if word.upper() == 'Z':\n            return 'You entered \"z\".'\n    \n    # Return the string that indicates a match.\n    return 'You found an \"z\".'\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_dct = {}\n    # letters = list(string.ascii_letters)\n    #\n    # for letter in letters:\n    #     text_dct[letter] = text.count(letter)\n    #\n    # letters = list(set(text_dct.keys()))\n    # letters.sort()\n    #\n    # for letter in letters:\n    #     text_dct[letter] = text.count(letter)\n    #\n    # string_dct = dict(text_dct)\n    #\n    # min_length = max(string_dct.values())\n    # for letter in string_dct.keys():\n    #     if string_dct[letter] < min_length:\n    #         min_length = string_dct[letter]\n    #\n    # string_dct = dict(sorted(string_dct.items(), key=lambda item: item[1], reverse=True))\n    #\n    # print(string_dct)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    pattern = r'z'\n    result = re.findall(pattern, text)\n    return result\n    \ndef test_text_match_wordz():\n    '''\n    Test function.\n    '''\n    assert 'a' in text_match_wordz('a')\n    assert 'z' not in text_match_wordz('z')\n    assert 'z' not in text_match_wordz('zz')\n    assert 'z' not in text_match_wordz('zz')\n    assert 'z' not in text_match_wordz('zzz')\n    assert 'z' not in text_match_wordz('zzzz')\n    \ndef test_text_match_wordz_reversed():\n    '''\n    Test function.\n    '''\n    text = 'z'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z']\n    text = 'z'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z']\n    text = 'z'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z']\n    text = 'zz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzz'\n    result = text_match_wordz_reversed(text)\n    assert result == ['z', 'z']\n    \ndef test_text_match_wordz_reversed_reversed():\n    '''\n    Test function.\n    '''\n    text = 'zzzzz'\n    result = text_match_wordz_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzz'\n    result = text_match_wordz_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzz'\n    result = text_match_wordz_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzz'\n    result = text_match_wordz_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzz'\n    result = text_match_wordz_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzz'\n    result = text_match_wordz_reversed_reversed(text)\n    assert result == ['z', 'z']\n    \ndef test_text_match_wordz_reversed_reversed_reversed():\n    '''\n    Test function.\n    '''\n    text = 'zzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzzzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzzzzzzzzzzzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    result = text_match_wordz_reversed_reversed_reversed(text)\n    assert result == ['z', 'z']\n    text = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z', text)\n    print(x)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('this', text)\n    print(x)\n    if x:\n        print('found')\n    else:\n        print('not found')\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('this', text)\n    print(x)\n    if x:\n        print('found')\n    else:\n        print('not found')\ndef test_text_match_wordz_2():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_2():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_2():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef text_match_wordz_3(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_3():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_3():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_3():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_3():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_3():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef text_match_wordz_3():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_3():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef text_match_wordz_4(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_4():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_4():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_4():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef text_match_wordz_5(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_5():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_5():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_5():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_5():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef text_match_wordz_6(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_6():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re.search('z', text)\n    if x:\n        return x.start()\n    else:\n        return -1\ndef test_text_match_wordz_6():\n    '''\n    Test function for text_match_wordz().\n    '''\n    text = 'I like this book'\n    x = re"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in text.split():\n        if word[-1] == 'z':\n            return word[:-1]\n    return False\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    for word in text.split():\n        if word[-1] == 'a':\n            return word[:-1]\n    return False\ndef text_match_word_2(text):\n    '''\n    Write a function that matches a word containing'm'.\n    '''\n    for word in text.split():\n        if word[-1] =='m':\n            return word[:-1]\n    return False\ndef text_match_word_3(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    for word in text.split():\n        if word[-1] == 'e':\n            return word[:-1]\n    return False\ndef text_match_word_4(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    for word in text.split():\n        if word[-1] == 'l':\n            return word[:-1]\n    return False\ndef text_match_word_5(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    for word in text.split():\n        if word[-1] == 'r':\n            return word[:-1]\n    return False\ndef text_match_word_6(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    for word in text.split():\n        if word[-1] == 'd':\n            return word[:-1]\n    return False\ndef text_match_word_7(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    for word in text.split():\n        if word[-1] == 'c':\n            return word[:-1]\n    return False\ndef text_match_word_8(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    for word in text.split():\n        if word[-1] == 'b':\n            return word[:-1]\n    return False\ndef text_match_word_9(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    for word in text.split():\n        if word[-1] == 'o':\n            return word[:-1]\n    return False\ndef text_match_word_10(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    for word in text.split():\n        if word[-1] =='s':\n            return word[:-1]\n    return False\ndef text_match_word_11(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    for word in text.split():\n        if word[-1] == 't':\n            return word[:-1]\n    return False\ndef text_match_word_12(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    for word in text.split():\n        if word[-1] == 'p':\n            return word[:-1]\n    return False\ndef text_match_word_13(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    for word in text.split():\n        if word[-1] == 'q':\n            return word[:-1]\n    return False\ndef text_match_word_14(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    for word in text.split():\n        if word[-1] == 'd':\n            return word[:-1]\n    return False\ndef text_match_word_15(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    for word in text.split():\n        if word[-1] == 'c':\n            return word[:-1]\n    return False\ndef text_match_word_16(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    for word in text.split():\n        if word[-1] == 'b':\n            return word[:-1]\n    return False\ndef text_match_word_17(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    for word in text.split():\n        if word[-1] == 'o':\n            return word[:-1]\n    return False\ndef text_match_word_18(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    for word in text.split():\n        if word[-1] =='s':\n            return word[:-1]\n    return False\ndef text_match_word_19(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    for word in text.split():\n        if word[-1] == 't':\n            return word[:-1]\n    return False\ndef text_match_word_20(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    for word in text.split():\n        if word[-1] == 'p':\n            return word[:-1]\n    return False\ndef text_match_word_21(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    for word in text.split():\n        if word[-1] == 'q':\n            return word[:-1]\n    return False\ndef text_match_word_22(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    for word in text.split():\n        if word[-1] == 'd':\n            return word[:-1]\n    return False\ndef text_match_word_23(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    for word in text.split():\n        if word[-1] == 'c':\n            return word[:-1]\n    return False\ndef text_match_word_24(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    for word in text.split():\n        if word[-1] == 'b':\n            return word[:-1]\n    return False\ndef text_match_word_25(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    for word in text.split():\n        if word[-1] == 'o':\n            return word[:-1]\n    return False\ndef text_match_word_26(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    for word in text.split():\n        if word[-1] =='s':\n            return word[:-1]\n    return False\ndef text_match_word_27(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    for word in text.split():\n        if word[-1] == 't':\n            return word[:-1]\n    return False\ndef text_match_word_28(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    for word in text.split():\n        if word[-1] == 'p':\n            return word[:-1]\n    return False\ndef text_match_word_29(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    for word in text.split():\n        if word[-1] == 'q':\n            return word[:-1]\n    return False\ndef text_match_word_30(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    for word in text.split():\n        if word[-1] == 'd':\n            return word[:-1]\n    return False\ndef tex"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    if monthnum2 in range(1, 13):\n        return True\n    if monthnum2 == 0:\n        return True\n    if monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = monthnum2\n    if monthnumb == 1:\n        monthnumb = 31\n    else:\n        if monthnumb == 12:\n            monthnumb = 31\n        elif monthnumb == 2:\n            monthnumb = 29\n        elif monthnumb == 3:\n            monthnumb = 31\n        elif monthnumb == 4:\n            monthnumb = 30\n        elif monthnumb == 5:\n            monthnumb = 31\n        elif monthnumb == 6:\n            monthnumb = 30\n        elif monthnumb == 7:\n            monthnumb = 31\n        elif monthnumb == 8:\n            monthnumb = 31\n        elif monthnumb == 9:\n            monthnumb = 30\n        elif monthnumb == 10:\n            monthnumb = 31\n        elif monthnumb == 11:\n            monthnumb = 30\n    return monthnumb\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2<=0 or monthnum2>12:\n        return False\n    else:\n        for month in range(1,13):\n            if monthnum2 == month:\n                if monthnum2<31:\n                    return True\n                else:\n                    return False\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # start by checking whether the given month number is an integer\n    # if it is not an integer, then it should not be an integer\n    if not isinstance(monthnum2, int):\n        # check whether the given month number is integer\n        if not isinstance(monthnum2, str):\n            return \"Not a number\"\n        # if the given month number is integer, then it should not be the odd or even days\n        elif int(monthnum2) == monthnum2:\n            # check whether the given month number is odd or even days\n            if monthnum2 == 1 or monthnum2 == 7:\n                return \"Odd\"\n            else:\n                return \"Even\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    if monthnum2 == 2:\n        if monthnum2 == 3:\n            return True\n        return False\n    if monthnum2 == 4:\n        if monthnum2 == 5:\n            return True\n        return False\n    if monthnum2 == 6:\n        if monthnum2 == 7:\n            return True\n        return False\n    if monthnum2 == 8:\n        if monthnum2 == 9:\n            return True\n        return False\n    if monthnum2 == 10:\n        if monthnum2 == 11:\n            return True\n        return False\n    if monthnum2 == 12:\n        if monthnum2 == 1:\n            return True\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 >= 1 and monthnum2 <= 12:\n        return True\n    else:\n        return False\n    \n    \ndef check_monthnumb_even_or_odd(monthnum2):\n    '''\n    Write a function to check whether the given month number contains even days or not.\n    '''\n    \n    if monthnum2 % 2 == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 1) and (monthnum2 <= 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 'Jan':\n        return True\n    elif monthnum2 == 'Feb':\n        return True\n    elif monthnum2 == 'Mar':\n        return True\n    elif monthnum2 == 'Apr':\n        return True\n    elif monthnum2 == 'May':\n        return True\n    elif monthnum2 == 'Jun':\n        return True\n    elif monthnum2 == 'Jul':\n        return True\n    elif monthnum2 == 'Aug':\n        return True\n    elif monthnum2 == 'Sep':\n        return True\n    elif monthnum2 == 'Oct':\n        return True\n    elif monthnum2 == 'Nov':\n        return True\n    elif monthnum2 == 'Dec':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = \"12\"\n    is_leap_year = True\n    if monthnum2 >= 12:\n        is_leap_year = False\n        monthnum2 = monthnum2 - 12\n        monthnumb = \"1\"\n    if monthnum2 == 31:\n        return True\n    if monthnum2 == 30:\n        return False\n    for i in range(1, monthnum2):\n        if i!= 1 and i % 12 == monthnum2 % 12:\n            return False\n    if monthnum2 % 12 == monthnum2 % 100:\n        monthnumb = \"1\"\n    return is_leap_year and monthnumb == \"1\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        print(\"The month number is 2 and the number of days is 31.\")\n    elif monthnum2 == 3:\n        print(\"The month number is 3 and the number of days is 30.\")\n    elif monthnum2 == 4:\n        print(\"The month number is 4 and the number of days is 29.\")\n    elif monthnum2 == 5:\n        print(\"The month number is 5 and the number of days is 28.\")\n    elif monthnum2 == 6:\n        print(\"The month number is 6 and the number of days is 27.\")\n    elif monthnum2 == 7:\n        print(\"The month number is 7 and the number of days is 26.\")\n    elif monthnum2 == 8:\n        print(\"The month number is 8 and the number of days is 25.\")\n    elif monthnum2 == 9:\n        print(\"The month number is 9 and the number of days is 24.\")\n    elif monthnum2 == 10:\n        print(\"The month number is 10 and the number of days is 23.\")\n    elif monthnum2 == 11:\n        print(\"The month number is 11 and the number of days is 22.\")\n    elif monthnum2 == 12:\n        print(\"The month number is 12 and the number of days is 21.\")\n    else:\n        print(\"The month number is neither 1 nor 12.\")\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return\n    for string in range(len(stringlist)-1, -1, -1):\n        stringlist[string] = stringlist[string][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[n:n + len(stringlist) // 2] for n in range(0, len(stringlist), len(stringlist) // 2)]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    for i in range(len(stringlist)):\n        for j in range(i, -1, -1):\n            stringlist[j] = stringlist[j] + stringlist[j - 1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for i in range(len(stringlist)):\n        result.append(stringlist[i])\n    result.reverse()\n    return result\n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return []\n    elif len(stringlist) == 1:\n        return stringlist\n    else:\n        return stringlist[::-1]\n    \ndef swap_case(stringlist):\n    '''\n    Write a function to swap cases of a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return []\n    elif len(stringlist) == 1:\n        return stringlist[0].swapcase()\n    else:\n        return stringlist[0].swapcase() + stringlist[1].swapcase()\n    \ndef find_index(stringlist, sub_list):\n    '''\n    Write a function to find the position of the substring in a given list.\n    '''\n    if len(stringlist) == 0:\n        return None\n    elif len(stringlist) == 1:\n        if stringlist[0] == sub_list:\n            return 0\n        else:\n            return -1\n    else:\n        if stringlist[0] == sub_list:\n            return 0\n        elif stringlist[0] == sub_list[0] and stringlist[1] == sub_list[1]:\n            return 1\n        else:\n            return find_index(stringlist[1:], sub_list)\n    \ndef remove_duplicates(stringlist):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    if len(stringlist) == 0:\n        return []\n    elif len(stringlist) == 1:\n        return stringlist[0]\n    else:\n        start = 0\n        end = 0\n        key = stringlist[0]\n        while end < len(stringlist):\n            if stringlist[end] == key:\n                if end == len(stringlist)-1:\n                    stringlist.pop(end)\n                else:\n                    start = end+1\n            else:\n                end = end+1\n        return stringlist[start:end]\n    \ndef array_to_string(stringlist):\n    '''\n    Write a function to convert a list of integers into a string.\n    '''\n    if len(stringlist) == 0:\n        return []\n    elif len(stringlist) == 1:\n        return stringlist[0]\n    else:\n        return stringlist[0] + array_to_string(stringlist[1:])\n    \ndef count_values(stringlist):\n    '''\n    Write a function to count the occurrences of each unique value in a given list.\n    '''\n    if len(stringlist) == 0:\n        return {}\n    else:\n        counts = {}\n        for key in stringlist:\n            if key in counts:\n                counts[key] += 1\n            else:\n                counts[key] = 1\n        return counts\n    \ndef index_value(stringlist):\n    '''\n    Write a function to find the index of each unique value in a given list.\n    '''\n    if len(stringlist) == 0:\n        return []\n    else:\n        start = 0\n        end = 0\n        key = stringlist[0]\n        while end < len(stringlist):\n            if stringlist[end] == key:\n                if end == len(stringlist)-1:\n                    return [end+1]\n                else:\n                    start = end+1\n            else:\n                end = end+1\n        return [end]\n    \ndef merge_sorted_lists(lists):\n    '''\n    Write a function that merges two sorted lists into one.\n    '''\n    if len(lists) == 0:\n        return []\n    elif len(lists) == 1:\n        return lists\n    else:\n        return merge_sorted_lists(lists[1:]) + lists[0]\n    \ndef merge_sort(lists):\n    '''\n    Write a function that merges two sorted lists into one.\n    '''\n    if len(lists) == 0:\n        return []\n    elif len(lists) == 1:\n        return lists\n    else:\n        mid = len(lists)//2\n        left = merge_sort(lists[:mid])\n        right = merge_sort(lists[mid:])\n        return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Write a function that merges two sorted lists into one.\n    '''\n    result = []\n    if len(left) == 0:\n        return result\n    elif len(left) == 1:\n        return left\n    elif len(right) == 0:\n        return right\n    elif len(right) == 1:\n        return right\n    else:\n        for i in range(len(left)):\n            if left[i] <= right[i]:\n                result.append(left[i])\n            else:\n                result.append(right[i])\n        return result\n    \ndef replace_with_separate_list(list):\n    '''\n    Write a function that replaces every occurrence of each value in a list.\n    '''\n    if len(list) == 0:\n        return []\n    elif len(list) == 1:\n        return list\n    else:\n        new_list = []\n        for key in list:\n            if key in new_list:\n                new_list = []\n            else:\n                new_list.append(key)\n        return new_list\n    \ndef merge_sort_recursive(list):\n    '''\n    Write a function that merges two sorted lists into one.\n    '''\n    if len(list) == 0:\n        return []\n    elif len(list) == 1:\n        return list\n    else:\n        mid = len(list)//2\n        left = merge_sort_recursive(list[:mid])\n        right = merge_sort_recursive(list[mid:])\n        return merge(left, right)\n    \ndef insertion_sort(list):\n    '''\n    Write a function that sorts a list of numbers.\n    '''\n    if len(list) == 0:\n        return []\n    elif len(list) == 1:\n        return list\n    else:\n        for i in range(1, len(list)):\n            for j in range(i, 0, -1):\n                if list[j] < list[j-1]:\n                    list[j], list[j-1] = list[j-1], list[j]\n                else:\n                    break\n        return list\n    \ndef merge_sort_recursive(list):\n    '''\n    Write a function that merges two sorted lists into one.\n    '''\n    if len(list) == 0:\n        return []\n    elif len(list) == 1:\n        return list\n    else:\n        mid = len(list)//2\n        left = merge_sort_recursive(list[:mid])\n        right = merge_sort_recursive(list[mid:])\n        return merge(left, right)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string = []\n    for string in stringlist:\n        reverse_string.append(string[::-1])\n    return reverse_string\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_stringlist = []\n    for string in stringlist:\n        rev_stringlist.append(string[::-1])\n    return rev_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    revlist = []\n    for i in range(len(stringlist)):\n        revlist.append(stringlist[i][::-1])\n    return revlist\n    \n    \ndef test_function(input_list, output_list):\n    '''\n    Write a function that takes a list of strings \n    and returns a new list with all the reversed strings.\n    '''\n    revlist = reverse_string_list(input_list)\n    return [x + y for x,y in zip(input_list, revlist)]\n    \n    \n    \ndef test(input_list, output_list):\n    '''\n    Write a function that takes a list of strings and returns a new list\n    containing all the reversed strings.\n    '''\n    revlist = reverse_string_list(input_list)\n    return [x + y for x,y in zip(input_list, revlist)]\n    \n    \ndef string_compare(input_list, output_list):\n    '''\n    Write a function that takes a list of strings and returns a list of\n    reversed strings.\n    '''\n    revlist = reverse_string_list(input_list)\n    return [x + y for x,y in zip(input_list, revlist)]\n    \n    \n    \n    \ndef test_function(input_list, output_list):\n    '''\n    Write a function that takes a list of strings and returns a new list\n    containing all the reversed strings.\n    '''\n    revlist = reverse_string_list(input_list)\n    return [x + y for x,y in zip(input_list, revlist)]\n    \n    \n    \ndef test(input_list, output_list):\n    '''\n    Write a function that takes a list of strings and returns a list of\n    reversed strings.\n    '''\n    revlist = reverse_string_list(input_list)\n    return [x + y for x,y in zip(input_list, revlist)]\n    \n    \n    \ndef main():\n    print(\"Testing string reverse function\")\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['red','black', 'blue','red','black']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['blue','black','red','red','black']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['red','black', 'blue', 'black','red']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['black','blue','red','red','black']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['red','black', 'blue','red','black']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['red','black', 'blue', 'black','red']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['blue','black','red','red','black']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['red','black','red', 'black','blue']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['black','red','red', 'blue','black']))\n    print(test_function(['black', 'blue', 'black','red', 'black'], ['blue','red','red', 'black','black']))\n    \n    print(\"\\nTesting reverse string compare\")\n    print(string_compare(['black','blue','black','red','black'], ['blue','black','red','red','black']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','red','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','blue','red','black']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','black','black','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','red','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','blue','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','black','red','black']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','black','blue']))\n    \n    print(\"\\nTesting reverse string compare (2)\")\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','blue','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','blue','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','red','black','black']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','red','black','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','red','red','black']))\n    \n    print(\"\\nTesting reverse string compare (3)\")\n    print(string_compare(['black','blue','black','red','black'], ['red','black','black','red','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','blue','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','red','black','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','red','blue','red']))\n    \n    print(\"\\nTesting reverse string compare (4)\")\n    print(string_compare(['black','blue','black','red','black'], ['red','black','red','blue','black']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','red','blue','black']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','red','red','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','red','red','blue']))\n    \n    print(\"\\nTesting reverse string compare (5)\")\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','blue','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','black','blue','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','blue','blue','black']))\n    print(string_compare(['black','blue','black','red','black'], ['black','blue','blue','blue','red']))\n    \n    print(\"\\nTesting reverse string compare (6)\")\n    print(string_compare(['black','blue','black','red','black'], ['black','red','blue','red','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','red','red','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','blue','black','red']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','red','red','blue']))\n    \n    print(\"\\nTesting reverse string compare (7)\")\n    print(string_compare(['black','blue','black','red','black'], ['red','red','blue','black','blue']))\n    print(string_compare(['black','blue','black','red','black'], ['black','red','red','red','blue']))\n    print(string_compar"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst == []: \n        return 0\n    if len(lst) == 1: \n        return lst[0] \n    if len(lst) == 2: \n        return min(lst[0], lst[1]) \n    mid = len(lst) // 2\n    if lst[mid] > lst[mid + 1]: \n        return Find_Min(lst[mid + 1:]) \n    return Find_Min(lst[:mid]) \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # array\n    lst = [int(x) for x in lst]\n    \n    # returns the minimum length\n    return len(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    i = 0\n    while (i<len(lst)):\n        if(lst[i] < lst[i+1]):\n            break\n        i += 1\n    return lst[i:i+2]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_len = 0\n    for i in range(len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n            min_len = i + 1\n    return min_len \ndef PrintArray(lst): \n    '''\n    Write a python function to print the sorted array.\n    '''\n    for i in range(len(lst)): \n        print(lst[i], end=\" \")\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    for i in range(len(lst)):\n        if lst[i] < lst[i+1]:\n            min_len = i+1\n    return min_len\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        if lst[0] == lst[-1]:\n            return lst\n        else:\n            # This is a loop\n            for i in range(1, len(lst)):\n                if lst[i] < lst[i - 1]:\n                    return lst[i:]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = []\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n    min = lst[0]\n    for i in range(1,len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n    return min \n    \n    \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    if length == 0:\n        return -1\n    if length == 1:\n        return lst[0]\n    \n    max_length = 0\n    for i in range(0, length-1):\n        for j in range(i+1, length):\n            if lst[i] < lst[j]:\n                if lst[i] > max_length:\n                    max_length = lst[i]\n                elif lst[i] == max_length:\n                    return lst[i]\n    return max_length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0]\n    min_length_idx = 0\n    for idx in range(1,len(lst)):\n        if lst[idx] < min_length:\n            min_length = lst[idx]\n            min_length_idx = idx\n    return min_length_idx\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \nprint(rectangle_area(4,5))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"The area of the rectangle is: {}\".format(l*b))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l)\n    print(b)\n    print(\"Area of rectangle is {}\".format(l*b))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    \n    \n    \n    \ndef triangle_area(b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return b*b\n    \n    \n    \ndef main():\n    print(\"*** Welcome to the Area Calculator ***\")\n    print(\"\\nChoose the first option.\")\n    print(\"\\n1: Calculate the area of a rectangle.\")\n    print(\"2: Calculate the area of a triangle.\")\n    print(\"\\nExit: To quit.\")\n    print(\"\\nType the number of your choice: \")\n    while True:\n        try:\n            input_num = int(input())\n        except ValueError:\n            print(\"Invalid input\")\n            continue\n        else:\n            if input_num == 1:\n                print(\"The area of a rectangle is:\", rectangle_area(10,5))\n            elif input_num == 2:\n                print(\"The area of a triangle is:\", triangle_area(4))\n            elif input_num == 0:\n                print(\"Goodbye!\")\n                break\n            else:\n                print(\"Invalid input. Please try again.\")\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = \"\"\n    for x in str1:\n        if x.isupper():\n            res+=x.lower()\n    return res\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = \"\"\n    for x in str1:\n        if x.islower():\n            res+=x.lower()\n    return res\ndef remove_digits(str1):\n    '''\n    Write a function to remove all the digits from a given string.\n    '''\n    res = \"\"\n    for x in str1:\n        if x.isdigit():\n            res+=x\n    return res\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all the punctuation from a given string.\n    '''\n    res = \"\"\n    for x in str1:\n        if x.isalpha():\n            res+=x\n    return res\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all the special characters from a given string.\n    '''\n    res = \"\"\n    for x in str1:\n        if x in string.punctuation:\n            res+=x\n    return res\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove all the stopwords from a given string.\n    '''\n    res = \"\"\n    for x in str1.split():\n        res+=\" \"\n    return res\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all the digits from a given string.\n    '''\n    res = \"\"\n    for x in str1:\n        if x.isdigit():\n            res+=x\n    return res\ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    words = str1.split()\n    count = 0\n    for word in words:\n        count+=1\n    return count\ndef find_singular_words(str1):\n    '''\n    Write a function to find the singular words in a given string.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.istitle():\n            res+=word+\" \"\n    return res\ndef print_sentence(str1):\n    '''\n    Write a function to print the sentence in a given string.\n    '''\n    words = str1.split()\n    for i in range(0,len(words)):\n        if words[i].isupper():\n            print(words[i],\"  \",end=\"\")\n        else:\n            print(words[i],\"  \",end=\" \")\n    print()\ndef remove_punctuation_sentence(str1):\n    '''\n    Write a function to remove all the punctuation from a given sentence.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.isalpha() or word.isspace():\n            res+=\" \"\n        else:\n            res+=word\n    return res\ndef remove_non_alphabetical_words(str1):\n    '''\n    Write a function to remove all the non-alphabetical words from a given sentence.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.isalpha() or word.isspace():\n            res+=word\n    return res\ndef remove_punctuation_non_alphabetical_words(str1):\n    '''\n    Write a function to remove all the non-alphabetical words from a given sentence.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.isalpha() or word.isspace():\n            res+=word\n    return res\ndef remove_punctuation_number(str1):\n    '''\n    Write a function to remove all the punctuation from a given sentence.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.isdigit():\n            res+=word\n    return res\ndef remove_punctuation_space(str1):\n    '''\n    Write a function to remove all the punctuation from a given sentence.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.isspace():\n            res+=word\n    return res\ndef remove_punctuation_stopword(str1):\n    '''\n    Write a function to remove all the punctuation from a given sentence.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.isalpha() or word.isspace():\n            res+=word\n    return res\ndef remove_stopword_punctuation(str1):\n    '''\n    Write a function to remove all the punctuation from a given sentence.\n    '''\n    words = str1.split()\n    res = \"\"\n    for word in words:\n        if word.isalpha() or word.isspace():\n            if word.lower().endswith(\",\"):\n                res+=\" \"\n            elif word.lower().endswith(\".\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!\"):\n                res+=\" \"\n            elif word.lower().endswith(\"?\"):\n                res+=\" \"\n            elif word.lower().endswith(\":\"):\n                res+=\" \"\n            elif word.lower().endswith(\";\") or word.lower().endswith(\":\"):\n                res+=\" \"\n            elif word.lower().endswith(\";?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";!\"):\n                res+=\" \"\n            elif word.lower().endswith(\";!\"):\n                res+=\" \"\n            elif word.lower().endswith(\";\"):\n                res+=\" \"\n            elif word.lower().endswith(\";\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!?\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!\"):\n                res+=\" \"\n            elif word.lower().endswith(\"?\"):\n                res+=\" \"\n            elif word.lower().endswith(\":\"):\n                res+=\" \"\n            elif word.lower().endswith(\";?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";!\"):\n                res+=\" \"\n            elif word.lower().endswith(\";!\"):\n                res+=\" \"\n            elif word.lower().endswith(\";\"):\n                res+=\" \"\n            elif word.lower().endswith(\";\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!\"):\n                res+=\" \"\n            elif word.lower().endswith(\"?\"):\n                res+=\" \"\n            elif word.lower().endswith(\"?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";\"):\n                res+=\" \"\n            elif word.lower().endswith(\";?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!\"):\n                res+=\" \"\n            elif word.lower().endswith(\"!\"):\n                res+=\" \"\n            elif word.lower().endswith(\"?\"):\n                res+=\" \"\n            elif word.lower().endswith(\":\"):\n                res+=\" \"\n            elif word.lower().endswith(\";?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";?\"):\n                res+=\" \"\n            elif word.lower().endswith(\";!\"):\n                res+=\" \"\n            elif word.lower().endswit"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    try:\n        str1 = str1.lower()\n        str1 = re.sub(r'(^|\\s)([a-z])(\\s)([A-Z])', r'\\1 \\2 \\3', str1)\n        str1 = re.sub(r'\\s([a-z])\\s', r'\\1', str1)\n        str1 = re.sub(r'([A-Z])\\s+', r'\\1', str1)\n        str1 = re.sub(r'([a-z])\\s+', r'\\1', str1)\n        str1 = re.sub(r'([A-Z])\\s+', r'\\1', str1)\n        return str1\n    except:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation marks from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef is_all_caps(str1):\n    '''\n    Write a function to check whether the string contains all uppercase and lowercase letters.\n    '''\n    return str1.isupper() and str1.islower()\ndef is_all_digits(str1):\n    '''\n    Write a function to check whether the string contains all digits.\n    '''\n    return str1.isdigit()\ndef is_all_digits_only(str1):\n    '''\n    Write a function to check whether the string contains all digits.\n    '''\n    return str1.isdigit() and str1.isdigit()\ndef is_all_digits_only_and_numbers(str1):\n    '''\n    Write a function to check whether the string contains all digits and numbers.\n    '''\n    return str1.isdigit() and str1.isdigit() and is_all_digits(str1)\ndef is_all_digits_only_and_numbers_only(str1):\n    '''\n    Write a function to check whether the string contains all digits and numbers.\n    '''\n    return str1.isdigit() and str1.isdigit() and is_all_digits(str1) and not is_all_digits_only(str1)\ndef is_all_caps_and_numbers(str1):\n    '''\n    Write a function to check whether the string contains all caps and numbers.\n    '''\n    return str1.isupper() and str1.islower() and is_all_caps(str1)\ndef is_capitalized(str1):\n    '''\n    Write a function to check whether the string contains capital letters.\n    '''\n    return str1.istitle() and str1.isalpha()\ndef is_alnum(str1):\n    '''\n    Write a function to check whether the string contains alphanumeric characters.\n    '''\n    return str1.isalnum() and str1.isalnum()\ndef is_small_caps_and_numbers(str1):\n    '''\n    Write a function to check whether the string contains small caps and numbers.\n    '''\n    return str1.isupper() and str1.islower() and is_all_caps(str1) and not is_all_caps_and_numbers(str1)\ndef is_all_digits_only_and_numbers_only(str1):\n    '''\n    Write a function to check whether the string contains all digits and numbers.\n    '''\n    return str1.isdigit() and str1.isdigit() and is_all_digits_only(str1) and not is_all_digits_only_and_numbers(str1)\ndef is_valid_email(str1):\n    '''\n    Write a function to check whether the string contains a valid email.\n    '''\n    return bool(re.search(r'^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9-]+)\\.{0,1}[a-zA-Z]{2,3}$', str1))\ndef is_valid_mobile_number(str1):\n    '''\n    Write a function to check whether the string contains a valid mobile number.\n    '''\n    return bool(re.search(r'^([0-9]{9,15})$', str1))\ndef is_valid_phone_number(str1):\n    '''\n    Write a function to check whether the string contains a valid phone number.\n    '''\n    return bool(re.search(r'^[0-9]{1,3}\\s[0-9]{1,3}\\s[0-9]{1,3}\\s[0-9]{2,3}$', str1))\ndef is_valid_domestic_number(str1):\n    '''\n    Write a function to check whether the string contains a valid domestic number.\n    '''\n    return bool(re.search(r'^[0-9]{1,3}\\s[0-9]{1,3}\\s[0-9]{1,3}\\s[0-9]{1,3}$', str1))\ndef remove_invalid_char(str1):\n    '''\n    Write a function to remove invalid characters from a given string.\n    '''\n    return str1.replace('-', '')\ndef remove_invalid_char_without_digit(str1):\n    '''\n    Write a function to remove invalid characters from a given string.\n    '''\n    return str1.replace('-', '').replace(' ','')\ndef remove_invalid_char_with_digit(str1):\n    '''\n    Write a function to remove invalid characters from a given string.\n    '''\n    return str1.replace('-', '').replace('.', '')\ndef to_upper(str1):\n    '''\n    Write a function to convert all uppercase characters to all uppercase characters.\n    '''\n    return str1.upper()\ndef to_lower(str1):\n    '''\n    Write a function to convert all lowercase letters to all lowercase letters.\n    '''\n    return str1.lower()\ndef split_all_to_words(str1):\n    '''\n    Write a function to split the given string into words.\n    '''\n    return str1.split(' ')\ndef to_num(str1):\n    '''\n    Write a function to convert all numeric characters to all numeric characters.\n    '''\n    return str1.replace('.', '').replace(',', '').replace('-', '').replace(' ', '')\ndef to_email(str1):\n    '''\n    Write a function to convert all email characters to all email characters.\n    '''\n    return str1.replace('.', '').replace(',', '').replace('-', '').replace(' ', '').replace('@', '')\ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    return str1.replace('0', '')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation marks from a given string.\n    '''\n    return str1.replace(' ', '').replace('.', '').replace(',', '').replace('-', '').replace('\\'', '').replace('\\n', '')\ndef to_num_with_digit(str1):\n    '''\n    Write a function to convert all numeric characters to numbers with one digit.\n    '''\n    return str1.replace('0', '').replace(',', '').replace('.', '').replace('-', '').replace(' ', '').replace('.', '')\ndef to_num_without_digit(str1):\n    '''\n    Write a function to convert all numeric characters to numbers without one digit.\n    '''\n    return str1.replace('0', '').replace(',', '').replace('.', '').replace('-', '').replace(' ', '').replace('.', '')\ndef remove_numbers_without_digit(str1):\n    '''\n    Write a function to remove all numbers with the ditgers from a given string without one digit.\n    '''\n    return str1.replace('0', '').replace(',', '').replace('.', '').replace('-', '').replace(' ', '').replace('.', '')\ndef to_capital(str1):\n    '''\n    Write a function to convert all uppercase characters to all uppercase characters.\n    '''\n    return str1.upper()\ndef to_lower_capital(str1):\n    '''\n    Write a function to convert all lowercase characters to all lowercase characters.\n    '''\n    return str1.lower()\ndef to_all_caps(str1):\n    '''\n    Write a function to convert all all caps to all caps.\n    '''\n    return str1.capitalize()\ndef to_all_lower_cap(str1):\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub('[A-Z]', '', str1)\n    str3 = re.sub('[a-z]', '', str2)\n    str4 = re.sub('\\W+', '', str3)\n    return str4\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = str1.replace(\" \",\"\")\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace('u',\"\")\n    str1 = str1.replace(\"u\",\"\")\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(.)' + re.escape(r'\\1') + r'(.)', r'\\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove any punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_special_char(str1):\n    '''\n    Write a function to remove any special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\ndef remove_hashtag(str1):\n    '''\n    Write a function to remove any hashtag from a given string.\n    '''\n    return re.sub(r'#\\S+', '', str1)\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove any whitespace from a given string.\n    '''\n    return re.sub(r'\\s+', '', str1)\ndef remove_dot(str1):\n    '''\n    Write a function to remove any dot from a given string.\n    '''\n    return re.sub(r'\\.+', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove any punctuation from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\ndef remove_special_char(str1):\n    '''\n    Write a function to remove any special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\ndef remove_hashtag(str1):\n    '''\n    Write a function to remove any hashtag from a given string.\n    '''\n    return re.sub(r'#\\S+', '', str1)\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove any whitespace from a given string.\n    '''\n    return re.sub(r'\\s+', '', str1)\ndef remove_dot(str1):\n    '''\n    Write a function to remove any dot from a given string.\n    '''\n    return re.sub(r'\\.+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    a = re.sub('[A-Z]', '', str1)\n    return a\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    newlst = []\n    for i in lst:\n        newlst.append(i[0])\n    return newlst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    print(lst[0])\n    return lst[0]\n    \nlst = [1, 2, 3, 4, 5]\nExtract(lst)"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    my_list = []\n    for i in range(len(lst)):\n        my_list.append(lst[i][0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst)>1:\n        return lst[0]\n    else:\n        return None\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    output = lst[0][0]\n    for i in range(len(lst[0])):\n        output = output + lst[0][i][0]\n    return output\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # returns 1 element\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for l in lst: \n        print(l[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        print(lst[i][0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    elem=lst[0]\n    for i in range(1,len(lst)):\n        elem=lst[i]\n        if(type(elem)==list):\n            break\n        else:\n            pass\n    print(elem)\n    return elem\n    \n    \ndef main():\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst=[1,3,5,7,9]\n    print(Extract(lst))\n    print(Extract(lst[:2]))\n    print(Extract(lst[2:]))\n    print(Extract(lst[1:4]))\n    print(Extract(lst[3:6]))\n    \n    print(\"\")\n    print(Extract(lst))\n    \n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize the output list\n    out = []\n    # loop through the sublist\n    for i in range(len(lst)):\n        # check if i is first or not\n        if i == 0: \n            out.append(lst[i]) \n        else:\n            # grab the next element\n            out.append(lst[i][0])\n    # return the list\n    return out\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str = str.upper()\n    return str\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return str.lower()\n    \ndef center_ctr(str):\n    '''\n    Write a python function to count the center case characters in a given string.\n    '''\n    return str.center()\n    \ndef left_ctr(str):\n    '''\n    Write a python function to count the left case characters in a given string.\n    '''\n    return str.ljust(len(str))\n    \ndef right_ctr(str):\n    '''\n    Write a python function to count the right case characters in a given string.\n    '''\n    return str.rjust(len(str))\n    \ndef replace_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef sub_ctr(str,sub):\n    '''\n    Write a python function to count the substring characters in a given string.\n    '''\n    return str.count(sub)\n    \ndef rev_ctr(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return str[::-1]\n    \ndef join_ctr(str):\n    '''\n    Write a python function to join a given string into a given string.\n    '''\n    return str.join()\n    \ndef split_ctr(str,sep):\n    '''\n    Write a python function to split a given string into a given string.\n    '''\n    return str.split(sep)\n    \ndef split_ctr_f(str,sep):\n    '''\n    Write a python function to split a given string into a given string.\n    '''\n    return str.split(sep)\n    \ndef capitalize_ctr(str):\n    '''\n    Write a python function to capitalize a given string.\n    '''\n    return str.capitalize()\n    \ndef capitalize_ctr_f(str):\n    '''\n    Write a python function to capitalize a given string.\n    '''\n    return str.capitalize()\n    \ndef count_upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('A')\n    \ndef count_lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return str.lower().count('a')\n    \ndef count_center_ctr(str):\n    '''\n    Write a python function to count the center case characters in a given string.\n    '''\n    return str.center()\n    \ndef count_left_ctr(str):\n    '''\n    Write a python function to count the left case characters in a given string.\n    '''\n    return str.ljust(len(str))\n    \ndef count_right_ctr(str):\n    '''\n    Write a python function to count the right case characters in a given string.\n    '''\n    return str.rjust(len(str))\n    \ndef count_upper_ctr_f(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('A')\n    \ndef count_lower_ctr_f(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return str.lower().count('a')\n    \ndef count_center_ctr_f(str):\n    '''\n    Write a python function to count the center case characters in a given string.\n    '''\n    return str.center()\n    \ndef count_left_ctr_f(str):\n    '''\n    Write a python function to count the left case characters in a given string.\n    '''\n    return str.ljust(len(str))\n    \ndef count_right_ctr_f(str):\n    '''\n    Write a python function to count the right case characters in a given string.\n    '''\n    return str.rjust(len(str))\n    \ndef count_upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('A')\n    \ndef count_lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    return str.lower().count('a')\n    \ndef count_center_ctr(str):\n    '''\n    Write a python function to count the center case characters in a given string.\n    '''\n    return str.center()\n    \ndef count_left_ctr(str):\n    '''\n    Write a python function to count the left case characters in a given string.\n    '''\n    return str.ljust(len(str))\n    \ndef count_right_ctr(str):\n    '''\n    Write a python function to count the right case characters in a given string.\n    '''\n    return str.rjust(len(str))\n    \ndef replace_upper_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_lower_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_center_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_left_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.ljust(len(str))\n    \ndef replace_right_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.rjust(len(str))\n    \ndef replace_upper_ctr_f(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_lower_ctr_f(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_center_ctr_f(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_left_ctr_f(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.ljust(len(str))\n    \ndef replace_right_ctr_f(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.rjust(len(str))\n    \ndef replace_upper_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_lower_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_center_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.replace(old,new)\n    \ndef replace_left_ctr(str,old,new):\n    '''\n    Write a python function to replace characters in a given string with a given value.\n    '''\n    return str.ljust(len(st"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.upper() == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # your code goes here\n    i = 0\n    while i < len(str):\n        if str[i].isupper():\n            i+=1\n        else:\n            i+=1\n    return i\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\nstr = input('Enter the string: ')\nprint(upper_ctr(str)"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n    # your code goes here\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if i==0:\n            res.append([list1[i]])\n        else:\n            for j in combinations(list1[i:], i):\n                res.append([list1[i]]+j)\n    return res\ndef combinations(list2,index):\n    '''\n    Write a function to return all possible combinations of the elements of a given list.\n    '''\n    res = []\n    if index==0:\n        res.append([list2[index]])\n    else:\n        for i in combinations(list2[index:],index-1):\n            res.append([list2[index]]+i)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) > 1:\n        res = []\n        for x in range(0,len(list1)):\n            for y in combinations_list(list1[:x] + list1[x+1:]):\n                res.append(x+y)\n        return res\n    return [list1[0]]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    list_in = []\n    if len(list1) > 0:\n        for i in range(len(list1)):\n            list_in.append(list1[i])\n        for i in range(len(list1)):\n            for j in combinations_list(list_in):\n                result.append(list1[i] + j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return list1\n    \n    if len(list1) == 2:\n        return [list(list1)]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    from collections import Counter\n    n=len(list1)\n    combination_list=list(combinations(list1,n))\n    return combination_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = list(itertools.combinations(list1,2))\n    return combinations_list\n    \nprint(combinations_list(['a','b']));\nprint(combinations_list(['a','b','c','d','e']))\nprint(combinations_list(['a','b','c','d','e']))\nprint(combinations_list(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'])"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 0:\n        return []\n    \n    # get a list of the possible combinations\n    comb_list = []\n    \n    # for each element in list1, get a list of possible combination with it\n    for i in range(0, len(list1)):\n        comb_list.extend(combinations(list1, i + 1))\n    \n    # return the list of all possible combinations\n    return comb_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #first we create a list with all elements\n    #then we add it to the list\n    #then we add it to the list\n    #then we return it\n    list2=list(list1)\n    #now we can remove the repeated elements\n    #but now the reason is that we only need to do this once\n    #in case of duplicate items\n    list2.remove(list1[0])\n    #we only want unique values\n    list2.remove(list1[0])\n    #now we create a list with all combinations\n    list3=[]\n    for i in list2:\n        for j in combinations(list2,i):\n            list3.append(j)\n    return(list3)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            result.append([list1[i],list1[j]])\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    res = []\n    for i in range(len(arr)):\n        res.append(arr[i])\n        for j in range(i, len(arr)):\n            temp = res[j]\n            if j - i + 1 > 1:\n                temp *= arr[j - 1]\n            res[j] = temp\n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    m = len(arr)\n    if m == 0:\n        return 0\n    else:\n        i = 1\n        max_sum = arr[0]\n        while i < m:\n            max_sum = max(arr[i], max_sum * arr[i])\n            i += 1\n        return max_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    ans = float('-inf')\n    max_sub_sum = arr[0]\n    for i in range(1, len(arr)):\n        sub_sum = arr[i]\n        for j in range(i):\n            sub_sum = sub_sum + arr[j]\n            if sub_sum > max_sub_sum:\n                max_sub_sum = sub_sum\n        max_sub_sum = max(max_sub_sum, arr[i])\n    \n    return max_sub_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Gives the max product of all subarrays of the given array, recursively\n    # recursive.\n    def max_subarray_product_recursive(arr, product, start, end):\n        if end == len(arr):\n            return product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr == []:\n        return []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_len = 0\n    prod = 1\n    \n    for i in range(len(arr)):\n        prod = prod * arr[i]\n        if prod > max_len:\n            max_len = prod\n    \n    return max_len\n    \narr = [1, 2, 3, 4, 5]\nprint(max_subarray_product(arr))\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod=arr[0]\n    current_max=arr[0]\n    for i in range(1,len(arr)):\n        current_max=max(current_max*arr[i],arr[i])\n        max_prod=max(max_prod,current_max)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    product = 1\n    left = 0\n    right = 0\n    max_product = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    curr_max = 0\n    left = 0\n    right = 0\n    max_prod = arr[0]\n    for right in range(len(arr)):\n        prod = arr[right]\n        curr_max = max(max_prod, prod)\n        while curr_max < prod:\n            curr_max *= arr[left]\n            left += 1\n        max_prod *= prod\n    return max_prod\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if len(i)!= n:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict:\n        if dict[value]!= value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(x in dict for x in n)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if len(dict[i])!= n:\n            return False\n        else:\n            return True\n    \n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= key:\n            return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict.values():\n        if type(x) == list:\n            for z in x:\n                if z!= n:\n                    return False\n        else:\n            if x!= n:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict[key]==value for key,value in dict.items()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if k not in n.keys():\n            n[k] = []\n        if isinstance(v, dict):\n            check_value(v, n)\n        else:\n            n[k].append(v)\n    return n\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Test case:\n    # d = {'apple':1, 'banana':2, 'cherry':3}\n    # drop_empty(d) returns\n    # {'banana':3, 'cherry':2}\n    # The function should return an empty dictionary\n    # If the dictionary is empty return None\n    # return None\n    if not dict1:\n        return None\n    else:\n        dict1 = {key:value for key, value in dict1.items() if value == 0}\n        return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # TODO: YOUR CODE HERE\n    return\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1:\n        if(type(dict1[k]) == dict):\n            drop_empty(dict1[k])\n        elif(dict1[k] == []):\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if len(dict1[key]) > 0:\n            del dict1[key]\n            return True\n    return False\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1.keys():\n        if len(dict1[item]) == 0:\n            del dict1[item]\n            print(item, \"has been deleted from the list\")\n        \n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = dict1.copy()\n    for k,v in new_dict.items():\n        if v==[] or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v=={} or v="
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return\n    for k,v in dict1.items():\n        if v == \"\":\n            del dict1[k]\n            return\n    for k,v in dict1.items():\n        dict1[k] = \"\"\n        print(\"deleted: \",k)\n    return\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n    \n    \n    \n    \ndef print_dict(dict1):\n    '''\n    Write a function to print the items of a given dictionary.\n    '''\n    return dict1\n    \n    \n    \n    \n    \ndef add_item(dict1,item):\n    '''\n    Write a function to add an item to a dictionary.\n    '''\n    return dict1\n    \n    \n    \n    \n    \ndef get_item(dict1,item):\n    '''\n    Write a function to get an item from a dictionary.\n    '''\n    return dict1\n    \n    \n    \n    \n    \n    \n    \ndef set_item(dict1,item,new_value):\n    '''\n    Write a function to update an item in a dictionary.\n    '''\n    return dict1\n    \n    \n    \n    \n    \ndef delete_item(dict1,item):\n    '''\n    Write a function to delete an item from a dictionary.\n    '''\n    return dict1\n    \n    \n    \n    \n    \ndef get_dict(dict1):\n    '''\n    Write a function to return all the items in a dictionary.\n    '''\n    return dict1\n    \n    \n    \n    \n    \ndef get_list(dict1):\n    '''\n    Write a function to return all the items in a list.\n    '''\n    return dict1\n    \n    \n    \n    \n    \n    \ndef main():\n    '''\n    Write a function to get all the items in a dictionary.\n    '''\n    dict1 = {'a':1,'b':2,'c':3,'d':4}\n    print(get_item(dict1,'a'))\n    print(get_item(dict1,'b'))\n    print(get_item(dict1,'c'))\n    print(get_item(dict1,'d'))\n    print(get_item(dict1,'e'))\n    print(get_item(dict1,'f'))\n    print(get_item(dict1,'g'))\n    print(get_item(dict1,'h'))\n    print(get_item(dict1,'i'))\n    print(get_item(dict1,'j'))\n    print(get_item(dict1,'k'))\n    print(get_item(dict1,'l'))\n    print(get_item(dict1,'m'))\n    print(get_item(dict1,'n'))\n    print(get_item(dict1,'o'))\n    print(get_item(dict1,'p'))\n    print(get_item(dict1,'q'))\n    print(get_item(dict1,'r'))\n    print(get_item(dict1,'s'))\n    print(get_item(dict1,'t'))\n    print(get_item(dict1,'u'))\n    print(get_item(dict1,'v'))\n    print(get_item(dict1,'w'))\n    print(get_item(dict1,'x'))\n    print(get_item(dict1,'y'))\n    print(get_item(dict1,'z'))\n    print(get_item(dict1,'A'))\n    print(get_item(dict1,'B'))\n    print(get_item(dict1,'C'))\n    print(get_item(dict1,'D'))\n    print(get_item(dict1,'E'))\n    print(get_item(dict1,'F'))\n    print(get_item(dict1,'G'))\n    print(get_item(dict1,'H'))\n    print(get_item(dict1,'I'))\n    print(get_item(dict1,'J'))\n    print(get_item(dict1,'K'))\n    print(get_item(dict1,'L'))\n    print(get_item(dict1,'M'))\n    print(get_item(dict1,'N'))\n    print(get_item(dict1,'O'))\n    print(get_item(dict1,'P'))\n    print(get_item(dict1,'Q'))\n    print(get_item(dict1,'R'))\n    print(get_item(dict1,'S'))\n    print(get_item(dict1,'T'))\n    print(get_item(dict1,'U'))\n    print(get_item(dict1,'V'))\n    print(get_item(dict1,'W'))\n    print(get_item(dict1,'X'))\n    print(get_item(dict1,'Y'))\n    print(get_item(dict1,'Z'))\n    print(get_item(dict1,'A'))\n    print(get_item(dict1,'B'))\n    print(get_item(dict1,'C'))\n    print(get_item(dict1,'D'))\n    print(get_item(dict1,'E'))\n    print(get_item(dict1,'F'))\n    print(get_item(dict1,'G'))\n    print(get_item(dict1,'H'))\n    print(get_item(dict1,'I'))\n    print(get_item(dict1,'J'))\n    print(get_item(dict1,'K'))\n    print(get_item(dict1,'L'))\n    print(get_item(dict1,'M'))\n    print(get_item(dict1,'N'))\n    print(get_item(dict1,'O'))\n    print(get_item(dict1,'P'))\n    print(get_item(dict1,'Q'))\n    print(get_item(dict1,'R'))\n    print(get_item(dict1,'S'))\n    print(get_item(dict1,'T'))\n    print(get_item(dict1,'U'))\n    print(get_item(dict1,'V'))\n    print(get_item(dict1,'W'))\n    print(get_item(dict1,'X'))\n    print(get_item(dict1,'Y'))\n    print(get_item(dict1,'Z'))\n    print(get_item(dict1,'A'))\n    print(get_item(dict1,'B'))\n    print(get_item(dict1,'C'))\n    print(get_item(dict1,'D'))\n    print(get_item(dict1,'E'))\n    print(get_item(dict1,'F'))\n    print(get_item(dict1,'G'))\n    print(get_item(dict1,'H'))\n    print(get_item(dict1,'I'))\n    print(get_item(dict1,'J'))\n    print(get_item(dict1,'K'))\n    print(get_item(dict1,'L'))\n    print(get_item(dict1,'M'))\n    print(get_item(dict1,'N'))\n    print(get_item(dict1,'O'))\n    print(get_item(dict1,'P'))\n    print(get_item(dict1,'Q'))\n    print(get_item(dict1,'R'))\n    print(get_item(dict1,'S'))\n    print(get_item(dict1,'T'))\n    print(get_item(dict1,'U'))\n    print(get_item(dict1,'V'))\n    print(get_item(dict1,'W'))\n    print(get_item(dict1,'X'))\n    print(get_item(dict1,'Y'))\n    print(get_item(dict1,'Z'))\n    print(get_item(dict1,'A'))\n    print(get_item(dict1,'B'))\n    print(get_item(dict1,'C'))\n    print(get_item(dict1,'D'))\n    print(get_item(dict1,'E'))\n    print(get_item(dict1,'F'))\n    print(get_item(dict1,'G'))\n    print(get_item(dict1,'H'))\n    print(get_item(dict1,'I'))\n    print(get_item(dict1,'J'))\n    print(get_item(dict1,'K'))\n    print(get_item(dict"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if dict1[i]=='':\n            del dict1[i]\n            new_dict[i] = new_dict.get(i, 0)\n            new_dict[i]+=1\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    del dict1['1']\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #first we need to find the length of the array in which the array starts\n    #then we need to see how many values from the starting array start at the end of the array\n    #if there are no values from the starting array, return the value of the array itself\n    #if there are, return the first element\n    #recursion\n    #time = O(n)\n    #space = O(1)\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    length = len(arr)\n    left = 0\n    right = 0\n    while right < length:\n        if arr[left] < arr[right]:\n            left += 1\n        elif arr[left] > arr[right]:\n            right += 1\n        else:\n            left += arr[left]\n            right += arr[right]\n            \n    return arr[left]*arr[right]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i - 1])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_product = 1\n    prod = 1\n    for i in range(len(arr)-1):\n        prod = prod * arr[i]\n        if prod > max_product:\n            max_product = prod\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product=float('-inf')\n    for i in range(0,len(arr)-1):\n        for j in range(i,len(arr)):\n            temp=arr[i]+arr[j]\n            if temp>max_product:\n                max_product=temp\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans = max(ans, arr[i]*arr[i+1])\n    return ans\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return\n    \n    arr.sort()\n    temp = arr[0]\n    max_product = 1\n    for i in range(1, len(arr)):\n        temp = arr[i] * temp\n        max_product = max(max_product, temp)\n        \n    return max_product\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    m = arr[0]\n    for n in arr[1:]:\n        m = max(m*n, m)\n    return m\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ((test_tup[0]+test_tup[1], test_tup[1]+test_tup[0]), (test_tup[0], test_tup[1]+test_tup[0]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = []\n    for i in range(len(test_tup)-1):\n        for j in range(i+1, len(test_tup)):\n            a.append(test_tup[i]+test_tup[j])\n    return a\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    c = test_tup[2]\n    return a + b + c\n    \n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(\"Working on adding pairs of the elements...\")\n    # No need to use math functions so no need to use built-ins\n    # For example, a) = b + c\n    # b) = a + c\n    # c) = a + b\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)!= 2:\n        raise ValueError('test_tup must be 2d tuple')\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)!= 2:\n        raise ValueError(\"Pairwise tests expect a tuple of two elements\")\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x = test_tup[0]\n    y = test_tup[1]\n    test_list = [x,y]\n    test_list = sorted(test_list)\n    test_list = list(dict.fromkeys(test_list))\n    test_list = sorted(test_list)\n    return test_list\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sorted(list(set(test_tup[0] + test_tup[1]))))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod = n\n    for i in range(len(arr)):\n        mod = mod * arr[i] % n\n    return mod\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # x = n % 10\n    # return str(x) + str(find_remainder(arr, x))\n    # This does not work\n    # for i in range(len(arr)):\n    #     arr[i] = arr[i] * (n//10)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(len(arr)):\n        arr[i] *= (n//arr[i])\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(n-1):\n        res = res * arr[i]\n    return res % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    remainder = 1\n    for i in range(n):\n        remainder *= arr[i]\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr.sort()\n    for i in range(n-1):\n        for j in range(len(arr)-1):\n            if arr[j]*arr[j+1]<=n:\n                break\n        else:\n            return arr[0]\n    return arr[-1]\n    \ndef main():\n    print(\"Enter the array of numbers to be multiplied\")\n    arr = [int(i) for i in input().split()]\n    print(\"Array of numbers to be multiplied is\")\n    print(arr)\n    print(\"Number to multiply it by\")\n    n = int(input())\n    print(find_remainder(arr, n))\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    temp = 1\n    for x in range(n-1, -1, -1): \n        temp *= arr[x] \n    return temp\n    \n    \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n-1, -1, -1):\n        result = result * arr[i] % n\n    return result\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while(i<len(l)):\n        if l[i] %2!= 0:\n            print(i)\n        i += 1\n    print(l)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #make a list to store the sequence numbers\n    numbers = []\n    #iterate through each element in the list and append it to a list\n    for number in l:\n        numbers.append(number)\n    #find the length of the list\n    len_l = len(numbers)\n    #if the length of list is greater than 1, then we can assume that the list is continuous\n    if len_l >= 2:\n        #set the first and last elements of the list to the first and last\n        first = numbers[0]\n        last = numbers[-1]\n        #if the first number of the list is greater than the last number of the list, then we must be an odd number\n        if first > last:\n            print('The list is not continuous')\n        #if the first number is less than the last number, then we can assume that the list is not continuous\n        elif first < last:\n            print('The list is not continuous')\n        else:\n            #if we have a continuous list, print the list\n            print('The list contains consecutive numbers')\n    #if the list is continuous, print the list\n    else:\n        print('The list contains consecutive numbers')\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    num = []\n    for n in l:\n        if n%2 == 0:\n            num.append(n)\n    \n    if len(num) == 0:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize the list\n    numbers = []\n    # Iterate through the given list and append the number to the list\n    for i in l:\n        numbers.append(i)\n    # Check if the list is consecutive\n    if numbers.count(numbers[0]) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    list_to_check = []\n    for num in l:\n        list_to_check.append(num)\n    \n    if len(list_to_check) % 2!= 0:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i]!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 1:\n        return False\n    for i in range(1,len(l)):\n        if l[i-1]==l[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l: \n        if i % 2 == 0: \n            print(i)\n            \n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # using the built-in python function\n    l.sort()\n    if len(l) == 1:\n        return True\n    elif l[1] - l[0] == 1:\n        return True\n    else:\n        return False\n    \n    # using the 'for' loop\n    # a loop that iterates through the list to find whether it is consecutive\n    # if it is there, a list of the consecutive numbers is returned.\n    # if it is not, then the program does not return the answer\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in l: \n        if (l.count(i) == 1): \n            return True\n    return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a new empty dictionary\n    tuple_list = {}\n    # iterate over both given lists\n    for tup in test_list1:\n        if tup in test_list2:\n            tuple_list[tup] = test_list2.index(tup)\n    return tuple_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    assert len(test_list1) == len(test_list2), 'The lists must have same size'\n    assert len(test_list1) > 0, 'The lists must have at least one element'\n    assert all([x in test_list1 for x in test_list2]), 'All of the elements in the list must be in the tuples'\n    result_list = []\n    for idx in range(len(test_list1)):\n        if test_list1[idx] in test_list2:\n            result_list.append(test_list1[idx])\n    return result_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('the given lists must be the same length')\n    result = ()\n    for index, i in enumerate(test_list1):\n        if i in test_list2:\n            result = result + (i,)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = ()\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                intersect = intersect + tup1\n    return intersect\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tup1 = tuple(test_list1)\n    tup2 = tuple(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.intersection(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_symmetric_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple symmetric difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.symmetric_difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_concatination(test_list1, test_list2):\n    '''\n    Write a function to find the tuple concatenation of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.union(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.intersection(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_symmetric_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple symmetric difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.symmetric_difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_concatination(test_list1, test_list2):\n    '''\n    Write a function to find the tuple concatenation of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.union(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.intersection(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_symmetric_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple symmetric difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.symmetric_difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_concatination(test_list1, test_list2):\n    '''\n    Write a function to find the tuple concatenation of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.union(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.intersection(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_symmetric_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple symmetric difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.symmetric_difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_concatination(test_list1, test_list2):\n    '''\n    Write a function to find the tuple concatenation of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.union(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.intersection(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_symmetric_difference(test_list1, test_list2):\n    '''\n    Write a function to find the tuple symmetric difference of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.symmetric_difference(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_concatination(test_list1, test_list2):\n    '''\n    Write a function to find the tuple concatenation of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tuple_list.union(set(test_list2))\n    return tuple(tuple_list)\n    \n    \ndef tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_list = set(test_list1)\n    tuple_list = tupl"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # init\n    intersect_list = []\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                pass\n            else:\n                if test_list1[i] < test_list2[j]:\n                    test_list1[i], test_list2[j] = test_list2[j], test_list1[i]\n                else:\n                    test_list1[i], test_list2[i] = test_list1[i], test_list2[i]\n    return test_list1\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1[0] == test_list2[0]:\n        return test_list1[0]\n    elif test_list1[-1] == test_list2[-1]:\n        return test_list1[-1]\n    else:\n        return tuple(sorted(list(set(test_list1) & set(test_list2))))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n    \ndef test():\n    str=\"abc\"\n    ch=input(\"Enter a character: \")\n    if ch in str:\n        print(\"Match Found\")\n    else:\n        print(\"Match Not Found\")\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if (str1[i]==ch):\n            str2=str2+newch\n        else:\n            str2=str2+str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        i=0\n        while i<len(str1):\n            if str1[i]==ch:\n                str1=str1.replace(ch,newch)\n                i=i+1\n            i=i+1\n    return str1\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str_new = ''\n    for i in str1:\n        if i == ch:\n            i = newch\n        str_new += i\n    return str_new\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #Define character pattern\n    pattern = '[^a-zA-Z0-9]*'\n    #Find the index\n    i = 0\n    #Loop through the string\n    while (i < len(str1)):\n        #Check for character to replace\n        if ch == str1[i]:\n            #Set new character\n            newstr = newch + str1[i]\n            #Set new index\n            newstrindex = newchindex + 1\n            #Add the new character\n            str1 = str1[0:i] + newstr + str1[i+1:]\n            #Increment index\n            i = newstrindex\n        else:\n            #Increment index\n            i += 1\n    #Return the original string\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = ''\n    for c in str1:\n        if c == ch:\n            result += newch\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(ch)!=str:\n        raise TypeError(\"ch must be a string\")\n    if type(str1)!=str:\n        raise TypeError(\"str1 must be a string\")\n    if type(newch)!=str:\n        raise TypeError(\"newch must be a string\")\n    new_string = str1\n    for i in range(0,len(str1)):\n        if (str1[i]!= ch) or (newch!= ch):\n            new_string = new_string.replace(str1[i],'')\n        else:\n            new_string = new_string.replace(str1[i],newch)\n    return new_string\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if len(str1) < 1 or len(str1) > 200:\n        raise ValueError(\"Error. Input string too long or too short.\")\n    if ch.lower() == 'r':\n        return str1.replace('R','RU')\n    elif ch.lower() == 'w':\n        return str1.replace('W','WU')\n    elif ch.lower() =='s':\n        return str1.replace('S','SI')\n    elif ch.lower() == 'l':\n        return str1.replace('L','LB')\n    elif ch.lower() == 'p':\n        return str1.replace('P','PY')\n    else:\n        return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # this function is my replacement of the function defined earlier\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #return new string \n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    counter1 = Counter(dict1)\n    dict1 = sorted(counter1.items(), key=lambda x: x[1])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list_dict = sorted(dict1.items(), key = lambda x: x[1])\n    return list_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # Step 1: sort the dictionary by value\n    # create a list of the dictionary keys\n    dictionary = list(dict1.keys())\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for k, v in dict1.items():\n        sorted_dict[v] = k\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1:\n        dict1[key]=dict1[key].count(0)\n    dict1=sorted(dict1.items(), key=lambda x:x[1])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for i in dict1:\n        if dict1[i]>0:\n            dict1[i] = -1*dict1[i]\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    my_dict = dict()\n    for key, value in dict1.items():\n        my_dict[value] = key\n    my_dict = sorted(my_dict.items(), key=lambda x: x[1])\n    return my_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    # initialize an empty list to store sorted values\n    list_sorted = []\n    \n    # traverse through the dictionary\n    for k, v in dict1.items():\n        # append only the keys with non-zero values\n        if v!= 0:\n            list_sorted.append((k, v))\n            # update the dictionary with the sorted values\n            dict1[k] = list_sorted\n            # remove the key and value from the dictionary\n            del dict1[k]\n            \n    return dict1\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    for i in range(len(nums)):\n        if i == 0:\n            nums[0] = nums[i]\n        elif nums[i] > nums[i-1]:\n            nums[i] = nums[i] + nums[i-1]\n        else:\n            nums[i] = nums[i] - nums[i-1]\n    return max(nums)"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums) + min(nums)\n    result = big_sum(nums[:-1])\n    return max(result, min(nums))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = nums.copy()\n    s.sort()\n    m,n = len(s), len(s)\n    i, j, res = 0, 0, 0\n    while j < n:\n        if s[j] < s[i]:\n            res = s[i]\n            i += 1\n        else:\n            res = s[j]\n            j += 1\n        s[i] = s[j] = res\n        i += 1\n    return res\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = None\n    smallest = None\n    for num in nums:\n        if largest == None or num > largest:\n            largest = num\n        if smallest == None or num < smallest:\n            smallest = num\n    return largest - smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # write your code here\n    lst=[]\n    sum=0\n    for i in nums:\n        sum+=i\n        if(i>sum):\n            lst.append(i)\n    if(len(lst)==0):\n        return None\n    return sum,lst\n    \n    \n    \n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s=sum(nums)\n    if s<=10**9:\n        return s\n    if s<=10000000000:\n        return s\n    if s<=100000000000:\n        return s\n    if s<=1000000000000:\n        return s\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums) - min(nums)\n    max_val = max(nums)\n    min_val = min(nums)\n    sum = max_val + min_val\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val+min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # TODO: define your solution here\n    max_so_far, max_so_far_index = nums[0],0\n    min_so_far, min_so_far_index = nums[0],0\n    for i in range(1,len(nums)):\n        if nums[i] > max_so_far:\n            max_so_far = nums[i]\n            max_so_far_index = i\n        if nums[i] < min_so_far:\n            min_so_far = nums[i]\n            min_so_far_index = i\n    return max_so_far + min_so_far\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #for loop in nums\n    #calculate largest and smallest value\n    #return value\n    largest = 0\n    smallest = 10000\n    for i in range(len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.lower() == string:\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    try:\n        if string.islower():\n            return True\n        else:\n            return False\n    except AttributeError:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Code goes here\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = r\"[^a-z]\"\n    str2 = re.sub(pattern, \"\", str1)\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(\" \", \"\")\ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome2(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome3(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome4(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome5(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome6(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome7(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome8(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome9(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome10(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome11(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome12(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome13(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome14(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome15(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome16(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome17(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome18(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome19(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome20(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome21(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome22(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome23(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome24(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome25(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome26(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome27(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome28(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome29(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome30(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome31(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome32(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome33(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome34(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome35(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome36(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome37(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome38(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome39(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome40(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome41(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome42(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome43(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome44(s):\n    '''\n    Write a function to check whether a string is palindrome.\n    '''\n    return s == s[::-1]\ndef is_palindrome45(s):\n    '''\n    Write a functio"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #  A valid substring which matches all lower case characters in the string is regarded as a valid substring.\n    #  The function should return a new string which contains the characters of the string which match the patterns provided.\n    #  We can use regular expressions to find all the occurrences of a substring in a string.\n    #  e.g.  substring = \"ABCDEF\" is the substring ABCDEF,\n    #          all the occurrences of \"ABC\" are replaced by \"CDE\"\n    #          the last \"ABC\" in \"ABCDE\" is replaced by \"CDE\"\n    #  For example, if given string is \"ABCDE\",\n    #      substring = \"ABCDEF\" is matched\n    #      by \"ABC\"\n    #      we return \"BCDE\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]','',str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('([a-z])([A-Z])*', r'\\1 \\2', str1.lower())\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str2 += str1[i]\n        else:\n            str2 += str1[i].upper()\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function that takes in a string and removes any punctuation marks from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isalnum():\n            str2 += str1[i]\n        else:\n            str2 += str1[i].lower()\n    return str2\ndef remove_whitespace(str1):\n    '''\n    Write a function that removes any whitespace at the beginning and end of a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isspace():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_emojis(str1):\n    '''\n    Write a function that removes any emojis from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] in [':', ';', '.', '!', '?']:\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_other(str1):\n    '''\n    Write a function that removes any other non-alphabetic characters from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isalnum():\n            str2 += str1[i]\n        else:\n            str2 += str1[i].lower()\n    return str2\ndef remove_digit(str1):\n    '''\n    Write a function that removes any digits from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_special_characters(str1):\n    '''\n    Write a function that removes any special characters from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in [\"\\\"\", \"\\'\", \"'\", \":\", \";\", \".\", \"!\", \"?\", \",\", \".\"]:\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_digits(str1):\n    '''\n    Write a function that removes any digits from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_lst(str1):\n    '''\n    Write a function that removes all substrings of a given list of strings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str1[i])):\n            str2 += str1[i][j]\n        if str1[i].isdigit():\n            str2 += str1[i].replace(\".\", \"\")\n        else:\n            str2 += str1[i].replace(\" \", \"\")\n    return str2\ndef remove_first(str1):\n    '''\n    Write a function that removes the first letter from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        str2 += str1[i][0].lower()\n    return str2\ndef remove_last(str1):\n    '''\n    Write a function that removes the last letter from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        str2 += str1[i][-1].lower()\n    return str2\ndef remove_punctuation(str1):\n    '''\n    Write a function that removes any punctuation marks from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isalnum():\n            str2 += str1[i]\n        else:\n            str2 += str1[i].lower()\n    return str2\ndef remove_whitespace(str1):\n    '''\n    Write a function that removes any whitespace at the beginning and end of a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isspace():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_emojis(str1):\n    '''\n    Write a function that removes any emojis from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] in [':', ';', '.', '!', '?']:\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_other(str1):\n    '''\n    Write a function that removes any other non-alphabetic characters from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isalnum():\n            str2 += str1[i]\n        else:\n            str2 += str1[i].lower()\n    return str2\ndef remove_digit(str1):\n    '''\n    Write a function that removes any digits from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_special_characters(str1):\n    '''\n    Write a function that removes any special characters from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in [\"\\\"\", \"\\'\", \"'\", \":\", \";\", \".\", \"!\", \"?\", \",\", \".\"]:\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_digits(str1):\n    '''\n    Write a function that removes any digits from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i].isdigit():\n            str2 += str1[i]\n        else:\n            str2 += str1[i]\n    return str2\ndef remove_lst(str1):\n    '''\n    Write a function that removes all substrings of a given list of strings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str1[i])):\n            str2 += str1[i][j]\n        if str1[i].isdigit():\n            str2 += str1[i].replace(\".\", \"\")\n        else:\n            str2 += str1[i].replace(\" \", \"\")\n    return str2\ndef remove_first(str1):\n    '''\n    Write a function that removes the first letter from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        str2 += str1[i][0].lower()\n    return str2\ndef remove_last(str1):\n    '''\n    Write a function that removes the last letter from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        str2 += str1[i][-1].lowe"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    my_str = ''\n    for char in str1:\n        if char.isalpha():\n            my_str += char.lower()\n    return my_str\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    temp = []\n    temp2 = []\n    for i in range(len(str1)):\n        if(str1[i].isupper()):\n            temp.append(str1[i].lower())\n        else:\n            temp2.append(str1[i])\n    return temp,temp2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r\"[a-z]\"\n    result = re.sub(pattern, '', str1)\n    return result\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    sum = 0\n    for i in list :\n        sum = sum + i\n    return sum\n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #Determine the sign, plus the number of decimal places.\n    sign = 1\n    number_of_decimals = n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return 1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i=0\n    while n!=0:\n        n,r=divmod(n,10)\n        if r==0:\n            break\n        i+=1\n    return i\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    i=0\n    while n!=0:\n        n,r=divmod(n,10)\n        if r==0:\n            break\n        i+=1\n    return i\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n <= 9:\n        return n\n    \n    n_string = str(n)\n    length = len(n_string)\n    first_digit = n_string[0:length]\n    return first_digit\n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n // 100\n    rest = n % 100\n    # print(first, rest)\n    if(rest == 0):\n        return first\n    else:\n        return first * 10 + rest\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 'zero'\n    if n == 1 :\n        return 'one'\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = 0\n    while n > 0 : \n        if n % 10 == 0 : \n            n //= 10\n            i += 1\n        else : \n            break\n    return i \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    for item in list:\n        if item % 2!= 0:\n            even_list.append(item)\n    print(even_list)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2 == 1: \n            odd.append(i) \n    return odd\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = []\n    for i in list: \n        if i % 2!= 0: \n            list_odd.append(i) \n    return list_odd \n  "
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newlist = []\n    for i in range(0,len(list)):\n        if list[i] % 2!= 0:\n            newlist.append(list[i])\n    return newlist\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    # your code here\n    if len(list) % 2 == 0:\n        # get the number of elements left, split it to two\n        # this is where a single element is the number that you want to return\n        lst_1 = list[:len(list)//2]\n        # get the number of elements right, split it to two\n        lst_2 = list[len(list)//2:]\n        # convert both to ints\n        lst_1 = [int(i) for i in lst_1]\n        lst_2 = [int(i) for i in lst_2]\n        # do the same thing for the middle element\n        lst_3 = lst_1 + lst_2\n        # return the list\n        return lst_3\n    else:\n        return list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list1 = []\n    for i in range(len(list)):\n        if (i%2!=0):\n            list1.append(list[i])\n    return list1\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    answer = 0\n    for i in range(1,n+1):\n        answer += i**3\n    return answer\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        sum = sum + (i ** 3)\n    return sum\n    \n    \ndef check(n) :\n    '''\n    Write a python function to check if the sum of cubes of the first n natural numbers is the same as the sum of cubes of the sum of cubes of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        sum = sum + (i ** 3)\n    if n == sum :\n        print(\"Yes\")\n    else :\n        print(\"No\")\n        \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_of_the_sum = []\n    if n == 1 :\n        return 1\n    else :\n        for i in range(n) :\n            cubes_of_the_sum.append(i**3)\n        return cubes_of_the_sum[-1] - cubes_of_the_sum[-2]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1=0\n    for i in range(1,n):\n        sum1+=i*i\n    return sum1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes_1 = 0\n    sum_of_cubes_2 = 0\n    for num in range(1, n + 1):\n        sum_of_cubes_1 += num**3\n        sum_of_cubes_2 += num**2\n    return sum_of_cubes_1 - sum_of_cubes_2\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += (i **3)\n    print(sum)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    sum_1 = sum(n)\n    sum_2 = sum(list(map(lambda x:x**3,n)))\n    \n    return sum_2 - sum_1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return n * difference(n-1)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Write your code here\n    if n == 1 :\n        return 0\n    elif n <= 0 :\n        return -1\n    else :\n        return n - (n*n)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n < 0 :\n        print('Incorrect input')\n        return None\n    \n    if n == 0 :\n        return 0\n    \n    else :\n        return (n**3) - (n**2) + (n**4)\n    \ndef addition(n) :\n    '''\n    Write a python function to find the addition of the sum of cubes of the first n natural numbers.\n    '''\n    if n < 0 :\n        print('Incorrect input')\n        return None\n    \n    if n == 0 :\n        return 0\n    \n    else :\n        return (n**3) + (n**2) + (n**4)\n    \ndef subtract(n) :\n    '''\n    Write a python function to find the subtraction of the sum of cubes of the first n natural numbers.\n    '''\n    if n < 0 :\n        print('Incorrect input')\n        return None\n    \n    if n == 0 :\n        return 0\n    \n    else :\n        return (n**3) - (n**2) - (n**4)\n    \ndef multiply(n) :\n    '''\n    Write a python function to find the product of the sum of cubes of the first n natural numbers.\n    '''\n    if n < 0 :\n        print('Incorrect input')\n        return None\n    \n    if n == 0 :\n        return 0\n    \n    else :\n        return (n**3) * (n**2) * (n**4)\n    \ndef divide(n) :\n    '''\n    Write a python function to find the quotient of the sum of cubes of the first n natural numbers.\n    '''\n    if n < 0 :\n        print('Incorrect input')\n        return None\n    \n    if n == 0 :\n        return 0\n    \n    else :\n        return n**3/3\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if A[i]&1 == 1 :\n                if A[j]&1 == 1 :\n                    return 2\n    \n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    n = len(A)\n    for i in range(n-1) :\n        if (A[i] & A[i+1] == A[i] ^ A[i+1]) : \n            count = count + 1\n    if (count % 2!= 0) :\n        print(\"There are no odd pairs\")\n    else :\n        print(n - count)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    l1 = 0\n    l2 = 0\n    if N == 1 :\n        l2 = 1\n    elif N == 2 :\n        l2 = 1\n        l1 = 1\n    else :\n        l2 = 2\n        l1 = 1\n        for i in range(3,N+1) : \n            if (A[i-2]==A[i-1] and A[i-2]!=A[i-3] and A[i-2]!=A[i-4]) :\n                l1 += 1\n    return l1, l2\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pairs = 0\n    for i in range(N-1) :\n        if (A[i] ^ A[i+1]) % 2 == 1 :\n            odd_pairs += 1\n    return odd_pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]==0) :\n                count=count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # count the number of odd pairs\n    odd_count = 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count=0\n    for i in range(1,N-1) :\n        if (A[i-1]==A[i+1]) :\n            if (A[i-1]==A[i]):\n                if A[i]%2==1 :\n                    odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c=0\n    for i in range(0,N) : \n        if A[i] ^ i % 2 == 1 : c += 1\n    return c\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(N):\n        if A[i] == A[(i + 1) % N] :\n            if A[i] == A[(i + 2) % N] :\n                if A[i] == A[(i + N) % N] :\n                    odd += 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 0 : return 0\n    xor = A[0] ^ A[N]\n    Count = 0\n    for i in range(1,N) : \n        if A[i] == xor : \n            Count += 1\n    return Count\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #TODO: Write a function that will toggle the case of all characters in a string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        string = string.lower()\n    else:\n        string = string.capitalize()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string:\n        for char in string:\n            if char.isupper():\n                char = char.lower()\n            if char.islower():\n                char = char.upper()\n            string = string.replace(char, \"\")\n        return string\n    else:\n        return \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.title()\n    \nprint(toggle_string(\"Hello World\"))\nprint(toggle_string(\"  Hello World  \"))\nprint(toggle_string(\"hello world\"))\nprint(toggle_string(\"   hello   world   \"))\nprint(toggle_string(\"    hello    world    \"))\nprint(toggle_string(\"1abc2defg1\"))\nprint(toggle_string(\"abcdefg\"))\nprint(toggle_string(\"Hello   World  !\"))\nprint(toggle_string(\"AABBCCddd\"))\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        print('String is empty')\n    else:\n        if string[0].isupper():\n            string = string.title()\n        else:\n            string = string.swapcase()\n        print(string)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return ''\n    else:\n        res = ''\n        for c in string:\n            if c.isupper():\n                res += '_'\n            elif c.islower():\n                res +=''\n            else:\n                res += c\n        return res\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def char_toggle(string, char):\n        '''\n        Toggle a character.\n        '''\n        return string.replace(char, \"\")\n    return char_toggle(string, \" \")\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle_char(char):\n        '''toggle the character'''\n        if char.islower():\n            return 'a'\n        elif char.isupper():\n            return 'B'\n        else:\n            return char\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    for char in string:\n        if char == \" \":\n            string = string.replace(char, \"\")\n        else:\n            string = string.replace(char, \" \")\n    return string\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(max(n1, n2)):\n        diff += 1 if n1 % 10 == n2 % 10 else 0\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(a - b for a, b in zip(n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Implement this function\n    return n1-n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([n1-n2, n1-n2, n1-n2, n1-n2, n1-n2])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    if n1 == '0' or n2 == '0':\n        return 0\n    return (sum(map(lambda x: x - digit_distance_nums(n1,x), range(1, 10))) - digit_distance_nums(n2, n1) - digit_distance_nums(n1, n2)) % 10\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    if (n1 % 2 == 0):\n        diff += abs(n1 - n2)\n    if (n2 % 2 == 0):\n        diff += abs(n2 - n1)\n    if (n1 > n2):\n        diff += abs(n1 - n2)\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(n1):\n        diff += (n1 - i) * (n2 - i)\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # your code here\n    return sum(int(digit)-int(digit[::-1]) for digit in str(abs(n1-n2)))\n    \ndef digit_sum(n):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # your code here\n    # return sum(int(digit)-int(digit[::-1]) for digit in str(abs(n1-n2)))\n    return sum(int(digit) for digit in str(abs(n1-n2)))\n    \ndef digit_string(n):\n    '''\n    Write a python function to find the string representation of a number.\n    '''\n    # your code here\n    return \"\".join(str(digit) for digit in str(abs(n1-n2)))\n    \n    \ndef digit_sum_string(n):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # your code here\n    # return sum(int(digit)-int(digit[::-1]) for digit in str(abs(n1-n2)))\n    return sum(int(digit) for digit in str(abs(n1-n2)))\n    \ndef digit_difference_nums(n1, n2):\n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    # your code here\n    return abs(n1-n2)\n    \ndef digit_difference_sum(n1, n2):\n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    # your code here\n    return abs(n1-n2)\n    \ndef digit_difference_string(n1, n2):\n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    # your code here\n    return \"\".join(str(digit) for digit in str(abs(n1-n2)))\n    \ndef digit_substring_difference_nums(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1[s2.find(s1)-1] - s2[s2.find(s1)-1])\n    \ndef digit_substring_difference_sum(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1[s2.find(s1)-1] - s2[s2.find(s1)-1])\n    \ndef digit_substring_difference_string(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return \"\".join(str(digit) for digit in str(abs(s1[s2.find(s1)-1] - s2[s2.find(s1)-1])))\n    \ndef digit_substring_difference_string(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return \"\".join(str(digit) for digit in str(abs(s1[s2.find(s1)-1] - s2[s2.find(s1)-1])))\n    \ndef digits_from_string_len(s):\n    '''\n    Write a python function to find the length of a string with only digits.\n    '''\n    # your code here\n    return len(s)\n    \ndef digits_from_string(s):\n    '''\n    Write a python function to find the length of a string with only digits.\n    '''\n    # your code here\n    return len(s)\n    \ndef digits_from_string_len_set(s):\n    '''\n    Write a python function to find the length of a string with only digits.\n    '''\n    # your code here\n    return len(set(s))\n    \ndef digits_from_string_set(s):\n    '''\n    Write a python function to find the length of a string with only digits.\n    '''\n    # your code here\n    return len(set(s))\n    \ndef digits_from_string_sum(s):\n    '''\n    Write a python function to find the sum of all the digits in a string.\n    '''\n    # your code here\n    return sum(int(digit) for digit in str(abs(int(s)-int(s[::-1]))))\n    \ndef digits_from_string_sum_set(s):\n    '''\n    Write a python function to find the sum of all the digits in a string.\n    '''\n    # your code here\n    return sum(int(digit) for digit in str(abs(int(s)-int(s[::-1]))))\n    \ndef digits_from_string_sum_string(s):\n    '''\n    Write a python function to find the sum of all the digits in a string.\n    '''\n    # your code here\n    return sum(int(digit) for digit in str(abs(int(s)-int(s[::-1]))))\n    \ndef digits_from_string_sum_string_set(s):\n    '''\n    Write a python function to find the sum of all the digits in a string.\n    '''\n    # your code here\n    return sum(int(digit) for digit in str(abs(int(s)-int(s[::-1]))))\n    \ndef digits_from_string_sum_string_string(s):\n    '''\n    Write a python function to find the sum of all the digits in a string.\n    '''\n    # your code here\n    return sum(int(digit) for digit in str(abs(int(s)-int(s[::-1]))))\n    \ndef digits_from_string_difference(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_set(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string_set(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string_string(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string_string_set(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string_string_string(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string_string_string_set(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string_string_string_string(s1, s2):\n    '''\n    Write a python function to find the difference between two strings.\n    '''\n    # your code here\n    return abs(s1-s2)\n    \ndef digits_from_string_difference_string_string"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > 10:\n        return -1\n    elif n2 > 10:\n        return -1\n    if n1 < 0:\n        n1 = -n1\n    if n2 < 0:\n        n2 = -n2\n    return int((n1 - n2)/10)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    n1 = abs(n1)\n    n2 = abs(n2)\n    diff = n1 - n2\n    return diff\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # sort the array\n    a.sort()\n    # find the length of the array\n    n = len(a)\n    # check for 1s\n    if n == 0:\n        return 0\n    # check for 0s\n    if n == 1:\n        return a[0]\n    # start at the starting index\n    start = 0\n    # now check if there is a 0\n    if a[0]!= 0:\n        start = 1\n        # since we have been checking at 1, we need to check if the subarray is larger than the rest\n        # if it is, we need to return the sum of the subarray\n        while start < n and a[start] > a[start+1]:\n            start += 1\n        # if the sum is greater, we need to return the sum of the subarray\n        return a[start] + max_sub_array_sum(a[start+1:], size)\n    # otherwise, return the max sum\n    return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    def calculate_sum(a, n, sum):\n        if n == 0:\n            return sum\n        elif n == 1:\n            return sum + a[n-1]\n        else:\n            sum += a[n-1]\n            calculate_sum(a, n-1, sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #number of sub-lists\n    sub_sub_list_size = 0\n    max_sum = 0\n    #for all the elements in the list\n    for i in range(len(a)):\n        #check the current sub-list\n        if sub_sub_list_size < size:\n            #if the current sub-list is bigger than the max sub-list,\n            # add the current element to the sum of the current sub-list\n            # if the current sub-list is smaller than the max sub-list\n            if a[i] > max_sum:\n                max_sum = a[i]\n            #increment the sub-list counter\n            sub_sub_list_size += 1\n        #if the sub-list is bigger than the max sub-list, then it's not an empty sub-list\n        else:\n            #if it's not an empty sub-list, return the sum of the current sub-list\n            # and the max sub-list (if it's not an empty sub-list)\n            if max_sum!= 0 and a[i] > max_sum:\n                max_sum = a[i]\n            #if the current sub-list is bigger than the max sub-list, then it's not an empty sub-list\n            # and increment the sub-list counter\n            if sub_sub_list_size > size:\n                sub_sub_list_size = 0\n                max_sum = a[i]\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    res = []\n    pre = []\n    cur = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    total = 0\n    for i in range(len(a)):\n        total += a[i]\n    return total\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # A sublist is a contiguous subsequence of the given list (i.e.,\n    # the number of the elements is exactly the length of the list).\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0], a[1])\n    else:\n        max_sum = max_sub_array_sum(a[0:size-2], size-1) + a[size-1]\n        return max(max_sub_array_sum(a[0:size-2], size-1), max_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # initializing the max_sum variable\n    max_sum = -999999\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    test_tup1 = tuple(sorted(test_tup1))\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup_1_len = len(test_tup1)\n    tup_2_len = len(test_tup2)\n    for i in range(0,tup_1_len):\n        for j in range(0,tup_2_len):\n            if test_tup1[i] < test_tup2[j]:\n                test_tup1[i], test_tup2[j] = test_tup2[j], test_tup1[i]\n    return test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    unions = [test_tup1[0] or test_tup2[0], test_tup1[1] or test_tup2[1]]\n    unions.sort()\n    return unions\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(test_tup1+test_tup2))\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(test_tup1.intersection(test_tup2)))\n    \ndef main():\n    '''\n    Main function that controls program flow.\n    '''\n    if len(sys.argv) < 3:\n        print('Invalid number of arguments.\\n')\n        print('Usage: python'+ sys.argv[0] +'<list of pairs> <output file>')\n        sys.exit(0)\n    \n    # Read the input list of pairs.\n    input_list = sys.argv[1:]\n    \n    # Write the output file to the given file name.\n    output_file = sys.argv[2]\n    \n    # Convert the input list into a list of tuples and write it to a file.\n    input_tuples = []\n    for i in range(len(input_list)):\n        input_tuples.append(tuple(map(int, input_list[i].split())))\n    with open(output_file, 'w') as output_file:\n        output_file.write('\\n'.join(map(str, input_tuples)))\n    print('The data was written to the output file: ', output_file)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple(sorted(test_tup1+test_tup2))\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Your code here\n    list_tup1 = []\n    for i in test_tup1:\n        list_tup1.append(i)\n    list_tup2 = []\n    for i in test_tup2:\n        list_tup2.append(i)\n    list_tup1.sort()\n    list_tup2.sort()\n    list_tup1 = tuple(list_tup1)\n    list_tup2 = tuple(list_tup2)\n    #print(list_tup1, list_tup2)\n    if list_tup1 == list_tup2:\n        return list_tup1\n    else:\n        return None\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # define list to check if both tuples are empty or not\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    \n    # check if any element in the first tuple has been added to the second tuple \n    # store the indices of the elements that have been added in the second tuple\n    # then sort the elements in ascending order and return\n    # to the end of the function\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            # if it is in the second tuple, then return\n            # otherwise just return the element from the first tuple\n            # and return the combined tuple\n            return (test_tup1[i],test_tup2[i])\n    \n    # if any element in the first tuple is not in second tuple, then return\n    # the element from the second tuple\n    # and return the combined tuple\n    return test_tup2[0]\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # define list to check if both tuples are empty or not\n    if len(test_tup1) == 0:\n        return test_tup2\n    if len(test_tup2) == 0:\n        return test_tup1\n    \n    # check if any element in the first tuple has been added to the second tuple \n    # store the indices of the elements that have been added in the second tuple\n    # then sort the elements in ascending order and return\n    # to the end of the function\n    intersect_index = []\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            intersect_index.append(i)\n    intersect_index.sort()\n    \n    # return the elements from the intersect_index list\n    return intersect_index\n    "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return test_tup1 + test_tup2\n    elif len(test_tup1) > len(test_tup2):\n        return test_tup2 + test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup1 + test_tup2\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    #check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print('Tuples must be of the same length')\n        return None\n    \n    #create a set and iterate over the list of tuples\n    unions = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in unions:\n            unions.add(test_tup1[i])\n        if test_tup2[i] not in unions:\n            unions.add(test_tup2[i])\n    \n    #sort it\n    unions = sorted(list(unions))\n    \n    return unions\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a temporary dictionary to store the index of the first element\n    temp_dict = {}\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in temp_dict:\n            temp_dict[test_tup1[i]] += 1\n        else:\n            temp_dict[test_tup1[i]] = 1\n    # Find the first element\n    for i in temp_dict:\n        if temp_dict[i] == 1:\n            return (i, temp_dict[i])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    if len(lst) > 1:\n        for i in range(len(lst)-1):\n            if lst[i] + lst[i+1] > max_len:\n                max_len = lst[i] + lst[i+1]\n                \n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    \n    #check if the list is empty\n    if n == 0:\n        return 0\n    \n    #check for all the sublists\n    Max = 1\n    for i in range(n):\n        if i > 0:\n            #check if the current item is the maximum item and add it to the sublist\n            if lst[i] > lst[i-1]:\n                Max = max(Max, 1 + Find_Max_Length(lst[:i]))\n            \n    return Max\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_1 = []\n    lst_2 = []\n    count = 0\n    l = 0\n    for i in range(len(lst)):\n        if lst[i] not in lst_1:\n            lst_1.append(lst[i])\n        else:\n            lst_2.append(lst[i])\n        count+=1\n        l += 1\n        \n    return count\n        \n        \ndef Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_1 = []\n    lst_2 = []\n    count = 0\n    l = 0\n    for i in range(len(lst)):\n        if lst[i] not in lst_1:\n            lst_1.append(lst[i])\n        else:\n            lst_2.append(lst[i])\n        count+=1\n        l += 1\n        \n    return count\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Iterate the list\n    for i in range(0, len(lst)):\n        \n        # Iterate through the list\n        for j in range(i, len(lst)):\n            # Compare the list to each other and find the longest substring\n            if lst[i] + lst[j] < lst[j] + lst[i]:\n                # Set j to the first index of the current list and i to the index of the new one\n                j = i\n                i = j + 1\n                \n    # Return the length of the longest substring\n    return j"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    for i in range(1,len(lst)):\n        if len(lst[i])>len(lst[i-1]):\n            return len(lst[i])\n    return -1\n    \n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        temp = lst[i]\n        for j in range(i+1,len(lst)):\n            if lst[j] > temp:\n                temp = lst[j]\n                temp_len = j-i\n                max_length = temp_len if temp_len > max_length else max_length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    answer = 0\n    \n    if len(lst) == 0:\n        return answer\n    elif len(lst) == 1:\n        return 1\n    else:\n        \n        for i in range(1, len(lst)):\n            answer = max(answer, Find_Max_Length(lst[:i]))\n        \n        return answer"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    res = re.findall(r'\\{\\{([^\\}]+)\\}',text)\n    for i in res:\n        print(i)\n        print(text[text.find(i)+len(i):text.find(i)+len(i)+1])\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    match = re.findall(r'\\([^)]*\\)', text)\n    if match:\n        text = match[0]\n    match = re.findall(r'\\([^)]*\\)([^)]*\\)([^)]*\\)', text)\n    if match:\n        text = match[0][0]\n        text = text[text.index('(') + 1:text.index(')')]\n        text = text[text.index('{') + 1:text.index('}')]\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = '^\"(?P<value>[^\"]+)\"$'\n    result = re.search(regex, text)\n    return result.group('value') if result else None\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    output = []\n    values = re.findall(r\"[(][^)]*[)]\", text)\n    for v in values:\n        output.append(v)\n    return output\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'''\n        (?<=[\u2018\u2019\u201c\u201d\u2018\u2019])(?=[\u2018\u2019\u201c\u201d\u2018\u2019])|\n        (?<=\\s)(?=[\u2018\u2019\u201c\u201d\u2018\u2019])(?=\\s)\n        |\n        (?<=\\w)(?=\\w)(?=\u2018\u2019)|\n        (?<=\\d)(?=\\d)(?=\\w)|\n        (?<=\\w)(?=\\d)|\n        (?<=\\w)[\u2019\u201a\u2018]\n    ''', re.VERBOSE)\n    return pattern.findall(text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = r\"(^| )\\\"(.|\\n|[^\\\"])\\\"(.|\\n|[^\\\"])\\\"(.|\\n|[^\\\"])\\\"(.|\\n|[^\\\"])\\\"(.|\\n|[^\\\"])\"\n    return re.findall(p, text, flags=re.MULTILINE)\ndef process_values(values):\n    '''\n    Write a function to process values.\n    The function should return a dictionary where keys are numbers and values are lists of\n    quotes.\n    '''\n    result = {}\n    for i in range(len(values)):\n        if(len(values[i]) > 1):\n            result[i] = values[i].replace(\"'\", \"\")\n        else:\n            result[i] = values[i]\n    return result\ndef print_items(items):\n    '''\n    Write a function that prints items in a table.\n    '''\n    print(\"----\")\n    print(items)\n    print(\"----\")\ndef add_to_dict(text, dict):\n    '''\n    Write a function that adds an entry in a dictionary.\n    '''\n    if(text == \"\"):\n        return\n    for i in text:\n        if(i == \"\\\"\"):\n            i = \"\\\\\"\n        dict[i] = dict.get(i, 0) + 1\n    return dict\ndef remove_values(text, dict):\n    '''\n    Write a function that removes items from a dictionary.\n    '''\n    if(text == \"\"):\n        return\n    for i in text:\n        if(i == \"\\\"\"):\n            i = \"\\\\\"\n        if(dict.get(i, 0) == 0):\n            del dict[i]\n        else:\n            dict[i] = dict.get(i, 0) - 1\n    return dict\ndef print_dict(dict):\n    '''\n    Write a function that prints a dictionary.\n    '''\n    print(\"----\")\n    print(dict)\n    print(\"----\")\ndef write_report(name):\n    '''\n    Write a function that writes a report in a text file.\n    '''\n    text = open(name + \".txt\", \"w\")\n    text.write(\"--------\\n\")\n    text.write(\"Statistics for \" + name + \"\\n\")\n    text.write(\"--------\\n\")\n    text.write(\"Number of lines: \" + str(len(text.readlines())) + \"\\n\")\n    text.write(\"Number of quotations: \" + str(len(extract_values(text.read()))) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of quotes: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text.write(\"Number of words: \" + str(len(extract_values(text.read()).values())) + \"\\n\")\n    text"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    list = []\n    if len(text) < 1:\n        return list\n    \n    for char in text:\n        if char == '\"':\n            list.append(char)\n        else:\n            if char =='' and len(list) > 0:\n                list.pop(0)\n            elif char!='':\n                return list\n    \n    return list\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.split('\"')[1]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Create a regular expression.\n    pattern = re.compile(\"\\\"[^\\\"]*\\\"\")\n    # Match the text.\n    match = pattern.search(text)\n    if match:\n        # Return the string after the matching quote.\n        return match.group()\n    else:\n        # Return \"None\" if no match.\n        return \"None\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    found = False\n    for i,ch in enumerate(text):\n        if ch == '\"':\n            found = True\n        elif ch == \",\" and not found:\n            if i == len(text)-1:\n                values.append(text[i+1:].strip())\n            else:\n                values.append(text[i+1:i+2])\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n1 = n-1\n    if (n==0):\n        return 0\n    elif (arr[0]!= arr[1]):\n        return 1 + count_Pairs(arr,n-1)\n    else:\n        return count_Pairs(arr,n-2)\n    \ndef count_Pairs_v2(arr,n):\n    \"\"\"\n    2D array - input array with size nxn\n    count pairs\n    :param arr: array with elements [2,3,4,5,6]\n    :param n: size of array\n    :return: the no. of pairs\n    \"\"\"\n    total = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if (arr[i][j]!= arr[i][n-1-j]):\n                total += 1\n    return total\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    # get the array length\n    l = len(arr)\n    # iterate through the array and for each element\n    for i in range(0, l): \n        for j in range(i + 1, l): \n            # if it is unequal, add 1 to the count\n            if (arr[i]!= arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0:\n        return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    num_of_pairs = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if (arr[i] < arr[j] and arr[i]!= arr[j]):\n                num_of_pairs +=1\n    return num_of_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pair_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                if arr[i]==0 or arr[j]==0:\n                    count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n=len(arr)\n    sum=0\n    pairs=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if(arr[i]!=arr[j]):\n                sum+=1\n                pairs+=2\n    return sum,pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    if not arr:\n        return 0\n    else:\n        count=0\n        for i in range(len(arr)-1):\n            if arr[i]!=arr[i+1]:\n                count+=1\n        return count\n    \ndef count_Triplets(arr,n):\n    '''\n    Given an array and a number n, return the number of triplets. \n    '''\n    if not arr:\n        return 0\n    else:\n        count=0\n        for i in range(len(arr)-1):\n            if arr[i]==arr[i+1]:\n                count+=1\n        return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2: \n        return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    pairs = 0\n    for i in range(0,len(arr)-1):\n        if(arr[i] == arr[i+1]):\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word == '': \n        return word \n    else: \n        return word[0] + split(word[1:]) \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    pass"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split method of string \n    words = word.split() \n    # convert each word to a list \n    return words \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [character for character in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    list_split = []\n    for i in word:\n        if i in [\" \", \",\", \",\", \".\", \"!\", \":\"]:\n            list_split.append(i)\n        else:\n            list_split.append(i.lower())\n    return list_split"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code goes here\n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return (word)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    if n < 10:\n        return n\n    sum = 0\n    while n >= 10:\n        sum += n % 10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    digits = [0] * (n + 1)\n    return digits[n]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    s = 0\n    for i in n:\n        s = s + int(i)\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    '''\n    print(n)\n    '''\n    x = n % 10\n    y = n // 10 % 10\n    z = n // 100 % 10\n    print(x,y,z)\n    return x * y * z\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    import math\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return math.floor(math.log10(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n    \n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return n % 10\n    \n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        return list1[0] < list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 is None or len(list1) == 0:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # initializing boolean\n    bool = True\n    # iterating through given list\n    for i in range(len(list1)):\n        # checking if list1[i] is less than list1[i+1]\n        if list1[i] < list1[i+1]:\n            # changing bool to false\n            bool = False\n    # return boolean\n    return bool\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if(len(list1)==0):\n        return False\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # note: see comments below in sorted() function below\n    # we can also get the length of the list by using len(list1)\n    # here: https://www.programiz.com/python-programming/methods/built-in/len\n    i = 0\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return False\n    elif list1[i] > list1[i+1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # DO NOT MODIFY THIS FUNCTION\n    if length == 0:\n        raise ValueError('Invalid length')\n    else:\n        return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(0, length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    print(f\"\\nCreating empty list of {length} dictionaries.\")\n    empty_list = []\n    for _ in range(length):\n        empty_list.append({\"name\": \"\", \"username\": \"\", \"email\": \"\", \"phone\": \"\", \"dob\": \"\"})\n    print(f\"The list contains the following empty dictionaries:\\n{empty_list}\")\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length < 1:\n        return []\n    elif length == 1:\n        return [{\"name\": \"Name\", \"age\": \"Age\", \"address\": \"Address\"}]\n    else:\n        return [\n        {\n        \"name\": \"Name\",\n        \"age\": \"Age\",\n        \"address\": \"Address\"\n        },\n        {\"name\": \"First Name\", \"age\": \"Age\", \"address\": \"Address\"},\n        {\"name\": \"Last Name\", \"age\": \"Age\", \"address\": \"Address\"}\n        ]"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for _ in range(length):\n        lst.append(dict())\n    return lst\n    \n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = list(zip(*list1))\n    list1 = list(map(list, list1))\n    list1 = sorted(list1, key=lambda list1:list1[0])\n    for i in list1:\n        print(i)\n    \ndef main():\n    l = [['a','b'],['b','c'],['c','d'],['c','d']]\n    sort_sublists(l)\n    \nmain("
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [ sorted(x) for x in zip(*list1) ]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(list1)\n    i = 1\n    while i < len(list1):\n        j = 0\n        while j < len(list1[i]):\n            if list1[i][j] == '$':\n                list1[i][j] = list1[i][j+1]\n                list1[i][j+1] = '$'\n            j += 1\n        i += 1\n    print(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = int(list1[i][j])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a dictionary where key is list and value is the sum of lengths of lists\n    length_dict = {}\n    for list1 in list1:\n        for item in list1:\n            length_dict[item] = length_dict.get(item, 0) + 1\n    # Create a list to sort\n    sub_list = []\n    # Initialize the new list with the length of the first sublist\n    for key in length_dict:\n        sub_list.append(key)\n    # Sort the new list\n    sub_list = sorted(sub_list)\n    return sub_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for i in range(len(list1)):\n        sort_list.append(sorted(list1[i]))\n    return sort_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) == 0:\n        return\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) < 1:\n        return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for sublist in list1:\n        for element in sublist:\n            list2.append(element)\n    return list2\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    import collections\n    list_count = collections.Counter(nums)\n    return list(list_count.values())\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_unique = []\n    nums_unique.sort(reverse=True)\n    for i in nums:\n        if i not in nums_unique:\n            nums_unique.append(i)\n    return nums_unique\n    \nnums = [1,2,1,1,2,2,3,3,3,4]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    #create a set\n    nums_set = set()\n    \n    #Iterate through the given list\n    for num in nums:\n        #check if the value is already present\n        if num in nums_set:\n            #if so, remove it\n            nums_set.remove(num)\n        else:\n            #add it to the set\n            nums_set.add(num)\n    #return the result\n    return nums_set\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    nums_dict = {}\n    for num in nums:\n        if num not in nums_dict.keys():\n            nums_dict[num] = 1\n        else:\n            nums_dict[num] += 1\n    for num, count in nums_dict.items():\n        if count == 1:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    final_nums = []\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)):\n        if nums[i] in nums[i + 1:]:\n            nums.remove(nums[i])\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    temp_list = []\n    # Iterate over each list in the list and keep track of how many elements it has\n    for i in range(0, len(nums)):\n        # Check to see if the current number is already in the list. If so, remove it.\n        if nums[i] not in temp_list:\n            temp_list.append(nums[i])\n        # Else, add it to the list\n        else:\n            continue\n    # Return the list of unique numbers\n    return temp_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return nums_set\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniques = []\n    for i in range(len(nums)):\n        if nums[i] not in uniques:\n            uniques.append(nums[i])\n    return uniques\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Python 3\n    # Return\n    # Add\n    # Remove\n    # Check\n    # Reverse\n    # Loop\n    # Print\n    nums = sorted(nums)\n    # Duplicate number must be removed\n    nums.remove(nums[0])\n    # Remove the first number\n    nums.pop(0)\n    # Remove the last number\n    nums.pop(-1)\n    # Return the number\n    return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    counter = {}\n    for i in range(len(list_data)):\n        counter[list_data[i]] = counter.get(list_data[i],0) + 1\n    return max(counter.values())\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for num in list_data:\n        product = product * num\n    return product\n    \n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    num_list = []\n    for num in list_data:\n        if num not in num_list:\n            num_list.append(num)\n    print(f\"The list of unique numbers is {num_list}\")\n    print(f\"The product of the unique numbers is {int(len(set(num_list)))}\")\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    sum = 0\n    for i in list_data:\n        sum += i\n    return sum\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in new_list:\n            new_list.append(list_data[i])\n    return new_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 1\n    for num in list_data:\n        total = total * num\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers_list=[]\n    for i in range(len(list_data)):\n        numbers_list.append(list_data[i])\n    return max(set(numbers_list))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for i in list_data:\n        if i not in list_data[0]:\n            list_data.append(i)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if list_data:\n        return list_data[0] * list_data[0]\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return (sum([i**2 for i in list_data]))**0.5\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r*h*2)/3\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r=np.array(r)\n    h=np.array(h)\n    a=r*h\n    area=np.trapz(a,r)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (h**2)*np.pi*r**2"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4 * np.pi * r**2 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h*2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h*2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5*r*h**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*(r**3)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = r*h**2\n    return area\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code goes here\n    if(len(A)==len(B)):\n        \n        for i in range(0,len(A)):\n            if(A[i]!=B[i]):\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) < len(A):\n        print(\"The Sub_Array is not a Sub_Array\")\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A) == len(B) and all(map(operator.eq, A, B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B==A: \n        return True\n    return False\n    \ndef Approx_Sub_Array(A,B): \n    '''\n    Return the list of subarray of A with \n    a sum equal or less than B.\n    '''\n    l=[]\n    for i in range(len(A)): \n        for j in range(len(A[i])): \n            if A[i][j]<B: \n                l.append(A[i][j]) \n            else: \n                continue\n    return l\n    \ndef Sub_Array_Sum(A,B): \n    '''\n    Return the sum of subarray of A.\n    '''\n    return sum(A[i] for i in range(len(A))) \n    \ndef is_permutation(A,B):\n    '''\n    Check if a permutation of A is a permutation of B.\n    '''\n    if len(A)!= len(B): \n        return False\n    for i in range(len(B)): \n        if A[i]!=B[i]: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # write your code here\n    if len(A)!= len(B):\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return list(A)==list(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    x = B.index(A[0])\n    y = B.index(A[1])\n    if A[0] == A[1]:\n        return True\n    else:\n        if x > y:\n            return False\n        else:\n            return True\n    \n    \n    \n    \ndef subset(A,B):\n    '''\n    Write a python function to subset a list.\n    '''\n    # find out the largest common sublist\n    # and extend the sublist\n    # by shifting 0 to the end to the left\n    # and making sure that it is not 0\n    n = B.count(0)\n    M = A[0:n] + A[n:]\n    return M\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B): return False\n    for i in range(len(A)):\n        if A[i]!= B[i]: return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B): \n        return False\n    for i in range(len(A)): \n        if A[i]!= B[i] and A[i] not in B and A[i] in A: \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    while i < len(A) :\n        if A[i]!= B[i]:\n            return False\n        i+=1\n    return True\n    \n    \ndef SubArray(A,B,C):\n    '''\n    Write a python function to find the sum of the two sub arrays.\n    '''\n    i=0\n    x=0\n    while i < len(A):\n        x+=A[i]\n        i+=1\n    i=0\n    while i < len(B):\n        x+=B[i]\n        i+=1\n    return x\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 1\n    for i in range(1,n+1):\n        last_digit = last_digit * i\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    lst = []\n    for i in range(1, n + 1):\n        lst.append(i)\n    if n == 0 or n == 1: \n        return 1\n    else:\n        return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n > 0: \n        m = n // 10\n        n %= 10\n        ans = ans + last_Digit_Factorial(m) \n    return ans\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = n % 10\n    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 2\n    elif (n == 3):\n        return 3\n    else:\n        result = last_digit % 10\n        return (result)\n        \n    "
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0: \n        raise Exception(\"Give a positive number\")\n    elif n<10: \n        return n \n    elif n<100: \n        return n % 10 \n    else: \n        # the list is sorted so we can use the index \n        factorial = 1\n        for i in range(1, n): \n            factorial = factorial * i \n        return factorial % 10 \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0: \n        return 'Error'\n    else:\n        return n%10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last = 0\n    if n==1:\n        last = 1\n    else:\n        if n==2:\n            last = 1\n        else:\n            if n%2==0:\n                last = n//2\n            else:\n                last = n//2+1\n    return last\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    import math\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    try:\n        n = int(n)\n        result = 1\n        while n > 1:\n            result = result * n\n            n = n - 1\n        return result\n    except ValueError:\n        return -1\n        \ndef last_Digit_Recursive(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return last_Digit_Recursive(n-1) + n\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist=[]\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    n=len(list1)\n    return list1+list2+list3\n    \n    \ndef dict_to_txt(filename, dictionary):\n    '''\n    Write a function to create a text file with each item of the dictionary as a line.\n    '''\n    f=open(filename,'w')\n    for i in dictionary:\n        f.write(str(i)+'\\n')\n    f.close()\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    print(interleave_lists)\n    \n    new_list1 = []\n    new_list2 = []\n    new_list3 = []\n    \n    for i in range(len(list1)):\n        new_list1.append(list1[i])\n    for i in range(len(list2)):\n        new_list2.append(list2[i])\n    for i in range(len(list3)):\n        new_list3.append(list3[i])\n    \n    return(new_list1+new_list2+new_list3)\n    \n    \ndef interleave_lists_2(list1,list2):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    print(interleave_lists_2)\n    \n    new_list1 = []\n    new_list2 = []\n    new_list3 = []\n    \n    for i in range(len(list1)):\n        new_list1.append(list1[i])\n    for i in range(len(list2)):\n        new_list2.append(list2[i])\n    \n    return(new_list1+new_list2)\n    \ndef interleave_lists_3(list1,list2):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    print(interleave_lists_3)\n    \n    new_list1 = []\n    new_list2 = []\n    new_list3 = []\n    \n    for i in range(len(list1)):\n        new_list1.append(list1[i])\n    for i in range(len(list2)):\n        new_list2.append(list2[i])\n    \n    return(new_list1+new_list2)\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==0:\n        return list3\n    elif len(list2)==0:\n        return list1+list3\n    elif len(list3)==0:\n        return list2+list1\n    else:\n        i=0\n        j=0\n        k=0\n        while i<len(list1):\n            list3[k]=list1[i]\n            i+=1\n        k+=1\n        while j<len(list2):\n            list3[k]=list2[j]\n            j+=1\n        k+=1\n        while k<len(list3):\n            list3[k]=list3[k-1]\n            k+=1\n        return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1[0], list1[1], list1[2] = list1[1], list1[2], list1[0]\n    list2[0], list2[1], list2[2] = list2[1], list2[2], list2[0]\n    list3[0], list3[1], list3[2] = list3[1], list3[2], list3[0]\n    return list1,list2,list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==len(list2)==len(list3):\n        return list(list1) + list3\n    else:\n        return []\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # YOUR CODE HERE\n    if len(list1)!=len(list2):\n        raise Exception('List1 and list2 should have the same length')\n    elif len(list2)!=len(list3):\n        raise Exception('List2 and list3 should have the same length')\n    else:\n        out=[]\n        for i in range(len(list1)):\n            out.append(list1[i] + list2[i] + list3[i])\n        return out\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output=[]\n    while len(list1)!=len(list2):\n        list1.append(list3.pop(0))\n    for i in list1:\n        output.append(i)\n    while len(list2)!=len(list3):\n        list2.append(list3.pop(0))\n    for i in list2:\n        output.append(i)\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1+list2+list3]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output=[]\n    for i in range(len(list1)):\n        output.append(list1[i]+list2[i]+list3[i])\n    return output\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = ()\n    for i in test_tup1:\n        for j in test_tup2:\n            if i!= j:\n                dissimilar_tup += (i,j)\n    return dissimilar_tup\n    \ndef find_distinct(test_tup):\n    '''\n    Write a function to find the distinct elements in the given tuple.\n    '''\n    distinct_tup = ()\n    for i in test_tup:\n        if i not in distinct_tup:\n            distinct_tup += (i)\n    return distinct_tup\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    if test_tup1_len == 0:\n        return 0\n    if test_tup2_len == 0:\n        return 0\n    if test_tup1_len < test_tup2_len:\n        return test_tup2_len-test_tup1_len\n    if test_tup2_len < test_tup1_len:\n        return test_tup2_len-test_tup1_len\n    \n    # Check if the value of the parameter is between 0 and the size of the tuples\n    test_tup1_val = test_tup1[0]\n    test_tup2_val = test_tup2[0]\n    for i in range(test_tup1_len):\n        if test_tup1_val!= test_tup2_val:\n            return i\n    return test_tup1_len-test_tup2_len\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = []\n    b = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            a.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            b.append(j)\n    return a, b\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    if a > b:\n        a,b = b,a\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            break\n    else:\n        return b\n    return find_dissimilar(test_tup1[:i+1], test_tup2[i+1:])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    print(\"FIND: %s --> %s\" % (test_tup1, test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    def diss_sim(test_tup1, test_tup2):\n        # initialize a set to store the test element\n        diss_list = set()\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list1 = sorted(test_tup1)\n    test_list2 = sorted(test_tup2)\n    for i in range(0, len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            pass\n        else:\n            return test_list1[i]\n    return False\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = []\n    lst2 = []\n    for element in test_tup1:\n        lst1.append(element)\n    for element in test_tup2:\n        lst2.append(element)\n    lst1.sort()\n    lst2.sort()\n    dissimilar_elements = []\n    for element in lst1:\n        if element not in lst2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    dissimilar = []\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    \n    for element in test_tup1_set:\n        for element2 in test_tup2_set:\n            if element == element2:\n                continue\n            elif element < element2:\n                if element in test_tup1:\n                    continue\n                elif element2 in test_tup2:\n                    continue\n                else:\n                    dissimilar.append(element)\n            elif element > element2:\n                if element in test_tup2:\n                    continue\n                elif element2 in test_tup1:\n                    continue\n                else:\n                    dissimilar.append(element)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            dissimilar.append(test_tup1[i])\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    for tup in test_tuple[1:]: \n        if even_fnc(tup, even_tuple): \n            even_tuple = tup\n    return even_tuple \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_index, odd_index = 0, 0 \n    for element in test_tuple:\n        if even_fnc(element):\n            even_index += 1\n        else:\n            odd_index += 1\n    return test_tuple[:even_index] + test_tuple[odd_index:]\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list, odd_list = test_tuple[0], test_tuple[1]\n    for ele in even_list:\n        if odd_list.count(ele) % 2 == 0:\n            even_list.remove(ele)\n    for ele in odd_list:\n        if even_list.count(ele) % 2 == 1:\n            odd_list.remove(ele)\n    even_list.extend(odd_list)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements, odd_elements, mixed_elements = [], [], []\n    if type(test_tuple[0]) == tuple:\n        for elem in test_tuple[0]:\n            if elem % 2 == 0:\n                even_elements.append(elem)\n            else:\n                odd_elements.append(elem)\n    else:\n        even_elements.append(test_tuple[0])\n        odd_elements.append(test_tuple[0])\n    for elem in even_elements:\n        if even_fnc(elem):\n            mixed_elements.append(elem)\n    for elem in odd_elements:\n        if odd_fnc(elem):\n            mixed_elements.append(elem)\n    return mixed_elements\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele = []\n    for i in test_tuple: \n        if i % 2 == 0: \n            even_ele.append(i)\n    even_tuple = tuple(even_ele)\n    \n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(test_tuple)\n    print(\"Even elements: \")\n    for element in test_tuple:\n        if isinstance(element, tuple) and len(element) == 2 and element[0] % 2 == 0:\n            test_tuple.remove(element)\n    even_fnc(test_tuple)\n    print(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_set = set(even_fnc(test_tuple[0]))\n    odd_set = set(test_tuple[1])\n    return odd_set - even_set\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    print(test_tuple)\n    print(even_fnc(test_tuple))\n    print(type(test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # define variables\n    evens = []\n    odds = []\n    even_idx = []\n    odd_idx = []\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even = tuple(even_fnc(x) for x in test_tuple)\n    return tuple(x for x in even if x % 2 == 0)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(b+s)*(b+s)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # write your code here\n    return s*s"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for i in range(1,s+1):\n        area += b**i\n    return area\ndef surface_Area_rev(s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for i in range(s,1,-1):\n        area += b**i\n    return area\ndef surface_Area_rev_rev(s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for i in range(1,s+1,1):\n        area += b**i\n    return area\n    \ndef Surface_Area_Recursive(n): \n    '''\n    Write a recursive function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 25\n    else:\n        return Surface_Area_Recursive(n-1) + Surface_Area_Recursive(n-2)\ndef Surface_Area_Recursive_rev(n): \n    '''\n    Write a recursive function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 25\n    else:\n        return Surface_Area_Recursive_rev(n-1) + Surface_Area_Recursive_rev(n-2)\ndef One_Basepair_Recursive(n): \n    '''\n    Write a recursive function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 9\n    else:\n        return One_Basepair_Recursive(n-1) + One_Basepair_Recursive(n-2)\ndef One_Basepair_Recursive_rev(n): \n    '''\n    Write a recursive function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 9\n    else:\n        return One_Basepair_Recursive_rev(n-1) + One_Basepair_Recursive_rev(n-2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A = abs((b + (b/2)) - (s/2))\n    for i in range(s):\n        A += abs((b + (b/2)) - (s/2))\n    return A\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Write your code here\n    #base edge\n    b = int(input())\n    #height\n    h = int(input())\n    \n    #length of base edge and height\n    l = b + h\n    \n    #create pyramid\n    pyramid = [[0 for x in range(l)] for y in range(b)]\n    \n    #write the pyramid for the base edge\n    for i in range(b):\n        for j in range(l):\n            pyramid[i][j] = int(input())\n    \n    #calculate surface area\n    s = 0\n    for i in range(b):\n        for j in range(l):\n            s += abs(pyramid[i][j]-pyramid[i][j+1])\n    print(s)\n    \n    \n    \n    \n    "
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    def normal(l):\n        '''\n        l = length of side of pyramid\n        '''\n        if l==1:\n            return 0\n        if l==2:\n            return 1\n        if l==3:\n            return 2\n        if l==4:\n            return 3\n        if l==5:\n            return 4\n        if l==6:\n            return 5\n        if l==7:\n            return 6\n        if l==8:\n            return 7\n        if l==9:\n            return 8\n    n=normal(s)\n    while(n>0):\n        a=math.sqrt(s*s-l*l)\n        if a==0:\n            break\n        s=a\n        n=normal(s)\n    return s*s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s.append(s[-1])\n    for i in range(len(s)):\n        if len(s) > 1:\n            if s[i] > s[i+1]:\n                s.insert(i+1,s[i+1]*2)\n                s.pop(i)\n            else:\n                s.pop(i)\n    return sum(s)\ndef area_of_pyramid(b,s): \n    '''\n    Write a python function to calculate the area of a pyramid with given base edge and height.\n    '''\n    s.append(s[-1])\n    for i in range(len(s)):\n        if len(s) > 1:\n            if s[i] > s[i+1]:\n                s.insert(i+1,s[i+1]*2)\n                s.pop(i)\n            else:\n                s.pop(i)\n    return sum(s)\ndef area_of_rectangle(b,s):\n    '''\n    Write a python function to calculate the area of rectangle with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef area_of_pentagon(b,s):\n    '''\n    Write a python function to calculate the area of pentagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef area_of_heptagon(b,s):\n    '''\n    Write a python function to calculate the area of heptagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef area_of_octagon(b,s):\n    '''\n    Write a python function to calculate the area of octagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef area_of_circle(b,s):\n    '''\n    Write a python function to calculate the area of circle with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef perimeter(b,s):\n    '''\n    Write a python function to calculate the perimeter of a rectangle with given base edge and height.\n    '''\n    s.append(s[-1])\n    return sum(s)\ndef perimeter_of_rectangle(b,s):\n    '''\n    Write a python function to calculate the perimeter of a rectangle with given base edge and height.\n    '''\n    return sum(s)\ndef perimeter_of_pentagon(b,s):\n    '''\n    Write a python function to calculate the perimeter of pentagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    return sum(s)\ndef perimeter_of_heptagon(b,s):\n    '''\n    Write a python function to calculate the perimeter of heptagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef perimeter_of_octagon(b,s):\n    '''\n    Write a python function to calculate the perimeter of octagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef perimeter_of_circle(b,s):\n    '''\n    Write a python function to calculate the perimeter of circle with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef circumference_of_rectangle(b,s):\n    '''\n    Write a python function to calculate the circumference of rectangle with given base edge and height.\n    '''\n    s.append(s[-1])\n    return sum(s)\ndef circumference_of_pentagon(b,s):\n    '''\n    Write a python function to calculate the circumference of pentagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    return sum(s)\ndef circumference_of_heptagon(b,s):\n    '''\n    Write a python function to calculate the circumference of heptagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef circumference_of_octagon(b,s):\n    '''\n    Write a python function to calculate the circumference of octagon with given base edge and height.\n    '''\n    s.append(s[-1])\n    s.append(s[-1])\n    s.append(s[-1])\n    return sum(s)\ndef circumference_of_circle(b,s):\n    '''\n    Write a python function to calculate the circumference of circle with given base edge and height.\n    '''\n    s.append(s[-1])\n    return sum(s)\ndef to_string(b):\n    '''\n    Write a python function to convert a list to a string with one line per element.\n    '''\n    s = ''\n    for i in b:\n        s += str(i) +''\n    return s\ndef to_float(b):\n    '''\n    Write a python function to convert a list to a float with one line per element.\n    '''\n    s = 0.0\n    for i in b:\n        s += float(i)\n    return s\ndef to_int(b):\n    '''\n    Write a python function to convert a list to an integer with one line per element.\n    '''\n    s = 0\n    for i in b:\n        s += int(i)\n    return s\ndef to_bool(b):\n    '''\n    Write a python function to convert a list to a bool with one line per element.\n    '''\n    s = False\n    for i in b:\n        s += bool(i)\n    return s\ndef to_string(b):\n    '''\n    Write a python function to convert a list to a string with one line per element.\n    '''\n    s = ''\n    for i in b:\n        s += str(i) +''\n    return s\ndef to_list(b):\n    '''\n    Write a python function to convert a list to a list with one line per element.\n    '''\n    s = []\n    for i in b:\n        s.append(str(i))\n    return s\ndef to_dict(b):\n    '''\n    Write a python function to convert a list to a dict with one line per element.\n    '''\n    s = {}\n    for i in b:\n        s[i] = str(i)\n    return s\ndef to_dict_of_list(b):\n    '''\n    Write a python function to convert a list to a dict of list with one line per element.\n    '''\n    s = {}\n    for i in b:\n        s[i[0]] = i[1:]\n    return s\ndef is_in_list(b,l):\n    '''\n    Write a python function to check if a list is contained in another list.\n    '''\n    s = []\n    for i in b:\n        if i in s:\n            return True\n        else:\n            s.append(i)\n    return False\ndef is_in_dict(d,l):\n    '''\n    Write a python function to check if a dictionary i"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 3*s*b**2\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for item in dict1.values():\n        if item:\n            return None\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    i = 1\n    #i=1\n    while i<=num:\n        #i+=1\n        if i==1:\n            n=i\n        elif i==2:\n            n=3*i+1\n        elif i==3:\n            n=3*i+2\n        elif i==4:\n            n=3*i+3\n        else:\n            n=4*i\n        i+=1\n    return n\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_dict = {\"1\":1,\"2\":2,\"3\":6,\"4\":24,\"5\":120,\"6\":720}\n    # Function to return nth catalan number.\n    def catalan(num):\n        # Base case.\n        if num == 1:\n            return 1\n        # Recursive case.\n        elif num == 2:\n            return 3\n        # Recursive case.\n        elif num == 3:\n            return 7\n        # Recursive case.\n        else:\n            return (catalan(num-1) + catalan(num-2))\n    # Return nth catalan number.\n    return catalan_dict[str(num)"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    from math import factorial\n    \n    return factorial(num"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return (num ** 2 + (num - 1) ** 2) ** (num / 2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = [1,2,3,4,5,6,7]\n    print(a)\n    b = [a[i]+a[i+1] for i in range(len(a)-1)]\n    print(b)\n    c = [a[i]*b[i] for i in range(len(a)-1)]\n    print(c)\n    d = [a[i]*b[i]*c[i] for i in range(len(a)-1)]\n    print(d)\n    print(d[-1])\n    print(d[-2])\n    print(d[-3])\n    print(d[-4])\n    print(d[-5])\n    print(d[-6])\n    print(d[-7])\n    print(d[-8])\n    print(d[-9])\n    print(d[-10])\n    print(d[-11])\n    print(d[-12])\n    print(d[-13])\n    print(d[-14])\n    print(d[-15])\n    print(d[-16])\n    print(d[-17])\n    print(d[-18])\n    print(d[-19])\n    print(d[-20])\n    print(d[-21])\n    print(d[-22])\n    print(d[-23])\n    print(d[-24])\n    print(d[-25])\n    print(d[-26])\n    print(d[-27])\n    print(d[-28])\n    print(d[-29])\n    print(d[-30])\n    print(d[-31])\n    print(d[-32])\n    print(d[-33])\n    print(d[-34])\n    print(d[-35])\n    print(d[-36])\n    print(d[-37])\n    print(d[-38])\n    print(d[-39])\n    print(d[-40])\n    print(d[-41])\n    print(d[-42])\n    print(d[-43])\n    print(d[-44])\n    print(d[-45])\n    print(d[-46])\n    print(d[-47])\n    print(d[-48])\n    print(d[-49])\n    print(d[-50])\n    print(d[-51])\n    print(d[-52])\n    print(d[-53])\n    print(d[-54])\n    print(d[-55])\n    print(d[-56])\n    print(d[-57])\n    print(d[-58])\n    print(d[-59])\n    print(d[-60])\n    print(d[-61])\n    print(d[-62])\n    print(d[-63])\n    print(d[-64])\n    print(d[-65])\n    print(d[-66])\n    print(d[-67])\n    print(d[-68])\n    print(d[-69])\n    print(d[-70])\n    print(d[-71])\n    print(d[-72])\n    print(d[-73])\n    print(d[-74])\n    print(d[-75])\n    print(d[-76])\n    print(d[-77])\n    print(d[-78])\n    print(d[-79])\n    print(d[-80])\n    print(d[-81])\n    print(d[-82])\n    print(d[-83])\n    print(d[-84])\n    print(d[-85])\n    print(d[-86])\n    print(d[-87])\n    print(d[-88])\n    print(d[-89])\n    print(d[-90])\n    print(d[-91])\n    print(d[-92])\n    print(d[-93])\n    print(d[-94])\n    print(d[-95])\n    print(d[-96])\n    print(d[-97])\n    print(d[-98])\n    print(d[-99])\n    print(d[-100])\n    print(d[-101])\n    print(d[-102])\n    print(d[-103])\n    print(d[-104])\n    print(d[-105])\n    print(d[-106])\n    print(d[-107])\n    print(d[-108])\n    print(d[-109])\n    print(d[-110])\n    print(d[-111])\n    print(d[-112])\n    print(d[-113])\n    print(d[-114])\n    print(d[-115])\n    print(d[-116])\n    print(d[-117])\n    print(d[-118])\n    print(d[-119])\n    print(d[-120])\n    print(d[-121])\n    print(d[-122])\n    print(d[-123])\n    print(d[-124])\n    print(d[-125])\n    print(d[-126])\n    print(d[-127])\n    print(d[-128])\n    print(d[-129])\n    print(d[-130])\n    print(d[-131])\n    print(d[-132])\n    print(d[-133])\n    print(d[-134])\n    print(d[-135])\n    print(d[-136])\n    print(d[-137])\n    print(d[-138])\n    print(d[-139])\n    print(d[-140])\n    print(d[-141])\n    print(d[-142])\n    print(d[-143])\n    print(d[-144])\n    print(d[-145])\n    print(d[-146])\n    print(d[-147])\n    print(d[-148])\n    print(d[-149])\n    print(d[-150])\n    print(d[-151])\n    print(d[-152])\n    print(d[-153])\n    print(d[-154])\n    print(d[-155])\n    print(d[-156])\n    print(d[-157])\n    print(d[-158])\n    print(d[-159])\n    print(d[-160])\n    print(d[-161])\n    print(d[-162])\n    print(d[-163])\n    print(d[-164])\n    print(d[-165])\n    print(d[-166])\n    print(d[-167])\n    print(d[-168])\n    print(d[-169])\n    print(d[-170])\n    print(d[-171])\n    print(d[-172])\n    print(d[-173])\n    print(d[-174])\n    print(d[-175])\n    print(d[-176])\n    print(d[-177])\n    print(d[-178])\n    print(d[-179])\n    print(d[-180])\n    print(d[-181])\n    print(d[-182])\n    print(d[-183])\n    print(d[-184])\n    print(d[-185])\n    print(d[-186])\n    print(d[-187])\n    print(d[-188])\n    print(d[-189])\n    print(d[-190])\n    print(d[-191])\n    print(d[-192])\n    print(d[-193])\n    print(d[-194])\n    print(d[-195])\n    print(d[-196])\n    print(d[-197])\n    print(d[-198])\n    print(d[-199])\n    print(d[-200])\n    print(d[-201])\n    print(d[-202])\n    print(d[-203])\n    print(d[-204])\n    print(d[-205])\n    print(d[-206])\n    print(d[-207])\n    print(d[-208])\n    print(d[-209])\n    print(d[-210])\n    print("
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = 1\n    if num <= 0:\n        return 0\n    for i in range(1, num + 1):\n        c *= (i - 1)\n        if i == num:\n            return c\n    return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    i = 0\n    k = 0\n    n = 0\n    while(i<num):\n        if(i+1==num):\n            k = i-1\n        else:\n            k = i+1\n        n = n + (k*(k+1))/2\n        i = i+1\n    return n\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # 1\n    if num==0:\n        return 0\n    # 2\n    elif num==1:\n        return 1\n    # 3\n    else:\n        return (num + (catalan_number(num-1) + catalan_number(num-2)))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number = 1\n    for i in range(num):\n        catalan_number *= (i+1)\n    return catalan_number\n    \ndef main():\n    '''\n    Lets us count the square of the numbers from 1 to 100.\n    '''\n    print('Count of square of the numbers from 1 to 100.')\n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n    print('')\n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):\n        print('%d*%d=%d' %(i,i,i*i), end='\\t')\n        \n        \n    print('==================')\n    \n    for i in range(1,101):"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = 0\n    while (n <= num):\n        n += 1\n        numbers.append(numbers[n-1] + numbers[n-2] + numbers[n-3])\n    return numbers[num]\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # pattern = r'(ly|lyl)'\n    pattern = r'(ly|lyl|lyl)'\n    regex = re.compile(pattern)\n    match = regex.findall(text)\n    if len(match) > 0:\n        return len(match)\n    return 0\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    positions = []\n    final_list = []\n    final_list_ly = []\n    adverbs = re.findall(\"(ly|ly|nay|nay|nay|r\u00e2y|r\u00e2y|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ies|r\u00e2ie"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in range(len(text)):\n        for j in range(i+1,len(text)):\n            if text[i:j].endswith(\"ly\") and j>i:\n                return text[i:j]\n    return text\ndef find_inflection(text):\n    '''\n    Write a function to find the inflection of the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in range(len(text)):\n        for j in range(i+1,len(text)):\n            if text[i:j].endswith(\"ly\") and j>i:\n                return text[i:j]\n    return text\ndef check_single_word(text,single_word):\n    '''\n    Write a function to check if a sentence contains a single word given in input.\n    '''\n    for word in single_word:\n        if word in text:\n            return True\n    return False\ndef get_single_word(text,single_word):\n    '''\n    Write a function to get a single word in a given sentence given in input.\n    '''\n    for word in single_word:\n        if word in text:\n            return word\n    return None\ndef get_first_adverb(text,adverb):\n    '''\n    Write a function to get the first adverb in a given sentence given in input.\n    '''\n    for adverb in adverb:\n        if adverb in text:\n            return adverb\n    return None\ndef get_first_inflection(text,inflection):\n    '''\n    Write a function to get the first inflection in a given sentence given in input.\n    '''\n    for inflection in inflection:\n        if inflection in text:\n            return inflection\n    return None\ndef get_inflection(text):\n    '''\n    Write a function to get the inflection in a given sentence given in input.\n    '''\n    for inflection in inflection:\n        if inflection in text:\n            return inflection\n    return None\ndef get_all_words(text):\n    '''\n    Write a function to get all words in a given sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\":\n            yield word\ndef get_all_single_words(text):\n    '''\n    Write a function to get all single words in a given sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\":\n            yield word\ndef get_all_single_words_without_singles(text):\n    '''\n    Write a function to get all single words without singular words in a given sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\":\n            yield word\ndef get_all_single_words_with_singles(text):\n    '''\n    Write a function to get all single words with singular words in a given sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\":\n            yield word\ndef get_all_single_words_without_singles_with_adverb(text):\n    '''\n    Write a function to get all single words without singular words with adverb in a given sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" in word:\n            yield word\ndef get_all_single_words_without_singles_with_adverb_without_inflection(text):\n    '''\n    Write a function to get all single words without singular words with adverb and inflection in a given sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_with_adverb_without_inflection_and_inflection(text):\n    '''\n    Write a function to get all single words without singular words with adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb(text):\n    '''\n    Write a function to get all single words without singular words without adverb in a given sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection_and_inflection(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection_and_inflection_without_adverb(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection_and_inflection_without_adverb(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection_and_inflection_without_adverb_without_inflection(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection_and_inflection_without_adverb(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection_and_inflection_without_adverb_without_inflection(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n    for word in text:\n        if word!= \",\" and word!= \".\" and word!= \",\" and \"ly\" not in word:\n            yield word\ndef get_all_single_words_without_singles_without_adverb_without_inflection_and_inflection_without_adverb(text):\n    '''\n    Write a function to get all single words without singular words without adverb and inflection and inflection of the sentence given in input.\n    '''\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Step 1 - find all the first adverb ending with ly and their positions in the given string\n    # Step 2 - find the first adverb ending with ly and its positions in the given string\n    # Step 3 - return all the first adverb ending with ly, ly and its position\n    # Step 4 - write the result as a tuple in a list\n    # Step 5 - check if the string is empty or not\n    # Step 6 - if it is, you can return the string with the return value as a tuple\n    # Step 7 - if not, you should return the value as a string and the tuple in a list\n    # Step 8 - use regex to find the first adverb ending with ly and its positions in the given string\n    # Step 9 - find the first adverb ending with ly and its positions in the given string\n    # Step 10 - write the result as a tuple in a list\n    # Step 11 - check if the string is empty or not\n    # Step 12 - if it is, you can return the string with the return value as a tuple\n    # Step 13 - if not, you should return the value as a string and the tuple in a list\n    # Step 14 - use regex to find the first adverb ending with ly and its positions in the given string\n    # Step 15 - find the first adverb ending with ly and its positions in the given string\n    # Step 16 - write the result as a tuple in a list\n    # Step 17 - check if the string is empty or not\n    # Step 18 - if it is, you can return the string with the return value as a tuple\n    # Step 19 - if not, you should return the value as a string and the tuple in a list\n    # Step 20 - use regex to find the first adverb ending with ly and its positions in the given string\n    # Step 21 - find the first adverb ending with ly and its positions in the given string\n    # Step 22 - write the result as a tuple in a list\n    # Step 23 - check if the string is empty or not\n    # Step 24 - if it is, you can return the string with the return value as a tuple\n    # Step 25 - if not, you should return the value as a string and the tuple in a list\n    # Step 26 - use regex to find the first adverb ending with ly and its positions in the given string\n    adverbs = []\n    adverb = \"\"\n    adverb_positions = []\n    for i in range(len(text)):\n        if text[i].isupper() and text[i] == \"LY\":\n            adverbs.append(text[i])\n        if text[i].isupper():\n            adverb = text[i]\n    #print(adverbs)\n    for i in range(len(adverbs)):\n        if adverbs[i].endswith(adverb):\n            adverb_positions.append(i)\n    #print(adverb_positions)\n    return adverbs, adverb_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = text.find('ly')\n    if pos == -1:\n        print(\"Error\")\n        return -1\n    pos2 = text.find('ly', pos + 1)\n    if pos2 == -1:\n        return -1\n    else:\n        return pos2, pos\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    previous_pos = 0\n    for pos in range(len(text)):\n        if text[pos] =='':\n            adverbs.append(text[previous_pos:pos+1])\n            previous_pos = pos + 1\n    adverbs.append(text[previous_pos:])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['am', 'of', 'and', 'an', 'or', 'a', 'an', 'for', 'and', 'an', 'of', 'or', 'as', 'as', 'an', 'of', 'an', 'and', 'or', 'as', 'of', 'an', 'for', 'an', 'and', 'or', 'as', 'an', 'for', 'an', 'and', 'or', 'an', 'and', 'an', 'for', 'an', 'and', 'an', 'for', 'an', 'and', 'an', 'an', 'and', 'an', 'and', 'and', 'an', 'and', 'and', 'an', 'and', 'an', 'and', 'and', 'an', 'and', 'an', 'and', 'and', 'an', 'and', 'and', 'and', 'an', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', 'and', "
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def get_adverb(text):\n        '''\n        Check if the adverb is ending with ly.\n        '''\n        if 'ly' in text:\n            # Find the ending adverb\n            pattern = r'ly$'\n            index = text.rfind(pattern)\n            # Check if the adverb ends with ly\n            if index >= 0:\n                # Get the ending adverb\n                adverb = text[index+len(pattern):]\n                # Return the ending adverb\n                return adverb\n        # If the adverb is not ending with ly\n        return ''\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's an adverb ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly|ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_adverbs_all(text):\n    '''\n    Write a function to find all adverbs ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's an adverb ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly|ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_punctuation(text):\n    '''\n    Write a function to find the first punctuation ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's a punctuation ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly|ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_punctuation_all(text):\n    '''\n    Write a function to find all punctuation ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's a punctuation ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly|ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_determiners(text):\n    '''\n    Write a function to find the first determiner ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's a determiner ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_determiners_all(text):\n    '''\n    Write a function to find all determiners ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's a determiner ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_adj_verbs(text):\n    '''\n    Write a function to find all adj. verbs ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's an adj. verb ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly|ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_adj_verbs_all(text):\n    '''\n    Write a function to find all adj. verbs ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's an adj. verb ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly|ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_interrogative(text):\n    '''\n    Write a function to find the first interrogative ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text += i\n                if full_text.endswith('ly'):\n                    break\n    #check if there's an interrogative ending with ly\n    if full_text.endswith('ly'):\n        #define regex pattern\n        pattern = r'ly|ly\\*'\n        #find the first match\n        result = re.search(pattern, full_text)\n        if result is None:\n            return 0\n        else:\n            return result.group(0)\n    else:\n        return 0\ndef find_interrogative_all(text):\n    '''\n    Write a function to find all interrogative ending with ly and its positions in a given string.\n    '''\n    #make variable to store full text\n    full_text = ''\n    for i in text:\n        if i == 'ly':\n            full_text += i\n        else:\n            if len(full_text) > 0:\n                full_text +"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # get all the ending ly\n    ly = re.findall(r'\\w+ly', text)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Do a modified quick sort\n    #  iterate through the given array and get the heap for every item\n    #  sort the heap to get the most expensive\n    #  return the top n\n    return sorted(items, key = lambda x: x[2], reverse=True)[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    n_items = heapq.nlargest(n, items)\n    for item in n_items:\n        print(item)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,[items[i][1],items[i][0]])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    maxheap = []\n    for i in range(len(items)):\n        heapq.heappush(maxheap,[items[i][1],i])\n    \n    nums = [heapq.heappop(maxheap)[1] for i in range(n)]\n    return nums\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    def heap_f(item):\n        return item[1]\n    def heap_g(item):\n        return -item[1]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    print(f'Items in dataset: {items}')\n    if len(items)>n:\n        n=n\n    heapq.heapify(items)\n    for i in range(len(items)-n, len(items)):\n        heapq.heappush(items, items[i])\n        heapq.heappop(items)\n    return heapq.heapify(items)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[0],item[1]))\n    heapq.heapify(heap)\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap from the given dataset\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n    \n    # Create a heap from the given dataset and push the items in the heap\n    heapq.heapify(heap)\n    result = heap[:n]\n    print(\"Heap Result\")\n    print(result)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    '''\n    * TO DO *\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: Write your code here\n    heap=[]\n    heapq.heapify(heap)\n    for i in items:\n        if heapq.heappop(heap)>i:\n            return i\n    return 'no expensive items'\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    elem_list = l\n    for i in range(n):\n        elem_list.append(elem_list[i])\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 0:\n        return ['']\n    elif len(l) == 1:\n        return [l[0]]\n    else:\n        return [l[0], l[1:]]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        l[i] = l[i][:n]\n    return l\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_l = []\n    for i in range(len(l)):\n        new_l.append(l[i])\n    return new_l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l2 = []\n    for i in range(n):\n        l2.append(l[i])\n    return l2\n    "
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[0:n]\n    b = l[n:]\n    return a,b\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = ()\n    for i in range(len(listx)):\n        tuplex = tuplex + (listx[i],)\n    return tuplex\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s=list(set(nums))\n    return max(s)-min(s)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(set(nums) - set(nums[::-1])"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(list(map(abs, nums)))-min(list(map(abs, nums)))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) <= 1:\n        return nums[0] - nums[0]\n    \n    l, r = 0, len(nums)-1\n    while l < r:\n        if nums[l] + nums[r] < nums[l+1] + nums[r-1]:\n            l += 1\n        elif nums[l] + nums[r] > nums[l-1] + nums[r+1]:\n            r -= 1\n        else:\n            return nums[l] - nums[l-1]\n    \n    return nums[-1] - nums[l]\n    \n    '''\n    In Python 3, the difference is calculated as the difference between the two elements as follows:\n    if the first element is greater than the second, then the first element is subtracted and the second element is added to the result.\n    if the first element is greater than the second, then the first element is subtracted and the second element is added to the result.\n    If the first element is lesser than the second, then the first element is subtracted and the second element is added to the result.\n    \n    ''"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_value = min(nums)\n    max_value = max(nums)\n    if min_value == max_value:\n        return 0\n    elif min_value == max_value:\n        return min_value - nums[0]\n    else:\n        return max_value - nums[-1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] < 0:\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n                else:\n                    return nums[i] - nums[j]\n    return nums[i] - nums[j]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Write your code here.\n    min_val = min(nums)\n    max_val = max(nums)\n    dif = max_val - min_val\n    return dif\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = nums[0]\n    small = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] > big:\n            big = nums[i]\n            \n        if nums[i] < small:\n            small = nums[i]\n            \n    return(small - big)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Your code here\n    return (nums[-1] - nums[0])\n    \ndef main():\n    \"\"\"Reads from STDIN an integer n and print the difference between the largest and smallest number.\n    Note: If the smallest number is less than the largest number, then you should only output the number on its own.\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert a > 0 and b > 0, \"Numbers must be positive\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_square(a,b):\n        if b==0:\n            return True\n        if a==b:\n            return True\n        if a%b==0:\n            return False\n        else:\n            return perfect_square(b,b-a)\n    \n    return perfect_square(a,b)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    answer = []\n    for i in range(1, a+1):\n        if i == 1:\n            answer.append(i)\n        elif a*a+i == b:\n            answer.append(i)\n        elif i*i == b:\n            answer.append(i)\n        elif a*b-i*i == b:\n            answer.append(i)\n        else:\n            continue\n    return answer\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return []\n    elif b == 1:\n        return [a]\n    elif b == 2:\n        return [a,a]\n    elif b == 3:\n        return [a,a,a]\n    elif b == 4:\n        return [a,a,a,a]\n    elif b == 5:\n        return [a,a,a,a,a]\n    elif b == 6:\n        return [a,a,a,a,a,a]\n    elif b == 7:\n        return [a,a,a,a,a,a,a]\n    elif b == 8:\n        return [a,a,a,a,a,a,a,a]\n    elif b == 9:\n        return [a,a,a,a,a,a,a,a,a]\n    elif b == 10:\n        return [a,a,a,a,a,a,a,a,a,a]\n    elif b == 11:\n        return [a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 12:\n        return [a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 13:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 14:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 15:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 16:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 17:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 18:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 19:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 20:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 21:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 22:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 23:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 24:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 25:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 26:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 27:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 28:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 29:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 30:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 31:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 32:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 33:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 34:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 35:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 36:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 37:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 38:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 39:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 40:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 41:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 42:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 43:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 44:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 45:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 46:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    elif b == 47:\n        return [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return a\n    if b == 1:\n        return a\n    if b == 2:\n        return a\n    if b == 3:\n        return a\n    if b == 4:\n        return a\n    if b == 5:\n        return a\n    if b == 6:\n        return a\n    if b == 7:\n        return a\n    if b == 8:\n        return a\n    if b == 9:\n        return a\n    if b == 10:\n        return a\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return b**2 - a**2 - b**2 + a**2 == 0\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if(b < a):\n        return False\n    if(b == a):\n        return True\n    elif(b > a):\n        return False\n    else:\n        a = abs(a)\n        b = abs(b)\n        for i in range(a, b):\n            if(i**2 == i and i%2 == 0):\n                return False\n        return True\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b<a:\n        return\n    if a == b:\n        return\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    flag = 1\n    # We have to keep dividing and checking of b to a before multiplying.\n    while (a % b)!= 0:\n        flag = 0\n        a = b\n        b = a%b\n    #If we have not reached a^b = 0,\n    #we can multiply a to b.\n    if flag == 1:\n        return perfect_squares(a,b)\n    return b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (b < a):\n        print(\"[error]\", b, \"is not perfect square.\")\n        return\n    if (b == a):\n        return\n    x = a\n    y = b\n    sum = 0\n    while (x!= y):\n        if (x * x == y * y):\n            sum += 1\n            x = y\n            y = x\n        elif (x * x > y * y):\n            y = x\n            x = y\n        else:\n            x = x * x\n            y = y * y\n    if (sum == 0):\n        return\n    else:\n        print(\"[info]\", y, \"is perfect square.\")\n        return y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    ang = cmath.phase(x,y)\n    xr = cmath.rect(x)\n    yr = cmath.rect(y)\n    xr_rad = xr.real()\n    yr_rad = yr.real()\n    return xr_rad,yr_rad\ndef polar_rect_to_polar(xr_rad,yr_rad):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    rad_phi = cmath.phase(xr_rad,yr_rad)\n    rad_theta = cmath.phase(yr_rad,xr_rad)\n    rad_phi = rad_phi*cmath.pi/180\n    rad_theta = rad_theta*cmath.pi/180\n    return rad_phi,rad_theta\ndef polar_rect_to_polar_angles(xr_rad,yr_rad):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    phi = cmath.phase(xr_rad,yr_rad)\n    theta = cmath.phase(yr_rad,xr_rad)\n    phi = phi*cmath.pi/180\n    theta = theta*cmath.pi/180\n    return phi,theta\ndef polar_polar_to_polar_angles(phi,theta):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    rad_phi = cmath.phase(phi,theta)\n    rad_theta = cmath.phase(theta,phi)\n    rad_phi = rad_phi*cmath.pi/180\n    rad_theta = rad_theta*cmath.pi/180\n    return rad_phi,rad_theta\ndef polar_polar_to_polar_angles_all_knots(phi,theta,k):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    phi = k_phi*cmath.pi/180\n    theta = k_theta*cmath.pi/180\n    return phi,theta\ndef polar_polar_to_polar_angles_all_knots_all_points(phi,theta,k,p):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    k_phi = k_phi*cmath.pi/180\n    k_theta = k_theta*cmath.pi/180\n    phi = k_phi*p\n    theta = k_theta*p\n    return phi,theta\ndef polar_polar_to_polar_angles_all_knots_all_points_all_points(phi,theta,k,p,q,r):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    k_phi = k_phi*cmath.pi/180\n    k_theta = k_theta*cmath.pi/180\n    phi = k_phi*p\n    theta = k_theta*p\n    q = k_phi*q\n    r = k_theta*r\n    return phi,theta,q,r\ndef polar_polar_to_polar_angles_all_knots_all_points_all_points_all_points(phi,theta,k,p,q,r,t):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    k_phi = k_phi*cmath.pi/180\n    k_theta = k_theta*cmath.pi/180\n    phi = k_phi*p\n    theta = k_theta*p\n    q = k_phi*q\n    r = k_theta*r\n    t = k_phi*t\n    return phi,theta,q,r,t\ndef polar_polar_to_polar_angles_all_knots_all_points_all_points_all_points_all_points(phi,theta,k,p,q,r,t,u):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    k_phi = k_phi*cmath.pi/180\n    k_theta = k_theta*cmath.pi/180\n    phi = k_phi*p\n    theta = k_theta*p\n    q = k_phi*q\n    r = k_theta*r\n    t = k_phi*t\n    u = k_theta*u\n    return phi,theta,q,r,t,u\ndef polar_polar_to_polar_angles_all_knots_all_points_all_points_all_points_all_points_all_points_all_points_all_points(phi,theta,k,p,q,r,t,u,v):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    k_phi = k_phi*cmath.pi/180\n    k_theta = k_theta*cmath.pi/180\n    phi = k_phi*p\n    theta = k_theta*p\n    q = k_phi*q\n    r = k_theta*r\n    t = k_phi*t\n    u = k_theta*u\n    v = k_phi*v\n    return phi,theta,q,r,t,u,v\ndef polar_polar_to_polar_angles_all_knots_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points(phi,theta,k,p,q,r,t,u,v,w):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    k_phi = k_phi*cmath.pi/180\n    k_theta = k_theta*cmath.pi/180\n    phi = k_phi*p\n    theta = k_theta*p\n    q = k_phi*q\n    r = k_theta*r\n    t = k_phi*t\n    u = k_theta*u\n    v = k_phi*v\n    w = k_theta*w\n    return phi,theta,q,r,t,u,v,w\ndef polar_polar_to_polar_angles_all_knots_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points_all_points(phi,theta,k,p,q,r,t,u,v,w,x,y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    k_phi = cmath.phase(phi,theta)\n    k_theta = cmath.phase(theta,phi)\n    k_phi = k_phi*cmath.pi/180\n    k_theta = k_theta*cmath.pi/180\n    phi = k"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x/2\n    b = y/2\n    c = cmath.phase(x)\n    d = cmath.phase(y)\n    return a,b,c,d\ndef polar_rect_invert(a,b,c,d):\n    '''\n    Write a function to invert polar coordinates and convert it to rectangular.\n    '''\n    x = cmath.phase(a*x+b*y)\n    y = cmath.phase(a*y-b*x)\n    return x,y\ndef polar_rect_invert_rect(a,b,c,d):\n    '''\n    Write a function to invert polar coordinates and convert it to rectangular.\n    '''\n    x = cmath.phase(a*cmath.cos(b)-d*cmath.sin(b))\n    y = cmath.phase(a*d*cmath.cos(b)+cmath.phase(a*cmath.sin(b)-d*cmath.sin(b)))\n    return x,y\ndef polar_rect_invert_rec(a,b,c,d):\n    '''\n    Write a function to invert polar coordinates and convert it to rectangular.\n    '''\n    x = cmath.phase(a*cmath.cos(b)-d*cmath.sin(b))\n    y = cmath.phase(a*d*cmath.cos(b)+cmath.phase(a*cmath.sin(b)-d*cmath.sin(b)))\n    return x,y\ndef polar_rec(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = x/2\n    b = y/2\n    c = cmath.phase(x)\n    d = cmath.phase(y)\n    return a,b,c,d\ndef polar_rec_invert(a,b,c,d):\n    '''\n    Write a function to invert polar coordinates and convert it to rectangular.\n    '''\n    x = cmath.phase(a*x+b*y)\n    y = cmath.phase(a*y-b*x)\n    return x,y\ndef polar_rec_invert_rect(a,b,c,d):\n    '''\n    Write a function to invert polar coordinates and convert it to rectangular.\n    '''\n    x = cmath.phase(a*cmath.cos(b)-d*cmath.sin(b))\n    y = cmath.phase(a*d*cmath.cos(b)+cmath.phase(a*cmath.sin(b)-d*cmath.sin(b)))\n    return x,y\ndef polar_rec_invert_rec(a,b,c,d):\n    '''\n    Write a function to invert polar coordinates and convert it to rectangular.\n    '''\n    x = cmath.phase(a*cmath.cos(b)-d*cmath.sin(b))\n    y = cmath.phase(a*d*cmath.cos(b)+cmath.phase(a*cmath.sin(b)-d*cmath.sin(b)))\n    return x,y\ndef polar_conj(x,y):\n    '''\n    Write a function to convert polar coordinates to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_conj_invert(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_conj_invert_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_conj_invert_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_conj_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_conj(x,y):\n    '''\n    Write a function to convert polar coordinates to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_conj_invert(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_conj_invert_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_conj_invert_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to invert polar coordinates and convert it to conjugate coordinates.\n    '''\n    return (x,y)\ndef polar_rec_invert_rec_rec(x,y):\n    '''\n    Write a function to i"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # # Example Usage: \n    # rect_coordinates = polar_rect(2,3)\n    # print(rect_coordinates)\n    #\n    # # Function to convert polar coordinates to rectangular coordinates\n    # def polar_rect(x,y):\n    #     # Input: polar coordinates x,y\n    #     # Output: rectangular coordinates\n    #     if x > 0:\n    #         x = abs(x)\n    #         return ((y + 1) * abs(cmath.polar(x)) - 1) / (2 * y)\n    #\n    # # Function to convert rectangular coordinates to polar coordinates\n    # def polar_coord(x,y):\n    #     # Input: rectangular coordinates x,y\n    #     # Output: polar coordinates\n    #     if y > 0:\n    #         y = abs(y)\n    #         return x * (2 * cmath.polar(y)) - y\n    #\n    # # Function to convert polar coordinates to rectangular coordinates\n    # def polar_coord(x,y):\n    #     # Input: polar coordinates x,y\n    #     # Output: rectangular coordinates\n    #     if x > 0:\n    #         x = abs(x)\n    #         return y * (2 * cmath.polar(x)) - 1\n    #\n    # # Function to convert polar coordinates to rectangular coordinates\n    # def polar_coord(x,y):\n    #     # Input: polar coordinates x,y\n    #     # Output: rectangular coordinates\n    #     return (y * (2 * cmath.polar(x)) - 1) / (2 * x)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    R = 6378.0\n    phi = cmath.pi*x/180.0\n    theta = cmath.asin(y/R)\n    x2 = R*R*cmath.cos(phi)\n    y2 = R*R*cmath.sin(phi)\n    return x2,y2\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(y)\n    phi = cmath.phase(x)\n    if phi <= -np.pi:\n        phi += 2*np.pi\n    if phi >= np.pi:\n        phi -= 2*np.pi\n    return x/np.cos(theta), y/np.sin(theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    polar_x = math.sqrt(x**2+y**2)\n    polar_y = 2*cmath.pi*x/polar_x\n    return polar_x, polar_y\ndef polar_rect2(polar_x, polar_y):\n    '''\n    Write a function to convert rectangular polar coordinates to polar coordinates.\n    '''\n    import math\n    polar_y = 2*math.pi*math.sqrt(polar_x**2+polar_y**2)\n    return polar_y, polar_x\ndef polar_y_x(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_y_x2(polar_x, polar_y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_y_x3(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_x_y(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return y,x\ndef polar_x_y2(polar_x, polar_y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_y_x2(polar_y, polar_x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_x_y2(polar_x, polar_y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_y_x3(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x4(polar_y, polar_x):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x5(polar_y, polar_x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x6(polar_y, polar_x):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x7(polar_y, polar_x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x8(polar_y, polar_x):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x9(polar_y, polar_x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x10(polar_y, polar_x):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x11(polar_y, polar_x):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_y_x12(polar_y, polar_x):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    y = polar_y * math.cos(polar_x)\n    x = polar_y * math.sin(polar_x)\n    return x,y\ndef polar_x_y2(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_x * math.sin(polar_y)\n    return x,y\ndef polar_x_y3(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_x_y4(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_x * math.sin(polar_y)\n    return x,y\ndef polar_x_y5(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_x_y6(polar_x, polar_y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    import math\n    x = polar_x * math.cos(polar_y)\n    y = polar_y * math.sin(polar_y)\n    return x,y\ndef polar_x_y7(polar_x, polar_y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    x = polar_x * mat"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if abs(x) >= abs(y):\n        angle = math.atan(y/x)\n    else:\n        angle = math.atan(x/y)\n    return angle\ndef angle_in_circle(x,y):\n    '''\n    Write a function to calculate the angle in circle\n    '''\n    angle = polar_rect(x,y)\n    angle = math.degrees(angle)\n    return angle\ndef normalize(value):\n    '''\n    normalize the given value\n    '''\n    angle = math.atan(value/100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize2(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize3(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize4(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize5(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize6(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize7(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize8(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize9(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize10(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize11(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize12(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize13(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize14(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize15(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize16(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize17(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize18(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize19(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize20(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize21(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize22(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize23(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize24(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize25(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize26(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize27(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize28(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize29(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize30(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize31(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize32(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize33(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize34(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize35(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize36(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize37(value):\n    '''\n    normalize the given value\n    '''\n    angle = polar_rect(value,100000)\n    angle = math.degrees(angle)\n    return angle\ndef normalize38(value):\n    '''\n    normalize the given value\n    '''\n    angl"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    '''\n    import math\n    import numpy\n    x = numpy.array(x)\n    y = numpy.array(y)\n    # x = x[:,numpy.newaxis]\n    # y = y[:,numpy.newaxis]\n    r = numpy.sqrt(x**2 + y**2)\n    angle = numpy.arctan2(y,x)\n    r = r*180/numpy.pi\n    angle = angle*180/numpy.pi\n    '''\n    # alpha = numpy.arctan2(y,x)\n    # beta = numpy.arctan2(x,y)\n    # gamma = numpy.arctan2(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x;\n    phi=y\n    phi=cmath.phase(phi)\n    a=cmath.sqrt(r**2+phi**2)\n    b=r/a\n    return b,a\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = complex(x,y)\n    az, theta = cmath.polar(a)\n    return az,theta\ndef polar_rect_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates\n    '''\n    a = complex(x,y)\n    az, theta = cmath.polar(a)\n    return az,theta\ndef polar_rect_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates\n    '''\n    a = complex(x,y,z)\n    az, theta = cmath.polar(a)\n    return az,theta\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    # newList.pop()\n    # newList.append(newList.pop(0))\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1):\n        newList[i], newList[len(newList)-1-i] = newList[len(newList)-1-i], newList[i]\n    \n    return newList\n    \nprint(swap_List([1, 2, 3, 4, 5, 6]))"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # start with a copy of the list \n    newListCopy = newList[:]\n    # loop through the list and swap the first and last element\n    for index in range(len(newList)):\n        newListCopy[index], newListCopy[index+1] = newListCopy[index+1], newListCopy[index]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Code here\n    a = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = a\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Use a swap method to modify the original list\n    originalList = newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList)<=2:\n        return newList\n    else:\n        middle = len(newList)//2\n        left = newList[:middle]\n        right = newList[middle:]\n        return swap_List(left) + right + swap_List(right)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[1]\n    newList[1] = temp\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        print(\"List is empty\")\n    else: \n        print(newList[0], newList[-1])\n        newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # iterating through the list\n    for i in range(len(newList) - 1):\n        # first element is now the new one\n        newList[i], newList[len(newList) - 1 - i] = newList[len(newList) - 1 - i], newList[i]\n    return newList\n    \n    "
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        j = 1\n        while j <= k:\n            sum += i * j\n            j += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0: return 1\n    return binomial_Coeff(n-1,k) * binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 0\n    for i in range(n): \n        for j in range(1,k+1): \n            if i == 0: \n                C = C + (k-1) * (j * binomial_Coeff(n-1, k-1)) \n            elif i == 1: \n                C = C + j * binomial_Coeff(n-1, k) \n            else: \n                C = C + (k-1) * (j * binomial_Coeff(n-1, k)) \n    return C\nn = 2\nk = 3\nprint(binomial_Coeff(n, k)"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    for i in range(k):\n        coeff = coeff * (n-i)\n    return coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    prod = 1\n    for i in range(n-k+1):\n        prod = prod*(i+1)\n    return prod\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    else:\n        return n*binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n <= 1: \n        return 1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return reduce(operator.mul, range(1, n + 1), 1) * (n - k + 1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k==0):\n        return 1\n    else:\n        return binomial_Coeff(n,k-1) * binomial_Coeff(n-1,k)\ndef sum_of_consecutive_binomials(n):\n    '''\n    Find the sum of consecutive binomials.\n    '''\n    return binomial_Coeff(n,0) + binomial_Coeff(n,1) * sum_of_consecutive_binomials(n-1)\ndef calculate_sum_of_consecutive_binomials(n):\n    '''\n    Find the sum of consecutive binomials.\n    '''\n    return sum_of_consecutive_binomials(n) * n\ndef is_prime(n):\n    '''\n    Check if a number is a prime.\n    '''\n    if (n==2):\n        return True\n    for i in range(2,n//2):\n        if (n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for i in range(n):\n        if(i>0):\n            s += binomial_coeff(i,k)\n    return s\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    ip = ip.lstrip('0')\n    print(ip)\n    if (len(ip) > 0):\n        ip = ip[0:4]\n        print(ip)\n        ip = ip.lower()\n        print(ip)\n        return ip\n    else:\n        return ip\ndef removezero_mac(mac):\n    '''\n    Write a function to remove leading zeroes from an mac address.\n    '''\n    mac = str(mac)\n    mac = mac.lstrip('0')\n    print(mac)\n    if (len(mac) > 0):\n        mac = mac[0:4]\n        print(mac)\n        mac = mac.lower()\n        print(mac)\n        return mac\n    else:\n        return mac\ndef removezero_ip_port(ip, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    ip = ip.lstrip('0')\n    print(ip)\n    if (len(ip) > 0):\n        ip = ip[0:4]\n        print(ip)\n        ip = ip.lower()\n        print(ip)\n        return ip\n    else:\n        return ip\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    port = str(port)\n    port = port.lstrip('0')\n    print(port)\n    if (len(port) > 0):\n        port = port[0:4]\n        print(port)\n        port = port.lower()\n        print(port)\n        return port\n    else:\n        return port\ndef removezero_exp(exp):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    exp = str(exp)\n    exp = exp.lstrip('0')\n    print(exp)\n    if (len(exp) > 0):\n        exp = exp[0:4]\n        print(exp)\n        exp = exp.lower()\n        print(exp)\n        return exp\n    else:\n        return exp\ndef removezero_exp_port(exp, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    exp = str(exp)\n    exp = exp.lstrip('0')\n    print(exp)\n    if (len(exp) > 0):\n        exp = exp[0:4]\n        print(exp)\n        exp = exp.lower()\n        print(exp)\n        return exp\n    else:\n        return exp\ndef removezero_exp_port_size(exp, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    exp = str(exp)\n    exp = exp.lstrip('0')\n    print(exp)\n    if (len(exp) > 0):\n        exp = exp[0:4]\n        print(exp)\n        exp = exp.lower()\n        print(exp)\n        return exp\n    else:\n        return exp\ndef removezero_numbers(num):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        print(num)\n        return num\n    else:\n        return num\ndef removezero_numbers_port(num, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        print(num)\n        return num\n    else:\n        return num\ndef removezero_numbers_port_size(num, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        print(num)\n        return num\n    else:\n        return num\ndef removezero_port_num(num, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        print(num)\n        return num\n    else:\n        return num\ndef removezero_port_num_size(num, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        print(num)\n        return num\n    else:\n        return num\ndef removezero_exp_port(exp, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    exp = str(exp)\n    exp = exp.lstrip('0')\n    print(exp)\n    if (len(exp) > 0):\n        exp = exp[0:4]\n        print(exp)\n        exp = exp.lower()\n        print(exp)\n        return exp\n    else:\n        return exp\ndef removezero_exp_port_size(exp, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    exp = str(exp)\n    exp = exp.lstrip('0')\n    print(exp)\n    if (len(exp) > 0):\n        exp = exp[0:4]\n        print(exp)\n        exp = exp.lower()\n        print(exp)\n        return exp\n    else:\n        return exp\ndef removezero_exp_port_size_size(exp, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    exp = str(exp)\n    exp = exp.lstrip('0')\n    print(exp)\n    if (len(exp) > 0):\n        exp = exp[0:4]\n        print(exp)\n        exp = exp.lower()\n        print(exp)\n        return exp\n    else:\n        return exp\ndef removezero_num(num):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        print(num)\n        return num\n    else:\n        return num\ndef removezero_num_size(num, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        print(num)\n        return num\n    else:\n        return num\ndef removezero_exp_num(num, port):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = str(num)\n    num = num.lstrip('0')\n    print(num)\n    if (len(num) > 0):\n        num = num[0:4]\n        print(num)\n        num = num.lower()\n        prin"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+$', '', ip)\ndef is_valid_ip(ip):\n    '''\n    A function to check if the ip address is valid or not.\n    '''\n    return re.match(r'^\\d+$', ip) is not None\ndef is_valid_number(ip):\n    '''\n    A function to check if the ip address is valid or not.\n    '''\n    return re.match(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$', ip) is not None\ndef is_valid_phone_number(phone_number):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^[0-9]\\d{3}-\\d{3}-\\d{4}$', phone_number) is not None\ndef is_valid_name(name):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4})$', name) is not None\ndef is_valid_location(location):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^(?:[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4}))$', location) is not None\ndef is_valid_number_or_email(number):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^\\+?1[0-9]\\d{9}$', number) is not None\ndef is_valid_unique_email(email):\n    '''\n    A function to check if the email is valid or not.\n    '''\n    return re.match(r'^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,4})$', email) is not None\ndef is_valid_unique_phone_number(phone_number):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^\\+?[1-9]\\d{9}$', phone_number) is not None\ndef is_valid_unique_name(name):\n    '''\n    A function to check if the name is valid or not.\n    '''\n    return re.match(r'^[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4}$', name) is not None\ndef is_valid_unique_location(location):\n    '''\n    A function to check if the location is valid or not.\n    '''\n    return re.match(r'^(?:[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4}))$', location) is not None\ndef is_valid_duplicate_email(email):\n    '''\n    A function to check if the email is valid or not.\n    '''\n    return re.match(r'^[a-zA-Z0-9_\\-\\.]+@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,4})$', email) is not None\ndef is_valid_duplicate_phone_number(phone_number):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^\\+?[1-9]\\d{9}$', phone_number) is not None\ndef is_valid_duplicate_name(name):\n    '''\n    A function to check if the name is valid or not.\n    '''\n    return re.match(r'^[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4}$', name) is not None\ndef is_valid_duplicate_location(location):\n    '''\n    A function to check if the location is valid or not.\n    '''\n    return re.match(r'^(?:[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4}))$', location) is not None\ndef is_valid_duplicate_number_or_email(number):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^\\+?[1-9]\\d{9}$', number) is not None\ndef is_valid_duplicate_unique_email(email):\n    '''\n    A function to check if the email is valid or not.\n    '''\n    return re.match(r'^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,4})$', email) is not None\ndef is_valid_duplicate_unique_phone_number(phone_number):\n    '''\n    A function to check if the phone number is valid or not.\n    '''\n    return re.match(r'^\\+?[1-9]\\d{9}$', phone_number) is not None\ndef is_valid_duplicate_unique_name(name):\n    '''\n    A function to check if the name is valid or not.\n    '''\n    return re.match(r'^[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4}$', name) is not None\ndef is_valid_duplicate_unique_location(location):\n    '''\n    A function to check if the location is valid or not.\n    '''\n    return re.match(r'^(?:[a-zA-Z\\d]{1,6}(?:[\\s\\-]?[a-zA-Z\\d]{2,4}|\\d{3}[a-zA-Z\\d]{3,4}|\\d{4}[a-zA-Z\\d]{2,4}))$', location) is not None\ndef is_valid_duplicate_address(address):\n    '''\n    A function to check if the address is valid or not.\n    '''\n    return re.match(r'^([a-zA-Z\\d]{1,6})[\\s\\-]?([a-zA"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '.' in ip:\n        ip = re.sub('\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n    return ip\ndef remove_empty_line(txt):\n    '''\n    Write a function to remove all the empty lines from a txt.\n    '''\n    return re.sub('\\n','', txt)\ndef remove_qoute(txt):\n    '''\n    Write a function to remove all the empty lines from a txt.\n    '''\n    return re.sub('\\n','', txt)\ndef is_legal_ip(ip):\n    '''\n    Write a function to check if the ip is a legal ip address.\n    '''\n    return (len(ip) == 4 and all(map(str.isdigit, ip)))\ndef create_new_file(fname, content):\n    '''\n    Write a function to create a new file.\n    '''\n    with open(fname, 'w') as file:\n        file.write(content)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Set up an empty list\n    ip_list = []\n    # Remove 0s from the end\n    for i in range(len(ip)):\n        if ip[i]!= '0':\n            ip_list.append(ip[i])\n    # Remove 0s from the beginning\n    for i in range(len(ip)):\n        if ip[i]!= '0':\n            ip_list.insert(0,ip[i])\n    return ''.join(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    result = re.sub('^\\d+', '', ip)\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = ''\n    x = ip\n    i = 0\n    while x!= '':\n        if x[i] == '0':\n            x = x[0:i]\n            i += 1\n        else:\n            x = x[1:]\n            i += 1\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip_zero_regex = r\"(?:\\.\\d{1,3})\"\n    ip_zero_pattern = re.compile(ip_zero_regex)\n    zero_match = ip_zero_pattern.search(ip)\n    while zero_match:\n        string = zero_match.group()\n        try:\n            if string[0].isdigit():\n                string = string[1:]\n        except IndexError:\n            pass\n        ip = ip[:zero_match.span()[0]] + string\n        zero_match = ip_zero_pattern.search(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_count = 0\n    for i in range(0,len(ip)):\n        if ip[i] == '0':\n            zero_count = zero_count + 1\n        else:\n            pass\n    if zero_count == 0:\n        return ip\n    else:\n        return ''\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.replace(\"0\", \"\").lstrip(\".\").rstrip(\".\").upper()\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    r = ip.split('.')\n    return ''.join(x for x in r if x.isdigit())\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # if odd, find the next odd index\n    odd = 0\n    even = 1\n    # first index is index of even and odd numbers\n    for i in range(0,len(list1)):\n        if list1[i] % 2 == 0:\n            even = even + 1\n        else:\n            odd = odd + 1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    while (i < len(list1)):\n        if (list1[i] % 2 == 0):\n            list1.pop(i)\n        else:\n            i += 1\n    return list1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=list1[0::2]\n    even=list1[1::2]\n    \n    return even-odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    diff = list1[0] - list1[len(list1)-1]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # print(list1)\n    \n    if len(list1)%2 == 0:\n        even_list = []\n        odd_list = []\n        \n        for i in range(0, len(list1)):\n            if i % 2 == 0:\n                even_list.append(list1[i])\n            else:\n                odd_list.append(list1[i])\n        \n        print(even_list)\n        print(odd_list)\n    \n    else:\n        even_list = []\n        odd_list = []\n        \n        for i in range(0, len(list1)):\n            if i % 2!= 0:\n                even_list.append(list1[i])\n            else:\n                odd_list.append(list1[i])\n        \n        print(even_list)\n        print(odd_list)\n    \n    \ndef task1():\n    list1 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    l = list1.copy()\n    odd = len(l)\n    even = len(l)\n    for i in l:\n        if i%2 == 0:\n            even-=1\n            l.remove(i)\n        else:\n            odd-=1\n            l.remove(i)\n    print(f'The difference between the first even and first odd number of a given list is: {even} and {odd}.')\n    \n    return even, odd\n        \n        \n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return None\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = 0\n    odd = 0\n    for num in list1:\n        if num%2 == 0:\n            even_odd += num\n        else:\n            odd += num\n    print(f\"The difference of even and odd numbers is : {odd - even_odd}\")\n    \ndef count_even_odd(list1):\n    '''\n    Write a function to count the number of even and odd numbers in a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    print(f\"The count of even numbers is : {even}\")\n    print(f\"The count of odd numbers is : {odd}\")\n    \ndef even_odd_div(list1):\n    '''\n    Write a function to find the even number and the odd number in a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    print(f\"The even numbers are : {even}\")\n    print(f\"The odd numbers are : {odd}\")\n    \ndef count_even_odd_div(list1):\n    '''\n    Write a function to count the number of even and odd number in a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num%2 == 0:\n            even += 1\n        else:\n            odd += 1\n    print(f\"The even numbers are : {even}\")\n    print(f\"The odd numbers are : {odd}\")\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    l1 = list1\n    def even_odd(l1):\n        l1 = l1[1::2]\n        return l1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # For storing the number of characters in the string\n    str1_count = 0\n    str2_count = 0\n    \n    # For storing the number of characters in the first string\n    str1_count_list = []\n    # For storing the number of characters in the second string\n    str2_count_list = []\n    \n    # For storing the string 1\n    str1_list = []\n    # For storing the string 2\n    str2_list = []\n    \n    # For storing the number of elements in the string\n    str1_count = 0\n    str2_count = 0\n    \n    # For storing the number of elements in the first string\n    str1_count_list = []\n    # For storing the number of elements in the second string\n    str2_count_list = []\n    \n    # For storing the string 1\n    str1_list = []\n    # For storing the string 2\n    str2_list = []\n    \n    # For storing the number of elements in the string\n    str1_count = 0\n    str2_count = 0\n    \n    # For storing the number of elements in the first string\n    str1_count_list = []\n    # For storing the number of elements in the second string\n    str2_count_list = []\n    \n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            str1_count += 1\n            str2_count += 1\n        else:\n            str1_count += 1\n            str2_count += 1\n            if str1[i]!= str2[i]:\n                str1_list.append(str1[i])\n                str2_list.append(str2[i])\n                str1_count_list.append(str1_count)\n                str2_count_list.append(str2_count)\n                str1_count = 0\n                str2_count = 0\n    \n    # For storing the string 1\n    str1_list = []\n    # For storing the string 2\n    str2_list = []\n    \n    # For storing the number of elements in the string\n    str1_count = 0\n    str2_count = 0\n    \n    # For storing the number of elements in the first string\n    str1_count_list = []\n    # For storing the number of elements in the second string\n    str2_count_list = []\n    \n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            str1_count += 1\n            str2_count += 1\n        else:\n            str1_count += 1\n            str2_count += 1\n            if str1[i]!= str2[i]:\n                str1_list.append(str1[i])\n                str2_list.append(str2[i])\n                str1_count_list.append(str1_count)\n                str2_count_list.append(str2_count)\n                str1_count = 0\n                str2_count = 0\n    \n    # Return the number of swaps\n    return str1_count - str2_count\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            swaps += 1\n    return swaps\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Step 1\n    # Convert from binary representation of the string\n    # 1 -> 11010\n    # 2 -> 11011\n    # 3 -> 11012\n    # 4 -> 11111\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i=0\n    min=0\n    if len(str1)!=len(str2):\n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # store all the bits in as a string\n    str1 = str(bin(int(str1,2)))[2:]\n    # first convert the string to a list\n    bits = []\n    for i in str1 : \n        # then add each bit in the list to the bits list\n        bits.append(i)\n    # sort the list in order to sort based on the numbers stored in order\n    bits.sort()\n    # look for the length of the shortest string\n    l = len(str1)\n    # if the shortest string is empty, we have found no swaps\n    if l == 0 :\n        # we have found a minimum number of swaps \n        return 0\n    # if there is a swap\n    else :\n        # the length of the shortest string is the min of the length of the two strings\n        minLength = l\n        # the count of the minimum number of swaps\n        count = 0\n        # for every index in the shortest string\n        for i in range(0,l) : \n            # if the i-th bit is 1, then we have found a swap\n            if bits[i] == '1' :\n                # increment count by 1\n                count = count + 1\n                # if it is greater than the length of the shortest string, then it is not a swap\n                if count > minLength :\n                    # update the minLength\n                    minLength = count\n        # if there is no swap\n        if count == 0 :\n            # the count is zero, so we have found no swaps\n            return 0\n        # else we have a swap\n        else : \n            # update the count\n            count = count - 1\n            # for every index in the shortest string\n            for i in range(0,l) : \n                # if the i-th bit is 1, then we have found a swap\n                if bits[i] == '1' :\n                    # if count is not 0\n                    if count == 0 :\n                        # return the count as the result of the minimum number of swaps\n                        return count\n                    # update the count\n                    count = count - 1\n    # if the shortest string is not the same as the original one, we have found no swaps\n    return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # the algorithm is to form the two strings in terms of their previous character\n    # then iterate over the string one by one and count the swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # All the bits are 0's\n    l1 = [0 for i in range(8)]\n    # All the bits are 1's\n    l2 = [1 for i in range(8)]\n    # all the bits are 0's\n    l3 = [0 for i in range(8)]\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=str(str1)\n    str2=str(str2)\n    n=len(str1)\n    l=len(str2)\n    if n>l:\n        str2=str(str2)\n    for i in range(n-1,0,-1):\n        if str1[i]!= str2[i]:\n            break\n    if n>l:\n        print(\"No swaps required.\")\n    else:\n        print(\"Number of swaps required: \", min(n-i,l-i)+1)\n        \n        \nprint(min_Swaps(0,1))\nprint(min_Swaps(1,1))\nprint(min_Swaps(0,0))\nprint(min_Swaps(1,1))\nprint(min_Swaps(1,0))\nprint(min_Swaps(0,0))"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    #This function is used to count minimum swaps required to convert a string to binary numbers. \n    #The input string is in a binary format, and the output is a number of swaps required to convert the input string to binary.\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum([len(t) for t in tuple_list])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for e in tuple_list:\n        total_size = total_size + len(e)\n    return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for ele in tuple_list:\n        s += len(str(ele))\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += len(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for i in tuple_list:\n        count+= len(i)\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 is None:\n        return None\n    elif arr2 is None:\n        return arr1[k-1]\n    elif k < 0:\n        return None\n    else:\n        arr1_index = 0\n        arr2_index = 0\n        arr1_length = len(arr1)\n        arr2_length = len(arr2)\n        while arr1_index < arr1_length and arr2_index < arr2_length:\n            if arr1[arr1_index] > arr2[arr2_index]:\n                arr1_index += 1\n            else:\n                arr2_index += 1\n        return arr1[arr1_index + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the pivot index\n    pivot_index = arr1.index(max(arr1))\n    # Define the pivot value\n    pivot_value = arr1[pivot_index]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    low_index = 0\n    high_index = len(arr1) - 1\n    \n    while low_index <= high_index:\n        mid = (low_index + high_index) // 2\n        \n        if arr1[mid] < arr2[mid]:\n            low_index = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            high_index = mid - 1\n        else:\n            return arr1[mid]\n    \n    return arr1[low_index]\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Either sort the arrays, or swap the elements in the arrays\n    arr1, arr2 = merge_sort(arr1), merge_sort(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if (arr1[0] < arr2[0]) and (arr1[-1] > arr2[-1]):\n        return find_kth(arr1[1:], arr2[:-1], k)\n    if (arr1[0] < arr2[0]) and (arr2[-1] < arr1[-1]):\n        return find_kth(arr1, arr2[1:], k)\n    if arr1[-1] > arr2[-1]:\n        return find_kth(arr1[:-1], arr2, k)\n    else:\n        return arr1[-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    kth = -1\n    for i in range(len(arr1)):\n        if arr1[i] > arr2[k]:\n            kth = i\n            break\n    return kth\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[(k-1)*(len(arr1))+0] if k*(k-1)*(len(arr1))<len(arr2) else arr2[(k-1)*(len(arr1))+0]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k==1:\n        return arr1[k-1]\n    if arr1[k-1]<arr2[k-1]:\n        return find_kth(arr1, arr2, k-1)\n    else:\n        return find_kth(arr1, arr2, k-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # define an auxiliary function to find the kth element\n    def find_kth_aux(arr1, arr2, k):\n        # find the kth element in arr1\n        if k > len(arr1) or k >= len(arr1):\n            return arr1[0]\n        # find the kth element in arr2\n        elif k > len(arr2) or k >= len(arr2):\n            return arr2[-1]\n        # find the kth element in arr1 and arr2\n        else:\n            return min(arr1[k], arr2[k])\n    # initialize the kth element in arr1 and arr2\n    arr1_kth = arr1[:k]\n    arr2_kth = arr2[:k]\n    # find the kth element in arr1 and arr2\n    return find_kth_aux(arr1_kth, arr2_kth, k)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    numbers = []\n    temp = 1\n    while temp <= number:\n        if number % temp == 0:\n            numbers.append(temp)\n            number = number/temp\n        else:\n            temp += 1\n    return len(numbers) > 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit = 0\n    pow = 1\n    count = 0\n    while pow < number:\n        digit = pow%10\n        pow = pow//10\n        count = count + 1\n    \n    if digit == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return sum([pow(int(i), 2) for i in str(number)]) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    #define the variables\n    num=0\n    sum=0\n    \n    #iterate through the number\n    for i in range(1,number+1):\n        num=i**3\n        sum=sum+num\n        \n    #check if sum is armstrong\n    if sum == number:\n        return True\n    else:\n        return False\n    \n    #remove the leading zeros to get the answer\n    return str(num)[1:]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for i in str(number):\n        total += int(i)\n    return total == number\n    \ndef check_valid_number(num):\n    '''\n    Write a function to check whether a given number is valid or not.\n    '''\n    total = 0\n    for i in str(num):\n        total += int(i)\n    return total == num\n    \ndef run():\n    '''\n    Write a program to solve a math problem.\n    '''\n    num = int(input(\"Enter a number: \"))\n    print(check_valid_number(num))\n    print(armstrong_number(num))\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    \n    num = str(number)\n    \n    for i in range(len(num)):\n        count = count + int(num[i])\n        \n    if (count == number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    lower = number - 1\n    upper = number\n    count = 0\n    while (upper >= lower):\n        if (upper % 10 == 0) and (number % 10 == 0):\n            count += 1\n        upper -= 1\n        lower += 1\n    return count == 1\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    number = abs(number)\n    for x in range(1, number + 1):\n        result = result + x\n    if number == result:\n        return '{} is an armstrong number'.format(number)\n    else:\n        return '{} is not an armstrong number'.format(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit = 0\n    while number > 0:\n        digit = number % 10\n        number = number // 10\n    return digit == digit\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number >= 0:\n        sum = 0\n        for i in range(0, number):\n            sum += i\n        avg = sum/number\n        print(avg)\n    else:\n        print(-1)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not isinstance(number, int):\n        raise TypeError('first argument must be integer')\n    if number < 0:\n        raise ValueError('first argument must be positive integer')\n    n = len(number)\n    if n == 1:\n        return 0\n    if n == 2:\n        return number[0] + number[1]\n    return number[0] + sum_average(number[1:])\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n        average = average + i\n    average = average / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,number+1):\n        total += i\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n    \n    \nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"n = 4\")\n    print(\"Exception :\")\n    print(\"22.0\")\n    print(\"Output :\")\n    print(str(sum_average(4)))\n    print(str(sum_average(5)))\n    print(str(sum_average(10)))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if type(number)!= int:\n        raise TypeError('please enter a natural number')\n    if number == 0:\n        raise ZeroDivisionError(\"Divide by zero\")\n    result = 0\n    for i in range(1,number+1):\n        result += i\n    return result/number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        raise ValueError('Must have a positive number')\n    total = 0\n    i = 1\n    while i <= number:\n        total += i\n        i += 1\n    return total / number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return number * 1.0\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(number, type(number))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : return True\n    else : return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : return True\n    else : return False\n    \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeated_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[first_repeated_char]:\n            first_repeated_char += 1\n    if first_repeated_char!= len(str1) and first_repeated_char!= 0:\n        return first_repeated_char\n    else:\n        return \"Not found\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i, char in enumerate(str1):\n        if char == str1[i - 1]:\n            return i + 1\n    \n    return 0\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 1:\n        return str1[0]\n    else:\n        first = str1[0]\n        for i in range(len(str1)):\n            if str1[i] == first:\n                return str1[i]\n        return first\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return (str1).replace('', '').replace(' ', '').lower().count('a')\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Your code here\n    if len(str1) == 1:\n        return str1[0]\n    else:\n        for i in range(len(str1)):\n            if str1[i] == str1[i - 1]:\n                continue\n            else:\n                return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #s1 = \"this is a string\"\n    #print(s1.count('t'))\n    str2 = \"this is a string\"\n    counter = 0\n    for i in str2:\n        if str1.count(i)!= 0:\n            counter += 1\n    print(counter)\n    return counter\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary\n    dictionary = {}\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1[0] if str1.count(str1[0]) == 1 else ''\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # return the index of first repeated char\n    # return -1 if not found\n    # return -1 if not a char\n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i] in char_count:\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char_count[char]\n    \n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = 0\n    for x in str1:\n        if(x == str1[0]):\n            result = 1\n            break\n    return result\n        \ndef main():\n    s = input(\"Enter a string: \")\n    \n    print(first_repeated_char(s))\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2,n+1):\n        while (i%i==0):\n            if(i%i==0):\n                ludic.append(i)\n            i=i+1\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic=[]\n    for i in range(1,n+1):\n        if i<=n:\n            if i%3==0:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    x = [0]\n    for i in range(1, n):\n        if (x[-1] + i) < n:\n            x.append(x[-1] + i)\n    return x"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n + 1):\n        if i >= 4:\n            if i % 4 == 0:\n                if i % 100 == 0:\n                    if i % 400 == 0:\n                        l.append(i)\n                    else:\n                        l.append(i)\n                else:\n                    l.append(i)\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i <= int(n ** 0.5):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    i = 1\n    while i <= n:\n        if i == 1:\n            result.append(i)\n        else:\n            result.append(i%10)\n            i = i+1\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        ludic.append(i)\n        if i<=n:\n            if ludic[i]%2==0:\n                ludic[i] = ludic[i]//2\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 1:\n        raise ValueError\n    ludic = []\n    for x in range(1, n + 1):\n        if x % 2!= 0:\n            ludic.append(x)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 10:\n        return [n]\n    else:\n        return [i for i in range(1, n) if i%n == 0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucis = []\n    for i in range(1, n + 1):\n        lucis.append(i)\n    for i in range(1, n + 1):\n        if lucis[i - 1] < lucis[i]:\n            lucis[i - 1] = lucis[i - 1]\n    return lucis\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # list of words in the string\n    s = s.split()\n    # first pass\n    s_reverse = []\n    # second pass\n    for word in s:\n        s_reverse.append(word[::-1])\n    # print result\n    print(' '.join(s_reverse))\n    # return reversed result\n    return''.join(s_reverse)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    rev_words = []\n    for i in range(len(words)):\n        rev_words.append(words[i][::-1])\n    return''.join(rev_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Get input string\n    string = s.split()\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    rev = ''\n    for i in range(len(s)):\n        if s[i]!='':\n            rev = rev + s[i]\n    return rev\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(list(reversed(s.split()))).strip().lower()"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # return words in reverse\n    return \" \".join(s.split(\" \")[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(list(s.split())))\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s[0] == \" \":\n        s = s[1:]\n    elif s[0]!= \" \":\n        s = s[1:] + \" \"\n    return s.split()\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = True\n    for i in range(2,num):\n        if num%i==0:\n            prime = False\n            break\n    return prime\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return \"Invalid Input\"\n    elif num == 2:\n        return \"Prime\"\n    elif num > 2 and num % 2 == 0:\n        return \"Not Prime\"\n    else:\n        for x in range(3, int(num**0.5)+1, 2):\n            if num % x == 0:\n                return \"Not Prime\"\n        return \"Prime\"\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num > 2 and num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if num in prime_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    divide = 2\n    while divide < num:\n        if num % divide == 0:\n            return False\n        divide += 1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if num % 2 == 0:\n    #     return False\n    # else:\n    #     for i in range(3,num,2):\n    #         if num % i == 0:\n    #             return False\n    #     return True\n    # if num > 1:\n    #     for i in range(2, num):\n    #         if num % i == 0:\n    #             return False\n    #     return True\n    # else:\n    #     return False\n    # i = 2\n    # while i * i <= num:\n    #     if num % i == 0:\n    #         return False\n    #     i += 1\n    # return True\n    def is_prime(num):\n        '''\n        Number is prime if it is greater than 1\n        '''\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    if is_prime(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    divisors = [2,3,5,7,11,13,17,19]\n    \n    for d in divisors:\n        if num % d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (180.0 / math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree*math.pi/180\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree/180.0 * math.pi\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end]\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    pattern_start = pattern.search(text).end()\n    pattern_end = pattern.search(text, pattern_start).start() + len(pattern)\n    match = text[pattern_start:pattern_end]\n    return match, pattern_start, pattern_end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Build a regular expression\n    regex = r'({})({})(?=\\W)(?P<start>[0-9]+)(?=\\W)(?P<end>[0-9]+)(?=\\W)'.format(pattern, pattern)\n    # Find it in the text\n    return re.findall(regex, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start, end = 0, len(text)-1\n    while end >= 0:\n        m = re.search(pattern, text[start:end])\n        if m is not None:\n            start = m.start()\n            end = m.end()\n            continue\n        else:\n            end -= 1\n    if end < 0:\n        return False\n    else:\n        return start, end, text[start:end]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text, re.IGNORECASE)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Part A: Searching for a pattern in a string\n    # Check if a pattern is contained in the text. If yes, return the index of the first occurrence of the pattern.\n    # If not, return -1\n    #\n    # Brute force:\n    #\n    # Longest substring can be found by looking through each character of the string, and check if the pattern is in the string\n    # (with the idea of a set of flags for the matching). If it is, we will store this substring, the index of the start of the match, and the index of the match.\n    #\n    # (This takes as input a string and a pattern, and is equivalent to the following block:\n    #\n    # for char in string:\n    #\n    # if char == pattern:\n    #\n    # return 0\n    #\n    # Brute force:\n    #\n    # If the pattern is found in the string, we will return the start index.\n    # If the pattern is not found, we will return -1.\n    #\n    # In the above example, if the pattern is \"c\", then we will return 6 (the substring \"c\")\n    # In the above example, if the pattern is \"a\", then we will return 1 (the substring \"a\")\n    # In the above example, if the pattern is \"\", then we will return -1 (no substring matches)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    return m.start(), m.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    substring_search = pattern.search(text)\n    if substring_search is None:\n        return None\n    start_index = substring_search.start()\n    end_index = substring_search.end()\n    return (start_index, end_index)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    pattern = pattern.findall(text)\n    start_index = pattern.index(pattern[0]) + 1\n    end_index = start_index + len(pattern)\n    if end_index > len(text):\n        end_index = len(text)\n    return text[start_index:end_index]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #raise NotImplementedError('Not implemented!')\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n > 1:\n        i = n-1\n        while (i >= 1):\n            j = i\n            k = 1\n            while(j > 0):\n                k = j\n                j = (j + k) % n\n                if k == 1:\n                    break\n            if k == 1:\n                print(n-i)\n                break\n            i -= 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n==2:\n        return 3\n    elif n==3:\n        return 5\n    elif n==4:\n        return 7\n    elif n==5:\n        return 11\n    elif n==6:\n        return 13\n    elif n==7:\n        return 21\n    elif n==8:\n        return 34\n    elif n==9:\n        return 47\n    elif n==10:\n        return 81\n    elif n==11:\n        return 123\n    elif n==12:\n        return 271\n    elif n==13:\n        return 361\n    elif n==14:\n        return 483\n    elif n==15:\n        return 641\n    elif n==16:\n        return 881\n    elif n==17:\n        return 1061\n    elif n==18:\n        return 1171\n    elif n==19:\n        return 1371\n    elif n==20:\n        return 1521\n    elif n==21:\n        return 1731\n    elif n==22:\n        return 2071\n    elif n==23:\n        return 2531\n    elif n==24:\n        return 3241\n    elif n==25:\n        return 381\n    elif n==26:\n        return 4331\n    elif n==27:\n        return 4741\n    elif n==28:\n        return 5471\n    elif n==29:\n        return 6571\n    elif n==30:\n        return 7009\n    elif n==31:\n        return 7331\n    elif n==32:\n        return 8041\n    elif n==33:\n        return 10451\n    elif n==34:\n        return 11451\n    elif n==35:\n        return 13451\n    elif n==36:\n        return 15451\n    elif n==37:\n        return 17451\n    elif n==38:\n        return 20451\n    elif n==39:\n        return 2351\n    elif n==40:\n        return 2551\n    elif n==41:\n        return 3451\n    elif n==42:\n        return 381\n    elif n==43:\n        return 4451\n    elif n==44:\n        return 47\n    elif n==45:\n        return 5451\n    elif n==46:\n        return 6451\n    elif n==47:\n        return 7451\n    elif n==48:\n        return 8451\n    elif n==49:\n        return 9451\n    elif n==50:\n        return 10451\n    elif n==51:\n        return 11451\n    elif n==52:\n        return 13451\n    elif n==53:\n        return 15451\n    elif n==54:\n        return 17451\n    elif n==55:\n        return 20451\n    elif n==56:\n        return 2351\n    elif n==57:\n        return 2551\n    elif n==58:\n        return 3451\n    elif n==59:\n        return 381\n    elif n==60:\n        return 4451\n    elif n==61:\n        return 47\n    elif n==62:\n        return 5451\n    elif n==63:\n        return 6451\n    elif n==64:\n        return 7451\n    elif n==65:\n        return 8451\n    elif n==66:\n        return 9451\n    elif n==67:\n        return 10451\n    elif n==68:\n        return 11451\n    elif n==69:\n        return 13451\n    elif n==70:\n        return 15451\n    elif n==71:\n        return 17451\n    elif n==72:\n        return 20451\n    elif n==73:\n        return 2351\n    elif n==74:\n        return 2551\n    elif n==75:\n        return 3451\n    elif n==76:\n        return 381\n    elif n==77:\n        return 4451\n    elif n==78:\n        return 47\n    elif n==79:\n        return 5451\n    elif n==80:\n        return 6451\n    elif n==81:\n        return 7451\n    elif n==82:\n        return 8451\n    elif n==83:\n        return 9451\n    elif n==84:\n        return 10451\n    elif n==85:\n        return 11451\n    elif n==86:\n        return 13451\n    elif n==87:\n        return 15451\n    elif n==88:\n        return 17451\n    elif n==89:\n        return 20451\n    elif n==90:\n        return 2351\n    elif n==91:\n        return 2551\n    elif n==92:\n        return 3451\n    elif n==93:\n        return 381\n    elif n==94:\n        return 4451\n    elif n==95:\n        return 47\n    elif n==96:\n        return 5451\n    elif n==97:\n        return 6451\n    elif n==98:\n        return 7451\n    elif n==99:\n        return 8451\n    elif n==100:\n        return 9451\n    elif n==101:\n        return 10451\n    elif n==102:\n        return 11451\n    elif n==103:\n        return 13451\n    elif n==104:\n        return 15451\n    elif n==105:\n        return 17451\n    elif n==106:\n        return 20451\n    elif n==107:\n        return 2351\n    elif n==108:\n        return 2551\n    elif n==109:\n        return 3451\n    elif n==110:\n        return 381\n    elif n==111:\n        return 4451\n    elif n==112:\n        return 47\n    elif n==113:\n        return 5451\n    elif n==114:\n        return 6451\n    elif n==115:\n        return 7451\n    elif n==116:\n        return 8451\n    elif n==117:\n        return 9451\n    elif n==118:\n        return 10451\n    elif n==119:\n        return 11451\n    elif n==120:\n        return 13451\n    elif n==121:\n        return 15451\n    elif n==122:\n        return 17451\n    elif n==123:\n        return 20451\n    elif n==124:\n        return 2351\n    elif n==125:\n        return 2551\n    elif n==126:\n        return 3451\n    elif n==127:\n        return 381\n    elif n==128:\n        return 4451\n    elif n==129:\n        return 47\n    elif n==130:\n        return 5451\n    elif n==131:\n        return 6451\n    elif n==132:\n        return 7451\n    elif n==133:\n        return 8451\n    elif n==134:\n        return 9451\n    elif n==135:\n        return 10451\n    elif n==136:\n        return 11451\n    elif n==137:\n        return 13451\n    elif n==138:\n        return 15451\n    elif n==139:\n        return 17451\n    elif n==140:\n        return 20451\n    elif n==141:\n        return 2351\n    elif n==142:\n        return 2551\n    elif n==143:\n        return 3451\n    elif n==144:\n        return 381\n    elif n==145:\n        return 4451\n    elif n==146:\n        return 47\n    elif n==147:\n        return 5451\n    elif n==148:\n        return 6451\n    elif n==149:\n        return 7451\n    elif n==150:\n        return 8451\n    elif n==151:\n        return 9451\n    elif n==152:\n        return 10451\n    elif n==153:\n        return 11451\n    elif n==154:\n        return 13451\n    elif n==155:\n        return 15451\n    elif n==15"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    counter = 0 \n    for i in range(1,n+1):\n        counter = counter + i \n    return counter\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # your code goes here\n    if n==1 or n==2 or n==3:\n        return n\n    if n==4:\n        return 6\n    else:\n        return bell_Number(n-2)+bell_Number(n-3)+bell_Number(n-4)\n    # for a different implementation\n    '''\n    # your code goes here\n    num=1\n    while num<=n:\n        print(num,end=\" \")\n        num=num+bell_Number(num-1)\n    return\n    '''\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n        return 93\n    if n == 93:\n        return 94\n    if n == 94:\n        return 95\n    if n == 95:\n        return 96\n    if n == 96:\n        return 97\n    if n == 97:\n        return 98\n    if n == 98:\n        return 99\n    if n == 99:\n        return 100\n    if n == 100:\n        return 101\n    if n == 101:\n        return 102\n    if n == 102:\n        return 103\n    if n == 103:\n        return 104\n    if n == 104:\n        return 105\n    if n == 105:\n        return 106\n    if n == 106:\n        return 107\n    if n == 107:\n        return 108\n    if n == 108:\n        return 109\n    if n == 109:\n        return 110\n    if n == 110:\n        return 111\n    if n == 111:\n        return 112\n    if n == 112:\n        return 113\n    if n == 113:\n        return 114\n    if n == 114:\n        return 115\n    if n == 115:\n        return 116\n    if n == 116:\n        return 117\n    if n == 117:\n        return 118\n    if n == 118:\n        return 119\n    if n == 119:\n        return 120\n    if n == 120:\n        return 121\n    if n == 121:\n        return 122\n    if n == 122:\n        return 123\n    if n == 123:\n        return 124\n    if n == 124:\n        return 125\n    if n == 125:\n        return 126\n    if n == 126:\n        return 127\n    if n == 127:\n        return 128\n    if n == 128:\n        return 129\n    if n == 129:\n        return 130\n    if n == 130:\n        return 131\n    if n == 131:\n        return 132\n    if n == 132:\n        return 133\n    if n == 133:\n        return 134\n    if n == 134:\n        return 135\n    if n == 135:\n        return 136\n    if n == 136:\n        return 137\n    if n == 137:\n        return 138\n    if n == 138:\n        return 139\n    if n == 139:\n        return 140\n    if n == 140:\n        return 141\n    if n == 141:\n        return 142\n    if n == 142:\n        return 143\n    if n == 143:\n        return 144\n    if n == 144:\n        return 145\n    if n == 145:\n        return 146\n    if n == 146:\n        return 147\n    if n == 147:\n        return 148\n    if n == 148:\n        return 149\n    if n == 149:\n        return 150\n    if n == 150:\n        return 151\n    if n == 151:\n        return 152\n    if n == 152:\n        return 153\n    if n == 153:\n        return 154\n    if n == 154:\n        return 155\n    if n == 155:\n        return 156\n    if n == 156:\n        return 157\n    if n == 157:\n        return 158\n    if n == 158:\n        return 159\n    if n == 159:\n        return 160\n    if n == 160:\n        return 161\n    if n == 161:\n        return 162\n    if n == 162:\n        return 163\n    if n == 163:\n        return 164\n    if n == 164:\n        return 165\n    if n == 165:\n        return 166\n    if n == 166:\n        return 167\n    if n == 167:\n        return 168\n    if n == 168:\n        return 169\n    if n == 169:\n        return 170\n    if n == 170:\n        return 171\n    if n == 171:\n        return 172\n    if n == 172:\n        return 173\n    if n == 173:\n        return 174\n    if n == 174:\n        return 175\n    if n == 175:\n        return 176\n    if n == 176:\n        return 177\n    if n == 177:\n        return 178\n    if n == 178:\n        return 179\n    if n == 179:\n        return 180\n    if n == 180:\n        return 181\n    if n == 181:\n        return 182\n    if n == 18"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # We use two dynamic programming \n    # Steps: \n    #   1) Create a memo table\n    #   2) Set the memo[0] as the memo[1]\n    #   3) Add n to the memo[0] and memo[1]\n    #   4) Look up memo[n]\n    #       if memo[n] is not None:\n    #           return memo[n]\n    #       else:\n    #           memo[n] = number of distinct ways to \n    #                       traverse from n\n    #           return memo[n]\n    #\n    #   5) Store all memo[i] \n    #   6) Remove all memo[i] \n    #       and its elements from memo[0]\n    #       until memo[1] is reached\n    #       [or until memo[1] is reached and n is\n    #       removed]\n    #\n    # The recursive solution is O(n^2)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if n < L:\n        raise ValueError('k must be less than or equal to the list length.')\n    else:\n        #if n % 2 == 0:\n        #    raise ValueError('k must be even')\n        #remove kth element\n        i = n // 2\n        #for i in range(n, 0, -1):\n        while i > 0:\n            if list1[i - 1] < L:\n                list1.remove(list1[i - 1])\n            else:\n                break\n            i -= 1\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    remove_kth = list1[L]\n    if L < len(list1):\n        list1.pop(L)\n        return remove_kth\n    else:\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    # Concatenate all k's and return the result\n    print('remove kth element', end ='')\n    result = []\n    for i in list1:\n        if i not in result:\n            result.append(i)\n    print(result)\n    return result\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Your code here\n    n = len(list1)\n    removed = [element for element in list1 if element < list1[n-1]]\n    if len(removed) == L:\n        return removed\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # your code goes here\n    if L == []:\n        return []\n    else:\n        return list1[:L-1] + remove_kth_element(list1[L-1:], L-1)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == None:\n        return None\n    else:\n        for i in range(len(list1)):\n            if list1[i] >= L:\n                break\n        else:\n            del list1[i]\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.sort()\n    return list1[:L[-1]]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # print(list1)\n    # print(list1[L])\n    del list1[L]\n    # print(list1)\n    # return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    kth_item = list1[L]\n    list1.remove(kth_item)\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Hint: Use the built-in max function and return the index of the highest element in the array.\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print(f'The max of then'th column is {get_max_of_nth(test_list, N)}')\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    return max(test_list, key=lambda row: row[N]"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list)<N:\n        return -1\n    else:\n        return max(test_list[len(test_list)-N:len(test_list)])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    return test_list[0][N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_element = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_element:\n            max_element = test_list[i][N-1]\n    return max_element\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            if test_list[i][j] > max:\n                max = test_list[i][j]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Code here\n    \n    # return element of array\n    return test_list[0][N]\n    \n    # return the largest element in the array\n    return max(test_list[0]"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list)==0:\n        return 0\n    if len(test_list[0])==0:\n        return 0\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    print(\"\\nYour Input\\n\")\n    print(test_list)\n    print(\"\\nRequired Input\\n\")\n    print(N)\n    print(\"\\nOutput\\n\")\n    print(test_list[N][0])\n    return test_list[N][0]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #pass the lists\n    #pass the function\n    #do this\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    retur"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    return merged_list\n    \ndef merge_two_lists(lst1, lst2):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst1:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    for i in lst2:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    return merged_list\n    \ndef merge_two_lists_2(lst1, lst2):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst1:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    for i in lst2:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    return merged_list\n    \ndef join_all_lists_at_middle(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    return merged_list\n    \ndef join_all_lists_at_middle_2(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    return merged_list\n    \ndef first_two_biggest_numbers(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    biggest = []\n    for i in range(len(lst)):\n        if len(lst[i]) > len(biggest):\n            biggest = lst[i]\n    return biggest\n    \ndef last_two_biggest_numbers(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    biggest = []\n    for i in range(len(lst)):\n        if len(lst[i]) > len(biggest):\n            biggest = lst[i]\n    return biggest\n    \ndef median(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return None\n    else:\n        mid = len(lst)//2\n        if len(lst[mid]) > 0:\n            return lst[mid]\n        else:\n            if len(lst) % 2 == 0:\n                return ((lst[mid - 1] + lst[mid])/2)\n            else:\n                return lst[mid]\n                \ndef get_second_largest_numbers_in_a_list(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    second_list = []\n    if len(lst) < 2:\n        return []\n    else:\n        mid = len(lst)//2\n        if len(lst[mid]) > 0:\n            second_list = lst[mid]\n        else:\n            second_list = lst[mid + 1]\n    return second_list\n    \ndef get_second_largest_numbers_in_a_list_2(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    second_list = []\n    if len(lst) < 2:\n        return []\n    else:\n        mid = len(lst)//2\n        if len(lst[mid]) > 0:\n            second_list = lst[mid]\n        else:\n            second_list = lst[mid + 1]\n    return second_list\n    \ndef get_second_largest_numbers_in_a_list_3(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    second_list = []\n    if len(lst) < 2:\n        return []\n    else:\n        mid = len(lst)//2\n        if len(lst[mid]) > 0:\n            second_list = lst[mid]\n        else:\n            second_list = lst[mid + 1]\n    return second_list\n    \ndef get_second_largest_numbers_in_a_list_4(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    second_list = []\n    if len(lst) < 2:\n        return []\n    else:\n        mid = len(lst)//2\n        if len(lst[mid]) > 0:\n            second_list = lst[mid]\n        else:\n            second_list = lst[mid + 1]\n    return second_list\n    \ndef get_second_largest_numbers_in_a_list_5(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    second_list = []\n    if len(lst) < 2:\n        return []\n    else:\n        mid = len(lst)//2\n        if len(lst[mid]) > 0:\n            second_list = lst[mid]\n        else:\n            second_list = lst[mid + 1]\n    return second_list\n    \ndef get_first_largest_numbers_in_a_list(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    if len(lst) < 2:\n        return []\n    else:\n        mid = len(lst)//2\n        if len(lst[mid]) > 0:\n            first_list = lst"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    # your code here\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize empty lists for the sub lists\n    sublists = []\n    sublists2 = []\n    # Append empty lists to each sublists\n    for i in range(len(lst)):\n        sublists.append([])\n        sublists2.append([])\n    # Loop through each sublist\n    for i in range(len(lst)):\n        # Check if the list is empty\n        if lst[i] == []:\n            sublists[i].append([])\n            sublists2[i].append([])\n        # Check if the sublist is empty\n        elif lst[i] == []:\n            sublists[i].append(lst[i])\n            sublists2[i].append([])\n        else:\n            # Check if all sublists are non empty\n            if len(lst[i]) > 1:\n                # Loop through each element of the sublist\n                for j in range(len(lst[i])):\n                    # Add the element to the sublist\n                    sublists[i].append(lst[i][j])\n                    # Check if the element is not the first element\n                    if j == 0:\n                        # Check if it is the second element of the sublist\n                        if lst[i][j]!= lst[i][j-1]:\n                            sublists2[i].append([lst[i][j],lst[i][j-1]])\n                            # Return the lists\n                            return sublists, sublists2\n                        else:\n                            # Check if it is the first element of the sublist\n                            if lst[i][j] == lst[i][j-1]:\n                                # Check if the first element of the sublist is the second element of the sublist\n                                if lst[i][j-1]!= lst[i][j]:\n                                    # Check if the first element of the sublist is the second element of the sublist\n                                    if lst[i][j-1]!= lst[i][j]:\n                                        # Add the second element to the sublist\n                                        sublists[i].append([lst[i][j-1]])\n                                        # Check if the sublist is non empty\n                                        if len(lst[i]) > 1:\n                                            # Check if it is the second element of the sublist\n                                            if lst[i][j-1]!= lst[i][j]:\n                                                sublists2[i].append([lst[i][j-1],lst[i][j]])\n                                                # Return the lists\n                                                return sublists, sublists2\n                                            # If the sublist is non empty\n                                        else:\n                                            # Check if it is the second element of the sublist\n                                            if lst[i][j-1] == lst[i][j]:\n                                                # Add the second element to the sublist\n                                                sublists[i].append([lst[i][j-1]])\n                                                # Return the lists\n                                                return sublists, sublists2\n                                            # If it is the second element of the sublist\n                                        else:\n                                            # Add the second element to the sublist\n                                            sublists[i].append([lst[i][j-1]])\n                                            # Return the lists\n                                            return sublists, sublists2\n                                        # If it is the second element of the sublist\n                                        else:\n                                            # Add the second element to the sublist\n                                            sublists[i].append([lst[i][j]])\n                                            # Return the lists\n                                            return sublists, sublists2\n                            # If the second element of the sublist is the first element of the sublist\n                            else:\n                                # Check if the first element of the sublist is the second element of the sublist\n                                if lst[i][j]!= lst[i][j-1]:\n                                    # Add the second element to the sublist\n                                    sublists[i].append([lst[i][j-1]])\n                                    # Check if the sublist is non empty\n                                    if len(lst[i]) > 1:\n                                        # Check if the second element of the sublist is the first element of the sublist\n                                        if lst[i][j]!= lst[i][j-1]:\n                                            # Check if the first element of the sublist is the second element of the sublist\n                                            if lst[i][j-1]!= lst[i][j]:\n                                                # Add the first element to the sublist\n                                                sublists[i].append([lst[i][j-1]])\n                                                # Check if the sublist is non empty\n                                                if len(lst[i]) > 1:\n                                                    # Check if it is the first element of the sublist\n                                                    if lst[i][j-1]!= lst[i][j]:\n                                                        # Check if the first element of the sublist is the second element of the sublist\n                                                        if lst[i][j-1]!= lst[i][j]:\n                                                            # Add the second element to the sublist\n                                                            sublists[i].append([lst[i][j-1]])\n                                                            # Return the lists\n                                                            return sublists, sublists2\n                                                        # If the sublist is non empty\n                                                    else:\n                                                            # Add the second element to the sublist\n                                                            sublists[i].append([lst[i][j-1]])\n                                                            # Return the lists\n                                                            return sublists, sublists2\n                                                    # If it is the first element of the sublist\n                                                else:\n                                                    # Add the second element to the sublist\n                                                    sublists[i].append([lst[i][j-1]])\n                                                    # Return the lists\n                                                    return sublists, sublists2\n                                                # If the sublist is non empty\n                                        else:\n                                            # Add the second element to the sublist\n                                            sublists[i].append([lst[i][j]])\n                                            # Return the lists\n                                            return sublists, sublists2\n                                # If the second element of the sublist is the first element of the sublist\n                                else:\n                                    # Check if the first element of the sublist is the second element of the sublist\n                                    if lst[i][j] == lst[i][j-1]:\n                                        # Add the second element to the sublist\n                                        sublists[i].append([lst[i][j-1]])\n                                        # Check if the sublist is non empty\n                                        if len(lst[i]) > 1:\n                                            # Check if it is the second element of the sublist\n                                            if lst[i][j-1] == lst[i][j]:\n                                                # Add the first element to the sublist\n                                                sublists[i].append([lst[i][j]])\n                                                # Check if the sublist is non empty\n                                                if len(lst[i]) > 1:\n                                                    # Check if it is the second element of the sublist\n                                                    if lst[i][j-1] == lst[i][j]:\n                                                        # Add the second element to the sublist\n                                                        sublists[i].append([lst[i][j]])\n                                                        # Return the lists\n                                                        return sublists, sublists2\n                                                    # If the sublist is non empty\n                                                else:\n                                                    # Add the second element to the sublist\n                                                    sublists[i].append([lst[i][j-1]])\n                                                    # Return the lists\n                                                    return sublists, sublists2\n                                                # If it is the second element of the sublist\n                                                else:\n                                                    # Add the second element to the sublist\n                                                    sublists[i].append([lst[i][j-1]])\n                                                    # Return the lists\n                                                    return sublists, sublists2\n                                                # If the sublist is non empty\n                                        else:\n                                            # Add the second element to the sublist\n                                            sublists[i].append([lst[i][j-1]])\n                                            # Return the lists\n                                            return sublists, sublists2\n                            # If the second element o"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    final_lst = []\n    for l in lst:\n        final_lst += l\n    return final_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    answer = []\n    for i in range(len(lst)):\n        answer.append([lst[i][0],lst[i][1]])\n    return answer\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        for j in i:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0], [lst[1][0], lst[1][1]]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Applying the function\n    return [ [elm1, elm2] for elm1, elm2 in zip(lst[0], lst[1]) ]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    temp = []\n    while lst:\n        temp.append(lst.pop(0))\n        while lst:\n            temp.append(lst.pop(0))\n        lst = temp\n        temp = []\n    return temp\n    \nprint(merge([[1,2],[3,4]])"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    for element in test_list:\n        if element == 0:\n            summ = summ\n        else:\n            summ += element\n    return summ\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output = []\n    for x in test_list:\n        for y in test_list:\n            output.append(x+y)\n    return output\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    def cummulative_sum(a,t):\n        '''\n        Cummulative sum of the values in list a.\n        '''\n        total = 0\n        for i in a:\n            total += i\n        return total\n    return (cummulative_sum(test_list[0],test_list[1]))\n    \ntest_list=[(1,3),(1,6),(1,4),(1,3),(2,3),(2,7),(2,8),(2,5),(2,9)]\nprint(cummulative_sum(test_list,test_list[1]))\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n    \n    \ndef maximum_subarray_with_given_sum(a, s):\n    '''\n    Find the maximum subarray with sum equals to s.\n    '''\n    res = 0\n    s_arr = [a[0]]\n    for i in range(1, len(a)):\n        s_arr.append(s_arr[i - 1] + a[i])\n        if s_arr[i] == s:\n            res = max(s_arr[i - 1], res)\n    return res\n    \n    \ndef find_duplicate_subarray(arr):\n    '''\n    Find the length of the longest non-duplicated subarray.\n    '''\n    len_arr = []\n    duplicate_arr = []\n    for i in range(len(arr)):\n        if arr[i] not in len_arr:\n            len_arr.append(arr[i])\n        elif arr[i] in len_arr and len(len_arr) < len(duplicate_arr):\n            duplicate_arr.append(arr[i])\n            len_arr.append(arr[i])\n            \n    return len(duplicate_arr)\n    \n    \ndef check_if_array_is_palindrome(a):\n    '''\n    Check if an array is palindrome.\n    '''\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        if a[i] > a[j]:\n            if a[i] > a[j]:\n                return False\n            i += 1\n            j -= 1\n        elif a[i] < a[j]:\n            if a[i] > a[j]:\n                return False\n            i += 1\n            j -= 1\n    return True\n    \n    \ndef find_unique_subarray(arr):\n    '''\n    Find the index of the start point of the unique subarray.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            j -= 1\n            i += 1\n        else:\n            if arr[i] > arr[j]:\n                i += 1\n            else:\n                j -= 1\n    return i + 1\n    \n    \ndef check_if_subarray_is_palindrome(a):\n    '''\n    Check if an array is palindrome.\n    '''\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        if a[i] > a[j]:\n            if a[i] > a[j]:\n                return False\n            i += 1\n            j -= 1\n        elif a[i] < a[j]:\n            if a[i] > a[j]:\n                return False\n            i += 1\n            j -= 1\n    return True\n    \n    \ndef jump_search(a, k):\n    '''\n    Given an array of length n, where the ith element is the ith position of the element a[i],\n    find the starting index of the ith position which is as close to the left as possible.\n    '''\n    if len(a) == 1:\n        return 0\n    for i in range(len(a)):\n        if a[i] + k > a[i + 1]:\n            return i + 1\n    return -1\n    \n    \ndef is_palindrome(a):\n    '''\n    Given an array of numbers, check whether it is palindrome or not.\n    '''\n    if len(a) == 0:\n        return True\n    if check_if_array_is_palindrome(a):\n        return True\n    else:\n        return False\n    \ndef is_sequence_non_overlapping(arr):\n    '''\n    Given an array, check whether there is a subsequence which is non-overlapping or not.\n    '''\n    if len(arr) <= 2:\n        return True\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i]!= arr[j]:\n            return True\n        i += 1\n        j -= 1\n    return False\n    \ndef find_repeating_element(arr):\n    '''\n    Find the index of the repeated element.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            j -= 1\n            i += 1\n        else:\n            if arr[i] < arr[j]:\n                i += 1\n            else:\n                j -= 1\n    return i\n    \n    \ndef find_duplicate_subarray_helper(arr, left, right):\n    '''\n    Given an array, find the length of the subarray which is repeated in the array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            if arr[i] > arr[j]:\n                i += 1\n            else:\n                j -= 1\n    return (i - 1) + (j - i)\n    \ndef find_duplicate_subarray_recursive(arr):\n    '''\n    Given an array, find the length of the subarray which is repeated in the array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    return find_duplicate_subarray_helper(arr, 0, len(arr) - 1)\n    \ndef find_unique_subarray_recursive(arr):\n    '''\n    Given an array, find the index of the start point of the unique subarray.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            j -= 1\n            i += 1\n        else:\n            if arr[i] > arr[j]:\n                i += 1\n            else:\n                j -= 1\n    return i + 1\n    \ndef find_unique_subarray_recursive_slice(arr, start, end):\n    '''\n    Given an array, find the length of the subarray which is repeated in the array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            j -= 1\n            i += 1\n        else:\n            if arr[i] > arr[j]:\n                i += 1\n            else:\n                j -= 1\n    return (i - 1) + (j - i) + (j - i - 1)\n    \ndef find_unique_subarray_with_given_sum(a, s):\n    '''\n    Given an array and a sum, find the length of the longest subarray which has sum as given.\n    '''\n    max_subarray = 0\n    max_subarray_len = -1\n    max_sum = -1\n    for i in range(len(a)):\n        sum = a[i]\n        if sum == s:\n            if sum > max_sum:\n                max_subarray = 1\n                max_subarray_len = i\n            max_sum = sum\n        elif sum > max_sum:\n            max_sum = sum\n            max_subarray = 1\n        elif sum > max_sum and sum > max_sum and sum > max_sum:\n            max_subarray = 1\n            max_subarray_len = i\n    return max_subarray, max_subarray_len\n    \n    \ndef find_subarray_with_given_sum(a, s):\n    '''\n    Given an array, find the length of the subarray which has sum as given.\n    '''\n    subarray = []\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if s <= a[mid]:\n            subarray.append(mid)\n            left = mid + 1\n        else:\n            right = mid - 1\n    return subarray\n    \ndef find"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n    \ndef sum_list(test_list):\n    '''\n    Write a function that returns the sum of all values in the given list.\n    '''\n    return sum(test_list)\n    \ndef num_longest_substring(string):\n    '''\n    Write a function that returns the longest substring in the given string.\n    '''\n    return max(string.split(), key=len)\n    \ndef num_unique_words(string):\n    '''\n    Write a function that returns the number of unique words in the given string.\n    '''\n    return len(set(string.lower().split()))\n    \ndef num_distinct_words(string):\n    '''\n    Write a function that returns the number of distinct words in the given string.\n    '''\n    return len(string.split())\n    \ndef letters_with_occurrences(string):\n    '''\n    Write a function that returns the number of times a given letter occurs in the given string.\n    '''\n    return string.count(string.split()[0])\n    \ndef sum_list_of_strings(string_list):\n    '''\n    Write a function that returns the sum of all the numbers in the given string list.\n    '''\n    return sum(map(int, string_list))\n    \ndef sum_list_of_numbers(string_list):\n    '''\n    Write a function that returns the sum of all the numbers in the given string list.\n    '''\n    return sum(map(int, string_list))\n    \ndef substrings_of_string(string):\n    '''\n    Write a function that returns the substring of the given string starting with that index.\n    '''\n    return string[string.index(string[0])+1:].join(string[0:string.index(string[0])+1])\n    \ndef find_index(string, substring):\n    '''\n    Write a function that returns the index of the first occurrence of the given substring.\n    '''\n    return string.find(substring)\n    \ndef count_elements(string):\n    '''\n    Write a function that returns the number of times a given element occurs in the given string.\n    '''\n    return string.count(string.split()[0])\n    \ndef check_if_string_in_list(string, list_of_strings):\n    '''\n    Write a function that returns True if the string is present in the given list of strings.\n    '''\n    return string in list_of_strings\n    \ndef split_string(string):\n    '''\n    Write a function that returns a list of the words in the string.\n    '''\n    return string.split()\n    \ndef remove_string_from_list(string, list_of_strings):\n    '''\n    Write a function that returns a new list with the words in the given list removed from the given list.\n    '''\n    return list_of_strings.remove(string)\n    \ndef add_string_to_list(string, list_of_strings):\n    '''\n    Write a function that adds a new element to a given list.\n    '''\n    return list_of_strings.append(string)\n    \ndef remove_duplicates(list_of_strings):\n    '''\n    Write a function that removes all duplicates from the given list.\n    '''\n    return list(dict.fromkeys(list_of_strings))\n    \ndef remove_duplicates_and_sort(list_of_strings):\n    '''\n    Write a function that removes all duplicates from the given list and sorts the elements in the list.\n    '''\n    return list(dict.fromkeys(list_of_strings).sort())\n    \ndef sum_of_squares(list_of_numbers):\n    '''\n    Write a function that returns the sum of all numbers in the given list of numbers.\n    '''\n    return sum(map(lambda x: x*x, list_of_numbers))\n    \ndef all_combinations(n, k):\n    '''\n    Write a function that returns all combinations of numbers that are less than or equal to k.\n    '''\n    return itertools.combinations(range(1, n + 1), k)\n    \ndef all_combinations_of_string(string):\n    '''\n    Write a function that returns all combinations of characters in the given string.\n    '''\n    return itertools.combinations_with_replacement(string, len(string))\n    \ndef count_substring_length(string, substring):\n    '''\n    Write a function that returns the length of the substring in the given string.\n    '''\n    return string.count(substring)\n    \ndef longest_substring_with_distinct_words(string):\n    '''\n    Write a function that returns the longest word in the given string that contains at least two distinct characters.\n    '''\n    return max(string.split(), key=len)\n    \ndef all_words_in_list(string):\n    '''\n    Write a function that returns a list of all the words in the given list.\n    '''\n    return string.split()\n    \ndef is_palindrome(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_1(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_2(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_3(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_4(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_5(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_6(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_7(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_8(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_9(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_10(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_11(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_12(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_13(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome_14(string):\n    '''\n    Write a function that returns True if the given string is a palindrome.\n    '''\n    return string == string[::-1]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # <1>\n    # Create an empty list\n    cum_sum = []\n    # Loop through the tuples\n    for i in test_list:\n        # Add 1 to the cumulative sum\n        cum_sum.append(i + 1)\n    # Return the sum\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_of_values = 0\n    for value in test_list:\n        sum_of_values += value\n    return sum_of_values\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    # your code goes here\n    total_sum = 0\n    for i in nums:\n        total_sum += sum(i)\n    return [round((i/total_sum),2) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    total_count = 0\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(nums)/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for t in nums:\n        total.append(sum(t)/len(t))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    import math\n    return [round(sum(nums)/len(nums),2) for nums in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tot_total = 0\n    avg_total = []\n    for i in range(len(nums)):\n        tot_total += nums[i][0]\n        avg_total.append(nums[i][0])\n    return [avg_total, tot_total/len(nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for tup in nums:\n        tuple_list.append(tup)\n    \n    return tuple(tuple_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_of_tuples = []\n    for tuple in nums:\n        list_of_tuples.append(tuple)\n    average_list = []\n    for tuple in list_of_tuples:\n        average = sum(tuple)/len(tuple)\n        average_list.append(average)\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for element in nums:\n        tuple_list.append(element)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = []\n    for n in nums:\n        if n:\n            sum.append(sum(n))\n    return sum\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple_mod = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    return tuple(tuple_mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for x in range(0,len(test_tup1)):\n            if test_tup1[x] % test_tup2[x] == 0:\n                test_tup1[x] %= test_tup2[x]\n            else:\n                return \"Error: Modulo By Zero\"\n        return test_tup1\n    else:\n        return \"Error: tuples must be of the same length\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = tuple_add(result, test_tup1[i])\n    for i in range(len(test_tup2)):\n        result = tuple_add(result, test_tup2[i])\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # if both the tuples are the same length\n    if len(test_tup1) == len(test_tup2):\n        # for each element in the tuple, compute the modulo and return the result\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        return test_tup1\n    else:\n        print(\"ERROR: the given tuples are not the same length\")\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Set up tuples of all the elements\n    tuple_1 = test_tup1\n    tuple_2 = test_tup2\n    # Loop through the tuples\n    for x in range(len(tuple_1)):\n        # Add each element of the tuple\n        tuple_1[x] = tuple_1[x] % tuple_2[x]\n    # Return the tuple\n    return tuple_1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    '''\n    test_tup1 = (1, 2, 3, 4, 5)\n    test_tup2 = (6, 7, 8, 9, 10)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple_test = test_tup1 + test_tup2\n    print(tuple_test)\n    result = tuple_test % tuple_test\n    print(result)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    result = ()\n    #Element wise modulo\n    for i in range(len(tup1)):\n        result = result + (tup1[i] % tup2[i])\n    return result\n    \ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (6, 7, 8, 9, 10)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tuple_test = test_tup1 + test_tup2\n    modulo = tuple_test % 1\n    print(modulo)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0):\n        return 0\n    elif (d < 0):\n        return min_Jumps(steps, d * -1)\n    elif (d >= 0):\n        return min_Jumps(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    minJumps = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Base case (if we're at origin)\n    if steps == 0: \n        return 1\n    \n    # Check if we're at origin and increment the steps if necessary\n    if d == 0: \n        return steps + min_Jumps(steps - 1, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d: \n        return 0\n    if steps == d: \n        return 1\n    \n    steps += min_Jumps(steps, d)\n    min_Jumps(steps, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Step 1: compute the distance between the origin and the target point.\n    # Solution 1: Euclidean distance\n    dist = abs(steps[0] - steps[-1])\n    # Step 2: find the number of jumps required\n    return dist + len(steps) - 2 * d\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Step 1: Check whether the point of origin lies on the same grid as origin \n    # The point of origin can only lie on the same grid as origin and one is at a corner \n    if steps[d][0] == d and d!= 0:\n        return 0 # No jumps required\n    elif steps[d][0] == d and d!= 0 and steps[d][1] == 0:\n        return 1 # No jumps required\n    elif steps[d][0] == d and d!= 0 and steps[d][1] == 0:\n        return 2 # One jump required\n    elif steps[d][0] == d and d!= 0 and steps[d][1] == 0:\n        return 3 # Two jumps required\n    # Step 2: If the next step is from origin to point of origin, then jump must be required\n    if steps[d][0] < d and steps[d][0] <= d+1: # If origin is in lower triangle\n        return steps[d][1] # Jump is required\n    elif steps[d][0] < d+1 and steps[d][0] > d: # If origin is in upper triangle\n        return steps[d][1] + 1 # Jump is required\n    elif steps[d][0] >= d+1 and steps[d][0] <= d+2: # If origin is in upper triangle\n        return steps[d][1] + 1 # Jump is required\n    elif steps[d][0] == d+1:\n        return steps[d][1] + 2 # Two jumps required\n    # Step 3: If next step is in same direction as origin, then jump must be required\n    if steps[d][0] < d and steps[d][1] < d: # If origin is in lower triangle\n        return steps[d][1] # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 1 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 1 # Jump is required\n    elif steps[d][0] > d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 2 # Jump is required\n    elif steps[d][0] > d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 2 # Jump is required\n    elif steps[d][0] < d and steps[d][1] > d: # If origin is in lower triangle\n        return steps[d][1] + 3 # Jump is required\n    elif steps[d][0] > d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 3 # Jump is required\n    # Step 4: If next step is in same direction as origin, then jump must be required\n    if steps[d][0] < d and steps[d][1] < d: # If origin is in lower triangle\n        return steps[d][1] + 3 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 3 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 3 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 3 # Jump is required\n    elif steps[d][0] > d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] > d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] > d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 4 # Jump is required\n    # Step 5: If next step is in same direction as origin, then jump must be required\n    if steps[d][0] < d and steps[d][1] < d: # If origin is in lower triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] > d: # If origin is in lower triangle\n        return steps[d][1] + 4 # Jump is required\n    elif steps[d][0] < d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] < d and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] > d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 5 # Jump is required\n    elif steps[d][0] < d and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 6 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] + 6 # Jump is required\n    elif steps[d][0] < d and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 6 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] > d: # If origin is in upper triangle\n        return steps[d][1] + 6 # Jump is required\n    elif steps[d][0] < d+1 and steps[d][1] < d: # If origin is in upper triangle\n        return steps[d][1] "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Your code here\n    if steps == 0: \n        return 0\n    if steps < d: \n        return -1\n    return min_Jumps(steps - 1, d) + "
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #base case\n    if steps == 0:\n        return 0\n    if steps == 1:\n        return 1\n    #recursive case\n    return min(min_Jumps(steps-1, d), min_Jumps(steps, d-1))\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def d_min(steps, d):\n        if steps > 0:\n            return d_min(steps - 1, d + 1)\n        if steps < 0:\n            return d_min(-steps, d + 1)\n        return steps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    N = steps\n    J = (steps // d) * d\n    J = J if J < N else N\n    \n    return J\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # your code goes here\n    n=len(nums1)\n    i=0\n    j=0\n    while(i<n and j<n):\n        if(nums1[i]==nums2[j]):\n            nums1[i],nums1[j]=nums1[j],nums1[i]\n            nums2[i],nums2[j]=nums2[j],nums2[i]\n            i+=1\n            j+=1\n            continue\n        if(nums1[i]<nums2[j]):\n            nums1[i],nums1[j]=nums1[j],nums1[i]\n            nums2[i],nums2[j]=nums2[j],nums2[i]\n            i+=1\n        if(nums2[j]<nums1[i]):\n            nums2[j],nums2[i]=nums2[i],nums2[j]\n            nums1[i],nums1[j]=nums1[j],nums1[i]\n            i+=1\n            j+=1\n    print(nums1,nums2)\n    return [nums1,nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Your code here\n    if len(nums1) < 2:\n        return (nums1,nums2)\n    for num in nums2:\n        nums1[-1].append(num)\n    return (nums1,nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print(nums1)\n    print(nums2)\n    length1 = len(nums1)\n    length2 = len(nums2)\n    for i in range(0,length1):\n        for j in range(0,length2):\n            if nums1[i] == nums2[j]:\n                print(nums1[i],nums2[j])\n                nums1.pop(i)\n                nums2.pop(j)\n                break\n        else:\n            nums1.append(nums1[i])\n            nums2.append(nums2[i])\n    return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def elementwise_mul(lst):\n        '''\n        Write a function to multiply two lists element wise.\n        '''\n        res = []\n        for i in range(len(lst)):\n            res.append(lst[i]*nums1[i])\n        return res\n    \n    return elementwise_mul(nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list = []\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            list.append(nums1[i])\n            nums2.remove(nums1[i])\n    return list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print(nums1)\n    print(nums2)\n    print('----------------')\n    print(nums1/nums2)\n    print('----------------')\n    print(nums1**2)\n    print('----------------')\n    print(nums1//nums2)\n    print('----------------')\n    print(nums1%nums2)\n    print('----------------')\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    \n    for item in nums1:\n        new_list.append(item)\n    for item in nums2:\n        new_list.append(item)\n    \n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # you can write the code here\n    if len(nums1)==len(nums2):\n        print(nums1,'-',nums2)\n        return\n    else:\n        return\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [e for e in nums1 if e in nums2]\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in test_str:\n        if i.isdigit():\n            if i.isnumeric():\n                result += i\n            else:\n                result += str(i)\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\".\", \"\")\n    test_str = test_str.replace(\",\", \"\")\n    test_str = test_str.replace(\"and\", \"and\")\n    test_str = test_str.replace(\"-\", \" \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str = test_str.replace(\"and\", \"and \")\n    test_str "
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.strip() # Remove spaces\n    start_num = 0\n    end_num = len(test_str) - 1\n    for i in range(0, len(test_str)):\n        if test_str[i] =='':\n            start_num = i\n        if i == len(test_str) - 1:\n            end_num = i\n        if test_str[i] == '+' or test_str[i] == '-':\n            test_str = test_str[:i] + str(eval(test_str[i:end_num])) + test_str[end_num:]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Your code goes here...\n    if not test_str:\n        return\n    \n    # now, we need to move all numbers to the end of the string.\n    # we need to make a list of numbers\n    # and then after that, we need to move them to the end of the string\n    # then we have to return the string in this line\n    numbers = []\n    for i in test_str:\n        if i.isdigit():\n            numbers.append(int(i))\n        else:\n            numbers.append(i)\n    return ''.join(numbers)\n    \nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"s = \")\n    print(\"Move_num\")\n    print(\"Exception :\")\n    print(\"123456789\")\n    print(\"Output :\")\n    print(str(move_num(\"s \")))\n    print()\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    pos = 0\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(int(char))\n            pos = len(numbers) - 1\n        else:\n            numbers[pos] = char\n            pos = pos - 1\n    return str(numbers[pos:])\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = []\n    for c in test_str:\n        if c.isdigit():\n            result.append(c)\n    for i in range(len(result)):\n        result[i] = ''.join(reversed(result[i]))\n    return ''.join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = test_str.split(' ')\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i].zfill(2))\n    return''.join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_list = test_str.split(' ')\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].zfill(2)\n    return ''.join(test_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp_str = test_str.split()\n    for i in range(len(temp_str)):\n        temp_str[i] = int(temp_str[i])\n    temp_str.reverse()\n    test_str = ''.join(temp_str)\n    print(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('-', '')\n    test_str = test_str.replace(' ', '')\n    result = ''\n    for num in test_str:\n        if num.isdigit():\n            result += num\n        else:\n            result += str(int(num))\n    return result\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = []\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i] % a[j] == 0:\n                subset.append(a[i])\n                subset.append(a[j])\n    return len(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Write your code here\n    a.sort()\n    big_subset = a[0]\n    counter = 1\n    for i in range(1, len(a)):\n        if a[i] % big_subset == 0:\n            counter += 1\n        else:\n            break\n    return counter\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    L = len(a)\n    if L == 0:\n        return []\n    if L == 1:\n        return [a[0]]\n    if L == 2:\n        return [min(a[0], a[1]), max(a[0], a[1])]\n    \n    # create dictionary\n    freq = {}\n    for i in range(L):\n        if a[i] not in freq:\n            freq[a[i]] = 1\n        else:\n            freq[a[i]] += 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if sum(a)==0:\n        return 0\n    elif a.count(0)==len(a):\n        return a[0]\n    max_subset = a[0]\n    for i in range(1,len(a)):\n        if a[i] % a[i-1] == 0:\n            return a[i]\n        elif a[i] % a[i-1] > 0:\n            return a[i]\n        max_subset = max(max_subset, a[i]/a[i-1])\n    return a[len(a)-1]/max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    \n    # Find largest subset of a\n    size = -1\n    for i in range(len(a)):\n        if a[i] % 2 == 1:\n            subset = largest_subset(a[i + 1:])\n            if subset > size:\n                size = subset\n    return size + 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def check(index, length, subset):\n        # Check the current length of the current subset and if it is not a subset\n        # of the previous index then check it again\n        if subset[index] == length and subset[index]!= index:\n            return False\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = []\n    res = []\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    ## IMPLEMENTATION\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    '''\n    Quick Method:\n    \n    '''\n    if not a:\n        return 0\n    #if not a[0]%2==0:\n        #return len(a)\n    \n    res = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            #print(a[i], a[j])\n            if a[j] % 2 == 0:\n                res = max(res, 1 + largest_subset(a[:i] + a[i+1:]))\n    return res\n    \n    \n    '''\n    Recursive Method:\n    \n    '''\n    def largest_subset(a):\n        if not a:\n            return 0\n        if not a[0]%2==0:\n            return len(a)\n        res = 0\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                #print(a[i], a[j])\n                if a[j] % 2 == 0:\n                    res = max(res, 1 + largest_subset(a[:i] + a[i+1:]))\n        return res\n    \n    '''\n    Dictionary Comprehension Method:\n    \n    '''\n    def largest_subset(a):\n        if not a:\n            return 0\n        ans = {}\n        #if not a[0]%2==0:\n            #return len(a)\n        res = 0\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                #print(a[i], a[j])\n                if a[j] % 2 == 0:\n                    ans[a[i]] = ans.get(a[i], 0) + 1\n                    res = max(res, ans[a[i]] + ans[a[j]])\n        return res\n    \n    return largest_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = []\n    for num in a:\n        if num not in nums:\n            nums.append(num)\n    \n    min_subset_len = len(nums)\n    subsets = set(nums)\n    for subset in subsets:\n        if len(nums) % subset == 0:\n            min_subset_len = min(min_subset_len, len(nums)//subset)\n    \n    return min_subset_len\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Your code here\n    if len(arr1)<len(arr2):\n        median=arr1\n        a=len(arr1)\n    else:\n        median=arr2\n        a=len(arr2)\n    if a%2==0:\n        if a==1:\n            return arr2[int((a-1)/2)]\n        else:\n            return (arr2[int(a/2)-1]+arr2[int(a/2)])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return arr1[0]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) < len(arr2):\n        return (get_median(arr2, arr1, n))\n    else:\n        return (get_median(arr1, arr2, n))\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n = len(arr1)\n    if n == 0:\n        return arr2[0]\n    elif n == 1:\n        return arr1[0]\n    \n    mid = n // 2\n    \n    if arr1[mid] >= arr2[mid]:\n        return get_median(arr1[:mid], arr2[:mid], n)\n    \n    return get_median(arr1[mid:], arr2[mid:], n)\n    \n    \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    if arr1_len > arr2_len:\n        arr2 = arr2[:arr1_len]\n        arr1 = arr1[:arr1_len]\n        i = arr1_len // 2\n        j = arr1_len - i\n        return arr1[i] if arr1[i] < arr2[i] else arr2[j]\n    else:\n        arr1 = arr1[:arr2_len]\n        arr2 = arr2[:arr2_len]\n        i = arr2_len // 2\n        j = arr2_len - i\n        return arr1[i] if arr1[i] < arr2[i] else arr2[j]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Your code here\n    if n==1:\n        return arr1[0]\n    if n==2:\n        return (arr1[0] + arr1[1])/2\n    \n    if n%2==0:\n        median1=get_median(arr1[:n//2], arr2[:n//2], n//2)\n        median2=get_median(arr1[n//2:], arr2[n//2:], n//2)\n        return (median1 + median2)/2\n    else:\n        return get_median(arr1, arr2[:n//2], n//2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Median = kth element from both sorted lists of same size.\n    if n < 2:\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        return get_median(arr2, arr1, len(arr2))\n    if len(arr1) == len(arr2):\n        return (sorted(arr1)[len(arr1) // 2])\n    elif len(arr1) == 0:\n        return (sorted(arr2)[len(arr2) // 2])\n    elif len(arr2) == 0:\n        return (sorted(arr1)[len(arr1) // 2])\n    else:\n        return (sorted(arr1)[len(arr1) // 2] + sorted(arr2)[len(arr2) // 2]) / 2\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m == 0 or n == 0:\n        return -1\n    \n    if n == 0:\n        if arr1 > arr2:\n            return arr1\n        else:\n            return arr2\n    \n    if m == 0:\n        if arr1[0] > arr2[0]:\n            return arr1[0]\n        else:\n            return arr2[0]\n    \n    if n == 0:\n        if arr1[0] == arr2[0]:\n            return arr1[0]\n        else:\n            return (arr1[0] + arr2[0]) / 2\n    \n    if m < n:\n        return get_median(arr1, arr2, n)\n    \n    return get_median(arr1, arr2, m)\n    \ndef count_even_indexes(arr):\n    '''\n    Write a function that returns the number of even numbers in the given array.\n    '''\n    n = len(arr)\n    return (arr.count(0) + arr.count(1)) / 2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**i for i in range(len(nums)) if not (i+1)%n]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return [1]\n    elif n==2:\n        return [1,1]\n    else:\n        new_n=n-1\n        ans=[1,1]\n        for i in range(2,n+1):\n            ans[0] = ans[0]*i\n            ans[1] = ans[1]*i\n        return ans\n    \nn=int(input())\nprint(*nth_nums([1,2,3,4,5,6,7,8,9,10],n))"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Print the answer\n    print(' '.join([str(x) for x in nums]))\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    \n    return [n*item for item in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # O(N)\n    return [pow(i,n) for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    return [nums[i]**n for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums)==1:\n        return nums[0]\n    else:\n        return nth_nums(nums[1:],n-1)**nums[0]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nth_power = [pow(n,i) for i in range(1,len(nums)+1)]\n    return nth_power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0]*nth_nums(nums[1:],n-1)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.replace(' ', '')\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    is_upper = True\n    for letter in string:\n        if letter.isupper():\n            is_upper = True\n        else:\n            is_upper = False\n    return is_upper\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Your code here\n    return string.upper()\n    \nprint(is_upper('Is it upper?'))\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if type(string)!= str:\n        raise TypeError(\"string must be a string\")\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # TODO: modify this function to convert to uppercase\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #Hint:  Use two pointers to return the elements of the given list\n    #HINT:  Modify the function by swapping the elements of the given list with the first and last element in the sorted list\n    #HINT:  Modify the function by changing the first element of the list from index 0 to index 2. \n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 3.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 4.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 5.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 6.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 7.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 8.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 9.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 10.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 11.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 12.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 13.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 14.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 15.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 16.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 17.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 18.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 19.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 20.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 21.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 22.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 23.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 24.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 25.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 26.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 27.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 28.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 29.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 30.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 31.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 32.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 33.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 34.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 35.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 36.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 37.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 38.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 39.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 40.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 41.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 42.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 43.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 44.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 45.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 46.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 47.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 48.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 49.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 50.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 51.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 52.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 53.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 54.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 55.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 56.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 57.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 58.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of the list from index 0 to index 59.\n    #HINT:  Modify the function by swapping the elements of the given list with the last element of the list from index 1 to index 60.\n    #HINT:  Modify the function by swapping the elements of the given list with the first element of th"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[1], newList[-1] = newList[-1], newList[1]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code goes here\n    newList.reverse()\n    newList.sort()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code goes here\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # remove first and last element\n    first = newList.pop(0)\n    newList.append(first)\n    last = newList.pop()\n    newList.append(last)\n    \n    # replace first and last element\n    newList.insert(0,first)\n    newList.insert(len(newList),last)\n    return newList\n    \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = [item for index, item in enumerate(newList) if index == 0 or index == len(newList)-1]\n    print(new_list)\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n=len(newList)\n    for i in range(n-1): \n        newList[i],newList[n-1] = newList[n-1],newList[i] \n    return newList\n    \nnewList = [1,2,3,4,5,6,7,8,9,10]\nprint(swap_List(newList)) "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[-1]\n    newList[-1] = newList[-2]\n    newList[-2] = temp\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList) \n    print(\"Interchange the first and last element in\", n,\"elements\")\n    print(newList)\n    for i in range(0, n):\n        newList[i], newList[n-1-i] = newList[n-1-i], newList[i]\n    \n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # YOUR CODE HERE\n    if len(newList)%2!=0:\n        return newList\n    else:\n        mid_point=len(newList)//2\n        newList[mid_point],newList[len(newList)-1]=newList[len(newList)-1],newList[mid_point]\n        return newList\n        \n    \n    \n    \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    try : \n        a = 3*(r**2)\n        b = 2*(r**2)\n        c = ((r-1)**2)\n        d = 2*(r-1)\n        if(a > b and a > c) :\n            a = a - b\n        elif(b > c and b > d) :\n            b = b - c\n        else :\n            c = c - d\n        print(\"Area of Triangle : \",a,\"\\nArea of Semi Circle : \",b,\"\\nArea of Circle : \",c,\"\\n\")\n    except : \n        print(\"Please enter valid input\")\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if(r < 0):\n        return \"The radius must be greater than 0.\"\n    elif(r == 0):\n        return \"The circle is circular.\"\n    else:\n        return \"The area of the triangle with radius \" + str(r) + \" is \" + str(triangle_area_calc(r))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (((r ** 2 + r ** 2 + 1) / 2) ** 0.5) ** 2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Input : \n    # r : radius of a circle\n    # Output : Area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \n    def bigger_triangle(t1, t2, t3) :\n        '''\n        Write a python function to find the biggest triangle that can be inscribed in a semicircle with a given radius.\n        '''\n        # Input : \n        # t1 : Triangle A\n        # t2 : Triangle B\n        # t3 : Triangle C\n        # Output :\n        # tr1 : A triangle that can be inscribed\n        # tr2 : B triangle that can be inscribed\n        # tr3 : C triangle that can be inscribed\n        # Output :\n        # tr1 : Triangle A\n        # tr2 : Triangle B\n        # tr3 : Triangle C\n        \n        if (t1[0] >= t2[0] and t1[1] >= t2[1] and t1[2] >= t2[2]) and (t1[0] >= t3[0] and t1[1] >= t3[1] and t1[2] >= t3[2]):\n            return t1\n        elif (t2[0] >= t1[0] and t2[1] >= t1[1] and t2[2] >= t1[2]) and (t2[0] >= t3[0] and t2[1] >= t3[1] and t2[2] >= t3[2]):\n            return t2\n        else:\n            return t3\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(a, b, c, d) :\n        return (a*(b+d)-c*(d+b))/(2*a)\n        \n    if(r < 0) : return 0\n        \n    area = area(a, b, c, d)\n        \n    if area > r : return 0\n        \n    elif area < r :\n        return area\n        \n    elif area == r :\n        return 1.0\n        \n    else :\n        return area\n        \n    \n    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 3*r*r + 4*r*r*r\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.0\n    for i in range(1, r+1) :\n        area += (r*i)**2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (2*r*r + r*r*r - 4*r*r*r) / 2\n    b = 2*r*r\n    c = 4*r\n    if a == 0 :\n        return 0\n    else :\n        return (b*b + c*c - a*a) / (2*a)\n    "
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area_squared = 0\n    i = 0\n    while r > 0 :\n        area_squared += r ** 2\n        i += 1\n        r -= 1\n    return area_squared ** 0.5\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start > end:\n        return None\n    if end is None:\n        end = len(array) - 1\n    \n    # Declaring a counter\n    counter = 0\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Second_Missing(array,mid+1,end)\n    else:\n        return find_Second_Missing(array,start,mid-1)\n    \ndef find_Second_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the second greater number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Second_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Second_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Third_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the third greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Third_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Third_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Fourth_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the fourth greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Fourth_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Fourth_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Fifth_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the fifth greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Fifth_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Fifth_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Sixth_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the sixth greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Sixth_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Sixth_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Seventh_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the seventh greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Seventh_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Seventh_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Eighth_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the eighth greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Eighth_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Eighth_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Ninth_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the ninth greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Ninth_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Ninth_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Tenth_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    '''\n    Write a python function to find the tenth greater or equal number or greater than or equal to mid number in a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return -1\n    mid = (start + end)//2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] < mid:\n        return find_Tenth_Greater_or_Equal_to_Mid(array,mid+1,end)\n    else:\n        return find_Tenth_Greater_or_Equal_to_Mid(array,start,mid-1)\n    \ndef find_Eleventh_Greater_or_Equal_to_Mid(array,start=0,end=None):\n    ''"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start < 0:\n        start = 0\n    if start > end:\n        return -1\n    if array[start] == start:\n        return start\n    elif array[end] == end:\n        return end\n    else:\n        return find_First_Missing(array,start+1,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    \n    if start==end:\n        return array[start]\n    \n    mid=int((start+end)/2)\n    \n    if array[mid]<array[mid+1]:\n        return array[mid]\n    \n    elif array[mid]>=array[mid+1]:\n        return array[mid+1]\n    \n    else:\n        return find_First_Missing(array,start,mid-1)\n    \n    #write the code here\n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    \n    if start==end:\n        return array[start]\n    \n    mid=int((start+end)/2)\n    \n    if array[mid]<array[mid+1]:\n        return array[mid]\n    \n    elif array[mid]>=array[mid+1]:\n        return array[mid+1]\n    \n    else:\n        return find_Second_Missing(array,start,mid-1)\n    \n    #write the code here\n    \ndef find_Third_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the third smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    \n    if start==end:\n        return array[start]\n    \n    mid=int((start+end)/2)\n    \n    if array[mid]<array[mid+1]:\n        return array[mid]\n    \n    elif array[mid]>=array[mid+1]:\n        return array[mid+1]\n    \n    else:\n        return find_Third_Missing(array,start,mid-1)\n    \n    #write the code here\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    \n    # Find the index of the first element where the current value is equal to the missing value\n    i = find_index(array,start,end,end)\n    \n    # Remove the start and end elements of array and return the first missing\n    if i == len(array)-1:\n        return array[i]\n    elif array[i+1] == end:\n        # Return the start\n        return array[i]\n    elif array[i-1] == start:\n        # Return the start\n        return array[i]\n    else:\n        return find_First_Missing(array,start,i-1,end) + find_First_Missing(array,i+1,end,start)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    # check if end is not greater than start\n    # if not, return index\n    if end - start <= 1:\n        return start\n    \n    # initialize the smaller number at the middle\n    mid = start + (end - start) // 2\n    \n    # find the largest missing number\n    # now find the first missing number\n    # find the last number\n    # if number is less than the middle\n    # return the last number\n    # if number is greater than the middle\n    # return the first number\n    if array[mid] < array[mid - 1]:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start >= end:\n        print(\"Start: \",start,\"End: \",end)\n    for i in range(start,end):\n        if i == end:\n            if array[i] == start:\n                print(\"Found\",array[i],\"\\n\")\n                return i\n        if array[i]!= start:\n            j = start\n            while j < end and array[j] < array[j+1]:\n                j += 1\n            print(\"Found\",array[i],\"\\n\")\n            print(\"Swap \",i,j)\n            array[i],array[j] = array[j],array[i]\n    print(\"No Match\")\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    if start == end:\n        return 0\n    \n    first = start\n    second = start\n    \n    for i in range(start,end):\n        if array[i] > array[first]:\n            second = first\n            first = i\n        elif array[i] < array[second]:\n            second = i\n    \n    if first == end or second == start:\n        return 0\n    \n    return first+1\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # YOUR CODE HERE\n    return string.replace(' ', '%20')\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if string == None:\n        return string\n    else:\n        return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if string is None or string == '':\n        return ''\n    \n    newString = ''\n    for char in string:\n        if char =='':\n            newString += '%20'\n        else:\n            newString += char\n    return newString\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Make a copy of string\n    string = string.replace(' ', '%20')\n    # Make a copy of the regef to replace the spaces with %20\n    string = string.replace('%20', '%')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    oddList = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            evenList.append(list[i])\n        else:\n            oddList.append(list[i])\n    return evenList, oddList\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for x in list:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if len(list) <= 0: \n        return [] \n    evens = [] \n    odds = [] \n    for i in range(0, len(list)): \n        if list[i] % 2 == 0: \n            evens.append(list[i]) \n        else: \n            odds.append(list[i]) \n    return evens + odds \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if (num%2 == 0):\n            even_list.append(num)\n    return even_list\n        \nlist = [7, 3, 2, 4, 1, 9, 5]\nlist = Split(list)\nprint(list"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [e for e in list if e%2==0]\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    for i in list: \n        if i % 2 == 0: \n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for number in list: \n        if number % 2 == 0: \n            even.append(number) \n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == 'ABC': return sub\n    else: return sub + [ele]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return tuple( map( lambda x: (x[1], x[0]), ele ))\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if ele[0] < 0 or ele[0] > len(arr) - 1:\n        return False\n    if ele[1] < 0 or ele[1] > len(arr) - 1:\n        return False\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    try:\n        ele = ele[0]\n    except IndexError: \n        return []\n    else:\n        # return sub if ele is a coordinate tuple\n        return sub + [ele[0], ele[1]+1, ele[0]+1, ele[1]]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    adj = []\n    for i in range(3):\n        for j in range(3):\n            if i+j < 6 or i+j > 7:\n                adj.append((x+j,y+i))\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele) \n    if ele[0] > 0: \n        adjac(ele[0] - 1, sub) \n    if ele[0] < len(grid) - 1: \n        adjac(ele[0] + 1, sub) \n    if ele[1] > 0: \n        adjac(ele[1] - 1, sub) \n    if ele[1] < len(grid[0]) - 1: \n        adjac(ele[1] + 1, sub) \n    \n    return sub\n    \n    \ndef dfs(grid, parent, visited): \n    '''\n    Write a function to print all the coordinates of the visited nodes.\n    '''\n    if visited[parent] == 1: \n        return \n    else: \n        print(parent, end = \" \") \n        visited[parent] = 1\n        dfs(grid, parent, visited) \n        \n        \ndef bfs(grid, visited, parent): \n    '''\n    Write a function to print all the coordinates of the visited nodes.\n    '''\n    queue = [] \n    queue.append(parent) \n    visited[parent] = 1\n    while len(queue) > 0: \n        x = queue.pop(0) \n        print(x, end = \" \") \n        for i in range(len(grid[0])): \n            if grid[x][i] == 1 and visited[i] == 0: \n                queue.append(i) \n                visited[i] = 1\n                \ngrid = [[0,0,0,1,0,0],[0,0,0,1,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,1,0,1,0]]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = ele\n    if len(sub) == 1:\n        return sub\n    else:\n        sub = sub[0] + (sub[1] + ele[0]) * 2\n        return adjac(sub, sub[1])\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        adjac(ele[0], sub)\n        adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return sub\n    else: sub.append(ele)\n    return adjac(ele[0], sub) + adjac(ele[1], sub)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('  ', '_').lower()\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\t', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\r', '_')\n    text = text.replace('\\s', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i, char in enumerate(text):\n        if char =='':\n            text = text[:i] + '_' + text[i:]\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    text = text.replace(' ', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\t', '_')\n    text = text.replace('\\r', '_')\n    text = text.replace('\\f', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('  ','_').replace(' ','_').replace('\\t','_').replace('\\n','_')\n    # remove all white spaces from a string\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    str_text = text.replace(' ','_').replace('\\n','_').replace('\\r','_').replace('\\t','_')\n    return str_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_').replace('    ', '_').replace('#    ', '__').replace('  ', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\t', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_string = text.replace(\" \", \"_\").replace(\"\\n\", \"_\").replace(\"\\t\", \"_\").replace(\"\\r\", \"_\")\n    return text_string\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    zero_count = 0\n    for i in num_list:\n        if i == 0:\n            zero_count += 1\n        else:\n            new_list.append(i)\n            zero_count = 0\n    if zero_count == 0:\n        return new_list\n    else:\n        return new_list[::-1]\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    try:\n        num_list.remove(0)\n    except ValueError:\n        pass\n    else:\n        num_list.reverse()\n        num_list.reverse()\n        num_list.extend(num_list)\n        num_list.reverse()\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    output_list = []\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    temp = 0\n    while num_list!= []:\n        for i in num_list:\n            if i == 0:\n                num_list.remove(i)\n                temp += 1\n    return temp\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [i for i in num_list if i!= 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # code goes here\n    print(num_list)\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list[i])\n            num_list.pop(i)\n            print(num_list)\n    print(num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 'X'\n        else:\n            pass\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    num_list = list(num_list)\n    num_list = [num for num in num_list]\n    num_list = [num for num in num_list if num!= 0]\n    num_list = list(num_list)\n    num_list.extend([0] * (zero_count - len(num_list)))\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(num_list)\n    num_list.sort()\n    j = len(num_list)\n    while j > 1:\n        if num_list[j - 1] == 0:\n            num_list[j - 1] = num_list[j]\n            num_list[j] = 0\n            j -= 1\n        j -= 1\n    num_list.sort()\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0 \n    for i in range(len(arr)) :\n        for j in range(i+1,len(arr)) :\n            sum += arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #raise NotImplementedError\n    return sum(map(lambda x,y: x^y,arr[0::2],arr[1::2]))\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 1 : raise ValueError(\"Invalid argument.\")\n    x = 0\n    y = 0\n    for i in range(n) :\n        x = x ^ arr[i]\n        y = y ^ arr[i]\n    return x ^ y\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # currentSum = 0\n    # for i in range(0,n):\n    #     currentSum += arr[i]\n    #     for j in range(0,n):\n    #         if j!= i and arr[j] == arr[i] :\n    #             currentSum = (currentSum ^ arr[j])\n    # return currentSum\n    totalSum = 0\n    n = n//2\n    # for i in range(0,n):\n    #     totalSum = totalSum + arr[i]\n    # for j in range(0,n):\n    #     totalSum = totalSum ^ arr[j]\n    for i in range(0,n):\n        totalSum = totalSum ^ arr[i]\n    # print(totalSum)\n    return totalSum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = []\n    for i in range(n) : \n        for j in range(i+1,n) :\n            result.append(arr[i]^arr[j])\n    return sum(result)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return sum([(xor(arr[i],arr[j])^xor(arr[j],arr[i])) for i in range(n) for j in range(i+1,n)])\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # the list of numbers\n    arr_list = arr\n    # check for 0 index\n    if (n==0):\n        return 0\n    # if we have a 0 index we have to return the sum of all pairs\n    if (n==1):\n        return sum(arr_list)\n    # the length of the list\n    # i is the index of the tuple\n    i = 1\n    # if the sum of the first pair is 0 then we need to return the sum of all pairs\n    # first we need to check if the index is 0\n    if (arr_list[0]==0):\n        return pair_xor_Sum(arr_list,n-1)\n    # if the first element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # if the second element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # if the last element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # if the last element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # we need to return the sum of all pairs\n    return pair_xor_Sum(arr_list[i:],n-i)\n    \ndef pair_xor_Sum_Dup_Length(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # the list of numbers\n    arr_list = arr\n    # check for 0 index\n    if (n==0):\n        return 0\n    # if we have a 0 index we have to return the sum of all pairs\n    if (n==1):\n        return sum(arr_list)\n    # the length of the list\n    # i is the index of the tuple\n    i = 1\n    # if the sum of the first pair is 0 then we need to return the sum of all pairs\n    # first we need to check if the index is 0\n    if (arr_list[0]==0):\n        return pair_xor_Sum_Dup_Length(arr_list,n-1)\n    # if the first element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # if the second element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # if the last element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # if the last element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # if the last element of the list is 0 then we need to return the sum of all pairs\n    # i is the index of the tuple\n    while (i<len(arr_list) and arr_list[i]==0):\n        i+=1\n    # we need to return the sum of all pairs\n    return pair_xor_Sum_Dup_Length(arr_list[i:],n-i)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Array to hold the xor pairs\n    xor_pairs = []\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    #Using for loop to iterate through all elements of list\n    for i in range(0,n) : \n        sum=0\n        for j in range(i,n) : \n            sum=sum^arr[i]^arr[j]\n        print(sum)\n        \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2 : \n        return 0\n    return sum([arr[i] ^ arr[i+1] for i in range(len(arr)-1)])\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    print('\\n *** Heap Sort ***\\n')\n    for i in iterable:\n        hq.heappush(h, i)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for elem in iterable:\n        heapq.heappush(heap, elem)\n    for _ in range(len(heap)):\n        heapq.heappop(heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if type(iterable) == list:\n        hq.heapify(iterable)\n        while len(iterable) > 1:\n            item1 = hq.heappop(iterable)\n            item2 = hq.heappop(iterable)\n            hq.heappush(iterable, item1 + item2)\n        return iterable[0]\n    else:\n        return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)//2,0,-1):\n        hq.heapify(iterable)\n        hq.heapreplace(iterable,hq.heappop(iterable))\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for item in iterable:\n        heapq.heappush(hq, item)\n    return [heapq.heappop(hq) for _ in range(len(hq))]\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #python3 -m pypy3 -m heapq\n    return sorted(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    def partition(array, start, end):\n        pivot = start\n        i = start + 1\n        for j in range(start, end):\n            if array[j] < array[pivot]:\n                array[j], array[i] = array[i], array[j]\n                i += 1\n        array[pivot], array[i-1] = array[i-1], array[pivot]\n        return i - 1\n        \n    def quick_sort(array, start, end):\n        if start >= end:\n            return\n        p = partition(array, start, end)\n        quick_sort(array, start, p - 1)\n        quick_sort(array, p + 1, end)\n    \n    quick_sort(iterable, 0, len(iterable) - 1)\n    \n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a new list that's the same size as the original,\n    # and with all the integers as the values from the original.\n    # For this challenge, you can assume that all integers\n    # in the original list are at least as big as they should be.\n    sorted_list = []\n    for value in iterable:\n        sorted_list.append(value)\n    \n    # Sort the list using the heapq.\n    # You may think that you'll have to use these functions\n    # in your algorithm.\n    hq.heapify(sorted_list)\n    \n    # Now, we want to loop through all the integers in the\n    # original list and swap them accordingly.\n    for i in range(len(sorted_list) - 1):\n        # find the smallest value and swap it\n        # with it's next smallest value\n        smallest_value = sorted_list[i]\n        smallest_index = i\n        for j in range(i + 1, len(sorted_list)):\n            if smallest_value < sorted_list[j]:\n                smallest_value = sorted_list[j]\n                smallest_index = j\n        \n        # swap the two smallest values\n        sorted_list[i], sorted_list[smallest_index] = sorted_list[smallest_index], sorted_list[i]\n        \n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def swap(a,b):\n        a,b = b,a\n    def _heapify(arr,n,idx):\n        i = idx\n        while i>=0:\n            j = i*2+1\n            if j<=n and arr[j]>arr[i]:\n                swap(arr,j,i)\n            j = i*2+2\n            if j<=n and arr[j]>arr[i]:\n                swap(arr,j,i)\n            i = i*2+1\n    def _build_heap(arr):\n        for i in range(len(arr)//2,0,-1):\n            _heapify(arr,len(arr),i)\n    def _siftup(arr,n):\n        curr = arr[n]\n        i = n//2\n        while i>=0:\n            j = i*2+1\n            if j<=n and arr[j]<=curr:\n                swap(arr,j,i)\n            j = i*2+2\n            if j<=n and arr[j]<=curr:\n                swap(arr,j,i)\n            i = i*2+1\n            if i<=n and arr[i]<=curr:\n                swap(arr,i,n)\n            i = i*2+1\n    def _siftdown(arr,n):\n        curr = arr[n]\n        i = n//2\n        while i>=0 and arr[i]<=curr:\n            swap(arr,i,n)\n            i = i*2+1\n        for j in range(i,n):\n            arr[i],arr[j] = arr[j],arr[i]\n            _siftup(arr,i)\n    def _siftup_min(arr,n):\n        curr = arr[n]\n        i = n//2\n        j = n-i-1\n        while i>=0 and j>=0 and arr[j]<=curr:\n            swap(arr,j,i)\n            j = j*2+1\n            i = i*2+1\n        arr[j],arr[i] = arr[i],arr[j]\n        _siftup(arr,i)\n    def _siftdown_min(arr,n):\n        curr = arr[n]\n        i = n//2\n        j = n-i-1\n        while i>=0 and j>=0 and arr[j]<=curr:\n            swap(arr,j,i)\n            j = j*2+1\n            i = i*2+1\n        arr[j],arr[i] = arr[i],arr[j]\n        _siftdown(arr,i)\n    _build_heap(arr)\n    _siftup_min(arr,n)\n    _siftdown_min(arr,n)\n    return arr\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        return True\n    else:\n        actual_profit = actual_cost - sale_amount\n        sale_amount_profit = actual_profit * sale_amount\n        sale_amount_no_profit = actual_profit * sale_amount\n        return sale_amount_no_profit > sale_amount_profit\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_profit_loss = 0\n    for index in range(len(actual_cost)):\n        total_profit_loss = total_profit_loss + (actual_cost[index] - sale_amount[index])\n        if(total_profit_loss < 0):\n            return False\n        if(total_profit_loss < sale_amount[index]):\n            return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    return actual_cost < sale_amount and actual_cost > 0 and sale_amount > 0 and actual_cost > sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (abs(actual_cost-sale_amount)<0.001): \n        profit_loss = 0\n    else: \n        profit_loss = 0\n    return profit_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # check if sale_amount is not the same as actual_cost\n    if sale_amount!= actual_cost:\n        return False\n    # check if sale_amount is even\n    if sale_amount % 2 == 0:\n        # check if the profit is less than actual_cost\n        if sale_amount > actual_cost:\n            return False\n        # check if the profit is greater than actual_cost\n        elif sale_amount < actual_cost:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #Your code here\n    for i in actual_cost:\n        if i =='' or i == '\\n':\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Initialize profit\n    profit = actual_cost - sale_amount\n    # Initialize loss\n    loss = 0\n    # Determine no profit or no loss\n    if profit > 0:\n        loss = profit\n    else:\n        loss = loss\n    # Return the profit and loss\n    return profit,loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_profit=0\n    total_loss=0\n    for sale_amount in sale_amount:\n        total_profit+=sale_amount\n        total_loss+=sale_amount*sale_amount\n    \n    if(total_profit>total_loss):\n        return True\n    else:\n        return False\n        \ndef profit_loss_analysis(actual_cost,sale_amount,profit,loss):\n    '''\n    Write a function that analyzes the profit/loss for a company based on the\n    given criteria. A profit/loss for a company is when the profit or loss is\n    less than the given criteria.\n    '''\n    if(profit>=0):\n        return profit\n    elif(loss>=0):\n        return loss\n    else:\n        return 0\n        \ndef profit_loss_analysis(actual_cost,sale_amount,profit,loss):\n    '''\n    Write a function that analyzes the profit/loss for a company based on the\n    given criteria. A profit/loss for a company is when the profit or loss is\n    less than the given criteria.\n    '''\n    if(profit<=0):\n        return profit\n    elif(loss<=0):\n        return loss\n    else:\n        return 0\n        \ndef main():\n    print(\"\\nCompra :\")\n    print(f\"{actual_cost=:^30}\")\n    print(\"\\nSaldas:\")\n    print(f\"{sale_amount=:^30}\")\n    print(\"\\nProfit/Loss:\")\n    print(f\"{profit=:^30}\")\n    print(\"\\nProfit/Loss:\")\n    print(f\"{loss=:^30}\")\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (9/5) + (v**5)\n    b = (17/4) + (v**4)\n    x = (c + b) / (9 * (1 - c * (t ** 0.5)))\n    \n    return round(x,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Calculate wind chill index\n    w = round(100*(v/3.6)**(1/5))\n    \n    #Convert the calculated wind chill index into a temperature\n    c = (0.62*(w+0.4)) + 28\n    return c\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #calculate the wind chill index using equation:\n    #    chill = (0.621371 * v * (9.0 / 5.0)) + 32.0\n    chill_index = ((0.621371 * v * (9.0 / 5.0)) + 32.0) * math.log(v / 9.0) + 32.0\n    #return the rounded chill index\n    return round(chill_index,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    m = v/3.6\n    c = (9/5) + (v/2) + (21/7) + (v/4)\n    return (math.exp(m) - c)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 0:\n        C_0 = 9.25\n        T_0 = 0.6 * v + 32\n        T_t = (T_0 / C_0) + 273.15\n        w = (C_0 * T_t) / (T_0 + C_0 * T_t)\n        w = math.log(w, 10)\n        w = round(w)\n        return w\n    else:\n        return 0\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_rad = v*math.pi/180\n    c = v_rad**5\n    cl = (1.225*(v_rad+0.6215))/(math.cos(v_rad*math.pi/180))\n    cl2 = math.sqrt(cl*cl)\n    cl3 = c/cl2\n    cl3_f = c/cl3\n    if c<0:\n        cl3_f = -cl3_f\n    cl3_f = math.ceil(cl3_f)\n    cl3_f = min(cl3_f,100)\n    cl2_f = math.ceil(cl2)\n    cl2_f = min(cl2_f,100)\n    cl_f = round(cl3_f,2)\n    cl_f = math.ceil(cl_f)\n    cl_f = min(cl_f,100)\n    if cl_f < 10:\n        cl_f = '0' + str(cl_f)\n    return cl_f\ndef wind_chill_smooth(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_rad = v*math.pi/180\n    c = v_rad**5\n    cl = (1.225*(v_rad+0.6215))/(math.cos(v_rad*math.pi/180))\n    cl2 = math.sqrt(cl*cl)\n    cl3 = c/cl2\n    cl3_f = c/cl3\n    if c<0:\n        cl3_f = -cl3_f\n    cl3_f = math.ceil(cl3_f)\n    cl3_f = min(cl3_f,100)\n    cl2_f = math.ceil(cl2)\n    cl2_f = min(cl2_f,100)\n    cl_f = cl3_f\n    cl_f = math.ceil(cl_f)\n    if cl_f < 10:\n        cl_f = '0' + str(cl_f)\n    return cl_f\ndef wind_chill_smooth_uncertain(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_rad = v*math.pi/180\n    c = v_rad**5\n    cl = (1.225*(v_rad+0.6215))/(math.cos(v_rad*math.pi/180))\n    cl2 = math.sqrt(cl*cl)\n    cl3 = c/cl2\n    cl3_f = c/cl3\n    if c<0:\n        cl3_f = -cl3_f\n    cl3_f = math.ceil(cl3_f)\n    cl3_f = min(cl3_f,100)\n    cl2_f = math.ceil(cl2)\n    cl2_f = min(cl2_f,100)\n    cl_f = cl3_f\n    cl_f = math.ceil(cl_f)\n    if cl_f < 10:\n        cl_f = '0' + str(cl_f)\n    return cl_f\ndef wind_chill_uncertain(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_rad = v*math.pi/180\n    c = v_rad**5\n    cl = (1.225*(v_rad+0.6215))/(math.cos(v_rad*math.pi/180))\n    cl2 = math.sqrt(cl*cl)\n    cl3 = c/cl2\n    cl3_f = c/cl3\n    if c<0:\n        cl3_f = -cl3_f\n    cl3_f = math.ceil(cl3_f)\n    cl3_f = min(cl3_f,100)\n    cl2_f = math.ceil(cl2)\n    cl2_f = min(cl2_f,100)\n    cl_f = cl3_f\n    cl_f = math.ceil(cl_f)\n    if cl_f < 10:\n        cl_f = '0' + str(cl_f)\n    return cl_f\ndef wind_chill_uncertain_uncertain(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_rad = v*math.pi/180\n    c = v_rad**5\n    cl = (1.225*(v_rad+0.6215))/(math.cos(v_rad*math.pi/180))\n    cl2 = math.sqrt(cl*cl)\n    cl3 = c/cl2\n    cl3_f = c/cl3\n    if c<0:\n        cl3_f = -cl3_f\n    cl3_f = math.ceil(cl3_f)\n    cl3_f = min(cl3_f,100)\n    cl2_f = math.ceil(cl2)\n    cl2_f = min(cl2_f,100)\n    cl_f = cl3_f\n    cl_f = math.ceil(cl_f)\n    if cl_f < 10:\n        cl_f = '0' + str(cl_f)\n    return cl_f\ndef wind_chill_uncertain_uncertain_smooth(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_rad = v*math.pi/180\n    c = v_rad**5\n    cl = (1.225*(v_rad+0.6215))/(math.cos(v_rad*math.pi/180))\n    cl2 = math.sqrt(cl*cl)\n    cl3 = c/cl2\n    cl3_f = c/cl3\n    if c<0:\n        cl3_f = -cl3_f\n    cl3_f = math.ceil(cl3_f)\n    cl3_f = min(cl3_f,100)\n    cl2_f = math.ceil(cl2)\n    cl2_f = min(cl2_f,100)\n    cl_f = cl3_f\n    cl_f = math.ceil(cl_f)\n    if cl_f < 10:\n        cl_f = '0' + str(cl_f)\n    return cl_f\ndef wind_chill_uncertain_smooth_uncertain(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_rad = v*math.pi/180\n    c = v_rad**5\n    cl = (1.225*(v_rad+0.6215))/(math.cos(v_rad*math.pi/180))\n    cl2 = math.sqrt(cl*cl)\n    cl3 = c/cl2\n    cl3_f = c/cl3\n    if c<0:\n        cl3_f = -cl3_f\n    cl3_f = math.ceil(cl3_f)\n    cl3_f = min(cl3_f,100)\n    cl2_f = math.ceil(cl2)\n    cl2_f = min(cl2_f,100)\n    cl_f = cl3_f\n    cl_f = math.ceil(cl_f)\n    if cl_f < 10:\n        cl_f = '0' + str(cl_f)\n    return cl_f\ndef wind_chill_smooth_uncertain_uncertain(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to th"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 6.67 * 10 ** -5\n    c = 1.8 + 35.9 * t + 44.0 * t ** 2 + 11.0 * t ** 3\n    # convert the temperature to celsius\n    # convert the wind speed to km/h\n    # calculate the wind chill\n    # return the wind chill index\n    return (math.exp(k) * v * c) / (math.exp(k) + 1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (v / 3.6) * (9.0 / 5.0) + 32.0\n    k = (1.0 - (v / 3.6)) / (1.0 - (v / 3.6))\n    r = (t + 273.15) / 100.0\n    return round(c * k * (r ** (1.0 / 5.0)) + 32, 1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    Wc = v*(9/5) + 32\n    return Wc\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h and a temperature in celsius.\n    '''\n    ws = v*(9/5) + 32\n    return ws\ndef kelvin_to_celsius(kelvin):\n    '''\n    Convert the given kelvin temperature to celsius temperature and return it.\n    '''\n    return kelvin - 273\ndef celsius_to_kelvin(celsius):\n    '''\n    Convert the given celsius temperature to kelvin temperature and return it.\n    '''\n    return celsius + 273\ndef temperature_variation(temp1, temp2):\n    '''\n    Calculate the variation of the temperature between two temperatures using a formula.\n    '''\n    tvar = (temp1 - temp2)/(kelvin_to_celsius(temp1) - kelvin_to_celsius(temp2))\n    return tvar\ndef wind_yield(p,t):\n    '''\n    Compute the yield for the given wind speed and distance using the formula.\n    '''\n    return p*math.log(p/t)\ndef wind_speed_distance(p,t):\n    '''\n    Compute the wind speed and distance using the formula.\n    '''\n    return p*math.log(p/t)\ndef wind_direction(p,t):\n    '''\n    Compute the wind direction using the formula.\n    '''\n    return math.degrees(math.atan2(math.sin(p*t),math.cos(p*t)))\ndef wind_chill_compensate(p,t):\n    '''\n    Compute the chill index using the formula.\n    '''\n    return math.exp(-(p-32)/(9/5))\ndef wind_chill_check(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check2(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check3(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check4(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check5(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check6(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check7(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check8(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check9(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check10(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check11(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check12(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check13(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check14(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check15(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check16(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check17(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check18(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '''\n    if (p < 0) or (p > 101):\n        return False\n    if (t < 0) or (t > 100):\n        return False\n    return True\ndef wind_chill_check19(p,t):\n    '''\n    Check that the wind speed is within the range of the wind_chill_check function.\n    '"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = v*9.0/5.0 + 32\n    return round(100*(math.exp(w)-1)/(math.exp(w)-1+27.5*t),1)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name.islower())\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    names = []\n    for name in sample_names:\n        if name.lower().startswith(\"a\"):\n            name = name[1:]\n            names.append(name)\n    \n    #print(names)\n    return len(names)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_nam = []\n    for nam in sample_names:\n        if nam[0].lower() == 'a' or nam[0].lower() == 'e':\n            new_nam.append(nam[:-1])\n        else:\n            new_nam.append(nam)\n    return new_nam\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for n in sample_names:\n        if n[0]!= 'a':\n            names.append(n)\n    return len(names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            name_length += len(name)\n    return name_length\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Get the length of the names\n    sample_names_len = len(sample_names)\n    \n    # Loop through the names\n    for index in range(sample_names_len):\n        # If the names starts with lowercase letter\n        if sample_names[index][0].islower():\n            # Remove the lowercase letters\n            sample_names[index] = sample_names[index][1:]\n        \n    # Return the result\n    return sum(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    namelist = []\n    for name in sample_names:\n        if name.startswith('a'):\n            namelist.append(name.lower())\n        else:\n            namelist.append(name)\n    #print(namelist)\n    newnamelist = []\n    for name in namelist:\n        if name.lower().startswith('a'):\n            namelist.remove(name)\n        else:\n            newnamelist.append(name)\n    #print(newnamelist)\n    return len(newnamelist)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names.sort()\n    nam_list = []\n    for name in sample_names:\n        if not name.islower():\n            nam_list.append(len(name))\n    return sum(nam_list)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #initialize the sum\n    result = 0\n    #loop through the list\n    for name in sample_names:\n        #make sure it is not an empty string\n        if name!= '':\n            result += len(name)\n    #return the sum\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # TODO: Write the solution to this function\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(0,len(items)):\n        if items[i] == '(':\n            items[i]=''\n        elif items[i] == ')':\n            items[i]=''\n        elif items[i] == '[':\n            items[i]=''\n        elif items[i] == ']':\n            items[i]=''\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for item in items:\n        if item[0] == '(' and item[-1] == ')':\n            item = item[1:-1]\n            output.append(item)\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    left_parenthesis = 0\n    right_parenthesis = 0\n    right_parenthesis_counter = 0\n    for i in range(len(items)):\n        if items[i] == '(':\n            left_parenthesis += 1\n            right_parenthesis_counter += 1\n        elif items[i] == ')':\n            right_parenthesis += 1\n            if right_parenthesis_counter > left_parenthesis:\n                left_parenthesis_counter = 0\n                right_parenthesis_counter = 0\n                continue\n            else:\n                right_parenthesis_counter = 0\n                left_parenthesis_counter += 1\n        else:\n            left_parenthesis_counter += 1\n    if left_parenthesis > right_parenthesis:\n        items = items[left_parenthesis:]\n    if right_parenthesis > left_parenthesis:\n        items = items[:right_parenthesis]\n    return items\ndef remove_special(items):\n    '''\n    Write a function to remove the special characters in a string.\n    '''\n    special_characters = ('!','@','#','$','%','&','?','*','/')\n    for i in range(len(items)):\n        if items[i] in special_characters:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_extra_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    extra_spaces =''\n    for i in range(len(items)):\n        if items[i] == extra_spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_special_spaces(items):\n    '''\n    Write a function to remove the special characters in a string.\n    '''\n    special_characters = ('!','@','#','$','%','&','?','*','/')\n    for i in range(len(items)):\n        if items[i] in special_characters:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_double_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    double_spaces =''\n    for i in range(len(items)):\n        if items[i] == double_spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_all_spaces(items):\n    '''\n    Write a function to remove all the spaces from a string.\n    '''\n    spaces =''\n    for i in range(len(items)):\n        if items[i] == spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_left_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    left_spaces =''\n    for i in range(len(items)):\n        if items[i] == left_spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_right_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    right_spaces =''\n    for i in range(len(items)):\n        if items[i] == right_spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_comments(items):\n    '''\n    Write a function to remove the comments from a string.\n    '''\n    comments = '\\n'\n    for i in range(len(items)):\n        if items[i] == comments:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_decimal_number(items):\n    '''\n    Write a function to remove the decimal number in a string.\n    '''\n    decimal_number = '.'\n    for i in range(len(items)):\n        if items[i] == decimal_number:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_letter(items):\n    '''\n    Write a function to remove the letter in a string.\n    '''\n    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i in range(len(items)):\n        if items[i] in letters:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_symbol(items):\n    '''\n    Write a function to remove the symbol in a string.\n    '''\n    symbol = '!@#$%&*()_+=-`|:<>?[]{}|\\\\'\n    for i in range(len(items)):\n        if items[i] in symbol:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_symbol_end(items):\n    '''\n    Write a function to remove the symbol in a string.\n    '''\n    symbol = '!@#$%&*()_+=-`|:<>?[]{}|\\\\'\n    for i in range(len(items)):\n        if items[i] in symbol:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_space(items):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    spaces =''\n    for i in range(len(items)):\n        if items[i] == spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_special_spaces(items):\n    '''\n    Write a function to remove the special characters in a string.\n    '''\n    special_characters = ('!','@','#','$','%','&','?','*','/')\n    for i in range(len(items)):\n        if items[i] in special_characters:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_extra_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    extra_spaces =''\n    for i in range(len(items)):\n        if items[i] == extra_spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_special_spaces(items):\n    '''\n    Write a function to remove the special characters in a string.\n    '''\n    special_characters = ('!','@','#','$','%','&','?','*','/')\n    for i in range(len(items)):\n        if items[i] in special_characters:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_double_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    double_spaces =''\n    for i in range(len(items)):\n        if items[i] == double_spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_all_spaces(items):\n    '''\n    Write a function to remove all the spaces from a string.\n    '''\n    spaces =''\n    for i in range(len(items)):\n        if items[i] == spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_left_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    left_spaces =''\n    for i in range(len(items)):\n        if items[i] == left_spaces:\n            items = items[:i] + items[i+1:]\n    return items\ndef remove_right_spaces(items):\n    '''\n    Write a function to remove the extra spaces from a string.\n    '''\n    right_spaces =''\n    for i in range(len(items)):\n        if items[i] == right_spaces:\n            items = item"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    children = ['({[', ')]}]']\n    cleaned = []\n    for item in items:\n        if item == '(':\n            cleaned.append(item)\n        elif item == ')':\n            if cleaned:\n                cleaned.pop()\n            else:\n                cleaned.append(item)\n        elif cleaned:\n            children.append(item)\n    cleaned.pop()\n    return children, cleaned\ndef remove_parenthesis2(items):\n    '''\n    Remove the parenthesis from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item == ')':\n            newlist.append(')' + item)\n        elif item == '(':\n            newlist.append(')' + item)\n        else:\n            newlist.append(item)\n    return newlist\ndef nested_join(items):\n    '''\n    Write a function to join all the joined string.\n    '''\n    res = ''\n    items = [item for item in items]\n    for item in items:\n        if item not in res:\n            res += item\n    return res\ndef remove_paren(items):\n    '''\n    Remove all the parenthesis from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '(':\n            newlist.append(item)\n        else:\n            if newlist:\n                newlist.pop()\n    return newlist\ndef remove_brackets(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '[':\n            newlist.append(item)\n        else:\n            if newlist:\n                newlist.pop()\n    return newlist\ndef remove_brackets_2(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '(':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets3(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ')':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets4(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ']':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets5(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '}':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets6(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ']':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets7(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '}':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets8(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ')':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets9(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ']':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets10(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '}':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets11(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ']':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets12(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '}':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets13(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ')':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets14(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '}':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets15(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ']':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets16(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '}':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets17(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ')':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets18(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ']':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets19(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= '}':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets20(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ')':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets21(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if item!= ']':\n            newlist.append(item)\n        elif newlist:\n            newlist.pop()\n    return newlist\ndef remove_brackets22(items):\n    '''\n    Remove all the brackets from a string.\n    '''\n    newlist = []\n    for item in items:\n        if ite"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for item in items:\n        if item[0]!= '(' and item[-1]!= ')':\n            result.append(item)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = ''\n    parentheses = ('(', ')')\n    for item in items:\n        if item in parentheses:\n            output += item\n        else:\n            output += item.replace('(', ')')\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parentheses = []\n    prev_ind = 0\n    for i in range(len(items)):\n        if items[i] == '(':\n            parentheses.append(items[i])\n        else:\n            if prev_ind!= i:\n                parentheses.append(items[i])\n                prev_ind = i\n    parentheses.pop()\n    return \"\".join(parentheses)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item[0] == '(':\n            items.remove(item)\n        elif item[-1] == '(':\n            items.remove(item)\n        else:\n            continue\n    return items\ndef remove_paren(string):\n    '''\n    Given an input string, remove all the parenthesis and what is inbetween them.\n    '''\n    items = []\n    items = remove_parenthesis(items)\n    return items\ndef is_identifier(item):\n    '''\n    Given a string, check if it is a valid identifier.\n    '''\n    if re.search(r'[a-zA-Z][a-zA-Z0-9]*', item) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    #since there is no parenthesis, we will remove the brackets from the string\n    #and return the stripped string\n    \n    if items == ')':\n        return ''\n    else:\n        return remove_parenthesis(items[1:-1])\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item[-1] == '(':\n            result += item[0:-1]\n        else:\n            result += item\n    return result\ndef remove_circular_parentheses(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item[-1] == '(':\n            if item[0] == '(':\n                result += item[0:-1]\n            else:\n                result += ')'\n        else:\n            result += item\n    return result\ndef remove_redundant_parentheses(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item[-1] == '(':\n            if item[0] == '(':\n                result += item[0:-1]\n            else:\n                result += item\n        else:\n            result += item\n    return result\ndef remove_parenthesis_from_string(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item[-1] == '(':\n            if item[0] == '(':\n                result += item[0:-1]\n            else:\n                result += item\n        else:\n            result += item\n    return result\ndef remove_parenthesis_from_string_2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item[-1] == '(':\n            if item[0] == '(':\n                result += item[0:-1]\n            else:\n                result += item\n        else:\n            result += item\n    return result\ndef is_numeric(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[0-9]+', string)\ndef is_int(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[0-9]+', string)\ndef is_float(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[0-9]+', string)\ndef is_str(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_char(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_char_or_digit(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_1(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_string_2(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_3(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_4(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_5(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_string_6(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_string_7(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_string_8(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_9(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_10(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_11(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_string_12(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_13(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_14(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_15(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_16(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_17(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_18(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_19(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^a-zA-Z0-9]+', string)\ndef is_string_20(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_21(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_22(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_23(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_24(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_25(string):\n    '''\n    Write a function to check if a string is a number.\n    '''\n    return re.match('[^0-9]+', string)\ndef is_string_26(string):"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n > 3:\n        return n\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # if n == 0: \n    #     return 0\n    # elif n == 1: \n    #     return 1\n    # elif n == 2: \n    #     return n\n    # elif n == 3: \n    #     return 2**(n-1) - 1\n    # elif n == 4: \n    #     return 4**(n-1) - 1\n    # elif n == 5: \n    #     return 5**(n-1) - 1\n    # elif n == 6: \n    #     return 6**(n-1) - 1\n    # elif n == 7: \n    #     return 7**(n-1) - 1\n    # elif n == 8: \n    #     return 8**(n-1) - 1\n    # elif n == 9: \n    #     return 9**(n-1) - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # You need to use for/else statements. \n    i = 0\n    while i < n: \n        if (i + 1) % 2!= 0:\n            if (n - i) % 2 == 1: \n                return n - i\n            else: \n                return n - i - 1\n        i += 1\n        \n    return n - i + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 6\n    else: \n        return n + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 1\n    elif n == 3: return 2\n    elif n == 4: return 3\n    else: return 4\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 176:\n        return 176\n    if n == 177:\n        return 177\n    if n == 178:\n        return 178\n    if n == 179:\n        return 179\n    if n == 180:\n        return 180\n    if n == 181:\n        return 181\n    if n == 182:\n        return 182\n    if "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    else: return int(n**(1/2))\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n):\n        if (n - i) % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    sum = 0\n    for i in range(n): \n        sum += i \n        if i+1!= n: \n            if (i+1) % n!= 0:\n                sum -= 1\n        if sum % n!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(z){1,}\", text)!= None\ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(z){1,}\", text)!= None\ndef text_match_wordm(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordm_middle(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordl(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_middle(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordm_m(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordm_middle_m(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordl_m(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_middle_m(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_l(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_middle_l(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_l_m(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_middle_l_m(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_l_m_middle(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_middle_l_middle(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordl_m_l(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordm_l(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordm_middle(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordm_middle_middle(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordl_m_l(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordm_middle_m(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordm_middle_middle_m(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(m){1,}\", text)!= None\ndef text_match_wordl_m_middle_l(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    if len(text) > 4:\n        text = text[:4]\n    return re.match(\"(l){1,}\", text)!= None\ndef text_match_wordm_middle_middle_l(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    global text\n    temp = ''\n    if 'z' not in text:\n        text = text + 'z'\n    for i in range(len(text)-1):\n        if i<len(text)-2 and i>0:\n            if text[i]=='z' and text[i+1]==''and text[i+2]==' ':\n                continue\n        temp = text[i] + temp\n    if len(temp)>0:\n        text = temp + text\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    w=text.split(\" \")\n    w[0]=w[0].strip()\n    w[-1]=w[-1].strip()\n    if (len(w)==2)and(w[0][0]=='z'):\n        return 1\n    elif len(w)==1 and(w[0]=='z'):\n        return 1\n    elif len(w)==1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('[^\\w_]z')\n    print(\"text:\", text)\n    print(\"pattern:\", pattern)\n    print(\"text_matched:\", pattern.match(text))\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return 'z' in text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_pattern = r'[^\\w]z'\n    z_start = r'\\b'\n    z_end = r'\\b'\n    z_pattern_start = r'^'\n    z_pattern_end = r'$'\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = text.split(' ')\n    if not any(word.startswith('z') and not word.endswith('z') for word in words):\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    end_regex = re.compile(\"[a-z]\")\n    middle_regex = re.compile(\"[A-Z][a-z]*\")\n    text_lower = text.lower()\n    \n    result = end_regex.search(text_lower) or middle_regex.search(text_lower)\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = '\\w+'\n    text = text.replace(pattern,'')\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\.','', text)\n    pattern = '^[\\w\\s]+$'\n    text = re.sub(pattern, '', text)\n    pattern = '^(?:[a-zA-Z]+)\\s+'\n    text = re.sub(pattern, '', text)\n    pattern = '^(?:[a-zA-Z\\s]+)\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+$'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\s]+)(?:[a-zA-Z\\s]+)+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\s+\\d+'\n    text = re.sub(pattern, '', text)\n    pattern = '^([a-zA-Z\\"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text.startswith('z') and text.endswith('z')\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input[:]\n    arr.reverse()\n    print(arr)\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    print(input)\n    for i in range(k, len(input), -1):\n        print(\"Position: \", i)\n        print(input[i])\n    return \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(0, len(input), k):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = [] \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    array = input\n    reverse_array = array[::-1]\n    for i in range(k-1):\n        print(reverse_array[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    for i in range(len(input)):\n        result.append(input[i])\n    for i in range(k - 1):\n        result.append(result[-1])\n    return result\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_Array(input, 0, len(input) - 1)\n    print(input)\n    return reverse_Array(input, 0, len(input) - 1)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #The main idea here is to use an array of k items\n    #in reverse and put the first k items in the end\n    #of the array\n    #Call reverseArray\n    reverseArray(input, k)\n    #Call reverseArray2\n    reverseArray2(input, k)\n    #Call reverseArray3\n    reverseArray3(input, k)\n    #Call reverseArray4\n    reverseArray4(input, k)\n    #Call reverseArray5\n    reverseArray5(input, k)\n    #Call reverseArray6\n    reverseArray6(input, k)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    if(size < 2): return input\n    \n    # Create a new array\n    new_array = [None] * size\n    \n    for i in range(0,size):\n        new_array[i] = input[i]\n    \n    # Get k places into new array\n    for i in range(k-1, -1, -1):\n        j = size-1-i\n        new_array[j] = new_array[j+1]\n    \n    # Return the reversed array\n    return new_array\n        \ndef reverse_Array_V(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    if(size < 2): return input\n    \n    # Create a new array\n    new_array = [None] * size\n    \n    for i in range(0,size):\n        new_array[i] = input[i]\n    \n    # Get k places into new array\n    for i in range(k-1, -1, -1):\n        j = size-1-i\n        new_array[j] = new_array[j+1]\n    \n    # Return the reversed array\n    return new_array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_Upto_K_recursion(a, k): \n        '''\n        Recursive version of the above function\n        '''\n        if len(a) == 1: \n            return a\n        else: \n            return reverse_Array_Upto_K_recursion(a[1:], k) + [a[0]] + reverse_Array_Upto_K_recursion(a[1:], k) \n    return reverse_Array_Upto_K_recursion(input, k) \ndef reverse_Array_Upto_K_recursion(a, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_Upto_K_recursion(a[:-k], k) + [a[-k]] + reverse_Array_Upto_K_recursion(a[:-k], k) \ndef reverse_Array_Unions(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_Unions_recursion(a, k): \n        '''\n        Recursive version of the above function\n        '''\n        if len(a) == 1: \n            return a\n        else: \n            return reverse_Array_Unions_recursion(a[1:], k) + [a[0]] + reverse_Array_Unions_recursion(a[1:], k) \n    return reverse_Array_Unions_recursion(input, k) \ndef reverse_Array_Unions_recursion(a, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_Unions_recursion(a[:-k], k) + [a[-k]] + reverse_Array_Unions_recursion(a[:-k], k) \ndef reverse_Array_With_Index(a, i, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_With_Index_recursion(a, i, k): \n        '''\n        Recursive version of the above function\n        '''\n        if len(a) == 1: \n            return a\n        else: \n            return reverse_Array_With_Index_recursion(a[1:], i, k) + [a[0]] + reverse_Array_With_Index_recursion(a[1:], i, k) \n    return reverse_Array_With_Index_recursion(a, i, k) \ndef reverse_Array_With_Index_recursion(a, i, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_With_Index_recursion(a[:-k], i, k) + [a[-k]] + reverse_Array_With_Index_recursion(a[:-k], i, k) \ndef reverse_Array_With_New_K(a, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_With_New_K_recursion(a, k): \n        '''\n        Recursive version of the above function\n        '''\n        if len(a) == 1: \n            return a\n        else: \n            return reverse_Array_With_New_K_recursion(a[1:], k) + [a[0]] + reverse_Array_With_New_K_recursion(a[1:], k) \n    return reverse_Array_With_New_K_recursion(a, k) \ndef reverse_Array_With_New_K_recursion(a, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_With_New_K_recursion(a[:-k], k) + [a[-k]] + reverse_Array_With_New_K_recursion(a[:-k], k) \ndef reverse_Array_With_Pivot(a, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_With_Pivot_recursion(a, k): \n        '''\n        Recursive version of the above function\n        '''\n        if len(a) == 1: \n            return a\n        else: \n            return reverse_Array_With_Pivot_recursion(a[1:], k) + [a[0]] + reverse_Array_With_Pivot_recursion(a[1:], k) \n    return reverse_Array_With_Pivot_recursion(a, k) \ndef reverse_Array_With_Pivot_recursion(a, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_With_Pivot_recursion(a[:-k], k) + [a[-k]] + reverse_Array_With_Pivot_recursion(a[:-k], k) \ndef reverse_Array_With_Sorted_Index(a, i, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse_Array_With_Sorted_Index_recursion(a, i, k): \n        '''\n        Recursive version of the above function\n        '''\n        if len(a) == 1: \n            return a\n        else: \n            return reverse_Array_With_Sorted_Index_recursion(a[1:], i, k) + [a[0]] + reverse_Array_With_Sorted_Index_recursion(a[1:], i, k) \n    return reverse_Array_With_Sorted_Index_recursion(a, i, k) \ndef reverse_Array_With_Sorted_Index_recursion(a, i, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) + [a[-k]] + reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) \ndef reverse_Array_With_Sorted_Index_recursion_2(a, i, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) + [a[-k]] + reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) \ndef reverse_Array_With_Sorted_Index_recursion_3(a, i, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) + [a[-k]] + reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) \ndef reverse_Array_With_Sorted_Index_recursion_4(a, i, k): \n    '''\n    Recursive version of the above function\n    '''\n    if len(a) < k: \n        return [] \n    else: \n        return reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) + [a[-k]] + reverse_Array_With_Sorted_Index_recursion(a[:-k], i, k) \ndef reverse_Array_With"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k in test_dict:\n        test_tup.append((k, test_dict[k]))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_dict) == dict:\n        for key,value in test_dict.items():\n            if type(key) == str and type(value) == str:\n                test_tup += (key,value)\n            else:\n                raise ValueError(\"Invalid input. Please fix this.\")\n    else:\n        raise ValueError(\"Invalid input. Please fix this.\")\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    temp_tuple = ()\n    for i in range(len(test_dict)):\n        temp_tuple = temp_tuple + (test_dict[i],)\n    return tuple(temp_tuple)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i in range(0, len(test_dict)):\n        tuple_tuple = test_tup[:]\n        tuple_tuple[i] = test_dict[i]\n        test_tup = tuple_tuple\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    output_tup = ()\n    for key, value in test_dict.items():\n        output_tup += (key, value)\n    return output_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup = test_tup + (key, test_dict[key])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result = ()\n    for key, value in test_dict.items():\n        if type(key) == type(1) or type(key) == type(''):\n            result += (key, value)\n        elif type(key) == type(dict()):\n            result += (key.values(), value)\n    test_tup = (test_tup, result)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    if not type(test_tup) is tuple:\n        print('tuple required')\n        raise TypeError\n    if not type(test_dict) is dict:\n        print('dict required')\n        raise TypeError\n    \n    if len(test_tup)!= len(test_dict):\n        print('tuple and dicts have different number of elements')\n        raise ValueError\n    for key in test_dict:\n        if key not in test_tup:\n            print('the key not present in the tuple')\n            raise KeyError\n    for key in test_tup:\n        if key not in test_dict:\n            test_tup.append(key)\n            test_dict.update({key:test_dict[key]})\n    return test_tup, test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for i in test_dict.values():\n        test_tup += (i,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    if type(test_dict)!= dict:\n        raise TypeError('test_dict must be a dict')\n    \n    if type(test_tup)!= tuple:\n        raise TypeError('test_tup must be a tuple')\n    \n    # If you only want the first item, just change the first element.\n    \n    for i in range(len(test_tup)):\n        test_tup[i][0] = test_dict[test_tup[i][0]]\n    \n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    import math\n    # Iterate through all cells in the matrix\n    for row in range(len(cost)):\n        # Iterate through all paths\n        for col in range(len(cost[0])):\n            # Sum up all the values in each cell\n            # Keep track of the most visited cell\n            if cost[row][col]!= 0:\n                currentRow = row\n                currentCol = col\n                currentCell = cost[row][col]\n                # Iterate through all possible destinations\n                for currentDestination in range(len(cost)):\n                    # If the destination is not visited\n                    if cost[currentDestination][currentCol] == 0:\n                        # Add the cost to the total\n                        cost[currentRow][currentCol] += currentCell\n                        # And update the cell visited\n                        cost[currentRow][currentCol] = currentCell\n                        # And move to the next cell\n                        currentRow = currentDestination\n                        currentCol = currentDestination\n                        currentCell = cost[currentRow][currentCol]\n            # If the cell is the bottom right cell\n            elif currentCell == 2:\n                # Calculate the average\n                average = cost[currentRow][currentCol]/2\n                # Add the average to the list\n                averageList.append(average)\n    # Return the list of averages\n    return averageList\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def maxAverageOfPath(cost):\n        '''\n        Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n        '''\n        def maxAverageOfPath(cost):\n            '''\n            Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n            '''\n            self.max = 0\n            self.min = 1e8\n            self.size = cost\n            for i in range(len(cost)):\n                self.min = min(self.min, cost[i][i])\n                self.max = max(self.max, cost[i][len(cost[i]) - 1 - i])\n            return self.min / self.max\n        return maxAverageOfPath(cost)\n    \n    def bfs(cost):\n        '''\n        Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n        '''\n        def bfs(cost):\n            '''\n            Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n            '''\n            queue = []\n            queue.append((0, 0))\n            visited = {}\n            while queue:\n                x, y = queue.pop(0)\n                if (x, y) not in visited:\n                    visited[(x, y)] = cost[x][y]\n                    for i in range(len(cost)):\n                        if cost[i][y]!= 0:\n                            queue.append((x, i))\n                    if x > 0 and y > 0:\n                        if (x - 1, y) not in visited:\n                            queue.append((x - 1, y))\n                    if x < len(cost) - 1 and y > 0:\n                        if (x + 1, y) not in visited:\n                            queue.append((x + 1, y))\n                    if x < len(cost) - 1 and y < len(cost[0]) - 1:\n                        if (x + 1, y + 1) not in visited:\n                            queue.append((x + 1, y + 1))\n                    if x > 0 and y < len(cost[0]) - 1:\n                        if (x - 1, y + 1) not in visited:\n                            queue.append((x - 1, y + 1))\n            return visited\n        return bfs(cost)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total_cost = 0\n    paths = []\n    for i in range(len(cost)):\n        total_cost += cost[i][0]\n        paths.append([cost[i][0],i])\n    maxAverage = total_cost // len(cost)\n    if len(paths) > 1:\n        for i in range(1,len(paths)):\n            maxAverage += (total_cost - (paths[i][0] * (paths[i][1] - 1))) // paths[i][1]\n        maxAverage /= len(paths)\n    return maxAverage\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    totalCost = 0\n    for x in range(0,N):\n        for y in range(0,N):\n            totalCost += cost[x][y]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    for i in range(N):\n        for j in range(N):\n            print(cost[i][j], end=\" \")\n        print()\n    print(\"\")\n    return(sum(map(lambda x: x[0]/x[1], cost))/N)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if (i == 0 or j == 0 or i == N-1 or j == N-1):\n                dp[i][j] = 0\n            else:\n                dp[i][j] = cost[i-1][j-1] + dp[i-1][j] + dp[i][j-1]\n    \n    return (dp[-1][-1]/N)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    ans = 0\n    # Maximum possible path.\n    max_path = 0\n    # Maximum average path.\n    max_path_avg = 0\n    # Count of cells visited in the path.\n    num_path_visited = 0\n    # Array of cells that have been visited and their maxPath.\n    path_visited = []\n    # Add initial path to the path array\n    path_visited.append([])\n    # Add initial cost to the path array\n    path_visited.append([])\n    # Add initial cost to the path_avg array\n    path_visited.append([])\n    # Add initial cost to the path_avg array\n    path_visited.append([])\n    # Sort path_visited array in increasing order by number of paths visited.\n    for i in range(n):\n        for j in range(n):\n            if path_visited[i].count(j) > 0:\n                path_visited[i].append(path_visited[i].count(j))\n            else:\n                path_visited[i].append(0)\n            if path_visited[i].count(j) == 1:\n                num_path_visited += 1\n    # Sort path_visited array in decreasing order by number of paths visited.\n    path_visited.sort(key=lambda x: x[num_path_visited], reverse=True)\n    # Add number of cells visited to the path array.\n    num_path_visited += n\n    # Calculate the path average.\n    for i in range(n):\n        path_visited[i].append(num_path_visited)\n        num_path_visited = 0\n        for j in range(n):\n            path_visited[i].append(0)\n    # Add the maxPath to the maximum path array\n    # Calculate the maximum path in the path array.\n    for i in range(n):\n        max_path += path_visited[i][n-1]\n    # Add the maxPath to the maximum path_avg array\n    # Calculate the maximum path_avg in the path_avg array.\n    for i in range(n):\n        max_path_avg += path_visited[i][n-1]\n    # The average path is the average of the maxPaths\n    # multiplied by the number of paths visited.\n    ans = max_path * num_path_visited / (n * n)\n    # The maxPath array is the average of the maxPaths multiplied by the number of paths visited.\n    # Add to ans the path_visited array.\n    for i in range(n):\n        ans += path_visited[i][n-1]\n    return ans / (n * n)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # get the height of the matrix\n    h = len(cost)\n    # get the width of the matrix\n    w = len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    #fill in these values as the best guess.\n    totalCost = 0\n    for i in range(m):\n        for j in range(n):\n            totalCost += cost[i][j]\n    return totalCost/m\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    paths = []\n    path = [0]\n    while len(path) < N:\n        paths.append(path)\n        path = [i+1 for i in path]\n    paths.append(path)\n    return sum(cost)/N\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in range(len(students)):\n        if students[i][1][1] > h:\n            students[i] = students[i][0], students[i][1]\n    for i in range(len(students)):\n        if students[i][1][1] < h:\n            students.remove(students[i])\n    for i in range(len(students)):\n        if students[i][1][0] > w:\n            students[i] = students[i][0], students[i][1]\n    for i in range(len(students)):\n        if students[i][1][0] < w:\n            students.remove(students[i])\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    with open(\"students.txt\", \"r\") as f:\n        temp_list = f.readlines()\n    students = [(float(i), j) for i, j in temp_list]\n    for student in students:\n        if student[1][1] <= h and student[1][0] >= w:\n            students.remove(student)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_to_keep=[]\n    for key in students:\n        if(students[key][0] > h and students[key][1] > w):\n            students_to_keep.append(key)\n    return students_to_keep\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for key,value in students.items():\n        if(abs(value[0]-h)>=min(w)):\n            students[key] = (value[0],value[1])\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students:\n        if all([x>=w[i[1]] for x in h]):\n            for j in students:\n                if j[1] == i[1]:\n                    print(f\"The student is {i[0]}, with a height of {h[i[1]]}, and weight of {w[i[1]]}.\")\n                    break\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    minimum=h\n    maximum=w\n    filtered_students=[]\n    for key in students:\n        if students[key][1]>minimum and students[key][1]<maximum:\n            filtered_students.append(students[key])\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h>=80 and w>80:\n        return students\n    else:\n        for i in students:\n            if i[1][0]<h and i[1][1]<w:\n                return students\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if len(student) == 2:\n            if student[0] > h and student[1] > w:\n                filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students:\n        if (h >= i[1]) and (w >= i[2]):\n            print(i[0])\n            \ndef main():\n    print('***** Student Data Filter *****')\n    print('Options:')\n    print('1. Show Data')\n    print('2. Sort by Data')\n    print('3. Filter Students by Height and Weight')\n    print('4. Exit')\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students=[]\n    for student in students:\n        if student[1][1] >= w and student[1][0] >= h:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    #print(n1, n2)\n    dic = {}\n    count = 0\n    for i in range(0,n1):\n        for j in range(i+1,n1):\n            if nums1[i] == nums2[j]:\n                if nums1[i] not in dic:\n                    dic[nums1[i]] = 0\n                    dic[nums2[j]] = 0\n                dic[nums1[i]] += 1\n                dic[nums2[j]] += 1\n                #print(dic)\n                if dic[nums1[i]] == 1 and dic[nums2[j]] == 1:\n                    count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    return(i,j)\n        return(None, None)\n    else:\n        return(None, None)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    result = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\ndef count_same_pair_case1(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    result = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\ndef count_same_pair_case2(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    result = 0\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\ndef count_same_pair_case3(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    result = 0\n    n = len(nums1)\n    for i in range(n):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\ndef count_same_pair_case4(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(nums1.count(nums2[0])):\n        result += 1\n    return result\ndef count_same_pair_case5(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            result += 1\n    return result\ndef count_same_pair_case6(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\ndef count_same_pair_case7(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            result += 1\n    return result\ndef count_same_pair_case8(nums1, nums2):\n    '''\n    Given two lists of the same length, find the indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result += 1\n    return result\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    nums1_dict = {}\n    nums2_dict = {}\n    \n    for i in range(len(nums1)):\n        if nums1[i] not in nums1_dict:\n            nums1_dict[nums1[i]] = 1\n        else:\n            nums1_dict[nums1[i]] += 1\n        if nums2[i] not in nums2_dict:\n            nums2_dict[nums2[i]] = 1\n        else:\n            nums2_dict[nums2[i]] += 1\n    \n    return len(nums1_dict.keys()) == len(nums2_dict.keys())\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Brute Force O(N^2) time complexity, O(N) space complexity\n    # For each of the two list, compare the two\n    # Since you can compare the two lists, keep track of the indexes\n    # Whenever you have found a duplicate, return the index\n    # If you have not found a duplicate, return 0\n    # In other words, keep track of each index\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict_ = {}\n    for i in range(0,len(nums1)):\n        if nums1[i] in dict_:\n            dict_[nums1[i]] = dict_[nums1[i]] + 1\n        else:\n            dict_[nums1[i]] = 1\n    for i in range(0,len(nums2)):\n        if nums2[i] in dict_:\n            dict_[nums2[i]] = dict_[nums2[i]] + 1\n        else:\n            dict_[nums2[i]] = 1\n    return dict_.__len__()\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # first calculate the count of each list's value\n    count1 = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count1 += 1\n    # second calculate the count of each list's value\n    count2 = 0\n    for i in range(len(nums2)):\n        if nums1[i]!= nums2[i]:\n            count2 += 1\n    # return the count of the values that have the same values\n    return count1 + count2\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return count_same_pair_recursive(nums1, nums2, set())\n    \ndef count_same_pair_recursive(nums1, nums2, seen):\n    '''\n    Helper function for count_same_pair which is a recursive function.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(base[i]) for i in range(len(base)) if len([i for i in base if i!=0])>1 and base[i]==power])\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    if power < 1:\n        raise ValueError('The argument power must be a positive integer.')\n    elif base == 'base10':\n        if power == 1:\n            return 1\n        else:\n            return int(base) * power\n    else:\n        return power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    else:\n        return power_base_sum(base - 1, power) + base\n    "
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        digit = base % 10\n        sum += digit ** power\n        base = base // 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while(base):\n        sum += base % 10\n        base = int(base / 10)\n    return sum * power\n    \n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert(type(base) == int)\n    assert(type(power) == int)\n    assert(base > 0)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(len(base)):\n        sum += int(base[i]) ** power\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif base == '1':\n        return 1\n    elif base == '2':\n        return 2\n    elif base == '3':\n        return 3\n    elif base == '4':\n        return 4\n    elif base == '5':\n        return 5\n    elif base == '6':\n        return 6\n    elif base == '7':\n        return 7\n    elif base == '8':\n        return 8\n    elif base == '9':\n        return 9\n    else:\n        return base * power_base_sum(base, power-1)\n    \nprint(power_base_sum('2', 5)"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def power_base_sum_helper(base, power):\n        if power == 0:\n            return 0\n        if power == 1:\n            return 1\n        return power_base_sum_helper(base, power - 1) + base * power_base_sum_helper(base, power - 2)\n    return power_base_sum_helper(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    power = power\n    \n    if power == 0:\n        return 1\n    \n    elif power == 1:\n        return base\n    \n    else:\n        return base + power_base_sum(base, power - 1)\n    \n    \ndef solve_power_base(base, power):\n    '''\n    Write a function that takes base and power as arguments and return their sum in base^power.\n    '''\n    \n    if power == 0:\n        return 1\n    \n    elif power == 1:\n        return base\n    \n    else:\n        return base + solve_power_base(base, power - 1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"\\t\",\" \")\n    text1 = text1.replace(\"\\n\",\" \")\n    text1 = text1.replace(\"\\r\",\" \")\n    text1 = text1.replace(\"\\b\",\" \")\n    text1 = text1.replace(\";\",\" \")\n    text1 = text1.replace(\"(\",\" \")\n    text1 = text1.replace(\")\",\" \")\n    text1 = text1.replace(\"(\",\" \")\n    text1 = text1.replace(\")\",\" \")\n    text1 = text1.replace(\",\",\" \")\n    text1 = text1.replace(\"\u2019\",\" \")\n    text1 = text1.replace(\"'\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"-\",\" \")\n    text1 = text1.replace(\".\",\" \")\n    text1 = text1.replace(\"--\",\" \")\n    text1 = text1.replace(\"-\",\" \")\n    text1 = text1.replace(\".\", \" \")\n    text1 = text1.replace(\"'\",\" \")\n    text1 = text1.replace(\"`\",\" \")\n    text1 = text1.replace(\"\u2018\",\" \")\n    text1 = text1.replace(\"\u2019\",\" \")\n    text1 = text1.replace(\"&\",\" \")\n    text1 = text1.replace(\"*\",\" \")\n    text1 = text1.replace(\"_\",\" \")\n    text1 = text1.replace(\"+\",\" \")\n    text1 = text1.replace(\"\u200c\",\" \")\n    text1 = text1.replace(\"\u2024\",\" \")\n    text1 = text1.replace(\"\u2024\",\" \")\n    text1 = text1.replace(\"\u2019\",\" \")\n    text1 = text1.replace(\"\u2019\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u2019\",\" \")\n    text1 = text1.replace(\"\u2018\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u2013\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201e\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201a\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 = text1.replace(\"\u201d\",\" \")\n    text1 = text1.replace(\"\u201c\",\" \")\n    text1 "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    re_quot = re.compile('[\\(\\[].*[\\)\\]]')\n    quot_list = re_quot.findall(text1)\n    quot_list = [x.replace(' ', '') for x in quot_list]\n    return quot_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    value = text.replace(\"\\\"\", \"\")\n    if len(value)>1:\n        if value[-2]==\".\" and value[-1]==\".\":\n            value = value[:-2]\n    if value[0]!=\"\\\"\":\n        value = \"\\\"\"+value\n    return value\n    \ndef remove_space(text):\n    '''\n    Write a function to remove spaces in the given string.\n    '''\n    return text.replace(' ','')\n    \ndef remove_chars(text):\n    '''\n    Write a function to remove certain characters in the given string.\n    '''\n    return re.sub(r\"[^A-Za-z0-9,;!?()'\\\"\\\\]\", \" \",text)\n    \ndef remove_duplicates(text):\n    '''\n    Write a function to remove duplicates in the given string.\n    '''\n    return re.sub(r\"(?<!\\w)([0-9]+)\", r\"\\1\", text)\n    \ndef clean_quotation(text):\n    '''\n    Write a function to clean quotation marks before being inserted into the string.\n    '''\n    text = text.replace('\"', \"\")\n    if text[-1]!=\".\":\n        text = text+\".\"\n    return text\n    \ndef clean_phrase(text):\n    '''\n    Write a function to clean phrase from word boundaries.\n    '''\n    return re.sub(r\"(?<!\\w)([^\\w])\\s*\\1\", \" \", text).strip()\n    \ndef clean_word(text):\n    '''\n    Write a function to clean word from word boundaries.\n    '''\n    return re.sub(r\"(?<!\\w)([^\\w])\\s*\", \" \", text).strip()\n    \ndef clean_quotation_phrase(text):\n    '''\n    Write a function to clean quotation phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    text = text.replace(\"\\'\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_phrase_quotation(text):\n    '''\n    Write a function to clean quotation phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_word_phrase(text):\n    '''\n    Write a function to clean word phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_quotation_word(text):\n    '''\n    Write a function to clean word phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_text(text):\n    '''\n    Write a function to clean text.\n    '''\n    text = remove_space(text)\n    text = remove_chars(text)\n    text = remove_duplicates(text)\n    text = remove_word(text)\n    text = remove_word(text).lower()\n    text = clean_phrase(text)\n    text = clean_word(text)\n    text = clean_phrase_quotation(text)\n    text = clean_word_phrase(text)\n    return text\n    \ndef clean_quotation_text(text):\n    '''\n    Write a function to clean text.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_text_phrase(text):\n    '''\n    Write a function to clean text.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_text_word(text):\n    '''\n    Write a function to clean text.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_phrase_word(text):\n    '''\n    Write a function to clean word phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_word_phrase_word(text):\n    '''\n    Write a function to clean word phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_text_word_phrase(text):\n    '''\n    Write a function to clean word phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_text_phrase_word(text):\n    '''\n    Write a function to clean phrase phrases.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef clean_phrase_text_word(text):\n    '''\n    Write a function to clean text.\n    '''\n    text = text.replace(\"\\\"\", \"\")\n    if len(text)>1:\n        if text[-2]==\".\" and text[-1]==\".\":\n            text = text[:-2]\n    if text[0]!=\"\\\"\":\n        text = \"\\\"\"+text\n    return text\n    \ndef remove_special_chars(text):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    text = re.sub(r\"!\\\"#@$%&'(),./<>?*|\\|\", \" \", text)\n    text = re.sub(r\"\\'[^\\']+\", \" \", text)\n    text = re.sub(r\"[^a-zA-Z0-9\\s]\", \" \", text)\n    return text\n    \ndef remove_quotation(text):\n    '''\n    Write a function to remove quotatio"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = re.compile(r'\\\"([^\\\"]*)\\\"')\n    return quotation_pattern.findall(text1)\ndef extract_orders_of_the_day(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    orders_of_the_day_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return orders_of_the_day_pattern.findall(text1)\ndef extract_purposes(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    purposes_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return purposes_pattern.findall(text1)\ndef extract_products(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    products_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return products_pattern.findall(text1)\ndef extract_providers(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    providers_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return providers_pattern.findall(text1)\ndef extract_region(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    region_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return region_pattern.findall(text1)\ndef extract_state(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    state_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return state_pattern.findall(text1)\ndef extract_time(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    time_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return time_pattern.findall(text1)\ndef extract_total_cost(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    total_cost_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return total_cost_pattern.findall(text1)\ndef extract_description(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    description_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return description_pattern.findall(text1)\ndef extract_description_of_products(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    description_of_products_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return description_of_products_pattern.findall(text1)\ndef extract_cost(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    cost_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return cost_pattern.findall(text1)\ndef extract_month(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    month_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return month_pattern.findall(text1)\ndef extract_year(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    year_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return year_pattern.findall(text1)\ndef extract_year_of_the_month(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    year_of_the_month_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return year_of_the_month_pattern.findall(text1)\ndef extract_date(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    date_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return date_pattern.findall(text1)\ndef extract_description_of_manufacturers(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    description_of_manufacturers_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return description_of_manufacturers_pattern.findall(text1)\ndef extract_description_of_products(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    description_of_products_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return description_of_products_pattern.findall(text1)\ndef extract_location(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    location_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return location_pattern.findall(text1)\ndef extract_name(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    name_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return name_pattern.findall(text1)\ndef extract_model(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    model_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return model_pattern.findall(text1)\ndef extract_gear(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    gear_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return gear_pattern.findall(text1)\ndef extract_brand(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    brand_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return brand_pattern.findall(text1)\ndef extract_model_of_the_day(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    model_of_the_day_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return model_of_the_day_pattern.findall(text1)\ndef extract_head(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    head_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return head_pattern.findall(text1)\ndef extract_description_of_manufacturers(text1):\n    '''\n    Write a function to extract quotation marks \" \" of the given string.\n    '''\n    description_of_manufacturers_pattern = re.compile(r'(?<!\\W)\\\"([^\\\"]*)\\\"')\n    return description_of_manufacturers_pattern.findall(text1)\ndef extract_description_o"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    replace_dict = {'\u201c':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '''':'\"', '\"':'\"', '\"':'\"','\u00ab':'\"', '\u00bb':'\"', '\u2019':'\"', '\u2018':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '''':'\"', '\"':'\"', '\"':'\"', '''':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2019':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u2018':'\"', '\u2018':'\"', '\u2019':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '\u201d':'\"', '\u201d':'\"', '\u00b4':'\"', '''':'\"', '\u201c':'\"', '\u201c':'\"', '\u00b4':'\"', '''':'\"', '"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    new_text = re.sub(r'[,\\(\\) \\n]', '', text1)\n    return new_text\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # first index, second index\n    quotes_indexes = re.findall(r'\\{\\{.*?\\}\\}', text1)\n    # format all the index values\n    quotes_indexes = [str(i) for i in quotes_indexes]\n    # format the whole string\n    quotes_string = ''.join(quotes_indexes)\n    # split the whole string into a list of words\n    quotes_string = quotes_string.split(\" \")\n    # check if the last word contains a quotation\n    if quotes_string[-1].find(\"\\\"\")!= -1:\n        # if it does, then return the quotation and the rest of the string\n        return quotes_string, text1.replace(quotes_string[-1], \"\")\n    # if it does not, then return the quotation and the rest of the string\n    return quotes_string, text1.replace(quotes_string[-1], \"\")\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # print(\"text1: \",text1)\n    # print(\"\\n\")\n    text1 = text1.replace(\"  \",\" \")\n    # print(\"\\n\")\n    # print(\"text1: \",text1)\n    text1 = text1.replace(\"[\",\"\")\n    text1 = text1.replace(\"]\",\"\")\n    text1 = text1.replace(\"{\",\"\")\n    text1 = text1.replace(\"}\",\"\")\n    text1 = text1.replace(\")\",\"\")\n    text1 = text1.replace(\"[\",\"\")\n    text1 = text1.replace(\"]\",\"\")\n    text1 = text1.replace(\"{\",\"\")\n    text1 = text1.replace(\"}\",\"\")\n    # print(\"text1: \",text1)\n    # print(\"\\n\")\n    text1 = re.sub(\"\\s+\",\" \",text1)\n    # print(\"text1: \",text1)\n    # print(\"\\n\")\n    quotation_indicator = text1.find(\"(\")\n    if quotation_indicator == -1:\n        quotation_indicator = text1.find(\"[\")\n    if quotation_indicator == -1:\n        quotation_indicator = text1.find(\"{\")\n    if quotation_indicator!= -1:\n        text1 = text1.replace(\"(\",\"\")\n        text1 = text1.replace(\")\",\"\")\n        text1 = text1.replace(\"{\",\"\")\n        text1 = text1.replace(\"}\",\"\")\n    text1 = text1.replace(\" \",\"\")\n    text1 = text1.replace(\"\\n\",\"\")\n    text1 = text1.replace(\"\\r\",\"\")\n    # print(\"text1: \",text1)\n    # print(\"\\n\")\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\w\\s*[^\\s]+\\s*[^\\s]*\\s*[^\\s]*\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    txt = re.findall('[^\\w ]+', text1)\n    txt = txt[0]\n    txt = txt[:-1]\n    return txt\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    t_5 = test_tup[4]\n    t_6 = test_tup[5]\n    t_7 = test_tup[6]\n    t_8 = test_tup[7]\n    t_9 = test_tup[8]\n    t_10 = test_tup[9]\n    t_11 = test_tup[10]\n    t_12 = test_tup[11]\n    t_13 = test_tup[12]\n    t_14 = test_tup[13]\n    t_15 = test_tup[14]\n    t_16 = test_tup[15]\n    t_17 = test_tup[16]\n    t_18 = test_tup[17]\n    t_19 = test_tup[18]\n    t_20 = test_tup[19]\n    t_21 = test_tup[20]\n    t_22 = test_tup[21]\n    t_23 = test_tup[22]\n    t_24 = test_tup[23]\n    t_25 = test_tup[24]\n    t_26 = test_tup[25]\n    t_27 = test_tup[26]\n    t_28 = test_tup[27]\n    t_29 = test_tup[28]\n    t_30 = test_tup[29]\n    t_31 = test_tup[30]\n    t_32 = test_tup[31]\n    t_33 = test_tup[32]\n    t_34 = test_tup[33]\n    t_35 = test_tup[34]\n    t_36 = test_tup[35]\n    t_37 = test_tup[36]\n    t_38 = test_tup[37]\n    t_39 = test_tup[38]\n    t_40 = test_tup[39]\n    t_41 = test_tup[40]\n    t_42 = test_tup[41]\n    t_43 = test_tup[42]\n    t_44 = test_tup[43]\n    t_45 = test_tup[44]\n    t_46 = test_tup[45]\n    t_47 = test_tup[46]\n    t_48 = test_tup[47]\n    t_49 = test_tup[48]\n    t_50 = test_tup[49]\n    t_51 = test_tup[50]\n    t_52 = test_tup[51]\n    t_53 = test_tup[52]\n    t_54 = test_tup[53]\n    t_55 = test_tup[54]\n    t_56 = test_tup[55]\n    t_57 = test_tup[56]\n    t_58 = test_tup[57]\n    t_59 = test_tup[58]\n    t_60 = test_tup[59]\n    t_61 = test_tup[60]\n    t_62 = test_tup[61]\n    t_63 = test_tup[62]\n    t_64 = test_tup[63]\n    t_65 = test_tup[64]\n    t_66 = test_tup[65]\n    t_67 = test_tup[66]\n    t_68 = test_tup[67]\n    t_69 = test_tup[68]\n    t_70 = test_tup[69]\n    t_71 = test_tup[70]\n    t_72 = test_tup[71]\n    t_73 = test_tup[72]\n    t_74 = test_tup[73]\n    t_75 = test_tup[74]\n    t_76 = test_tup[75]\n    t_77 = test_tup[76]\n    t_78 = test_tup[77]\n    t_79 = test_tup[78]\n    t_80 = test_tup[79]\n    t_81 = test_tup[80]\n    t_82 = test_tup[81]\n    t_83 = test_tup[82]\n    t_84 = test_tup[83]\n    t_85 = test_tup[84]\n    t_86 = test_tup[85]\n    t_87 = test_tup[86]\n    t_88 = test_tup[87]\n    t_89 = test_tup[88]\n    t_90 = test_tup[89]\n    t_91 = test_tup[90]\n    t_92 = test_tup[91]\n    t_93 = test_tup[92]\n    t_94 = test_tup[93]\n    t_95 = test_tup[94]\n    t_96 = test_tup[95]\n    t_97 = test_tup[96]\n    t_98 = test_tup[97]\n    t_99 = test_tup[98]\n    t_100 = test_tup[99]\n    t_101 = test_tup[100]\n    t_102 = test_tup[101]\n    t_103 = test_tup[102]\n    t_104 = test_tup[103]\n    t_105 = test_tup[104]\n    t_106 = test_tup[105]\n    t_107 = test_tup[106]\n    t_108 = test_tup[107]\n    t_109 = test_tup[108]\n    t_110 = test_tup[109]\n    t_111 = test_tup[110]\n    t_112 = test_tup[111]\n    t_113 = test_tup[112]\n    t_114 = test_tup[113]\n    t_115 = test_tup[114]\n    t_116 = test_tup[115]\n    t_117 = test_tup[116]\n    t_118 = test_tup[117]\n    t_119 = test_tup[118]\n    t_120 = test_tup[119]\n    t_121 = test_tup[120]\n    t_122 = test_tup[121]\n    t_123 = test_tup[122]\n    t_124 = test_tup[123]\n    t_125 = test_tup[124]\n    t_126 = test_tup[125]\n    t_127 = test_tup[126]\n    t_128 = test_tup[127]\n    t_129 = test_tup[128]\n    t_130 = test_tup[129]\n    t_131 = test_tup[130]\n    t_132 = test_tup[131]\n    t_133 = test_tup[132]\n    t_134 = test_tup[133]\n    t_135 = test_tup[134]\n    t_136 = test_tup[135]\n    t_137 = test_tup[136]\n    t_138 = test_tup[137]\n    t_139 = test_tup[138]\n    t_140 = test_tup[139]\n    t_141 = test_tup[140]\n    t_142 = test_tup[141]\n    t_143 = test_tup[142]\n    t_144 = test_tup[143]\n    t_145 = test_tup[144]\n    t_146 = test_tup[145]\n    t_147 = test_tup[146]\n    t_148 = test_tup[147]\n    t_149 = test_tup[148]\n    t_150 = test_tup[149]\n    t_151 = test_tup[150]\n    t_152 = test_tup[15"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for x in test_tup:\n        new_tup.append(x*test_tup[x])\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for element in test_tup:\n        result.append(element*test_tup[0])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = list(test_tup)\n    return tuple(test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([element * element for element in test_tup])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Create an empty list\n    a_list = []\n    # Iterate over the input tuple\n    for item in test_tup:\n        # Append the input tuple to the empty list\n        a_list.append(item)\n    # Return the tuple in the list\n    return a_list\n    \n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1, t_N = test_tup\n    l_1 = len(t_1)\n    new_tup = []\n    for i in range(l_1):\n        new_tup.append(t_1[i] * t_1[i+1])\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    if len(test_tup)!= 1:\n        raise ValueError\n    else:\n        pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum = 0\n    for i in range(len(lst1)):\n        lst_sum += lst1[i] + lst2[i]\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ=0\n    for item in lst1:\n        summ += item\n    for item in lst2:\n        summ += item\n    return summ\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # get list size\n    lst_size = len(lst1)\n    # iterate through list size\n    for i in range(lst_size):\n        # take sum of values\n        sum_list = lst1[i] + lst2[i]\n        # return sum of values\n        return sum_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)<len(lst2):\n        lst1,lst2 = lst2,lst1\n    lst_sum = []\n    for a in lst1:\n        lst_sum.append(a + lst2[0])\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = 0\n    for i in lst1:\n        s+=i\n    for i in lst2:\n        s+=i\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1)+sum(lst2)\ndef summation_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1)+sum(lst2)\ndef multiplication_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return sum(lst1)*sum(lst2)\ndef product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return sum(lst1)*sum(lst2)\ndef min_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1<b_1,...,a_n<b_n].\n    '''\n    return min(lst1)<min(lst2)\ndef max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1>b_1,...,a_n>b_n].\n    '''\n    return max(lst1)>max(lst2)\ndef min_max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1<b_1,...,a_n<b_n].\n    '''\n    return min(lst1),max(lst2)\ndef sum_minus_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    return sum(lst1)-sum(lst2)\ndef sum_product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return sum(lst1)*sum(lst2)\ndef product_minus_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return product(lst1)*sum(lst2)\ndef product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return product(lst1)*sum(lst2)\ndef sum_minus_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    return sum(lst1)-sum(lst2)\ndef sum_product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return sum(lst1)*sum(lst2)\ndef summation_minus_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    return summation_list(lst1,lst2)\ndef summation_product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return summation_list(lst1)*sum(lst2)\ndef mul_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return sum(lst1)*sum(lst2)\ndef product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return product(lst1)*sum(lst2)\ndef min_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1<b_1,...,a_n<b_n].\n    '''\n    return min(lst1)<min(lst2)\ndef max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1>b_1,...,a_n>b_n].\n    '''\n    return max(lst1)>max(lst2)\ndef min_max_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1<b_1,...,a_n<b_n].\n    '''\n    return min(lst1),max(lst2)\ndef product_minus_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return product(lst1)*sum(lst2)\ndef product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    return product(lst1)*sum(lst2)\ndef sum_minus_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    return sum(lst1)-sum(lst2)\ndef sum_product_list(lst1,lst"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = 0\n    for i in lst1:\n        s += i\n    for i in lst2:\n        s += i\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for x in lst1:\n        for y in lst2:\n            result.append(x+y)\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum = []\n    for i in range(len(lst1)+len(lst2)):\n        lst_sum.append(sum(lst1[i:i+len(lst2)])+sum(lst2[i:i+len(lst2)]))\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Write your code here.\n    a = 0\n    b = 0\n    for i in range(len(lst1)):\n        a = a+lst1[i]\n        b = b+lst2[i]\n    return a+b\n    # to sum a list and b list together\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    sorted_list = sorted(nums)\n    i = 0\n    while i < len(nums):\n        j = i\n        while j < len(nums):\n            if nums[j] == nums[i] and nums[j] == nums[i-1]:\n                nums.remove(nums[j])\n                j -= 1\n            else:\n                j += 1\n        i += 1\n    return sorted(nums)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i - 1] and nums[i]!= nums[i + 1]:\n            return True\n    return False\n    \ndef common(lst1, lst2):\n    '''\n    Write a function to check if two lists have the same items in the same position in both lists.\n    '''\n    return all(elem == lst1[i] for i,elem in groupby(lst2))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    group = {}\n    for i in nums:\n        if i not in group:\n            group[i] = 1\n        else:\n            group[i] += 1\n    for key, value in group.items():\n        if value > 1:\n            return False\n    return True\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # from http://en.wikipedia.org/wiki/Consecutive_duplicates\n    counter = {}\n    for item in nums:\n        if item not in counter:\n            counter[item] = 1\n        else:\n            counter[item] += 1\n    ans = []\n    for item in counter:\n        if counter[item] == 1:\n            ans.append(item)\n    return ans\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(groupby(nums).values()))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return set(num for num in nums if num not in nums[:num+1])\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    d = dict()\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for k, v in d.items():\n        if v >= 2:\n            return k\n    return None\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    nums_list = list(nums)\n    start = 0\n    end = 1\n    # loop through the nums\n    while end < len(nums):\n        # set the starting index to the end index\n        # you'll need to do something if you want to keep indexing the same\n        # the range is in a row of [0:len(nums)-1]\n        start = end\n        # set the ending index to the next index\n        end += 1\n        # if the ending index is greater than the len of the list, it's not a duplicate\n        if end > len(nums) - 1:\n            break\n        # check if the nums[start] == nums[end]\n        if nums[start] == nums[end]:\n            # set the starting index to the next index\n            start += 1\n            # set the ending index to the next index\n            end += 1\n        # if the starting index is bigger than the end index,\n        # set the ending index to the end index\n        if start > end:\n            end = len(nums) - 1\n    # return the number of consecutive duplicates\n    return len(nums_list) - end\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x for x, y in groupby(sorted(nums)) if x == y][0]\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(math.sqrt(r**2-h**2))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # write your code here\n    # surface area\n    lateral_surface = math.pi * (r**2) * (h / 2)\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    x = math.pi/4\n    y = h\n    theta = 2*math.pi/3\n    alpha = math.atan((math.sin(theta)-x)/(math.cos(theta)+y))\n    area = (math.pow(r*math.sin(alpha),2) + math.pow(r*math.cos(alpha),2))\n    return area\ndef specific_surface_cones(p,r,h):\n    '''\n    Write a function that returns a list of all surface areas for specific surface sides of a cone given\n    a point and a cone radius and a height\n    '''\n    x = p[0]\n    y = p[1]\n    area_p = lateralsurface_cone(r,h)\n    area_s = []\n    for i in range(1,len(r)-1):\n        area_s.append(math.pow(r[i+1]*math.cos(alpha)-r[i-1]*math.cos(alpha),2)+area_p)\n    return area_s\ndef vertical_surface_cones(p,r,h):\n    '''\n    Write a function that returns a list of all surface areas for vertical surfaces of a cone given a point\n    and a cone radius and a height\n    '''\n    area_s = []\n    for i in range(1,len(r)-1):\n        area_s.append((r[i]+r[i+1])/2*math.pow(r[i+1]-r[i],2)+lower_bound(r[i],r[i+1],h))\n    return area_s\ndef lower_bound(a,b,h):\n    '''\n    Write a function that returns the lower bound of a square/circle given a point and a cone radius and a height\n    '''\n    x = a[0]\n    y = a[1]\n    area_a = lateralsurface_cone(r,h)\n    area_b = upper_bound(r,h,a[0],a[1])\n    area = area_a+area_b\n    return math.sqrt(area)*math.sin(math.pi/4)\ndef upper_bound(a,b,c,d):\n    '''\n    Write a function that returns the upper bound of a square/circle given a point and a cone radius and a height\n    '''\n    x = a[0]\n    y = a[1]\n    area_a = lower_bound(r,h,a[0],a[1])\n    area_c = math.pow(b[0]-c[0],2)+lower_bound(r,h,c[0],c[1])\n    area_d = lower_bound(r,h,d,d)\n    area = area_a+area_c+area_d\n    return math.sqrt(area)*math.sin(math.pi/4)\ndef cone_area(p,r,h):\n    '''\n    Write a function that returns the surface area of a cone given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.append(a)\n    b.append(lower_bound(r,h,a,p[1]))\n    area = math.pow(h,2)\n    for i in range(1,len(r)-1):\n        area+=math.pow(b[i+1]-b[i],2)\n    return area\ndef surface_area(p,r,h):\n    '''\n    Write a function that returns the surface area of a cone given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.append(a)\n    b.append(lower_bound(r,h,a,p[1]))\n    area = math.pow(h,2)\n    for i in range(1,len(r)-1):\n        area+=math.pow(b[i+1]-b[i],2)\n    return area\ndef vertical_cone(p,r,h):\n    '''\n    Write a function that returns the surface area of a vertical cone given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.append(a)\n    b.append(lower_bound(r,h,a,p[1]))\n    area = math.pow(h,2)\n    for i in range(1,len(r)-1):\n        area+=math.pow(b[i+1]-b[i],2)\n    return area\ndef surface_cone(p,r,h):\n    '''\n    Write a function that returns the surface area of a cone given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.append(a)\n    b.append(lower_bound(r,h,a,p[1]))\n    area = math.pow(h,2)\n    for i in range(1,len(r)-1):\n        area+=math.pow(b[i+1]-b[i],2)\n    return area\ndef point_surface_cones(p,r,h):\n    '''\n    Write a function that returns the surface area of a point given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.append(a)\n    b.append(lower_bound(r,h,a,p[1]))\n    area = math.pow(h,2)\n    for i in range(1,len(r)-1):\n        area+=math.pow(b[i+1]-b[i],2)\n    return area\ndef circle_surface_cones(p,r,h):\n    '''\n    Write a function that returns the surface area of a circle given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.append(a)\n    b.append(lower_bound(r,h,a,p[1]))\n    area = math.pow(h,2)\n    for i in range(1,len(r)-1):\n        area+=math.pow(b[i+1]-b[i],2)\n    return area\ndef triangle_surface_cones(p,r,h):\n    '''\n    Write a function that returns the surface area of a triangle given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.append(a)\n    b.append(lower_bound(r,h,a,p[1]))\n    area = math.pow(h,2)\n    for i in range(1,len(r)-1):\n        area+=math.pow(b[i+1]-b[i],2)\n    return area\ndef equilateral_surface_cones(p,r,h):\n    '''\n    Write a function that returns the surface area of an equilateral triangle given a point and a cone radius and a height\n    '''\n    a = p\n    b = []\n    for i in range(0,len(r)-1):\n        a = math.pow(r[i]+r[i+1],2)\n        b.appen"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    x,y = math.cos(math.radians(h)),math.sin(math.radians(h))\n    b,c = 0.25*r,0.5*r\n    z = math.sqrt(r*r+b*b)\n    s = math.sqrt(r*r+c*c)\n    return math.pi*r*(s*s-z*z)\ndef lateralsurface_triangle(r):\n    '''\n    Write a function to calculate the lateral surface area of a triangle given the radius r.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef lower_left(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a lower-left triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef lower_right(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a lower-right triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.75*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef upper_left(r,h):\n    '''\n    Write a function that calculates the lateral surface area of an upper-left triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.75*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef upper_right(r,h):\n    '''\n    Write a function that calculates the lateral surface area of an upper-right triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef lower_triangle(r):\n    '''\n    Write a function that calculates the lateral surface area of a lower-triangle given the radius r.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.5*a,0.75*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef triangle(r):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.5*a,0.75*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef trimesh(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef from_bottom_to_top(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef from_top_to_bottom(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef height(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef from_bottom_to_top(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef from_top_to_bottom(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r and the height h.\n    '''\n    a,b,c = r*r+0.25*r,r*r+0.5*r,r*r+0.75*r\n    x,y = 0.25*a,0.5*b\n    z = math.sqrt(a*a+b*b)\n    return math.pi*r*(s*s-z*z)\ndef cal_surface(r,h):\n    '''\n    Write a function that calculates the lateral surface area of a triangle given the radius r and the height h.\n    '''\n    return (lateralsurface_cone(r,h)*(4-2*r))+(lateralsurface_triangle(r)*2+lateralsurface_triangle(r))+(lateralsurface_triangle(r)*2-lateralsurface_triangle(r))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=4*i*math.pi*(h/h)**2\n        \n    return s\ndef tangent(r,h):\n    '''\n    Write a function to calculate the tangent of a cone given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef cone_shade(r,h):\n    '''\n    Write a function that calculates the shade of a cone given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef parallelogram_shade(r,h):\n    '''\n    Write a function that calculates the shade of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef parallelogram_cone(r,h):\n    '''\n    Write a function that calculates the shade of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef parallelogram_cone(r,h):\n    '''\n    Write a function that calculates the shade of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=2*i*math.pi*(h/h)**2\n        \n    return s\ndef parallelogram_perpendicular(r,h):\n    '''\n    Write a function that calculates the angle of the perpendicular\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.acos(s)\ndef parallelogram_cone(r,h):\n    '''\n    Write a function that calculates the angle of the parallel cone\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.acos(s)\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.sqrt(s)\ndef parallelogram_cone(r,h):\n    '''\n    Write a function that calculates the angle of the parallelogram\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.acos(s)\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.sqrt(s)\ndef parallelogram_perpendicular(r,h):\n    '''\n    Write a function that calculates the angle of the perpendicular\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.acos(s)\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.sqrt(s)\ndef parallelogram_cone(r,h):\n    '''\n    Write a function that calculates the angle of the parallel cone\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.acos(s)\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.sqrt(s)\ndef parallelogram_cone(r,h):\n    '''\n    Write a function that calculates the angle of the parallel cone\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.acos(s)\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.sqrt(s)\ndef parallelogram_perpendicular(r,h):\n    '''\n    Write a function that calculates the angle of the perpendicular\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return math.acos(s)\ndef parallelogram_shape(r,h):\n    '''\n    Write a function that calculates the shape of a parallelogram given radius r and the height h.\n    '''\n    s=0\n    for i in range(1,int(math.sqrt(r/h))+1):\n        s+=math.pi*(h/h)**2\n        \n    return mat"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Error.\n    if(h<0 or h>1):\n        print(\"Error. h must be between 0 and 1.\")\n        return\n    #Line of circles.\n    elif(r<0 or r>1):\n        print(\"Error. r must be between 0 and 1.\")\n        return\n    #Absolute value.\n    else:\n        c = (math.pi*r*r)/(2*h)\n        l = math.sqrt(c*c-(r+h))\n        S = (r*c)\n        if(l>=1):\n            S = S+(r+h)*(math.pi*r*r)/(2*h)\n        else:\n            S = S+(r+h)*(math.pi*r*r)/(2*h)\n        return S\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cone_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cylinder_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_toroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a toroidal surface given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cylinder_toroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cone_toroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cylinder_toroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cylinder_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cone_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cylinder_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_toroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a toroidal surface given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cylinder_toroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface_cone_toroid(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate z value\n    z = math.sqrt(r**2 + h**2)\n    #calculate surface area\n    area = (4/3)*math.pi*(h/z)**3\n    #print(f\"{r}\")\n    #print(f\"{h}\")\n    #print(f\"{area}\")\n    return area\ndef lateralsurface"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if (r>=0) and (r<=1) and (h>=0) and (h<=1):\n        s=float(r/h)\n        return s*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef hoiguchi_cone(h):\n    '''\n    Write a function to find the lateral surface area of a cone given height h.\n    '''\n    if h>=0:\n        s=math.pi*(2*math.sin(math.radians(180))/h)**2\n        return s*h\n    else:\n        return 0\ndef cos_theta(a,b):\n    '''\n    Write a function to find cosine of angle a and angle b in degrees.\n    '''\n    theta=math.acos((a**2+b**2-1)/(2*b*a))\n    return theta\ndef is_collinear(a,b,c):\n    '''\n    Write a function to check if the line segments defined by a,b,c are collinear.\n    '''\n    # check if horizontal line segments are collinear\n    if (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-c)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs(a-b)<(1/math.cos(math.radians(90)))) and (math.fabs(b-c)<(1/math.cos(math.radians(90)))) and (math.fabs("
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # compute surface area of a cone\n    #\n    # input:\n    # r - radius of the cone\n    # h - height of the cone\n    #\n    # return:\n    # The surface area of the cone\n    \n    # constant factors\n    S = (math.pi * 4 * math.sqrt(8))\n    d = (r * h)/2.0\n    f = (3*h)/6.0\n    \n    # compute the area of the convex surface\n    #\n    # input:\n    # r - radius of the cone\n    # h - height of the cone\n    #\n    # return:\n    # The surface area of the cone\n    \n    return math.pi * r**2 * S * f\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the inner radius of the cone by formula given by: r_i^2 = r^2 - r_j^2, and i and j are integers corresponding to:\n    #    r_i = r_i^2 - r_j^2; \n    #    r_j = r_i^2 - r_i^2;\n    #    -r_i = r_i^2 - r_j^2.\n    #    -r_j = r_i^2 - r_j^2.\n    #    -i = (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #    -j = (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #    -r_i = (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #    -r_j = (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #\n    #Because we need to do this recursively, we need to do a simple while loop on the total number of elements of the list.\n    #\n    #For the case where r_i = r_i^2 and r_j = r_j^2, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #    -r_i = r_i^2 - r_i^2\n    #\n    #In the case where r_i = r_i^2 and r_j = r_j^2, the inner radius becomes\n    #    r_i = r_i^2 - r_i^2\n    #        -r_i = r_i^2 - r_i^2\n    #\n    #In the case where r_i = r_i^2 and r_j = r_j^2, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_i^2\n    #\n    #In the case where r_i = r_i^2 and r_j = r_j^2, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_i^2\n    #\n    #In the case where r_i = r_i^2 and r_j = r_j^2, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_i^2\n    #\n    #If r_i!= r_j, r_i = r_i^2 - r_j^2, so we can calculate:\n    #    r_i = r_i^2 - r_i^2\n    #    -r_i = r_i^2 - r_i^2\n    #    -r_i = r_i^2 - r_i^2\n    #\n    #Then we need to calculate:\n    #    -r_j = (r_i^2 - r_i^2) / (r_i^2 - r_j^2)\n    #    -r_i = (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #    -r_i = (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #\n    #Where r_i = r_i^2 and r_j = r_j^2, we need to use the outer loop to calculate the inner\n    #    radius.\n    #\n    #Note that the inner radius now corresponds to the diagonal element of the cone:\n    #    (r_i^2 - r_i^2) / (r_i^2 - r_i^2)\n    #    (r_i^2 - r_i^2) / (r_i^2 - r_i^2)\n    #\n    #Finally, the inner radius needs to be the actual square root of the diagonal element.\n    #\n    #So, instead of using a while loop, we can calculate the outer loop.\n    #\n    #To calculate the inner radius, we need to use the outer loop.\n    #\n    #For the case where r_i!= r_j, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #    -r_i = r_i^2 - r_i^2\n    #    -r_i = r_i^2 - r_i^2\n    #\n    #In the case where r_i!= r_j, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_i^2\n    #\n    #In the case where r_i == r_j, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_j^2\n    #\n    #In the case where r_i == r_j, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_j^2\n    #\n    #In the case where r_i == r_j, the inner radius becomes\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_j^2\n    #\n    #In the case where r_i!= r_j, the inner radius becomes:\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_j^2\n    #\n    #In the case where r_i == r_j, the inner radius becomes:\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_j^2\n    #\n    #Finally, we need to calculate the side lengths of the cone:\n    #\n    #For the case where r_i!= r_j, the side lengths of the cone is\n    #    (r_i^2 - r_i^2) / (r_i^2 - r_i^2)\n    #    (r_i^2 - r_i^2) / (r_i^2 - r_j^2)\n    #\n    #To calculate the side lengths, we need to use the outer loop.\n    #\n    #For the case where r_i == r_j, the side lengths of the cone is\n    #    (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #    (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #\n    #In the case where r_i!= r_j, the side lengths of the cone is\n    #    (r_i^2 - r_j^2) / (r_i^2 - r_i^2)\n    #        (r_i^2 - r_i^2) / (r_i^2 - r_j^2)\n    #\n    #In the case where r_i == r_j, the side lengths of the cone is\n    #    (r_i^2 - r_j^2) / (r_i^2 - r_j^2)\n    #        (r_i^2 - r_i^2) / (r_i^2 - r_j^2)\n    #\n    #In the case where r_i == r_j, the side lengths of the cone is:\n    #    r_i = r_i^2 - r_j^2\n    #        -r_i = r_i^2 - r_i^2\n    #\n    #In the case where r_i!= r_j, the side lengths of the cone is:\n    #    "
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces\n    text = text.replace(' ',':')\n    # replace commas\n    text = text.replace(',','--')\n    # replace dots\n    text = text.replace('.',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':'"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[^\\w\\s]','',text) # Remove characters not in set\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\d+\\.\\d+', r':', text)\n    text = re.sub(r'\\.\\d+', r':', text)\n    text = re.sub(r'\\n', ':', text)\n    return text\ndef replace_spaces(text):\n    '''\n    Write a function to replace all occurrences of spaces with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\d+\\.\\d+', r':', text)\n    text = re.sub(r'\\.\\d+', r':', text)\n    text = re.sub(r'\\n', ':', text)\n    return text\ndef replace_dots(text):\n    '''\n    Write a function to replace all occurrences of dots with a colon.\n    '''\n    text = re.sub(r'\\d+\\.\\d+', r':\\', text)\n    text = re.sub(r'\\.\\d+', r':', text)\n    text = re.sub(r'\\n', ':\\', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from the input text.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'[\\w\\s]+', '', text)\n    return text\ndef replace_punctuation(text):\n    '''\n    Write a function to replace all punctuation with a space.\n    '''\n    text = re.sub(r'[^\\w\\s]','', text)\n    text = re.sub(r'[\\w\\s]+','', text)\n    return text\ndef replace_stopwords(text):\n    '''\n    Write a function to replace all stopwords with a space.\n    '''\n    text = re.sub(r'[\\w\\s]+','', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove all stopwords from the input text.\n    '''\n    text = re.sub(r'[\\w\\s]+','', text)\n    text = re.sub(r'\\w+','', text)\n    return text\ndef remove_number(text):\n    '''\n    Write a function to remove all numbers from the input text.\n    '''\n    text = re.sub(r'[0-9]+', '', text)\n    return text\ndef remove_space(text):\n    '''\n    Write a function to remove all spaces from the input text.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text\ndef tokenize(text):\n    '''\n    Tokenize the input text.\n    '''\n    return text.split()\ndef normalize(text):\n    '''\n    Normalize the input text.\n    '''\n    text = replace_specialchar(text)\n    text = replace_spaces(text)\n    text = replace_dots(text)\n    text = remove_punctuation(text)\n    text = replace_stopwords(text)\n    text = remove_number(text)\n    text = remove_space(text)\n    text = re.sub(r'[^a-zA-Z0-9]+','', text)\n    return text\ndef lemmatize(text):\n    '''\n    Lemmatize the input text.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\d+', '', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\n+','', text)\n    text = re.sub(r'\\.','', text)\n    text = re.sub(r'[a-zA-Z]+','', text)\n    text = re.sub(r'\\w','', text)\n    text = text.split()\n    return text\ndef lemmatize_v2(text):\n    '''\n    Lemmatize the input text.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\d+', '', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\n+','', text)\n    text = re.sub(r'\\.','', text)\n    text = re.sub(r'[a-zA-Z]+','', text)\n    text = re.sub(r'\\w','', text)\n    text = text.split()\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if not word in stopwords]\n    text = [word for word in text if word!='']\n    text = [word for word in text if word!= '.']\n    text = [word for word in text if word!= '?']\n    return text\ndef lemmatize_v3(text):\n    '''\n    Lemmatize the input text.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\d+', '', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\n+','', text)\n    text = re.sub(r'\\.','', text)\n    text = re.sub(r'[a-zA-Z]+','', text)\n    text = re.sub(r'\\w','', text)\n    text = text.split()\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if word!='']\n    text = [word for word in text if word!= '.']\n    text = [word for word in text if word!= '?']\n    text = [word for word in text if word!= '.']\n    return text\ndef lemmatize_v4(text):\n    '''\n    Lemmatize the input text.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\d+', '', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\n+','', text)\n    text = re.sub(r'\\.','', text)\n    text = re.sub(r'[a-zA-Z]+','', text)\n    text = re.sub(r'\\w','', text)\n    text = text.split()\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if word!='']\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if word!= '.']\n    text = [word for word in text if word!= '?']\n    text = [word for word in text if word!= '.']\n    return text\ndef lemmatize_v5(text):\n    '''\n    Lemmatize the input text.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\d+', '', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\n+','', text)\n    text = re.sub(r'\\.','', text)\n    text = re.sub(r'[a-zA-Z]+','', text)\n    text = re.sub(r'\\w','', text)\n    text = text.split()\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in text if word not in stopwords]\n    text = [word for word in tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('.',':')\n    text = text.replace('-',':')\n    text = text.replace(',',':')\n    text = text.replace('!',':')\n    text = text.replace('?',':')\n    text = text.replace('(',':')\n    text = text.replace(')',':')\n    text = text.replace('[',':')\n    text = text.replace(']',':')\n    text = text.replace('\\t',':')\n    text = text.replace('\\n',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]+', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,]', ':', text)\n    text = re.sub(r'[,"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(';',' :')\n    text = text.replace('$',' :')\n    text = text.replace('!',' :')\n    text = text.replace('&',' :')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text = text.replace('}',' :')\n    text = text.replace('.',' :')\n    text = text.replace('?',' :')\n    text = text.replace(':',' :')\n    text = text.replace('!',':')\n    text = text.replace('&',':')\n    text = text.replace('{',' :')\n    text "
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ','\\n')\n    text = re.sub('\\s','\\n',text)\n    text = re.sub('\\,','\\n',text)\n    text = re.sub('\\.','\\n',text)\n    text = re.sub('\\s:\\n','\\n',text)\n    text = re.sub('\\s:','\\n',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=text.replace(' ',':').replace(',',' :').replace('.',':')\n    text=text.replace('!','!').replace('(','').replace(')','').replace(';',';').replace('\\n','').replace('\\t','')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Step 1: find all occurences of spaces\n    # remove all occurrences of spaces\n    text = re.sub('\\s+', '', text)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A)-1\n    while l < r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = int((start + end) / 2)\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low<high:\n        mid = (low+high)//2\n        if A[mid]==x:\n            return mid\n        elif A[mid]>x:\n            high = mid-1\n        elif A[mid]<x:\n            low = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of first occurrence of a number in a sorted array\n    # compare each item to the first occurrence of a number in the sorted array\n    # if the first occurrence of a number is greater than the index of the first occurrence, then return index of the first occurrence\n    # if the first occurrence is less than the index of the first occurrence, then return the index of the first occurrence\n    # return the index of the first occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Check the first element\n    if A[0] < x:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = 0\n    last = len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return binary_search(A, 0, len(A)-1, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    for i in range(1, len(arr)):\n        result += arr[i - 1] * arr[i]\n    print(result)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def combinations(s, n):\n        arr = []\n        for i in range(0, n):\n            arr.append([i, s - i])\n        return arr\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            sum += arr[i] * arr[j]\n    return sum\n    #Your code here\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    Sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i]+arr[j] == arr[i]*arr[j] and i!=j:\n                Sum += arr[i]*arr[j]\n    return Sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    maxSub = arr[0]\n    subProd = 0\n    for i in range(1, len(arr)):\n        if maxSub == arr[i]:\n            subProd += arr[i]\n        else:\n            maxSub = arr[i]\n            subProd = arr[i]\n    return subProd * maxSub\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        res += arr[i] * (i+1)\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # check input is a list\n    if(type(arr)!= list):\n        print(\"Your list is not a list type!\")\n        return\n    \n    # check if it's empty\n    if(len(arr) == 0):\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    if(len(arr) == 1):\n        result = arr[0]\n    else:\n        #for i in range(0, len(arr)):\n        #    for j in range(0, i + 1):\n        #        print(arr[j])\n        #        result += arr[j] * arr[i]\n        for i in range(len(arr) - 1):\n            result += arr[i] * arr[i + 1]\n        result += arr[-1] * arr[0]\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==1:\n        return arr[0]\n    elif len(arr)==2:\n        return arr[0]*arr[1]\n    else:\n        return sum(arr[0:2])*sum(arr[2:])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_sub_array = 0\n    n = len(arr)\n    if n == 0:\n        return 0\n    i = 0\n    while i < n-1:\n        if arr[i] == arr[i+1]:\n            i += 1\n            continue\n        sum_sub_array += arr[i]\n        i += 1\n    return sum_sub_array\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    ans = bin(n & 0b
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(n)\n    bin_n = bin(n)\n    bin_n = bin_n.replace(\"0b\", \"\")\n    bin_n = bin_n.replace(\"1\", \"1\")\n    bin_n = bin_n.replace(\"1\", \"0\")\n    bin_n = bin_n.replace(\"0\", \"1\")\n    n = int(bin_n, 2)\n    if n & 0x1 == 0:\n        n = n - 1\n    else:\n        n = n + 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bits = bin(n)[2:] # remove 0b\n    bits = bits[3:] # remove the leading 0b\n    bits = bits[:-1] # remove the last bit\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n >= 0:\n        n = bin(n)\n        if n[2:] == '0b0':\n            n = '0' + n[2:]\n        if n[1:] == '0b1':\n            n = '1' + n[2:]\n        if n[:-1] == '0b1':\n            n = '1' + n[:-1]\n        if n[1:] == '1b1':\n            n = '0' + n[:-1]\n        return int(n, 2)\n    else:\n        return 0\n    \ndef flip(a):\n    '''\n    Write a python function to reverse a binary string.\n    '''\n    s = bin(a)[2:]\n    return int(s, 2)\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a binary string.\n    '''\n    return str(int(s, 2) ^ 1)\n    \ndef binary_to_decimal(s):\n    '''\n    Write a python function to convert a binary string to decimal number.\n    '''\n    i = 0\n    j = len(s) - 1\n    n = 0\n    while i < j:\n        n = (n << 1) | int(s[i], 2)\n        i += 1\n        j -= 1\n    return n\n    \ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert decimal number to binary string.\n    '''\n    n_ = bin(n)[2:]\n    return int(n_, 2)\n    \ndef binary_to_decimal_if_not_neg(s):\n    '''\n    Write a python function to convert a binary string to decimal number.\n    '''\n    if s[0] == '-':\n        s = s[1:]\n        n = -1\n    else:\n        n = int(s, 2)\n    return n\n    \ndef decimal_to_binary_if_not_neg(n):\n    '''\n    Write a python function to convert decimal number to binary string.\n    '''\n    if n < 0:\n        n = abs(n)\n        n = binary_to_decimal(-n)\n    else:\n        n = int(n)\n    return bin(n)[2:]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = [0, 0, 0]\n    for i in range(len(n)):\n        res[i] = n[i]\n        if i > 1:\n            res[i] ^= n[i-1]\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n==0:\n        return n\n    n_1=n\n    n_2=0\n    for i in range(len(n)-1):\n        if n_2==0:\n            if n_1&1:\n                n_2=1\n            else:\n                n_2=0\n        elif n_2==1:\n            if n_1&1:\n                n_2=0\n            else:\n                n_2=1\n        else:\n            if n_1&1:\n                n_2=0\n            else:\n                n_2=1\n    return n_2\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:\n        print(\"ERROR: This isn't an integer! \\n\")\n        return 0\n    else:\n        print(\"Toggling the bits of the number...\")\n        print(\"The number has \", n, \" bits\")\n        n = n & (n-1)\n        print(\"The number has now \", n, \" bits.\")\n        print(\"Toggling the bits of the number...\")\n        print(\"The number has \", n, \" bits\")\n        n = n ^ (n-1)\n        print(\"The number has now \", n, \" bits.\")\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    b = bin(n)[2:]\n    f = '1'\n    if len(b) % 2 == 1:\n        f = '0'\n    b = int(f, 2)\n    return b\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return 1 << n\n    \ndef set_start_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ~(1 << n)\n    \ndef set_start_bits_return(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return 1 << n\n    \ndef set_end_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ~(1 << n)\n    \ndef set_end_bits_return(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return 1 << n\n    \ndef set_both_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return 1 << n\n    \ndef set_both_bits_return(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return 1 << n\n    \ndef get_upper_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n >> 1\n    \ndef get_lower_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & 0x1\n    \ndef get_start_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n >> 1\n    \ndef get_start_bits_return(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n >> 1\n    \ndef get_end_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & 0x1\n    \ndef get_end_bits_return(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & 0x1\n    \ndef get_both_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & 0x1\n    \ndef get_both_bits_return(n):\n    '''\n    Write a python function to toggle bits of the number except the first bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & 0x"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = \"\"\n    for i in range(len(n)):\n        if n[i] == 0:\n            result += \"0\"\n        elif n[i] == 1:\n            result += \"1\"\n        else:\n            result += \" \"\n    return result\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return -1\n    else:\n        return index\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Write your code here\n    return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.sort()\n    for i, n in enumerate(a):\n        if n > x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i - 1 if i >= 0 else 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # write your code here\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a):\n        return 0\n    else:\n        return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_idx = bisect.bisect_left(a, x)\n    if left_idx == len(a):\n        return -1\n    else:\n        return left_idx\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Your code here\n    # Precondition:  x is unique\n    # Postcondition: x is not in the list\n    # Example\n    # left_insertion(a, 3) should return 0\n    # left_insertion(a, 5) should return 1\n    # left_insertion(a, 6) should return 2\n    # left_insertion(a, 7) should return 2\n    # left_insertion(a, 1) should return 3\n    \n    if x not in a:\n        return 0\n    else:\n        i = bisect.bisect_left(a, x, 0, len(a))\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # create a binary search list, and search the list for the x\n    low = 0\n    high = len(a)-1\n    while low<=high:\n        mid = (low+high)//2\n        if mid == 0 and x<a[mid]:\n            high = mid - 1\n        elif mid == len(a)-1 and a[mid]<x:\n            low = mid + 1\n        elif x<a[mid]:\n            high = mid - 1\n        elif a[mid]==x:\n            return mid\n    return low\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # create a binary search list, and search the list for the x\n    low = 0\n    high = len(a)-1\n    while low<=high:\n        mid = (low+high)//2\n        if mid == len(a)-1 and a[mid]<x:\n            low = mid + 1\n        elif x<a[mid]:\n            high = mid - 1\n        elif a[mid]==x:\n            return mid\n    return low\ndef search(a, x):\n    '''\n    Write a function to search for an element x in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    while low<=high:\n        mid = (low+high)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\ndef search_bisect(a, x):\n    '''\n    Find the index of the first occurrence of x in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    while low<=high:\n        mid = (low+high)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\ndef selection(a, x):\n    '''\n    Write a function to select an element x in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    while low<=high:\n        mid = (low+high)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\ndef selection_bisect(a, x):\n    '''\n    Find the index of the first occurrence of x in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = 0\n    high = len(a)-1\n    while low<=high:\n        mid = (low+high)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid]<x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\ndef merge(a, b, left_index, right_index):\n    '''\n    Create and return a sorted list of the elements in the given sublists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = a[left_index:right_index]\n    right = b[left_index:right_index]\n    i = 0\n    j = 0\n    temp = []\n    while i<len(left) and j<len(right):\n        if left[i]<right[j]:\n            temp.append(left[i])\n            i+=1\n        else:\n            temp.append(right[j])\n            j+=1\n    while i<len(left):\n        temp.append(left[i])\n        i+=1\n    while j<len(right):\n        temp.append(right[j])\n        j+=1\n    return temp\ndef merge_sort(a, left_index, right_index):\n    '''\n    Create and return a sorted list of the elements in the given sublists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if right_index==len(a):\n        return a\n    if right_index<len(a):\n        mid = (left_index+right_index)//2\n        left = merge_sort(a, left_index, mid)\n        right = merge_sort(a, mid+1, right_index)\n        return merge(left, right, left_index, right_index)\n    return a\ndef merge_sort2(a, left_index, right_index):\n    '''\n    Create and return a sorted list of the elements in the given sublists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if right_index==len(a):\n        return a\n    if right_index<len(a):\n        mid = (left_index+right_index)//2\n        left = merge_sort2(a, left_index, mid)\n        right = merge_sort2(a, mid+1, right_index)\n        return merge(left, right, left_index, right_index)\n    return a\ndef merge_sort3(a, left_index, right_index):\n    '''\n    Create and return a sorted list of the elements in the given sublists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if right_index==len(a):\n        return a\n    if right_index<len(a):\n        mid = (left_index+right_index)//2\n        left = merge_sort3(a, left_index, mid)\n        right = merge_sort3(a, mid+1, right_index)\n        return merge(left, right, left_index, right_index)\n    return a\ndef merge_sort4(a, left_index, right_index):\n    '''\n    Create and return a sorted list of the elements in the given sublists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if right_index==len(a):\n        return a\n    if right_index<len(a):\n        mid = (left_index+right_index)//2\n        left = merge_sort4(a, left_index, mid)\n        right = merge_sort4(a, mid+1, right_index)\n        return merge(left, right, left_index, right_index)\n    return a\ndef merge_sort5(a, left_index, right_index):\n    '''\n    Create and return a sorted list of the elements in the given sublists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithm"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i >= len(a):\n        a.append(x)\n    else:\n        a[i] = x\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex,string)\n    if result:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\ndef check_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\")\ndef check_num(string): \n    '''\n    Write a function to check whether the given string is a number or not using regex.\n    '''\n    return bool(re.search(regex, string))\ndef check_num_vowel(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:])\ndef check_num_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_syllable(string[1:])\ndef check_num_digit(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:])\ndef check_num_digit_vowel(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_syllable(string[1:]) and check_num_digit(string[1:])\ndef check_num_digit_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_syllable(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:])\ndef check_num_digit_digit(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:])\ndef check_num_digit_digit_vowel(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and check_num_digit_digit(string[1:])\ndef check_num_digit_digit_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and check_num_digit_syllable(string[1:])\ndef check_num_digit_digit_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and check_num_digit_syllable(string[1:])\ndef check_num_digit_digit_digit(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and check_num_digit_syllable(string[1:]) and check_num_digit_digit(string[1:])\ndef check_num_digit_digit_digit_vowel(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and check_num_digit_syllable(string[1:]) and check_num_digit_digit(string[1:]) and check_num_digit_digit_vowel(string[1:])\ndef check_num_digit_digit_digit_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and check_num_digit_syllable(string[1:]) and check_num_digit_digit(string[1:]) and check_num_digit_digit_syllable(string[1:])\ndef check_num_digit_digit_digit_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and check_num_digit_syllable(string[1:]) and check_num_digit_digit(string[1:]) and check_num_digit_digit_syllable(string[1:])\ndef check_num_digit_digit_digit_syllable(string): \n    '''\n    Write a function to check whether the given string is a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string) and string[0] in \"aeiouAEIOU\") and check_str(string[1:]) and check_num_vowel(string[1:]) and check_num_digit(string[1:]) and check_num_digit_vowel(string[1:]) and chec"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return string[0] in 'aeiouAEIOU'\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    is_vowel = re.match(regex, string.upper())\n    return is_vowel is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    res = re.findall(regex, string)\n    if res!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = 'aeiouAEIOU'\n    if re.search(regex,string):\n        return True\n    else:\n        for i in string:\n            if i in vowels:\n                return False\n    return True\ndef check_range(s):\n    '''\n    Write a function to check whether a number is between 1 and 10 inclusive.\n    '''\n    try:\n        int(s)\n    except ValueError:\n        return False\n    else:\n        if int(s)<1 or int(s)>10:\n            return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = \"^[A-Z]{2,}$\"\n    if re.search(pattern, string): \n        print(\"Starting with vowel\")\n    else: \n        print(\"Starting with consonant\")\n    \ndef check_str_with_punctuation(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = \"^[A-Z]{2,}[.!?,]*$\"\n    if re.search(pattern, string): \n        print(\"Starting with vowel\")\n    else: \n        print(\"Starting with consonant\")\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (n**2) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return n\n    return n + geometric_sum(n-1)\n    "
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1 or n == 2:\n        return n\n    elif n == 3:\n        return 6\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1+geometric_sum(n-1)\n    else:\n        return geometric_sum(n-1) + geometric_sum(n-2)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 1 : \n        return -1\n    count = 0\n    if n%2 == 0: \n        count = math.ceil(n/2)\n    else: \n        count = math.ceil(n/2)+1\n    for i in range(count): \n        if n%i == 0: \n            return count\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # I used math library to solve this question\n    # math.floor(n / 10) * 10\n    # n % 10\n    index = (n - math.floor(n / 10)) * 10\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 2: \n        return n-1\n    elif n > 2 and n <= 7: \n        return n-2\n    else: \n        return n-3\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import numpy as np\n    n = n \n    start = 0\n    end = 1\n    while True:\n        mid = (start + end) // 2\n        if n == mid:\n            return start\n        elif n < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    else:\n        triangle = ((3 * n) - 2)\n        return triangle\n    \ndef find_Index_Inverse(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    elif n == 101:\n        return 100\n    elif n == 102:\n        return 101\n    elif n == 103:\n        return 102\n    elif n == 104:\n        return 103\n    elif n == 105:\n        return 104\n    elif n == 106:\n        return 105\n    elif n == 107:\n        return 106\n    elif n == 108:\n        return 107\n    elif n == 109:\n        return 108\n    elif n == 110:\n        return 109\n    elif n == 111:\n        return 110\n    elif n == 112:\n        return 111\n    elif n == 113:\n        return 112\n    elif n == 114:\n        return 113\n    elif n == 115:\n        return 114\n    elif n == 116:\n        return 115\n    elif n == 117:\n        return 116\n    elif n == 118:\n        return 117\n    elif n == 119:\n        return 118\n    elif n == 120:\n        return 119\n    elif n == 121:\n        return 120\n    elif n == 122:\n        return 121\n    elif n == 123:\n        return 122\n    elif n == 124:\n        return 123\n    elif n == 125:\n        return 124\n    elif n == 126:\n        return 125\n    elif n == 127:\n        return 126\n    elif n == 128:\n        return 127\n    elif n == 129:\n        return 128\n    elif n == 130:\n        return 129\n    elif n == 131:\n        return 130\n    elif n == 132:\n        return 131\n    elif n == 133:\n        return 132\n    elif n == 134:\n        return 133\n    elif n == 135:\n        return 134\n    elif n == 136:\n        return 135\n    elif n == 137:\n        return 136\n    elif n == 138:\n        return 137\n    elif n == 139:\n        return 138\n    elif n == 140:\n        return 139\n    elif n == 141:\n        return 140\n    elif n == 142:\n        return 141\n    elif n == 143:\n        return 142\n    elif n == 144:\n        return 143\n    elif n == 145:\n        return 144\n    elif n == 146:\n        return 145\n    elif n == 147:\n        return 146\n    elif n == 148:\n        return 147\n    elif n == 149:\n        return 148\n    elif n == 150:\n        return 149\n    elif n == 151:\n        return 150\n    elif n == 152:\n        return 151\n    elif n == 153:\n        return 152\n    elif n == 154"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return (n // math.gcd(n, factors[0])) - 1 \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(math.sqrt(n))\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    t = math.ceil(n/10)\n    if t > 0:\n        for i in range(t):\n            if n%10 == 0:\n                return t-i\n    return -1\ndef count_pairs(n):\n    '''\n    Write a python function to count the number of pairs of 2 digits in n.\n    https://www.geeksforgeeks.org/count-pairs-2-digits-n/\n    '''\n    i = 0\n    while i < n:\n        if n%10 == i%10:\n            i += 1\n            if i == n//10:\n                return i\n        else:\n            i+=1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n==0):\n        return 0\n    else:\n        for i in range(2, n+1):\n            if(n%i==0):\n                return find_Index(i)+1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Implement the code here\n    if n<=0:\n        return -1\n    k=n//10\n    #print(n)\n    #print(k)\n    #print(n%10)\n    #print(k)\n    if k==0:\n        return int(n%10)\n    else:\n        if n%k==0:\n            return int(n//k)\n        else:\n            return int(n//k+1)\n    \ndef get_sum(n):\n    '''\n    Write a python function to sum all the digits in a number. https://www.geeksforgeeks.org/sum-of-all-the-digits-of-a-number/\n    '''\n    # Implement the code here\n    sum=0\n    for i in str(n):\n        sum+=int(i)\n    return sum\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tuple_list = list(test_tup)\n    # print(tuple_list)\n    pair_dictionary = {}\n    for index in range(len(tuple_list) - 1):\n        pair_dictionary[tuple_list[index]] = tuple_list[index + 1]\n    return pair_dictionary"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print('\\nTUPLE TO DICTIONARY:')\n    d = dict()\n    for i in range(len(test_tup)):\n        d[test_tup[i][0]] = test_tup[i][1]\n    print(d)\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for index, value in enumerate(test_tup):\n        new_dict[value] = index\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for x, y in test_tup:\n        dct[x] = y\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in test_tup:\n        result[i] = test_tup.index(i)\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return_dict = {}\n    for k, v in test_tup:\n        return_dict[k] = v\n    return return_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out = {}\n    for i in range(len(test_tup)):\n        out[test_tup[i]] = test_tup[(i+1) % len(test_tup)]\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for ele in test_tup:\n        d[ele] = test_tup.index(ele)\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # assume that tuples are immutable\n    # this is the only place to take the values\n    # this function does not return the values\n    # it only returns the key-value pairs.\n    # use the zip function to generate the key-value pairs\n    # you can use any other type of tuple conversion\n    # eg. a tuple is a tuple of 1 element and 2 element\n    # keys are the values of the tuple and values are the adjacent elements\n    # this function is called tuple_to_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dict = {}\n    for idx in range(len(test_tup)):\n        if idx == 0:\n            tup_dict[test_tup[idx]] = test_tup[idx + 1]\n        else:\n            tup_dict[test_tup[idx]] = test_tup[idx + 1]\n    return tup_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    letters = list(s)\n    print(letters)\n    for i in letters :\n        print(letters)\n        print(i)\n    print(all(letters))\n    print('\\n')\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = len(s)\n    for i in range(0,l):\n        for j in range(0,l-i):\n            if s[j] == s[j+i]:\n                print(False)\n                return False\n    print(True)\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if (char.isalpha()) and (char.isalpha()) :\n            if char in list(char_dict.keys()) :\n                print(char_dict[char])\n            else :\n                print(char)\n        else :\n            print(char)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if char == s[0] :\n            continue\n        if char == s[len(s)-1] :\n            continue\n        if char in s :\n            continue\n        else :\n            return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.lower()\n    for i in range(0, len(s), 1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    #Create a empty dictionary called characters_dict\n    characters_dict = {}\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = []\n    for i in range(len(s)) :\n        char.append(s[i])\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    n = len(s)\n    for i in range(n) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = side * 0.25\n    return side * 4 * side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    tetra_side = side ** 2\n    if tetra_side == 0:\n        return 0\n    else:\n        return tetra_side * 4 / 3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'c':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 4))\n    if side =='s':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'l':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 4))\n    if side == 'q':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'n':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'd':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'p':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'n_2':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'd_2':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'p_2':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'n_3':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'd_3':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'n_4':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2))\n    if side == 'd_4':\n        return 4 * (math.pi * math.pow(2, -1) * math.pow(math.sin(math.pi * math.pi / 3.0), 3) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi / 3.0), 2) * math.pow(math.sin(math.pi * math.pi "
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side==0:\n        return 0\n    elif side==1:\n        return math.sqrt(4.0)\n    elif side==2:\n        return 6\n    else:\n        return (math.sqrt(8.0) + math.sqrt(5.0))/2\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side * (side + 1)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side**2\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(side**3*(side-1))*side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'long':\n        side_l = 0.5\n        side_u = 1.5\n        side_t = 1.5\n        side_r = 1.5\n    elif side =='short':\n        side_l = 0.5\n        side_u = 0.5\n        side_t = 0.5\n        side_r = 0.5\n    elif side =='middle':\n        side_l = 0.5\n        side_u = 1.5\n        side_t = 1.5\n        side_r = 1.5\n    elif side =='square':\n        side_l = 0.5\n        side_u = 0.5\n        side_t = 1.5\n        side_r = 1.5\n    else:\n        side_l = 0.5\n        side_u = 0.5\n        side_t = 0.5\n        side_r = 0.5\n    return (4 * side_l * side_r * side_t) ** 0.5\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side*(side-1)/2\n    c = side*(side-1)/4\n    if b<a and c<a:\n        return (4*side*math.pi)**0.5\n    elif b>a and c<a:\n        return (4*side*math.pi)**0.5+math.sqrt((a-b)**2+c**2)\n    elif b>a and c>a:\n        return (4*side*math.pi)**0.5+math.sqrt((a-b)**2+c**2)+(a+b)/2\n    else:\n        return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    r1 = side / 2\n    r2 = 2 * r1\n    r3 = 3 * r1\n    r4 = 4 * r1\n    r5 = 5 * r1\n    r6 = 6 * r1\n    r7 = 7 * r1\n    a1 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a2 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a3 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a4 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a5 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a6 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a7 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a8 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a9 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a10 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a11 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a12 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a13 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a14 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a15 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a16 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a17 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a18 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a19 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a20 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a21 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a22 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a23 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a24 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a25 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a26 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a27 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a28 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a29 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a30 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a31 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a32 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a33 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a34 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a35 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a36 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a37 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a38 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a39 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a40 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a41 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a42 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a43 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a44 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a45 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a46 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a47 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a48 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a49 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a50 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a51 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a52 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a53 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a54 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a55 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a56 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a57 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a58 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a59 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a60 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a61 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a62 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a63 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a64 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + r4 ** 2)\n    a65 = math.sqrt(r1 ** 2 + r2 ** 2 + r3 ** 2 + "
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # code to rotate the list\n    n = len(list)\n    for i in range(n//2):\n        # assign the first element of the list\n        # to the list element at the\n        # middle position (n//2)\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    n = len(list)\n    for i in range(n):\n        new_list.append(list[n-1-i])\n    list.clear()\n    list.append(new_list)\n    \n    #new_list.reverse()\n    return new_list\n        \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    new_list = []\n    n = len(list)\n    for i in range(n):\n        new_list.append(list[n-1-i])\n    list.clear()\n    list.append(new_list)\n    \n    #new_list.reverse()\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n-1, -1, -1):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    for i in range(n-1, -1, -1):\n        list[i], list[i+1] = list[i+1], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # 1) initialize the list\n    l = list\n    # 2) find the length of the list\n    n = len(l)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Write your code here\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(m)\n    \n    # create new list with the index value\n    list_ = []\n    \n    # change the index value of the list\n    for i in range(len(list)):\n        list_[i] = list[i]\n    \n    # remove the item at the end of the list\n    list.pop()\n    \n    # create new list with the index value\n    for i in range(len(list_)):\n        # change the index value of the list\n        list_[i] = list_[i]\n        \n        # swap the first and the last item of the list\n        if i == 0:\n            temp = list[0]\n            list[0] = list_[i]\n            list[i] = temp\n    \n    print(\"\\n\")\n    \n    # return the list\n    return list\n    \n    "
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = len(list)\n    list_reverse = list[:]\n    i = 0\n    while i < m:\n        list_reverse[i + m] = list_reverse[i]\n        i += 1\n    return list_reverse\n        \n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    m = len(list)\n    list_reverse = list[:]\n    i = 0\n    while i < m:\n        list_reverse[i + m - 1] = list_reverse[i]\n        i += 1\n    return list_reverse\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #declaration of the function\n    def rotate_right(list,m):\n        #declaration of an empty array\n        final_list = []\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    i = 0\n    while i < n - m:\n        list[i:i+m] = list[i:i+m][::-1]\n        i += m\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    k = len(list)\n    l = []\n    for i in range(k):\n        l.append(list[i])\n        list.pop()\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    try:\n        tup = tuple(test_tup)\n    except TypeError:\n        return False\n    return tup!= ()\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i!= None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if tuple(test_tup) == (None, None):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for el in test_tup:\n        if el is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return len(test_tup)>0\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup[i] is None for i in range(len(test_tup)))\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_prime(n):\n        if n==2:\n            return True\n        if n==3 or n==4:\n            return False\n        if n%2==0:\n            return False\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\n    if startnum==endnum:\n        return [startnum]\n    if startnum>endnum:\n        return []\n    if startnum==0:\n        return [1]\n    if endnum==0:\n        return [0]\n    if startnum==endnum:\n        return []\n    for i in range(startnum,endnum):\n        if is_prime(i):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    def is_prime(x):\n        divisors = [2,3,5,7,9,11]\n        if x in divisors:\n            return True\n        else:\n            return False\n    def divisible_by_digits(startnum, endnum, divisors):\n        startnum = int(startnum)\n        endnum = int(endnum)\n        divisors = int(divisors)\n        for i in range(startnum, endnum+1):\n            if is_prime(i):\n                if i%divisors==0:\n                    return i\n        return None\n    return divisible_by_digits(startnum, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # TODO: Write your code here\n    return\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # define a function that takes a range and returns a list of the numbers in that range\n    def divisible_by(num):\n        # define a list of all numbers that are divisible by a number\n        divisible = []\n        # for each number in num, check if it is divisible by num. If it is, append it to divisible\n        for num in range(num, endnum+1):\n            if num%num == 0:\n                divisible.append(num)\n        # return the list of numbers\n        return divisible\n    # define a function that returns a list of all numbers that are divisible by the given digits, e.g. ['2', '7', '4', '8']\n    def divisible_by_digits(startnum, endnum):\n        # define a list of all numbers that are divisible by each digit in the given range\n        divisible = []\n        # for each digit, check if it is divisible by the given number. If it is, append it to divisible\n        for num in range(len(startnum)):\n            if startnum[num]%num == 0:\n                divisible.append(startnum[num])\n        # return the list of numbers\n        return divisible\n    # return the list of all numbers that are divisible by the given digits\n    return divisible_by_digits(startnum, endnum)\n    \n    \n    \n    # function to test whether a number is within the given range\n    def within_range(startnum, endnum):\n        '''\n        Write a function to test whether a number is within the given range.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-25.php\n        '''\n        # define a function that takes an argument and returns True if the argument is within the given range, otherwise False\n        def is_within_range(numer):\n            if numer>startnum and numer<=endnum:\n                return True\n            else:\n                return False\n        # define a function that returns the result of the function is_within_range\n        def is_within_range_function(numer):\n            return is_within_range(numer)\n        # return the function is_within_range_function\n        return is_within_range_function\n    \n    \n    # function to test whether a number is an odd number\n    def odd_number(startnum):\n        '''\n        Write a function to test whether a number is an odd number.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-26.php\n        '''\n        # define a function that takes a range and returns True if the argument is an odd number, otherwise False\n        def is_odd(numer):\n            if numer%2!= 0:\n                return True\n            else:\n                return False\n        # define a function that returns the result of the function is_odd\n        def is_odd_function(numer):\n            return is_odd(numer)\n        # return the function is_odd_function\n        return is_odd_function\n    \n    \n    # function to test whether a number is a multiple of 7\n    def multiple_of_7(startnum):\n        '''\n        Write a function to test whether a number is a multiple of 7.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-27.php\n        '''\n        # define a function that takes a range and returns True if the argument is a multiple of 7, otherwise False\n        def multiple_of_7(numer):\n            if numer%7 == 0:\n                return True\n            else:\n                return False\n        # define a function that returns the result of the function multiple_of_7\n        def multiple_of_7_function(numer):\n            return multiple_of_7(numer)\n        # return the function multiple_of_7_function\n        return multiple_of_7_function\n    \n    \n    # function to test whether a number is a multiple of 3\n    def multiple_of_3(startnum):\n        '''\n        Write a function to test whether a number is a multiple of 3.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-28.php\n        '''\n        # define a function that takes a range and returns True if the argument is a multiple of 3, otherwise False\n        def multiple_of_3(numer):\n            if numer%3 == 0:\n                return True\n            else:\n                return False\n        # define a function that returns the result of the function multiple_of_3\n        def multiple_of_3_function(numer):\n            return multiple_of_3(numer)\n        # return the function multiple_of_3_function\n        return multiple_of_3_function\n    \n    \n    # function to test whether a number is a multiple of 5\n    def multiple_of_5(startnum):\n        '''\n        Write a function to test whether a number is a multiple of 5.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-29.php\n        '''\n        # define a function that takes a range and returns True if the argument is a multiple of 5, otherwise False\n        def multiple_of_5(numer):\n            if numer%5 == 0:\n                return True\n            else:\n                return False\n        # define a function that returns the result of the function multiple_of_5\n        def multiple_of_5_function(numer):\n            return multiple_of_5(numer)\n        # return the function multiple_of_5_function\n        return multiple_of_5_function\n    \n    \n    # function to test whether a number is a multiple of 3 and 5\n    def multiple_of_7_and_5(startnum):\n        '''\n        Write a function to test whether a number is a multiple of 7 and 5.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-30.php\n        '''\n        # define a function that takes a range and returns True if the argument is a multiple of 7 and 5, otherwise False\n        def multiple_of_7_and_5(numer):\n            if numer%7 == 0 and numer%5 == 0:\n                return True\n            else:\n                return False\n        # define a function that returns the result of the function multiple_of_7_and_5\n        def multiple_of_7_and_5_function(numer):\n            return multiple_of_7_and_5(numer)\n        # return the function multiple_of_7_and_5_function\n        return multiple_of_7_and_5_function\n    \n    \n    # function to test whether a number is a multiple of 3 and 7\n    def multiple_of_3_and_7(startnum):\n        '''\n        Write a function to test whether a number is a multiple of 3 and 7.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-31.php\n        '''\n        # define a function that takes a range and returns True if the argument is a multiple of 3 and 7, otherwise False\n        def multiple_of_3_and_7(numer):\n            if numer%3 == 0 and numer%7 == 0:\n                return True\n            else:\n                return False\n        # define a function that returns the result of the function multiple_of_3_and_7\n        def multiple_of_3_and_7_function(numer):\n            return multiple_of_3_and_7(numer)\n        # return the function multiple_of_3_and_7_function\n        return multiple_of_3_and_7_function\n    \n    \n    # function to test whether a number is a multiple of 7\n    def multiple_of_7(startnum):\n        '''\n        Write a function to test whether a number is a multiple of 7.\n        https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-32.php\n        '''\n        # define a function that takes a range and returns True if the argument is a multiple of 7, otherwise False\n        def multiple_of_7(numer):\n            i"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    nums = []\n    if endnum < startnum:\n        print(\"Ending number should be greater than beginning number\")\n        return\n    \n    for i in range(startnum, endnum + 1):\n        if i % 10 == 0:\n            nums.append(i)\n    return nums\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # initialize number list to empty\n    num_list = []\n    \n    # set startnum and endnum to a fixed value\n    startnum = startnum\n    endnum = endnum\n    \n    # iterate through numbers\n    while startnum <= endnum:\n        # check if startnum is divisible by every digit\n        for i in range(0, 10):\n            if startnum % 10 == i:\n                num_list.append(i)\n        # increment startnum by every digit\n        startnum += 1\n        \n    # return the list\n    return num_list\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #This function checks if the given input is a number that divisible by every digit it contains\n    def divisible_by_digit(num, digits):\n        return num % int(str(digits) + str(num//int(str(digits)))) == 0\n    #This function checks if the given input is a number that is divisible by every digit it contains\n    def divisible_by_all(num, digits):\n        return (int(str(num) + str(digits)) % int(str(digits) + str(num//int(str(digits))))) == 0\n    #This function checks if the given input is a number that is divisible by every digit it contains\n    def divisible_by_all_3(num, digits):\n        return (int(str(num) + str(digits) + str(num//int(str(digits) + str(num//int(str(digits) + str(num//int(str(digits) + str(num//int(str(digits) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + str(num//int(str(num) + st"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(num):\n        div = []\n        for i in range(1, num):\n            if num % i == 0:\n                div.append(i)\n        return div\n    '''\n    Write a function that takes in two numbers and returns the sum of those two numbers.\n    '''\n    def sum_of_two_numbers(a, b):\n        return a + b\n    '''\n    Write a function that takes a list and returns the smallest number in the list.\n    '''\n    def smallest_number(lst):\n        return min(lst)\n    '''\n    Write a function that takes a list and returns the smallest number in the list.\n    '''\n    def smallest_number_in_list(lst):\n        return min(lst)\n    '''\n    Write a function that takes a list and returns the largest number in the list.\n    '''\n    def largest_number(lst):\n        return max(lst)\n    '''\n    Write a function that takes a list and returns the largest number in the list.\n    '''\n    def largest_number_in_list(lst):\n        return max(lst)\n    '''\n    Write a function that takes a list and returns the average of the numbers in the list.\n    '''\n    def average(lst):\n        avg = sum(lst)/len(lst)\n        return avg\n    '''\n    Write a function that takes a list and returns the median number of the list.\n    '''\n    def median(lst):\n        sorted_lst = sorted(lst)\n        if len(lst) % 2 == 0:\n            median = (sorted_lst[len(lst)//2-1]+sorted_lst[len(lst)//2])/2\n        else:\n            median = sorted_lst[len(lst)//2]\n        return median\n    '''\n    Write a function that takes a list and returns the largest number in the list.\n    '''\n    def largest_number(lst):\n        return max(lst)\n    '''\n    Write a function that takes a list and returns the smallest number in the list.\n    '''\n    def smallest_number(lst):\n        return min(lst)\n    '''\n    Write a function that takes a list and returns the number of even numbers in the list.\n    '''\n    def even_number(lst):\n        return len([i for i in lst if i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of even numbers in the list.\n    '''\n    def even_number_in_list(lst):\n        return len([i for i in lst if i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of odd numbers in the list.\n    '''\n    def odd_number(lst):\n        return len([i for i in lst if not i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of odd numbers in the list.\n    '''\n    def odd_number_in_list(lst):\n        return len([i for i in lst if not i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the length of the list.\n    '''\n    def length_of_list(lst):\n        return len(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the average of the numbers in the list.\n    '''\n    def average(lst):\n        return sum(lst)/len(lst)\n    '''\n    Write a function that takes a list and returns the median number of the list.\n    '''\n    def median(lst):\n        sorted_lst = sorted(lst)\n        if len(lst) % 2 == 0:\n            median = (sorted_lst[len(lst)//2-1]+sorted_lst[len(lst)//2])/2\n        else:\n            median = sorted_lst[len(lst)//2]\n        return median\n    '''\n    Write a function that takes a list and returns the number of odd numbers in the list.\n    '''\n    def odd_number(lst):\n        return len([i for i in lst if not i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of even numbers in the list.\n    '''\n    def even_number(lst):\n        return len([i for i in lst if not i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of odd numbers in the list.\n    '''\n    def odd_number_in_list(lst):\n        return len([i for i in lst if not i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of odd numbers in the list.\n    '''\n    def odd_number_in_list(lst):\n        return len([i for i in lst if not i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of even numbers in the list.\n    '''\n    def even_number(lst):\n        return len([i for i in lst if i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of even numbers in the list.\n    '''\n    def even_number_in_list(lst):\n        return len([i for i in lst if i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the number of even numbers in the list.\n    '''\n    def even_number_in_list(lst):\n        return len([i for i in lst if i % 2 == 0])\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    def sum_of_list_in_list(lst):\n        return sum(lst)\n    '''\n    Write a function that takes a list and returns the length of the list.\n    ''"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"Starting range: {} - {}\".format(startnum, endnum))\n    \n    #define the range of numbers\n    start = startnum\n    end = endnum\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(\"Divisible by digits in range\",startnum,\"to\",endnum,\":\")\n    \n    def is_divisible_by_digit(x):\n        return x % 10 == 0\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = a*math.pi/180\n    # print(\"a\",a)\n    \n    if(r<=1):\n        return None\n    if(r>=2):\n        return(r*math.sin(a))\n    if(r==3):\n        return(math.pi/2)\n    elif(r==4):\n        return(0.5*math.pi)\n    elif(r==5):\n        return(1.5*math.pi)\n    elif(r==6):\n        return(2*math.pi)\n    elif(r==7):\n        return(3*math.pi)\n    elif(r==8):\n        return(4*math.pi)\n    elif(r==9):\n        return(5*math.pi)\n    elif(r==10):\n        return(6*math.pi)\n    elif(r==11):\n        return(7*math.pi)\n    elif(r==12):\n        return(8*math.pi)\n    elif(r==13):\n        return(9*math.pi)\n    elif(r==14):\n        return(10*math.pi)\n    elif(r==15):\n        return(11*math.pi)\n    elif(r==16):\n        return(12*math.pi)\n    elif(r==17):\n        return(13*math.pi)\n    elif(r==18):\n        return(14*math.pi)\n    elif(r==19):\n        return(15*math.pi)\n    elif(r==20):\n        return(16*math.pi)\n    elif(r==21):\n        return(17*math.pi)\n    elif(r==22):\n        return(18*math.pi)\n    elif(r==23):\n        return(19*math.pi)\n    elif(r==24):\n        return(20*math.pi)\n    elif(r==25):\n        return(21*math.pi)\n    elif(r==26):\n        return(22*math.pi)\n    elif(r==27):\n        return(23*math.pi)\n    elif(r==28):\n        return(24*math.pi)\n    elif(r==29):\n        return(25*math.pi)\n    elif(r==30):\n        return(26*math.pi)\n    elif(r==31):\n        return(27*math.pi)\n    elif(r==32):\n        return(28*math.pi)\n    elif(r==33):\n        return(29*math.pi)\n    elif(r==34):\n        return(30*math.pi)\n    elif(r==35):\n        return(31*math.pi)\n    elif(r==36):\n        return(32*math.pi)\n    elif(r==37):\n        return(33*math.pi)\n    elif(r==38):\n        return(34*math.pi)\n    elif(r==39):\n        return(35*math.pi)\n    elif(r==40):\n        return(36*math.pi)\n    elif(r==41):\n        return(37*math.pi)\n    elif(r==42):\n        return(38*math.pi)\n    elif(r==43):\n        return(39*math.pi)\n    elif(r==44):\n        return(40*math.pi)\n    elif(r==45):\n        return(41*math.pi)\n    elif(r==46):\n        return(42*math.pi)\n    elif(r==47):\n        return(43*math.pi)\n    elif(r==48):\n        return(44*math.pi)\n    elif(r==49):\n        return(45*math.pi)\n    elif(r==50):\n        return(46*math.pi)\n    elif(r==51):\n        return(47*math.pi)\n    elif(r==52):\n        return(48*math.pi)\n    elif(r==53):\n        return(49*math.pi)\n    elif(r==54):\n        return(50*math.pi)\n    elif(r==55):\n        return(51*math.pi)\n    elif(r==56):\n        return(52*math.pi)\n    elif(r==57):\n        return(53*math.pi)\n    elif(r==58):\n        return(54*math.pi)\n    elif(r==59):\n        return(55*math.pi)\n    elif(r==60):\n        return(56*math.pi)\n    elif(r==61):\n        return(57*math.pi)\n    elif(r==62):\n        return(58*math.pi)\n    elif(r==63):\n        return(59*math.pi)\n    elif(r==64):\n        return(60*math.pi)\n    elif(r==65):\n        return(61*math.pi)\n    elif(r==66):\n        return(62*math.pi)\n    elif(r==67):\n        return(63*math.pi)\n    elif(r==68):\n        return(64*math.pi)\n    elif(r==69):\n        return(65*math.pi)\n    elif(r==70):\n        return(66*math.pi)\n    elif(r==71):\n        return(67*math.pi)\n    elif(r==72):\n        return(68*math.pi)\n    elif(r==73):\n        return(69*math.pi)\n    elif(r==74):\n        return(70*math.pi)\n    elif(r==75):\n        return(71*math.pi)\n    elif(r==76):\n        return(72*math.pi)\n    elif(r==77):\n        return(73*math.pi)\n    elif(r==78):\n        return(74*math.pi)\n    elif(r==79):\n        return(75*math.pi)\n    elif(r==80):\n        return(76*math.pi)\n    elif(r==81):\n        return(77*math.pi)\n    elif(r==82):\n        return(78*math.pi)\n    elif(r==83):\n        return(79*math.pi)\n    elif(r==84):\n        return(80*math.pi)\n    elif(r==85):\n        return(81*math.pi)\n    elif(r==86):\n        return(82*math.pi)\n    elif(r==87):\n        return(83*math.pi)\n    elif(r==88):\n        return(84*math.pi)\n    elif(r==89):\n        return(85*math.pi)\n    elif(r==90):\n        return(86*math.pi)\n    elif(r==91):\n        return(87*math.pi)\n    elif(r==92):\n        return(88*math.pi)\n    elif(r==93):\n        return(89*math.pi)\n    elif(r==94):\n        return(90*math.pi)\n    elif(r==95):\n        return(91*math.pi)\n    elif(r==96):\n        return(92*math.pi)\n    elif(r==97):\n        return(93*math.pi)\n    elif(r==98):\n        return(94*math.pi)\n    elif(r==99):\n        return(95*math.pi)\n    elif(r==100):\n        return(96*math.pi)\n    elif(r==101):\n        return(97*math.pi)\n    elif(r==102):\n        return(98*math.pi)\n    elif(r==103):\n        return(99*math.pi)\n    elif(r==104):\n        return(100"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if math.degrees(a)>180:\n        a=360-a\n    if math.degrees(a)<0:\n        a=360+a\n    if r<=0:\n        return None\n    elif (r>3.14159)and (r<=5.0):\n        return math.pi*(1.0/3)*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(a))\n    elif (r>5.0)and (r<=7.0):\n        return 4.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(a))\n    elif (r>7.0)and (r<=10.0):\n        return 8.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(a))\n    elif (r>10.0)and (r<=14.0):\n        return 10.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(a))\n    else:\n        return None\n    \ndef find_sector_area(r,angle):\n    '''\n    Function to calculate the sector area given the radius and angle.\n    '''\n    if angle<0:\n        angle=360+angle\n    if angle<0:\n        angle=360+angle\n    if math.degrees(angle)>180:\n        angle=360-angle\n    if r<=0:\n        return None\n    elif (r>3.14159)and (r<=5.0):\n        return math.pi*(1.0/3)*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(angle))\n    elif (r>5.0)and (r<=7.0):\n        return 4.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(angle))\n    elif (r>7.0)and (r<=10.0):\n        return 8.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(angle))\n    elif (r>10.0)and (r<=14.0):\n        return 10.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(angle))\n    elif (r>14.0)and (r<=16.0):\n        return 5.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(angle))\n    elif (r>16.0)and (r<=20.0):\n        return 5.0*math.pi*(r*r-1.0)*(r*r-1.0)*math.sin(math.radians(angle))\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle=360/a\n    if angle > 180:\n        angle=angle%180\n    area=r**2\n    area*=math.cos(math.radians(angle))\n    area*=math.sin(math.radians(angle))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # YOUR CODE HERE\n    \n    pass\ndef sector_area2(r,a):\n    '''\n    Write a function to calculate the area of a sector. The function takes the radius as inputs.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = math.pi*math.pow(r,2)*math.sin(a/180*math.pi)\n    return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    t = math.tan(math.radians(a))\n    if t >= 0:\n        return(4 * r ** 2 * math.pi) * (1 - t * (1 + t * t) / 2)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a == 0:\n        return 0\n    if a % 180 == 90:\n        return (r ** 2 * math.pi * (1 - math.tan(math.radians(90)) ** 2))\n    elif a % 180 == 180:\n        return (r ** 2 * math.pi * (1 - math.tan(math.radians(90) + math.pi / 2)) ** 2)\n    elif a % 180 == 180 + 90:\n        return (r ** 2 * math.pi * (1 - math.tan(math.radians(90)) ** 2) ** 2)\n    elif a % 180 == 180 + 90 + 180:\n        return (r ** 2 * math.pi * (1 - math.tan(math.radians(90) + math.pi / 2)) ** 2) ** 2\n    elif a % 180 == 180 + 90 + 180 + 180:\n        return (r ** 2 * math.pi * (1 - math.tan(math.radians(90) + math.pi / 2) ** 2) ** 2) ** 2\n    elif a % 180 == 180 + 90 + 180 + 180 + 180:\n        return (r ** 2 * math.pi * (1 - math.tan(math.radians(90) + math.pi / 2) ** 2) ** 2) ** 2\n    else:\n        return 0\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # first determine the area of the circle\n    return math.pi*(r**2)*a\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<=0.1 or a<=0.1:\n        return None\n    if r<=1.2 or a<=0.1:\n        return None\n    if r>1.1 or a<=0.1:\n        return None\n    if a>=0.1:\n        return None\n    s = math.sin(math.radians(a))\n    c = math.cos(math.radians(a))\n    r1 = math.sqrt(1-s**2)\n    r2 = math.sqrt(1-c**2)\n    if r2==0.0:\n        a2 = a\n    else:\n        a2 = math.asin(s/r2)\n    rad = 2*r*math.pi/360\n    return r1*r2*(a2-a)*math.cos(rad)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r*r) + (a*a) > (2*r*a)**(1/2):\n        print \"ERROR: Sector angles are larger than 360 degrees\"\n        return None\n    else:\n        return math.pi*r*r*a**(-1.0/2)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(X, Y, Z): \n        if (not X) or (not Y) or (not Z): \n            return 0\n        if (X, Y, Z) in memo: \n            return memo[(X, Y, Z)] \n        # base case \n        if X == Y == Z: \n            memo[(X, Y, Z)] = 1 + lcs(X[1:-1], Y[1:-1], Z[1:-1]) \n            return memo[(X, Y, Z)] \n        # recursive case \n        m = lcs(X, Y, Z) \n        memo[(X, Y, Z)] = m \n        return m \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    m_b = len(Z)\n    n_b = len(Y)\n    i = j = 0\n    j_b = 0\n    result = \"\"\n    while (i < m and j < n):\n        if X[i] == Y[j]:\n            result += X[i]\n            i += 1\n            j += 1\n        elif Z[j_b] == Y[j]:\n            j_b += 1\n            i += 1\n        else:\n            result = result + Z[j_b]\n            j_b += 1\n            i += 1\n    while j < n_b:\n        result = result + Z[j_b]\n        j_b += 1\n    return result\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return longest_common_subsequence(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    m = len(Z)\n    if n < m:\n        return lcs_of_three(Z, Y, X)\n    elif n == m:\n        return max(X + Y + Z, key=len)\n    elif n > m:\n        return lcs_of_three(X, Z, Y)\n    else:\n        return (m - n)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # code here\n    X = X.lower()\n    Y = Y.lower()\n    Z = Z.lower()\n    m = len(X)\n    n = len(Y)\n    z = len(Z)\n    visited = [[0 for i in range(n + 1)] for j in range(m + 1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #declaration of variables\n    n = len(X) #length of X\n    m = len(Y) #length of Y\n    c = len(Z) #length of Z\n    #initialisation of the maximum length of the subsequence\n    l = 0\n    #for loop to iterate over X\n    for i in range(n):\n        #for loop to iterate over Y\n        for j in range(m):\n            #for loop to iterate over Z\n            for k in range(c):\n                #to store the indices of the elements in the subsequence\n                #l = 0\n                #if there are no consecutive characters\n                if(l < len(X[i]) and l < len(Y[j]) and l < len(Z[k])):\n                    #if there is a value\n                    #if it is the value of the subsequence\n                    #then update the value of the subsequence to be the first value in the subsequence\n                    if(X[i][l] == Y[j][l] == Z[k][l]):\n                        #l += 1\n                        #if it is the value of the subsequence\n                        #then update the value of the subsequence to be the second value in the subsequence\n                        if(X[i][l] == Y[j][l] and X[i][l] == Z[k][l]):\n                            #l += 1\n                            #if it is the value of the subsequence\n                            #then update the value of the subsequence to be the third value in the subsequence\n                            if(X[i][l] == Y[j][l] and X[i][l] == Z[k][l]):\n                                l += 1\n    #returning the longest common subsequence\n    return l\n    #return max(l,len(X[i])+len(Y[j])+len(Z[k])-l)\n    #return l\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z): return -1\n    if len(Y) < len(Z): return lcs_of_three(Z, Y, X)\n    if len(Z) < len(X): return lcs_of_three(X, Z, Y)\n    if len(X) == len(Z): return len(X)\n    if len(Y) == len(Z): return len(Y)\n    \n    '''\n    - Input: X = \"abcde\", Y = \"bccca\", Z = \"def\"\n    - Output: 4\n    - Explanation: Longest common subsequence of X,Y,Z is \"abcde\", \"bccca\", \"def\"\n    '''\n    \n    def lcs_of_three(X, Y, Z):\n        \n        x_dict = {}\n        y_dict = {}\n        z_dict = {}\n        x_dict[0] = [0 for _ in range(len(X))]\n        y_dict[0] = [0 for _ in range(len(Y))]\n        z_dict[0] = [0 for _ in range(len(Z))]\n        x_dict[1] = [0 for _ in range(len(X))]\n        y_dict[1] = [0 for _ in range(len(Y))]\n        z_dict[1] = [0 for _ in range(len(Z))]\n        \n        for i in range(2, len(X) + 1):\n            \n            for j in range(2, len(Y) + 1):\n                \n                if X[i - 2] == Y[j - 2]:\n                    \n                    if X[i - 1] == Z[j - 1]:\n                        \n                        x_dict[i][j] = max(x_dict[i - 2][j - 1] + 1, \n                                        x_dict[i - 2][j - 1])\n                        y_dict[i][j] = max(y_dict[i - 2][j - 1] + 1, \n                                        y_dict[i - 2][j - 1])\n                        z_dict[i][j] = max(z_dict[i - 2][j - 1] + 1, \n                                        z_dict[i - 2][j - 1])\n                        \n                    else:\n                        x_dict[i][j] = max(x_dict[i - 2][j - 1] + 1, \n                                        x_dict[i - 2][j - 1])\n                        y_dict[i][j] = max(y_dict[i - 2][j - 1] + 1, \n                                        y_dict[i - 2][j - 1])\n                        z_dict[i][j] = max(z_dict[i - 2][j - 1] + 1, \n                                        z_dict[i - 2][j - 1])\n                else:\n                    \n                    x_dict[i][j] = max(x_dict[i - 2][j - 1] + 1, \n                                        x_dict[i - 2][j - 1])\n                    y_dict[i][j] = max(y_dict[i - 2][j - 1] + 1, \n                                        y_dict[i - 2][j - 1])\n                    z_dict[i][j] = max(z_dict[i - 2][j - 1] + 1, \n                                        z_dict[i - 2][j - 1])\n        \n        return max(x_dict[len(X)][len(Y)], \n                  y_dict[len(Y)][len(Z)], \n                  z_dict[len(Z)][len(X)])\n    \n    return lcs_of_three(X, Y, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = sorted(X)\n    Y = sorted(Y)\n    Z = sorted(Z)\n    \n    # Set of characters to check in this new array \n    l = []\n    # Track the best possible index for each char \n    i = j = 0 \n    # Length of this array \n    m = len(X) \n    # Maximum length of the subsequence \n    n = len(Y) \n    \n    # Populate the array with zeros \n    l.append(0) \n    # Track the index of the first occurrence of the char \n    i = 0 \n    # While the index of the char is less or equal to the last index \n    # of the array \n    while (i < m): \n        # if there is no previous index \n        if l[i] == 0: \n            # if there is no previous char \n            if l[j] == 0: \n                # then make the last char of the subsequence 0 \n                l[i] = 0\n                # update the index \n                i += 1 \n            # else if the previous char is not 0 \n            else: \n                # then check if the previous char is in the array \n                # or not \n                if l[i] == l[j] or X[l[i]] == Z[l[j]]: \n                    # if the previous char is in the array \n                    # or not \n                    l[i] = 0 \n                    # update the index \n                    i += 1 \n        # if the previous index is greater than the current index \n        elif l[i] > l[j]: \n            # update the index \n            i += 1 \n        # else the previous index is smaller than the current index \n        else: \n            # update the index \n            j += 1 \n            # check if the current index of the previous char is equal to the current index \n            # of the previous char \n            if l[i] == l[j]: \n                # if the previous char is in the array \n                # or not \n                if l[i] == l[j] or X[l[i]] == Z[l[j]]: \n                    # if the previous char is in the array \n                    # or not \n                    l[i] = 0 \n                    # update the index \n                    i += 1 \n        # If the current char is not 0 \n        if l[i] == 0: \n            # then keep taking elements from the array \n            # and increment the index \n            j = i \n            i = 0 \n    # Return the maximum length of the subsequence \n    return m + n - 2 + len(l) \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    if m < n:\n        return lcs_of_three(X, Z, m)\n    elif n < m:\n        return lcs_of_three(Y, Z, n)\n    elif o < m:\n        return lcs_of_three(X, Y, o)\n    else:\n        #print(\"lcs:\", m, n, o)\n        return [max(m, n, o)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # declare empty lists \n    LCS = [[0]*(len(Z)+1) for i in range(len(X)+1)] \n    # iterate through each position \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            # if the position is complete \n            if X[i-1] == Y[j-1]: \n                LCS[i][j] = LCS[i-1][j-1] + 1\n            # if there is no match \n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n    # return the length of LCS \n    return LCS[len(X)][len(Y)] \n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.replace(' ', '')\n    str1 = str1.replace('-', '')\n    str1 = str1.replace('.', '')\n    str1 = str1.replace('and', '')\n    str1 = str1.replace('the', '')\n    str1 = str1.replace('and','and ')\n    str1 = str1.replace('the','the ')\n    str1 = str1.replace('it','it ')\n    str1 = str1.replace('of','of ')\n    str1 = str1.replace('and','and ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this ')\n    str1 = str1.replace('this','this '"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \", \" \")\n    str1 = str1.replace(\".\", \" \")\n    str1 = str1.replace(\",\", \" \")\n    str1 = str1.replace(\"-\", \" \")\n    str1 = str1.replace(\"'\", \" \")\n    str1 = str1.replace('\"', \" \")\n    str1 = str1.replace(\"?\", \" \")\n    str1 = str1.replace(\"!\", \" \")\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.upper()\n    str1 = str1.replace(' ', '_').replace('#', '#')\n    str1 = str1.replace('#', '#')\n    str1 = str1.replace(' ', '').replace('.', '').replace('!', '').replace('?', '').replace(',', '').replace('-', '')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all non-capital letters\n    str2 = re.findall('[^a-zA-Z]',str1)\n    # all lower case letters\n    str3 = re.findall('[a-z]+',str1)\n    # all uppercase letters\n    str4 = re.findall('[A-Z]+',str1)\n    # all numeric characters\n    str5 = re.findall('\\d+',str1)\n    # all punctuation\n    str6 = re.findall('[!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~]',str1)\n    # all a-z, A-Z and digits\n    str7 = re.findall('[a-zA-Z0-9]',str1)\n    # all lowercase and uppercase\n    str8 = re.findall('[A-Z]',str1)\n    # all uppercase and numeric characters\n    str9 = re.findall('\\d',str1)\n    # all punctuation\n    str10 = re.findall('[!#$%&\\'(){}[]:;<=>?@[]~]',str1)\n    # all alphabets\n    str11 = re.findall('[a-zA-Z]',str1)\n    # all words\n    str12 = re.findall('[A-Za-z]+',str1)\n    str13 = re.findall('[A-Za-z]+',str1)\n    str14 = re.findall('[A-Za-z]+',str1)\n    str15 = re.findall('[A-Za-z]+',str1)\n    str16 = re.findall('[A-Za-z]+',str1)\n    str17 = re.findall('[A-Za-z]+',str1)\n    str18 = re.findall('[A-Za-z]+',str1)\n    str19 = re.findall('[A-Za-z]+',str1)\n    str20 = re.findall('[A-Za-z]+',str1)\n    str21 = re.findall('[A-Za-z]+',str1)\n    str22 = re.findall('[A-Za-z]+',str1)\n    str23 = re.findall('[A-Za-z]+',str1)\n    str24 = re.findall('[A-Za-z]+',str1)\n    str25 = re.findall('[A-Za-z]+',str1)\n    str26 = re.findall('[A-Za-z]+',str1)\n    str27 = re.findall('[A-Za-z]+',str1)\n    str28 = re.findall('[A-Za-z]+',str1)\n    str29 = re.findall('[A-Za-z]+',str1)\n    str30 = re.findall('[A-Za-z]+',str1)\n    str31 = re.findall('[A-Za-z]+',str1)\n    str32 = re.findall('[A-Za-z]+',str1)\n    str33 = re.findall('[A-Za-z]+',str1)\n    str34 = re.findall('[A-Za-z]+',str1)\n    str35 = re.findall('[A-Za-z]+',str1)\n    str36 = re.findall('[A-Za-z]+',str1)\n    str37 = re.findall('[A-Za-z]+',str1)\n    str38 = re.findall('[A-Za-z]+',str1)\n    str39 = re.findall('[A-Za-z]+',str1)\n    str40 = re.findall('[A-Za-z]+',str1)\n    str41 = re.findall('[A-Za-z]+',str1)\n    str42 = re.findall('[A-Za-z]+',str1)\n    str43 = re.findall('[A-Za-z]+',str1)\n    str44 = re.findall('[A-Za-z]+',str1)\n    str45 = re.findall('[A-Za-z]+',str1)\n    str46 = re.findall('[A-Za-z]+',str1)\n    str47 = re.findall('[A-Za-z]+',str1)\n    str48 = re.findall('[A-Za-z]+',str1)\n    str49 = re.findall('[A-Za-z]+',str1)\n    str50 = re.findall('[A-Za-z]+',str1)\n    str51 = re.findall('[A-Za-z]+',str1)\n    str52 = re.findall('[A-Za-z]+',str1)\n    str53 = re.findall('[A-Za-z]+',str1)\n    str54 = re.findall('[A-Za-z]+',str1)\n    str55 = re.findall('[A-Za-z]+',str1)\n    str56 = re.findall('[A-Za-z]+',str1)\n    str57 = re.findall('[A-Za-z]+',str1)\n    str58 = re.findall('[A-Za-z]+',str1)\n    str59 = re.findall('[A-Za-z]+',str1)\n    str60 = re.findall('[A-Za-z]+',str1)\n    str61 = re.findall('[A-Za-z]+',str1)\n    str62 = re.findall('[A-Za-z]+',str1)\n    str63 = re.findall('[A-Za-z]+',str1)\n    str64 = re.findall('[A-Za-z]+',str1)\n    str65 = re.findall('[A-Za-z]+',str1)\n    str66 = re.findall('[A-Za-z]+',str1)\n    str67 = re.findall('[A-Za-z]+',str1)\n    str68 = re.findall('[A-Za-z]+',str1)\n    str69 = re.findall('[A-Za-z]+',str1)\n    str70 = re.findall('[A-Za-z]+',str1)\n    str71 = re.findall('[A-Za-z]+',str1)\n    str72 = re.findall('[A-Za-z]+',str1)\n    str73 = re.findall('[A-Za-z]+',str1)\n    str74 = re.findall('[A-Za-z]+',str1)\n    str75 = re.findall('[A-Za-z]+',str1)\n    str76 = re.findall('[A-Za-z]+',str1)\n    str77 = re.findall('[A-Za-z]+',str1)\n    str78 = re.findall('[A-Za-z]+',str1)\n    str79 = re.findall('[A-Za-z]+',str1)\n    str80 = re.findall('[A-Za-z]+',str1)\n    str81 = re.findall('[A-Za-z]+',str1)\n    str82 = re.findall('[A-Za-z]+',str1)\n    str83 = re.findall('[A-Za-z]+',str1)\n    str84 = re.findall('[A-Za-z]+',str1)\n    str85 = re.findall('[A-Za-z]+',str1)\n    str86 = re.findall('[A-Za-z]+',str1)\n    str87 = re.findall('[A-Za-z]+',str1)\n    str88 = re.findall('[A"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'^\\s*', \" \", str1.lower())\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a list of words\n    words = str1.split()\n    # iterate through the list and remove any word that starts with a capital letter\n    for word in words:\n        if word[0].isupper():\n            word = word[1:]\n        if word!= \"\":\n            str1 = str1.replace(word, \" \")\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # This is a sample Python script.\n    # Press Shift+F10 to execute it or replace it with your code.\n    # Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Initialize empty list \n    dic_capital = []\n    # Loop through the string \n    for word in str1.split(' '): \n        # Check if word starts with an uppercase letter \n        if word.isupper(): \n            # Check if the word is not the empty string \n            if word!= '': \n                # If so add the word to the list \n                dic_capital.append(word.lower()) \n    # Return the result \n    return''.join(dic_capital) \n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    for word in str1:\n        if word[0].isupper():\n            word=word[0]+' '+word[1:]\n        else:\n            word=word[0]+' '\n        str1.append(word)\n    return''.join(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = re.findall('[A-Z].*',str1)\n    for i in range(len(res)):\n        for j in range(len(res[i])):\n            if res[i][j].isupper():\n                res[i][j] =''\n    res2 = ''.join(res)\n    print(res2)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = list(nums_str)\n    nums_sorted = sorted(nums, key=float)\n    nums_sorted.reverse()\n    return \"\".join(nums_sorted)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_str.sort()\n    \n    nums_str = list(nums_str)\n    \n    return nums_str\n    \ndef time_format(time_):\n    '''\n    Write a function that takes a float time in seconds and formats it as HH:MM:SS.\n    '''\n    time_ = time_ - time_.microsecond\n    \n    time_ = time_.seconds\n    \n    time_ = time_.minute\n    \n    time_ = time_.hour\n    \n    time_ = time_ * 60\n    \n    time_ = time_.days\n    \n    time_ = time_.seconds\n    \n    time_ = time_.microseconds\n    \n    return time_\n    \ndef time_to_seconds(time_):\n    '''\n    Write a function that takes a float time in seconds and formats it as HH:MM:SS.\n    '''\n    time_ = time_ - time_.microsecond\n    \n    time_ = time_.seconds\n    \n    time_ = time_.minute\n    \n    time_ = time_.hour\n    \n    time_ = time_.days\n    \n    time_ = time_.seconds\n    \n    time_ = time_.microseconds\n    \n    return time_\n    \n    \ndef time_to_string(time_):\n    '''\n    Write a function that takes a float time in seconds and formats it as HH:MM:SS.\n    '''\n    time_ = time_ - time_.microsecond\n    \n    time_ = time_.seconds\n    \n    time_ = time_.minute\n    \n    time_ = time_.hour\n    \n    time_ = time_.days\n    \n    time_ = time_.seconds\n    \n    time_ = time_.microseconds\n    \n    return \"{:02d}:{:02d}:{:02d}\".format(time_ // 3600, (time_ % 3600) // 60, time_ % 60)\n    \n    \ndef seconds_to_time(seconds):\n    '''\n    Write a function that takes a float seconds and formats it as HH:MM:SS.\n    '''\n    time = seconds // 3600\n    \n    time = time + (time // 60)\n    \n    time = time % 60\n    \n    return \"{:02d}:{:02d}:{:02d}\".format(time // 60, (time % 60) // 60, time % 60)\n    \n    \ndef convert_numbers(nums_str):\n    '''\n    Write a function that takes a list of numbers and converts each to its string representation.\n    '''\n    \n    nums_str = sort_numeric_strings(nums_str)\n    \n    return''.join(str(i) for i in nums_str)\n    \n    \ndef create_default_config(config_str):\n    '''\n    Write a function that creates a default configuration by reading a JSON file.\n    '''\n    \n    try:\n        \n        config = json.loads(config_str)\n        \n    except:\n        \n        print(\"ERROR: Invalid JSON string.\")\n        \n        return None\n        \n    try:\n        \n        del config[\"seed\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"task\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"num_classes\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"epochs\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"train_every\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"test_every\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"test_size\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"learning_rate\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"momentum\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"batch_size\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"n_layers\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"w_dropout\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"b_dropout\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"w_bias\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"b_bias\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_1_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_1_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_2_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_2_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_3_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_3_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_4_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_4_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_5_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_5_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_6_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_6_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_7_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_7_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_8_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_8_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_9_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_9_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_10_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_10_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_11_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_11_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_12_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_12_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_13_w\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_13_b\"]\n        \n    except:\n        \n        pass\n        \n    try:\n        \n        del config[\"dense_14_w\"]\n        \n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Your code here\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sort = sorted(nums_str)\n    for i in range(len(nums_str)):\n        index = nums_str[i]\n        nums_str[i] = sort[i]\n        sort[i] = index\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_numeric_strings_in_ascending_order(nums):\n        new_nums = list(nums)\n        new_nums.sort()\n        return new_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        if isinstance(nums_str[i],str):\n            nums_str[i] = int(nums_str[i])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_strings = sorted(nums_str)\n    return sorted_strings\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for element in nums_str:\n        try:\n            nums_list.append(float(element))\n        except:\n            print(\"Invalid Number\")\n    nums_list.sort()\n    return nums_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for i in nums_str:\n        if i.isnumeric():\n            new_list.append(float(i))\n    # for i in range(len(new_list)):\n        # if new_list[i] < 0:\n        #     new_list[i] = -new_list[i]\n        # elif new_list[i] > 0:\n        #     new_list[i] = -new_list[i]\n    new_list.sort()\n    return new_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #TODO: COMPLETE this function!\n    tuple_to_add = [i[0] for i in test_tup]\n    test_list += tuple_to_add\n    test_tup += tuple_to_add\n    test_tup += tuple_to_add\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = test_list + [i for i in test_tup]\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) - 1:\n        return True\n    if arr[i] >= arr[i//2] and arr[i] >= arr[(i//2) + 1]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > (len(arr) // 2):\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] >= arr[2 * i] or arr[i] >= arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i) or check_min_heap_helper(arr, 2 * i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    else:\n        if arr[i] > arr[2*i] or arr[i] > arr[2*i + 1]:\n            return check_min_heap_helper(arr, 2*i)\n        else:\n            return check_min_heap_helper(arr, 2*i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) - 1:\n        if arr[i] < arr[i + 1]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i + 1)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] > arr[(i+1)//2]:\n        return check_min_heap_helper(arr, (i+1)//2)\n    else:\n        return check_min_heap_helper(arr, i)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return False\n    if arr[i] < arr[i // 2]:\n        return check_min_heap_helper(arr, i * 2)\n    else:\n        return check_min_heap_helper(arr, i * 2 + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    if arr[i] < arr[(i+1)%len(arr)]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2: # Check if we have reached the last element\n        return True\n    if arr[i] < arr[2*i+1]: # Check if the right child is greater than left\n        return False\n    return check_min_heap_helper(arr, 2*i) or check_min_heap_helper(arr, 2*i+1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    return arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2] and check_min_heap_helper(arr, 2*i+1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n**2 + n*3 + n**2 + n**2 - n - 1\ndef lucas(n):\n    '''\n    Write a function to find the nth lucas number for a given n.\n    '''\n    return n**2 + n -1\n    "
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n//2 + jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...]\n    # I have 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \n    if n == 0:\n        return j[0]\n    elif n == 1:\n        return j[1]\n    elif n == 2:\n        return j[2]\n    elif n == 3:\n        return j[3]\n    elif n == 4:\n        return j[4]\n    elif n == 5:\n        return j[5]\n    elif n == 6:\n        return j[6]\n    elif n == 7:\n        return j[7]\n    elif n == 8:\n        return j[8]\n    elif n == 9:\n        return j[9]\n    elif n == 10:\n        return j[10]\n    elif n == 11:\n        return j[11]\n    elif n == 12:\n        return j[12]\n    elif n == 13:\n        return j[13]\n    elif n == 14:\n        return j[14]\n    elif n == 15:\n        return j[15]\n    elif n == 16:\n        return j[16]\n    elif n == 17:\n        return j[17]\n    elif n == 18:\n        return j[18]\n    elif n == 19:\n        return j[19]\n    elif n == 20:\n        return j[20]\n    elif n == 21:\n        return j[21]\n    elif n == 22:\n        return j[22]\n    elif n == 23:\n        return j[23]\n    elif n == 24:\n        return j[24]\n    elif n == 25:\n        return j[25]\n    elif n == 26:\n        return j[26]\n    elif n == 27:\n        return j[27]\n    elif n == 28:\n        return j[28]\n    elif n == 29:\n        return j[29]\n    elif n == 30:\n        return j[30]\n    elif n == 31:\n        return j[31]\n    elif n == 32:\n        return j[32]\n    elif n == 33:\n        return j[33]\n    elif n == 34:\n        return j[34]\n    elif n == 35:\n        return j[35]\n    elif n == 36:\n        return j[36]\n    elif n == 37:\n        return j[37]\n    elif n == 38:\n        return j[38]\n    elif n == 39:\n        return j[39]\n    elif n == 40:\n        return j[40]\n    elif n == 41:\n        return j[41]\n    elif n == 42:\n        return j[42]\n    elif n == 43:\n        return j[43]\n    elif n == 44:\n        return j[44]\n    elif n == 45:\n        return j[45]\n    elif n == 46:\n        return j[46]\n    elif n == 47:\n        return j[47]\n    elif n == 48:\n        return j[48]\n    elif n == 49:\n        return j[49]\n    elif n == 50:\n        return j[50]\n    elif n == 51:\n        return j[51]\n    elif n == 52:\n        return j[52]\n    elif n == 53:\n        return j[53]\n    elif n == 54:\n        return j[54]\n    elif n == 55:\n        return j[55]\n    elif n == 56:\n        return j[56]\n    elif n == 57:\n        return j[57]\n    elif n == 58:\n        return j[58]\n    elif n == 59:\n        return j[59]\n    elif n == 60:\n        return j[60]\n    elif n == 61:\n        return j[61]\n    elif n == 62:\n        return j[62]\n    elif n == 63:\n        return j[63]\n    elif n == 64:\n        return j[64]\n    elif n == 65:\n        return j[65]\n    elif n == 66:\n        return j[66]\n    elif n == 67:\n        return j[67]\n    elif n == 68:\n        return j[68]\n    elif n == 69:\n        return j[69]\n    elif n == 70:\n        return j[70]\n    elif n == 71:\n        return j[71]\n    elif n == 72:\n        return j[72]\n    elif n == 73:\n        return j[73]\n    elif n == 74:\n        return j[74]\n    elif n == 75:\n        return j[75]\n    elif n == 76:\n        return j[76]\n    elif n == 77:\n        return j[77]\n    elif n == 78:\n        return j[78]\n    elif n == 79:\n        return j[79]\n    elif n == 80:\n        return j[80]\n    elif n == 81:\n        return j[81]\n    elif n == 82:\n        return j[82]\n    elif n == 83:\n        return j[83]\n    elif n == 84:\n        return j[84]\n    elif n == 85:\n        return j[85]\n    elif n == 86:\n        return j[86]\n    elif n == 87:\n        return j[87]\n    elif n == 88:\n        return j[88]\n    elif n == 89:\n        return j[89]\n    elif n == 90:\n        return j[90]\n    elif n == 91:\n        return j[91]\n    elif n == 92:\n        return j[92]\n    elif n == 93:\n        return j[93]\n    elif n == 94:\n        return j[94]\n    elif n == 95:\n        return j[95]\n    elif n == 96:\n        return j[96]\n    elif n == 97:\n        return j[97]\n    elif n == 98:\n        return j[98]\n    elif n == 99:\n        return j[99]\n    elif n == 100:\n        return j[100]\n    elif n == 101:\n        return j[101]\n    elif n == 102:\n        return j[102]\n    elif n == 103:\n        return j[103]\n    elif n == 104:\n        return j[104]\n    elif n == 105:\n        return j[105]\n    elif n == 106:\n        return j[106]\n    elif n == 107:\n        return j[107]\n    elif n == 108:\n        return j[108]\n    elif n == 109:\n        return j[109]\n    elif n == 110:\n        return j[110]\n    elif n == 111:\n        return j[111]\n    elif n == 112:\n        return j[112]\n    elif n == 113:\n        return j[113]\n    elif n == 114:\n        return j[114]\n    elif n == 115:\n        return j[115]\n    elif n == 116:\n        return j[116]\n    elif n == 117:\n        return j[117]\n    elif n == 118:\n        return j[118]\n    elif n == 119:\n        return j[119]\n    elif n == 120:\n        return j[120]\n    elif n == 121:\n        return j[121]\n    elif n == 122:\n        return j[122]\n    elif n == 123:\n        return j[123]\n    elif n == 124:\n        return j[124]\n    eli"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 1\n    for i in range(2, n+1):\n        j = j*i\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    m = (n-1)%(3**n)\n    return int(m,2)"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 1\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 1\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 1\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 1\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 1\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 1\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 1\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 1\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 1\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 1\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 1\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 1\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 1\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 1\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 1\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 1\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 1\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 1\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 1\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 1\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 1\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 1\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 1\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 1\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 1\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 1\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 1\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 1\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 1\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 1\n    elif n == 72:\n        return 1\n    elif n == 73:\n        return 1\n    elif n == 74:\n        return 1\n    elif n == 75:\n        return 1\n    elif n == 76:\n        return 1\n    elif n == 77:\n        return 1\n    elif n == 78:\n        return 1\n    elif n == 79:\n        return 1\n    elif n == 80:\n        return 1\n    elif n == 81:\n        return 1\n    elif n == 82:\n        return 1\n    elif n == 83:\n        return 1\n    elif n == 84:\n        return 1\n    elif n == 85:\n        return 1\n    elif n == 86:\n        return 1\n    elif n == 87:\n        return 1\n    elif n == 88:\n        return 1\n    elif n == 89:\n        return 1\n    elif n == 90:\n        return 1\n    elif n == 91:\n        return 1\n    elif n == 92:\n        return 1\n    elif n == 93:\n        return 1\n    elif n == 94:\n        return 1\n    elif n == 95:\n        return 1\n    elif n == 96:\n        return 1\n    elif n == 97:\n        return 1\n    elif n == 98:\n        return 1\n    elif n == 99:\n        return 1\n    elif n == 100:\n        return 1\n    elif n == 101:\n        return 1\n    elif n == 102:\n        return 1\n    elif n == 103:\n        return 1\n    elif n == 104:\n        return 1\n    elif n == 105:\n        return 1\n    elif n == 106:\n        return 1\n    elif n == 107:\n        return 1\n    elif n == 108:\n        return 1\n    elif n == 109:\n        return 1\n    elif n == 110:\n        return 1\n    elif n == 111:\n        return 1\n    elif n == 112:\n        return 1\n    elif n == 113:\n        return 1\n    elif n == 114:\n        return 1\n    elif n == 115:\n        return 1\n    elif n == 116:\n        return 1\n    elif n == 117:\n        return 1\n    elif n == 118:\n        return 1\n    elif n == 119:\n        return 1\n    elif n == 120:\n        return 1\n    elif n == 121:\n        return 1\n    elif n == 122:\n        return 1\n    elif n == 123:\n        return 1\n    elif n == 124:\n        return 1\n    elif n == 125:\n        return 1\n    elif n == 126:\n        return 1\n    elif n == 127:\n        return 1\n    elif n == 128:\n        return 1\n    elif n == 129:\n        return 1\n    elif n == 130:\n        return 1\n    elif n == 131:\n        return 1\n    elif n == 132:\n        return 1\n    elif n == 133:\n        return 1\n    elif n == 134:\n        return 1\n    elif n == 135:\n        return 1\n    elif n == 136:\n        return 1\n    elif n == 137:\n        return 1\n    elif n == 138:\n        return 1\n    elif n == 139:\n        return 1\n    elif n == 140:\n        return 1\n    elif n == 141:\n        return 1\n    elif n == 142:\n        return 1\n    elif n == 143:\n        return 1\n    elif n == 144:\n        return 1\n    elif n == 145:\n        return 1\n    elif n == 146:\n        return 1\n    elif n == 147:\n        return 1\n    elif n == 148:\n        return 1\n    elif n == 149:\n        return 1\n    elif n == 150:\n        return 1\n    elif n == 151:\n        return 1\n    elif n == 152:\n        return 1\n    elif n == 153:\n        return 1\n    elif n == 154:\n        return 1\n    elif n == 155:\n        return 1\n    elif n == 156:\n        return 1\n    elif n == 157:\n        return 1\n    elif n == 158:\n        return 1\n    elif n == 159:\n        return 1\n    elif n == 160:\n        return 1\n    elif n == 161:\n        return 1\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 1\n    while i <= n:\n        if i == 1:\n            i += 1\n            j = 0\n            while j < n:\n                i += 1\n                j += 1\n            return i\n        if i == n:\n            j = 0\n            while j < n:\n                i += 1\n                j += 1\n            return i\n        j = 0\n        while j < n:\n            i += 1\n            j += 1\n        i += 1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 1\n    for j in range(1, n):\n        x = x * n \n    return x \n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #n = int(input(\"Enter the number you want to find: \"))\n    f = lambda x: sum(map(lambda y:x**y, range(1,x+1)))\n    s = lambda x: [i for i in range(x+1) if x%i == 0]\n    m = lambda x: sorted(map(lambda y:f(y), range(1,x+1)))\n    u = lambda x: list(map(lambda y:f(y), range(1,x+1)))\n    d = lambda x: list(s(x)[::-1])\n    return m(n)[-1]\n    \nprint(jacobsthal_num(10))\nprint(jacobsthal_num(100)"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 1\n    a = 0\n    while j < n:\n        a += j\n        j += 1\n    return a\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # convert tuple list to set so you can use it in k-min\n    # remove duplicate values so you can find the min of the set\n    test_set = set(test_list)\n    test_set.remove(min(test_set))\n    # sort tuple list so we can find the smallest k\n    test_list.sort()\n    print(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # print(test_list)\n    # print(test_list[0])\n    # print(test_list[1])\n    # print(test_list[2])\n    # print(test_list[3])\n    # print(test_list[4])\n    # print(test_list[5])\n    # print(test_list[6])\n    # print(test_list[7])\n    # print(test_list[8])\n    # print(test_list[9])\n    # print(test_list[10])\n    # print(test_list[11])\n    # print(test_list[12])\n    # print(test_list[13])\n    # print(test_list[14])\n    # print(test_list[15])\n    # print(test_list[16])\n    # print(test_list[17])\n    # print(test_list[18])\n    # print(test_list[19])\n    # print(test_list[20])\n    # print(test_list[21])\n    # print(test_list[22])\n    # print(test_list[23])\n    # print(test_list[24])\n    # print(test_list[25])\n    # print(test_list[26])\n    # print(test_list[27])\n    # print(test_list[28])\n    # print(test_list[29])\n    # print(test_list[30])\n    # print(test_list[31])\n    # print(test_list[32])\n    # print(test_list[33])\n    # print(test_list[34])\n    # print(test_list[35])\n    # print(test_list[36])\n    # print(test_list[37])\n    # print(test_list[38])\n    # print(test_list[39])\n    # print(test_list[40])\n    # print(test_list[41])\n    # print(test_list[42])\n    # print(test_list[43])\n    # print(test_list[44])\n    # print(test_list[45])\n    # print(test_list[46])\n    # print(test_list[47])\n    # print(test_list[48])\n    # print(test_list[49])\n    # print(test_list[50])\n    # print(test_list[51])\n    # print(test_list[52])\n    # print(test_list[53])\n    # print(test_list[54])\n    # print(test_list[55])\n    # print(test_list[56])\n    # print(test_list[57])\n    # print(test_list[58])\n    # print(test_list[59])\n    # print(test_list[60])\n    # print(test_list[61])\n    # print(test_list[62])\n    # print(test_list[63])\n    # print(test_list[64])\n    # print(test_list[65])\n    # print(test_list[66])\n    # print(test_list[67])\n    # print(test_list[68])\n    # print(test_list[69])\n    # print(test_list[70])\n    # print(test_list[71])\n    # print(test_list[72])\n    # print(test_list[73])\n    # print(test_list[74])\n    # print(test_list[75])\n    # print(test_list[76])\n    # print(test_list[77])\n    # print(test_list[78])\n    # print(test_list[79])\n    # print(test_list[80])\n    # print(test_list[81])\n    # print(test_list[82])\n    # print(test_list[83])\n    # print(test_list[84])\n    # print(test_list[85])\n    # print(test_list[86])\n    # print(test_list[87])\n    # print(test_list[88])\n    # print(test_list[89])\n    # print(test_list[90])\n    # print(test_list[91])\n    # print(test_list[92])\n    # print(test_list[93])\n    # print(test_list[94])\n    # print(test_list[95])\n    # print(test_list[96])\n    # print(test_list[97])\n    # print(test_list[98])\n    # print(test_list[99])\n    # print(test_list[100])\n    # print(test_list[101])\n    # print(test_list[102])\n    # print(test_list[103])\n    # print(test_list[104])\n    # print(test_list[105])\n    # print(test_list[106])\n    # print(test_list[107])\n    # print(test_list[108])\n    # print(test_list[109])\n    # print(test_list[110])\n    # print(test_list[111])\n    # print(test_list[112])\n    # print(test_list[113])\n    # print(test_list[114])\n    # print(test_list[115])\n    # print(test_list[116])\n    # print(test_list[117])\n    # print(test_list[118])\n    # print(test_list[119])\n    # print(test_list[120])\n    # print(test_list[121])\n    # print(test_list[122])\n    # print(test_list[123])\n    # print(test_list[124])\n    # print(test_list[125])\n    # print(test_list[126])\n    # print(test_list[127])\n    # print(test_list[128])\n    # print(test_list[129])\n    # print(test_list[130])\n    # print(test_list[131])\n    # print(test_list[132])\n    # print(test_list[133])\n    # print(test_list[134])\n    # print(test_list[135])\n    # print(test_list[136])\n    # print(test_list[137])\n    # print(test_list[138])\n    # print(test_list[139])\n    # print(test_list[140])\n    # print(test_list[141])\n    # print(test_list[142])\n    # print(test_list[143])\n    # print(test_list[144])\n    # print(test_list[145])\n    # print(test_list[146])\n    # print(test_list[147])\n    # print(test_list[148])\n    # print(test_list[149])\n    # print(test_list[150])\n    # print(test_list[151])\n    # print(test_list[152])\n    # print(test_list[153])\n    # print(test_list[154])\n    # print(test_list[155])\n    # print(test_list[156])\n    # print(test_list[157])\n    # print(test_list[158])\n    # print(test_list[159])\n    # print(test_list[160])\n    # print(test_list[161])\n    # print(test_list[162])\n    # print(test_list[163])\n    # print(test_list[164])\n    # print(test_list[165])\n    # print(test_list[166])\n    # print(test_list[167])\n    # print(test_list[168])\n    # print(test_list[169])\n    # print(test_list[170])\n    # print(test_list[171])\n    # print(test_list[172])\n    # print(test_list[173])\n    # print(test_list[174])\n    # print(test_list[175])\n    # print(test_list[176])\n    # print(test_list[177])\n    # print(test"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize a dictionary to store minimum k values\n    minimum_dict = {}\n    # loop through the list and store each tuple value\n    for i in range(len(test_list)):\n        # loop through each value in the tuple\n        for j in range(len(test_list[i])):\n            # find the k value\n            k = test_list[i][j]\n            # if the value is not in the dictionary, add the value to the dictionary\n            if k not in minimum_dict:\n                minimum_dict[k] = 1\n            # if it is already in the dictionary, increment the value by 1\n            else:\n                minimum_dict[k] += 1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if test_list == []:\n        return -1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Base case\n    if len(test_list) == 0:\n        return 0\n    else:\n        min_value = min_k_helper(test_list, 0, K)\n        if min_value is None:\n            return None\n        return (min_value[1] - min_value[0])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # get a dictionary from the tuple list\n    dict_tuple = {i: [test_list[i][i]] for i in range(len(test_list))}\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    min = n\n    min_val = test_list[0]\n    for i in range(1, n):\n        if test_list[i] < min_val:\n            min = i\n            min_val = test_list[i]\n    return min\n        \ndef kth_elem(list, k):\n    '''\n    Write a function to find the kth smallest element from list, which is of type int.\n    '''\n    list.sort()\n    return list[k-1]\n    \ndef remove_dups(list):\n    '''\n    Write a function to remove duplicate items from list and return a new list with duplicate removed.\n    '''\n    seen = {}\n    new_list = []\n    for item in list:\n        if item in seen:\n            new_list.append(item)\n        else:\n            seen[item] = 1\n    return new_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    result = [None] * len(test_list)\n    i = 0\n    while i < len(test_list):\n        min_k = float('inf')\n        for j in range(0, len(test_list)):\n            if test_list[i][j] < min_k and j == i:\n                min_k = test_list[i][j]\n        result[i] = min_k\n        i = i + 1\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # take from each tuple, find the k smallest records.\n    # sort the list of tuples\n    # remove the duplicates\n    # take the smallest k tuples\n    # return the smallest k\n    # return -1 if k is not a valid k.\n    if type(test_list) == tuple:\n        test_list = list(test_list)\n    l = len(test_list)\n    if l == 0:\n        return -1\n    \n    if l == K:\n        return test_list[0]\n    \n    # find the k smallest records\n    # sort the list of tuples\n    # remove the duplicates\n    # take the smallest k tuples\n    # return the smallest k\n    # return -1 if k is not a valid k.\n    d = dict()\n    for i in range(l):\n        d[test_list[i]] = test_list[i]\n    lst = list(d.values())\n    \n    for k in range(K):\n        d[lst.pop(0)] = lst.pop(0)\n    \n    return d.popitem()[0]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # print(test_list)\n    # print(test_list[0:4])\n    # print(test_list[4:8])\n    # print(test_list[8:])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n    # print(test_list[:8])\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append([l1[i],l2[j],l3[k]])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    l1_len = len(l1)\n    l2_len = len(l2)\n    l3_len = len(l3)\n    for i in range(l1_len):\n        for j in range(l2_len):\n            for k in range(l3_len):\n                if(l1[i] == l2[j] == l3[k]):\n                    index_list.append(i)\n                    break\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    temp = []\n    for element in l1:\n        if element in l2:\n            temp.append(element)\n        if element in l3:\n            temp.append(element)\n    return temp\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # your code here\n    l4 = []\n    for i in range(0,len(l1)):\n        for j in range(0,len(l2)):\n            for k in range(0,len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    l4.append(l1[i])\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index_list = []\n    if len(l1) == len(l2) == len(l3):\n        common_index_list = l1 + l2 + l3\n    else:\n        print(\"Lists are not of the same length\")\n    return common_index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = 0\n    list_indexes = []\n    list_elements = []\n    for i in range(len(l1)):\n        if l1[i] not in list_indexes:\n            list_indexes.append(l1[i])\n        if l2[i] not in list_indexes:\n            list_indexes.append(l2[i])\n        if l3[i] not in list_indexes:\n            list_indexes.append(l3[i])\n        index = index + 1\n    return list_indexes\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[l3.index(l1[i])] in l3:\n            index.append(l1[i])\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    if len(l1) == len(l2) == len(l3):\n        return list(set(range(len(l1))) & set(range(len(l2))) & set(range(len(l3))))\n    if len(l1) == len(l2):\n        return list(set(range(len(l1))) & set(range(len(l2))))\n    if len(l1) == len(l3):\n        return list(set(range(len(l1))) & set(range(len(l2))))\n    if len(l2) == len(l3):\n        return list(set(range(len(l1))) & set(range(len(l2))))\n    if len(l3) == len(l1):\n        return list(set(range(len(l1))) & set(range(len(l2))))\n    return []\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_common = [i for i, x in enumerate(l1) if x in l2]\n    l2_common = [i for i, x in enumerate(l2) if x in l1]\n    l3_common = [i for i, x in enumerate(l3) if x in l1]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in range(len(l1)) if l1[i] in l2 or l1[i] in l3 or l2[i] in l3 or l1[i] in l3 or l2[i] in l3]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    elif len(numbers) == 1:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    a=min(numbers)\n    return a\n    \ndef second_smallest_compare(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    a=min(numbers)\n    return a\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min_num = numbers[0]\n    for number in numbers:\n        if number > min_num:\n            min_num = number\n    return min_num\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = numbers[0]\n    for num in numbers:\n        if num < smallest_number:\n            smallest_number = num\n    return smallest_number\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # find the second smallest number\n    second_smallest = numbers[0]\n    for x in numbers:\n        if x < second_smallest:\n            second_smallest = x\n    return second_smallest\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_one_zero_or_more(text):\n    '''\n    Write a function that matches a string that has one 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_one_zero_or_more_and_not_one_a(text):\n    '''\n    Write a function that matches a string that has one 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_one_zero_or_more_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has one 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_one_zero_or_more_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has one 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b_and_not_one_a(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b_and_not_one_a(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b_and_not_one_a_and_b(text):\n    '''\n    Write a function that matches a string that has two 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\ndef text_match_two_zero_one_and_a_and_b_and_no"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a = ['a', 'b']\n    pattern = 'a{'+str(len(a))+'}'\n    return re.search(pattern, text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall('\\A(a|b)',text)\n    if not text:\n        return False\n    if 'a' in text[0]:\n        return True\n    elif 'b' in text[0]:\n        return False\n    else:\n        return False\ndef text_match_zero_many(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.findall('\\A(a|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b|b"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # text = \"It is an apple.\"\n    # text = \"It is a lovely fruit.\"\n    # text = \"It is apple.\"\n    # text = \"It is lovely fruit.\"\n    # text = \"It is apple.\"\n    # text = \"It is lovely fruit.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = \"It is an apple.\"\n    # text = "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match(r\"^(\\w*)a(\\w*)b\", text)\n    if result:\n        return result.group(1) + result.group(2)\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_sub = re.sub('[a-zA-Z]', 'a', text)\n    text_sub = re.sub('[a-zA-Z]', 'b', text_sub)\n    text_sub = re.sub('[A-Z]', 'a', text_sub)\n    text_sub = re.sub('[A-Z]', 'b', text_sub)\n    text_sub = re.sub('[a-zA-Z]', 'b', text_sub)\n    text_sub = re.sub('[A-Z]', 'a', text_sub)\n    text_sub = re.sub('[A-Z]', 'b', text_sub)\n    return text_sub\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text == '':\n        return True\n    if text.endswith('a'):\n        return True\n    if text.endswith('b'):\n        return True\n    if text.startswith('b') and len(text.split('b')) == 1:\n        return True\n    if text.startswith('a') and len(text.split('a')) == 1:\n        return True\n    if text.endswith('b') and len(text.split('b')) == 2:\n        return True\n    if text.endswith('a') and len(text.split('a')) == 2:\n        return True\n    if text.startswith('a') and len(text.split('a')) == 2:\n        return True\n    if len(text.split('a')) == 1:\n        return True\n    if len(text.split('b')) == 1:\n        return True\n    if text.startswith('b') and len(text.split('b')) == 2:\n        return True\n    if text.startswith('a') and len(text.split('a')) == 2:\n        return True\n    if text.endswith('b') and len(text.split('b')) == 3:\n        return True\n    if text.endswith('a') and len(text.split('a')) == 3:\n        return True\n    if text.endswith('b') and len(text.split('b')) == 4:\n        return True\n    if text.endswith('a') and len(text.split('a')) == 4:\n        return True\n    if text.startswith('a') and len(text.split('a')) == 3:\n        return True\n    if text.startswith('b') and len(text.split('b')) == 2:\n        return True\n    if text.startswith('a') and len(text.split('a')) == 2:\n        return True\n    if len(text.split('a')) == 1:\n        return True\n    if len(text.split('b')) == 1:\n        return True\n    if len(text.split('a')) == 2:\n        return True\n    if len(text.split('b')) == 3:\n        return True\n    if len(text.split('a')) == 4:\n        return True\n    if len(text.split('b')) == 4:\n        return True\n    if len(text.split('a')) == 5:\n        return True\n    if len(text.split('b')) == 5:\n        return True\n    if len(text.split('a')) == 6:\n        return True\n    if len(text.split('b')) == 6:\n        return True\n    if len(text.split('a')) == 7:\n        return True\n    if len(text.split('b')) == 7:\n        return True\n    if len(text.split('a')) == 8:\n        return True\n    if len(text.split('b')) == 8:\n        return True\n    if len(text.split('a')) == 9:\n        return True\n    if len(text.split('b')) == 9:\n        return True\n    if len(text.split('a')) == 10:\n        return True\n    if len(text.split('b')) == 10:\n        return True\n    if len(text.split('a')) == 11:\n        return True\n    if len(text.split('b')) == 11:\n        return True\n    if len(text.split('a')) == 12:\n        return True\n    if len(text.split('b')) == 12:\n        return True\n    if len(text.split('a')) == 13:\n        return True\n    if len(text.split('b')) == 13:\n        return True\n    if len(text.split('a')) == 14:\n        return True\n    if len(text.split('b')) == 14:\n        return True\n    if len(text.split('a')) == 15:\n        return True\n    if len(text.split('b')) == 15:\n        return True\n    if len(text.split('a')) == 16:\n        return True\n    if len(text.split('b')) == 16:\n        return True\n    if len(text.split('a')) == 17:\n        return True\n    if len(text.split('b')) == 17:\n        return True\n    if len(text.split('a')) == 18:\n        return True\n    if len(text.split('b')) == 18:\n        return True\n    if len(text.split('a')) == 19:\n        return True\n    if len(text.split('b')) == 19:\n        return True\n    if len(text.split('a')) == 20:\n        return True\n    if len(text.split('b')) == 20:\n        return True\n    if len(text.split('a')) == 21:\n        return True\n    if len(text.split('b')) == 21:\n        return True\n    if len(text.split('a')) == 22:\n        return True\n    if len(text.split('b')) == 22:\n        return True\n    if len(text.split('a')) == 23:\n        return True\n    if len(text.split('b')) == 23:\n        return True\n    if len(text.split('a')) == 24:\n        return True\n    if len(text.split('b')) == 24:\n        return True\n    if len(text.split('a')) == 25:\n        return True\n    if len(text.split('b')) == 25:\n        return True\n    if len(text.split('a')) == 26:\n        return True\n    if len(text.split('b')) == 26:\n        return True\n    if len(text.split('a')) == 27:\n        return True\n    if len(text.split('b')) == 27:\n        return True\n    if len(text.split('a')) == 28:\n        return True\n    if len(text.split('b')) == 28:\n        return True\n    if len(text.split('a')) == 29:\n        return True\n    if len(text.split('b')) == 29:\n        return True\n    if len(text.split('a')) == 30:\n        return True\n    if len(text.split('b')) == 30:\n        return True\n    if len(text.split('a')) == 31:\n        return True\n    if len(text.split('b')) == 31:\n        return True\n    if len(text.split('a')) == 32:\n        return True\n    if len(text.split('b')) == 32:\n        return True\n    if len(text.split('a')) == 33:\n        return True\n    if len(text.split('b')) == 33:\n        return True\n    if len(text.split('a')) == 34:\n        return True\n    if len(text.split('b')) == 34:\n        return True\n    if len(text.split('a')) == 35:\n        return True\n    if len(text.split('b')) == 35:\n        return True\n    if len(text.split('a')) == 36:\n        return True\n    if len(text.split('b')) == 36:\n        return True\n    if len(text.split('a')) == 37:\n        return True\n    if len(text.split('b')) == 37:\n        return True\n    if len(text.split('a')) == 38:\n        return True\n    if len(text.split('b')) == 38:\n        return True\n    if len(text.split('a')) == 39:\n        return True\n    if len(text.split('b')) == 39:\n        return True\n    if len(text.split('a')) == 40:\n        return True\n    if len(text.split('b')) == 40:\n        return True\n    if len(text.split('a')) == 41:\n        return Tru"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if len(text)>0:\n        for char in text:\n            if char in 'ab':\n                return char\n    else:\n        return char\ndef get_new_index(text):\n    '''\n    Write a function that returns the index of a word that does not contain any 'a' and one or more 'b's.\n    '''\n    new_index = 0\n    for i, letter in enumerate(text):\n        if letter not in 'ab':\n            new_index = i\n            break\n    return new_index\ndef text_match_p(text, pattern):\n    '''\n    Write a function that matches a string that starts with a 'p' and end with one or more 'b's.\n    '''\n    pattern = pattern.lower()\n    for i, char in enumerate(pattern):\n        if char in 'p':\n            return i\n        else:\n            pass\ndef get_new_index_p(text, pattern):\n    '''\n    Write a function that returns the index of a word that does not start with a 'p' and end with one or more 'b's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in 'p':\n            new_index = i\n            break\n    return new_index\ndef text_match_s(text, pattern):\n    '''\n    Write a function that matches a string that starts with a's' and ends with one or more 'b's.\n    '''\n    pattern = pattern.lower()\n    for i, char in enumerate(pattern):\n        if char in's':\n            return i\n        else:\n            pass\ndef get_new_index_s(text, pattern):\n    '''\n    Write a function that returns the index of a word that does not start with a's' and ends with one or more 'b's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in's':\n            new_index = i\n            break\n    return new_index\ndef text_match_one_zero_one(text):\n    '''\n    Write a function that matches a string that starts with '1' and ends with one or more '0's.\n    '''\n    pattern = '1[1-9]\\d'\n    new_index = 0\n    for i, char in enumerate(text):\n        if char in '01' and i==0:\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef get_new_index_one_zero_one(text, pattern):\n    '''\n    Write a function that returns the index of a word that does not start with '1' and ends with one or more '0's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in '01' and i==0:\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef text_match_zero_one_pattern(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    new_pattern = 'a[a-z]*b[a-z]*'\n    new_pattern = new_pattern.lower()\n    new_pattern = re.sub('[a-z]', '', new_pattern)\n    for i, char in enumerate(new_pattern):\n        if char not in 'ab':\n            new_index = i\n            break\n    return new_index\ndef get_new_index_zero_one_pattern(text, pattern):\n    '''\n    Write a function that returns the index of a word that has an 'a' followed by one or more 'b's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in 'a':\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef text_match_p_pattern(text, pattern):\n    '''\n    Write a function that matches a string that starts with a 'p' and ends with one or more 'b's.\n    '''\n    pattern = pattern.lower()\n    new_pattern = 'p[a-z]*b[a-z]*'\n    new_pattern = new_pattern.lower()\n    new_pattern = re.sub('[a-z]', '', new_pattern)\n    for i, char in enumerate(new_pattern):\n        if char not in 'p':\n            new_index = i\n            break\n    return new_index\ndef get_new_index_p_pattern(text, pattern):\n    '''\n    Write a function that returns the index of a word that has an 'a' followed by one or more 'b's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in 'p':\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef text_match_s_pattern(text, pattern):\n    '''\n    Write a function that matches a string that starts with a's' and ends with one or more 'b's.\n    '''\n    pattern = pattern.lower()\n    new_pattern ='s[a-z]*b[a-z]*'\n    new_pattern = re.sub('[a-z]', '', new_pattern)\n    for i, char in enumerate(new_pattern):\n        if char not in's':\n            new_index = i\n            break\n    return new_index\ndef get_new_index_s_pattern(text, pattern):\n    '''\n    Write a function that returns the index of a word that has an 'a' followed by one or more 'b's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in's':\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef text_match_one_zero_one_pattern(text):\n    '''\n    Write a function that matches a string that starts with '1' and ends with one or more '0's.\n    '''\n    new_pattern = '1[1-9]\\d'\n    new_index = 0\n    for i, char in enumerate(text):\n        if char in '01':\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef get_new_index_one_zero_one_pattern(text, pattern):\n    '''\n    Write a function that returns the index of a word that has an 'a' followed by one or more 'b's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in '01':\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef text_match_zero_one_pattern_1(text):\n    '''\n    Write a function that matches a string that starts with '1' and ends with one or more '0's.\n    '''\n    new_pattern = '1[1-9]\\d'\n    new_index = 0\n    for i, char in enumerate(text):\n        if char in '01':\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef get_new_index_zero_one_pattern_1(text, pattern):\n    '''\n    Write a function that returns the index of a word that has an 'a' followed by one or more 'b's.\n    '''\n    new_index = 0\n    for i, char in enumerate(pattern):\n        if char in '01':\n            new_index = i\n            break\n        else:\n            pass\n    return new_index\ndef text_match_p_pattern_1(text):\n    '''\n    Write a function that matches a string that starts with 'p' and ends with one or more 'b's.\n    '''\n    new_pattern = "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_without_a = re.sub(r'[^\\w]', '', text)\n    a_list = [\"a\", \"b\"]\n    for a in a_list:\n        if a in text_without_a:\n            text_without_a = text_without_a.replace(a, a.upper())\n    #print(\"\\n-----\\nReplaced words: \" + text_without_a)\n    return text_without_a\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    c = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                c = c + 1\n    return c\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    r = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            r.append((test_list[i], test_list[j]))\n    r.sort()\n    l = len(r)\n    counter = 0\n    for k in range(l):\n        if r[k][1] == r[k][0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1):\n            if test_list[j] < test_list[j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = test_list.split(' ')\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    answer = 0\n    test_list_len = len(test_list)\n    for i in range(test_list_len - 1):\n        for j in range(i + 1, test_list_len):\n            if test_list[i] == test_list[j]:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pairs = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i, len(test_list)):\n            if test_list[j][::-1] == test_list[i]:\n                count_pairs += 1\n    return count_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    if len(test_list) < 3:\n        return count\n    # to check if the string is in the first index of the list,\n    # if it is, its the reverse, so increment count\n    for i in range(1, len(test_list)):\n        if test_list[i] == test_list[i - 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result_list = []\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) == 0:\n        return {}\n    elif len(list1) == 1:\n        return {list1[0]:1}\n    else:\n        keys = []\n        values = []\n        for x in list1:\n            if x not in keys:\n                keys.append(x)\n                values.append(list1.count(x))\n        result = {}\n        for x in keys:\n            result[(x,)] = values.count(list1.count(x))\n        return resul"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO: Add your code here.\n    return {}\n    pass\n    "
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    tuple_dict = {}\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] not in tuple_dict:\n            tuple_dict[list1[i]] = counter\n            counter += 1\n    return tuple_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    n = len(list1)\n    d = {}\n    for i in range(0, n):\n        x = tuple(list1[i])\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    if list1 == []:\n        return {'':0}\n    dic[tuple(list1[0])] = len(list1)\n    for i in range(1,len(list1)):\n        dic[tuple(list1[i])] = len(list1[i])\n    return dic\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    seen = {}\n    unique = []\n    count = 0\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_unique = {}\n    # Adding the value of each elements to a dictionary.\n    for i in list1:\n        dict_unique[tuple(i)] = dict_unique.get(tuple(i), 0) + 1\n    return dict_unique\n    \ndef get_number_of_sublists(list1):\n    '''\n    Write a function that returns the number of sublists within a list.\n    '''\n    dict_sublists = unique_sublists(list1)\n    # Getting the value of each elements of a dictionary.\n    dict_sublists_values = dict_sublists.values()\n    # Getting the number of sublists.\n    number_of_sublists = len(dict_sublists_values)\n    # Returning the number of sublists.\n    return number_of_sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Solution:\n    num_occurances = {}\n    for l in list1:\n        if l in num_occurances:\n            num_occurances[l] += 1\n        else:\n            num_occurances[l] = 1\n    return num_occurances\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    subs = {x : [] for x in list1}\n    for i in range(len(list1)):\n        subs[list1[i]].append(i)\n    return subs\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for x in list1:\n        d[x] = d.get(x, 0) + 1\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == 0:\n        return True\n    if num < 0:\n        return False\n    else:\n        prec = 2\n        for i in str(num):\n            if i == '0' or i == '.':\n                prec -= 1\n        if prec > 0:\n            return False\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) < 3:\n        return False\n    for i in num:\n        if i not in '0123456789':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    from math import ceil\n    n = int(num)\n    if n < 0:\n        return False\n    else:\n        return ceil(n/2) == n\n    \nprint(is_decimal('2.78'))\nprint(is_decimal('6.78'))\nprint(is_decimal('99'))\nprint(is_decimal('99.5')"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Your code here\n    num = str(num)\n    num_list = num.split('.')\n    if len(num_list) == 2:\n        if int(num_list[1]) == int(num_list[0]):\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    return '0' not in str(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] in [\"+\", \"-\", \".\"]:\n        num = num[1:]\n    while num[-1] in [\"0\", \".\"]:\n        num = num[:-1]\n    if num[0] in [\"0\", \".\"]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    n = 0\n    i = 0\n    for char in num:\n        n += int(char)\n        i += 1\n    \n    if n > 0 and i == len(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return all(i.isnumeric() for i in num)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    return len(unique)==1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l=[]\n    for i in arr:\n        l.append(i)\n    c=l[0]\n    for i in l[1:]:\n        if c==i:\n            return False\n    return True\n    \nprint(unique_Element([1, 1, 2, 3, 3, 4])"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    temp_dic = dict()\n    for i in range(len(arr)):\n        temp_dic[arr[i]] = 1\n    for i in range(len(arr)):\n        if arr[i] not in temp_dic:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    length = len(arr)\n    if length == 0:\n        return False\n    elif length == 1:\n        return True\n    else:\n        arr = list(set(arr))\n        arr.sort()\n        for i in arr:\n            if len(arr) == 1:\n                return True\n            elif i not in arr:\n                return True\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #return len(set(arr)) == 1\n    if len(arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return not (any(x in set(arr) for x in arr))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # you may assume all numbers will be unique, but let's play with the assumption of having a unique array\n    # of these numbers, to make it easier to check for redundancy.\n    count = 0\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    s = set(arr)\n    if len(s)!= 1:\n        return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return not any(arr.count(x) for x in arr)\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3<1 or monthnum3>12:\n        return False\n    elif monthnum3==1 or monthnum3==12:\n        if monthnum3==1 or monthnum3==12:\n            return True\n        else:\n            return False\n    elif monthnum3==2 or monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n        return True\n    elif monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==2 or monthnum3==3 or monthnum3==4 or monthnum3==5 or monthnum3==6 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==11 or monthnum3==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_number = int(monthnum3)\n    if (month_number%1 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if (monthnum3>12 or monthnum3<1):\n        return False\n    else:\n        for monthnum in range(1,13):\n            if monthnum3==monthnum:\n                if monthnum3==2:\n                    if monthnum3==4:\n                        if monthnum3==5:\n                            if monthnum3==6:\n                                if monthnum3==7:\n                                    if monthnum3==8:\n                                        if monthnum3==9:\n                                            if monthnum3==10:\n                                                if monthnum3==11:\n                                                    if monthnum3==12:\n                                                        return True\n                                            else:\n                                                return False\n                                    else:\n                                        return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n        else:\n            return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return None\n    if monthnum3 == 1:\n        if monthnum3 == 12:\n            return True\n        if monthnum3!= 1:\n            return False\n    if monthnum3 == 2:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 2:\n            return False\n    if monthnum3 == 3:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 3:\n            return False\n    if monthnum3 == 4:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 4:\n            return False\n    if monthnum3 == 5:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 5:\n            return False\n    if monthnum3 == 6:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 6:\n            return False\n    if monthnum3 == 7:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 7:\n            return False\n    if monthnum3 == 8:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 8:\n            return False\n    if monthnum3 == 9:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 9:\n            return False\n    if monthnum3 == 10:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 10:\n            return False\n    if monthnum3 == 11:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 11:\n            return False\n    if monthnum3 == 12:\n        if monthnum3 == 1:\n            return True\n        if monthnum3!= 12:\n            return False\n    return None\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Please enter a number from 1 to 12\")\n        return\n    else:\n        if monthnum3 == 1:\n            if monthnum3 == 1:\n                print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1))\n            else:\n                print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2))\n        elif monthnum3 == 2:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2))\n        elif monthnum3 == 3:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3))\n        elif monthnum3 == 4:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4))\n        elif monthnum3 == 5:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5))\n        elif monthnum3 == 6:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6))\n        elif monthnum3 == 7:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6) + \", \" + \"and {}th month\".format(monthnum3 + 7))\n        elif monthnum3 == 8:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6) + \", \" + \"and {}th month\".format(monthnum3 + 7) + \", \" + \"and {}th month\".format(monthnum3 + 8))\n        elif monthnum3 == 9:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6) + \", \" + \"and {}th month\".format(monthnum3 + 7) + \", \" + \"and {}th month\".format(monthnum3 + 8) + \", \" + \"and {}th month\".format(monthnum3 + 9))\n        elif monthnum3 == 10:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6) + \", \" + \"and {}th month\".format(monthnum3 + 7) + \", \" + \"and {}th month\".format(monthnum3 + 8) + \", \" + \"and {}th month\".format(monthnum3 + 9) + \", \" + \"and {}th month\".format(monthnum3 + 10))\n        elif monthnum3 == 11:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6) + \", \" + \"and {}th month\".format(monthnum3 + 7) + \", \" + \"and {}th month\".format(monthnum3 + 8) + \", \" + \"and {}th month\".format(monthnum3 + 9) + \", \" + \"and {}th month\".format(monthnum3 + 10) + \", \" + \"and {}th month\".format(monthnum3 + 11))\n        elif monthnum3 == 12:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6) + \", \" + \"and {}th month\".format(monthnum3 + 7) + \", \" + \"and {}th month\".format(monthnum3 + 8) + \", \" + \"and {}th month\".format(monthnum3 + 9) + \", \" + \"and {}th month\".format(monthnum3 + 10) + \", \" + \"and {}th month\".format(monthnum3 + 11) + \", \" + \"and {}th month\".format(monthnum3 + 12))\n        elif monthnum3 > 12:\n            print(\"{}th month is the day of {}th month\".format(monthnum3, monthnum3 + 1) + \", \" + \"and {}th month\".format(monthnum3 + 2) + \", \" + \"and {}th month\".format(monthnum3 + 3) + \", \" + \"and {}th month\".format(monthnum3 + 4) + \", \" + \"and {}th month\".format(monthnum3 + 5) + \", \" + \"and {}th month\".format(monthnum3 + 6) + \", \" + \"and {}th month\".format(monthnum3 + 7) + \", \" + \"and {}th month\".format(monthnum3 + 8) + \", \" + \"and {}th month\".format(monthnum3 + 9) + \", \" + \"and {}th month\".format(monthnum3 + 10) + \", \" + \"and {}th month\".format(monthnum3 + 11) + \", \" + \"and {}th month\".format(monthnum3 + 12) + \", \" + \"and {}th month\".format(monthnum3 + 13) + \", \" + \"and {}th mont"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 >= 1 and monthnum3 <= 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3)<1 or int(monthnum3)>12:\n        return None\n    else:\n        if int(monthnum3)==1 or int(monthnum3)==3 or int(monthnum3)==5 or int(monthnum3)==7 or int(monthnum3)==8 or int(monthnum3)==10 or int(monthnum3)==12:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 0<=monthnum3<=12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=n*n\n    for i in range(0,n):\n        for j in range(0,n):\n            # print(arr[i])\n            # print(arr[j])\n            if arr[i]==arr[j]==0:\n                continue\n            elif arr[i]!=arr[j] and arr[i]!=0:\n                min_diff=min(min_diff,abs(arr[i]-arr[j]))\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i = 0\n    j = 0\n    while i < n:\n        if arr[i]!= arr[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j-1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[0]\n    b = arr[-1]\n    #check whether a and b are in the array\n    if a > b:\n        a,b = b,a\n    #if a is in the array then calculate the difference\n    if a in arr:\n        i = arr.index(a)\n        diff = arr[i+1] - arr[i]\n        return diff\n    else:\n        return float('inf')\n    \ndef find_pairs(arr,n): \n    '''\n    Write a python function to find all the pairs of elements in an array.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [(arr[0],arr[0])]\n    else:\n        a = arr[0]\n        b = arr[-1]\n        if a == b:\n            return [(a,a)] + find_pairs(arr,n-1)\n        elif a > b:\n            a,b = b,a\n        else:\n            return [(a,b)] + find_pairs(arr,n-1)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    ans = []\n    for i in range(n-1):\n        ans.append(arr[i+1] - arr[i])\n    return ans[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    return max(abs(arr[i]-arr[i-1]) for i in range(2,len(arr)))\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Your code here\n    return arr[0]-arr[1]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff=0\n    for i in range(n-1):\n        diff=abs(arr[i] - arr[i+1])\n        if(diff>diff):\n            diff=diff\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp = arr[0]\n    min_diff = arr[0]\n    count = 0\n    \n    for i in range(1,n):\n        if temp < arr[i]:\n            count = count + 1\n            temp = arr[i]\n    \n    for i in range(n):\n        if temp < arr[i]:\n            count = count + 1\n            temp = arr[i]\n        \n    for i in range(n):\n        if arr[i] - min_diff < count:\n            min_diff = arr[i] - min_diff\n    \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i,j,temp_diff=0,0,0\n    for i in range(n):\n        for j in range(n):\n            temp_diff=arr[i]-arr[j]\n            if temp_diff<0:\n                temp_diff*=-1\n                break\n            if temp_diff==0:\n                continue\n            elif temp_diff==arr[j]:\n                return temp_diff\n            else:\n                temp_diff=arr[j]-arr[i]\n                if temp_diff==0:\n                    return temp_diff\n                elif temp_diff==arr[i]:\n                    return temp_diff\n    return temp_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len([i for i in str if i.isdigit()])\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = str.count('0') + str.count('1')\n    print(num)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # TODO: Write your code here\n    # return len(str)\n    ctr = 0\n    for char in str:\n        if char == '0':\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if not str:\n        return 0\n    d=0\n    for i in str:\n        if i.isdigit():\n            d+=1\n    return d\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if(str[i] == '0' or str[i] == '1'):\n            ctr = ctr + 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    total_digits = 0\n    for char in str:\n        if char.isdigit():\n            total_digits += 1\n    return total_digits\n    \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n % 2)!= 0: \n        return False\n    elif (n % 3) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 0: \n        return -1\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n % 2 == 1: \n        return 1 + is_polite(n - 1) \n    if n % 2 == 0: \n        return 1 + is_polite(n - 1) \n    return is_polite(n - 1) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0:\n        return 0\n    \n    if n==1:\n        return 1\n    \n    if n==2:\n        return 3\n    \n    if n==3:\n        return 4\n    \n    if n==4:\n        return 6\n    \n    if n==5:\n        return 9\n    \n    if n==6:\n        return 12\n    \n    if n==7:\n        return 14\n    \n    if n==8:\n        return 16\n    \n    if n==9:\n        return 18\n    \n    if n==10:\n        return 20\n    \n    if n==11:\n        return 21\n    \n    if n==12:\n        return 22\n    \n    if n==13:\n        return 23\n    \n    if n==14:\n        return 24\n    \n    if n==15:\n        return 25\n    \n    if n==16:\n        return 26\n    \n    if n==17:\n        return 27\n    \n    if n==18:\n        return 28\n    \n    if n==19:\n        return 29\n    \n    if n==20:\n        return 30\n    \n    if n==21:\n        return 31\n    \n    if n==22:\n        return 32\n    \n    if n==23:\n        return 33\n    \n    if n==24:\n        return 34\n    \n    if n==25:\n        return 35\n    \n    if n==26:\n        return 36\n    \n    if n==27:\n        return 37\n    \n    if n==28:\n        return 38\n    \n    if n==29:\n        return 39\n    \n    if n==30:\n        return 40\n    \n    if n==31:\n        return 41\n    \n    if n==32:\n        return 42\n    \n    if n==33:\n        return 43\n    \n    if n==34:\n        return 44\n    \n    if n==35:\n        return 45\n    \n    if n==36:\n        return 46\n    \n    if n==37:\n        return 47\n    \n    if n==38:\n        return 48\n    \n    if n==39:\n        return 49\n    \n    if n==40:\n        return 50\n    \n    if n==41:\n        return 51\n    \n    if n==42:\n        return 52\n    \n    if n==43:\n        return 53\n    \n    if n==44:\n        return 54\n    \n    if n==45:\n        return 55\n    \n    if n==46:\n        return 56\n    \n    if n==47:\n        return 57\n    \n    if n==48:\n        return 58\n    \n    if n==49:\n        return 59\n    \n    if n==50:\n        return 60\n    \n    if n==51:\n        return 61\n    \n    if n==52:\n        return 62\n    \n    if n==53:\n        return 63\n    \n    if n==54:\n        return 64\n    \n    if n==55:\n        return 65\n    \n    if n==56:\n        return 66\n    \n    if n==57:\n        return 67\n    \n    if n==58:\n        return 68\n    \n    if n==59:\n        return 69\n    \n    if n==60:\n        return 70\n    \n    if n==61:\n        return 71\n    \n    if n==62:\n        return 72\n    \n    if n==63:\n        return 73\n    \n    if n==64:\n        return 74\n    \n    if n==65:\n        return 75\n    \n    if n==66:\n        return 76\n    \n    if n==67:\n        return 77\n    \n    if n==68:\n        return 78\n    \n    if n==69:\n        return 79\n    \n    if n==70:\n        return 80\n    \n    if n==71:\n        return 81\n    \n    if n==72:\n        return 82\n    \n    if n==73:\n        return 83\n    \n    if n==74:\n        return 84\n    \n    if n==75:\n        return 85\n    \n    if n==76:\n        return 86\n    \n    if n==77:\n        return 87\n    \n    if n==78:\n        return 88\n    \n    if n==79:\n        return 89\n    \n    if n==80:\n        return 90\n    \n    if n==81:\n        return 91\n    \n    if n==82:\n        return 92\n    \n    if n==83:\n        return 93\n    \n    if n==84:\n        return 94\n    \n    if n==85:\n        return 95\n    \n    if n==86:\n        return 96\n    \n    if n==87:\n        return 97\n    \n    if n==88:\n        return 98\n    \n    if n==89:\n        return 99\n    \n    if n==90:\n        return 100\n    \n    if n==91:\n        return 101\n    \n    if n==92:\n        return 102\n    \n    if n==93:\n        return 103\n    \n    if n==94:\n        return 104\n    \n    if n==95:\n        return 105\n    \n    if n==96:\n        return 106\n    \n    if n==97:\n        return 107\n    \n    if n==98:\n        return 108\n    \n    if n==99:\n        return 109\n    \n    if n==100:\n        return 110\n    \n    if n==101:\n        return 111\n    \n    if n==102:\n        return 112\n    \n    if n==103:\n        return 113\n    \n    if n==104:\n        return 114\n    \n    if n==105:\n        return 115\n    \n    if n==106:\n        return 116\n    \n    if n==107:\n        return 117\n    \n    if n==108:\n        return 118\n    \n    if n==109:\n        return 119\n    \n    if n==110:\n        return 120\n    \n    if n==111:\n        return 121\n    \n    if n==112:\n        return 122\n    \n    if n==113:\n        return 123\n    \n    if n==114:\n        return 124\n    \n    if n==115:\n        return 125\n    \n    if n==116:\n        return 126\n    \n    if n==117:\n        return 127\n    \n    if n==118:\n        return 128\n    \n    if n==119:\n        return 129\n    \n    if n==120:\n        return 130\n    \n    if n==121:\n        return 131\n    \n    if n==122:\n        return 132\n    \n    if n==123:\n        return 133\n    \n    if n==124:\n        return 134\n    \n    if n==125:\n        return 135\n    \n    if n==126:\n        return 136\n    \n    if n==127:\n        return 137\n    \n    if n==128:\n        return 138\n    \n    if n==129:\n        return 139\n    \n    if n==130:\n        return 140\n    \n    if n==131:\n        return 141\n    \n    if n==132:\n        return 142\n    \n    if n==133:\n        return 143\n    \n    if n==134:\n        return 144\n    \n    if n==135:\n        return 145\n    \n    if n==136:\n        return 146\n    \n    if n==137:\n        return 147\n    \n    if n==138:\n        return 148\n    \n    if n==139:\n        return 149\n    \n    if n==140:\n        return 150\n    \n    if n==141:\n        return 151\n    \n    if n==142:\n        return 152\n    \n    if n==143:\n        return 153\n    \n    if n==144:\n        return 154\n    \n    if n==145:\n        return 155\n    \n    if n==146:\n        return 156\n    \n    if n==147:\n        return 157\n    \n    if n==148:\n        return 158\n    \n    if n==149:\n        return 159\n    \n    if n==150:\n        return 160\n    \n    if n==151:\n        return 161\n    \n    if n==152:\n        return 162\n    \n    if n==153:\n        retur"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    fibonacci_series = [0, 1, 1]\n    for i in range(2, int(math.sqrt(n))+1):\n        fibonacci_series.append(fibonacci_series[i-2] + fibonacci_series[i-1])\n    return fibonacci_series[n]\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n=int(n)\n    if n>1:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        f=n//10\n        return(nth_polite)\n    elif n==0:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==1:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==2:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==3:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==4:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==5:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==6:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==7:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==8:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==9:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==10:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==11:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==12:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==13:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==14:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10\n        i=n//10\n        j=n//10\n        k=n//10\n        l=n//10\n        m=n//10\n        nth_polite=n//10\n        return(nth_polite)\n    elif n==15:\n        a=n//10\n        b=n//10\n        c=n//10\n        d=n//10\n        e=n//10\n        f=n//10\n        g=n//10\n        h=n//10"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_polite(n-1) and not is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(1,n):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime(n): \n    '''\n    Write a function to determine whether a number is prime. geeksforgeeks.org/prime-numbers-in-python/\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n == 1 or n == 2:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n > 1:\n        if n % 6 > 0:\n            return False\n        if n % 5 > 0:\n            return False\n        for i in range(5,n//2+1):\n            if n % i == 0:\n                return False\n        return True\n    \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # your code goes here\n    if n<=0:\n        return False\n    elif n==1:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        p = math.floor(n/2)\n        if is_polite(p)==True:\n            if n%2==0:\n                return False\n            else:\n                return True\n        else:\n            if n%2==0:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 0\n    elif n < 1: \n        return -1\n    else: \n        k = 1\n        while n // k!= 0: \n            if n % k == 0: \n                return k \n            k += 1\n        return n % k\ndef nth_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 0\n    elif n < 1: \n        return -1\n    else: \n        p = is_polite(n)\n        return p * n // (p - 1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    import itertools\n    #Initializing\n    n=int(n)\n    if n<1:\n        return False\n    elif n==1:\n        return True\n    else:\n        #Formula\n        l=[]\n        for i in itertools.permutations(range(0,n),n):\n            l.append(list(i))\n        #print(l)\n        #print(sum(l[n-1]))\n        return sum(l[n-1])%10!=0\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for x in range(len(l1)):\n        for y in range(x+1, len(l1)):\n            l.append((l1[x], l1[y]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1.sort()\n    return [(i, i) for i in l1]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for item in l1:\n        result.append((item, item + 1))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = list(map(lambda x : (x[0],x[1]),zip(*[iter(l1)])))\n    return l\n    \n    \n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list_pairs = []\n    # Get the length of the list\n    list_length = len(l1)\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s1 = set(l1)\n    s2 = set()\n    for x in l1:\n        if x!= x[0]:\n            s2.add(x)\n    return list(zip(s1, s2))\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    L = []\n    for i in range(len(l1)):\n        if i < len(l1) - 1 and l1[i + 1] == l1[i] + 1:\n            L.append((l1[i], l1[i + 1]))\n        elif i == len(l1) - 1:\n            L.append((l1[i], l1[0]))\n        else:\n            L.append((l1[i], l1[i + 1]))\n    return L\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst = []\n    for i in range(len(l1)-1):\n        for j in range(i+1,len(l1)):\n            if l1[i] == l1[j] and l1[i] not in lst:\n                lst.append(l1[i])\n    return lst\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s=list(set(l1))\n    s.sort()\n    res=[]\n    for i in range(len(l1)):\n        if i!=0:\n            if l1[i-1]==l1[i]:\n                res.append([l1[i-1],l1[i]])\n            else:\n                break\n        else:\n            res.append([l1[0],l1[0]])\n    return res\ndef get_closest(l1):\n    '''\n    Write a function to return the closest number in a given list.\n    '''\n    #for i in range(len(l1)):\n        #if abs(l1[i]-l1[i-1])<=1:\n            #return l1[i]\n    if len(l1)==1:\n        return l1[0]\n    else:\n        p=pair_wise(l1)\n        if p==l1:\n            return l1[0]\n        else:\n            return get_closest(p)\ndef compare(l1,l2):\n    '''\n    Write a function to compare two list.\n    '''\n    for i in range(len(l1)):\n        if l1[i]<l2[i]:\n            return -1\n        elif l1[i]>l2[i]:\n            return 1\n    return 0\ndef get_min_distance(l1):\n    '''\n    Write a function to return the min distance from a list.\n    '''\n    min_dist=l1[0]\n    for i in range(len(l1)):\n        if compare(l1[i],min_dist)==-1:\n            min_dist=l1[i]\n        else:\n            continue\n    return min_dist\ndef num_distances(l1):\n    '''\n    Write a function to return the distances from a list.\n    '''\n    distances=list()\n    for i in range(len(l1)):\n        distances.append(get_min_distance(l1[i]))\n    return distances\ndef get_min_distance(l1):\n    '''\n    Write a function to return the min distance from a list.\n    '''\n    min_dist=l1[0]\n    for i in range(len(l1)):\n        if compare(l1[i],min_dist)==-1:\n            min_dist=l1[i]\n        else:\n            continue\n    return min_dist\ndef get_product(l1):\n    '''\n    Write a function to return the product of a list.\n    '''\n    result=1\n    for i in range(len(l1)):\n        result*=l1[i]\n    return result\ndef get_averages(l1):\n    '''\n    Write a function to return the averages of a list.\n    '''\n    mean1=get_min_distance(l1)\n    mean2=get_min_distance(l1)\n    return mean1,mean2\ndef main():\n    l1=list(map(int,input().split()))\n    print(get_closest(l1))\n    print(get_product(l1))\n    print(get_averages(l1))\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        if l1[i] == l1[i + 1]:\n            continue\n        if l1[i] in pairs:\n            continue\n        pairs.append((l1[i], l1[i + 1]))\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    pairs = 0\n    for i in arr:\n        if i + sum in arr:\n            pairs = pairs + 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == sum):\n                pairs += 1\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in arr:\n        if sum - i == i:\n            pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        if sum - i == i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    # arr = [6, 2, 1, 1, 5, 4]\n    # sum = 7\n    \n    # print(get_pairs_count(arr, sum))\n    \n    if sum in arr:\n        result = arr.count(sum)\n    \n    return result\n    \n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if sum == arr[i] + arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict_count = {}\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i+j == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_len = len(arr)\n    count = 0\n    for i in range(0, arr_len - 1):\n        for j in range(i + 1, arr_len):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = li1[:] - li2[:]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1)-len(li2)\n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    n=len(li1)\n    m=len(li2)\n    for i in range(0,n):\n        if li1[i]!=li2[i]:\n            return li1[i]\n    return \"Empty\"\n    \n    \n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #Initialize empty list\n    diff = []\n    #Loop over list\n    for i in range(len(li1)):\n        #Check to see if elements in list are not same\n        #if not, add to list\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    #return difference\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1[:-1] - li2[:-1]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diffs = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diffs.append(li1[i])\n    return diffs\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(len(li1)-len(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if li1 == None or li2 == None:\n        return li1,li2\n    else:\n        return li1-li2,li1,li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list=[]\n    for i in range(len(li1)-1):\n        diff_list.append(li1[i+1]-li2[i])\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list1=[]\n    list2=[]\n    for i in range(len(li1)):\n        list1.append(li1[i])\n    for j in range(len(li2)):\n        list2.append(li2[j])\n    return list(set(list1)-set(list2))\n        "
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n > 0 : \n        n_3 = int(n/3) \n        n_2 = int(n/2) \n        n_1 = int(n/1) \n        sum = n_3**2 + n_2**2 + n_1**3 \n        print(sum)\n    else : \n        print(\"enter a positive integer\")\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(n, 0, -4): \n        if num%2!= 0:\n            sum+= (num**4) \n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    if n % 4 == 0 : \n        for i in range(1, n, 2) : \n            sum = sum + i**2\n    return sum\n    \n    \nprint(odd_num_sum(5))"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 1 : return 1\n    if n % 2 == 0 : return odd_num_sum(n - 1)\n    return odd_num_sum(n - 1) * 3\n    \ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    if n == 1 : return 1\n    if n % 2 == 0 : return even_num_sum(n - 1)\n    return even_num_sum(n - 1) * 2\n    \ndef square_root(n) : \n    '''\n    Write a python function to find the square root of a number.\n    '''\n    if n == 1 : return 1\n    if n % 2 == 0 : return square_root(n - 1)\n    return even_num_sum(n) * 2\n    \ndef sum_of_squares(n) : \n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    if n == 1 : return 1\n    if n % 2 == 0 : return square_root(n - 1)\n    return square_root(n - 1) * n\n    \ndef sqrt_num(n) : \n    '''\n    Write a python function to find the square root of a number.\n    '''\n    if n == 1 : return 1\n    if n % 2 == 0 : return square_root(n - 1)\n    return even_num_sum(n) * 2\n    \ndef factorial_number(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 1 : return 1\n    if n % 2 == 0 : return n * factorial_number(n - 1)\n    return n * factorial_number(n - 1) * 2\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 1 : return False\n    if n == 2 : return True\n    if n % 2 == 0 : return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        if n % i == 0 :\n            return False\n    return True\n    \ndef is_prime_v2(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 1 : return False\n    if n == 2 : return True\n    if n % 2 == 0 : return False\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2) :\n        if n % i == 0 : return False\n    return True\n    \n    "
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Add your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    n = int(n)\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n<=0 : \n        print('Enter a positive integer')\n    else : \n        s = 0\n        for i in range(0,n+1) :\n            s = s + 4 * i**2\n        print(s)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    summ = 0\n    for i in range(n + 1):\n        summ += i**3\n    print(summ)\n    return summ\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 1 : return n\n    return n**4\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Using the n as input, find the sum\n    def even_sum(n) : \n        '''\n        Find the sum of even numbers\n        '''\n        sum = 0\n        for x in range(1, n+1) : \n            if x % 2 == 0 :\n                sum += x \n        return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    operator = {\"+\",\"-\",\"*\",\"/\"}\n    for i in exp:\n        if i in operator:\n            if i == \")\":\n                if len(stack) == 0:\n                    return False\n                else:\n                    return False\n            else:\n                if operator.index(i) > operator.index(stack[-1]):\n                    return False\n                else:\n                    stack.append(i)\n        else:\n            return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    check_count = 0\n    stack = deque()\n    \n    for i in range(len(exp)):\n        # print(i)\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                check_count += 1\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \n    return check_count == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # checking for parentheses in given expression\n    symbols = list(exp)\n    for i in range(len(symbols)):\n        if symbols[i] == '(':\n            symbols[i] = ')'\n        elif symbols[i] == ')':\n            symbols[i] = '('\n    for i in range(len(symbols)):\n        if symbols[i] == '{':\n            symbols[i] = '}'\n        elif symbols[i] == '}':\n            symbols[i] = '{'\n    for i in range(len(symbols)):\n        if symbols[i] == '+':\n            symbols[i] = '-'\n        elif symbols[i] == '*':\n            symbols[i] = '/'\n        elif symbols[i] == '-':\n            symbols[i] = '*'\n        elif symbols[i] == '^':\n            symbols[i] = '**'\n        elif symbols[i] == '%':\n            symbols[i] = '%'\n        elif symbols[i] == ')':\n            symbols[i] = '('\n        elif symbols[i] == ']' or symbols[i] == '}':\n            symbols[i] = '['\n        else:\n            if symbols[i] =='':\n                symbols[i] =''\n            elif symbols[i] == '+':\n                symbols[i] = '+'\n            elif symbols[i] == '*':\n                symbols[i] = '*'\n            elif symbols[i] == '-':\n                symbols[i] = '-'\n            elif symbols[i] == '^':\n                symbols[i] = '^'\n            elif symbols[i] == '%':\n                symbols[i] = '%'\n            elif symbols[i] == ')':\n                symbols[i] = ')'\n            elif symbols[i] == ']' or symbols[i] == '}':\n                symbols[i] = '['\n            else:\n                symbols[i] = symbols[i]\n    return ''.join(symbols)\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    if exp[0] == '(' or exp[0] == ')':\n        if exp[0] == '(' and check_expression(exp[1:]) is False:\n            return False\n        if exp[0] == ')' and check_expression(exp[1:]) is False:\n            return False\n    return check_expression(exp[1:])\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    '''\n    1. Convert the expression to deque\n    2. check if the deque is empty or if the deque has a full parentheses\n    '''\n    if is_balanced_deque(exp):\n        if len(exp) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in ['(', ')']:\n            if len(stack)!= 0:\n                stack.pop()\n            else:\n                return False\n        elif c == '{':\n            stack.append('{')\n        elif c == '}':\n            if len(stack)!= 0 and stack[-1]!= '(':\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([(exp, 0)])\n    while stack:\n        top_exp, depth = stack.popleft()\n        if depth > 0:\n            if top_exp == '(' or top_exp == '[' or top_exp == '{':\n                stack.append((top_exp, depth + 1))\n            else:\n                return False\n        elif depth == 0:\n            if top_exp!= ')':\n                return False\n            else:\n                stack.append((top_exp, depth + 1))\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp[0] == '(' or exp[-1] == ')':\n        return False\n    \n    open_count = 0\n    close_count = 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 1 and exp[0] == '(' or exp[0] == '{' or exp[0] == '[':\n        return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = deque()\n    count = 0\n    parentheses_chars = ['(', ')', '{', '}', '[', ']']\n    parentheses_count = 0\n    for ch in exp:\n        if ch in parentheses_chars:\n            parentheses_count += 1\n        elif ch not in parentheses_chars:\n            if s:\n                return False\n            else:\n                s.append(ch)\n    if s:\n        return False\n    if parentheses_count!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.strip()\n    print(test_str)\n    #print(test_str.count(' '))\n    #print(test_str.split())\n    test_str = test_str.split()\n    print(test_str)\n    #print(test_str.count(' '))\n    #print(test_str.split())\n    start_index = 0\n    end_index = 0\n    for i in test_str:\n        if len(i) >= K:\n            print(i)\n            end_index += 1\n        else:\n            print(i)\n            start_index += 1\n    print(start_index)\n    print(end_index)\n    return test_str[start_index:end_index]\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    start = 0\n    end = 0\n    final = \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_l = []\n    for word in test_str.split():\n        if len(word) == K:\n            word_l.append(word)\n    return''.join(word_l)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K > len(test_str):\n        return \"\"\n    if len(test_str) == 0:\n        return \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_new = ''\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            str_new += test_str[i]\n    return str_new\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # create empty string\n    ans = \"\"\n    # iterate through string\n    for word in test_str.split():\n        # if length of word is greater than K\n        if len(word) > K:\n            # delete first word and second word\n            ans += word[0:K] + word[K:]\n    return ans\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) < K:\n        return test_str\n    else:\n        res = []\n        for word in test_str:\n            if len(word) == K:\n                res.append(word)\n        return \"\".join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    l = len(test_str)\n    if K < l:\n        return ''\n    if K == l:\n        return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    print(test_str)\n    print(\"Length\", len(test_str))\n    output = \"\"\n    # I have to use set here because I don't want to keep duplicates in a list\n    # I've decided that I want to keep a set and then remove a word from it.\n    # I don't want to keep the same word twice.\n    # I don't want to keep words with less than k characters.\n    set_word = set()\n    for word in test_str.split():\n        if len(word) == K:\n            set_word.add(word)\n            output += word + \"\\n\"\n    output = list(output)\n    for i in range(len(output)):\n        for j in range(i + 1, len(output)):\n            word = output[i]\n            if len(word) == K:\n                if word not in set_word:\n                    output[j] = word\n    print(output)\n    return \" \".join(output)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # If the string is empty\n    if test_str == \"\":\n        return \"\"\n        \n    # If there is only one word\n    if len(test_str) == 1:\n        return test_str[1:]\n        \n    # If there is more than one word\n    else:\n        ls = []\n        ls = list(test_str)\n        ls.sort()\n        \n        for i in range(len(ls)):\n            if len(ls[i]) == K:\n                ls[i] = \"\"\n        return \"\".join(ls)\n        \nif __name__ == \"__main__\":\n    test_str = \"alexandra\"\n    K = 2\n    print(remove_length(test_str, K))"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #make array of values\n    array_text = []\n    for i in range(len(text)):\n        array_text.append(text[i])\n    #make array of occurence\n    array_occ = []\n    for i in range(len(pattern)):\n        array_occ.append(pattern[i])\n    #find substring\n    find_substring = []\n    for i in range(len(text)):\n        if pattern[0] in array_occ:\n            #print(text[i])\n            #print(pattern[0])\n            j = text.find(pattern[0],i)\n            #print(\"j\")\n            #print(j)\n            #print(text[j:j+len(pattern[0])])\n            if text[j:j+len(pattern[0])]==pattern[1]:\n                #print(\"j\")\n                #print(j)\n                find_substring.append(j)\n        else:\n            find_substring.append(0)\n    #find index\n    for i in range(len(find_substring)-1):\n        #print(find_substring[i],find_substring[i+1])\n        if find_substring[i]>find_substring[i+1]:\n            #print(\"i\")\n            #print(i)\n            #print(find_substring[i])\n            #print(find_substring[i+1])\n            #print(\"match\")\n            return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if(pattern==\".\"):\n        return None\n    else:\n        substrings = re.finditer(pattern,text)\n        for sub in substrings:\n            sub_list = list(sub.span())\n            if(sub_list[0]>0 and sub_list[1]>0):\n                if(text[sub_list[0]-1]==sub_list[0] or text[sub_list[0]-1]=='.' and text[sub_list[1]-1]!='.'):\n                    return sub\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern = re.compile(pattern)\n    pattern_re = pattern.replace('[\\s]',' ')\n    #text = pattern.sub('',text)\n    #pattern_re = pattern.replace('[\\s]',' ')\n    #regex = re.compile(pattern_re)\n    #print(regex.finditer(text))\n    count = 0\n    for i in re.finditer(pattern_re, text):\n        start = i.start()\n        end = i.end()\n        if start > 0 and start < len(text) - 1:\n            if end > start + 1:\n                if text[start:end] == pattern:\n                    count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Split the pattern into an array\n    pattern = pattern.split()\n    # Create a dictionary to associate each sub-pattern to a positive value\n    map = {}\n    # If the sub-pattern is not a string\n    if not isinstance(pattern, str):\n        # Sort the pattern array by the pattern\n        pattern.sort()\n        # Loop through the pattern and assign each sub-pattern position to the value\n        for pos,pattern in enumerate(pattern):\n            map[pattern] = pos\n        return map\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    search = re.search(pattern,text)\n    if search:\n        start, end = search.span()\n        return start, end\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.finditer(pattern,text)\n    for i in m:\n        if i.start() <= len(text) <= i.end():\n            return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # do something similar to Java\n    # substring = pattern\n    # for i in range(0,len(text)):\n    #     if substring in text[i:len(text)]:\n    #         print(i,text[i:len(text)])\n    # return None\n    \n    if len(pattern) == 1:\n        return text.find(pattern[0])\n    elif len(pattern) > 1:\n        subst = []\n        for i in range(len(pattern)):\n            subst.append(text[pattern[i]])\n        for i in range(0,len(text)):\n            if text[i] in subst:\n                print(i,text[i])\n                return i\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.finditer(pattern,text)\n    for item in m:\n        print(item.start())\n        print(item.end())\n        print(item.span())\n        \ndef get_words_in_list(file_name, word_list):\n    '''\n    Read the words in a file and create a list of all words in the file\n    '''\n    \n    file_in = open(file_name, 'r')\n    words_in_list = []\n    for word in file_in:\n        words_in_list.append(word.lower())\n        \n    #Remove all non-word characters\n    word_list_without_non_word=[]\n    for word in words_in_list:\n        if not re.search('[^A-Za-z0-9]', word):\n            word_list_without_non_word.append(word)\n    \n    #Remove all empty strings\n    word_list_without_empty=[]\n    for word in word_list_without_non_word:\n        if word!= \"\":\n            word_list_without_empty.append(word)\n        \n    #Remove all duplicate words\n    word_list_without_duplicate=[]\n    for word in word_list_without_empty:\n        if word not in word_list_without_duplicate:\n            word_list_without_duplicate.append(word)\n    \n    word_list = word_list_without_duplicate\n    return word_list\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m is None:\n        return None\n    \n    return (m.start(),m.end()+len(pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.search(pattern,text).start()\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = []\n    for num in nums:\n        if num%2!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    i=0\n    while i<len(nums):\n        if (nums[i] %2)!=0:\n            return False\n        else:\n            i+=1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(i%2==1 for i in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2==1:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code here\n    \n    return len([i for i in nums if i % 2 == 1]) == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i % 2] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return any(num % 2 == 0 for num in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return nums[::2]\n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return nums[1::2]\n    \ndef main():\n    \n    print('Odd numbers: ')\n    print(odd_position(list(map(int,input().split()))))\n    print('Even numbers: ')\n    print(even_position(list(map(int,input().split()))))\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #return len([i for i in range(len(nums)) if i % 2 == 1]) == 1\n    return len([i for i in range(len(nums)) if nums[i] % 2 == 1]) == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = 'aeiou'\n    \n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for letter in test_str:\n        if letter in \"aeiou\":\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper() == True:\n            count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for char in test_str:\n        if char in \"aeiouAEIOU\":\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'AEIOU'\n    count = 0\n    for character in test_str:\n        if character in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    for letter in test_str:\n        if letter in 'AEIOUaeiou':\n            count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    \n    for i in test_str:\n        if i in ['a','e','i','o','u','A','E','I','O','U']:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in VOWELS:\n            if char in {'a', 'e', 'i', 'o', 'u'}:\n                count += 1\n    return count\n    \ndef check_if_multiple_vowels(test_str):\n    '''\n    Write a function to check if a given string has any vowels in it.\n    '''\n    count = 0\n    for char in test_str:\n        if char in VOWELS:\n            count += 1\n    return count\n    \ndef check_if_vowels(test_str):\n    '''\n    Write a function to check if a given string has any vowels in it.\n    '''\n    count = 0\n    for char in test_str:\n        if char in VOWELS:\n            count += 1\n    return count\n    \ndef remove_vowels(test_str):\n    '''\n    Write a function to remove all the vowels from a given string.\n    '''\n    new_str = \"\"\n    for char in test_str:\n        if char not in VOWELS:\n            new_str += char\n    return new_str\n    \ndef remove_duplicates(test_str):\n    '''\n    Write a function to remove any duplicate characters from a given string.\n    '''\n    new_str = \"\"\n    for char in test_str:\n        if char not in new_str:\n            new_str += char\n    return new_str\n    \ndef test():\n    test_str = \"This is a test\"\n    print(count_vowels(test_str))\n    print(check_if_multiple_vowels(test_str))\n    print(check_if_vowels(test_str))\n    print(remove_vowels(test_str))\n    print(remove_duplicates(test_str))\n    print(test_str)\n    \ntest()\n    "
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    ans = 0\n    for i in range(0, len(arr)):\n        if arr[i]!= 0:\n            ans = ans + arr[i]\n    return ans\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a empty list\n    a = []\n    # checking for the existence of an element in the list\n    for i in arr:\n        if i not in a:\n            a.append(i)\n    # returning the sum of all the elements\n    return sum(a)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = [int(x) for x in arr]\n    output_sum = 0\n    for i in range(len(arr)): \n        if (arr[i]!= arr[i]):\n            output_sum += arr[i] \n    return output_sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for i in arr:\n        if i == result:\n            result += 1\n        else:\n            result += 1\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # traverse through the given list \n    sum = 0 \n    for i in range(0, len(arr)): \n        # if the list contains at least one element, \n        # add it to the sum \n        if arr[i]!= arr[i] and arr[i]!= 0: \n            sum += arr[i] \n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    sum=0\n    for i in arr:\n        if i not in sum:\n            sum = sum +i\n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    temp=[]\n    for i in range(0,len(arr)-1):\n        if arr[i]==arr[i+1]:\n            temp.append(arr[i])\n    return temp\nprint(find_sum([1,3,3,6,6,9])"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # initialize the counters \n    count = 0\n    for i in range(0, len(arr)):\n        count = count + 1\n    # find the sum of all the elements \n    # you need to return the whole of the array \n    # if the list does not have any repeated elements, \n    # then return -1 \n    # because this case will happen if \n    # the list is empty \n    return count \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    output = 0\n    for elem in arr:\n        if elem not in output:\n            output += elem\n    return output\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    sublist = []\n    group = groupby(list1, lambda x: x in x)\n    for k,g in group:\n        for j in g:\n            sublist.append(list(j))\n            \n    return sublist\n        \n    \ndef duplicate_elements(list1):\n    '''\n    Write a function to find the duplicates of an input list.\n    '''\n    \n    sublist = []\n    group = groupby(list1, lambda x: x in x)\n    for k,g in group:\n        for j in g:\n            sublist.append(list(j))\n            \n    return sublist\n    \ndef sort_from_last(list1):\n    '''\n    Write a function to sort a given list using the last element of a given list.\n    '''\n    \n    sublist = []\n    group = groupby(list1, lambda x: x in x)\n    for k,g in group:\n        for j in g:\n            sublist.append(list(j)[-1])\n            \n    return sublist\n    \ndef duplicate_count(list1):\n    '''\n    Write a function to count the number of duplicate elements in a given list.\n    '''\n    \n    return len([i for i in list1 if i in list1])\n    \n    \ndef test():\n    '''\n    Write a function to sort a given list.\n    '''\n    \n    list1 = [1,1,2,2,3,3,3,4,4,4,5,5,6,6,7,7,7,7,7,8,8,8,8,9,9,9,10]\n    print(pack_consecutive_duplicates(list1))\n    print(duplicate_elements(list1))\n    print(sort_from_last(list1))\n    print(duplicate_count(list1))\n    print(len(list1))\n    \ntest()\n    "
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for element in list1:\n        if not element in res:\n            res.append(element)\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    list3 = []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(sorted(list1), lambda x: x[0])]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    result = []\n    i = 0\n    j = 0\n    while i < len(list1):\n        # O(n)\n        while j < len(list1) and list1[j]!= list1[i]:\n            j += 1\n        if j < len(list1):\n            res.append(list1[i:j])\n            result.append(list1[i])\n            i = j\n        j = i + 1\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n        if i not in list3:\n            list3.append(i)\n    return list2,list3\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    max_len = 0\n    new_list = []\n    for e in list1:\n        if e in new_list:\n            #print(new_list)\n            new_list.pop(new_list.index(e))\n            if len(new_list) > max_len:\n                max_len = len(new_list)\n        else:\n            new_list.append(e)\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    duplicates = []\n    for i in list1:\n        for j in list(set(list1)):\n            if i == j:\n                duplicates.append(list(j))\n    return duplicates\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    last_position = 0\n    for i in list1:\n        if i not in output:\n            output.append(i)\n            last_position += 1\n        else:\n            if i in output:\n                output.remove(i)\n                output.append(i)\n                last_position += 1\n    return output[:-1]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    group_by_list = list(groupby(list1))\n    groups = [list(g) for _, g in groupby(list1)]\n    out_list = []\n    dup_list = []\n    for g in groups:\n        if not g:\n            continue\n        for i, e in enumerate(g):\n            if not e:\n                continue\n            out_list.append([i+1, e])\n        if len(g) > 1:\n            for e in g:\n                if e not in dup_list:\n                    dup_list.append(e)\n    return out_list\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # YOUR CODE HERE\n    tup = {}\n    num_lists = len(list1)\n    for i in range(num_lists):\n        for j in range(i, num_lists):\n            if list1[i] == list1[j]:\n                tup[tuple(list1)] = tup[tuple(list1)] + 1\n    return tup\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_lst = {}\n    unique_list = []\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    from collections import Counter\n    counter = Counter(list1)\n    return counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    n = len(list1)\n    if n == 0:\n        return {}\n    d = {}\n    for i in range(n):\n        if list1[i] in d:\n            d[list1[i]] += 1\n        else:\n            d[list1[i]] = 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if not list1:\n        return {}\n    dic = {}\n    for i in range(len(list1)):\n        dic[tuple(list1[i])] = dic.get(tuple(list1[i]), 0) + 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    out_dict = {}\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] not in out_dict:\n            out_dict[list1[i]] = 0\n        out_dict[list1[i]] += 1\n        count += 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) == 1:\n        return {list1[0]:1}\n    elif len(list1) == 0:\n        return None\n    else:\n        return {list1[0]:len(list1) - 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for item in list1:\n        d[item] = d.get(item, 0) + 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    #Variables\n    length = len(list1)\n    dictionary = {}\n    \n    #Loop\n    for i in range(length):\n        #If element is already in dictionary, increment its count by 1\n        if list1[i] in dictionary:\n            dictionary[list1[i]] += 1\n        else:\n            #If element is not in dictionary, add it to dictionary with an entry for it\n            dictionary[list1[i]] = 1\n    \n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # you will need to create a dictionary that holds each list and its number of occurrences\n    \n    #example for the first list:\n    #[[1,2,3,4],[1,2,3],[4,3]]\n    #example for the second list:\n    #[[1,2,3,4,1],[1,2,3],[4,3,1]]\n    \n    unique_list = {}\n    \n    for i in list1:\n        for x in i:\n            if x not in unique_list.keys():\n                unique_list[x] = 1\n            else:\n                unique_list[x] += 1\n                \n    #print(unique_list)\n    \n    return unique_list\n    \ndef unique_lists(list1):\n    '''\n    Write a function that returns the number of lists in a list, and each of the lists contained within a tuple.\n    '''\n    # you will need to create a dictionary that holds each list and its number of occurrences\n    \n    #example for the first list:\n    #[[1,2,3,4],[1,2,3],[4,3]]\n    #example for the second list:\n    #[[1,2,3,4,1],[1,2,3],[4,3,1]]\n    \n    unique_list = {}\n    \n    for i in list1:\n        if i not in unique_list.keys():\n            unique_list[i] = 1\n        else:\n            unique_list[i] += 1\n            \n    return unique_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list:\n        total = test_list[0]\n        for i in test_list[1:]:\n            total = total + i\n        return total\n    else:\n        return 0\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    count=0\n    sums=[]\n    for i in test_list:\n        for j in test_list:\n            if i+j in test_list:\n                sums.append((i,j))\n    print(sums)\n    return sums\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = tuple(test_list[0])\n    print(sums)\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            sums = sums + (test_list[i][j])\n    print(sums)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if not test_list:\n        return []\n    if len(test_list) == 1:\n        return [test_list]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = list(tuple(test_list))\n    l = [i for i in l if sum(l)!= 0]\n    print (l)\n    return l\n    "
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #generate the list of all possible combinations of sums\n    #sort the list of tuples by the sum in descending order\n    #once sorted, calculate the number of combinations in that sum.\n    #return the list of tuples\n    tup_list = list(combinations(test_list,2))\n    tup_list.sort(key=lambda tup:tup[0]+tup[1], reverse=True)\n    return tup_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort(key = lambda x: x[0])\n    combos = []\n    combos = list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 1:\n        return [tuple(test_list)]\n    return [tuple(sorted(combination(t, 1))) for s in test_list for t in combinations(t, s)]\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list=test_list[:]\n    combs=[]\n    # looping through all the combinations and checking if there is any element with no combination\n    for i in range(len(test_list)+1):\n        combs.append(list(combinations(test_list,i)))\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    count = 0\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            result.append(j)\n            count = count + 1\n    print(result)\n    print(count)\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0: \n        return True\n    else:\n        return False\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    for i in range(2,math.sqrt(n)+1):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_prime2(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    for i in range(2,math.sqrt(n)+1):\n        if n%i==0:\n            return False\n    else:\n        return True\ndef is_prime3(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n%2==0:\n        return False\n    else:\n        if n==2:\n            return True\n        elif n%2==1:\n            return False\n        else:\n            for i in range(3,n-1,2):\n                if n%i==0:\n                    return False\n            else:\n                return True\ndef is_prime4(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime5(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef factorial(n) : \n    '''\n    Write a python function to calculate the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n==1 or n==0:\n        return 1\n    elif n<0:\n        return 0\n    else:\n        return n*factorial(n-1)\ndef is_prime6(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,math.sqrt(n)+1,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime7(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime8(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    elif n==4 or n==6 or n==9:\n        return True\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime9(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n==4 or n==6 or n==9:\n        return True\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime10(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n==4 or n==6 or n==9:\n        return True\n    else:\n        for i in range(3,n,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime11(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n==4 or n==6 or n==9:\n        return True\n    else:\n        for i in range(3,math.sqrt(n)+1,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime12(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n==4 or n==6 or n==9:\n        return True\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        else:\n            return True\ndef is_prime13(n) : \n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    elif n%2==0:\n        return False\n    elif n==4 or n==6 or n==9:\n        return True\n    else:\n        fo"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n % 2) == 0: \n        print (\"{0} is even\".format(n))\n        return True\n    else: \n        print (\"{0} is not even\".format(n))\n        return False \ndef count_primes(n): \n    '''\n    A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    You are given an integer n, check whether it is a prime number. If it is, return true, otherwise return false.\n    '''\n    # If n is not a prime number, return False\n    if n < 2: \n        return False\n    # If n is even, it is not prime\n    if n % 2 == 0:\n        return False\n    # It is a prime number \n    # No divisors \n    count = 0 \n    for i in range(3, n, 2):\n        if n % i == 0:\n            count += 1\n        # No divisors \n        if count > 2:\n            return False \n    # It is prime \n    return True \ndef find_prime_factors(n) : \n    '''\n    Check whether the given number can be written as a prime number without any multiple of itself.\n    '''\n    # The condition of if the number can be written as a prime number without any multiple of itself is not possible\n    if n < 2: \n        return False\n    # If the number can be written as a prime number without any multiple of itself, return true \n    if n == 2:\n        return True \n    # If the number can be written as a prime number without any multiple of itself, return false \n    if n % 2 == 0: \n        return False \n    # If the number can be written as a prime number without any multiple of itself, return false \n    # Also, if the number can be written as a prime number without any multiple of itself, return false \n    for i in range(3, math.sqrt(n) + 1, 2):\n        if n % i == 0: \n            return False \n    # Return true if it is a prime number \n    return True \ndef is_prime(n): \n    '''\n    Check whether the given number is a prime number.\n    '''\n    # If the given number is prime, return true \n    if n > 1: \n        # Iterate from 2 to the sqrt of the given number \n        for i in range(2, int(math.sqrt(n))+1): \n            # If the number is divisible by any other number \n            if n % i == 0: \n                return False \n        # If all numbers are divisible by i \n        # return true \n        if n == 2: \n            return True \n        # If it is not a prime number \n        return False \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1) :\n        if (n % i) == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if n % i == 0 : \n            divisors.append(i)\n    if len(divisors)!= 2 or (n - 1) % 2!= 0 : \n        return 'divisible'\n    return 'non-divisible'\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n%2 == 0 : \n        return \"Number is even\"\n    else : \n        return \"Number is odd\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0:\n            divisors_count += 1\n    if divisors_count == 2 :\n        return \"It's Even\"\n    else :\n        return \"It's Odd\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return 2\n    elif n%3 == 0:\n        return 3\n    elif n%5 == 0:\n        return 4\n    elif n%10 == 0:\n        return 5\n    else :\n        return 6\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # See here: https://realpython.com/python-count-divisors/\n    # Check divisors, return whether it's even\n    divisors = []\n    for i in range(1, n+1) :\n        if (n % i) == 0 :\n            divisors.append(i)\n    if len(divisors) % 2 == 0 :\n        return False\n    return True\ndef count_divisors_range(start, end) : \n    '''\n    Return the number of divisors of a number in the given range.\n    Range: start < end\n    '''\n    divisors = []\n    for i in range(start, end+1) :\n        if (i % 2!= 0) :\n            divisors.append(i)\n    return len(divisors)\ndef euler(m, n) : \n    '''\n    Return the sum of the prime numbers in the given range.\n    Range: m <= n <= 100\n    '''\n    sum = 0\n    for i in range(m, n+1) :\n        if count_divisors(i) == True :\n            sum = sum + i\n    return sum\ndef f16(n) : \n    '''\n    Return the sum of the primes in the given range.\n    Range: m <= n <= 100\n    '''\n    sum = 0\n    for i in range(1, n+1) :\n        if count_divisors_range(0, i) == 0 :\n            break\n        if count_divisors_range(i, n) == 0 :\n            break\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return int(math.sqrt(n)) - 1 == int(math.sqrt(n))\ndef main(): \n    '''\n    Functions for counting the number of divisors\n    '''\n    print(\"\\n\\n\\n\")\n    print(\"1. Count the number of divisors.\")\n    print(\"2. Check whether a number is divisible by the count of divisors.\")\n    choice = int(input(\"Select one of the following options : \\n\"))\n    if choice == 1:\n        print(\"\\n\\n\")\n        n = int(input(\"Enter a number : \"))\n        print(\"\\n\")\n        if count_divisors(n):\n            print(\"\\n\\n\")\n            print(\"The number is divisible by the count of divisors.\")\n            print(\"\\n\\n\")\n        else:\n            print(\"\\n\\n\")\n            print(\"The number is not divisible by the count of divisors.\")\n    elif choice == 2:\n        print(\"\\n\\n\")\n        num = int(input(\"Enter a number : \"))\n        print(\"\\n\")\n        if count_divisors(num):\n            print(\"\\n\\n\")\n            print(\"The number is divisible by the count of divisors.\")\n            print(\"\\n\\n\")\n        else:\n            print(\"\\n\\n\")\n            print(\"The number is not divisible by the count of divisors.\")\n    else:\n        print(\"\\n\\n\")\n        print(\"Invalid Input.\")\n        print(\"\\n\\n\")\n    \n    print(\"\\n\\n\")\n    \nmain("
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odds = sum(arr[i:i+2] for i in range(0, len(arr), 2))\n    return odds\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    s = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 1:\n            s = s + arr[i]\n        \n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sums = 0\n    if len(arr) < 2:\n        return sums\n    elif len(arr) % 2 == 0:\n        for i in range(0, len(arr), 2):\n            sums += arr[i]\n        return sums\n    else:\n        return sums + odd_length_sum(arr[0:len(arr)//2]) + odd_length_sum(arr[len(arr)//2:])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n        if (i % 2 == 1):\n            sum -= arr[i - 1]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_subarray = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_subarray.append(arr[i])\n    odd_subarray = []\n    for i in range(len(arr)-1):\n        if arr[i] % 2!= 0:\n            odd_subarray.append(arr[i])\n    even_odd_sum = 0\n    for i in range(len(even_subarray)):\n        even_odd_sum += even_subarray[i]\n    odd_sum = 0\n    for i in range(len(odd_subarray)):\n        odd_sum += odd_subarray[i]\n    return even_odd_sum + odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2!= 0:\n            odd_length_sum += arr[i]\n    return odd_length_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    for i in arr:\n        if i % 2 == 1:\n            odd_length += i\n    return odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    odd_index = []\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0, len(arr), 2):\n        s = s + arr[i]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def rgb_to_hsv_a(r, g, b):\n        '''convert an RGB color to HSB color'''\n        r_var = (r/255.0)\n        g_var = (g/255.0)\n        b_var = (b/255.0)\n        max_var = max(r_var, g_var, b_var)\n        if max_var < 1.0:\n            return [0.0, 0.0, 0.0]\n        if max_var <= 0.04045:\n            h = (max_var*0.055) + 0.055\n            s = max_var*0.0031308\n            v = max_var*0.0059062\n        else:\n            h = 0.055 * (max_var - 0.055) + 0.055\n            s = max_var - 0.04045\n            v = max_var - 0.0031308\n        a = v*(1.0 - s)\n        #print \"h: \", h, \" s: \", s, \" a: \", a\n        return [h, s, a]\n    hsv = [r, g, b]\n    hsv_a = rgb_to_hsv_a(r, g, b)\n    rgb = []\n    for i in range(3):\n        rgb.append(hsv[i] * (1-0.01) + hsv_a[i] * 0.01)\n    return rgb\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert rgb to hsv\n    r = max(r, 0)\n    g = max(g, 0)\n    b = max(b, 0)\n    r = min(r, 255)\n    g = min(g, 255)\n    b = min(b, 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0 or g == 0 or b == 0:\n        return None, None, None\n    \n    r, g, b = map(float, (r, g, b))\n    \n    if r < 0.04045:\n        r = 0.0\n    else:\n        r = (r - 0.055)/(1.0 + 0.055)\n    if g < 0.04045:\n        g = 0.0\n    else:\n        g = (g - 0.055)/(1.0 + 0.055)\n    if b < 0.04045:\n        b = 0.0\n    else:\n        b = (b - 0.055)/(1.0 + 0.055)\n        \n    x = (b * 6.0 + g*0.5) / (b*6.0 + g*6.0)\n    if x < 0.0:\n        x = 0.0\n    if x > 1.0:\n        x = 1.0\n        \n    hue = x * 6.0 + (x-1)*6.0\n    \n    saturation = 0.0\n    if g < 0.0:\n        saturation = 0.75 * (1.0 - abs(g)/(1.0+g))\n        \n    if r < 0.0:\n        hue = hue - 6.0\n        saturation = 0.75 * (1.0 - abs(r)/(1.0+r))\n        \n    if hue <= 0.0:\n        hue = 0.0\n        saturation = 0.0\n        \n    return hue, saturation, r\n    \n    \n    \n    "
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = int(r * 255)\n    G = int(g * 255)\n    B = int(b * 255)\n    maxR = max(R, G, B)\n    minR = min(R, G, B)\n    maxB = max(B, G, R)\n    minB = min(B, G, R)\n    H = maxB - minB\n    S = maxR - minR\n    V = maxB - minB - maxR - minR\n    if S == 0:\n        a = 0\n    else:\n        a = (maxB - minB) / float(S)\n    if V == 0:\n        e = 0\n    else:\n        e = (maxR - minR) / float(V)\n    delta = 0\n    if abs(e - 1.0) > 0.0001:\n        delta = 1.0 - (e + 1.0) / (2.0 - e)\n    if delta == 0.0:\n        h = 0\n        s = 0\n    else:\n        h = delta * (int(round(e * 255)) - minB)\n        s = delta * ((int(round(e * 255)) - minB) / 255.0)\n    if H == 0:\n        f = 0\n    else:\n        f = H / 60.0\n        if H > 0:\n            h = H / 60.0\n        else:\n            h = -H / 60.0\n    if maxR == minR:\n        return max(0, min(h * 360, 360))\n    if maxB == minB:\n        return max(0, min(s * 255, 255))\n    return round(h * 360.0, 2), round(s * 255.0, 2), round(f * 255.0, 2)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    f = 1.0 - (r / 255.0)\n    # rgb_to_hsv returns (value, saturation, hue)\n    # f = r/255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if min_val == max_val:\n        return r, g, b\n    if min_val == 0:\n        return r, g, b\n    div = 255/max_val\n    r, g, b = div*r, div*g, div*b\n    if g <0:\n        r, g, b = r, g, b\n    if r <0:\n        r, g, b = r, g, b\n    if b<0:\n        r, g, b = r, g, b\n    h = (60 * r) + ((60 * g) + ((60 * b) - 50))\n    s = (h/360)\n    v = (min_val-h)\n    return int(r), int(g), int(b), int(s), int(v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import numpy as np\n    from matplotlib import colors\n    from matplotlib.colors import ListedColormap, LinearSegmentedColormap\n    \n    # Convert the rgb color to hsv color\n    hsv_rgb = colors.rgb_to_hsv(r, g, b)\n    # Get the hue and saturation of the r,g, and b color\n    h = hsv_rgb[0]\n    s = hsv_rgb[1]\n    v = hsv_rgb[2]\n    # Set the minimum and maximum values for h and s\n    h_min = 0\n    h_max = 179\n    s_min = 0\n    s_max = 255\n    # Check if the hue value is greater than the minimum hue\n    if h < h_min:\n        h = h_min\n    # Check if the saturation value is greater than the maximum saturation value\n    if s > s_max:\n        s = s_max\n    # Check if the hue value is less than the minimum hue\n    if h < h_min:\n        h = h_min\n    # Set the saturation value\n    s = s * 255\n    # Check if the saturation value is greater than the maximum saturation value\n    if s > s_max:\n        s = s_max\n    # Check if the hue value is less than the minimum hue\n    if h < h_min:\n        h = h_min\n    # Set the value\n    v = v * 255\n    # Return the hue and saturation\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # make sure no need to normalize the values, since we want to remove the proportion\n    # of the original range.\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # choose the hue and saturation, and the value\n    h = 0.8\n    s = 0.6\n    v = 0.4\n    \n    # create the new value range.\n    h_range = v * (1 - s) + h * s\n    s_range = v * (1 - g) + s * g\n    v_range = v * (1 - b) + v * b\n    \n    # convert the value range to hsv format\n    h_min = 0\n    h_max = 360\n    s_min = 0\n    s_max = 1\n    v_min = 0\n    v_max = 1\n    \n    # set the range of the resulting hsv values\n    hsv_max = 1.0\n    hsv_min = 0.0\n    \n    # create hsv_h and hsv_s based on the value range\n    hsv_h = h_range / hsv_max\n    hsv_s = s_range / hsv_max\n    hsv_v = v_range / hsv_max\n    \n    # create the hsv values from hsv_h and hsv_s and convert them to rgb\n    hsv = hsv_h * h_max + hsv_s * s_max + hsv_v * v_max\n    \n    # create an array of the same size as hsv values and convert them to rgb\n    hsv = hsv * (hsv_max - hsv_min) + hsv_min\n    r, g, b = hsv_h * 255.0, hsv_s * 255.0, hsv_v * 255.0\n    \n    # return the rgb values\n    return r, g, b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = 255\n    min_rgb = 0\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in list1:\n        if i % 2 == 0:\n            even = i\n            print(even, \"is the first even number\")\n        else:\n            odd = i\n            print(odd, \"is the first odd number\")\n            break\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        prod = prod * i\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd_product = 1\n    for i in range(0, len(list1)):\n        if (list1[i] % 2 == 0):\n            even_odd_product = even_odd_product * list1[i]\n        else:\n            even_odd_product = even_odd_product * list1[i]\n    return even_odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i]*2)\n    return list2\nprint(mul_even_odd([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    i = 0\n    prod = 1\n    while i < len(list1):\n        prod = prod*list1[i]\n        if i % 2 == 0:\n            prod = prod*list1[i]\n        i += 1\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # remove duplicates\n    list2 = list(set(list1))\n    # print(list2)\n    # sort list for each element in list2\n    list2.sort()\n    # print(list2)\n    product = 1\n    for number in list2:\n        product *= number\n    return product\n    \n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num + 1\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for item in list1:\n        if item%2==0:\n            even+=item\n        else:\n            odd+=item\n    print(f'Product of first even and odd number is : {even*odd}')\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in list1:\n        if i%2==0:\n            print(i*i)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Your code here\n    # if len(list1) == 0:\n    #     return 0\n    # elif len(list1) == 1:\n    #     return list1[0]\n    # elif len(list1) == 2:\n    #     return list1[0] * list1[1]\n    # elif len(list1) == 3:\n    #     return list1[0] * list1[1] * list1[2]\n    # elif len(list1) == 4:\n    #     return list1[0] * list1[1] * list1[2] * list1[3]\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # create a tuple object and assign the list.\n    tuple_str_int = tuple(test_str)\n    # return the tuple object.\n    return tuple_str_int\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(',')\n    return tuple(map(int, tuple_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str is None:\n        return 0\n    else:\n        return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(lambda x: int(x), test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_tuple = tuple(map(int,test_str.split(\",\")))\n        return test_tuple\n    except Exception as e:\n        print(e)\n        return None\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_str)):\n        new_tuple.append(int(test_str[i]))\n    return new_tuple\n    "
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup = test_str.split(',')\n    n = len(tup)\n    for i in range(n):\n        tup[i] = int(tup[i])\n    return tup\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] == x:\n            return i\n    return n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] > x:\n            return i\n    return n\ndef get_index(a, x):\n    '''\n    Write a function to get the index of a element in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    return i\ndef right_subtraction(a, x):\n    '''\n    Write a function to locate the right subtraction point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] < x:\n            return i\n    return n\ndef left_subtraction(a, x):\n    '''\n    Write a function to locate the left subtraction point for a specified value in sorted order.\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] > x:\n            return i\n    return n\ndef bisect(a, x):\n    '''\n    Write a function to locate the element x in a sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    return i\ndef count_keys(dictionary, x):\n    '''\n    Return the number of keys that are at most x in the dictionary.\n    '''\n    if x in dictionary:\n        return 1\n    return 0\ndef count_occurrences(dictionary, x):\n    '''\n    Return the number of occurrences of the value x in the dictionary.\n    '''\n    return dictionary.count(x)\ndef merge(left, right):\n    '''\n    Write a function to merge two sorted dictionaries.\n    '''\n    d = {}\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            d[left[i]] = left[i]\n            i += 1\n        else:\n            d[right[j]] = right[j]\n            j += 1\n    while i < len(left):\n        d[left[i]] = left[i]\n        i += 1\n    while j < len(right):\n        d[right[j]] = right[j]\n        j += 1\n    return d\ndef is_two_dicts_equal(d, e):\n    '''\n    Return True if the two dictionaries are equal, and False otherwise.\n    '''\n    if not d and not e:\n        return True\n    if not d:\n        return False\n    if not e:\n        return False\n    if len(d)!= len(e):\n        return False\n    for key in d:\n        if not key in e:\n            return False\n    return True\ndef merge_dicts(d, e):\n    '''\n    Return a dictionary that is the result of merging two dictionaries.\n    '''\n    d.update(e)\n    return d\ndef sum_dicts(d, e):\n    '''\n    Return the total of the values in the two dictionaries.\n    '''\n    d = merge_dicts(d, e)\n    return sum(d.values())\ndef add_keys(d, keys):\n    '''\n    Return the result of adding the specified keys to the dictionary.\n    '''\n    for key in keys:\n        d[key] = 0\n    return d\ndef add_keys_dicts(d, d_keys):\n    '''\n    Return the result of adding the specified keys to the dictionary.\n    '''\n    for key in d_keys:\n        d[key] = 0\n    return d\ndef remove_keys(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    for key in keys:\n        del(d[key])\n    return d\ndef remove_keys_dicts(d, d_keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    for key in d_keys:\n        del(d[key])\n    return d\ndef is_keys_in_dict(d, keys):\n    '''\n    Return True if the specified keys are present in the dictionary.\n    '''\n    for key in keys:\n        if key not in d:\n            return False\n    return True\ndef is_keys_in_dict_b(d, keys):\n    '''\n    Return True if the specified keys are present in the dictionary.\n    '''\n    for key in keys:\n        if key not in d:\n            return False\n    return True\ndef subkeys(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    new_d = {}\n    for key in keys:\n        new_d[key] = 0\n    for key in d:\n        new_d[key] = d[key]\n    return new_d\ndef keys_in_dict_b(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    new_d = {}\n    for key in keys:\n        new_d[key] = 0\n    for key in d:\n        new_d[key] = d[key]\n    return new_d\ndef subkeys_dicts(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    new_d = {}\n    for key in keys:\n        new_d[key] = 0\n    for key in d:\n        new_d[key] = d[key]\n    return new_d\ndef keys_in_dicts(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    new_d = {}\n    for key in keys:\n        new_d[key] = 0\n    for key in d:\n        new_d[key] = d[key]\n    return new_d\ndef subkeys_dicts_dicts(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    new_d = {}\n    for key in keys:\n        new_d[key] = 0\n    for key in d:\n        new_d[key] = d[key]\n    return new_d\ndef subkeys_dicts_dicts_dicts(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    new_d = {}\n    for key in keys:\n        new_d[key] = 0\n    for key in d:\n        new_d[key] = d[key]\n    return new_d\ndef count_keys_dicts(d, keys):\n    '''\n    Return the number of keys that are at most keys in the dictionary.\n    '''\n    return len([x for x in keys if count_keys(d, x) >= keys])\ndef is_keys_in_dict_dict(d, keys):\n    '''\n    Return True if the specified keys are present in the dictionary and are in the dictionary.\n    '''\n    for key in keys:\n        if key not in d:\n            return False\n    return True\ndef is_keys_in_dict_dict_dicts(d, keys):\n    '''\n    Return True if the specified keys are present in the dictionary and are in the dictionary.\n    '''\n    for key in keys:\n        if key not in d:\n            return False\n    return True\ndef subkeys_dicts_dicts_dicts(d, keys):\n    '''\n    Return the result of removing the specified keys from the dictionary.\n    '''\n    new_d = {}\n    for key in keys:\n        new_d[key] = 0\n    for key in d:\n        new_d[key] = d[key]\n    return new_d\ndef keys_in_dicts_dicts_dicts("
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    x = bisect.bisect_right(a, x)\n    if a[x] < x:\n        return x\n    else:\n        return len(a)\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    x = bisect.bisect_left(a, x)\n    if a[x] > x:\n        return x\n    else:\n        return len(a)\ndef quick_sort(a, l, r):\n    '''\n    Write a quick sort implementation to sort a list.\n    '''\n    if len(a) == 1:\n        return a\n    if r >= l:\n        pivot = partition(a, l, r)\n        quick_sort(a, l, pivot-1)\n        quick_sort(a, pivot+1, r)\n    else:\n        return quick_sort(a, l, r-1)\ndef partition(a, l, r):\n    pivot = a[r]\n    i = l-1\n    j = r\n    while i<j:\n        while i<j and a[j] >= pivot:\n            j-=1\n        while i<j and a[i] <= pivot:\n            i+=1\n        if i<j:\n            a[i], a[j] = a[j], a[i]\n    a[r], a[j] = a[j], a[r]\n    return j\ndef bisect_right(a, x):\n    return bisect.bisect_right(a, x)\ndef bisect_left(a, x):\n    return bisect.bisect_left(a, x)\ndef linear_search(a, x):\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n    return -1\ndef binary_search(a, x):\n    lower = 0\n    upper = len(a)\n    while lower<upper:\n        middle = (lower+upper)//2\n        if a[middle] == x:\n            return middle\n        if x < a[middle]:\n            upper = middle\n        else:\n            lower = middle+1\n    return -1\ndef binary_search(a, x):\n    lower = 0\n    upper = len(a)\n    while lower<upper:\n        middle = (lower+upper)//2\n        if a[middle] == x:\n            return middle\n        if x < a[middle]:\n            upper = middle\n        else:\n            lower = middle+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    if x < a[0] or x > a[-1]:\n        return -1\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    lower = 0\n    upper = len(a)\n    while lower<upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    lower = 0\n    upper = len(a)\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    lower = 0\n    upper = len(a)\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    lower = 0\n    upper = len(a)\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    lower = 0\n    upper = len(a)\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0\n    lower = 0\n    upper = len(a)-1\n    while lower<=upper:\n        mid = (lower+upper)//2\n        if a[mid] == x:\n            return mid\n        if x < a[mid]:\n            upper = mid\n        else:\n            lower = mid+1\n    return -1\ndef binary_search(a, x):\n    if len(a) == 1:\n        return 0"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\ndef right_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\ndef right_delete(a, x):\n    '''\n    Write a function to delete the rightmost element in the sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    a[i] = a[-1]\n    return a\ndef right_extract(a, x):\n    '''\n    Write a function to extract the rightmost element.\n    '''\n    i = bisect.bisect_left(a, x)\n    return a[i]\ndef right_reverse(a):\n    '''\n    Write a function to reverse the order of the elements.\n    '''\n    a.reverse()\ndef right_extract_right_insert(a, x):\n    '''\n    Write a function to extract the rightmost element.\n    '''\n    i = bisect.bisect_left(a, x)\n    return a[i]\ndef quick_sort(a):\n    '''\n    Write a quick sort implementation.\n    '''\n    quick_sort_helper(a, 0, len(a) - 1)\ndef quick_sort_helper(a, low, high):\n    if low < high:\n        p = left_insertion(a, low)\n        q = right_insertion(a, high)\n        quick_sort_helper(a, low, p - 1)\n        quick_sort_helper(a, q + 1, high)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # if len(a) == 0:\n    #     return -1\n    l = bisect.bisect_left(a, x)\n    if l == 0:\n        return 0\n    elif l == len(a):\n        return len(a)\n    else:\n        return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    x_index = bisect.bisect_right(a, x)\n    return x_index-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)-1):\n        if a[i] < x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)-1\n    \n    # if the value is less than the value in the sorted array, simply go to the right\n    while (left <= right):\n        mid = (left+right)//2\n        if (a[mid] < x):\n            left = mid+1\n        elif (a[mid] == x):\n            return mid\n        else:\n            right = mid-1\n    return right\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # iterate over the given array.\n    # if the value is already in its correct position, just move it to the correct index\n    # if the value is already there, insert it at its correct position\n    # if not, insert it at the correct index\n    # return the index of the value we just inserted, and the index of the element at which it was inserted\n    if a[-1] == x:\n        return len(a)-1\n    if x <= a[-1]:\n        return len(a)-1\n    if x > a[-1]:\n        return 0\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # edge case, if x is smaller than a[0]\n    if x < a[0]:\n        return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos < len(a) and a[pos] == x:\n        return pos\n    else:\n        return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = r'\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'(b\\s)(\\w*)b')\n    if pattern.match(text):\n        text = pattern.match(text).group(1)\n        text = text.replace('b', '')\n        return text\n    return ''\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'(?<=\\W)(\\b)(\\w)(?=\\W)', text)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Regex\n    # https://www.w3schools.com/python/ref_strings_regex.asp\n    #https://www.geeksforgeeks.org/python-regex-search-for-text-matching-a-string/\n    \n    # Match\n    # ^  Start a match\n    # $  End a match\n    # |  Start a match\n    # \\\\  End a match\n    # [ ] Start a match\n    # [^ ] End a match\n    # [b] Start a match\n    # [^b] End a match\n    # {3}  Start a match\n    # {3,} End a match\n    # {3}  Start a match\n    # {3,} End a match\n    # {3,}  Start a match\n    # {3,} End a match\n    # \\b  Start a match\n    # \\B End a match\n    # \\s  Start a match\n    # \\S  End a match\n    # \\S+ Start a match\n    # \\d  Start a match\n    # \\D End a match\n    # \\D+ Start a match\n    # \\D+ End a match\n    # [ab] Start a match\n    # [ab] End a match\n    # [ab] Start a match\n    # [ab] End a match\n    # [ab] Start a match\n    # [ab] End a match\n    # [ab] Start a match\n    # [ab] End a match\n    # [ab] Start a match\n    # [ab] End a match\n    # [abc] Start a match\n    # [abc] End a match\n    # [abc] Start a match\n    # [abc] End a match\n    # [abc] Start a match\n    # [abc] End a match\n    # [abc] Start a match\n    # [abc] End a match\n    # [abc] Start a match\n    # [abc] End a match\n    # [abc] Start a match\n    # [abc] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [abd] End a match\n    # [abd] Start a match\n    # [ab"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = text.find('a')\n    b = text.find('b')\n    c = text.find('c')\n    if a > 0 and b > 0 and c > 0:\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'g'.\n    '''\n    a = text.find('a')\n    b = text.find('b')\n    c = text.find('c')\n    d = text.find('d')\n    if a > 0 and b > 0 and c > 0 and d > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'\\b\\w*b\\b',text)\n    if match == None:\n        return match\n    elif match.group() == 'b':\n        return match.end()\n    else:\n        return match.start()\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #-- Code goes here\n    text = re.sub(r'\\d', '', text)\n    text = re.sub(r'[^A-Za-z0-9-_]', '', text)\n    text = re.sub(r' ', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\r', '', text)\n    text = re.sub(r'\\t', '', text)\n    text = re.sub(r'\\s', '', text)\n    return text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'c'.\n    '''\n    #-- Code goes here\n    text = re.sub(r'\\d', '', text)\n    text = re.sub(r'[^A-Za-z0-9-_]', '', text)\n    text = re.sub(r' ', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\r', '', text)\n    text = re.sub(r'\\t', '', text)\n    text = re.sub(r'\\s', '', text)\n    return text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'd'.\n    '''\n    #-- Code goes here\n    text = re.sub(r'\\d', '', text)\n    text = re.sub(r'[^A-Za-z0-9-_]', '', text)\n    text = re.sub(r' ', '', text)\n    text = re.sub(r'\\n', '', text)\n    text = re.sub(r'\\r', '', text)\n    text = re.sub(r'\\t', '', text)\n    text = re.sub(r'\\s', '', text)\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    match = re.search(r'a\\s\\w+b',text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\b\\n')\n    if len(text) == 0:\n        return False\n    match = pattern.match(text)\n    if match == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pat = re.compile(r'([a-zA-Z]+?)\\s*\\*?\\s*\\*?\\s*\\*?\\s*\\*?\\s*\\*?\\s*[a-zA-Z]+\\s*')\n    \n    match = pat.findall(text)\n    \n    return match\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    def add(t1, t2):\n        '''\n        Add the two tuples to a new tuple.\n        '''\n        return t1 + t2\n    def mul(t1, t2):\n        '''\n        Multiply the two tuples.\n        '''\n        return t1 * t2\n    def div(t1, t2):\n        '''\n        Divide the two tuples.\n        '''\n        return t1 / t2\n    def eq(t1, t2):\n        '''\n        Compare two tuples.\n        '''\n        return t1 == t2\n    def eq_list(t1, t2):\n        '''\n        Compare two tuples and return the list.\n        '''\n        return t1 == t2\n    def add_tuple(t1, t2):\n        '''\n        Add two tuples together.\n        '''\n        return tuple(t1) + tuple(t2)\n    def sub_tuple(t1, t2):\n        '''\n        Subtract two tuples.\n        '''\n        return tuple(t1) - tuple(t2)\n    def mul_tuple(t1, t2):\n        '''\n        Multiply two tuples.\n        '''\n        return tuple(t1) * t2\n    def mul_list(t1, t2):\n        '''\n        Multiply two tuples and return the list.\n        '''\n        return tuple(t1) * t2\n    def mul_tuple_list(t1, t2):\n        '''\n        Multiply two tuples and return the list.\n        '''\n        return tuple(t1) * t2\n    def str_tuple(t1):\n        '''\n        Convert a tuple to a string.\n        '''\n        return str(t1)\n    def str_tuple_list(t1):\n        '''\n        Convert a list of tuples to a string.\n        '''\n        return str(t1)\n    def str_tuple_list_int(t1):\n        '''\n        Convert a list of tuples to a string and convert to an integer.\n        '''\n        return str(t1).replace(\",\", \"\")\n    t1 = eval(test_list)\n    t2 = eval(test_str)\n    return eval(add(t1, t2))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for i in range(len(test_str)):\n        new_tuple += (test_list[i],)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = tuple(test_list)\n    new_list = list(new_tuple)\n    \n    return new_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str == \"\":\n        return ()\n    elif test_list == \"\":\n        return ()\n    elif test_list[0] == \"(\" or test_list[-1] == \")\":\n        return tuple(test_list[1:-1])\n    else:\n        return tuple(test_list)\n    \ndef get_tuple(test_list, test_str):\n    '''\n    Write a function to return the tuple of the string test_str, or create a new tuple.\n    '''\n    if test_str == \"\":\n        return ()\n    elif test_list == \"\":\n        return ()\n    elif test_list[0] == \"(\" or test_list[-1] == \")\":\n        return tuple(test_list[1:-1])\n    else:\n        return tuple(test_list)\n        \ndef get_list(test_list, test_str):\n    '''\n    Write a function to return the list of the string test_str, or create a new list.\n    '''\n    if test_str == \"\":\n        return ()\n    elif test_list == \"\":\n        return ()\n    elif test_list[0] == \"(\" or test_list[-1] == \")\":\n        return test_list[1:-1]\n    else:\n        return test_list\n    \ndef compare_tuple(tuple1, tuple2):\n    '''\n    Write a function to return True if the given tuple is a tuple containing two strings, otherwise return False.\n    '''\n    if len(tuple1)!= 2 or len(tuple2)!= 2:\n        return False\n    if tuple1[0]!= tuple2[0] or tuple1[1]!= tuple2[1]:\n        return False\n    return True\n    \ndef compare_list(list1, list2):\n    '''\n    Write a function to return True if the given list is a list containing two strings, otherwise return False.\n    '''\n    if len(list1)!= 2 or len(list2)!= 2:\n        return False\n    if list1[0]!= list2[0] or list1[1]!= list2[1]:\n        return False\n    return True\n    \ndef compare_string(string1, string2):\n    '''\n    Write a function to return True if the given strings are the same as the given strings, otherwise return False.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    if string1[0]!= string2[0] or string1[1]!= string2[1]:\n        return False\n    return True\n    \ndef compare_set(set1, set2):\n    '''\n    Write a function to return True if the given set is a set containing two strings, otherwise return False.\n    '''\n    if len(set1)!= 2 or len(set2)!= 2:\n        return False\n    if set1[0]!= set2[0] or set1[1]!= set2[1]:\n        return False\n    return True\n    \ndef compare_int(int1, int2):\n    '''\n    Write a function to return True if the given integer is equal to the given integer, otherwise return False.\n    '''\n    if int1!= int2:\n        return False\n    return True\n    \ndef compare_list_sorted(list1, list2):\n    '''\n    Write a function to return True if the given list is sorted in ascending order, otherwise return False.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    list1.sort()\n    return True\n    \ndef compare_string_sorted(string1, string2):\n    '''\n    Write a function to return True if the given strings are sorted in ascending order, otherwise return False.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    list1.sort()\n    list2.sort()\n    if string1[0]!= string2[0] or string1[1]!= string2[1]:\n        return False\n    return True\n    \ndef compare_pair(pair1, pair2):\n    '''\n    Write a function to return True if the given pairs are equivalent, otherwise return False.\n    '''\n    if len(pair1)!= 2 or len(pair2)!= 2:\n        return False\n    if pair1[0]!= pair2[0] or pair1[1]!= pair2[1]:\n        return False\n    return True\n    \ndef compare_hash_table(hash1, hash2):\n    '''\n    Write a function to return True if the given hash_table is a hash table containing two strings, otherwise return False.\n    '''\n    if len(hash1)!= 2 or len(hash2)!= 2:\n        return False\n    if hash1[0]!= hash2[0] or hash1[1]!= hash2[1]:\n        return False\n    return True\n    \ndef compare_int_hash_table(int1, int2):\n    '''\n    Write a function to return True if the given integer is equal to the given integer, otherwise return False.\n    '''\n    if int1!= int2:\n        return False\n    return True\n    \ndef compare_set_hash_table(set1, set2):\n    '''\n    Write a function to return True if the given set is a hash table containing two strings, otherwise return False.\n    '''\n    if len(set1)!= 2 or len(set2)!= 2:\n        return False\n    if set1[0]!= set2[0] or set1[1]!= set2[1]:\n        return False\n    return True\n    \ndef compare_int_set_hash_table(int1, int2):\n    '''\n    Write a function to return True if the given integer is equal to the given integer, otherwise return False.\n    '''\n    if int1!= int2:\n        return False\n    return True\n    \ndef compare_list_hash_table(list1, list2):\n    '''\n    Write a function to return True if the given list is a hash table containing two strings, otherwise return False.\n    '''\n    if len(list1)!= 2 or len(list2)!= 2:\n        return False\n    if list1[0]!= list2[0] or list1[1]!= list2[1]:\n        return False\n    return True\n    \ndef compare_string_hash_table(string1, string2):\n    '''\n    Write a function to return True if the given strings are equal to the given strings, otherwise return False.\n    '''\n    if len(string1)!= len(string2):\n        return False\n    if string1[0]!= string2[0] or string1[1]!= string2[1]:\n        return False\n    return True\n    \ndef compare_pair_hash_table(pair1, pair2):\n    '''\n    Write a function to return True if the given pairs are equivalent, otherwise return False.\n    '''\n    if len(pair1)!= 2 or len(pair2)!= 2:\n        return False\n    if pair1[0]!= pair2[0] or pair1[1]!= pair2[1]:\n        return False\n    return True\n    \ndef compare_hash_table_hash(hash1, hash2):\n    '''\n    Write a function to return True if the given hash_table is a hash table containing two strings, otherwise return False.\n    '''\n    if len(hash1)!= 2 or len(hash2)!= 2:\n        return False\n    if hash1[0]!= hash2[0] or hash1[1]!= hash2[1]:\n        return False\n    return True\n    \ndef compare_int_hash_table_hash(int1, int2):\n    '''\n    Write a function to return True if the given integer is equal to the given integer, otherwise return False.\n    '''\n    if int1!= int2:\n        return False\n    return True\n    \ndef compare_set_hash_table_hash(set1, set2):\n    '''\n    Write a function to return True if the given set is a hash table containing two strings, otherwise return False.\n    '''\n    if len(set1)!= 2 or len(set2)!= 2:\n        return False\n    if set1[0]!= set2[0] or set1[1"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_str, tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        new_tuple = eval('tuple({})'.format(test_str))\n    except NameError:\n        print(f'The test_str \\'{test_str}\\' is not a tuple!')\n        new_tuple = ()\n    else:\n        print(f'The test_str \\'{test_str}\\' is a tuple!')\n        print(f'The new_tuple is: {new_tuple}')\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = ()\n    \n    for i in range(0, len(test_str)):\n        new_tuple += (test_str[i],)\n    \n    return new_tuple\n    \ndef test_new_tuple():\n    '''\n    Test new_tuple()\n    '''\n    new_tuple = new_tuple('a', ['b', 'c'])\n    assert new_tuple == ('a', ['b', 'c'])\n    \ndef test_fibonacci_recursion():\n    '''\n    Test the fibonacci function\n    '''\n    test_list = [1, 1, 2, 3, 5]\n    test_str = '11'\n    new_tuple = new_tuple(test_list, test_str)\n    assert new_tuple == (1, 2, 3, 5, 11)\n    \ndef test_fibonacci():\n    '''\n    Test the fibonacci function\n    '''\n    test_list = [1, 1, 2, 3, 5]\n    test_str = '11'\n    new_tuple = new_tuple(test_list, test_str)\n    assert new_tuple == (1, 2, 3, 5, 11)\n    \ndef test_calc_int():\n    '''\n    Test calc_int()\n    '''\n    assert calc_int(10) == 10\n    \ndef test_get_len():\n    '''\n    Test the get_len()\n    '''\n    assert get_len('a') == 0\n    assert get_len('b') == 1\n    assert get_len('c') == 2\n    assert get_len('d') == 3\n    assert get_len('e') == 4\n    assert get_len('f') == 5\n    \ndef test_apply_func():\n    '''\n    Test the apply_func()\n    '''\n    assert apply_func([1, 2, 3], lambda x: x * 10) == [x * 10, 2, 3, x * 10]\n    assert apply_func(['a', 'b'], lambda x: x * 2) == ['a', 'b', 2, x * 2]\n    assert apply_func([10, 20, 30, 40, 50, 60, 70, 80], lambda x: x * 3) == [10 * 3, 20 * 3, 30 * 3, 40 * 3, 50 * 3, 60 * 3, 70 * 3, 80 * 3, x * 3]\n    assert apply_func([10, 20, 30, 40, 50, 60, 70, 80], lambda x: x * 4) == [10 * 4, 20 * 4, 30 * 4, 40 * 4, 50 * 4, 60 * 4, 70 * 4, 80 * 4, x * 4]\n    assert apply_func([1, 2, 3, 4, 5], lambda x: x + 3) == [3, 4, 5, x + 3, x + 3]\n    assert apply_func([1, 2, 3], lambda x: x + 3) == [4, 5, 6, x + 3, x + 3]\n    \ndef test_int_to_string():\n    '''\n    Test int_to_string()\n    '''\n    assert int_to_string(10) == '10'\n    assert int_to_string(11) == '11'\n    assert int_to_string(20) == '2'\n    assert int_to_string(30) == '3'\n    assert int_to_string(40) == '4'\n    assert int_to_string(50) == '5'\n    assert int_to_string(60) == '6'\n    assert int_to_string(70) == '7'\n    assert int_to_string(80) == '8'\n    \ndef test_string_to_int():\n    '''\n    Test string_to_int()\n    '''\n    assert string_to_int('1') == 1\n    assert string_to_int('2') == 2\n    assert string_to_int('3') == 3\n    assert string_to_int('4') == 4\n    assert string_to_int('5') == 5\n    assert string_to_int('6') == 6\n    assert string_to_int('7') == 7\n    assert string_to_int('8') == 8\n    \ndef test_str_to_int():\n    '''\n    Test str_to_int()\n    '''\n    assert str_to_int('10') == 10\n    assert str_to_int('11') == 11\n    assert str_to_int('2') == 2\n    assert str_to_int('3') == 3\n    assert str_to_int('4') == 4\n    assert str_to_int('5') == 5\n    assert str_to_int('6') == 6\n    assert str_to_int('7') == 7\n    assert str_to_int('8') == 8\n    \ndef test_str_to_int_for_one():\n    '''\n    Test str_to_int_for_one()\n    '''\n    assert str_to_int_for_one('1') == 1\n    assert str_to_int_for_one('2') == 2\n    assert str_to_int_for_one('3') == 3\n    assert str_to_int_for_one('4') == 4\n    assert str_to_int_for_one('5') == 5\n    assert str_to_int_for_one('6') == 6\n    assert str_to_int_for_one('7') == 7\n    assert str_to_int_for_one('8') == 8\n    \ndef test_dict_to_str():\n    '''\n    Test dict_to_str()\n    '''\n    assert dict_to_str({'a': 'A', 'b': 'B', 'c': 'C'}) == 'A B C'\n    assert dict_to_str({'d': 'D', 'e': 'E', 'f': 'F', 'g': 'G'}) == 'D E F G'\n    assert dict_to_str({'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K', 'l': 'L','m': 'M', 'n': 'N', 'o': 'O'}) == 'H I J K L M N O'\n    \ndef test_dict_to_int():\n    '''\n    Test dict_to_int()\n    '''\n    assert dict_to_int({'a': 10, 'b': 15, 'c': 20}) == 10\n    assert dict_to_int({'d': 30, 'e': 40, 'f': 50}) == 30\n    assert dict_to_int({'h': 60, 'i': 70, 'j': 80}) == 60\n    assert dict_to_int({'k': 90, 'l': 100,'m': 110, 'n': 120}) == 90\n    assert dict_to_int({'o': 150, 'p': 200, 'q': 300}) == 150\n    \ndef test_dict_to_int_for_one():\n    '''\n    Test dict_to_int_for_one()\n    '''\n    assert dict_to_int_for_one({'a': 10, 'b': 15, 'c': 20}) == 10\n    assert dict_to_int_for_one({'d': 30, 'e': 40, 'f': 50}) == 30\n    assert dict_to_int_for_one({'h': 60, 'i': 70, 'j': 80}) == 60\n    assert dict_to_int_for_one({'k': 90, 'l': 100,'m': 110, 'n': 120}) == 90\n    assert dict_to_int_for_one({'o': 150, 'p': 200, 'q': 300}) == 150\n    \ndef test_list_to_dict():\n    '''\n    Test list_to_dict()\n    '''\n    assert list_to_dict([1, 2, 3, 4, 5]) == {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\n    assert list_to_dict([1, 2, 3, 4, 5, 6, 7, 8]) == {'1': 1, '2': 2, '3': 3, '4': 4, '"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([_ for _ in test_str.split()])\n    #return tuple([_ for _ in test_list if test_str.split().index(_) >= 0])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split(\",\")\n    #print(test_list)\n    tuple_values = tuple(test_list)\n    #print(tuple_values)\n    #print(test_str)\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(tuple_values)\n    #print(\"\\n\")\n    #print(type(tuple_values))\n    #print(type(test_str))\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    return tuple(tuple_values)\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(test_list)\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(type(test_list))\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(type(test_str))\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(test_str)\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(type(test_str))\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(test_str)\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(type(test_str))\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(test_str)\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\n\")\n    #print(\"\\"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Method 1\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i]%2 == 0:\n            if nums[i]%4 == 0:\n                return True\n            else:\n                return False\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return any(n % 2 == 0 for n in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n = len(nums)\n    # if a is even\n    if nums[0] % 2 == 0:\n        # if a is even\n        for i in range(n):\n            if nums[i] % 2 == 0 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                return False\n    # if a is odd\n    else:\n        for i in range(n):\n            if nums[i] % 2 == 0 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                return False\n    # if a is even and odd\n    if n % 2 == 1:\n        # for even indexes\n        for i in range(n - 1, -1, -2):\n            if nums[i] % 2 == 0 and nums[i] > nums[i + 1] and nums[i] > nums[i - 1]:\n                return False\n    return True\n    \n    # if even_position(nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    for j in nums:\n        if nums[i] % 2 == 0 and nums[i] % 4 == 0:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return any([num % 2 == 0 for num in nums])\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = []\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            even_list.append(nums[i])\n    return even_list\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    odd_position = []\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            odd_position.append(nums[i])\n    if len(odd_position) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pas"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for tup in test_tup:\n        if tup[1].__class__ in [int, float]:\n            new_tup = new_tup + (tup[0], )\n        else:\n            new_tup = new_tup + (tup[0], tup[1])\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tuple = ()\n    result_tuple = result_tuple + test_tup\n    \n    return result_tuple\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[1:2]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def tuple_helper(tup):\n        # get rid of the outer tuple\n        for i, x in enumerate(tup):\n            if type(x) == tuple:\n                # get rid of the inner tuple\n                tup = tup[:i] + tup[i + 1:]\n                break\n        return tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: type(x) is not tuple, test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    nested_test_tup = []\n    for test in test_tup:\n        for i in range(len(test)):\n            nested_test_tup.append(test[i])\n    test_tup = nested_test_tup\n    # END CODE HERE\n    return test_tup\n    \n    \n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) < 3:\n        return test_tup\n    else:\n        return test_tup[0] + remove_nested(test_tup[1:])\n        \nprint(remove_nested((1, 2, 3, 4)))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    for tup in test_tup:\n        if type(tup)!= tuple:\n            return tup\n        \n    return None"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    \n    def remove_nested(test_tup):\n        '''\n        Write a function to remove tuples from the given tuple.\n        '''\n        \n        \n        #Define a nested loop\n        def remove_nested(test_tup):\n            \n            #Define a nested loop\n            def remove_nested(test_tup):\n                \n                #Remove from nested loop\n                if test_tup == tuple():\n                    pass\n                else:\n                    test_tup = tuple()\n                    test_tup = (test_tup)\n                    remove_nested(test_tup)\n                \n            #If test_tup is a tuple, then add the element to it\n            if type(test_tup) == tuple:\n                test_tup = test_tup[0]\n                \n                #If the element is a tuple, then remove it\n                if type(test_tup) == tuple:\n                    test_tup = test_tup[1]\n                \n                #Else, remove it from the tuple\n                else:\n                    test_tup = ()\n                \n            #Return the result\n            return test_tup\n        \n        #Write the outer loop\n        for test_tup in test_tup:\n            #Write the inner loop\n            for test_tup in test_tup:\n                #Remove from the outer loop\n                if type(test_tup) == tuple:\n                    test_tup = test_tup[0]\n                else:\n                    pass\n            \n            #If the inner loop results in a tuple, then return it\n            if type(test_tup) == tuple:\n                return test_tup\n            else:\n                #Else, return an empty tuple\n                return ()\n    \n    \n    #Return the result\n    return remove_nested(test_tup"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    # We want to create a new empty list\n    new_list = []\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n = len(input_list)\n    for i in range(n):\n        print(input_list[i])\n    return n\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 0: \n        print(\"There are no lists\") \n        return 0 \n    counter = 0 \n    for i in range(len(input_list)): \n        if type(input_list[i]) == type([]): \n            counter += len(input_list[i]) \n    return counter \n \n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    x=0\n    for i in input_list:\n        if type(i)==list:\n            x=x+1\n    return x\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    import itertools\n    result = 0\n    for i in input_list:\n        if type(i) == list:\n            result += len(i)\n    return result\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    c = 0\n    for i in input_list:\n        for j in input_list:\n            if isinstance(i,list)==False and isinstance(j,list)==False:\n                if isinstance(i,list)==True and isinstance(j,list)==True:\n                    c = c +1\n    return c\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    n = len(input_list)\n    output_list = []\n    for i in range(n):\n        if type(input_list[i]) == list:\n            output_list.append(len(input_list[i]))\n        else:\n            output_list.append(0)\n    return output_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # base case\n    if len(arr)==0:\n        return -1\n    \n    # recursive case\n    if arr[0]==x:\n        return 0\n    \n    # mid point is greater than the x\n    if arr[0]>x:\n        return last(arr[1:],x)\n    \n    # mid point is smaller than the x\n    if arr[len(arr)-1]<x:\n        return last(arr[1:len(arr)-1],x)\n    \n    # both mid points are equal to x\n    return len(arr)-1\n    \ndef find_last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # base case\n    if len(arr)==0:\n        return -1\n    \n    # recursive case\n    if arr[0]==x:\n        return 0\n    \n    # mid point is greater than the x\n    if arr[0]>x:\n        return last(arr[1:],x)\n    \n    # mid point is smaller than the x\n    if arr[0]<x:\n        return last(arr[1:],x)\n    \n    # both mid points are equal to x\n    return len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Finding the index of the element in the array\n    # Since we want the first element to be at the end\n    # of the array\n    l=0\n    # Finding the length of the array\n    r=len(arr)-1\n    # Finding the index of the element\n    i=len(arr)-1-x\n    # Traverse the array\n    while(i>=0 and r>=l):\n        # If the current index is bigger than the last index in the array\n        # then we have to check if the element is in the array\n        if(arr[i]<arr[l]):\n            # If the element is the last element in the array\n            # then we return it\n            if(i==r):\n                return i\n            # Otherwise, we go to the next index\n            else:\n                l=i\n                i=l\n        else:\n            # If the current index is bigger than the last index in the array\n            # then we have to check if the element is in the array\n            if(arr[i]>arr[l]):\n                # If the element is the last element in the array\n                # then we return it\n                if(i==r):\n                    return i\n                # Otherwise, we go to the next index\n                else:\n                    r=i\n                    i=r\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    h=len(arr)\n    if(h==0):\n        return -1\n    if(arr[h-1]>=x):\n        return h-1\n    return h-2\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Write your code here.\n    start=0\n    end=len(arr)-1\n    while start<=end:\n        mid=(start+end)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            end=mid-1\n        else:\n            start=mid+1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n    # Write your code here\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        if arr[0]==x:\n            return 0\n        if arr[-1]==x:\n            return len(arr)-1\n        else:\n            if arr[-1]>x:\n                return len(arr)-1\n            else:\n                return len(arr)-1\n                \n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == None or len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        if arr[-1] < x:\n            return last(arr[1:],x)\n        else:\n            return last(arr[0:-1],x)\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    \n    # find the index of the element in arr and pop it\n    arr.pop()\n    return arr.index(x)\n    \ndef mod(num):\n    '''\n    Write a python function to calculate the modular addition of two integers.\n    '''\n    if num%2 == 0:\n        return num+1\n    else:\n        return num%2\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # write your code here\n    return arr.index(x)+1"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # Split the text by spaces and lowercase\n    spl = text.split()\n    spl_lower = [s.lower() for s in spl]\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.strip().lower()\n    if 'a' in text:\n        text = re.sub(r'a', r'\\1a', text)\n        text = re.sub(r'\\b\\w+\\b', r'\\1\\2', text)\n    else:\n        text = text.replace(' ', '\\n')\n        text = re.sub(r'\\n+', r'\\n', text)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*?)(b)'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Can this be done with regex?\n    a_regex = 'a[^\\w\\d\\s]+?b'\n    if text.find('a')!=-1:\n        b_regex = 'a[^\\w\\d\\s]+?b'\n    else:\n        b_regex = 'b'\n    a_matcher = re.compile(a_regex)\n    b_matcher = re.compile(b_regex)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(\"a[^A-Z]*b\")\n    result = regex.findall(text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    output = re.search(\"a{3}b\",text)\n    return output\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = re.findall(r'\\b\\w+a\\b', text)\n    b = re.findall(r'\\b\\w+b\\b', text)\n    \n    for a_b in a:\n        if 'b' in a_b:\n            a_b = a_b.replace('b', '')\n            text = text.replace(a_b, 'b')\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile('a(\\w|\\w.)*\\b')\n    return pattern.search(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+a\\s\\w+b')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+a\\s\\w+b')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_startb_endc(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, ending in 'c'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+b\\s\\w+c')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+b\\s\\w+c')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_startc_endd(text):\n    '''\n    Write a function that matches a string that has a 'c' followed by anything, ending in 'd'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+c\\s\\w+d')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+c\\s\\w+d')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_startd_ende(text):\n    '''\n    Write a function that matches a string that has a 'd' followed by anything, ending in 'e'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+d\\s\\w+e')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+d\\s\\w+e')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_starte_endf(text):\n    '''\n    Write a function that matches a string that has a 'e' followed by anything, ending in 'f'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+e\\s\\w+f')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+e\\s\\w+f')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_startf_endg(text):\n    '''\n    Write a function that matches a string that has a 'f' followed by anything, ending in 'g'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+f\\s\\w+g')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+f\\s\\w+g')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_startg_endh(text):\n    '''\n    Write a function that matches a string that has a 'g' followed by anything, ending in 'h'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+g\\s\\w+h')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+g\\s\\w+h')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_starth_endi(text):\n    '''\n    Write a function that matches a string that has a 'h' followed by anything, ending in 'i'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+h\\s\\w+i')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+h\\s\\w+i')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_starti_endj(text):\n    '''\n    Write a function that matches a string that has a 'i' followed by anything, ending in 'j'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+i\\s\\w+j')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+i\\s\\w+j')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_startj_endk(text):\n    '''\n    Write a function that matches a string that has a 'j' followed by anything, ending in 'k'.\n    '''\n    #pattern = re.compile('\\w+\\s\\w+j\\s\\w+k')\n    #text = 'a b c d e'\n    pattern = re.compile('\\w+\\s\\w+j\\s\\w+k')\n    text = 'a b c d e'\n    count = 0\n    for match in pattern.finditer(text):\n        count += 1\n        if count == 2:\n            print('found')\n            print(match.group())\n            print(text[match.start():match.end()])\n            print('\\n')\n            break\n    else:\n        print('no match')\n    \ndef text_startk_endl(text):\n    '''\n    Write a function that matches a string that has a 'k' followed by anything, ending in 'l'.\n    '''\n    #pattern = re.compile('\\"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    regex = r'\\w+([A-Z]+)'\n    reg = re.search(regex, text)\n    if reg:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total = total + item\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    value_sum = 0\n    for key, value in dict.items():\n        value_sum += value\n    return value_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s = 0\n    for i in dict:\n        s = s + dict[i]\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for items in dict.values():\n        total += items\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for key in dict.keys():\n        dict[key] = return_sum(dict[key])\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # TODO:  Implement this function\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for i in dict.values():\n        result += i\n    return result\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    i = 0\n    result = 0\n    while i < n:\n        if i % 2 == 1:\n            result += i\n        i += 1\n    return result\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n < 1):\n        raise ValueError('The input must be greater than 0.')\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    sum = 0\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            sum = sum + i\n        i += 2\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for n in range(l, r+1): \n        if n % 2!= 0: \n            sum_odd += n\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if (i % 2 == 1):\n            count = count + i\n    return count\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n+1):\n        if (i%2==1):\n            s = s + i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # NOTE: l = 1\n    # NOTE: r = 10\n    # 1. check whether n is an integer\n    # 2. check whether l and r are within the range of the integer \n    # 3. if n is not an integer, return 0.\n    # 4. return the sum of the odd numbers in l to r\n    # 5. return the sum of the odd numbers in l to r.\n    if n < 1: return 0\n    elif n > 10: return 0\n    # check whether n is an integer\n    elif type(n)!= int: return 0\n    # check whether l and r are within the range of the integer \n    elif n <= 1 or n >= 10: return 0\n    # if n is an integer, return the sum of all odd numbers in l to r\n    elif n < 1: return 0\n    elif n > 10: return 0\n    else: return n % 10\n    \nprint(sum_odd(10))\nprint(sum_odd(20))\nprint(sum_odd(7))"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    c = 0\n    for i in range(1, n + 1):\n        if i%2!= 0:\n            c += i\n    print(c)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1: \n        print('Enter a natural number greater than 1.')\n        return\n    if n <= 0: \n        print('Enter a natural number greater than 0.')\n        return\n    if n == 1: \n        print(1)\n        return\n    odds = []\n    for i in range(1, n + 1): \n        if i % 2!= 0: \n            odds.append(i) \n    print(sum(odds))\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        if i%2==1:\n            sum=sum+i\n            i+=1\n        i+=1\n    return sum\n    \nl=int(input('Enter lower bound: '))\nr=int(input('Enter upper bound: '))\nprint(sum_odd(l,r))"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    i = 1\n    sum = 0\n    while i <= n:\n        if i % 2 == 1:\n            sum += i\n        i += 1\n    return sum\n    \n        \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] + arr[1]\n    else:\n        result = _sum(arr[:-1])\n        result += arr[-1]\n        result += _sum(arr[1:])\n        return result\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # sum = 0\n    # for el in arr:\n    #     sum += el\n    # return sum\n    return sum(arr"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total=0\n    for i in arr:\n        total=total+i\n    return total\n    \ndef _prod(arr):  \n    '''\n    Write a python function to find the product of an array.\n    '''\n    total=1\n    for i in arr:\n        total=total*i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for number in arr:\n        total += number\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = sum(arr)\n    return res"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | (n >> (32-d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d) & 0xFF\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n>>d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n,d,e = n & (1 << 31), d, (n >> 32) & (1 << 31)\n    if d == 0:\n        return e\n    else:\n        return left_rotate(e,d)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = (d>>32) + 1\n    if d<1:\n        d = 1\n    a = n&(2**(32-d))\n    n = n>>d\n    n = n|(a<<d)\n    if n==0:\n        return 0\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n<0:\n        return (n+1)%(2**32)\n    else:\n        return n%(2**32)\n        \n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n & ((1 << d) - 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=str(n)\n    return n[::-1].count(\"1\")*2+n[::-1].count(\"0\")\n    \ndef right_rotate(n,d):    \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=str(n)\n    return n[::-1].count(\"1\")*2+n[::-1].count(\"0\")+1\n    \ndef main():\n    n=int(input(\"Enter the number: \"))\n    d=int(input(\"Enter the number of bits to be rotated: \"))\n    print(right_rotate(n,d))\n    print(left_rotate(n,d))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    result = 0\n    d = d % 32\n    for i in range(n):\n        result += (d << 1) & 0xffffffff\n        d >>= 1\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d%32\n    \n    if n < 1:\n        return n\n    if n > 1:\n        n = n%32\n    if n==0:\n        return 1\n    if n==1:\n        return 0\n    if n==2:\n        return -1\n    \n    while n:\n        n &= n-1\n        d+=1\n    d+=1\n    \n    return d\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'[\\s]+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', str(text))\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+',' ', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ','')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile('\\s+')\n    return pattern.sub(' ', text.lower())\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return(x==y==z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pas"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print('t -e-1 :',end='')\n    print(count_equal(x,y,z))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if (x==y and y==z) or (x==z and z==y):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num=0\n    for i in range(3):\n        if x==y==z:\n            num+=1\n    print(num)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y and y == z and z == x\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num = 0\n    if (x==y) or (x==z) or (y==z):\n        num = num +1\n    elif (x==z) or (x==y) or (y==z):\n        num = num +1\n    return num\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(0,len(x)):\n        for j in range(0,len(y)):\n            for k in range(0,len(z)):\n                if x[i]==y[j]==z[k]:\n                    count+=1\n    return count\ndef main():\n    '''\n    Program to count the number of equal numbers from three given integers.\n    '''\n    num1 = int(input(\"Enter first number: \"))\n    num2 = int(input(\"Enter second number: \"))\n    num3 = int(input(\"Enter third number: \"))\n    print(test_three_equal(num1,num2,num3))\nif __name__=='__main__':\n    main("
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c = 0\n    if x==y==z:\n        c+=1\n    elif x==z==y:\n        c+=1\n    elif y==z==x:\n        c+=1\n    elif x==y==z:\n        c+=1\n    elif x==z==y:\n        c+=1\n    else:\n        c+=1\n    print(\"the number of equal numbers is\",c)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    c=0\n    if(x==y==z):\n        c+=1\n    else:\n        for i in range(min(x,y,z),max(x,y,z)+1):\n            if(i==x or i==y or i==z):\n                c+=1\n    return c\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) <= 1:\n        return 0\n    \n    count = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] < arr[right]:\n            if arr[left] <= arr[right]:\n                if left < right:\n                    if arr[left] < arr[right]:\n                        left += 1\n                    right -= 1\n                else:\n                    right -= 1\n            elif arr[right] <= arr[left]:\n                left += 1\n            else:\n                if left == right:\n                    right -= 1\n                else:\n                    count += 1\n                    left += 1\n        else:\n            if left == right:\n                count += 1\n                left += 1\n            else:\n                right -= 1\n                \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rot_count = 0\n    for i in range(len(arr)):\n        rot_count += 1\n    return rot_count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    count = 0\n    \n    n = len(arr)\n    \n    # Traverse through the array in reverse order\n    for i in range(n-1,-1,-1):\n        # Remove the current element\n        arr[i] = arr[i+1]\n        # Move the current element to the end of the list\n        arr[i+1] = arr[i]\n        # Counting\n        count+=1\n    \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    j = len(arr) - 1\n    \n    # Base Case\n    if arr[0] == arr[-1] and j == 1:\n        return 0\n    \n    # Find the first index of the largest value\n    if arr[0] > arr[-1]:\n        # Find the largest index\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                j = i\n                break\n    \n    # Calculate the number of rotations\n    while j >= 1:\n        if arr[j] < arr[j - 1]:\n            count += j - 1\n        else:\n            count += j - 2\n        \n        # Set the current largest value as the next largest value\n        if arr[j - 1] < arr[j] and arr[j] < arr[j - 2] :\n            arr[j - 1], arr[j] = arr[j], arr[j - 1]\n        # Set the next largest value as current largest value\n        elif arr[j - 1] >= arr[j]:\n            arr[j - 2], arr[j] = arr[j], arr[j - 2]\n        else:\n            break\n        j -= 1\n    \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    # First step is finding out which element is at the middle\n    # (1) put the first element in the middle\n    if n % 2 == 0:\n        mid = n // 2\n        # print(mid)\n        return count_rotation(arr[:mid]) + count_rotation(arr[mid+1:])\n    else:\n        # print(n)\n        return count_rotation(arr[:n//2]) + count_rotation(arr[n//2:])\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    res = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    mid = 0\n    flag = 0\n    while left < right:\n        if arr[mid] < arr[left]:\n            if arr[mid] == arr[left]:\n                flag = 1\n                left += 1\n            else:\n                mid += 1\n        else:\n            if arr[mid] == arr[right]:\n                flag = 1\n                right -= 1\n            else:\n                mid -= 1\n    if flag:\n        print(\"Array is already sorted in increasing order. No need to perform any rotation\")\n    else:\n        print(\"Array is already sorted in increasing order. No need to perform any rotation\")\n    \n    \nif __name__ == '__main__':\n    count_rotation([2,3,5,6,8,0,1,2])"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    square = int(n ** 0.5)\n    for i in range(square) :\n        if n % i == 0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == int(n) :\n        return True\n    if n == int(n) and n % 2 == 0 :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Your code here\n    if(n == n**0.5):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n%2 == 0:\n        return False\n    elif n == int(n/2) or n == 3*int(n/2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = int(n**0.5)\n    if sq**2 == n :\n        return True\n    else :\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 or n == 2:\n        return True\n    else:\n        sqrt = int(math.sqrt(n))\n        for i in range(sqrt+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n<0 or n%2==0) :\n        return False\n    for i in range(1,n) :\n        if n%i==0 :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #return int(str(n)[::-1]) == int(str(n)[::-2])\n    if n!= 0:\n        n_sq = int(str(n)[::-1])\n        if n == n_sq:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n==1):\n        return True\n    else:\n        if (n%2==0):\n            return False\n        elif (n%3==0):\n            return False\n        elif (n%4==0):\n            return False\n        else :\n            return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0:\n        return True\n    else:\n        # Find the first number in the list\n        first_num = arr[0]\n        # if the first number is even\n        if first_num%2==0:\n            # return True\n            return arr[0]%2==0\n        else:\n            return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)==0 or len(arr)<2:\n        return False\n    elif arr[0]%2==0:\n        return False\n    else:\n        return True\n    \ndef product_even(arr): \n    '''\n    Write a function that takes in an array and returns the product of even elements\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product\n    \ndef is_odd(arr):\n    '''\n    Write a function that takes an array of numbers and returns True if \n    the array contains an odd number, otherwise return False.\n    '''\n    if len(arr)==0:\n        return False\n    elif len(arr)<2:\n        return True\n    else:\n        for i in arr:\n            if i%2==1:\n                return False\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    if sum%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    def product(a,b):\n        c = a*b\n        return c\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        n1 = product(arr[0],arr[1])\n        n2 = product(arr[0],arr[2])\n        n3 = product(arr[0],arr[3])\n        n4 = product(arr[1],arr[2])\n        n5 = product(arr[1],arr[3])\n        n6 = product(arr[2],arr[3])\n        n7 = product(arr[3],arr[4])\n        n8 = product(arr[4],arr[5])\n        n9 = product(arr[4],arr[6])\n        n10 = product(arr[5],arr[6])\n        n11 = product(arr[6],arr[7])\n        n12 = product(arr[6],arr[8])\n        n13 = product(arr[7],arr[8])\n        n14 = product(arr[7],arr[9])\n        n15 = product(arr[8],arr[9])\n        n16 = product(arr[8],arr[10])\n        n17 = product(arr[9],arr[10])\n        n18 = product(arr[10],arr[11])\n        n19 = product(arr[10],arr[12])\n        n20 = product(arr[11],arr[12])\n        n21 = product(arr[12],arr[13])\n        n22 = product(arr[12],arr[14])\n        n23 = product(arr[13],arr[14])\n        n24 = product(arr[14],arr[15])\n        n25 = product(arr[14],arr[16])\n        n26 = product(arr[15],arr[16])\n        n27 = product(arr[16],arr[17])\n        n28 = product(arr[16],arr[18])\n        n29 = product(arr[17],arr[18])\n        n30 = product(arr[18],arr[19])\n        n31 = product(arr[18],arr[20])\n        n32 = product(arr[19],arr[20])\n        n33 = product(arr[20],arr[21])\n        n34 = product(arr[21],arr[22])\n        n35 = product(arr[22],arr[23])\n        n36 = product(arr[23],arr[24])\n        n37 = product(arr[24],arr[25])\n        n38 = product(arr[25],arr[26])\n        n39 = product(arr[26],arr[27])\n        n40 = product(arr[27],arr[28])\n        n41 = product(arr[28],arr[29])\n        n42 = product(arr[29],arr[30])\n        n43 = product(arr[30],arr[31])\n        n44 = product(arr[31],arr[32])\n        n45 = product(arr[32],arr[33])\n        n46 = product(arr[33],arr[34])\n        n47 = product(arr[34],arr[35])\n        n48 = product(arr[35],arr[36])\n        n49 = product(arr[36],arr[37])\n        n50 = product(arr[37],arr[38])\n        n51 = product(arr[38],arr[39])\n        n52 = product(arr[39],arr[40])\n        n53 = product(arr[40],arr[41])\n        n54 = product(arr[41],arr[42])\n        n55 = product(arr[42],arr[43])\n        n56 = product(arr[43],arr[44])\n        n57 = product(arr[44],arr[45])\n        n58 = product(arr[45],arr[46])\n        n59 = product(arr[46],arr[47])\n        n60 = product(arr[47],arr[48])\n        n61 = product(arr[48],arr[49])\n        n62 = product(arr[49],arr[50])\n        n63 = product(arr[50],arr[51])\n        n64 = product(arr[51],arr[52])\n        n65 = product(arr[52],arr[53])\n        n66 = product(arr[53],arr[54])\n        n67 = product(arr[54],arr[55])\n        n68 = product(arr[55],arr[56])\n        n69 = product(arr[56],arr[57])\n        n70 = product(arr[57],arr[58])\n        n71 = product(arr[58],arr[59])\n        n72 = product(arr[59],arr[60])\n        n73 = product(arr[60],arr[61])\n        n74 = product(arr[61],arr[62])\n        n75 = product(arr[62],arr[63])\n        n76 = product(arr[63],arr[64])\n        n77 = product(arr[64],arr[65])\n        n78 = product(arr[65],arr[66])\n        n79 = product(arr[66],arr[67])\n        n80 = product(arr[67],arr[68])\n        n81 = product(arr[68],arr[69])\n        n82 = product(arr[69],arr[70])\n        n83 = product(arr[70],arr[71])\n        n84 = product(arr[71],arr[72])\n        n85 = product(arr[72],arr[73])\n        n86 = product(arr[73],arr[74])\n        n87 = product(arr[74],arr[75])\n        n88 = product(arr[75],arr[76])\n        n89 = product(arr[76],arr[77])\n        n90 = product(arr[77],arr[78])\n        n91 = product(arr[78],arr[79])\n        n92 = product(arr[79],arr[80])\n        n93 = product(arr[80],arr[81])\n        n94 = product(arr[81],arr[82])\n        n95 = product(arr[82],arr[83])\n        n96 = product(arr[83],arr[84])\n        n97 = product(arr[84],arr[85])\n        n98 = product(arr[85],arr[86])\n        n99 = product(arr[86],arr[87])\n        n100 = product(arr[87],arr[88])\n        n101 = product(arr[88],arr[89])\n        n102 = product(arr[89],arr[90])\n        n103 = product(arr[90],arr[91])\n        n104 = product(arr[91],arr[92])\n        n105 = product(arr[92],arr[93])\n        n106 = product(arr[93],arr[94])\n        n107 = product(arr[94],arr[95])\n        n108 = product(arr[95],arr[96])\n        n109 = product(arr[96],arr[97])\n        n110 = product(arr[97],arr[98])\n        n111 = product(arr[98],arr[99])\n        n112 = product(arr[99],arr[100])\n        n113 = product(arr[100],arr[101])\n        n114 = product(arr[101],arr[102])\n        n115 = product(arr[102],arr[103])\n        n116 = product(arr[103],arr[104])\n        n117 = product(arr[104],arr[105])\n        n118 = product(arr[105],arr[106])\n        n119 = product(arr[106],arr[107])\n        n120 = product(arr[107],arr[108])\n        n121 = product(arr[108],arr[109])\n        n122 = product(arr[109],arr[110])\n        n123 = product(arr[110],arr[111])\n        n124 = product(arr[111],arr[112])\n        n125 = product(arr[112],arr[113])\n        n126 = product(arr[113],arr[114])\n        n127 = product(arr[114],arr[115])\n        n128 = product(arr[115],arr[116])\n        n129 = product(arr[116],arr[117])\n        n130 = product(arr[117],arr[118])\n        n13"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Write your code here.\n    for i in range(0,len(arr)):\n        if (arr[i] % 2)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (arr[0]%2 == 0) and (arr[1]%2 == 0)\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return True\n    if (arr[0] % 2) == 0:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] and arr[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    odd_number_count = 0\n    for num in arr:\n        if num % 2 == 1:\n            odd_number_count += 1\n    if odd_number_count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    lst = []\n    for i in range(0, len(lists)):\n        for j in range(i+1, len(lists)):\n            if lists[i][j][0] == lists[j][i][0] and lists[i][i][1] > lists[j][j][1]:\n                lists[j][i] = lists[i][j]\n            if lists[i][j][1] == lists[j][i][1]:\n                if lists[i][j][0] > lists[j][i][0]:\n                    lists[j][i] = lists[i][j]\n    return lists\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    result_sum = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > lists[i][j] + max(lists[i]):\n                max_sum_list.append(lists[i][j])\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # YOUR CODE HERE\n    if lists == []:\n        return []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # list_of_numbers = [int(x) for x in input().split()]\n    # list_of_numbers.sort(reverse=True)\n    # highest_sum = list_of_numbers[0]\n    # for i in range(1, len(list_of_numbers)):\n    #     if list_of_numbers[i] > highest_sum:\n    #         highest_sum = list_of_numbers[i]\n    # return highest_sum\n    max_sum = 0\n    highest_sum = None\n    for item in lists:\n        if list_of_numbers.count(item) > 0:\n            if highest_sum == None or list_of_numbers[highest_sum]!= item:\n                highest_sum = list_of_numbers[highest_sum]\n            elif list_of_numbers[highest_sum] == item:\n                highest_sum = highest_sum + 1\n                if highest_sum > max_sum:\n                    max_sum = highest_sum\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # TODO: implement this function\n    max_list = []\n    list_copy = lists.copy()\n    for list_item in list_copy:\n        sum_of_elements = 0\n        for number in list_item:\n            sum_of_elements += number\n        if sum_of_elements > max_list[-1]:\n            max_list.append(list_item)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_list = []\n    for element in lists:\n        list_append_element = []\n        list_append_element.append(element[0])\n        for i in range(1, len(element)):\n            list_append_element.append(element[i] + list_append_element[i - 1])\n        new_list.append(list_append_element)\n    return new_list\n    \n    \n    "
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > 0:\n                highest_sum_list.append(lists[i][j])\n    return highest_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    \n    list1 = [i for i in lists]\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] > max:\n                max = test_str[i]\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #To test\n    #test_str = \"ASdfghjklASDFGHJKL\"\n    #test_str = \"abcdefghijklmnopqrstuvwxyz\"\n    #test_str = \"13579\"\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    for char in test_str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_upper = 0\n    result = \"\"\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if len(result) > 0:\n                if len(result) > max_run_upper:\n                    max_run_upper = len(result)\n                    result = \"\"\n            if len(result) == 0:\n                result = test_str[i]\n            else:\n                result += test_str[i]\n        else:\n            result += test_str[i]\n    \n    return max_run_upper, result\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase_char = []\n    for i in range(len(test_str)):\n        current_char = test_str[i]\n        if current_char.isupper():\n            if current_char not in max_run_uppercase_char:\n                max_run_uppercase_char.append(current_char)\n        else:\n            if current_char not in max_run_uppercase_char:\n                max_run_uppercase_char.append(current_char)\n    return max(max_run_uppercase_char)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_c = 0\n    max_r = 0\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] == test_str[i].upper():\n                max_c += 1\n            elif test_str[i] == test_str[i].lower():\n                max_c += 1\n            else:\n                max_r += 1\n    return max_r, max_c\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_list = list(test_str)\n    max_run = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    def check_upper(text):\n        '''\n        Function to check if the given text contains upper characters\n        '''\n        \n        return all(c.isupper() for c in text)\n        \n    def check_lower(text):\n        '''\n        Function to check if the given text contains lower characters\n        '''\n        \n        return all(c.islower() for c in text)\n        \n    def get_run_max_upper_uppercase(text):\n        '''\n        Function to find the max run of upper and upper and lower\n        characters in the given text\n        '''\n        \n        return max(get_run_max_upper_uppercase(text.lower()), get_run_max_upper_uppercase(text.upper()))\n        \n    return max_run_uppercase(check_upper(test_str)) or max_run_uppercase(check_lower(test_str)) or get_run_max_upper_uppercase(test_str)\n        \ndef min_run_uppercase(test_str):\n    '''\n    Write a function to find minimum run of uppercase characters in the given string.\n    '''\n    \n    def check_upper(text):\n        '''\n        Function to check if the given text contains upper characters\n        '''\n        \n        return all(c.isupper() for c in text)\n        \n    def check_lower(text):\n        '''\n        Function to check if the given text contains lower characters\n        '''\n        \n        return all(c.islower() for c in text)\n        \n    def get_run_min_upper_uppercase(text):\n        '''\n        Function to find the min run of upper and upper and lower\n        characters in the given text\n        '''\n        \n        return min(get_run_min_upper_uppercase(text.lower()), get_run_min_upper_uppercase(text.upper()))\n        \n    return get_run_min_upper_uppercase(check_upper(test_str)) or get_run_min_upper_uppercase(check_lower(test_str)) or min_run_uppercase(test_str)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase = 0\n    for char in test_str:\n        if char.isupper():\n            max_uppercase = max(max_uppercase, ord(char.upper()))\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if(i%2==1):\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd = odd + 1\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            return num\n        else:\n            return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = 0\n    for num in nums:\n        if num % 2!= 0:\n            odd += num\n    return odd\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd = 0\n    nums.sort()\n    \n    for num in nums:\n        if (num % 2)!= 0:\n            odd = num\n            break\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #Your code here\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return [x for x in nums if x%2!=0][0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # return first odd number\n    return nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Iterate through the tuples\n    for i in range(len(test_tup)):\n        # Check if the tuple is contained in the tuple\n        if test_tup[i][0] < test_tup[i][1]:\n            # Add a 1 to the tuple\n            test_tup[i] = (test_tup[i][0] + 1, test_tup[i][1])\n    \n    # Create a copy of the tuple to return\n    res = tuple(test_tup)\n    \n    # Return the result\n    return res\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        print(\"Invalid tuples. The tuples must contain K values.\")\n        return False\n    for i in test_tup:\n        if i not in K:\n            print(\"Invalid tuples. The tuples must contain K values.\")\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return True if len(set(test_tup[0]) & set(K)) == 0 else False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # k is a positive integer.\n    # -1 means no check needed\n    # -1 means -1 is returned\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = list(test_tup)\n    \n    # We are checking if the tuples contains all the k's and if the length of the tuple is equal or greater than K\n    for i in range(0, len(test_tup)):\n        if test_tup[i] not in K:\n            return False\n        elif len(test_tup) == len(K):\n            if test_tup[i]!= K[i]:\n                return False\n    return True\n    \ndef check_D(test_tup, D):\n    '''\n    Write a function to check if the given tuples contain the d or not.\n    '''\n    test_tup = list(test_tup)\n    for i in range(0, len(test_tup)):\n        if test_tup[i] not in D:\n            return False\n        elif len(test_tup) == len(D):\n            if test_tup[i]!= D[i]:\n                return False\n    return True\n    \ndef main():\n    '''\n    The main function of the program.\n    '''\n    # Reading the file from the user and creating the list\n    file_name = input(\"Enter the name of the file to be read: \")\n    file_open = open(file_name, 'r')\n    file_tuple = []\n    \n    for line in file_open:\n        tup = line.split()\n        file_tuple.append(tup)\n    \n    # Reading the K's from the user and creating a list\n    K = input(\"Enter the K's: \")\n    K = K.split(\",\")\n    \n    # Reading the d's from the user and creating a list\n    D = input(\"Enter the D's: \")\n    D = D.split(\",\")\n    \n    # Checking if the tuples contain the k's and if the length of the tuples is equal or greater than K\n    if check_K(file_tuple, K) == True:\n        print(\"The tuples contains all the k's.\")\n    elif check_D(file_tuple, D) == True:\n        print(\"The tuples contains all the d's.\")\n    else:\n        print(\"The tuples does not contain all the k's or d's.\")\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #returns True if tuple contains k else False\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (tuple(test_tup) not in K)\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return type(test_tup) == tuple and all(type(i) == int for i in test_tup) and len(test_tup) == K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(test_tup[i] % K == 0 for i in range(len(test_tup)))\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Declare two empty lists.\n    smaller_list = []\n    greater_list = []\n    for i in test_tup2:\n        # if the second tuple has an element greater than the first tuple's element, append it to list\n        if i > test_tup1[0]:\n            smaller_list.append(i)\n        else:\n            greater_list.append(i)\n    return lesser_list, greater_list\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # TODO-1: Create an empty tuple and then copy/paste from the list\n    # https://stackoverflow.com/questions/16082776/python-how-to-check-if-two-tuples-are-smaller\n    tuple1 = tuple(test_tup1)\n    tuple2 = tuple(test_tup2)\n    # https://www.geeksforgeeks.org/python-tuple-length-3-check-method/\n    if len(tuple1) == len(tuple2):\n        for i in range(len(tuple1)):\n            if tuple1[i] < tuple2[i]:\n                print(\"The number of test elements in tuples are smaller than the number of elements in the list\")\n                return False\n    else:\n        print(\"The number of test elements in tuples are not the same.\")\n        return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup3 = []\n    for item1 in test_tup1:\n        for item2 in test_tup2:\n            if item1 > item2:\n                test_tup3.append(item1)\n    return test_tup3\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    try:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n    except IndexError:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # your code here\n    for i in test_tup2:\n        if i < test_tup1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the size of test_tup1 is same as the size of test_tup2\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuple size mismatched.\"\n    # initialize an empty dictionary to store the values\n    test_tup_lst = {}\n    # iterate over the elements of the tuples\n    for i in range(len(test_tup1)):\n        # add the corresponding element to the dictionary\n        test_tup_lst[test_tup1[i]] = test_tup2[i]\n    # loop over the keys of the dictionary\n    for k in test_tup_lst:\n        # if the corresponding value of the key is less than the corresponding value of the second key in the first tuple\n        if test_tup_lst[k] < test_tup2[0]:\n            return \"Key not in the first tuple.\"\n    # return True\n    return \"The elements are smaller.\"\n"
    }
]