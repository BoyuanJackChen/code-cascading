[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Write your code here\n    # Initialize two variables to store the elements of both lists\n    # Do the following for loops to iterate through the lists\n    # Insert your code here\n    \n    return",
        "num_ids": 48
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            shared.append(tup)\n    return shared\n",
        "num_ids": 45
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result.append(element)\n",
        "num_ids": 37
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    test_tup1.sort()\n    test_tup2.sort()\n    counter = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            counter += 1\n    if counter == len(test_tup1):\n        return True\n    else:\n        return False\n    \ntest_tup1 = ['a', 'b', 'c', 'c']\ntest_tup2 = ['a', 'b', 'c', 'b', 'c']\n",
        "num_ids": 160
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = list(test_tup1)\n    b = list(test_tup2)\n    result = []\n    for i in a:\n        for j in b:\n            if i == j:\n                result.append(i)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # pass\n    output = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                output.append(test_tup1[i])\n",
        "num_ids": 77
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n",
        "num_ids": 47
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = [1, 1, 2, 3, 4]\n    l2 = [1, 2, 3, 4, 5]\n",
        "num_ids": 34
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        print(\"The lists must be same length\")\n        return False\n    \n    if len(test_tup1) == 0:\n        print(\"The lists are empty.\")\n        return False\n    \n    if len(test_tup2) == 0:\n        print(\"The lists are empty.\")\n        return False\n    \n    #Use a dictionary to map the values from lists.\n    \n    val_dict = dict()\n    for i in range(len(test_tup1)):\n        val_dict[test_tup1[i]] = test_tup2[i]\n        \n    #Get the intersection of the test_tup1 and the val_dict.\n    \n    inter_list = list(val_dict.values())\n    inter_list = set(inter_list)\n    \n    #Print the intersection of the test_tup1 and val_dict.\n    \n    print(\"The intersection of the lists is:\")\n    print(inter_list)\n    \n    return True\n    ",
        "num_ids": 259
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for x in range(3, int(math.sqrt(n))+1, 2):\n            if n % x == 0:\n                return False\n        return True\n    \ndef prime_number(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    for i in range(3, n//2+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not any(i%2==0 for i in range(2,int(math.sqrt(n))+1))\n",
        "num_ids": 32
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 0:\n        return True\n    for d in range(2, int(math.sqrt(n)) + 1):\n        if n % d == 0:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n) + 1), 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 83
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n//2+1):\n            if n % i == 0:\n                return False\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    def isprime(n):\n        '''\n        Check if a number is prime or not.\n        '''\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 77
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if n == 2 or n == 3:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return is_not_prime(n - 1)\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return True\n    if n > 1:\n        if is_prime(n - 1):\n            return False\n        else:\n            return True\n        \ndef find_prime(start, stop):\n    '''\n    Write a python function to find the prime numbers in a range.\n    '''\n    n = []\n    for i in range(start, stop):\n        if is_not_prime(i):\n            n.append(i)\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2 or n == 2:\n        return True\n    elif n <= 5:\n        return False\n    else:\n        for i in range(2, math.floor(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,-num)\n    for i in range(n-1):\n        heapq.heappush(heap,-heapq.heappop(heap))\n    return(heapq.heappop(heap))\n",
        "num_ids": 81
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for n in nums:\n        heapq.heappush(heap,n)\n    return(heap)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    '''\n    Heap queue:\n    1. Calculate heaps of nums and put them in a list\n    2. For each num in the list, append to a list of heaps\n    3. Sort the list of heaps in descending order\n    4. Return the n largest numbers\n    '''\n    heap = [num for num in nums]\n    for i in range(n-1):\n        heapq.heappush(heap, heapq.heappop(heap)+heap[i])\n    return heap\n",
        "num_ids": 58
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap_queue = []\n    for i in range(len(nums)):\n        heapq.heappush(heap_queue,nums[i])\n    for i in range(len(nums)):\n        if i == (len(nums)-1):\n            break\n        heapq.heappush(heap_queue,nums[i+1])\n    for i in range(len(nums)):\n        nums[i] = heapq.heappop(heap_queue)\n    return nums\nnums = [1,3,5,7,9,12,13,15,17,18,19,20]\n",
        "num_ids": 161
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    heap = []\n    for i in range(n-1,-1,-1):\n        heapq.heappush(heap,[sorted_list[i]])\n    return heap\ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    h = []\n    for i in range(n):\n        heapq.heappush(h,nums[i])\n    for i in range(n):\n        heapq.heappush(h,-hq.heappop(h))\n    return h\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    heap = []\n    for i in range(n-1,-1,-1):\n        heapq.heappush(heap,[sorted_list[i]])\n    return heap\ndef heap_queue_smallest_2(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if not nums:\n        return []\n    h = []\n    for i in range(n):\n        heapq.heappush(h,[nums[i]])\n    for i in range(n):\n        heapq.heappush(h,-heapq.heappop(h))\n    return h\ndef heap_sort_desc(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_asc(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=False)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_2(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_3(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_4(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_5(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_6(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_7(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_8(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_9(nums):\n    '''\n    Write a function to sort a given array of numbers, using the largest to smallest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_10(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_11(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_12(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_13(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_14(nums):\n    '''\n    Write a function to sort a given array of numbers, using the smallest to largest order.\n    '''\n    if not nums:\n        return []\n    sorted_list = sorted(nums,reverse=True)\n    sorted_list.insert(0,0)\n    sorted_list.append(0)\n    return sorted_list\ndef heap_sort_15(nums):\n    '''\n    Write a function to sort a given array o",
        "num_ids": 12
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #returns [i for i in range(n) if nums[i] > nums[i+1]]\n",
        "num_ids": 30
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return heapq.nlargest(n, nums, key=lambda x: x)\n",
        "num_ids": 23
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in nums:\n        arr.append(i)\n    heapq.heapify(arr)\n    index=n\n    while len(arr)>0:\n        max_heap=arr[0]\n        heapq.heapreplace(arr,max_heap)\n        index-=1\n        if len(arr)>0:\n            max_heap=arr[0]\n            heapq.heapreplace(arr,max_heap)\n            if index>=0:\n                arr[0]=arr[index]\n                heapq.heapreplace(arr,arr[0])\n                index-=1\n        else:\n            break\n    return arr\n",
        "num_ids": 173
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 1:\n        return nums[0]\n    if n == 2:\n        return min(nums[0], nums[1])\n    return heap_queue_largest(nums[:n], n-1) + nums[n]\n",
        "num_ids": 64
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    q = []\n    \n    for num in nums:\n        heapq.heappush(q,num)\n        \n    for _ in range(n-1):\n        tmp = heapq.heappop(q)\n        heapq.heappush(q,tmp*-1)\n        \n    return [x for x in q[:n]]\n        \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    \n    q = []\n    \n    for num in nums:\n        heapq.heappush(q,num)\n        \n    for _ in range(n-1):\n        tmp = heapq.heappop(q)\n        heapq.heappush(q,tmp)\n        \n    return [x for x in q[:n]]\n    \ndef get_next_greatest(heap_queue):\n    '''\n    Write a function to get the next greater number in a list of numbers.\n    '''\n    \n    if len(heap_queue)==1:\n        return heap_queue[0]\n    \n    hq = heapq.heapify(heap_queue)\n    \n    for i in range(len(heap_queue)-1,-1,-1):\n        if hq[i]<hq[i+1]:\n            hq[i],hq[i+1] = hq[i+1],hq[i]\n        else:\n            break\n    return hq[0]\n",
        "num_ids": 125
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & x+1) == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2**32:\n        return False\n    else:\n        if x % 2 == 0:\n            return False\n        else:\n            return True",
        "num_ids": 39
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x >= 1:\n        if x % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2147483647: \n        return True\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(1, x//2 + 1):\n            if x % i == 0:\n                return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return False\n    else:\n        while x % 2 == 0:\n            x = x / 2\n        return True\n",
        "num_ids": 37
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 2147483647 or x < -2147483648:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = x\n    x_str = str(x)\n    if len(x_str) == 1:\n        if x_str == '0':\n            return True\n        else:\n            return False\n    elif len(x_str) == 2:\n        if x_str[0] == x_str[1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 100
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = abs(x)\n    y = abs(x)\n",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    result = x & (x-1)\n    return result == 0\n",
        "num_ids": 19
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('\\w{4,}')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern_long = re.compile('[a-zA-Z0-9\\s]+')\n    return re.findall(pattern_long, text)\n",
        "num_ids": 41
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z0-9_]+'\n    return list(filter(lambda word: len(word) >= 4, re.findall(pattern, text)))\n",
        "num_ids": 47
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a = len(text.split())\n    b = []\n    for word in text.split():\n        if a >= 4:\n            b.append(word)\n    return b\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for word in text:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    if re.search(r'[^a-zA-Z]+', text) is not None:\n        return [word.lower() for word in text.lower().split() if len(word) >= 4]\n    else:\n        return []\n",
        "num_ids": 60
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            res.append(text[i])\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    results = []\n    for word in text.split():\n        if len(word) >= 4:\n            results.append(word)\n    return results\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    search_pattern = r'\\b([A-Za-z_]){4,}\\1'\n    search_string = re.search(search_pattern, text)\n    return search_string.group()\n",
        "num_ids": 52
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Create an empty list\n    char_list = []\n    # Iterate through each char in text\n    for char in text:\n        # Check if char is a letter\n        if char.isalpha():\n            char_list.append(char)\n    # If there are letters, only check for words longer than 4\n    if len(char_list) > 0:\n        # Convert list to string and then split it into words\n        string_list = \"\".join(char for char in char_list)\n        # Check if list contains at least 4 characters\n        if len(string_list) >= 4:\n            print(string_list)\n",
        "num_ids": 149
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # TODO: Create an empty list\n    squares = []\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for number in nums:\n        squares.append(number**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        nums[i] = nums[i]**2\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result=[]\n    for i in range(len(nums)):\n        result.append(nums[i]*nums[i])\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i]**2)\n    return squares\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Solicitate the number of elements\n    n = len(nums)\n    # Store all squares of nums\n    square_nums = [num**2 for num in nums]\n    # Return the squares\n    return square_nums\n",
        "num_ids": 60
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Your code here\n    squared = []\n    for i in nums:\n        squared.append(i*i)\n    return squared\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i+1] == str[i]:\n            rotations += 1\n        else:\n            break\n    return rotations\n",
        "num_ids": 53
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    lst = []\n    length = 0\n    for i in str:\n        lst.append(ord(i))\n    for i in range(26):\n        length+=1\n    for i in lst:\n        if (lst.count(i)>1):\n            if (lst.count(i)>length):\n                length=lst.count(i)\n    return length\n",
        "num_ids": 96
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    possible = 0\n    rotations = 0\n    for i in range(0,len(str)-1):\n        if str[i] == str[i+1]:\n            possible += 1\n            rotations += 1\n        elif str[i] == str[i+1][::-1]:\n            rotations += 1\n    print(possible, rotations)\n",
        "num_ids": 90
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    rotations = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if (str[j] == str[i]) or (str[j]!= str[i]):\n                rotations = rotations + 1\n    return rotations\n",
        "num_ids": 76
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)<=1:\n        return 0\n    arr=[]\n    for i in range(0,len(str)):\n        if len(arr)>1:\n            return len(arr)\n        elif arr.count(str[i])>=1:\n            return len(arr)\n        else:\n            arr.append(str[i])\n    return len(arr)",
        "num_ids": 96
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if(str[i] == str[j]):\n                rotations += 1\n    return rotations\n",
        "num_ids": 65
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    arr = []\n    num = 1\n    for i in range(len(str)):\n        arr.append(str[i])\n    num = 1\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if (arr[i] == arr[j]):\n                if num > num:\n                    num = num \n                    \n    return num \n",
        "num_ids": 101
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #make a map of the letters to their rotations\n    alphabets = {'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'J':9,'K':10,'L':11,'M':12,'N':13,'O':14,'P':15,'Q':16,'R':17,'S':18,'T':19,'U':20,'V':21,'W':22,'X':23,'Y':24,'Z':25}\n    #loop through the string and make a string with its rotations\n    for rotations in range(1,26):\n        rotated_str = rotations * rotations\n        #convert the string to a list and make the list a string\n        rotated_str_list = list(str)\n        #check if it's a rotated string\n        if rotated_str in alphabets:\n            #make a string for the list\n            rotated_str_list = str.split(' ')\n            #make the string a string\n            string_to_rotate = ''.join(rotated_str_list)\n            #make the string rotated\n            rotated_str = string_to_rotate\n    #convert the list of strings back into a string\n    rotated_str =''.join(rotated_str_list)\n    #return the minimum\n    return len(rotated_str)",
        "num_ids": 334
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    print(str.count('ROT'))\n    return str.count('ROT')\n",
        "num_ids": 24
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    if(len(str) > 1):\n        for i in range(len(str) - 1):\n            count = 0\n            for j in range(i + 1, len(str)):\n                if(str[j]!= str[i]):\n                    count += 1\n            if(count < 3):\n                rotations += 1\n                print(rotations)\n    return rotations\n",
        "num_ids": 100
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if(ch in s[0]):\n        s.remove(s[0])\n        s.remove(ch)\n    else:\n        pass\n    return \"\".join(s)\n",
        "num_ids": 55
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    char_to_remove = s[ch]\n    index_first = s.find(char_to_remove)\n    index_last = s.rfind(char_to_remove)\n    s = s[:index_first] + char_to_remove + s[index_last+1:]\n    return s\n",
        "num_ids": 77
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    if (s[0] == ch) and (s[-1] == ch):\n        return s\n    else:\n        return remove_Occ(s[1:],ch)\n",
        "num_ids": 53
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if(ch == 'A'):\n        return s[0:l-1]+s[-1]\n    elif(ch == 'C'):\n        return s[0:l-1]+s[-2]+s[l-1]+s[l]\n    elif(ch == 'G'):\n        return s[0:l-1]+s[1:l]+s[l-1]+s[l]\n    elif(ch == 'T'):\n        return s[0:l-1]+s[2:l]+s[l-1]+s[l]\n    else:\n        return s[0:l-1]+s[1:l]+s[l-1]+s[l]\n",
        "num_ids": 180
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s: \n        print(\"not found\") \n        return \n    elif ch == \"A\": \n        print(\"no\") \n        return \n    elif ch == \"C\": \n        print(\"No\") \n        return \n    elif ch == \"G\": \n        print(\"No\") \n        return \n    else: \n        print(\"Error\") \n        return \n",
        "num_ids": 102
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # you can use 'ch' as a parameter \n    # when it is used as a string parameter in the string method\n    if s[0] == ch and s[-1] == ch: \n        s.pop(0)\n        s.pop()\n    return s\n",
        "num_ids": 67
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    char_list = list(s) \n    print(char_list)\n    print(char_list.index(ch))\n    print(char_list.count(ch))\n    if len(char_list) < 1: \n        return 'Invalid Input'\n    else: \n        print(char_list.pop(0)) \n        print(char_list.pop()) \n        print(char_list) \n",
        "num_ids": 103
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        if ch in s:\n            start = s.index(ch)\n            if start == 0:\n                s.pop(0)\n            else:\n                s[start-1] = ''\n        else:\n            raise ValueError\n    except ValueError:\n        raise\n        ",
        "num_ids": 71
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    start = s.find(ch)\n    end = s.rfind(ch)\n    s = s[:start]+s[end+1:]\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    if s[0] == ch:\n        s.pop(0)\n        s.pop(0)\n        return \"\".join(s)\n    else:\n        return remove_Occ(s,ch)\n",
        "num_ids": 66
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 0:\n        return\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = []\n    for row in range(len(M)):\n        if len(rows) == 0:\n            rows.append([])\n        for column in range(len(M[0])):\n            if len(rows[-1]) == 0:\n                rows[-1].append(M[row][column])\n            elif M[row][column] < M[-1][column]:\n                rows[-1].append(M[row][column])\n            else:\n                rows[-1][column] = M[row][column]\n    return rows\n",
        "num_ids": 135
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 0\n    for row in M:\n        row.sort()\n        i += row[0]\n    j = 0\n    for col in M:\n        col.sort(reverse=True)\n        j += col[0]\n    S = [i, j]\n    M = [[0 for _ in range(S[1])] for _ in range(S[0])]\n    for row in M:\n        row.sort()\n    return M\n",
        "num_ids": 110
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    if n == 0:\n        return \n    sum_rows = sum(M[i][j] for i in range(n) for j in range(i+1, n))\n    M = sorted(M, key = lambda row: sum(row))\n    return M\n    \ndef main():\n    # Check that the input is valid.\n    if not (is_valid_input(a, b) or is_valid_input(a, c)):\n        return False\n    if not (is_valid_input(b, c) or is_valid_input(a, b)):\n        return False\n",
        "num_ids": 152
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    A = []\n    for row in M:\n        A.append(row[0])\n    A.sort(reverse=True)\n    return A",
        "num_ids": 37
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Note: To make sorting the same as the original matrix, i.e. only sorting by rows, nothing will be done by the function.\n    # But, the sorted matrix will be in the same order as the original matrix.\n    # All the rows will be summed together to get a final matrix.\n    # For example,\n    # M = [[1,1,1],[0,1,2],[2,1,1]]\n    # Sum = sum([sum(row) for row in M]) = 6\n    # After sorting the matrix, the answer is [[0,1,2],[1,0,2],[2,1,1]]\n    # Input\n    # The input matrix, M, is given in the following form:\n    # 1 1 1\n    # 0 1 2\n    # 2 0 1\n    # 1 2 1\n",
        "num_ids": 191
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n",
        "num_ids": 95
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])-1):\n            if M[i][j]!= M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M",
        "num_ids": 83
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    S = []\n    for i in range(0, n):\n        S.append(sum(M[i]))\n    S.sort(reverse=True)\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if S[i] + S[j] == M[i][j]:\n                M[i] = M[j]\n                M[j] = S[j]\n                break\n",
        "num_ids": 117
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # remove empty elements in the matrix\n    # remove first row of empty elements\n    # recursively sort the elements of the other row\n    # print the result\n    # print(M)\n    M_1 = []\n    for i in range(len(M)):\n        if M[i] == 0:\n            M_1.append([])\n        else:\n            M_1.append(M[i])\n",
        "num_ids": 100
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (b*(h**3)) / 2\n    print (\"The Volume of the Triangle is :\", volume)\n",
        "num_ids": 30
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = b*(h/2)\n    b = (l-a)*(h/2)\n    c = l*(h/2)\n    if a+b+c > 0:\n        volume = (a**2)+(b**2)+(c**2)\n    else:\n        volume = 0\n    return volume\n",
        "num_ids": 81
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    if (l<=h and b<=h) :\n        return round((h*b*math.sqrt((2*(l+h))/3))/3,3)\n    else :\n        return -1",
        "num_ids": 58
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    d=b**2-4*l*h\n    if d>0:\n        x=2*(b**2-4*l*h)\n        x=x/3\n        return x*(-6.5+0.5*x)\n    else:\n        return -1\n",
        "num_ids": 71
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = 0\n    for i in range (l,b):\n        for j in range (h,i-1, -1):\n            v += h/3*(1 - math.pow(math.sin(math.radians(j)),2))\n    return v\n",
        "num_ids": 67
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculating the area of the triangle\n    area = (h*b) / 2\n    # Calculating the volume of the triangle\n    volume = (4/3) * (area)**3\n    # Return the volume\n    return volume",
        "num_ids": 57
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if(l<=0 or b<=0 or h<=0) : \n        print('values out of range')\n        return 0\n    return b*h*l\n",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*h**2/6\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    m = l / b\n    if h==0 :\n        if m==0 :\n            return m\n        return m*m\n    else :\n        return m*(1 + (b-h)**2/4)\n",
        "num_ids": 55
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*h\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # your code here\n    text_lower_space = text.lower()\n    text_space = text.split(' ')\n    text_space_lower = ''\n    for word in text_space:\n        text_space_lower += word.lower() +''\n    text_lower_space = re.search('(?<= )(?:^| )[a-z]', text_lower_space)\n    text_space_lower = text_space_lower.group()\n    if text_space_lower in text_lower_space:\n        return False\n    else:\n        return True\n",
        "num_ids": 141
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(\"[A-Za-z][A-Za-z_0-9]\")\n    return regex.search(text)!= None\n",
        "num_ids": 43
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"[a-z0-9]\", text)) and bool(re.search(r\"[_+]\", text)) and bool(re.search(r\"[0-9]\", text))\n",
        "num_ids": 54
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    #print(text)\n    #if (re.search(\"[a-z]+[a-z]*\", text)):\n    if (re.search(\"[A-Z]+[a-z]*\", text)):\n        return True\n    else:\n        return False\n    '''\n    return re.search(r\"[a-z]*[A-Z]*\", text)\n    '''\ndef is_digit(char):\n    return re.match(\"\\d+\", char)\n",
        "num_ids": 23
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    elif text == 'hola':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    else:\n        return False\ndef text_lowercase_uppercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    if text == 'hello':\n        return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    elif text == 'hola':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    else:\n        return False\ndef text_lowercase_special(text):\n    '''\n    Write a function that returns true if the input string contains sequences of special characters and false otherwise.\n    '''\n    if text == 'hello':\n        return '!@#$%^&*()_+-={}[]|\\\\|:\"<>?/.,<>'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_commas(text):\n    '''\n    Write a function that returns true if the input string contains sequences of commas and false otherwise.\n    '''\n    if text == 'hello':\n        return 'hello, hi, hello!'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    elif text == 'hola':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    else:\n        return False\ndef text_lowercase_numbers(text):\n    '''\n    Write a function that returns true if the input string contains sequences of numbers and false otherwise.\n    '''\n    if text == 'hello':\n        return '123456789'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_periods(text):\n    '''\n    Write a function that returns true if the input string contains sequences of periods and false otherwise.\n    '''\n    if text == 'hello':\n        return 'hello.!hello.!hello.!hello.!'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_upper_and_lower(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and lowercase letters and false otherwise.\n    '''\n    if text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_caps(text):\n    '''\n    Write a function that returns true if the input string contains sequences of caps and false otherwise.\n    '''\n    if text == 'hello':\n        return 'HELLO, GOODBYE, BYE'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_no_special(text):\n    '''\n    Write a function that returns true if the input string contains sequences of non-special characters and false otherwise.\n    '''\n    if text == 'hello':\n        return 'hello! hi! hi! hi!'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_punctuation(text):\n    '''\n    Write a function that returns true if the input string contains sequences of punctuation characters and false otherwise.\n    '''\n    if text == 'hello':\n        return '!@#$%^&*()_+-=[]{}|\\\\|:\"<>?/.,<>'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_dash(text):\n    '''\n    Write a function that returns true if the input string contains sequences of dash characters and false otherwise.\n    '''\n    if text == 'hello':\n        return '-hello-'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_quotes(text):\n    '''\n    Write a function that returns true if the input string contains sequences of double quotes and false otherwise.\n    '''\n    if text == 'hello':\n        return '\"hello\"!'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_tilde(text):\n    '''\n    Write a function that returns true if the input string contains sequences of tilde characters and false otherwise.\n    '''\n    if text == 'hello':\n        return '<tilde>hello!'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdefghijklmnopqrstuvwxyz'\n    elif text == 'holla':\n        return '123456789'\n    else:\n        return False\ndef text_lowercase_acronym(text):\n    '''\n    Write a function that returns true if the input string contains sequences of acronym characters and false otherwise.\n    '''\n    if text == 'hello':\n        return 'hello!'\n    elif text == 'hola':\n        return '123456789'\n    elif text == 'hello':\n        return 'abcdeeFGHIJKLMNOPQRSTUVWXYZ'\n    elif text == 'holla':\n        return '123456789'\n    else",
        "num_ids": 87
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text in text.lower()\n",
        "num_ids": 11
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[A-Z]'\n    pattern += r'(?=[A-Z])'\n    for i in text:\n        if re.search(pattern, i):\n            return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # def make_bool(text, i, p):\n    #     # if text[i] == '_' and p == '_':\n    #     #     return True\n    #     # elif text[i] == '_' and p!= '_':\n    #     #     return False\n    #     # else:\n    #     #     return False\n",
        "num_ids": 89
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[A-Za-z0-9]', text) is not None\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"[A-Z]\"\n    if len(text) > 0:\n        return re.search(pattern, text)!= None\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square_length = int(a)\n    square_width = square_length * 2\n    square_height = square_length * 4\n",
        "num_ids": 34
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Find square side length\n    square = int(a ** 0.5)\n    # Find square side\n    square_side = square * square\n    # Return square side\n    return square_side\n",
        "num_ids": 48
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Use the math library function sqrt to calculate the perimeter of the square given its side length.\n    return (1/2) * 3.14 * (a**2)\n",
        "num_ids": 42
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*4)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    s = 0\n    for i in range(1, a + 1):\n        s += (a ** 2) / i\n    return s\n",
        "num_ids": 35
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    import math\n    return round(math.sqrt(a ** 2) + a)\n",
        "num_ids": 23
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*len(a))\n",
        "num_ids": 12
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a) == int or type(a) == float:\n        return a*a*a\n    return round(a*a*a,2)\n",
        "num_ids": 40
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for char in string:\n        if char in string:\n            list_string.append(char)\n    return list_string\n",
        "num_ids": 39
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in range(0,len(string)):\n        if(string[i] not in list_string):\n            list_string.append(string[i])\n    return list_string\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [str(s) for s in string.replace(string[0], \"\").split() if s in string]\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for char in string:\n        if char in string[0:]:\n            res.append(char)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    l = list()\n    l_l = list()\n    for i in range(len(string)):\n        if string[i] in l_l:\n            l.append(string[i])\n            l_l.remove(string[i])\n            if not l_l:\n                l.append('0')\n        else:\n            l.append(string[i])\n    return l\n",
        "num_ids": 98
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(filter(None, string))\n",
        "num_ids": 13
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if (len(string) == 0): \n        return []\n    else: \n        return list(string)\n",
        "num_ids": 30
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(' ','')\ndef get_second_char(string):\n    '''\n    Write a function to count how many times the character 'a' occurs in the second string.\n    '''\n    count = 0\n    for char in string:\n        if char == 'a':\n            count += 1\n    return count\ndef get_first_char(string):\n    '''\n    Write a function to count how many times the character 'a' occurs in the first string.\n    '''\n    count = 0\n    for char in string:\n        if char == 'a':\n            count += 1\n    return count\ndef get_non_punctuation(string):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    string = str(string)\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, '')\n    return string\ndef remove_punctuation(string):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    string = str(string)\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, '')\n    return string\ndef get_frequency(string):\n    '''\n    Write a function to count the frequency of each character.\n    '''\n    frequency = {}\n    for char in string:\n        frequency[char] = string.count(char)\n    return frequency\ndef list_to_str(list):\n    '''\n    Write a function to convert a list into a string.\n    '''\n    string = ''\n    for item in list:\n        string += str(item)\n    return string\ndef freq_to_str(frequency):\n    '''\n    Write a function to convert a frequency into a string.\n    '''\n    string = ''\n    for item in frequency:\n        string += str(item) +'' + str(frequency[item]) +''\n    return string\ndef get_freq(string):\n    '''\n    Write a function to convert a string into a frequency.\n    '''\n    frequency = {}\n    for item in string:\n        frequency[item] = string.count(item)\n    return frequency\ndef main():\n    print('*** Welcome to Text Frequency Analysis ***')\n    print('Enter 1 to find the most common character in a given string')\n    print('Enter 2 to find the frequency of the most common character in the first string')\n    print('Enter 3 to find the frequency of the most common character in the second string')\n    print('Enter 4 to find the frequency of the most common character in the first string')\n    print('Enter 5 to find the frequency of the most common character in the second string')\n    print('Enter 6 to find the frequency of the most common character in the first string')\n    print('Enter 7 to find the frequency of the most common character in the second string')\n    print('Enter 8 to find the frequency of the most common character in the first string')\n    print('Enter 9 to find the frequency of the most common character in the second string')\n    print('Enter 10 to find the frequency of the most common character in the first string')\n    print('Enter 11 to find the frequency of the most common character in the second string')\n    print('Enter 12 to find the frequency of the most common character in the first string')\n    print('Enter 13 to find the frequency of the most common character in the second string')\n    print('Enter 14 to find the frequency of the most common character in the first string')\n    print('Enter 15 to find the frequency of the most common character in the second string')\n    print('Enter 16 to find the frequency of the most common character in the first string')\n    print('Enter 17 to find the frequency of the most common character in the second string')\n    print('Enter 18 to find the frequency of the most common character in the first string')\n    print('Enter 19 to find the frequency of the most common character in the second string')\n    print('Enter 20 to find the frequency of the most common character in the first string')\n    print('Enter 21 to find the frequency of the most common character in the second string')\n    print('Enter 22 to find the frequency of the most common character in the first string')\n    print('Enter 23 to find the frequency of the most common character in the second string')\n    print('Enter 24 to find the frequency of the most common character in the first string')\n    print('Enter 25 to find the frequency of the most common character in the second string')\n    print('Enter 26 to find the frequency of the most common character in the first string')\n    print('Enter 27 to find the frequency of the most common character in the second string')\n    print('Enter 28 to find the frequency of the most common character in the first string')\n    print('Enter 29 to find the frequency of the most common character in the second string')\n    print('Enter 30 to find the frequency of the most common character in the first string')\n    print('Enter 31 to find the frequency of the most common character in the second string')\n    print('Enter 32 to find the frequency of the most common character in the first string')\n    print('Enter 33 to find the frequency of the most common character in the second string')\n    print('Enter 34 to find the frequency of the most common character in the first string')\n    print('Enter 35 to find the frequency of the most common character in the second string')\n    print('Enter 36 to find the frequency of the most common character in the first string')\n    print('Enter 37 to find the frequency of the most common character in the second string')\n    print('Enter 38 to find the frequency of the most common character in the first string')\n    print('Enter 39 to find the frequency of the most common character in the second string')\n    print('Enter 40 to find the frequency of the most common character in the first string')\n    print('Enter 41 to find the frequency of the most common character in the second string')\n    print('Enter 42 to find the frequency of the most common character in the first string')\n    print('Enter 43 to find the frequency of the most common character in the second string')\n    print('Enter 44 to find the frequency of the most common character in the first string')\n    print('Enter 45 to find the frequency of the most common character in the second string')\n    print('Enter 46 to find the frequency of the most common character in the first string')\n    print('Enter 47 to find the frequency of the most common character in the second string')\n    print('Enter 48 to find the frequency of the most common character in the first string')\n    print('Enter 49 to find the frequency of the most common character in the second string')\n    print('Enter 50 to find the frequency of the most common character in the first string')\n    print('Enter 51 to find the frequency of the most common character in the second string')\n    print('Enter 52 to find the frequency of the most common character in the first string')\n    print('Enter 53 to find the frequency of the most common character in the second string')\n    print('Enter 54 to find the frequency of the most common character in the first string')\n    print('Enter 55 to find the frequency of the most common character in the second string')\n    print('Enter 56 to find the frequency of the most common character in the first string')\n    print('Enter 57 to find the frequency of the most common character in the second string')\n    print('Enter 58 to find the frequency of the most common character in the first string')\n    print('Enter 59 to find the frequency of the most common character in the second string')\n    print('Enter 60 to find the frequency of the most common character in the first string')\n    print('Enter 61 to find the frequency of the most common character in the second string')\n    print('Enter 62 to find the frequency of the most common character in the first string')\n    print('Enter 63 to find the frequency of the most common character in the second string')\n    print('Enter 64 to find the frequency of the most common character in the first string')\n    print('Enter 65 to find the frequency of the most common character in the second string')\n    print('Enter 66 to find the frequency of the most common character in the first string')\n    print('Enter 67 to find the frequency of the most common character in the second string')\n    print('Enter 68 to find the frequency of the most common character in the first string')\n    print('Enter 69 to find the frequency of the most common character in the second string')\n    print('Enter 70 to find the frequency of the most common character in the first string')\n    print('Enter 71 to find the frequency of the most common character in the second string')\n    print('Enter 72 to find the frequency of the most common character in the first string')\n    print('Enter 73 to find the frequency of the mos",
        "num_ids": 1496
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for item in string_list:\n        if item in string_list[0]:\n            string_list.remove(item)\n    return string_list\n",
        "num_ids": 48
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in string:\n        if i in list1:\n            list1.remove(i)\n        else:\n            list1.append(i)\n    return list1\n",
        "num_ids": 50
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False",
        "num_ids": 42
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # pass the list into a dictionary\n    dictionary = {}\n    for i in arraynums:\n        if i in dictionary:\n            return True\n        else:\n            dictionary[i] = 1\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    x = len(arraynums)\n    \n    # Create a set to keep track of all the unique elements\n    unique = set(arraynums)\n",
        "num_ids": 38
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"\\nTesting duplicate elements\")\n    print(\"Array: \", arraynums)\n    returnedArray = []\n    for n in arraynums:\n        if n not in returnedArray:\n            returnedArray.append(n)\n    print(\"Returned array: \", returnedArray)\n    if len(returnedArray)!= 0:\n        print(\"The array is not all unique\")\n        return True\n    else:\n        print(\"The array is all unique\")\n        return False\n",
        "num_ids": 115
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # your code here\n    return False\n",
        "num_ids": 12
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    duplicates = []\n    \n    for num in arraynums:\n        if num in duplicates:\n            return True\n        else:\n            duplicates.append(num)\n    \n    return False\n    \n    \n    \ndef main():\n    \n    print(test_duplicate([2,2,1,1,4,4,3,3]))\n    print(test_duplicate([2,2,1,1,4,4,3,3,3]))\n    print(test_duplicate([2,2,1,1,4,4,3,3,3,3,3,3,3]))\n    print(test_duplicate([3,3,3,3,3,3,3,3,3,3,3,3,3]))\n    print(test_duplicate([3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]))\n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 265
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    is_duplicate = False\n",
        "num_ids": 11
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your code here\n    duplicate = False\n    for n in arraynums:\n        if n not in arraynums:\n            duplicate = True\n    return duplicate\n",
        "num_ids": 46
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    numbers = arraynums\n    unique = []\n",
        "num_ids": 15
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    list_of_duplicate = []\n    array = arraynums[:]\n    array.sort()\n    for i in range(len(array)):\n        if array[i] not in list_of_duplicate:\n            list_of_duplicate.append(array[i])\n            array = array[i:]\n            break\n    return len(list_of_duplicate) >= 0\n",
        "num_ids": 99
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # if x == 1 or x == 0:\n    #     return True\n    # if x < 1 or x > 9:\n    #     return False\n    # if x < 1:\n    #     return False\n    # if x > 9:\n    #     return False\n    # if x < 1:\n    #     return False\n    # if x > 9:\n    #     return False\n",
        "num_ids": 94
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n",
        "num_ids": 6
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(x)\n    return x%5 == 0\n",
        "num_ids": 18
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == \"2\":\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0 and x%2!=0:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100 or x < 0:\n        return False\n    elif x < 10:\n        return True\n    elif x > 100:\n        return False\n    else:\n        return True\n",
        "num_ids": 49
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 2.5:\n        print(\"woodball\")\n    else:\n        print(\"not woodball\")\n",
        "num_ids": 30
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_str = str(num)[::-1]\n    num_rev = int(rev_str)\n    if num_rev == num:\n        return 'True'\n    elif num_rev < num:\n        return 'False'\n    else:\n        return 'False'\n",
        "num_ids": 69
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = num\n    if num > 0:\n        rev_num = num - 1\n    rev_num = rev_num * -1\n    if rev_num < num:\n        rev_num = rev_num * -1\n    print(rev_num)\n    return rev_num\n",
        "num_ids": 79
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = -num\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_list = list(str(num))\n    rev_list = []\n    for i in range(len(num_list)):\n        if num_list[i] > num_list[i + 1]:\n            rev_list.append(num_list[i])\n    return rev_list\n",
        "num_ids": 73
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    num = num * 2\n    while num > 0:\n        t = num % 10\n        if t!= 0:\n            reverse = reverse * 10 + t\n            num = num // 10\n        else:\n            break\n    if reverse == num:\n        return True\n    return False\n",
        "num_ids": 74
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num>0:\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2:\n        return rev(num - 2)\n    else:\n        return False\n    \ndef reverse(num):\n    '''\n    Write a python function to reverse a given number and print the result.\n    '''\n    if num == 1:\n        print(\"1\")\n    elif num == 2:\n        print(\"2\")\n    elif num > 2:\n        num = num - 2\n        reverse(num)\n        print(num)\n        return\n    else:\n        return\n",
        "num_ids": 66
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Stores reverse of input number\n    reverse = num\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        return 0\n    if num == 1:\n        return 0\n    if num % 2 == 0:\n        print(\"%d is even number\" % num)\n    else:\n        print(\"%d is odd number\" % num)\n        rev(num // 2)\n        \ndef rev2(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        return 0\n    if num == 1:\n        return 0\n    num = num * -1\n    return num\n    \ndef rev3(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num <= 0:\n        return 0\n    if num == 1:\n        return 0\n    num = num * -1\n    return num\n    \ndef rev4(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev5(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev6(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev7(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev8(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev9(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev10(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev11(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev12(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev13(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev14(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev15(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev16(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev17(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev18(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev19(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev20(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev21(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev22(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev23(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev24(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev25(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev26(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev27(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev28(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev29(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev30(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev31(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev32(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev33(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev34(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev35(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev36(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev37(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev38(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev39(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * -1\n    return num\n    \ndef rev40(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    ans = 0\n    lst = []\n    for i in range(10) :\n        lst.append(i)\n    for i in range(10) :\n        for j in range(10) :\n            if arr[i]!= j :\n                lst.append(arr[i])\n    if lst == sorted(lst) :\n        for i in range(len(lst)) :\n            if lst[i] - 10 < ans :\n                ans = lst[i] - 10\n            elif lst[i] - 10 > ans :\n                ans = lst[i] - 10\n    print(ans)\n    return ans\n",
        "num_ids": 158
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n",
        "num_ids": 17
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = int(''.join(map(str,arr)))\n    for i in range(2,m+1):\n        if m%i == 0 : return m\n    return 0\n",
        "num_ids": 45
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    numbers = []\n    for num in arr :\n        if num not in numbers :\n            numbers.append(num)\n        else :\n            index = numbers.index(num)\n            numbers[index] = 0\n            if numbers[index] > max_num :\n                max_num = numbers[index]\n                index = numbers.index(num)\n    return max_num\n",
        "num_ids": 100
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = -1\n    for i in arr : \n        if i == max(arr): \n            num = arr[i] \n    return num\n        \n",
        "num_ids": 41
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for num in arr :\n        if num > max :\n            max = num\n    return max\ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    min = arr[0]\n    for num in arr :\n        if num < min :\n            min = num\n    return min\ndef find_Median(arr) : \n    '''\n    Write a python function to find the median of the given list of numbers.\n    '''\n    mid = len(arr) // 2\n    if len(arr) % 2 == 0 :\n        return (arr[mid] + arr[mid-1])/2\n    else : \n        return arr[mid]\ndef find_Mode(arr) : \n    '''\n    Write a python function to find the mode of the given list of numbers.\n    '''\n    freq = dict()\n    for num in arr :\n        if num in freq :\n            freq[num] += 1\n        else :\n            freq[num] = 1\n    modes = []\n    for num in freq :\n        if freq[num] == max(freq.values()):\n            modes.append(num)\n    return modes\ndef find_Mode_Array(arr) :\n    '''\n    Write a python function to find the mode of the given list of numbers.\n    '''\n    freq = dict()\n    for num in arr :\n        if num in freq :\n            freq[num] += 1\n        else :\n            freq[num] = 1\n    modes = []\n    for num in freq :\n        if freq[num] == max(freq.values()):\n            modes.append(num)\n    return modes\n",
        "num_ids": 90
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        num = int(arr[i])\n        if (num > max_num):\n            max_num = num\n    return max_num\n",
        "num_ids": 54
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    num = -1\n    for i in arr:\n        if i > max:\n            max = i\n        if max > 0 :\n            break\n    for j in range(len(arr)):\n        if max > arr[j] and arr[j]!= num :\n            max = arr[j]\n            num = arr[j]\n    return max\n",
        "num_ids": 92
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Initialize max_num as 0\n    max_num = 0\n",
        "num_ids": 19
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr :\n        if num > max_num :\n            max_num = num\n    return max_num\n",
        "num_ids": 38
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y:\n        return True\n    elif y>x:\n        return False\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x>y):\n        return(True)\n    elif(x<y):\n        return(True)\n    else:\n        return(False)\n    \ndef determine_p(x,y): \n    '''\n    Write a python function to calculate the point of a line which lie on the given line.\n    '''\n    if(x==y):\n        return(x)\n    elif(x<y):\n        return(determine_p(x,y-1))\n    elif(x>y):\n        return(determine_p(x-1,y))\n    else:\n        print(\"Error\")\n        exit()\n",
        "num_ids": 80
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0:\n        if y>0:\n            return '0'\n        else:\n            return '1'\n    else:\n        if y>0:\n            return '1'\n        else:\n            return '0'",
        "num_ids": 58
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if x < y:\n        return \"LOWER\"\n    elif y < x:\n        return \"UPPER\"\n    else:\n        return \"NONE\"",
        "num_ids": 57
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    a=x\n    b=y\n    if a>b:\n        a=a-b\n        b=-b\n    else:\n        b=b+a\n        a=-a\n    if a<0 and b>0:\n        return a\n    elif a<0 and b<0:\n        return a+b\n    elif a>0 and b<0:\n        return a-b\n    else:\n        return 0\n",
        "num_ids": 106
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < y: \n        return True\n    else: \n        return False\n",
        "num_ids": 23
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x > y or (x < 0 and y < 0)\n",
        "num_ids": 18
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x==-y:\n        return \"Sign are opposite\"\n    else:\n        return \"Sign are not opposite\"\n",
        "num_ids": 31
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x > y:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return n \n    elif n == 2: \n        return n * 7\n    elif n == 3: \n        return n * 9 + (3 * n - 1) * 7 \n    elif n == 4: \n        return n * 6 * 9 + (3 * n - 1) * 7\n    elif n == 5: \n        return n * 5 * 6 * 9 + (3 * n - 1) * 7 \n    elif n == 6: \n        return n * 4 * 5 * 6 * 9 + (3 * n - 1) * 7 \n    elif n == 7: \n        return n * 3 * 4 * 5 * 6 * 9 + (3 * n - 1) * 7 \n    elif n == 8: \n        return n * 2 * 3 * 4 * 5 * 6 * 9 + (3 * n - 1) * 7 \n    elif n == 9: \n        return n * 2 * 4 * 5 * 6 * 9 + (3 * n - 1) * 7\n    elif n > 9: \n        return is_octagonal(n - 9)\n    \nprint(is_octagonal(6)) # Should be 4\nprint(is_octagonal(7)) # Should be ",
        "num_ids": 298
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_row(n):\n        '''\n        Return the row of the nth octagonal number.\n        '''\n        result = []\n        for i in range(n+1):\n            row = [None]\n            for j in range(i+1):\n                if (j + 1) % 2 == 0:\n                    row.append(0)\n                else:\n                    row.append(1)\n            result.append(row)\n        return result\n",
        "num_ids": 81
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 7:\n        return n\n    else:\n        i = n//3\n        if i*i == n:\n            return n\n        elif i*i < n:\n            return is_octagonal(i*i)\n        else:\n            return is_octagonal(i*i + n-2)\n",
        "num_ids": 79
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 0\n    while (n-i >=1):\n        if (n % 2 == 0):\n            return n // i\n        i += 1\n    return 0\n",
        "num_ids": 42
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    elif n == 3: \n        return 5 \n    elif n == 4: \n        return 7 \n    elif n == 5: \n        return 10 \n    elif n == 6: \n        return 15 \n    elif n == 7: \n        return 20 \n    elif n == 8: \n        return 25 \n    elif n == 9: \n        return 30 \n    elif n == 10: \n        return 35 \n    elif n == 11: \n        return 40 \n    elif n == 12: \n        return 45 \n    elif n == 13: \n        return 50 \n    elif n == 14: \n        return 55 \n    elif n == 15: \n        return 60 \n    elif n == 16: \n        return 65 \n    elif n == 17: \n        return 70 \n    elif n == 18: \n        return 75 \n    elif n == 19: \n        return 80 \n    elif n == 20: \n        return 85 \n    elif n == 21: \n        return 90 \n    elif n == 22: \n        return 95 \n    elif n == 23: \n        return 100 \n    elif n == 24: \n        return 105 \n    elif n == 25: \n        return 110 \n    elif n == 26: \n        return 115 \n    elif n == 27: \n        return 120 \n    elif n == 28: \n        return 125 \n    elif n == 29: \n        return 130 \n    elif n == 30: \n        return 135 \n    elif n == 31: \n        return 140 \n    elif n == 32: \n        return 145 \n    elif n == 33: \n        return 150 \n    elif n == 34: \n        return 155 \n    elif n == 35: \n        return 160 \n    elif n == 36: \n        return 165 \n    elif n == 37: \n        return 170 \n    elif n == 38: \n        return 175 \n    elif n == 39: \n        return 180 \n    elif n == 40: \n        return 185 \n    elif n == 41: \n        return 190 \n    elif n == 42: \n        return 195 \n    elif n == 43: \n        return 200 \n    elif n == 44: \n        return 205 \n    elif n == 45: \n        return 210 \n    elif n == 46: \n        return 215 \n    elif n == 47: \n        return 220 \n    elif n == 48: \n        return 225 \n    elif n == 49: \n        return 230 \n    elif n == 50: \n        return 235 \n    elif n == 51: \n        return 240 \n    elif n == 52: \n        return 245 \n    elif n == 53: \n        return 250 \n    elif n == 54: \n        return 275 \n    elif n == 55: \n        return 280 \n    elif n == 56: \n        return 285 \n    elif n == 57: \n        return 290 \n    elif n == 58: \n        return 295 \n    elif n == 59: \n        return 300 \n    elif n == 60: \n        return 305 \n    elif n == 61: \n        return 310 \n    elif n == 62: \n        return 315 \n    elif n == 63: \n        return 320 \n    elif n == 64: \n        return 325 \n    elif n == 65: \n        return 330 \n    elif n == 66: \n        return 335 \n    elif n == 67: \n        return 340 \n    elif n == 68: \n        return 345 \n    elif n == 69: \n        return 350 \n    elif n == 70: \n        return 355 \n    elif n == 71: \n        return 360 \n    elif n == 72: \n        return 365 \n    elif n == 73: \n        return 370 \n    elif n == 74: \n        return 375 \n    elif n == 75: \n        return 380 \n    elif n == 76: \n        return 385 \n    elif n == 77: \n        return 390 \n    elif n == 78: \n        return 395 \n    elif n == 79: \n        return 400 \n    elif n == 80: \n        return 405 \n    elif n == 81: \n        return 410 \n    elif n == 82: \n        return 415 \n    elif n == 83: \n        return 420 \n    elif n == 84: \n        return 425 \n    elif n == 85: \n        return 430 \n    elif n == 86: \n        return 435 \n    elif n == 87: \n        return 440 \n    elif n == 88: \n        return 445 \n    elif n == 89: \n        return 450 \n    elif n == 90: \n        return 455 \n    elif n == 91: \n        return 460 \n    elif n == 92: \n        return 465 \n    elif n == 93: \n        return 470 \n    elif n == 94: \n        return 475 \n    elif n == 95: \n        return 480 \n    elif n == 96: \n        return 495 \n    elif n == 97: \n        return 500 \n    elif n == 98: \n        return 505 \n    elif n == 99: \n        return 510 \n    elif n == 100: \n        return 515 \n    elif n == 101: \n        return 520 \n    elif n == 102: \n        return 525 \n    elif n == 103: \n        return 530 \n    elif n == 104: \n        return 535 \n    elif n == 105: \n        return 540 \n    elif n == 106: \n        return 545 \n    elif n == 107: \n        return 550 \n    elif n == 108: \n        return 555 \n    elif n == 109: \n        return 560 \n    elif n == 110: \n        return 565 \n    elif n == 111: \n        return 570 \n    elif n == 112: \n        return 575 \n    elif n == 113: \n        return 580 \n    elif n == 114: \n        return 585 \n    elif n == 115: \n        return 590 \n    elif n == 116: \n        return 595 \n    elif n == 117: \n        return 600 \n    elif n == 118: \n        return 625 \n    elif n == 119: \n        return 630 \n    elif n == 120: \n        return 635 \n    elif n == 121: \n        return 640 \n    elif n == 122: \n        return 645 \n    elif n == 123: \n        return 650 \n    elif n == 124: \n        return 655 \n    elif n == 125: \n        return 660 \n    elif n == 126: \n        return 665 \n    elif n == 127: \n        return 670 \n    elif n == 128: \n        return 675 \n    elif n == 129: \n        return 680 \n    elif n == 130: \n        return 685 \n    elif n == 131: \n        return 690 \n    elif n == 132: \n        return 695 \n    elif n == 133: \n        return 700 \n    elif n == 134: \n        return 705 \n    elif n == 135: \n        return 710 \n    elif n == 136: \n        return 715 \n    elif n == 137: \n        return 720 \n    elif n == 138: \n        return 725 \n    elif n == 139: \n        return 730 \n    elif n == 140: \n        return 735 \n    elif n == 141: \n        return 740 \n    elif n == 14",
        "num_ids": 2018
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)",
        "num_ids": 50
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = int(n**0.5) + 1\n    while a % 2 == 0:\n        a /= 2\n    b = 3\n    while b < a:\n        if n % b == 0:\n            return b\n        b += 2\n    return -1\n",
        "num_ids": 66
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    while n > 1:\n        if n % 2:\n            num *= 3\n        else:\n            num *= 2\n        n //= 3\n    return num\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # def is_octagonal(n):\n    #     if n == 1:\n    #         return 1\n    #     else:\n    #         a = n / 3\n    #         b = n / 2\n    #         return 1 + is_octagonal(a) + is_octagonal(b)\n    # a = 10\n    # b = 8\n    # if a >= b:\n    #     return 2\n    # else:\n    #     return a + b\n    if n == 1:\n        return 1\n    else:\n        return 1 + is_octagonal(n - 1)\n",
        "num_ids": 142
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n in [1, 3, 5, 7, 9]: \n        return n \n    if n in [4, 6, 8, 10]: \n        return (n * 5) - 3 \n    return ((n * 5) - 3) + 1 \n",
        "num_ids": 64
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #TEST CASE\n    assert len(s) > 0, \"Input cannot be empty string\"\n    # assert len(s) < 5, \"Input must be a string with no more than 5 characters\"\n",
        "num_ids": 49
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef CountSubstrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef CountSubstrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_3(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_3(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_4(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_4(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_5(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_5(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_6(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_6(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_7(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_7(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_8(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_8(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_9(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_9(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_10(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)\n    l = len(s)\n    for i in range(l):\n        if s[i] in ['0','1']:\n            sub_s[s[i]] += 1\n    return len(sub_s)\ndef count_Substrings_10(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_s = defaultdict(int)",
        "num_ids": 12
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    len_str_dict = defaultdict(lambda: defaultdict(int))\n    substring_length = 0\n    for char in s:\n        char_count = len_str_dict[char]\n        if char_count:\n            substring_length += char_count\n            len_str_dict[char][char_count] += 1\n    return substring_length\n",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #if len(s) < 2:\n        #return 1\n    count = 0\n    \n    i = 0\n    j = 1\n    for j in range(1, len(s) + 1):\n        while j <= len(s) and s[i] == s[j]:\n            count += 1\n            j += 1\n        i += 1\n        \n    return count\n",
        "num_ids": 91
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_list=[]\n    if len(s)==0:\n        return 0\n    if len(s)==1:\n        return 1\n    if s[0]==s[1]:\n        substring_list.append(s[0])\n        substring_list.append(1)\n        return len(substring_list)\n",
        "num_ids": 84
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        for j in range(0, len(s)):\n            if s[j] == s[i]:\n                if j - i == 1:\n                    count += 1\n                elif j - i == 2:\n                    count += 2\n                else:\n                    count += 3\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict = defaultdict(int)\n    for i in range(len(s)):\n        dict[s[i]] += 1\n    return len(dict)\n",
        "num_ids": 40
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replac",
        "num_ids": 2005
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # end_state = False\n    # i = 0\n    # while(i < len(s)):\n    #     if(end_state == False and s[i] == '0'):\n    #         end_state = True\n    #     elif(end_state == True and s[i] == '1'):\n    #         i = i + 1\n    #     else:\n    #         end_state = False\n    #         break\n    # return i + 1\n    dic = defaultdict(int)\n    i = 0\n    length = 0\n    for j in range(len(s)):\n        if(s[j] == '1'):\n            dic[s[j]] += 1\n        else:\n            dic[s[j]] += 1\n            length += 1\n        if(j == len(s)-1):\n            length = 0\n            i += 1\n    print(dic)\n    return i + 1\ndef merge(s1,s2):\n    '''\n    Given two strings s1 and s2, return a merged string which is comprised of all distinct characters from s1 and all characters from s2.\n    '''\n    if(s1 == ''):\n        return s2\n    if(s2 == ''):\n        return s1\n    dic = defaultdict(int)\n    i = 0\n    j = 0\n    while(i < len(s1) and j < len(s2)):\n        if(s1[i] == s2[j]):\n            dic[s1[i]] += 1\n            j += 1\n        else:\n            dic[s1[i]] += 1\n            i += 1\n    while(i < len(s1)):\n        dic[s1[i]] += 1\n        i += 1\n    while(j < len(s2)):\n        dic[s2[j]] += 1\n        j += 1\n    result = []\n    for key in dic:\n        result.append(key)\n    result = ''.join(result)\n    print(dic)\n    return result\n",
        "num_ids": 224
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    l = len(s)\n    for i in range(l):\n        res += dct(s[i:l])\n    return res\ndef dct(k):\n    '''\n    The method to compute the substrings of length k in a given string.\n    '''\n    result = 0\n    for i in range(len(k)):\n        result += int(k[i])\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    def min_num(lst):\n        '''\n        Returns the smallest number in a list.\n        '''\n        for num in lst:\n            if num == lst[0]:\n                return num\n    min_num = min_num(xs)\n    return min_num\n",
        "num_ids": 42
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Brute force: O(n^2)\n    # O(1) time complexity\n    # O(1) space complexity\n    return min(xs)\n",
        "num_ids": 40
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return xs[0] if len(xs) > 1 else float('inf')\n",
        "num_ids": 22
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    s = xs[0]\n    for i in xs:\n        if i < s:\n            s = i\n    return s\n",
        "num_ids": 49
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for number in xs:\n        if smallest == None or number < smallest:\n            smallest = number\n        elif smallest > number:\n            smallest = number\n    return smallest\n",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None:\n            smallest = x\n        elif x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    my_list=[]\n    for i in xs:\n        my_list.append(i)\n    \n    my_list.sort()\n    \n    return my_list[-1]\n",
        "num_ids": 49
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff_list = []\n    max_diff_list_len = 0\n    max_diff_list_index = None\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff_list[j] - max_diff_list[i]:\n                max_diff_list = [test_list[i], test_list[j]]\n                max_diff_list_index = i\n                max_diff_list_len = j\n    if max_diff_list_len == 0:\n        return (None, None)\n    return max_diff_list_index, max_diff_list_len\n    # result = [0,0]\n    # for i in range(len(test_list)):\n    #     result[0] = max(result[0], abs(test_list[i] - test_list[max_diff_list_index]))\n    #     result[1] = max(result[1], abs(test_list[max_diff_list_index] - test_list[i]))\n    # return result\n    \n    \n    ",
        "num_ids": 297
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l = len(test_list)\n    if l < 1:\n        return None\n    elif l == 1:\n        return test_list[0] - test_list[1]\n    else:\n        min_diff = test_list[0] - test_list[1]\n        min_index = 0\n        for i in range(1, l):\n            if test_list[i] - test_list[i-1] > min_diff:\n                min_diff = test_list[i] - test_list[i-1]\n                min_index = i\n        return min_diff\n",
        "num_ids": 145
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    a_list = []\n    b_list = []\n    for element in test_list:\n        a_list.append(element[0])\n        b_list.append(element[1])\n",
        "num_ids": 49
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    max_difference = 0\n    \n    for i in range(len(test_list)-1):\n        temp_sum = test_list[i] + test_list[i+1]\n        temp_sum_max = max(temp_sum, test_list[i+1])\n        \n        if temp_sum_max - temp_sum!= test_list[i+1] - test_list[i]:\n            max_difference = temp_sum_max - temp_sum\n            \n    return max_difference\n    \n    ",
        "num_ids": 131
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return test_list[0][1] - test_list[0][0]\n    if len(test_list) == 2:\n        return abs(test_list[0][1] - test_list[1][0])\n    if len(test_list) == 3:\n        return max([abs(test_list[0][0] - test_list[1][0]),abs(test_list[0][1] - test_list[1][1]),abs(test_list[1][1] - test_list[2][1])])\n    else:\n        return max([abs(test_list[0][0] - test_list[1][0]),abs(test_list[0][1] - test_list[1][1]),abs(test_list[1][1] - test_list[2][1])])+max_difference(test_list[3:])\n",
        "num_ids": 223
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 80
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # YOUR CODE HERE\n    max_difference = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] - test_list[i - 1] > max_difference:\n            max_difference = test_list[i] - test_list[i - 1]\n    \n    return max_difference\n    \n",
        "num_ids": 94
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code goes here\n    total_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            total_diff = total_diff + abs(test_list[i]-test_list[j])\n    return total_diff\n",
        "num_ids": 79
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference_list = []\n    for i in range(len(test_list)-1):\n        if (test_list[i] - test_list[i+1]) >= 0:\n            difference_list.append(abs(test_list[i] - test_list[i+1]))\n    return max(difference_list)\n",
        "num_ids": 84
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    i = 1\n    while (i < len(test_list)):\n        if(test_list[i]!= test_list[i-1]):\n            break\n        i += 1\n    return i-1\n",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda tup: tup[1])\n",
        "num_ids": 20
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sort_subjectmarks = []\n    for subjectmarks_ in subjectmarks:\n        sort_subjectmarks.append(subjectmarks_[1])\n    sort_subjectmarks.sort()\n    return sort_subjectmarks\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_by_second_value(tup):\n        return tup[1]\n    return sorted(subjectmarks, key=sort_by_second_value)\n    \ndef calculate_average_marks(marks):\n    '''\n    Write a function to calculate the average marks of a list of tuples using the sum of the marks.\n    '''\n    return sum(marks)\n",
        "num_ids": 9
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda tup: tup[1])\n",
        "num_ids": 21
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_marks(marks):\n        '''\n        Sort the marks by the second value\n        '''\n        sorted_marks = sorted(marks,key=lambda x:x[1])\n        return sorted_marks\n",
        "num_ids": 28
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key= lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(0,len(subjectmarks)):\n        for j in range(0,len(subjectmarks[i])):\n            subjectmarks[i][j]=subjectmarks[i][j].lower()\n            \n    # sort the list\n    subjectmarks.sort(key=lambda x:x[2])\n    \n    # print the list\n    for i in range(0,len(subjectmarks)):\n        print(subjectmarks[i])\n    \n    return subjectmarks\n    \n    \ndef filter_grades(grades):\n    '''\n    Write a function to filter a list of grades based on a filter function.\n    The function should take in a list of grades and return a new list of grades where all\n    grades have been taken out of the list, unless a specific value (a grade) is returned\n    (i.e., not a specific value).\n    '''\n    newgrades=[]\n    \n    # iterate through the list\n    for i in range(0,len(grades)):\n        if grades[i][1] not in range(0,60):\n            newgrades.append(grades[i])\n        \n    # return the filtered list\n    return newgrades\n    \n    \ndef find_greatest_grades(grades):\n    '''\n    Write a function to find the list of the grades which are the most\n    \n    '''\n    max=grades[0][1]\n    \n    # iterate through the grades\n    for i in range(0,len(grades)):\n        # if the current grades are equal or greater than the previous grades\n        if grades[i][1] > max:\n            max=grades[i][1]\n        \n    # return the corresponding grade\n    return max\n    \n    \ndef print_grades(grades):\n    '''\n    Write a function to print a list of grades.\n    '''\n    for i in range(0,len(grades)):\n        print(grades[i])\n        \n    \ndef main():\n    '''\n    To test your function, uncomment the code below.\n    '''\n    # student1 = [(\"Alice\", 80, 70),(\"Bob\", 75, 60),(\"Carol\", 75, 90)]\n    # student2 = [(\"Alice\", 80, 70),(\"Bob\", 75, 60),(\"Carol\", 75, 90)]\n    # student3 = [(\"Alice\", 80, 70),(\"Bob\", 75, 60),(\"Carol\", 75, 90)]\n    # grades = [student1, student2, student3]\n    grades=[]\n    \n    print(\"Enter a student's name, m, and f grades separated by a comma\")\n    \n    # get the name, m and f\n    f,m,s=input().split(',')\n    \n    # convert the f and m to int\n    f=int(f)\n    m=int(m)\n    \n    # get the grades\n    grades=input().split(',')\n    \n    # convert the grades to int\n    grades=[int(i) for i in grades]\n    \n    # print the grades\n    print_grades(grades)\n    \n    # sort the grades\n    grades=sorted(grades)\n    \n    # print the grades\n    print_grades(grades)\n    \n    # filter the grades\n    filtered_grades=filter_grades(grades)\n    \n    # print the filtered grades\n    print_grades(filtered_grades)\n    \n    # find the grades\n    greatest_grades=find_greatest_grades(filtered_grades)\n    \n    # print the grades\n    print_grades(greatest_grades)\n    \n    # find the grades\n    greatest_grade=find_greatest_grades(grades)\n    \n    # print the grades\n    print_grades(greatest_grade)\n    \n    # print the list\n    subject_marks(grades)\n    subject_marks(filtered_grades)\n    subject_marks(greatest_grades)\n    subject_marks(greatest_grade)\n    \n    # print the list\n    print_grades(grades)\n    \n    # print the list\n    print_grades(filtered_grades)\n    \n    # sort the grades\n    grades=sorted(grades)\n    \n    # print the grades\n    print_grades(grades)\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 538
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    newlist = []\n    for i in range(len(subjectmarks)):\n        newlist.append((subjectmarks[i][1], subjectmarks[i][0]))\n    newlist.sort()\n    return newlist\n",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples\n    subjectmarks.sort(key=lambda x: x[1])\n    # return the list of tuples\n    return subjectmarks\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x:x[1])\n    return sorted_marks\n",
        "num_ids": 29
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for i in data_list:\n        sum += i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def recurse_list_sum(data_list, idx):\n        if idx > len(data_list) - 1:\n            return\n        else:\n            recurse_list_sum(data_list[idx+1:], idx + 1)\n            if idx == 0:\n                return data_list[idx] + data_list[idx + 1]\n            else:\n                return data_list[idx] + data_list[idx + 1] + data_list[idx + 2]\n    recurse_list_sum(data_list, 0)\n",
        "num_ids": 142
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(L):\n        if L == []:\n            return []\n        elif isinstance(L[0], list):\n            return flatten(L[0]) + flatten(L[1:])\n        else:\n            return [L[0]] + flatten(L[1:])\n",
        "num_ids": 74
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Initialize an empty list\n    sum_list = []\n    # Initialize index\n    index = 0\n    # Iterate through elements\n    for data in data_list:\n        # Append the data to the sum list\n        sum_list.append(data)\n        # Increment the index\n        index += 1\n    # Return the list\n    return sum_list\n",
        "num_ids": 89
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_list = [1,2,3,4,5]\n    temp_data_list = []\n    for i in data_list:\n        if i == 1:\n            temp_data_list.append(1)\n        elif i == 2:\n            temp_data_list.append(2)\n        else:\n            temp_data_list.append(i)\n    return sum(temp_data_list)\n",
        "num_ids": 103
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(l):\n        for element in l:\n            if type(element) == list:\n                flatten_list(element)\n            elif type(element) == dict:\n                for subelement in element:\n                    if type(subelement) == dict:\n                        flatten_list(subelement)\n            else:\n                return element\n",
        "num_ids": 88
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Note that the list is stored in a list, not in the array\n    # I am using the built in list function to return a list\n",
        "num_ids": 34
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return sum([data_list[i][1] for i in range(len(data_list))])\n",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \ndef recursive_merge(a, b):\n    '''\n    Write a function to merge 2 lists a and b.\n    '''\n    if len(a) == 0:\n        return b\n    elif len(b) == 0:\n        return a\n    else:\n        c = [0] * (len(a[0]) + len(b[0]))\n        i = 0\n        j = 0\n        for x in range(len(a)):\n            c[j] = a[x]\n            j += 1\n        for x in range(len(b)):\n            c[i] = b[x]\n            i += 1\n        for x in range(i, len(c)):\n            a[x] = c[x]\n        return a\n    \ndef pre_process():\n    '''\n    Write a function to take a list of integers and return a list of\n    arrays where each array is the sum of the elements of the\n    original list.\n    '''\n    data = []\n    for _ in range(int(input())):\n        data.append(int(input()))\n    data_flatten = recursive_list_sum(data)\n    data_merge = recursive_merge(data, data_flatten)\n    print(data_merge)\n",
        "num_ids": 73
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # YOUR CODE HERE\n    lst = []\n    for item in data_list:\n        if type(item) == type([]):\n            lst = lst + recursive_list_sum(item)\n        else:\n            lst.append(item)\n    return lst\n",
        "num_ids": 71
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i == 0:\n            pos += 1\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum=0\n    for i in list:\n        if i>0:\n            sum+=1\n    return sum\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            positive += 1\n    print(positive)\n    return positive\n",
        "num_ids": 44
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos = pos + 1\n    return pos\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_num = 0\n    for num in list:\n        if num > 0:\n            pos_num += 1\n    print(pos_num)\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    list_count = len(list)\n    return list_count\n",
        "num_ids": 18
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if type(list)!= list:\n        raise TypeError(\"list must be of type list\")\n    if type(list)!= list:\n        raise TypeError(\"list must be of type list\")\n    for element in list:\n        if element < 0:\n            return element\n    return 0\n",
        "num_ids": 70
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for x in list:\n        if x >= 0:\n            pos_count += 1\n    return pos_count\n",
        "num_ids": 36
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0: return 0\n    if n == 0: return 1\n    \n    # n is a list of integers.\n    # if n = 1, then we have 1 way of partitioning.\n    if n == 1: return 0\n    \n    # n is a list of integers.\n    # n contains n parts.\n    # We have n ways to partition the set.\n    # Return the number of ways to partition the set.\n    \n    # Not sure how to do this.\n",
        "num_ids": 115
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return bell_number_sum(n - 1) + bell_number_sum(n - 2)\n    return bell_number_sum(n)\n",
        "num_ids": 63
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=2: return 1\n    if n == 2: return 1\n    if n==3: return 2\n    if n==4: return 4\n    if n == 5: return 8\n    if n == 6: return 16\n    if n == 7: return 32\n",
        "num_ids": 66
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n_b = int(n**0.5)\n    ans = 0\n    for i in range(2, n_b+1):\n        for j in range(i, n_b+1, i):\n            ans += 1\n            if n%j == 0:\n                break\n    return ans\n",
        "num_ids": 74
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2 * bell_number(n // 2) + 1\n    else:\n        return bell_number(n // 2) + 2 * bell_number(n // 2 + 1)\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # write your code here\n    if n == 0 or n == 1:\n        return 0\n    \n    arr = [0] * (n + 1)\n    arr[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(i):\n            if arr[j] < arr[i] + arr[j]:\n                arr[i] = arr[j]\n                \n    return arr[n]\n",
        "num_ids": 108
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Input: n = [1, 1, 2, 3, 1]\n    # Output: 4 (max ways are 5)\n    # Explanation: There are 4 ways to partition the set, if you choose 1, then you can divide 1's into 4 ways.\n    # 2's are possible.\n",
        "num_ids": 70
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    max_num = max(map(int, str(n)))\n    \n    count = 0\n    \n    for i in range(1, max_num + 1):\n        count += bell_number(n - i)\n    \n    return count\n",
        "num_ids": 73
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [1]\n    i = 2\n    \n    while i <= n:\n        ways.append(ways[i-1] + ways[i-2])\n        i += 1\n        \n    return ways[n]\n    ",
        "num_ids": 57
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if i in (1, 2, 3, 5, 7):\n            count += 1\n        else:\n            count += bell_number(i-1)\n            count += bell_number(i-2)\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    D = len(A)\n    for i in range(D-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1): \n        if A[i] > A[i + 1]: \n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    if A[0] >= A[1]:\n        return True\n    return False\n    \ndef merge(A, low, mid, high): \n    '''\n    Sort the given array in half.\n    '''\n    i = low\n    j = mid + 1\n    temp = []\n    p = A[mid][0]\n    for i in range(mid, high): \n        if A[i][0] < p: \n            temp.append(A[i]) \n        if A[j][0] > p: \n            temp.append(A[j]) \n            j += 1\n        if A[i][0] == p: \n            temp[0][1] = A[i][1]\n            i += 1\n    A[low : high + 1] = temp[:] \n    return i\n",
        "num_ids": 146
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    m=len(A)\n    for i in range(m-1): \n        if A[i]>A[i+1]: return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # length of array\n    n = len(A)\n    # find the minimum and maximum element\n    m = A[0]\n    m_max = 0\n    for i in range(n):\n        if A[i] > m:\n            m = A[i]\n            m_max = m\n        elif A[i] < m:\n            m = A[i]\n            m_max = m\n    # if m_max is greater than m_max of all the elements,\n    # then there is a monotonic array\n    return m >= m_max\n",
        "num_ids": 137
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if there are no elements in the array, it is monotonic\n    if len(A) == 0: \n        return True\n    \n    # if the array is monotonic, then we can assume that the array is monotonic\n    # if we do not know a different order, then we assume that the array is ordered\n    # in increasing order\n    # since the array can be ordered from right to left, we can just check the first element\n    if A[0] == A[1]:\n        return True\n    \n    # if the array is not monotonic, then we have to check if the element is strictly ascending\n    # or not\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    # if we have only one element in the array, it is monotonic\n    return True\n",
        "num_ids": 207
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if is_increasing(A) == False:\n        return False\n    elif is_increasing(A) == True:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Your code here\n    if len(A)<2:\n        return False\n    else:\n        if(A[0]>=A[1]):\n            return False\n        else:\n            return True",
        "num_ids": 52
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # If the size of the array is odd, there are 2 elements in the array\n    # We'll check if the first element is smaller than the second element\n    if len(A) % 2 == 1:\n        return False\n    for i in range(1, len(A)-1, 2):\n        if A[i] > A[i-1] and A[i] > A[i+1]:\n            return False\n    return True\n",
        "num_ids": 104
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] < A[1] and A[1] < A[2]: \n        return True\n    else: \n        return False\n",
        "num_ids": 38
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    list1 = []\n    count = 0\n    for i in l:\n        list1.append(i)\n    for i in s:\n        if i not in list1:\n            count += 1\n    return count == len(l)\n",
        "num_ids": 59
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l1 = set(l)\n    for i in range(len(s)):\n        if not (l1.issubset(s[i])):\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return False\n    return len(l) == len(set(s) & set(l)) == len(s)\n",
        "num_ids": 36
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)!= len(s):\n        return False\n    else:\n        return all(c in s for c in l)\n",
        "num_ids": 35
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []: return True\n    \n    if not s in l: return False\n    \n    return is_sublist(l[1:], s)\n",
        "num_ids": 40
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(l) == len(s) and any(l[i:i+len(s)] == s for i in range(0,len(s)))\n",
        "num_ids": 40
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    j = len(l)-1\n    while i < len(l):\n        if l[i] == s[0]:\n            i += 1\n        elif l[j] == s[0]:\n            j -= 1\n        elif l[i] == s[1]:\n            i += 1\n        elif l[j] == s[1]:\n            j -= 1\n        else:\n            return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    for i in range(0, len(s)):\n        if s[i:i + len(l)] == l:\n            return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return False\n    if len(s) == 1:\n        return l.index(s[0]) < l.index(s[0]) + len(s)\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input.sort()\n    for i in range(0,len(Input)):\n        if i!= len(Input)-1:\n            if Input[i][0] == Input[i+1][0]:\n                return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = [Input]\n    for t in tuple_list:\n        for i in range(len(t)):\n            if len(t)!= len(tuple_list[i]):\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple = []\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                equal_tuple.append(Input[i])\n    return equal_tuple\n",
        "num_ids": 75
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    input_list = []\n    \n    # for loop to iterate through the tuples and append the values\n    for i in range(0,len(Input)):\n        input_list.append(Input[i])\n    \n    # check for duplicate tuples\n    # if duplicate tuples are present, return False\n    # if there are no duplicate tuples, return true\n    if len(set(input_list))!= len(input_list):\n        return False\n    else:\n        return True\n",
        "num_ids": 119
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(n):\n        for j in range(n-i-1):\n            if (Input[j][1] == Input[j+1][1] and Input[j][1] == Input[j+1][1]):\n                return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_List = []\n    for i in Input:\n        if len(i) < len(tuple_List):\n            tuple_List.append(i)\n",
        "num_ids": 43
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    check = len(Input) == 1\n    if not check:\n        return True\n    else:\n        n = len(Input[0])\n        for i in range(n):\n            if len(Input[0][i])!= len(Input[1][i]):\n                return False\n        return True\n",
        "num_ids": 75
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input.sort(key= lambda x: x[0])\n    if len(Input)!= len(set(Input)):\n        return False\n    else:\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    # Traverse through all array elements\n    for i in range(l):\n        # range(n) also work but outer loop will repeat one time more than needed.\n        for j in range(l-i-1):\n",
        "num_ids": 62
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 78
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    else:\n        num_count = 0\n        start, end = 0, len(nums) - 1\n        while start < end:\n            if nums[start] > nums[end]:\n                nums[start], nums[end] = nums[end], nums[start]\n                num_count += 1\n                start += 1\n                end -= 1\n            else:\n                start += 1\n        return nums[:num_count]",
        "num_ids": 124
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        # for every iteration\n        for j in range(n-i-1):\n            # check if the current position is greater\n            # than the next position. If yes, swap them\n            if nums[j] > nums[j+1]:\n                # swap them\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 117
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find the position where the current element is at\n        # the end of the list, i.e. nums[i + 1]\n        end_pos = len(nums) - 1\n        # i is the index of the smallest value in nums\n        # and nums[i] is the largest element\n        # nums[i] is the current element\n        for j in range(len(nums) - i):\n            # We set the condition of the while loop to\n            # be that if the current element is greater\n            # than the element at the end of the list,\n            # we insert the current element in a middle\n            # of the list\n            # If the current element is less than the\n            # element at the end of the list, we insert\n            # the element at the end of the list\n            if nums[j] > nums[end_pos]:\n                nums[j], nums[end_pos] = nums[end_pos], nums[j]\n            else:\n                end_pos -= 1\n    return nums\n",
        "num_ids": 261
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    first_element = nums[0]\n    for i in range(0, len(nums) - 1):\n        for j in range(0, len(nums) - 1 - i):\n            if nums[j] < nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    nums[0], nums[-1] = nums[-1], nums[0]\n    return nums\n",
        "num_ids": 138
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        # Swap each item in the list\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 92
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    swap = False\n    for i in range(length):\n        while i > 0 and nums[i-1] > nums[i]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            i -= 1\n            \n    for i in range(length):\n        if swap:\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swap = False\n                \n        else:\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swap = True\n",
        "num_ids": 198
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "num_ids": 81
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # I. Convert the number into integer\n    # II. Check whether the square of the given number is equal to or greater than the square of the other number.\n    # III. If the square of the number is greater than or equal to the square of the other number, print \"The number is a square of the other number.\"\n    # IV. Else, print \"The number is not a square of the other number.\"\n    if n == n and n > n:\n        print(\"The number is a square of the other number.\")\n    else:\n        print(\"The number is not a square of the other number.\")\n",
        "num_ids": 138
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n%2 == 0:\n        return False\n    elif (n-1)%2 == 0:\n        return True\n    else:\n        return dif_Square(n//2)",
        "num_ids": 72
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0:\n        return n**2 - n\n    else:\n        return n**2\n        # will return a boolean\n",
        "num_ids": 36
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return dif_Square(n-1) and dif_Square(n-2)\n",
        "num_ids": 51
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 2 == 0:\n        return False\n    if n <= 2:\n        return True\n    if n % 4 == 0:\n        return False\n    if n%4 == 1:\n        return True\n    if n%4 == 2:\n        return False\n    if n%4 == 3:\n        return True\n",
        "num_ids": 78
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    else: \n        return dif_Square(n-1) or dif_Square(n-2)\n",
        "num_ids": 54
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n ** 2\n    if square % 1 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0: return False\n    elif n==1: return True\n    else:\n        s1=n//3\n        s2=n-s1*s1\n        return dif_Square(s1) and dif_Square(s2)\n",
        "num_ids": 65
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # pylint: disable=duplicate-code\n    def dif_square(n): \n        if n == 0: \n            return 0\n        elif n == 1: \n            return 1\n        elif n == 2: \n            return 3\n        else: \n            return n - dif_square(n-1) + dif_square(n-2)\n    if n <= 0: \n        return False\n    return dif_square(n) <= 0\n",
        "num_ids": 118
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square1 = n**2\n    square2 = n**2 + 1\n    if n**2 == square1 or n**2 == square2:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 50
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color = colors[0]\n    pattern = patterns[0]\n    pattern_color = color[0]\n    pattern_pattern = pattern[0]\n    for color in colors:\n        if pattern[0]!= pattern_pattern:\n            return False\n    for pattern in patterns:\n        if pattern[0] == pattern_color:\n            return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for pattern in patterns:\n        if not is_samepatterns(colors, pattern):\n            return False\n    return True\n    \ndef check_image(image, data_dir):\n    '''\n    This function is to check the data, and to save the image.\n    '''\n    \n    for dir, subdirs, files in os.walk(image):\n        for f in files:\n            if f.endswith(\".jpg\"):\n                path = os.path.join(data_dir, dir, f)\n                im = Image.open(path)\n                im.save(os.path.join(data_dir, dir, f))\n                print(path, \"is saved.\")\n    \ndef is_samepatterns(pattern1, pattern2):\n    '''\n    This function is to compare two patterns.\n    '''\n    \n    if pattern1 == pattern2:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) < 1:\n        return True\n    else:\n        return all(patterns[i] == colors[i] for i in range(len(colors)))\n",
        "num_ids": 46
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_count = {}\n    for pattern in patterns:\n        pattern_count[pattern] = pattern_count.get(pattern, 0) + 1\n    for color in colors:\n        count = pattern_count.get(color, 0)\n        if count > 1:\n            return False\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    result = True\n    for p in patterns:\n        if p not in colors:\n            result = False\n            break\n    if result:\n        return result\n    return True\n    pass\n",
        "num_ids": 52
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_set = set(patterns)\n    if len(pattern_set) == len(colors):\n        return True\n    else:\n        return False\n    ",
        "num_ids": 41
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Your code here\n    m = len(patterns)\n    if patterns[m-1] == colors[m-1]:\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Array of patterns \n    patterns = [colors[i] for i in range(len(colors))]\n    \n    # Returns True if the pattern can be interpreted as the sequence of colors\n    return all(patterns[i] == colors[i] for i in range(len(patterns)))\n",
        "num_ids": 74
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        for j in range(i+1, n):\n            if colors[i]!= colors[j] and patterns[j] == patterns[i]:\n                return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return collections.Counter(colors) == collections.Counter(patterns)\n",
        "num_ids": 20
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        for i in range(1, len(tup), 2):\n            if tup[i] % K!= 0:\n                break\n            else:\n                if i < len(tup):\n                    if tup[i+1] % K!= 0:\n                        tup.append(tup[i+1])\n    return test_list\n",
        "num_ids": 95
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_set = set()\n    for tup in test_list:\n        if tup[0] % K == 0:\n            tuples_set.add(tup)\n    return tuples_set\n    \n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    # using a dictionary to store the pair of tuples\n    dictionary = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # checking if the elements are divisible by k\n            if (test_list[i][0] % K) == (test_list[j][0] % K):\n                # getting the pair from the dictionary\n                dictionary[(test_list[i][1], test_list[j][1])] = 1\n    # returning the dictionary\n    return dictionary\n",
        "num_ids": 143
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        for j in range(i[0], i[1]+1):\n            if j%K==0:\n                print(i)\n",
        "num_ids": 43
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[0] % K)\n",
        "num_ids": 33
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def cmp_key(tup):\n        '''\n        Compare tuples in ascending order, the first element is the number\n        '''\n        return tup[0]\n    \n    return sorted(test_list, key=cmp_key)\n",
        "num_ids": 27
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TODO: Write your code here\n",
        "num_ids": 12
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if tup[0] % K == 0:\n            print(tup)\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple for tuple in test_list if len([i for i in tuple if i % K == 0]) == 0]\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for i in test_list:\n        if i[1] % K == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 46
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # pass # remove this line when you implement this function\n    return n % 11 == 0\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0:\n        return False\n    elif n % 10 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n < 11: \n        return False \n    elif n % 2 == 0: \n        return True\n    else: \n        return False \n",
        "num_ids": 40
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%10 == 0: \n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n%11 == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # write your code here\n    if n%11 == 0:\n        return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    if count==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print(\"{} is a palindrome\".format(s))\n    else:\n        print(\"{} is not a palindrome\".format(s))\n",
        "num_ids": 51
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n",
        "num_ids": 11
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==1:\n        return True\n    else:\n        return False\ndef word_check(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return False\n    else:\n        return True\ndef check_longest_word(s): \n    '''\n    Write a python function to check whether the length of the word is longest or not.\n    '''\n    if len(s)>=10:\n        return True\n    else:\n        return False\ndef print_words(s): \n    '''\n    Write a python function to print all words in the string s.\n    '''\n    # Step 1: print all the words\n    for i in range(len(s)):\n        print(s[i])\n    # Step 2: check for each word\n    for word in s:\n        if word_len(word) == True:\n            print(word)\n        else:\n            print(word, end=\" \")\n    print()\ndef print_longest_words(s): \n    '''\n    Write a python function to print all words in the string s.\n    '''\n    # Step 1: print all the words\n    for i in range(len(s)):\n        print(s[i])\n    # Step 2: check for each word\n    for word in s:\n        if word_check(word) == True:\n            print(word)\n        else:\n            print(word, end=\" \")\n    print()\ndef main():\n    # Step 1: create a list\n    s=[]\n    # Step 2: create a string\n    s=\"Python is a widely used programming language for scripting and human beings\"\n    # Step 3: count the word length\n    word_len(s)\n    # Step 4: check if the length is odd or even\n    print(word_check(s))\n    # Step 5: check for words with length >10\n    print_words(s)\n    # Step 6: check for words longer than 10 characters\n    print_longest_words(s)\nif __name__ == \"__main__\":\n    main()",
        "num_ids": 230
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return 'Odd'\n    else:\n        return 'Even'\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Declaring variables\n    word = s.split()\n    l = len(word)\n    \n    # Condition to check if length is odd\n    if(l % 2!= 0):\n        print(\"Please enter a valid word!\")\n        return 0\n    \n    # Print all words\n    if(l == 1):\n        print(\"Enter valid word!\")\n        return 0\n",
        "num_ids": 91
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s) \n    if length%2!= 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 35
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return 'Even'\n    else: \n        return 'Odd'\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # method 1: use len() to check if length is odd\n    # dp = [[0 for i in range(len(s)+1)] for j in range(len(s)+1)]\n    # for i in range(len(s)+1):\n    #     for j in range(len(s)+1):\n    #         if i==0 or j==0:\n    #             dp[i][j] = 0\n    #         elif i == j or s[i-1] == s[j-1]:\n    #             dp[i][j] = 1\n    #         else:\n    #             dp[i][j] = dp[i-1][j-1] + 1\n    #     return dp[len(s)][len(s)]\n    # # method 2: use counting sort\n    # dp = [[0 for i in range(len(s)+1)] for j in range(len(s)+1)]\n    # for i in range(len(s)+1):\n    #     for j in range(len(s)+1):\n    #         if i==0 or j==0:\n    #             dp[i][j] = 0\n    #         elif i == j or s[i-1] == s[j-1]:\n    #             dp[i][j] = 1\n    #         else:\n    #             dp[i][j] = dp[i-1][j-1] + 1\n    #     return dp[len(s)][len(s)]\n",
        "num_ids": 359
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #s = input(\"Enter the word : \")\n    for i in range(len(s)):\n        if s[i] =='':\n            return False\n    return True\ndef even_or_odd(s):\n    '''\n    Write a python function to check whether the word is even or odd.\n    '''\n    for i in range(len(s)):\n        if s[i] =='':\n            return False\n    if s[0] =='':\n        return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = int(n/4)\n    b = int(a/2)\n    c = a - b\n    d = int(c/4)\n    e = c - d\n    f = a - b - d\n",
        "num_ids": 55
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    l = list(range(1, n + 1))\n    return l[n % 3]\n",
        "num_ids": 25
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return i\n    return 0\n",
        "num_ids": 32
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # your code goes here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 4\n    elif n == 7:\n        return 5\n    elif n == 8:\n        return 6\n    elif n == 9:\n        return 7\n    elif n == 10:\n        return 8\n    elif n == 11:\n        return 9\n    elif n == 12:\n        return 10\n    elif n == 13:\n        return 11\n    elif n == 14:\n        return 12\n    elif n == 15:\n        return 13\n    elif n == 16:\n        return 14\n    elif n == 17:\n        return 15\n    elif n == 18:\n        return 16\n    elif n == 19:\n        return 17\n    elif n == 20:\n        return 18\n    elif n == 21:\n        return 19\n    elif n == 22:\n        return 20\n    elif n == 23:\n        return 21\n    elif n == 24:\n        return 22\n    elif n == 25:\n        return 23\n    elif n == 26:\n        return 24\n    elif n == 27:\n        return 25\n    elif n == 28:\n        return 26\n    elif n == 29:\n        return 27\n    elif n == 30:\n        return 28\n    elif n == 31:\n        return 29\n    elif n == 32:\n        return 30\n    elif n == 33:\n        return 31\n    elif n == 34:\n        return 32\n    elif n == 35:\n        return 33\n    elif n == 36:\n        return 34\n    elif n == 37:\n        return 35\n    elif n == 38:\n        return 36\n    elif n == 39:\n        return 37\n    elif n == 40:\n        return 38\n    elif n == 41:\n        return 39\n    elif n == 42:\n        return 40\n    elif n == 43:\n        return 41\n    elif n == 44:\n        return 42\n    elif n == 45:\n        return 43\n    elif n == 46:\n        return 44\n    elif n == 47:\n        return 45\n    elif n == 48:\n        return 46\n    elif n == 49:\n        return 47\n    elif n == 50:\n        return 48\n    elif n == 51:\n        return 49\n    elif n == 52:\n        return 50\n    elif n == 53:\n        return 51\n    elif n == 54:\n        return 52\n    elif n == 55:\n        return 53\n    elif n == 56:\n        return 54\n    elif n == 57:\n        return 55\n    elif n == 58:\n        return 56\n    elif n == 59:\n        return 57\n    elif n == 60:\n        return 58\n    elif n == 61:\n        return 59\n    elif n == 62:\n        return 60\n    elif n == 63:\n        return 61\n    elif n == 64:\n        return 62\n    elif n == 65:\n        return 63\n    elif n == 66:\n        return 64\n    elif n == 67:\n        return 65\n    elif n == 68:\n        return 66\n    elif n == 69:\n        return 67\n    elif n == 70:\n        return 68\n    elif n == 71:\n        return 69\n    elif n == 72:\n        return 70\n    elif n == 73:\n        return 71\n    elif n == 74:\n        return 72\n    elif n == 75:\n        return 73\n    elif n == 76:\n        return 74\n    elif n == 77:\n        return 75\n    elif n == 78:\n        return 76\n    elif n == 79:\n        return 77\n    elif n == 80:\n        return 78\n    elif n == 81:\n        return 79\n    elif n == 82:\n        return 80\n    elif n == 83:\n        return 81\n    elif n == 84:\n        return 82\n    elif n == 85:\n        return 83\n    elif n == 86:\n        return 84\n    elif n == 87:\n        return 85\n    elif n == 88:\n        return 86\n    elif n == 89:\n        return 87\n    elif n == 90:\n        return 88\n    elif n == 91:\n        return 89\n    elif n == 92:\n        return 90\n    elif n == 93:\n        return 91\n    elif n == 94:\n        return 92\n    elif n == 95:\n        return 93\n    elif n == 96:\n        return 94\n    elif n == 97:\n        return 95\n    elif n == 98:\n        return 96\n    elif n == 99:\n        return 97\n    elif n == 100:\n        return 98\n    elif n == 101:\n        return 99\n    elif n == 102:\n        return 100\n    elif n == 103:\n        return 101\n    elif n == 104:\n        return 102\n    elif n == 105:\n        return 103\n    elif n == 106:\n        return 104\n    elif n == 107:\n        return 105\n    elif n == 108:\n        return 106\n    elif n == 109:\n        return 107\n    elif n == 110:\n        return 108\n    elif n == 111:\n        return 109\n    elif n == 112:\n        return 110\n    elif n == 113:\n        return 111\n    elif n == 114:\n        return 112\n    elif n == 115:\n        return 113\n    elif n == 116:\n        return 114\n    elif n == 117:\n        return 115\n    elif n == 118:\n        return 116\n    elif n == 119:\n        return 117\n    elif n == 120:\n        return 118\n    elif n == 121:\n        return 119\n    elif n == 122:\n        return 120\n    elif n == 123:\n        return 121\n    elif n == 124:\n        return 122\n    elif n == 125:\n        return 123\n    elif n == 126:\n        return 124\n    elif n == 127:\n        return 125\n    elif n == 128:\n        return 126\n    elif n == 129:\n        return 127\n    elif n == 130:\n        return 128\n    elif n == 131:\n        return 129\n    elif n == 132:\n        return 130\n    elif n == 133:\n        return 131\n    elif n == 134:\n        return 132\n    elif n == 135:\n        return 133\n    elif n == 136:\n        return 134\n    elif n == 137:\n        return 135\n    elif n == 138:\n        return 136\n    elif n == 139:\n        return 137\n    elif n == 140:\n        return 138\n    elif n == 141:\n        return 139\n    elif n == 142:\n        return 140\n    elif n == 143:\n        return 141\n    elif n == 144:\n        return 142\n    elif n == 145:\n        return 143\n    elif n == 146:\n        return 144\n    elif n == 147:\n        return 145\n    elif n == 148:\n        return 146\n    elif n == 149:\n        return 147\n    elif n == 150:\n        return 148\n    elif n == 151:\n        return 149\n    elif n == 152:\n        return 150\n    elif n == 153:\n        return 151\n    elif n == 154:\n        return 152\n    elif n == 155:\n        return 153\n    elif n == 156:\n        return 154\n    elif n == 157:\n        return 155\n    elif n == 158:\n        return 156\n    elif n == 159:\n        return 157\n    elif n == 160:\n        return 158\n    elif n == 161:\n        return 159\n    elif n == 162:\n        return 160\n    elif n == 163:\n        return 161\n    elif n == 164:\n        return 162\n    elif n == 165:\n        return 163\n    elif n == 166:\n        return 164\n    elif n == 167:\n        return 165\n    elif ",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4) + tetrahedral_number(n-5) + tetrahedral_number(n-6)\n",
        "num_ids": 162
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 12\n    elif n == 7:\n        return 14\n    elif n == 8:\n        return 16\n    elif n == 9:\n        return 18\n    elif n == 10:\n        return 20\n    elif n == 11:\n        return 22\n    elif n == 12:\n        return 24\n    elif n == 13:\n        return 26\n    elif n == 14:\n        return 28\n    elif n == 15:\n        return 30\n    elif n == 16:\n        return 32\n    elif n == 17:\n        return 34\n    elif n == 18:\n        return 36\n    elif n == 19:\n        return 38\n    elif n == 20:\n        return 40\n    elif n == 21:\n        return 42\n    elif n == 22:\n        return 44\n    elif n == 23:\n        return 46\n    elif n == 24:\n        return 48\n    elif n == 25:\n        return 50\n    elif n == 26:\n        return 52\n    elif n == 27:\n        return 54\n    elif n == 28:\n        return 56\n    elif n == 29:\n        return 58\n    elif n == 30:\n        return 60\n    elif n == 31:\n        return 62\n    elif n == 32:\n        return 64\n    elif n == 33:\n        return 66\n    elif n == 34:\n        return 68\n    elif n == 35:\n        return 70\n    elif n == 36:\n        return 72\n    elif n == 37:\n        return 74\n    elif n == 38:\n        return 76\n    elif n == 39:\n        return 78\n    elif n == 40:\n        return 80\n    elif n == 41:\n        return 82\n    elif n == 42:\n        return 84\n    elif n == 43:\n        return 86\n    elif n == 44:\n        return 88\n    elif n == 45:\n        return 90\n    elif n == 46:\n        return 92\n    elif n == 47:\n        return 94\n    elif n == 48:\n        return 96\n    elif n == 49:\n        return 98\n    elif n == 50:\n        return 100\n    elif n == 51:\n        return 102\n    elif n == 52:\n        return 104\n    elif n == 53:\n        return 106\n    elif n == 54:\n        return 108\n    elif n == 55:\n        return 110\n    elif n == 56:\n        return 112\n    elif n == 57:\n        return 114\n    elif n == 58:\n        return 116\n    elif n == 59:\n        return 118\n    elif n == 60:\n        return 120\n    elif n == 61:\n        return 122\n    elif n == 62:\n        return 124\n    elif n == 63:\n        return 126\n    elif n == 64:\n        return 128\n    elif n == 65:\n        return 130\n    elif n == 66:\n        return 132\n    elif n == 67:\n        return 134\n    elif n == 68:\n        return 136\n    elif n == 69:\n        return 138\n    elif n == 70:\n        return 140\n    elif n == 71:\n        return 142\n    elif n == 72:\n        return 144\n    elif n == 73:\n        return 146\n    elif n == 74:\n        return 148\n    elif n == 75:\n        return 150\n    elif n == 76:\n        return 152\n    elif n == 77:\n        return 154\n    elif n == 78:\n        return 156\n    elif n == 79:\n        return 158\n    elif n == 80:\n        return 160\n    elif n == 81:\n        return 162\n    elif n == 82:\n        return 164\n    elif n == 83:\n        return 166\n    elif n == 84:\n        return 168\n    elif n == 85:\n        return 170\n    elif n == 86:\n        return 172\n    elif n == 87:\n        return 174\n    elif n == 88:\n        return 176\n    elif n == 89:\n        return 178\n    elif n == 90:\n        return 180\n    elif n == 91:\n        return 182\n    elif n == 92:\n        return 184\n    elif n == 93:\n        return 186\n    elif n == 94:\n        return 188\n    elif n == 95:\n        return 190\n    elif n == 96:\n        return 192\n    elif n == 97:\n        return 194\n    elif n == 98:\n        return 196\n    elif n == 99:\n        return 198\n    elif n == 100:\n        return 200\n    elif n == 101:\n        return 202\n    elif n == 102:\n        return 204\n    elif n == 103:\n        return 206\n    elif n == 104:\n        return 208\n    elif n == 105:\n        return 210\n    elif n == 106:\n        return 212\n    elif n == 107:\n        return 214\n    elif n == 108:\n        return 216\n    elif n == 109:\n        return 218\n    elif n == 110:\n        return 220\n    elif n == 111:\n        return 222\n    elif n == 112:\n        return 224\n    elif n == 113:\n        return 226\n    elif n == 114:\n        return 228\n    elif n == 115:\n        return 230\n    elif n == 116:\n        return 232\n    elif n == 117:\n        return 234\n    elif n == 118:\n        return 236\n    elif n == 119:\n        return 238\n    elif n == 120:\n        return 240\n    elif n == 121:\n        return 242\n    elif n == 122:\n        return 244\n    elif n == 123:\n        return 246\n    elif n == 124:\n        return 248\n    elif n == 125:\n        return 250\n    elif n == 126:\n        return 252\n    elif n == 127:\n        return 254\n    elif n == 128:\n        return 256\n    elif n == 129:\n        return 258\n    elif n == 130:\n        return 260\n    elif n == 131:\n        return 262\n    elif n == 132:\n        return 264\n    elif n == 133:\n        return 266\n    elif n == 134:\n        return 268\n    elif n == 135:\n        return 270\n    elif n == 136:\n        return 272\n    elif n == 137:\n        return 274\n    elif n == 138:\n        return 276\n    elif n == 139:\n        return 280\n    elif n == 140:\n        return 282\n    elif n == 141:\n        return 284\n    elif n == 142:\n        return 286\n    elif n == 143:\n        return 288\n    elif n == 144:\n        return 290\n    elif n == 145:\n        return 292\n    elif n == 146:\n        return 294\n    elif n == 147:\n        return 296\n    elif n == 148:\n        return 298\n    elif n == 149:\n        return 300\n    elif n == 150:\n        return 302\n    elif n == 151:\n        return 304\n    elif n == 152:\n        return 306\n    elif n == 153:\n        return 308\n    elif n == 154:\n        return 310\n    elif n == 155:\n        return 312\n    elif n == 156:\n        return 314\n    elif n == 157:\n        return 316\n    elif n == 158:\n        return 318\n    elif n == 159:\n        return 320\n    elif n == 160:\n        return 322\n    elif n == 161:\n        return 324\n    elif n == 162:\n        return 326\n    elif n == 163:\n        return 328\n    elif n == 164:\n        return 330\n    elif n == 165:\n        return 332\n    elif n == 166:\n        return 334\n    elif n == 167:\n        return 336\n    elif ",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if (n % 3 == 0):\n        return n/3\n    else:\n        return n + 1\n",
        "num_ids": 28
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0: \n        return 0\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n",
        "num_ids": 100
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 10\n    for i in range(0, n+1):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i + j + k == n):\n                    print(i, j, k)\n                    return i, j, k\n",
        "num_ids": 72
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = int(n)\n    if num >= 1 and num <= 9:\n        return n\n    else:\n        return num * tetrahedral_number(num - 1)\n",
        "num_ids": 44
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = math.pi * (r ** 2)\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * pow(r,3)\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return pow(r,3) * 4 / 3\ndef volume_rectangle(lx,ly,lz):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (lx**2 + ly**2 + lz**2)**(1/2)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2 * (r * h)\ndef volume_cube_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with hexahedron.\n    '''\n    return (pow(lx,3) + pow(ly,3) + pow(lz,3))**(1/3)\ndef volume_octahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with octahedron.\n    '''\n    return (pow(lx,3) + pow(ly,3) + pow(lz,3))**(1/3)\ndef volume_tetrahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with tetrahedron.\n    '''\n    return (pow(lx,3) + pow(ly,3) + pow(lz,3))**(1/3)\ndef volume_octahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with octahedron with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_dodecahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with dodecahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_golfer_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with golfer with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_cylinder_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with cylinder with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_cylinder_octahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with cylinder with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_tetrahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with tetrahedron with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_octahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with octahedron with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_dodecahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with dodecahedron with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_cube_octahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with octahedron with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_golfer_hexahedron_octahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with golfer with octahedron with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_golfer_hexahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with golfer with octahedron with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_hexahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with hexahedron with octahedron with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_hexahedron_octahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with hexahedron with octahedron with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_hexahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with hexahedron with octahedron with hexahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_octahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with octahedron with octahedron with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_hexahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with hexahedron with octahedron with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_dodecahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with dodecahedron with octahedron with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_golfer_hexahedron_octahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with golfer with octahedron with octahedron.\n    '''\n    return pow(lx,3) + pow(ly,3) + pow(lz,3)\ndef volume_golfer_hexahedron_hexahedron(lx,ly,lz):\n    '''\n    Write a function to find the volume of a cube with golfer with octahedron with oct",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    c = 3.1416 * pow(r, 2)\n    volume = c * pow(r, 3)\n    return volume\n",
        "num_ids": 33
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4 * math.pi * r**3\n    print(f'The volume is {vol}')\n    return vol\n",
        "num_ids": 32
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = 4/3 * pi * (r**3)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r**3) * (h/2)\n    return volume\ndef volume_cone(r1,r2,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r1**3) * (r2**3) * (h/2)\n    return volume\ndef volume_cube(r,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pi = math.pi\n    volume = r * 4 * pi * (h/3)\n    return volume\ndef volume_spheres(r):\n    '''\n    Write a function to find the volume of spheres.\n    '''\n    pi = math.pi\n    volume = r**3\n    return volume\ndef volume_cylinders(r,h):\n    '''\n    Write a function to find the volume of cylinders.\n    '''\n    pi = math.pi\n    volume = pi * (r**3) * (h/2)\n    return volume\ndef volume_cone_cone_cone(r1,r2,h):\n    '''\n    Write a function to find the volume of cones and cone cones.\n    '''\n    pi = math.pi\n    volume = r1**3 + r2**3 + r1**2 + r2**2\n    return volume\n",
        "num_ids": 36
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # TODO: Write your code here\n    volume = 4*math.pi*math.pow(r,2)\n    print(f\"The volume of the sphere is {volume}\")\n",
        "num_ids": 47
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Import math module and define the function\n    import math\n    def volume(r):\n        return math.pi * (r * r) * 2\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    i = 0\n",
        "num_ids": 22
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = ''\n    for c in strr:\n        i = ord(c)\n        res += chr((i - ord('a') + 26) % 26)\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    cnt = 0\n    for i in strr:\n        cnt += ord(i) % 26\n    return chr(cnt)\n",
        "num_ids": 36
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    CharDict = {}\n    for i in range(0, len(strr)):\n        c = strr[i]\n        if c.isdigit():\n            CharDict[c] = i\n    return CharDict\n",
        "num_ids": 58
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = []\n    for i in range(len(strr)):\n        res.append(ord(strr[i]))\n    res = [int(i) % ord(a) for i, a in zip(res, string)]\n    return res\n",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for i in strr:\n        if i.isalpha():\n            char_list.append(ord(i) % ord('a'))\n        else:\n            char_list.append(i)\n    return char_list\n",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    res = \"\"\n    for char in strr:\n        if char in 'qwertyuiopasdfghjklzxcvbnm':\n            res = res + char\n    return int(res) % 26\n",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    '''\n    strr = \"A A A A\"\n    return strr.find('A')\n    '''\n    import string\n    dictionary = {'A':'0','B':'1','C':'2','D':'3','E':'4','F':'5','G':'6','H':'7','I':'8','J':'9','K':'A','L':'B','M':'C','N':'D','O':'E','P':'F','Q':'G','R':'H','S':'I','T':'J','U':'K','V':'L','W':'M','X':'N','Y':'O','Z':'P'}\n    strr
        "num_ids": 1975
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if strr == \"\":\n        return \"\"\n    if len(strr) == 0:\n        return \"\"\n    else:\n        for char in strr:\n            if char == \"a\" or char == \"A\":\n                return strr[0:1]\n            elif char == \"b\" or char == \"B\":\n                return strr[0:2]\n            elif char == \"c\" or char == \"C\":\n                return strr[0:3]\n            elif char == \"d\" or char == \"D\":\n                return strr[0:4]\n            elif char == \"e\" or char == \"E\":\n                return strr[0:5]\n            elif char == \"f\" or char == \"F\":\n                return strr[0:6]\n            elif char == \"g\" or char == \"G\":\n                return strr[0:7]\n            elif char == \"h\" or char == \"H\":\n                return strr[0:8]\n            elif char == \"i\" or char == \"I\":\n                return strr[0:9]\n            elif char == \"j\" or char == \"J\":\n                return strr[0:10]\n            elif char == \"k\" or char == \"K\":\n                return strr[0:11]\n            elif char == \"l\" or char == \"L\":\n                return strr[0:12]\n            elif char == \"m\" or char == \"M\":\n                return strr[0:13]\n            elif char == \"n\" or char == \"N\":\n                return strr[0:14]\n            elif char == \"o\" or char == \"O\":\n                return strr[0:15]\n            elif char == \"p\" or char == \"P\":\n                return strr[0:16]\n            elif char == \"q\" or char == \"Q\":\n                return strr[0:17]\n            elif char == \"r\" or char == \"R\":\n                return strr[0:18]\n            elif char == \"s\" or char == \"S\":\n                return strr[0:19]\n            elif char == \"t\" or char == \"T\":\n                return strr[0:20]\n            elif char == \"u\" or char == \"U\":\n                return strr[0:21]\n            elif char == \"v\" or char == \"V\":\n                return strr[0:22]\n            elif char == \"w\" or char == \"W\":\n                return strr[0:23]\n            elif char == \"x\" or char == \"X\":\n                return strr[0:24]\n            elif char == \"y\" or char == \"Y\":\n                return strr[0:25]\n            elif char == \"z\" or char == \"Z\":\n                return strr[0:26]\n        return strr[0:len(strr)]\n",
        "num_ids": 703
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return strr.lower().replace(\" \",\"\").replace(\"a\",\"i\").replace(\"b\",\"u\").replace(\"c\",\"i\").replace(\"d\",\"o\").replace(\"e\",\"i\").replace(\"f\",\"e\").replace(\"g\",\"i\").replace(\"h\",\"o\").replace(\"i\",\"a\").replace(\"j\",\"u\").replace(\"k\",\"i\").replace(\"l\",\"o\").replace(\"m\",\"i\").replace(\"n\",\"o\").replace(\"o\",\"u\").replace(\"p\",\"i\").replace(\"q\",\"u\").replace(\"r\",\"i\").replace(\"s\",\"o\").replace(\"t\",\"i\").replace(\"u\",\"e\").replace(\"v\",\"i\").replace(\"w\",\"e\").replace(\"x\",\"i\").replace(\"y\",\"i\").replace(\"z\",\"i\").replace(\" \",\"\").replace(\" \",\"\").replace(\" \",\"\").replace(\" \",\"\")\n    \n",
        "num_ids": 193
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x = strr.lower()\n    x = x.replace(\" \", \"\")\n    x = x.replace(\" \", \"\")\n    x = x.replace(\" \", \"\")\n    x = x.replace(\" \", \"\")\n    x = x.lower()\n    c = ord(x[0])\n    y = len(x)\n    s = x.replace(\" \",\"\")\n    z = s.replace(\" \",\"\")\n    y1 = int(z, 10)\n    l = [x,y,y1]\n    return l\n",
        "num_ids": 130
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==0 or n==1: return n\n    return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 31
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a=[]\n    for i in range(0,n): \n        a.append(i) \n    if n==1: \n        return a[0] \n    elif n==2: \n        return a[1] \n    else: \n        return a[n-2] \n ",
        "num_ids": 77
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        raise ValueError('n must be greater than 1')\n    \n    if n < 10:\n        return n\n    \n    return (n // 10) * 10 + n % 10\n",
        "num_ids": 51
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        a = n\n        while n > 1:\n            n -= 1\n            a = a * 3 + 1\n        return a\n",
        "num_ids": 107
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    count = 1\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    while count < n:\n        numbers.append(numbers[count-1] + numbers[count])\n        count += 1\n    print(numbers[n-1])\n",
        "num_ids": 75
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    from itertools import permutations\n    def sum_n(n):\n        '''\n        Compute the sum of nth numbers.\n        '''\n        from itertools import accumulate\n        return sum(accumulate(range(1, n+1)))\n    def product(n):\n        '''\n        Compute the product of nth numbers.\n        '''\n        from itertools import product\n        return product(range(1, n+1))\n    n = list(range(0, n+1))\n    result = sum(n) * sum_n(n-1)\n    if n == 0:\n        return result\n    product_n = product(n)\n    prod_n = product(list(product_n))\n    return list(prod_n)\n",
        "num_ids": 100
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    print(\"=\"*50)\n    if n == 1: \n        print(n, \"1st Number\")\n    elif n == 2: \n        print(n, \"2nd Number\")\n    elif n == 3: \n        print(n, \"3rd Number\")\n    else:\n        for i in range(1,4): \n            print(n,\"at number \",i,\" is \",n-i) \n        print(n, \"Last Number\")\n    print(\"=\"*50) \n",
        "num_ids": 122
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n * (n+1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n=int(n)\n    if n==0 or n==1:\n        return n\n    else:\n        return n+sequence(n-1)\n    \nn=int(input(\"Enter the number:\"))\nprint(sequence(n))",
        "num_ids": 60
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    l = []\n    for i in range(n): \n        l.append(i+1)\n    return l[n]\n",
        "num_ids": 34
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3.14*r*r\n",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**3)*math.acos(1 - r**2)\n",
        "num_ids": 27
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r ** 2)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    c = (4/3)*math.pi*r**3\n    print(c)\n    return c\n",
        "num_ids": 28
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    s = (4/3)*(r**3)\n    return (s*pi)\n",
        "num_ids": 31
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (3.14*r*r)\n    return a\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    phi = math.pi * r\n    return (phi * phi)\n",
        "num_ids": 24
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*math.pi*r**2\n    return a",
        "num_ids": 18
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # return (4/3)*(math.pi)*(math.pow(r,3))\n    return (4/3)*(math.pi)*(math.pow(r,3))\n",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\ndef surfacearea_sphere_quadratic(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\ndef surfacearea_sphere_cubic(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 8 * math.pi * (r**3)\n    return area\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = r**3\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    return volume\ndef volume_sphere_quadratic(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    return volume\ndef volume_sphere_cubic(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 8 * math.pi * (r**3)\n    return volume\ndef volume_cylinder(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3)\n    return volume\ndef volume_cylinder_quadratic(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3)\n    return volume\ndef volume_cylinder_cubic(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 8 * math.pi * (r**3) * (l**3)\n    return volume\ndef volume_cone(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3)\n    return volume\ndef volume_cone_quadratic(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3)\n    return volume\ndef volume_cone_cubic(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 8 * math.pi * (r**3) * (l**3) * (h**3)\n    return volume\ndef volume_sphere_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    return volume\ndef volume_sphere_sphere_quadratic(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3)\n    return volume\ndef volume_sphere_sphere_cubic(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 8 * math.pi * (r**3)\n    return volume\ndef volume_sphere_sphere_cubic_quadratic(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 8 * math.pi * (r**3)\n    return volume\ndef volume_cylinder_sphere_cubic(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (l**3)\n    return volume\ndef volume_cylinder_sphere_cubic_quadratic(r,l):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (l**3) * (l**3)\n    return volume\ndef volume_cone_sphere_cubic(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (h**3)\n    return volume\ndef volume_cone_sphere_cubic_quadratic(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (h**3) * (l**3)\n    return volume\ndef volume_sphere_cone(r,l,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (l**3)\n    return volume\ndef volume_sphere_cone_quadratic(r,l,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (l**3)\n    return volume\ndef volume_sphere_cone_cubic(r,l,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 8 * math.pi * (r**3) * (l**3) * (h**3) * (l**3)\n    return volume\ndef volume_cone_cone_cubic_quadratic(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 8 * math.pi * (r**3) * (l**3) * (h**3) * (l**3) * (l**3)\n    return volume\ndef volume_cylinder_cone(r,l,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (l**3)\n    return volume\ndef volume_cylinder_cone_quadratic(r,l,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (l**3) * (l**3)\n    return volume\ndef volume_cone_cylinder(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (l**3) * (l**3)\n    return volume\ndef volume_cone_cylinder_quadratic(r,l,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (l**3) * (l**3) * (l**3)\n    return volume\ndef volume_sphere_cone_cylinder(r,l,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * (r**3) * (l**3) * (h**3) * (l**3) * (l**3) * (l**3)\n    return volume\ndef volume_sphere_cone_cylinder_quadratic(r,l,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = ",
        "num_ids": 6
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n ** (1 / 2))\n",
        "num_ids": 14
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n > 6:\n        raise ValueError('n must be 0 or less.')\n    elif n < 0:\n        raise ValueError('n must be 0 or less.')\n",
        "num_ids": 59
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 0:\n        return int(n/2) + int(n/6)*3\n    else:\n        return int(n/2) + int(n/6)*5\n",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = 0\n    while n!= 0:\n        result = (n*result) + ((n-1)*(n+1))/6\n        n = n - 1\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagon_number(n, n//2)\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n_hexagon_number = 0\n    for i in range(1, n + 1):\n        n_hexagon_number += 2 ** i\n    return n_hexagon_number\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    elif n < 10:\n        return n\n    else:\n        return (n-1) * 4 + (n-1) // 2\n",
        "num_ids": 60
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if (n == 0):\n        print('0')\n        return\n    \n    lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in lst:\n        print(i, end=' ')\n    print()\n",
        "num_ids": 69
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    res = 0\n    i = 0\n    while i < n:\n        res = res + (i*(3*i+1))\n        i = i + 1\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # use str format to return a string to be written on the hexagon\n    return str(n) + 'H' + 'x' + str(n) + '{'\n",
        "num_ids": 43
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    for key in dict1.keys():\n        if key in dict2.keys():\n            merged_dict[key] = dict1[key]\n        elif key in dict3.keys():\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = dict2[key]\n    return merged_dict\n",
        "num_ids": 97
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return_dict=dict1.copy()\n    for key in dict2.keys():\n        if key in dict1 and key in dict2:\n            if dict1[key]!=dict2[key]:\n                return_dict[key]=dict1[key]\n        elif key in dict2:\n            return_dict[key]=dict2[key]\n        else:\n            return_dict[key]=dict3[key]\n",
        "num_ids": 103
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict()\n    for dict_name in dict1:\n        if dict_name in dict2:\n            merged_dict[dict_name] = dict1[dict_name]\n        if dict_name in dict3:\n            merged_dict[dict_name] = dict2[dict_name]\n    return merged_dict\n",
        "num_ids": 85
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    for key in dict2:\n        d[key] = dict2[key]\n    for key in dict3:\n        d[key] = dict3[key]\n    return d\ndef merge_dictionaries(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1.copy()\n    for key in dict2:\n        d[key] = dict2[key]\n    for key in dict3:\n        d[key] = dict3[key]\n    return d\ndef get_dist(x):\n    '''\n    Write a function to return the distance between two nodes.\n    '''\n    return x.get(\"x\")\ndef compare_two_dicts(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and val_to_check!=dict1[k] ]\ndef compare_two_dicts_dict(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and dict1[k]==val_to_check ]\ndef compare_two_dicts_copy(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and dict1[k]==val_to_check ]\ndef compare_two_dicts_copy_dict(dict1, dict2,keys_to_check,val_to_check):\n    '''\n    Write a function to compare two dictionaries, keeping only the values\n    that are equal to the desired value.\n    '''\n    return [k for k in dict1.keys() if dict1[k]==dict2[k] and dict2[k]!=None and dict1[k]==val_to_check ]\ndef calculate_dist_2_dicts(dict1,dict2,val_to_check):\n    '''\n    Write a function to calculate the distance between two dictionaries,\n    keeping only the values that are equal to the desired value.\n    '''\n    dist=get_dist(dict1)\n    if dict1[val_to_check]==dict2[val_to_check]:\n        dist+=get_dist(dict1[val_to_check])\n        del dict1[val_to_check]\n    else:\n        print(\"error\")\n    return dist\ndef check_dicts_equal(dict1,dict2):\n    '''\n    Write a function to check if the two dictionaries are equal.\n    '''\n    for key in dict1:\n        if dict1[key]!= dict2[key]:\n            print(f\"{key} has been modified\")\n    return True\ndef print_nodes_level_sort(dict):\n    '''\n    Write a function that prints all nodes in a dictionary in a hierarchical order.\n    '''\n    for key in dict:\n        print(key,dict[key])\ndef print_nodes_level_sort_dict(dict):\n    '''\n    Write a function that prints all nodes in a dictionary in a hierarchical order.\n    '''\n    for key in dict:\n        print(key,dict[key])\ndef print_all_nodes_level_sort(dict):\n    '''\n    Write a function that prints all nodes in a dictionary in a hierarchical order.\n    '''\n    for key in dict:\n        print(key,dict[key])\n",
        "num_ids": 19
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for item in dict1.keys():\n        result[item] = dict1[item]\n    for item in dict2.keys():\n        result[item] = dict2[item]\n    for item in dict3.keys():\n        result[item] = dict3[item]\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    merged= dict()\n    for key in dict1.keys():\n        if key in dict2.keys():\n            merged[key] = dict1[key] + dict2[key]\n        else:\n            merged[key] = dict1[key]\n    return merged\n",
        "num_ids": 71
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    newdict = dict1.copy()\n    newdict.update(dict2)\n    newdict.update(dict3)\n    return newdict\n",
        "num_ids": 37
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_merged = dict()\n    dict2_merged = dict()\n    dict3_merged = dict()\n",
        "num_ids": 32
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "num_ids": 38
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Dictionaries are mutable.\n    # Caching can be implemented by dict_merge or __setitem__.\n    \n    # If the first dictionary is empty, return empty dictionary\n    if not dict1:\n        return dict3\n    \n    # If the second dictionary is empty, return empty dictionary\n    if not dict2:\n        return dict3\n    \n    # If the third dictionary is empty, return empty dictionary\n    if not dict3:\n        return dict1\n    \n    # If the first dictionary does not have an entry, add it to first dictionary\n    if not dict1.__contains__(key):\n        dict1[key] = dict2\n        return dict1\n    \n    # If the second dictionary does not have an entry, add it to second dictionary\n    if not dict2.__contains__(key):\n        dict2[key] = dict1\n        return dict2\n    \n    # If the third dictionary does not have an entry, add it to third dictionary\n    if not dict3.__contains__(key):\n        dict3[key] = dict1\n        return dict3\n    \n    # If all three dictionaries have an entry, merge them\n    dict1[key] = dict2[key] = dict3[key]\n    \n    return dict1\ndef merge_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    # Dictionaries are mutable.\n    # Caching can be implemented by dict_merge or __setitem__.\n    \n    # If the first dictionary is empty, return empty dictionary\n    if not dict1:\n        return dict3\n    \n    # If the second dictionary is empty, return empty dictionary\n    if not dict2:\n        return dict3\n    \n    # If the third dictionary is empty, return empty dictionary\n    if not dict3:\n        return dict1\n    \n    # If the first dictionary does not have an entry, add it to first dictionary\n    if not dict1.__contains__(key):\n        dict1[key] = dict2\n        return dict1\n    \n    # If the second dictionary does not have an entry, add it to second dictionary\n    if not dict2.__contains__(key):\n        dict2[key] = dict1\n        return dict2\n    \n    # If the third dictionary does not have an entry, add it to third dictionary\n    if not dict3.__contains__(key):\n        dict3[key] = dict1\n        return dict3\n    \n    # If all three dictionaries have an entry, merge them\n    dict1[key] = dict2[key] = dict3[key]\n    \n    return dict1\ndef replace_dictionaries(dict1,dict2,dict3):\n    '''\n    Write a function to replace all of the keys with values in a dictionary.\n    '''\n    # Dictionaries are mutable.\n    # Caching can be implemented by dict_replace or __setitem__.\n    \n    # If the first dictionary is empty, return empty dictionary\n    if not dict1:\n        return dict3\n    \n    # If the second dictionary is empty, return empty dictionary\n    if not dict2:\n        return dict3\n    \n    # If the third dictionary is empty, return empty dictionary\n    if not dict3:\n        return dict1\n    \n    # If the first dictionary does not have an entry, add it to first dictionary\n    if not dict1.__contains__(key):\n        dict1[key] = dict2\n        return dict1\n    \n    # If the second dictionary does not have an entry, add it to second dictionary\n    if not dict2.__contains__(key):\n        dict2[key] = dict3\n        return dict2\n    \n    # If the third dictionary does not have an entry, add it to third dictionary\n    if not dict3.__contains__(key):\n        dict3[key] = dict1\n        return dict3\n    \n    # If all three dictionaries have an entry, replace them with each other's keys and values\n    for key, value in dict1.items():\n        dict1[key] = dict2[key]\n    \n    for key, value in dict2.items():\n        dict2[key] = dict3[key]\n    \n    for key, value in dict3.items():\n        dict3[key] = dict1[key]\n    \n    return dict1\ndef remove_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to remove all of the keys from a dictionary.\n    '''\n    # Dictionaries are mutable.\n    # Caching can be implemented by dict_remove or __setitem__.\n    \n    # If the first dictionary is empty, return empty dictionary\n    if not dict1:\n        return dict3\n    \n    # If the second dictionary is empty, return empty dictionary\n    if not dict2:\n        return dict3\n    \n    # If the third dictionary is empty, return empty dictionary\n    if not dict3:\n        return dict1\n    \n    # If the first dictionary does not have an entry, add it to first dictionary\n    if not dict1.__contains__(key):\n        dict1[key] = dict2\n        return dict1\n    \n    # If the second dictionary does not have an entry, add it to second dictionary\n    if not dict2.__contains__(key):\n        dict2[key] = dict3\n        return dict2\n    \n    # If the third dictionary does not have an entry, add it to third dictionary\n    if not dict3.__contains__(key):\n        dict3[key] = dict1\n        return dict3\n    \n    # If all three dictionaries have an entry, delete them from both dictionaries\n    del dict1[key]\n    del dict2[key]\n    del dict3[key]\n    \n    return dict1\ndef insert_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to insert the keys and values of two dictionaries into a single dictionary.\n    '''\n    # Dictionaries are mutable.\n    # Caching can be implemented by dict_insert or __setitem__.\n    \n    # If the first dictionary is empty, return empty dictionary\n    if not dict1:\n        return dict3\n    \n    # If the second dictionary is empty, return empty dictionary\n    if not dict2:\n        return dict3\n    \n    # If the third dictionary is empty, return empty dictionary\n    if not dict3:\n        return dict1\n    \n    # If the first dictionary does not have an entry, add it to first dictionary\n    if not dict1.__contains__(key):\n        dict1[key] = dict2\n        return dict1\n    \n    # If the second dictionary does not have an entry, add it to second dictionary\n    if not dict2.__contains__(key):\n        dict2[key] = dict3\n        return dict2\n    \n    # If the third dictionary does not have an entry, add it to third dictionary\n    if not dict3.__contains__(key):\n        dict3[key] = dict1\n        return dict3\n    \n    # If all three dictionaries have an entry, add them to both dictionaries\n    dict1[key] = dict2[key]\n    dict2[key] = dict3[key]\n    \n    return dict1\n",
        "num_ids": 311
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    #defining a dictionary\n    freq = dict()\n",
        "num_ids": 16
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # var_dictionary = {}\n    # for i in list1:\n    #     if i in var_dictionary:\n    #         var_dictionary[i] += 1\n    #     else:\n    #         var_dictionary[i] = 1\n    \n    var_dictionary = {}\n    for i in list1:\n        if i in var_dictionary:\n            var_dictionary[i] += 1\n        else:\n            var_dictionary[i] = 1\n    return var_dictionary\n    \n",
        "num_ids": 127
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count={}\n    for i in range(len(list1)):\n        count[list1[i]]=count.get(list1[i],0)+1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq_dict = {}\n    for word in list1:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict\n",
        "num_ids": 63
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = collections.defaultdict(int)\n    for el in list1:\n        result[el] += 1\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n",
        "num_ids": 17
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "num_ids": 19
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return max(map(int, str(N)))\n",
        "num_ids": 15
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = 10001\n    for i in range(N, smallest_num):\n        if closest_num_helper(i) == smallest_num:\n            smallest_num = i\n    return smallest_num\n",
        "num_ids": 55
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # define a list of nums\n    nums = [i for i in range(1,N+1)]\n    # use a sorted function to sort\n    nums.sort()\n    # find the closest number\n    num = 0\n    diff = float('inf')\n    for num in nums:\n        if diff > abs(num-N):\n            diff = abs(num-N)\n            num_closest = num\n    return num_closest\n",
        "num_ids": 111
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N)\n",
        "num_ids": 9
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 3\n    if N % 2 == 0:\n        return N/2\n    else:\n        return (N-1)/2\n",
        "num_ids": 63
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return\n    closest_num = 1\n    num = 0\n    for i in range(N+1):\n        if i == 0:\n            num = i\n        elif i == 1:\n            num = i\n        elif i > num:\n            num = i\n    return num\n",
        "num_ids": 79
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        return -1\n    elif N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 0\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 2\n    elif N == 5:\n        return 3\n    elif N == 6:\n        return 4\n    elif N == 7:\n        return 5\n    elif N == 8:\n        return 6\n    elif N == 9:\n        return 7\n    elif N == 10:\n        return 8\n    elif N == 11:\n        return 9\n    elif N == 12:\n        return 10\n    elif N == 13:\n        return 11\n    elif N == 14:\n        return 12\n    elif N == 15:\n        return 13\n    elif N == 16:\n        return 14\n    elif N == 17:\n        return 15\n    elif N == 18:\n        return 16\n    elif N == 19:\n        return 17\n    elif N == 20:\n        return 18\n    elif N == 21:\n        return 19\n    elif N == 22:\n        return 20\n    elif N == 23:\n        return 21\n    elif N == 24:\n        return 22\n    elif N == 25:\n        return 23\n    elif N == 26:\n        return 24\n    elif N == 27:\n        return 25\n    elif N == 28:\n        return 26\n    elif N == 29:\n        return 27\n    elif N == 30:\n        return 28\n    elif N == 31:\n        return 29\n    elif N == 32:\n        return 30\n    elif N == 33:\n        return 31\n    elif N == 34:\n        return 32\n    elif N == 35:\n        return 33\n    elif N == 36:\n        return 34\n    elif N == 37:\n        return 35\n    elif N == 38:\n        return 36\n    elif N == 39:\n        return 37\n    elif N == 40:\n        return 38\n    elif N == 41:\n        return 39\n    elif N == 42:\n        return 40\n    elif N == 43:\n        return 41\n    elif N == 44:\n        return 42\n    elif N == 45:\n        return 43\n    elif N == 46:\n        return 44\n    elif N == 47:\n        return 45\n    elif N == 48:\n        return 46\n    elif N == 49:\n        return 47\n    elif N == 50:\n        return 48\n    elif N == 51:\n        return 49\n    elif N == 52:\n        return 50\n    elif N == 53:\n        return 51\n    elif N == 54:\n        return 52\n    elif N == 55:\n        return 53\n    elif N == 56:\n        return 54\n    elif N == 57:\n        return 55\n    elif N == 58:\n        return 56\n    elif N == 59:\n        return 57\n    elif N == 60:\n        return 58\n    elif N == 61:\n        return 59\n    elif N == 62:\n        return 60\n    elif N == 63:\n        return 61\n    elif N == 64:\n        return 62\n    elif N == 65:\n        return 63\n    elif N == 66:\n        return 64\n    elif N == 67:\n        return 65\n    elif N == 68:\n        return 66\n    elif N == 69:\n        return 67\n    elif N == 70:\n        return 68\n    elif N == 71:\n        return 69\n    elif N == 72:\n        return 70\n    elif N == 73:\n        return 71\n    elif N == 74:\n        return 72\n    elif N == 75:\n        return 73\n    elif N == 76:\n        return 74\n    elif N == 77:\n        return 75\n    elif N == 78:\n        return 76\n    elif N == 79:\n        return 77\n    elif N == 80:\n        return 78\n    elif N == 81:\n        return 79\n    elif N == 82:\n        return 80\n    elif N == 83:\n        return 81\n    elif N == 84:\n        return 82\n    elif N == 85:\n        return 83\n    elif N == 86:\n        return 84\n    elif N == 87:\n        return 85\n    elif N == 88:\n        return 86\n    elif N == 89:\n        return 87\n    elif N == 90:\n        return 88\n    elif N == 91:\n        return 89\n    elif N == 92:\n        return 90\n    elif N == 93:\n        return 91\n    elif N == 94:\n        return 92\n    elif N == 95:\n        return 93\n    elif N == 96:\n        return 94\n    elif N == 97:\n        return 95\n    elif N == 98:\n        return 96\n    elif N == 99:\n        return 97\n    elif N == 100:\n        return 98\n    elif N == 101:\n        return 99\n    elif N == 102:\n        return 100\n    elif N == 103:\n        return 101\n    elif N == 104:\n        return 102\n    elif N == 105:\n        return 103\n    elif N == 106:\n        return 104\n    elif N == 107:\n        return 105\n    elif N == 108:\n        return 106\n    elif N == 109:\n        return 107\n    elif N == 110:\n        return 108\n    elif N == 111:\n        return 109\n    elif N == 112:\n        return 110\n    elif N == 113:\n        return 111\n    elif N == 114:\n        return 112\n    elif N == 115:\n        return 113\n    elif N == 116:\n        return 114\n    elif N == 117:\n        return 115\n    elif N == 118:\n        return 116\n    elif N == 119:\n        return 117\n    elif N == 120:\n        return 118\n    elif N == 121:\n        return 119\n    elif N == 122:\n        return 120\n    elif N == 123:\n        return 121\n    elif N == 124:\n        return 122\n    elif N == 125:\n        return 123\n    elif N == 126:\n        return 124\n    elif N == 127:\n        return 125\n    elif N == 128:\n        return 126\n    elif N == 129:\n        return 127\n    elif N == 130:\n        return 128\n    elif N == 131:\n        return 129\n    elif N == 132:\n        return 130\n    elif N == 133:\n        return 131\n    elif N == 134:\n        return 132\n    elif N == 135:\n        return 133\n    elif N == 136:\n        return 134\n    elif N == 137:\n        return 135\n    elif N == 138:\n        return 136\n    elif N == 139:\n        return 137\n    elif N == 140:\n        return 138\n    elif N == 141:\n        return 139\n    elif N == 142:\n        return 140\n    elif N == 143:\n        return 141\n    elif N == 144:\n        return 142\n    elif N == 145:\n        return 143\n    elif N == 146:\n        return 144\n    elif N == 147:\n        return 145\n    elif N == 148:\n        return 146\n    elif N == 149:\n        return 147\n    elif N == 150:\n        return 148\n    elif N == 151:\n        return 149\n    elif N == 152:\n        return 150\n    elif N == 153:\n        return 151\n    elif N == 154:\n        return 152\n    elif N == 155:\n        return 153\n    elif N == 156:\n        return 154\n    elif N == 157:\n        return 155\n    elif N == 158:\n        return 156\n    elif N == 159:\n        return 157\n    elif N == 160:\n        return 158\n    elif N == 161:\n        return 159\n    elif N == 162:\n        return 160\n    elif N == 163:\n        return 161\n    elif N == 164:\n        return 162\n    elif N == 165:\n        return 163\n    elif N == 166:\n        return 164\n    e",
        "num_ids": 2020
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    arr = list(map(int, str(N)))\n    arr.sort()\n",
        "num_ids": 22
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    smaller_num = math.inf\n    for i in range(1,int(math.sqrt(N)+1)):\n        if N%i == 0:\n            smaller_num = i\n            break\n    return smaller_num\n",
        "num_ids": 63
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # create a variable to store the longest word in the list\n    longest = 0\n    # loop through the list\n    for i in list1:\n        # if the length of the word is greater than the longest word\n        if len(i) > longest:\n            longest = len(i)\n    print(longest)\n    return longest\n",
        "num_ids": 82
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 is None or len(list1) == 0:\n        return 0\n    return max(map(len, list1))\n",
        "num_ids": 34
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n",
        "num_ids": 51
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"--------\")\n    str = \"\"\n    for i in range(len(list1)):\n        str += (str + str(list1[i]) + \" \")\n    print(\"--------\")\n    print(str)\n    print(\"Lenght = \", len(str))\n    print(\"--------\")\n    \n    return str\n",
        "num_ids": 81
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count = 0\n    for i in list1:\n        count += len(i)\n    return count\n",
        "num_ids": 27
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) < 1:\n        return -1\n",
        "num_ids": 18
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) < 2:\n        print(\"The length of the longest word is: \", len(list1[0]))\n    else:\n        print(\"The length of the longest word is: \", len(list1[0]))\n        print(list1[1])\n",
        "num_ids": 68
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    return len(list1[0])\n",
        "num_ids": 19
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # EXERCISE:  https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE: https://www.w3schools.com/python/python_lists.asp\n    # write a python function to find the length of the longest word.\n    # EXERCISE",
        "num_ids": 2017
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not str1:\n        return False\n    if len(str1) == 0 or len(sub_str) == 0:\n        return False\n    if sub_str in str1:\n        return True\n    \n    # if char is present in sub_str\n    for index in range(len(str1)):\n        if sub_str[index] in str1[index:]:\n            if not find_substring(str1[index:], sub_str):\n                return False\n    return True\n",
        "num_ids": 120
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #raise NotImplementedError()\n    s=set()\n    i=0\n    while i < len(str1):\n        for j in range(len(str1[i])):\n            if str1[i][j] in sub_str:\n                s.add(str1[i][j])\n                if (i+len(sub_str)) > len(str1):\n                    return False\n                else:\n                    i+=len(sub_str)\n            else:\n                i+=1\n    return True\n",
        "num_ids": 125
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    '''\n    Usage:\n    # Program to check if a string is present as a substring of a given string in a given list of string values.\n    print(find_substring(\"Hello world\", [\"e\",\"l\",\"o\"]))\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #print(sub_str)\n    #print(str1)\n    sub_str = str1.split(\" \")\n    #print(sub_str)\n    for i in sub_str:\n        if i in sub_str:\n            return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1.count(sub_str)!= 0\n    \n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    check = False\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            check = True\n    return check\n",
        "num_ids": 52
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i:i+sub_str] in sub_str:\n            return str1[i:i+sub_str]\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    '''\n    Assume str1 = \"mississippi\"\n    str1 = \"mississippi\"\n    '''\n    count = 0\n    for i in range(len(str1)-len(sub_str)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            count += 1\n    if count == len(sub_str):\n        return True\n    else:\n        return False\n    \ndef check_if_string_contains_numbers(str1):\n    '''\n    Write a function that returns True if the string contains any number of the numbers (0 or 1) followed by a space ( ).\n    '''\n    '''\n    Assume str1 = \"mississippi\"\n    '''\n    count = 0\n    for i in range(len(str1)-len(sub_str)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        i = 0\n        j = 0\n        str1_len = len(str1)\n        while j < str1_len:\n            if str1[i] == sub_str[j] and i < str1_len - 1:\n                i += 1\n                j += 1\n            else:\n                if j < str1_len - 1:\n                    j += 1\n                else:\n                    i += 1\n                    j = 0\n        return True\n",
        "num_ids": 127
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        for j in range(i, len(str1)):\n            if str1[i:j+1] == sub_str:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code here\n    if n < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: \n        return True\n    if n % 5!= 0 and n % 3!= 0:\n        return False\n    if n % 3!= 0: \n        return False\n    if n % 5 == 0: \n        return False\n    return is_undulating(int(n/5))\n",
        "num_ids": 78
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n%5==0 or n%7==0 or n%9==0\n",
        "num_ids": 22
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return True if n%2==0 else False\n",
        "num_ids": 14
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        raise Exception(\"The number is negative.\")\n    elif n == 0:\n        return True\n    elif n == 1:\n        return False\n    elif n % 2 == 0:\n        return True\n    elif n % 2!= 0:\n        return False\n    else:\n        return is_undulating(n - 1)\n",
        "num_ids": 88
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1: \n        return True\n    if n % 2 == 0: \n        return False\n    else: \n        return is_undulating(n / 2)\n",
        "num_ids": 45
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 100: \n        return False\n    elif n >= 100 and n < 1000: \n        return True\n    elif n >= 1000 and n < 10000: \n        return False\n    elif n >= 10000 and n < 100000: \n        return True\n    elif n >= 100000: \n        return False\n",
        "num_ids": 80
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a > b:\n        return a**b\n    else:\n        return a**b\n",
        "num_ids": 25
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # your code goes here\n    if b == 0:\n        return a\n    else:\n        return a**b\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    return a**b\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b<0:\n        return None\n    return a*power(a,b-1)\n",
        "num_ids": 37
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        print('The result is 0')\n    elif a == 0:\n        print('The result is 0')\n    elif a == 1:\n        print(a)\n    else:\n        print(a**b)\n    \npower(2,3)\npower(2,3,1)\npower(2,3,1,0)",
        "num_ids": 89
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    c=a**b\n    return c\n",
        "num_ids": 13
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    a=[]\n    for i in test_list:\n        a.append(i[0])\n    a.sort()\n    print(a[0])\n    return a[0]\n",
        "num_ids": 47
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Create a dictionary to find the second smallest value\n    smallest_second_value = test_list[0][1]\n",
        "num_ids": 31
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if min > test_list[i][1]:\n            min = test_list[i][1]\n            index = i\n    return index_minimum(test_list[index:])\n",
        "num_ids": 74
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n",
        "num_ids": 19
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code goes here\n    smallest = test_list[0][1]\n    for item in test_list:\n        if item[1] < smallest:\n            smallest = item[1]\n    return smallest\n",
        "num_ids": 54
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    minimum_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum:\n            minimum = test_list[i][1]\n            minimum_index = i\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = min(test_list, key=itemgetter(1))\n    return smallest[0]\n",
        "num_ids": 28
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort()\n    return test_list[0][0]\n",
        "num_ids": 21
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum=min(test_list,key=itemgetter(1))[0]\n    for x in test_list:\n        if x[1]==minimum:\n            return minimum\n    return minimum\n",
        "num_ids": 50
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = sorted(test_list, key=itemgetter(0))[0]\n    for i in test_list:\n        if min_value[1]!= i[1]:\n            min_value = i\n    return min_value[0]\n",
        "num_ids": 65
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Take elements from the list and the length of the list\n    min_length = min(lst)\n    # create a new array\n    result = []\n    # iterate through each element\n    for i in range(len(lst)):\n        # get the element from the list\n        result.append(lst[i][i])\n        # iterate through the remaining element\n        # if the current element is smaller than the min\n        # we need to append the index to the new array\n        # add it to the result\n        # we will add the new element to the result array\n        # finally we will add the index\n        if min_length > result[i]:\n            result.append(lst[i][i])\n            result.append(lst[i][i])\n            result.append(lst[i][i])\n            result.append(lst[i][i])\n            result.append(lst[i][i])\n            result.append(lst[i][i])\n            result.append(lst[i][i])\n    # return the length\n    return len(result)\n",
        "num_ids": 261
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list = []\n    for i in lst:\n        if len(i)!= 0:\n            list.append(len(i))\n    print(list)\n    return min(list)\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if min == lst[i]:\n                return i\n    return min\n    \ndef Length_Sort(lst):\n    '''\n    Write a python function that sorts a list of lists.\n    '''\n    lst.sort(key=Length_Sort_Key)\n    return lst\n    \ndef Length_Sort_Key(x):\n    '''\n    Write a python function that sorts a list of lists.\n    '''\n    return len(x)\n    \ndef Sum_Num_List(lst):\n    '''\n    Write a python function to sum a list of numbers and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_Faster(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_Faster_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_3_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_4_2_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_3(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_4(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_2_5(lst):\n    '''\n    Write a python function to sum two lists and return the sum.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Two_Num_List_C_Faster_5_3(lst):\n    ''",
        "num_ids": 59
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst is None or len(lst) == 0:\n        return 0\n",
        "num_ids": 22
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    smallest_list = []\n    \n    for item in lst:\n        if item < smallest:\n            smallest = item\n            smallest_list = lst\n    return smallest_list\n",
        "num_ids": 58
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    i = 0\n    for el in lst:\n        i = len(el)\n        if i < i:\n            i = i\n    return i\n    #  return  len(min(lst))\ndef Find_Min_Distance(lst):  \n    '''\n    Write a python function to find the distance between the start and end points of a list of lists.\n    '''\n    min_dist = sys.maxsize\n    i = 0\n    for el in lst:\n        i = len(el)\n        if i < min_dist:\n            min_dist = i\n    return min_dist\n    #  return  len(min(lst))\ndef Find_Max_Distance(lst):\n    '''\n    Write a python function to find the maximum distance between two lists of lists.\n    '''\n    max_dist = 0\n    i = 0\n    for el in lst:\n        i = len(el)\n        if i > max_dist:\n            max_dist = i\n    return max_dist\n    #  return  len(max(lst))\ndef Find_Min_Distance_Old(lst):\n    '''\n    Write a python function to find the distance between the start and end points of a list of lists.\n    '''\n    min_dist = sys.maxsize\n    i = 0\n    for el in lst:\n        i = len(el)\n        if i < min_dist:\n            min_dist = i\n    return min_dist\n    #  return  len(min(lst))\ndef Find_Max_Distance_Old(lst):\n    '''\n    Write a python function to find the maximum distance between two lists of lists.\n    '''\n    max_dist = 0\n    i = 0\n    for el in lst:\n        i = len(el)\n        if i > max_dist:\n            max_dist = i\n    return max_dist\n    #  return  len(max(lst))\ndef Find_Max_Distance_Two(lst):\n    '''\n    Write a python function to find the maximum distance between two lists of lists.\n    '''\n    max_dist = 0\n    i = 0\n    for el in lst:\n        if i < len(lst[0]):\n            i = len(lst[0])\n        if i > max_dist:\n            max_dist = i\n    return max_dist\n    #  return  len(max(lst))\n",
        "num_ids": 81
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Ex: [[1,2,3],[4,5,6,7],[8,9,10]]\n    #  # Output: 2\n    def getLength(lst):\n        return len(lst)\n    \n    # Ex: [1,2,3]\n    # Output: 3\n    def getLength1(lst):\n        lst.sort()\n        return len(lst)\n    \n    # Ex: [1,2,3,4,5,6,7]\n    # Output: 5\n    def getLength2(lst):\n        lst.sort()\n        return len(lst)\n    \n    # Ex: [1,2,3,4,5,6,7,8,9,10]\n    # Output: 10\n    def getLength3(lst):\n        lst.sort()\n        return len(lst)\n    \n    # Ex: [[]]\n    # Output: 0\n    def getLength0(lst):\n        lst.sort()\n        return len(lst)\n    \n    if isinstance(lst, list):\n        if lst:\n            return min(getLength(lst), getLength1(lst), getLength2(lst), getLength3(lst))\n    return 0\n",
        "num_ids": 305
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        length = len(lst[i])\n",
        "num_ids": 31
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_list = []\n    for i in range(len(lst)):\n        min_list.append(min(lst[i]))\n    return min(min_list)\n",
        "num_ids": 47
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    if len(lst) == 1:\n        return 1\n    if len(lst) == 2:\n        return 2 if lst[0] < lst[1] else 3\n    if len(lst) == 3:\n        return 2 if lst[0] < lst[1] and lst[1] < lst[2] else 3\n    else:\n        return 3\n",
        "num_ids": 106
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    def divisor(n):\n        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"2\"\n        elif n % 2 == 0:\n            return divisor(n // 2) + \"2\"\n        elif n % 2 == 1:\n            return divisor(n // 2 + 1)\n        else:\n            return divisor(n - 1)\n    return divisor(n)\n",
        "num_ids": 110
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            div += 1\n    return div\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs=0\n    for i in range(1,n+1):\n        if n%i==0:\n            divs+=1\n    return divs\n",
        "num_ids": 41
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    s = 0\n    while n > 1:\n        if n%2 == 0:\n            s += 1\n            n = n // 2\n        else:\n            n = n // 2\n    return s\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    try:\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n    except:\n        return \"No divisors\"\n",
        "num_ids": 55
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n//1+divisor(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n//i)\n        i += 1\n    return divisors\n",
        "num_ids": 73
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for divisor in range(1, n):\n        if n % divisor == 0:\n            divisor_count += 1\n    return divisor_count\n",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        for key, value in element.items():\n            if value in frequency:\n                frequency[value] += 1\n            else:\n                frequency[value] = 1\n    return frequency\n    \nlist1 = [[1,2,3],[1,2,3,4]]\nprint(frequency_lists(list1))",
        "num_ids": 87
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return dict(zip(list1,range(len(list1))))\n",
        "num_ids": 19
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # count = 0\n    d = dict()\n    # count = 0\n    for i in range(len(list1)):\n        # for j in range(len(list1[i])):\n        if list1[i][0] in d:\n            d[list1[i][0]] += 1\n        else:\n            d[list1[i][0]] = 1\n    # print(d)\n    return d\n",
        "num_ids": 103
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = dict()\n    for sublist in list1:\n        for number in sublist:\n            if number in frequency_dictionary:\n                frequency_dictionary[number] += 1\n            else:\n                frequency_dictionary[number] = 1\n    return frequency_dictionary\n",
        "num_ids": 71
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Step 1: Create a dictionary to hold the frequency of each element in the list\n    #  (e.g., {\"Jan\": 2, \"Feb\": 2, \"Mar\": 2, \"May\": 2,..., \"Jul\": 2})\n    frequency_dict = {}\n    # Step 2: Loop through each element in the list and add it to the dictionary\n    for element in list1:\n        element = element.strip(\"[\").strip(\"]\").replace(\"'\", \"\")\n        if element not in frequency_dict.keys():\n            frequency_dict[element] = 1\n        else:\n            frequency_dict[element] += 1\n    \n    # Step 3: Return the dictionary\n    return frequency_dict\n",
        "num_ids": 165
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    \n    for x in list1:\n        # Creates a dictionary and the value is the list that contains the elements, which are the keys\n        frequency_dict.update({x:list1.count(x)})\n    \n    return frequency_dict\n",
        "num_ids": 67
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for lst in list1:\n        for element in lst:\n            if element not in counts:\n                counts[element] = 1\n            else:\n                counts[element] += 1\n    return counts\n",
        "num_ids": 59
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_2D = []\n    for element in list1:\n        for i in element:\n            list_2D.append(i)\n    # print(list_2D)\n    my_dict = dict(zip(list_2D, range(len(list_2D))))\n    # print(my_dict)\n    # print(my_dict[0])\n    # print(my_dict[1])\n    return my_dict\n",
        "num_ids": 107
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Split the flattened list into lists\n    alist = list1.split()\n    freq = {}\n    for k in alist:\n        if k in freq:\n            freq[k] += 1\n        else:\n            freq[k] = 1\n    return freq\n",
        "num_ids": 69
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # TODO: Create a dictionary of element and frequency, then print the dictionary\n    # TODO: Find the frequency of each element, store as a key and value in a list\n    \n    frequency_dictionary = {}\n    for item in list1:\n        frequency_dictionary[item] = list1.count(item)\n    \n    return frequency_dictionary\n",
        "num_ids": 86
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_list = []\n    length = len(numbers)\n    for i in numbers:\n        new_list.append(i * length)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_list = []\n    for num in numbers:\n        new_list.append(num*len(numbers))\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result\n    \nnumbers = [1, 2, 3, 4, 5]\nprint(multiply_num(numbers)",
        "num_ids": 53
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    x = 1\n    y = 1\n    for i in range(0, len(numbers)):\n        x = y\n        y = x * numbers[i]\n        print(y)\n    \n    return y\n",
        "num_ids": 54
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiple_num(numbers):\n        result = 1\n        for num in numbers:\n            result = num * result\n        return result\n    return multiple_num(numbers)\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    def multiply(numbers):\n        if type(numbers) == list:\n            result = 1\n            for num in numbers:\n                result *= num\n            return result\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers must be a list\")\n    if not numbers:\n        raise TypeError(\"numbers must not be empty\")\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    i = 0\n    sum = 0\n    for num in numbers:\n        sum += num\n        i += 1\n    return sum/i\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Hint: You can use a loop (for loop) to multiply all the numbers in a list. Then you can divide by the length of the list.\n    #       For example, if a list has 5 numbers, then you can use the following code:\n    #       for num in numbers:\n    #           result = num * 2\n    #       Hint: You can use the built-in function pow()\n    #\n    # HINT: You can use list comprehension to make a list of all the numbers.\n    #       For example, if a list has 3 numbers, then you can use the following code:\n    #       numbers = [num*2 for num in numbers]\n    result = 1\n    for num in numbers:\n        result *= num\n    return result\n",
        "num_ids": 177
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    for d in range(len(n)): \n        binary_string += str(bin(n)[2:])\n        # -1 if the digit is 0, the string is a digit\n    return binary_string[2:len(binary_string) - 1]\n",
        "num_ids": 71
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    # first check if the binary string is 0, only this check is to make sure binary strings are of length at least 1.\n    if len(binary_string) < 1:\n        return f'{n:b}'\n    # as the base case, it is a valid binary string, return the result of this process, such that at least 1 '1' is appended at the end.\n    else:\n        # if the binary string is more than 1, return the result of the previous process in the form of a string.\n        if len(binary_string) >= 2:\n            result = decimal_to_binary(int(binary_string[:-1]))\n            result += f'{int(binary_string[-1])}'\n            return result\n        # otherwise, return the binary string to 1's\n        else:\n            return f'{int(binary_string[0])}'\n",
        "num_ids": 217
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    base = 2\n    bin_string = \"\"\n    while n > 0: \n        n, rem = divmod(n, base)\n        bin_string += str(rem)\n    return bin_string\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    while n!= 0: \n        n, res = divmod(n, 2) \n        if res == 0: \n            res = '0'\n    return res \n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = \"\"\n    while(n>0):\n        n, remainder = divmod(n, 2)\n        binary_number = str(remainder) + binary_number\n    return binary_number\n    \n",
        "num_ids": 54
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    a = format(n, 'b').zfill(256)\n    print(a)\n    return a\n",
        "num_ids": 28
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, 'b').zfill(32)\n",
        "num_ids": 17
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n))[2:]\n",
        "num_ids": 14
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # A more intuitive representation can be given as the string representation of the number \n    # with leading zeros\n    \n    # The base case\n    if n < 0: \n        return \"0\" + str(abs(n)) \n    \n    # The recursive case\n    else: \n        return str(bin(abs(n)))[2:] ",
        "num_ids": 86
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start = 2\n    end = int(num/2)\n    \n    while True:\n        if num % start == 0:\n            num = int(num/start)\n            start += 1\n        elif num % start == num % end == 0:\n            num = int(num/end)\n            end += 1\n        elif num % start == num % end == num % end == num % end:\n            break\n    \n    return num\n",
        "num_ids": 106
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while num:\n        num //= 10\n        num = int(str(num)[::-1])\n",
        "num_ids": 27
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i=0\n    p=1\n    for i in range(int(num/2)+1,int(num/2)+1,1):\n        if i<int(num/2)+1:\n            if(i+1<int(num/2)+1 and i+2<int(num/2)+1):\n                p=i+1\n                break\n            if(i+1<int(num/2)+1):\n                p=i+1\n                break\n        if(i+2<int(num/2)+1):\n            p=i+2\n            break\n    return p\n    \ndef smallest_palindrome(num):\n    '''\n    Write a function to find the smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n=num+1\n    while(n>=2):\n        n=next_smallest_palindrome(n)\n    return n\n    \ndef palindrome_list(n):\n    '''\n    Find a palindrome using a sorted list of numbers.\n    '''\n    # Return a palindrome list, sorted by number, with any numbers < 0 being swapped.\n    l=[]\n    for i in range(0,n):\n        l.append(i)\n    l.sort()\n    for i in range(n-1, -1, -1):\n        if (l[i]<0):\n            l[i]=l[i]+n\n    return l\n    \ndef palindrome_list_from_integer(n):\n    '''\n    Find a palindrome using a sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Return a palindrome list, sorted by number, with any numbers < 0 being swapped.\n    l=[]\n    for i in range(0,n):\n        l.append(i)\n    l.sort()\n    for i in range(n-1, -1, -1):\n        if (l[i]<0):\n            l[i]=l[i]+n\n    return l\n    \ndef palindrome_from_integer(n):\n    '''\n    Find a palindrome using a sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Return a palindrome list, sorted by number, with any numbers < 0 being swapped.\n    l=[]\n    for i in range(0,n):\n        l.append(i)\n    l.sort()\n    for i in range(n-1, -1, -1):\n        if (l[i]<0):\n            l[i]=l[i]+n\n    return l\n    \ndef count_palindromes(n):\n    '''\n    Count the number of palindromes of a given integer n.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_string(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_string(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_string_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_string_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_string_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_string_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j)\n    return count\n    \ndef count_palindromes_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(n):\n    '''\n    Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    '''\n    # Count the number of palindromes of a given integer n using the sorted list of numbers, assuming that the integer numbers are represented as positive integers.\n    count=0\n    for i in range(0,n):\n        j=palindrome_list_from_integer_to_integer_to_integer_to_integer_to_integer_to_integer(i)\n        count+=len(j",
        "num_ids": 94
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(num)\n    i, j, p = 1, n - 1, 0\n    while i < j:\n        if num[i] > num[j]:\n            if num[i] < num[j]:\n                p = i\n                i += 1\n            else:\n                p = j\n                j -= 1\n        else:\n            i += 1\n            j -= 1\n    return num[p + 1 : j + 1]\n",
        "num_ids": 107
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while 1:\n        if num%2 == 0:\n            num = num/2\n            if num == 1:\n                return num\n        elif num%2 == 1:\n            num = num/2\n            if num == 3:\n                return num\n        else:\n            return num+1\n",
        "num_ids": 72
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    number_list = []\n    #print(sys.getsizeof(number_list))\n",
        "num_ids": 24
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_test(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_3(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_4(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_5(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_6(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_7(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_8(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_9(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_10(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_11(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n    if answer * answer < num:\n        return answer\n    else:\n        return answer + 1\ndef next_smallest_palindrome_without_m_fib_test_12(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    m = 10 ** 9 + 1\n    answer = m\n    for i in range(1, m + 1):\n        answer = min(answer, i*i + 1)\n        if num % i == 0:\n            break\n",
        "num_ids": 55
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0 or num == 1:\n        return num\n    else:\n        for i in range(10):\n            if num % 10 == i or num % 10 == 9:\n                num = num * 10 + i\n                break\n            else:\n                num = num * 10 + i + 1\n                break\n        return num\n    \ndef next_palindrome(num):\n    '''\n    Write a function that returns the next palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0 or num == 1:\n        return num\n    else:\n        for i in range(10):\n            if num % 10 == i or num % 10 == 9:\n                num = num * 10 + i\n                break\n            else:\n                num = num * 10 + i + 1\n                break\n        return num\n    \ndef next_palindrome_str(num):\n    '''\n    Write a function that returns the next palindrome of a specified integer, returned as a string.\n    '''\n    if num == 0 or num == 1:\n        return num\n    else:\n        for i in range(10):\n            if num % 10 == i or num % 10 == 9:\n                num = num * 10 + i\n                break\n            else:\n                num = num * 10 + i + 1\n                break\n        return str(num)\n",
        "num_ids": 82
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = num\n    for i in range(num, 0, -1):\n        if is_palindrome(i) and is_palindrome(i-1):\n            return i\n        elif is_palindrome(i) and not is_palindrome(i-1):\n            return i\n        elif is_palindrome(i) and is_palindrome(i+1):\n            return i\n        elif is_palindrome(i) and not is_palindrome(i+1):\n            return i\n    \n",
        "num_ids": 133
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    return arr[l-k",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[(k-1)+1]\n",
        "num_ids": 14
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # find the index of the element\n    # remove it from the array, return it\n    def remove_index(arr, index):\n        # make sure it's not empty\n        if len(arr) == 0:\n            return -1\n        if index < 0 or index >= len(arr):\n            return -1\n        # if index is odd, the index is the right most element, remove it\n        if index % 2:\n            arr.pop(index)\n            return remove_index(arr, index)\n        # if index is even, the index is the left most element, remove it\n        elif index % 2:\n            arr.pop(index)\n            return remove_index(arr, index - 1)\n        # if index is 0, the index is the middle element, remove it\n        else:\n            return arr.pop(index - 1)\n    \n    return remove_index(arr, k)\n",
        "num_ids": 211
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if (k >= len(arr)):\n        return -1\n    else:\n        return arr[k-1]\n",
        "num_ids": 31
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Base case\n    if k == 0:\n        return arr[k]\n    # If k is 0, return -1\n    elif k == 1:\n        return -1\n    # Initialize first index to 0\n    first = 0\n    # Iterate through array\n    for i in range(k):\n        # Index to remove\n        index = i\n        # Recursive call\n        # Update the index if k is greater than index\n        while index < len(arr) and arr[index] < arr[first]:\n            index += 1\n        # Store the index\n        arr[index] = arr[first]\n        # Set the index to the current index\n        arr[first] = arr[index]\n        # Set the current index to the next index\n        first = index\n    # Set last index to -1\n    arr[first] = -1\n    # Return first index\n    return arr[first]\n",
        "num_ids": 213
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[len(arr)//2]\n",
        "num_ids": 51
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #Your code here\n    return arr[k-1]",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(len(arr)-1):\n        if k == arr[i]:\n            return i\n        else:\n            return -1\n",
        "num_ids": 37
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k",
        "num_ids": 7
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    new_word = \"\"\n    for char in word:\n        if char.isupper():\n            new_word += char.lower()\n        else:\n            new_word += char.upper()\n    return new_word\n",
        "num_ids": 56
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([c.capitalize() for c in word.split('_')])\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #TODO: Write your code here\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    mylist = word.split('_')\n    camel_word = ''\n    for x in range(0,len(mylist)):\n        if x == 0:\n            camel_word = mylist[x] + '_'\n        else:\n            if mylist[x] == '_':\n                camel_word = camel_word + '_'\n            else:\n                camel_word = camel_word + mylist[x]\n    return camel_word\n",
        "num_ids": 115
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = ''\n    for c in word:\n        if c.isupper():\n            s += c.lower()\n        elif c.islower():\n            s += c.upper()\n        else:\n            s += c\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = ''\n    for i in range(0, len(word)):\n        if word[i] == '_':\n            new_word += word[i].lower()\n        elif word[i] =='':\n            new_word += word[i].upper()\n        else:\n            new_word += word[i].lower()\n    return new_word\n",
        "num_ids": 91
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new_word = word.title()\n    if new_word[0] == \" \":\n        new_word = new_word[1:]\n    if new_word[-1] == \" \":\n        new_word = new_word[:-1]\n    return new_word\n",
        "num_ids": 70
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isalpha() == True:\n        return word\n    else:\n        return word.lower()\n",
        "num_ids": 28
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('-', '_').lower()\n",
        "num_ids": 16
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_case = []\n    if word.isupper():\n        snake_case = [\"_\"+word.lower()]\n    else:\n        snake_case = [word.lower()]\n    if word.islower():\n        snake_case = [word.upper()]\n    elif word.isupper():\n        snake_case = [word.capitalize()]\n    elif word.islower() and word.isupper():\n        snake_case = [\"_\"+word.lower()+word.upper()]\n    elif word.isupper():\n        snake_case = [word.capitalize()]\n    elif word.islower() and word.isupper():\n        snake_case = [\"_\"+word.lower()+word.upper()]\n    elif word.isupper():\n        snake_case = [word.upper()]\n    elif word.islower():\n        snake_case = [word.capitalize()]\n    return \"\".join(snake_case)\n",
        "num_ids": 247
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from collections import deque \n",
        "num_ids": 10
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s=m\n    if (m-n)%2==1:\n        s=s+n\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base Case:\n    if m < 1:\n        return 0\n    # Base Case:\n    if n <= m:\n        return 1\n    # If number is even:\n    if n % 2 == 0:\n        # Eulerian number:\n        a = 0\n        b = 1\n        for i in range(n//2):\n            a += 2*b\n            b += 2*b\n            if n - i > 0:\n                a += 1\n        # Recursive case:\n        return (a%m) + eulerian_num(n-1, m)\n    # If number is odd:\n    else:\n        # Eulerian number:\n        a = 0\n        b = 1\n        for i in range(n//2):\n            a += 1*b\n            b += 1*b\n            if n - i > 0:\n                a += 2*b\n        # Recursive case:\n        return (a%m) + eulerian_num(n-1, m)\n",
        "num_ids": 237
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # if m > n:\n    #     return 0\n    \n    # d = [1] * n\n    # e = [0] * (n-1)\n    # a = [0] * (n-1)\n    # f = [0] * n\n    \n    # for i in range(1, n):\n    #     f[i] = d[i-1] + e[i-1]\n    #     a[i] = f[i] % m\n    #     d[i] = (d[i-1] + e[i-1]) % m\n    #     e[i] = (e[i-1] + d[i-1] - a[i-1] - f[i-1]) % m\n    #     # print(f[i], d[i-1], a[i-1])\n    # return f[n-1]\n    \n    \n    # d = [1] * n\n    # a = [0] * n\n    # e = [0] * (n-1)\n    # for i in range(1, n):\n    #     d[i] = (d[i-1] + e[i-1] + e[i]) % m\n    #     a[i] = (d[i] - e[i-1] - a[i-1]) % m\n    #     e[i] = (e[i-1] + d[i-1] - a[i-1] - f[i-1]) % m\n    #     # print(d[i], e[i], a[i], f[i])\n    # return d[n-1]\n",
        "num_ids": 396
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    Eulerian_number_a = 0\n    if n == m:\n        return Eulerian_number_a\n    for i in range(n):\n        if m%2 == 0:\n            if (i+1)%2 == 0:\n                Eulerian_number_a = Eulerian_number_a + pow(m, i)\n            else:\n                Eulerian_number_a = Eulerian_number_a + pow(m, i+1)\n        else:\n            if (i+1)%2 == 1:\n                Eulerian_number_a = Eulerian_number_a + pow(m, i)\n            else:\n                Eulerian_number_a = Eulerian_number_a + pow(m, i+1)\n    return Eulerian_number_a\n",
        "num_ids": 196
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_num = []\n    k = m + 1\n    while True:\n        for i in range(k):\n            if k - i in n or n[k - i]!= m:\n                return euler_num\n            else:\n                k = k - i\n",
        "num_ids": 68
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    s = n # number of vertices\n    p = m # number of edges\n    edge_map = dict() # dictionary of vertices and edges\n",
        "num_ids": 36
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    elif n < m:\n        return eulerian_num(m, n)\n    elif n % 2 == 0:\n        return n * eulerian_num(m, n // 2)\n    else:\n        return n * eulerian_num(m, n // 2) + 1\n    pass\n",
        "num_ids": 87
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def reverse(num): \n        num_str = str(num) \n        return int(num_str[::-1]) \n",
        "num_ids": 35
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    Eulerian = 2 * n - m \n    return Eulerian \n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] < input_list[j]:\n                temp = input_list[i]\n                input_list[i] = input_list[j]\n                input_list[j] = temp\n    return input_list\n",
        "num_ids": 91
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 1:\n        return input_list\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp_list = []\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if len(str(input_list[i][j])) > 1:\n                temp_list.append(str(input_list[i][j]))\n            else:\n                temp_list.append(str(input_list[i][j]))\n    return temp_list\n",
        "num_ids": 106
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = list()\n    for sublist in input_list:\n        output.append(sublist)\n    output.sort(key=str.casefold)\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_by_starting_with(input_list, sublist_list):\n        '''\n        Input a list of sublists and a list of strings.\n        Assume all sublists in the list have the same starting letter.\n        Return a sorted sublist of the lists.\n        '''\n        return sorted(input_list, key=lambda sublist: sublist[0].startswith(sublist_list[0]))\n",
        "num_ids": 34
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(input_list)\n    for i in range(length):\n        for j in range(length-1):\n            if(input_list[j][i]>input_list[j+1][i]):\n                input_list[j],input_list[j+1] = input_list[j+1],input_list[j]\n    return input_list\n",
        "num_ids": 93
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    out_list = []\n    for i in range(len(input_list)):\n        out_list.append(input_list[i])\n    out_list.sort()\n    return out_list\n",
        "num_ids": 51
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = len(input_list)\n    if l % 2 == 0: # if even number of lists, swap first and last\n        input_list = [input_list[l//2], input_list[l//2 - 1]]\n",
        "num_ids": 57
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0,len(input_list[0])):\n        for j in range(0,len(input_list)):\n            if input_list[j][i] == '.':\n                continue\n            elif input_list[j][i] == '-':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '+':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '$':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '%':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '&':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '|':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '~':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '^':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '&':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == ']':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '}':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '*':\n                input_list[j][i] = '*'\n            elif input_list[j][i] == '.':\n                input_list[j][i] = '.'\n            else:\n                input_list[j][i] = input_list[j][i][0]\n                continue\n    for i in range(0,len(input_list[0])):\n        if input_list[0][i] == '.':\n            continue\n        elif input_list[0][i] == '-':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '+':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '$':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '%':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '&':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '|':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '~':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '^':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '&':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == ']':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '}':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '*':\n            input_list[0][i] = '*'\n        elif input_list[0][i] == '.':\n            input_list[0][i] = '.'\n        else:\n            input_list[0][i] = input_list[0][i][0]\n    return input_list\n",
        "num_ids": 927
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for x in lst:\n        if x:\n            counter += 1\n    return counter\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # YOUR CODE HERE\n    if len(lst)==0:\n        return 0\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return count(lst[1:]) + 1\n",
        "num_ids": 59
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] == True:\n            result += 1\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res=0\n    for i in lst:\n        if(i==True):\n            res+=1\n    return res\n    pass\ndef count2(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res=0\n    for i in lst:\n        if(i==False):\n            res+=1\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    for i in lst:\n        if i == True:\n            print(\"1\", end = \" \")\n        else:\n            print(\"0\", end = \" \")\n    print()\n    \ndef main():\n    print(\"The count function: \")\n    print(\"\\n\")\n    lst = list(map(int, input().split()))\n    count(lst)\n    print(\"\\n\")\n    \nmain()\n",
        "num_ids": 105
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Using a list comprehension\n    return len([i for i in lst if i])\n",
        "num_ids": 23
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    s=0\n    for i in lst:\n        if i:\n            s+=1\n    return s\n    \ndef loop(lst):\n    '''\n    Write a python function to do a nested for loop.\n    '''\n    n=len(lst)\n    for i in range(n):\n        for j in range(n-i-1):\n            print(lst[j],end=\" \")\n        print(lst[i])\n        \ndef main():\n    lst=[1,2,3,4,5,6]\n    print(count(lst))\n    print(count(lst))\n    print(loop(lst))\n    \nif __name__==\"__main__\":\n    main(",
        "num_ids": 121
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    i = 0\n    while i < len(test_tup):\n        test_list.append(test_tup[i][0])\n        i = i + 1\n",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # test_list = [1, 2, 3, 4, 5]\n    # test_tup = (1, 2, 3, 4, 5)\n    \n    # return test_list.extend(test_tup)\n    \n    # return test_list.append(test_tup)\n    \n    # return test_list.extend(test_tup)\n    \n    # print(test_list)\n    # return test_list.append(test_tup)\n    \n    return test_list.extend(test_tup)\n    \n    # return test_list.extend(test_tup)\n",
        "num_ids": 155
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tuple = tuple(test_tup)\n    test_list.append(new_tuple)\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #append the lists to the tuplist\n    for i in range(len(test_list)):\n        tup = (test_tup[i][0], test_list[i])\n        test_tup.append(tup)\n    return test_tup\n",
        "num_ids": 67
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    test_tup.append(tup)\n    return test_list, test_tup\n",
        "num_ids": 36
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n    \ndef delete_list(test_list, test_tup):\n    '''\n    Write a function that takes in a list of test tuples, and a test tuple.\n    '''\n    test_list.remove(test_tup)\n    return test_list\n    \ndef extend_list(list, test_tup):\n    '''\n    Write a function that takes a list and a tuple, and returns a new \n    list with the elements of the given tuple and the elements of the\n    list appended to the new list. \n    '''\n    new_list = list\n    new_list.append(test_tup)\n    return new_list\n    \ndef get_int(test_str):\n    '''\n    Return the integer value of a given test tuple.\n    '''\n    return int(test_str[0])\n    \ndef get_str(test_str):\n    '''\n    Return the string value of a given test tuple.\n    '''\n    return test_str[1]\n    \ndef set_test_tuple(test_tup, test_str):\n    '''\n    Write a function that takes a tuple of test tuples and a test string.\n    '''\n    test_tup[0] = get_int(test_str[0])\n    test_tup[1] = get_str(test_str[1])\n    \ndef get_sum(test_tup):\n    '''\n    Return the sum of the numbers in the given tuple.\n    '''\n    return int(test_tup[0]) + int(test_tup[1])\n    \ndef test_sum(test_tup, test_list):\n    '''\n    Write a function that takes a tuple of test tuples and a list of test\n    tuples and returns a new list, containing the total of the numbers in\n    the given list.\n    '''\n    new_list = []\n    for test in test_list:\n        new_list.append(get_sum(test))\n    return new_list\n    \ndef test_max(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns the tuple \n    that has the largest value in the list.\n    '''\n    max_test_tup = 0\n    for test in test_list:\n        if get_sum(test) > max_test_tup:\n            max_test_tup = get_sum(test)\n    return max_test_tup\n    \ndef test_max_list(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns the \n    tuple that has the largest value in the list.\n    '''\n    max_list = []\n    for test in test_list:\n        if test_sum(test) > test_max(max_list):\n            max_list = test\n    return max_list\n    \ndef test_max_tuple(test_tup):\n    '''\n    Write a function that takes a tuple of test tuples and returns the tuple \n    that has the largest value in the given list.\n    '''\n    max_tup = 0\n    for test in test_tup:\n        if get_sum(test) > get_sum(max_tup):\n            max_tup = test\n    return max_tup\n    \ndef test_list_len(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns the length of\n    the list.\n    '''\n    return len(test_list)\n    \ndef test_str_len(test_str):\n    '''\n    Write a function that takes a string of test tuples and returns the \n    length of the string.\n    '''\n    return len(test_str)\n    \ndef test_max_len(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns the length \n    of the largest string.\n    '''\n    max_len = 0\n    for test in test_list:\n        if test_str_len(test) > max_len:\n            max_len = test_str_len(test)\n    return max_len\n    \ndef test_str_min(test_str):\n    '''\n    Write a function that takes a string of test tuples and returns the \n    minimum string length.\n    '''\n    return len(test_str)\n    \ndef test_min_len(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns the \n    minimum string length.\n    '''\n    min_len = 0\n    for test in test_list:\n        if test_str_min(test) < min_len:\n            min_len = test_str_min(test)\n    return min_len\n    \ndef test_max_min(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns the tuple \n    that has the minimum value in the list.\n    '''\n    min_tup = ()\n    for test in test_list:\n        if get_sum(test) < get_sum(min_tup):\n            min_tup = test\n    return min_tup\n    \ndef test_max_tuple(test_tup):\n    '''\n    Write a function that takes a tuple of test tuples and returns the tuple \n    that has the minimum value in the given list.\n    '''\n    min_tup = ()\n    for test in test_tup:\n        if get_sum(test) < get_sum(min_tup):\n            min_tup = test\n    return min_tup\n    \ndef test_list_str(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns a new \n    list of strings.\n    '''\n    new_list = []\n    for test in test_list:\n        new_list.append(get_str(test))\n    return new_list\n    \ndef test_str_str(test_str):\n    '''\n    Write a function that takes a string of test tuples and returns a new \n    string of strings.\n    '''\n    new_str = ''\n    for test in test_str:\n        new_str += test +''\n    return new_str\n    \ndef test_max_str(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns a new \n    list of strings.\n    '''\n    max_str = ''\n    for test in test_list:\n        max_str += test_str_str(test) +''\n    return max_str\n    \ndef test_min_str(test_list):\n    '''\n    Write a function that takes a list of test tuples and returns a new \n    string of strings.\n    '''\n    min_str = ''\n    for test in test_list:\n        min_str += test_str_str(test) +''\n    return min_str\n    \ndef test_sum_str(test_tup):\n    '''\n    Write a function that takes a tuple of test tuples and returns a new \n    string of strings.\n    '''\n    sum_str = ''\n    for test in test_tup:\n        sum_str += test_str_str(test) +''\n    return sum_str\n    \ndef get_new_tuple(test_tup, test_list):\n    '''\n    Write a function that takes a tuple of test tuples and returns a new \n    tuple.\n    '''\n    new_tup = ()\n    for test in test_list:\n        new_tup += test_tup\n    return new_tup\n    \ndef test_tuple_mul(test_tup, test_list):\n    '''\n    Write a function that takes a tuple of test tuples and returns a new \n    tuple of strings.\n    '''\n    new_tup = ()\n    for test in test_list:\n        new_tup += test_tup * 2\n    return new_tup\n    \ndef test_tuple_div(test_tup, test_list):\n    '''\n    Write a function that take",
        "num_ids": 8
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list\n",
        "num_ids": 18
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    ''' Write your code here '''\n    tup = tuple()\n    for item in test_tup:\n        tup = tup + (item, )\n    \n    test_list.append(tup)\n    return test_list\n",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n",
        "num_ids": 13
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a = []\n    b = []\n    c = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) or j < len(num2) or k < len(num3):\n        if i < len(num1) and j < len(num2) and k < len(num3):\n            if num1[i] > num2[j] and num1[i] > num3[k]:\n                a.append(num1[i])\n                i = i + 1\n                j = j + 1\n                k = k + 1\n            elif num2[j] > num1[i] and num2[j] > num3[k]:\n                a.append(num2[j])\n                j = j + 1\n                k = k + 1\n            else:\n                a.append(num3[k])\n                k = k + 1\n                j = j + 1\n        else:\n            a.append(num1[i])\n            i = i + 1\n    return a\n",
        "num_ids": 249
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return num1+num2+num3\n",
        "num_ids": 13
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    arr=[]\n    arr.extend(num1)\n    arr.extend(num2)\n    arr.extend(num3)\n    heapq.heapify(arr)\n    for i in range(len(arr)-1):\n        for j in range(i,len(arr)):\n            if arr[i]<arr[j]:\n                arr[i],arr[j]=arr[j],arr[i]\n    return arr\n",
        "num_ids": 110
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    heapq.heapify(sorted_list)\n    i=0\n    j=0\n    k=0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if(num1[i]<num2[j] and num2[j]<num3[k]):\n            heapq.heappush(sorted_list, num1[i])\n            i+=1\n        elif(num1[i]>num2[j] and num2[j]>num3[k]):\n            heapq.heappush(sorted_list, num2[j])\n            j+=1\n        elif(num1[i]>num2[j] and num2[j]>num3[k]):\n            heapq.heappush(sorted_list, num3[k])\n            k+=1\n    while(i<len(num1)):\n        heapq.heappush(sorted_list, num1[i])\n        i+=1\n    while(j<len(num2)):\n        heapq.heappush(sorted_list, num2[j])\n        j+=1\n    while(k<len(num3)):\n        heapq.heappush(sorted_list, num3[k])\n        k+=1\n    return sorted_list\n    \n",
        "num_ids": 348
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    output_list = []\n    n1 = len(num1)\n    n2 = len(num2)\n    n3 = len(num3)\n",
        "num_ids": 41
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, (num1[0],num1[1]))\n    heapq.heappush(heap, (num2[0],num2[1]))\n    heapq.heappush(heap, (num3[0],num3[1]))\n",
        "num_ids": 83
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list of lists\n    data1 = []\n    data2 = []\n    data3 = []\n",
        "num_ids": 28
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list1 = []\n    sorted_list2 = []\n    sorted_list3 = []\n    sorted_list = sorted_list1+sorted_list2+sorted_list3\n    sorted_list.sort()\n    return sorted_list\n",
        "num_ids": 67
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a=num1.copy()\n    b=num2.copy()\n    c=num3.copy()\n    if len(a)==0 or len(b)==0 or len(c)==0:\n        return a\n    for i in range(len(a)):\n        if a[i]<b[i]:\n            a[i]=b[i]\n        else:\n            a[i]=a[i]\n        if c[i]<a[i]:\n            c[i]=a[i]\n        else:\n            c[i]=c[i]\n    return a+c+b\n    \ndef merge_sorted_list_optimized(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1)==0 or len(num2)==0 or len(num3)==0:\n        return num1+num2+num3\n    #get the minimum value in a list\n    minimum=min(num1,num2,num3)\n    #extract the values of that element\n    a=num1[:len(num1)-len(num1)%minimum]\n    b=num2[:len(num2)-len(num2)%minimum]\n    c=num3[:len(num3)-len(num3)%minimum]\n    #merge the elements\n    return merge_sorted_list(a,b,c)\n",
        "num_ids": 161
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            result.append(num1.pop(0))\n        elif num2[0] < num3[0] and num2[0] < num1[0]:\n            result.append(num2.pop(0))\n        else:\n            result.append(num3.pop(0))\n    result += num1 if num1 else num2\n    result += num3 if num3 else num2\n    return result\n    \ndef merge_sorted_lists(num1,num2,num3):\n    '''\n    Write a function that merges three sorted lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    # The main idea is to merge the three smallest lists\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(num1,num2.pop(0))\n        elif num2[0] < num3[0] and num2[0] < num1[0]:\n            heapq.heappush(num2,num3.pop(0))\n        else:\n            heapq.heappush(num3,num1.pop(0))\n            \n    # Now we check whether we need to merge the largest list\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(num1,num2.pop(0))\n        elif num2[0] < num3[0] and num2[0] < num1[0]:\n            heapq.heappush(num2,num3.pop(0))\n        else:\n            heapq.heappush(num3,num1.pop(0))\n            \n    while num1:\n        heapq.heappush(num1,num1.pop(0))\n        \n    while num2:\n        heapq.heappush(num2,num2.pop(0))\n        \n    while num3:\n        heapq.heappush(num3,num3.pop(0))\n        \n    # Now we check whether we need to merge the smallest list\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            heapq.heappush(num1,num2.pop(0))\n        elif num2[0] < num3[0] and num2[0] < num1[0]:\n            heapq.heappush(num2,num3.pop(0))\n        else:\n            heapq.heappush(num3,num1.pop(0))\n            \n    while num1:\n        heapq.heappush(num1,num1.pop(0))\n        \n    while num2:\n        heapq.heappush(num2,num2.pop(0))\n        \n    while num3:\n        heapq.heappush(num3,num3.pop(0))\n        \n    return result\n",
        "num_ids": 647
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(n):\n        temp=s[i]\n        if(temp=='1'):\n            count+=1\n        else:\n            count+=1\n            temp='0'\n    if(count%2==0):\n        return count\n    else:\n        return n-count\n",
        "num_ids": 78
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    tot=0\n    for i in range(len(s)):\n        if(s[i]=='1'):\n            tot+=2\n        elif(s[i]=='0'):\n            tot+=1\n    return tot",
        "num_ids": 62
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if (s[-1] == '1'):\n        return odd_Part(s,n-1)\n    else:\n        return odd_Part(s[::-1],n)\n",
        "num_ids": 48
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Declare a variable\n    result = 0\n    # Loop through the number of times\n    for i in range(n): \n        # Increment the result\n        result += 1\n    # Return the result\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # base case\n    if (s[0] == '0' and n == 0): \n        return 1\n    \n    if (n % 2 == 1): \n        return odd_Equivalent(s[1:], n//2) + odd_Equivalent(s[:1], n//2) \n    \n    else: \n        return odd_Equivalent(s[1:], n//2) + odd_Equivalent(s[:1], n//2) + odd_Equivalent(s[1:], n//2)\n        \n        ",
        "num_ids": 134
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize an empty string\n    result = ''\n",
        "num_ids": 14
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n): \n        count = count + s.count(1) \n    return count\n",
        "num_ids": 34
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    n=int(n)\n    if n == 0:\n        return 0\n    else:\n        return odd_Equivalent(s,n-1) + odd_Equivalent(s,n-2)\n    \nif __name__ == '__main__':\n    for i in range(int(input())):\n        s = input()\n        n = int(input())\n        print(odd_Equivalent(s,n))",
        "num_ids": 104
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    try:\n        n=int(n)\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        if n%2==0:\n            return 1\n        if n%2==1:\n            return 2\n    except Exception:\n        return \"Please enter a valid integer\"\n    \ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    try:\n        n=int(n)\n        if n==0:\n            return 0\n        if n==1:\n            return 1\n        if n%2==0:\n            return 1\n        if n%2==1:\n            return 2\n    except Exception:\n        return \"Please enter a valid integer\"\n    \ndef get_rotations(str):\n    '''\n    Write a python function to get the number of rotations of a given string.\n    '''\n    if len(str)==1:\n        return 1\n    if str[-1]==str[-2]:\n        return get_rotations(str[:-1])+1\n    if str[-2]==str[-3]:\n        return get_rotations(str[:-2])+2\n    if str[-3]==str[-4]:\n        return get_rotations(str[:-3])+3\n    if str[-4]==str[-5]:\n        return get_rotations(str[:-4])+4\n    return 0\ndef get_rotations_list(str):\n    '''\n    Write a python function to get the number of rotations of a given string.\n    '''\n    if len(str)==1:\n        return 0\n    if str[-1]==str[-2]:\n        return get_rotations(str[:-1])+1\n    if str[-2]==str[-3]:\n        return get_rotations(str[:-2])+2\n    if str[-3]==str[-4]:\n        return get_rotations(str[:-3])+3\n    if str[-4]==str[-5]:\n        return get_rotations(str[:-4])+4\n    return 0\ndef get_rotations_list_2(str):\n    '''\n    Write a python function to get the number of rotations of a given string.\n    '''\n    if len(str)==1:\n        return 0\n    if str[-1]==str[-2]:\n        return get_rotations(str[:-1])+1\n    if str[-2]==str[-3]:\n        return get_rotations(str[:-2])+2\n    if str[-3]==str[-4]:\n        return get_rotations(str[:-3])+3\n    if str[-4]==str[-5]:\n        return get_rotations(str[:-4])+4\n    return 0\ndef get_rotations_list_3(str):\n    '''\n    Write a python function to get the number of rotations of a given string.\n    '''\n    if len(str)==1:\n        return 0\n    if str[-1]==str[-2]:\n        return get_rotations(str[:-1])+1\n    if str[-2]==str[-3]:\n        return get_rotations(str[:-2])+2\n    if str[-3]==str[-4]:\n        return get_rotations(str[:-3])+3\n    if str[-4]==str[-5]:\n        return get_rotations(str[:-4])+4\n    return 0\ndef is_palindrome(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_2(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    return False\n    \ndef is_palindrome_3(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    return False\n    \ndef is_palindrome_4(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    if n == 1:\n        return 1\n    return odd_Equivalent(s, n - 1) + odd_Equivalent(s, n - 2)\n",
        "num_ids": 62
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*(set(map(set, nestedlist)) for nestedlist in zip(*nestedlist)))\n",
        "num_ids": 30
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) <= 0:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        list_common = list(set(nestedlist[0]).intersection(*nestedlist[1:]))\n        return list_common\n",
        "num_ids": 74
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        result += i\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_elements:\n                common_elements.append(j)\n    return common_elements\n",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list=[]\n    for element in nestedlist:\n        if len(element)>1:\n            common=set(element) & set(nestedlist)\n            common_list.append(common)\n        else:\n            common_list.append(element)\n    return common_list\n",
        "num_ids": 72
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    if not nestedlist:\n        return None\n    \n    in_nestedlist = False\n    for lst in nestedlist:\n        if lst:\n            in_nestedlist = True\n        \n    if in_nestedlist:\n        common_elements = set(nestedlist[0])\n        for i in range(1, len(nestedlist)):\n            common_elements = common_elements.intersection(set(nestedlist[i]))\n        \n    return common_elements\n    \n    \n    \n    \ndef main():\n    '''\n    Test the functions by making a random list.\n    '''\n    \n    list_of_numbers = [random.randint(1,100) for x in range(10)]\n    \n    for number in list_of_numbers:\n        print('number:', number)\n        print('in_nested_list:', common_in_nested_lists(number))\n        print('in_nested_list_2:', common_in_nested_lists([number]))\n        print()\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 122
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist_string = str(nestedlist)\n    nestedlist_string_reversed = nestedlist_string[::-1]\n    common_elements = []\n    common_elements_reversed = []\n    for i in range(len(nestedlist_string_reversed)):\n        common_elements.append(nestedlist_string[i])\n    for j in range(len(nestedlist_string)):\n        if common_elements[j] == nestedlist_string[j]:\n            common_elements_reversed.append(nestedlist[j])\n    return common_elements_reversed\n",
        "num_ids": 158
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # split list by spaces and remove spaces to get the string \n    list_strings = [str(i).split() for i in nestedlist]\n    list_strings = [i for i in list_strings]\n    # create a set of the strings and remove duplicate elements\n    list_strings = set(list_strings)\n    list_strings.remove('')\n    # find the index of the first element in the set\n    index = list_strings.index(list_strings.pop(0))\n    # return the value as the element\n    return list_strings[index]\n",
        "num_ids": 135
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #print(nestedlist)\n    for nested in nestedlist:\n        print(nested)\n    for index, item in enumerate(nestedlist):\n        #print(index, item)\n        for otheritem in nestedlist:\n            if item == otheritem:\n                print(item, end ='')\n",
        "num_ids": 76
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #first set all elements to list\n    list_of_nested_list = [i for i in nestedlist if type(i) is list]\n    #set all elements to string\n    list_of_nested_list_str = [str(i) for i in list_of_nested_list]\n    #create new list with list_of_nested_list_str\n    new_list = list_of_nested_list_str\n    #set it to boolean variable\n    b = True\n    #loop through all the elements in nested list and check if it is a boolean variable\n    for i in new_list:\n        if not b:\n            break\n        else:\n            for j in new_list:\n                if i == j:\n                    b = False\n    #return the list\n    return b\n",
        "num_ids": 193
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return type(text) == int\n",
        "num_ids": 11
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return not text.isnumeric()\n",
        "num_ids": 12
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if type(text) is not str:\n        raise TypeError(\"Only strings are accepted as input\")\n    for char in text:\n        if not char.isdigit():\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n    \ndef is_odd(num):\n    '''\n    Write a function to check if a number is odd or not.\n    '''\n    return num % 2 == 1\n",
        "num_ids": 10
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # if all the dictionaries are empty\n    if len(list1)==0:\n        return True\n    else:\n        # if any of the dictionaries are not empty\n        for x in range(len(list1)):\n            # if any of the values are not an empty string\n            if list1[x].keys()=={}:\n                # if the values are not empty\n                if list1[x].values()==[]:\n                    # if the keys are not empty\n                    if list1[x].items()==[]:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            else:\n                # if the values are not empty\n                if list1[x].values()==[]:\n                    # if the keys are not empty\n                    if list1[x].keys()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n                else:\n                    # if the keys are not empty\n                    if list1[x].items()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            # if the dictionary is not empty\n            if list1[x].keys()=={}:\n                # if the values are empty\n                if list1[x].values()==[]:\n                    # if the keys are empty\n                    if list1[x].items()==[]:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n            else:\n                # if the values are empty\n                if list1[x].items()==[]:\n                    # if the keys are empty\n                    if list1[x].keys()=={}:\n                        # return false\n                        return False\n                    else:\n                        # return false\n                        return True\n        # if all the dictionaries are empty\n        return True\n",
        "num_ids": 434
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for list in list1:\n        if list:\n            pass\n        else:\n            return False\n    else:\n        return True",
        "num_ids": 33
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > 0:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] is not None:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for each in list1:\n        if len(each) > 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i] == {}:\n            list1[i] = 'NULL'\n    return list1 == []\n",
        "num_ids": 46
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    if list1 is None or len(list1) == 0:\n        empty = False\n        return empty\n    for i in range(len(list1)):\n        for k in list1[i]:\n            if k is None or k == '':\n                empty = False\n    return empty\n",
        "num_ids": 75
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) < 1:\n        raise Exception('Empty')\n    return tuple(map(lambda x: int(x), nums))\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join([str(i) for i in nums]))\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n    x = 0\n    for i in nums:\n        x += i\n    return x\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    num_list = []\n    while i < len(nums):\n        num_list.append(nums[i])\n        i = i + 1\n    return int(''.join(map(str, num_list)))\n",
        "num_ids": 60
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    import sys\n    output = []\n    for num in nums:\n        output.append(int(num))\n    return int(''.join(map(str, output)))\n",
        "num_ids": 43
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert into an integer\n    integer = int(''.join(map(str, nums)))\n    return integer\n",
        "num_ids": 29
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]*(10**i)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    f_list = []\n    for element in test_list:\n        if type(element) == list:\n            for elem in element:\n                if type(elem) == float:\n                    f_list.append(elem)\n        else:\n            if type(element) == float:\n                f_list.append(element)\n    return f_list\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [i for i in test_list if type(i) == type(list(i))]\n    for i in test_list:\n        try:\n            i.append(float(i))\n        except:\n            pass\n    return test_list\n",
        "num_ids": 65
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    # Step 1: Create empty lists to store each element\n    # OOPS: How do you create empty lists in python?\n    list_of_lists = []\n    \n    # Step 2: Go through each element of a list\n    for element in test_list:\n        # Step 3: Append the element of a list to the list of lists\n        list_of_lists.append(element)\n    \n    # Step 4: Return the list of lists of floats\n    return list_of_lists\n",
        "num_ids": 118
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == list:\n                for k in range(len(test_list[i][j])):\n                    test_list[i][j][k] = float(test_list[i][j][k])\n    return test_list\n",
        "num_ids": 97
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if not test_list:\n        return []\n    if len(test_list) < 2:\n        return [test_list]\n    convert_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                convert_list.append(float(element))\n            except ValueError:\n                convert_list.append(element)\n    return convert_list\n",
        "num_ids": 106
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            for k in j:\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(k)\n                except:\n                    pass\n                try:\n                    k = float(",
        "num_ids": 2010
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # the test_list contains all the elements of the lists\n    # the function should return the list\n    # the function should convert all the numbers in the list to floats\n    #\n    # TODO: Complete the function for this exercise\n    #\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 67
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list.split('-')\n    for i in range(len(test_list)):\n        test_list[i] = eval(test_list[i])\n    return test_list\n",
        "num_ids": 53
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        # single_input = input('Input the number of things you want to convert: ')\n        single_input = test_list\n        try:\n            # float_list = []\n            # for input_element in single_input:\n            #     float_input = float(input_element)\n            #     float_list.append(float_input)\n            # return float_list\n            pass\n        except ValueError as e:\n            print('ERROR: Unable to convert {} to float!'.format(test_list))\n            print(e)\n    except TypeError:\n        print('ERROR: Unable to convert {} to float!'.format(test_list))\n        print('Please make sure you are dealing with a list of possible convertible elements.')\n        print('Alternatively, try entering a single value.')\n        # input_value = input('Input the value of {}: '.format(single_input))\n        # try:\n        #     # float_input = float(input_value)\n        #     # float_list.append(float_input)\n        #     pass\n        # except ValueError as e:\n        #     print('ERROR: Unable to convert {} to float!'.format(single_input))\n        #     print(e)\n",
        "num_ids": 291
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    strings = string.split()\n    return strings\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split()\n    return l\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.strip().split(' ')\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    res = [] \n    for c in string.split():\n        res.append(c)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n",
        "num_ids": 14
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result_list = list(string) \n    result_list = [s.strip() for s in result_list] \n    return result_list \n",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for i,x in enumerate(arr):\n        if x in seen:\n            return x\n        if i == len(arr) - 1:\n            return -1\n        seen[x] = i\n    return -1\n",
        "num_ids": 60
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # loop through the array and make the count of each element unique by finding the length of the unique array.\n    # now we can find the index of the element that appears once in the array.\n    # \n    # imagine that a letter occurs once in a word and you want to know the index of this letter,\n    # so the first element has an index of 1, the second one has an index of 2, and so on.\n    # \n    # we could do this by looping through the array, finding the index of each letter, and then checking that\n    # it isn't the same number of times.\n    # \n    # we could do this by using a counter as a stack, to keep track of the occurances of each letter.\n    # however, since the solution of this is O(n) it is much more straightforward to implement.\n    #\n",
        "num_ids": 195
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    search = arr[0]\n",
        "num_ids": 10
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # s = set()\n    # i = 0\n    # while i<len(arr):\n    #     if arr[i] not in s:\n    #         s.add(arr[i])\n    #         if len(s)==1:\n    #             print(arr[i])\n    #             break\n    #         else:\n    #             i+=1\n    #     else:\n    #         i+=1\n    #         break\n    \n    # return s.pop()\n    \n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    def search_once(arr):\n        # Dictionaries\n        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n        \n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    def search_twice(arr):\n        # Dictionaries\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n                cache[e] = 2\n        \n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    def search_three(arr):\n        # Dictionaries\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n                cache[e] = 2\n                cache[e] = 3\n        \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    def search_four(arr):\n        # Dictionaries\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n                cache[e] = 2\n                cache[e] = 3\n                cache[e] = 4\n        \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    def search_five(arr):\n        # Dictionaries\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n                cache[e] = 2\n                cache[e] = 3\n                cache[e] = 4\n                cache[e] = 5\n        \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    def search_six(arr):\n        # Dictionaries\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n                cache[e] = 2\n                cache[e] = 3\n                cache[e] = 4\n                cache[e] = 5\n                cache[e] = 6\n                cache[e] = 7\n        \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    def search_seven(arr):\n        # Dictionaries\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n                cache[e] = 2\n                cache[e] = 3\n                cache[e] = 4\n                cache[e] = 5\n                cache[e] = 6\n                cache[e] = 7\n                cache[e] = 8\n                cache[e] = 9\n                cache[e] = 10\n        \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    def search_eight(arr):\n        # Dictionaries\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        cache = {}\n        \n        # Iterate through each element in the array\n        for i,e in enumerate(arr):\n            # Checks if the element exists in the cache\n            if e in cache:\n                # If so, return the element\n                return e\n            else:\n                # Otherwise, add the element to the cache\n                cache[e] = 1\n                cache[e] = 2\n                cache[e] = 3\n                cache[e] = 4\n                cache[e] = 5\n                cache[e] = 6\n                cache[e] = 7\n                cache[e] = 8\n                cache[e] = 9\n                cache[e] = 10\n                cache[e] = 11\n                cache[e] = 12\n                cache[e] = 13\n                cache[e] = 14\n                cache[e] = 15\n                cache[e] = 16\n                cache[e] = 17\n                cache[e] = 18\n                cache[e] = 19\n                cache[e] = 20\n                cache[e] = 21\n                cache[e] = 22\n                cache[e] = 23\n                cache[e] = 24\n                cache[e] = 25\n                cache[e] = 26\n                cache[e] = 27\n                cache[e] = 28\n                cache[e] = 29\n                cache[e] = 30\n                cache[e] = 31\n                cache[e] = 32\n                cache[e] = 33\n                cache[e] = 34\n                cache[e] = 35\n                cache[e] = 36\n                cache[e] = 37\n                cache[e] = 38\n                cache[e] = 39\n                cache[e] = 40\n                cache[e] = 41\n                cache[e] = 42\n                cache[e] = 43\n                cache[e] = 44\n                cache[e] = 45\n                cache[e] = 46\n                cache[e] = 47\n                cache[e] = 48\n                cache[e] = 49\n                cache[e] = 50\n                cache[e] = 51\n                cache[e] = 52\n                cache[e] = 53\n                cache[e] = 54\n                cache[e] = 55\n                cache[e] = 56\n                cache[e] = 57\n                cache[e] = 58\n                cache[e] = 59\n                cache[e] = 60\n                cache[e] = 61\n                cache[e] = 62\n                cache[e] = 63\n                cache[e] = 64\n                cache[e] = 65\n                cache[e] = 66\n                cache[e] = 67\n                cach",
        "num_ids": 2008
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    x = 0\n    y = len(arr)-1\n    for i in range(len(arr)):\n        if arr[i]!= arr[x]:\n            x += 1\n    print(\"Index of x is :\",x)\n    for i in range(len(arr)):\n        if arr[i] == arr[y]:\n            y -= 1\n        if y < 0:\n            y = y + len(arr)-1\n        if arr[y]!= arr[i]:\n            y -= 1\n    return arr[y]\n",
        "num_ids": 130
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a sorted array of the size of arr\n    sorted_array = sorted(arr)\n",
        "num_ids": 25
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return [i for i in arr if arr.count(i)==1][0]\n",
        "num_ids": 23
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    \n    # remove duplicates from array\n    arr = [arr[i] for i in range(0, len(arr)) if arr[i]!= arr[i - 1]]\n    # sort array\n    arr.sort()\n    for i in range(0, len(arr)):\n        if arr[i] == arr[i - 1]:\n            # remove element\n            del arr[i - 1]\n            # do not delete the element in array if it is the first appearance\n            break\n    return arr[0]\n",
        "num_ids": 141
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start, end = 0, 0\n    while end <= len(arr):\n        mid = (start + end) // 2\n        if mid == len(arr) - 1:\n            return arr[mid]\n        if arr[mid] == arr[mid + 1]:\n            mid += 1\n        elif arr[mid] < arr[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid\n    return arr[start]\n",
        "num_ids": 107
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1]*list1[j][1]\n            if(product > max_product):\n                max_product = product\n    return max_product\n",
        "num_ids": 85
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res = 0\n    if len(list1) == 0:\n        return 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                res += max(list1[i][0] * list1[j][1], list1[i][1] * list1[j][0], list1[i][0] * list1[j][1])\n    return res\n",
        "num_ids": 111
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max_product = max(list1[i] * list1[j], max_product)\n    return max_product\n",
        "num_ids": 70
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) <= 2:\n        return list1[0][0] * list1[1][1]\n    \n    max_product = list1[0][0] * list1[1][1]\n    current_max = list1[0][0] * list1[1][0]\n    for element in list1[1:]:\n        if element[0] > current_max:\n            current_max = element[0]\n        elif element[0] == current_max:\n            current_max = element[0] * element[1]\n    \n    for element in list1:\n        if element[0] > current_max:\n            current_max = element[0]\n        elif element[0] == current_max:\n            current_max = element[0] * element[1]\n    \n    return current_max\n",
        "num_ids": 204
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i][0] > list1[j][0] and list1[j][1] > list1[i][1]:\n                max_product = max(list1[j][0] * list1[i][1], max_product)\n            elif list1[i][1] > list1[j][1] and list1[j][0] > list1[i][0]:\n                max_product = max(list1[j][1] * list1[i][0], max_product)\n            elif list1[i][0] > list1[j][0] and list1[j][1] > list1[i][1]:\n                max_product = max(list1[i][1] * list1[j][0], max_product)\n    return max_product\n",
        "num_ids": 226
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in list1:\n        if max_product == -1:\n            max_product = i\n        elif max_product < i:\n            max_product = i\n    return max_product\n",
        "num_ids": 58
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # TODO: Implement this function\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if list1[i][0] < list1[j][0] and list1[i][1] > list1[j][1]:\n                max_product = max(max_product,list1[i][1]*list1[j][0])\n            elif list1[i][0] > list1[j][0] and list1[i][1] < list1[j][1]:\n                max_product = max(max_product,list1[i][1]*list1[j][1])\n    return max_product\n    # return max(list1)\n",
        "num_ids": 175
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            # check if both numbers are in a tuple\n            if list1[i] < list1[j] or list1[i] > list1[j]:\n                continue\n            else:\n                # calculate product\n                p = list1[i]*list1[j]\n                max_product = max(p,max_product)\n    return max_product\n    ",
        "num_ids": 125
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j and list1[i][0] * list1[j][1] > list1[i][1] * list1[j][0]:\n                max_list.append([list1[i][0], list1[j][0]])\n            elif i == j and list1[i][0] * list1[j][1] == list1[i][1] * list1[j][0]:\n                max_list.append([list1[i][0], list1[j][1]])\n            elif i < j and list1[i][0] * list1[j][0] > list1[i][1] * list1[j][1]:\n                max_list.append([list1[i][1], list1[j][0]])\n            elif i == j and list1[i][0] * list1[j][0] == list1[i][1] * list1[j][1]:\n                max_list.append([list1[i][1], list1[j][1]])\n    return max_list\n",
        "num_ids": 288
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    amicable.append(1)\n    for num in range(1, limit+1):\n        check = []\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                check.append(i)\n                if i in check:\n                    check.remove(i)\n        if len(check) == 0:\n            amicable.append(num)\n    return sum(amicable)\n",
        "num_ids": 113
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = []\n    sum_amicable = 0\n    amicable_number = 0\n    sum_amicable_numbers = 0\n    for i in range(1, limit + 1):\n        if sum_amicable_numbers == i and sum_amicable == i:\n            sum_amicable = 0\n            sum_amicable_numbers += 1\n            amicable_sum.append(i)\n            amicable_number += 1\n            continue\n        if sum_amicable_numbers > i:\n            sum_amicable = sum_amicable + i\n            amicable_sum.append(sum_amicable)\n            sum_amicable_numbers += 1\n            sum_amicable = sum_amicable + i\n            amicable_number += 1\n    amicable_sum.sort()\n    print(amicable_sum)\n    return amicable_sum, amicable_number\n",
        "num_ids": 213
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 0:\n        return None\n    amicable_numbers_sum = []\n    amicable_numbers = []\n    i = 1\n    while i <= limit:\n        if i == 1:\n            pass\n        elif i % 2 == 0:\n            amicable_numbers.append(i)\n        else:\n            n1 = i * i\n            n2 = i * i + 1\n            n3 = i * i + 2\n            if n1 == n2 == n3:\n                amicable_numbers.append(i)\n            elif n1 == n2 or n3 == n1:\n                amicable_numbers.append(n1)\n            else:\n                amicable_numbers.append(n1 + n2 + n3)\n        i += 1\n    return sum(amicable_numbers)\n",
        "num_ids": 201
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    amicable_numbers = list(range(1, limit + 1))\n    amicable_numbers.remove(2)\n    for amicable_number in amicable_numbers:\n        numerator = 2\n        denominator = 1\n        while numerator * numerator!= amicable_number:\n            if denominator == 1:\n                amicable_numbers_sum += amicable_number\n            else:\n                denominator += 1\n            numerator = denominator\n        amicable_numbers_sum += amicable_number\n    return amicable_numbers_sum\n",
        "num_ids": 151
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = sum(filter(lambda x: (limit-x)%2==0, range(1,limit)))\n    return amicable_numbers\n",
        "num_ids": 50
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_numbers = 0\n    amicable_list = []\n    for num in range(1, limit + 1):\n        if num == 1 or num == 2:\n            continue\n        for i in range(1, num):\n            if num % i == 0:\n                break\n        else:\n            amicable_list.append(num)\n    for amicable in amicable_list:\n        for num in range(1, amicable + 1):\n            if num % amicable == 0:\n                break\n        else:\n            sum_of_numbers += amicable\n    return sum_of_numbers\n",
        "num_ids": 147
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for n in range(1, limit + 1):\n        if is_amicable(n):\n            sum = sum + n\n",
        "num_ids": 37
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    def amicable_numbers():\n        \n        for i in range(1, limit + 1):\n            number = 0\n            for j in range(1, i + 1):\n                number += j\n                if (i % j == 0) and (i!= j):\n                    amicable.append(i)\n    amicable_numbers()\n    return sum(amicable)",
        "num_ids": 96
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1,limit):\n        if is_amicable(i):\n            amicable_sum += i\n    \n    return amicable_sum\n",
        "num_ids": 50
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n",
        "num_ids": 11
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a[0]==b[0]:\n        return 0\n    if a[1]==b[1]:\n        return math.degrees(math.atan(b[0]/a[1]))\n    if a[0]>b[0]:\n        return math.degrees(math.atan(b[0]/a[1]))\n    if a[1]>b[1]:\n        return math.degrees(math.atan(b[1]/a[0]))\n    if a[0]==b[0]:\n        if a[1]<b[1]:\n            return math.degrees(math.atan(b[1]/a[0]))\n        else:\n            return math.degrees(math.atan(a[1]/b[1]))\n",
        "num_ids": 192
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #return cmath.acos((b**2 + a**2 - cmath.sqrt(b**2 + a**2))/(2*b*a))\n    return (b**2 + a**2 - cmath.sqrt(b**2 + a**2))/(2*b*a)\n",
        "num_ids": 74
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        a = float(a)\n        b = float(b)\n        return acos(complex(a,b).real)\n    except Exception as e:\n        return 'Wrong arguments'\n",
        "num_ids": 51
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    m1=a.real**2+a.imag**2\n    m2=b.real**2+b.imag**2\n    return acos(m1/m2)*180/pi\n",
        "num_ids": 49
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print('Angle of a complex number:', cmath.angle(a,b))\n",
        "num_ids": 23
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.acos(cmath.divide(b,a))*2*180/3.14159)\n",
        "num_ids": 32
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #Convert to radians\n    angle=a.real*2*pi+b.imag*2*pi\n    return angle\n",
        "num_ids": 33
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        a = float(a)\n        b = float(b)\n    except:\n        return 'Error'\n    return cmath.phase(a) + cmath.phase(b)\n    \ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    try:\n        a = float(a)\n    except:\n        return 'Error'\n    return cmath.phase(a)\n",
        "num_ids": 34
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # print(a,b)\n    if a==0:\n        return 0\n    if b==0:\n        return (cmath.asin(a)/cmath.pi)\n    if a==b:\n        return cmath.acos(a)\n    if a==0:\n        return cmath.acos(b/a)\n    if b==0:\n        return cmath.acos((a/b))\n    if a==0:\n        return cmath.asin((a/b))\n    if b==0:\n        return cmath.asin(a/(b*b))\n    if a==0:\n        return cmath.acos((a/b))\n",
        "num_ids": 163
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    angle = acos(c.real**2 + c.imag**2)\n    angle = angle * 180 / pi\n    return angle\n",
        "num_ids": 44
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == '': \n        return 0\n    if string[0] == '0' and string[1] == '0': \n        return 1\n    if string[0] == '0': \n        return 1 + find_length(string[1:]) \n    return find_length(string[1:]) \n",
        "num_ids": 79
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # define a base case\n    max_diff = 0\n    # loop through the string to find the max of all 1s and 0s\n    for i in range(len(string)):\n        # if it's 0, there are no 1s\n        if string[i] == \"0\":\n            continue\n        # if it's 1, there are no 0s\n        if string[i] == \"1\":\n            continue\n        # get the max difference\n        diff = max(diff, abs(string.count(\"1\") - string.count(\"0\")))\n    # return the max difference\n    return max_diff\n",
        "num_ids": 144
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    index_0 = 0\n    index_1 = 0\n    \n    for i in range(0, len(string)):\n        if string[i] == \"0\":\n            count_0 = count_0 + 1\n        else:\n            count_1 = count_1 + 1\n        \n        if count_0 == count_1:\n            index_0 = i\n            index_1 = i\n            break\n    \n    return index_0 - index_1 + 1\n",
        "num_ids": 127
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    c = 0\n    for i in range(len(string)-1):\n        if string[i] == 0 and string[i+1] == 1:\n            c += 1\n    return c\n",
        "num_ids": 48
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # For the given string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    diff = 0\n    sub_string = \"\"\n    for char in string:\n        if char == 0:\n            diff += 1\n        else:\n            sub_string += char\n    \n    # Find the maximum difference, and return it.\n    return len(sub_string) - diff\n        \n    \n    \n    \n    # This method can handle both 0 and 1s as a sub-string.\n    # You could do this method in O(1) in the time complexity of this method, but the number of 0s and 1s\n    # is not that large.\n    \n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n    \n    # Use a dictionary to store all the possible 0s and 1s.\n    # Store the maximum difference in a dictionary, and the corresponding character.\n    # That is, dictionary[char] = max(0-d, 1-d)\n    # For example, if the string is \"1101\", then the maximum difference is 1 - 10 = 1, and so\n    # the character \"1\" is the max difference in the string.\n    #\n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # For each character in string, create a 0 flag, and a 1 flag, where the difference of 1s and 0s is greater than the remaining substring.\n    # The returned difference is the maximum difference in the substring.\n    \n    # O(n) time complexity, where n is the length of the string.\n    # O(1) space complexity.\n",
        "num_ids": 1047
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    output = \"\"\n    total = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            total += 1\n        else:\n            total -= 1\n        count += 1\n        if total == 0 and count == len(string):\n            output = string[:i] + \"1\" + string[i+1:]\n            return output\n    return string\n",
        "num_ids": 100
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    max_diff = 0\n    counter = 1\n    for i in range(0,len(string)):\n        diff = string[i] - string[i-1]\n        if diff == 0:\n            counter = counter + 1\n        else:\n            max_diff = max(max_diff,counter)\n            counter = 1\n    max_diff = max(max_diff,counter)\n    return max_diff\n",
        "num_ids": 128
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n_0 = 0\n    n_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            n_0 += 1\n        else:\n            n_1 += 1\n    return n_0-n_1\n",
        "num_ids": 67
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start = 0\n    end = 0\n    \n    for i in range(0,len(string)):\n        if string[i] == '0':\n            end += 1\n        else:\n            start += 1\n    return abs(end-start)",
        "num_ids": 61
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return len(string) - string.count('0') - string.count('1')\n",
        "num_ids": 23
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # sum of the divisors of a and b\n    # see if a and b are common divisors\n    def common_divisors(a,b):\n        divisors = []\n        for i in range(1, min(a,b)+1):\n            if (a%i == 0) and (b%i == 0):\n                divisors.append(i)\n        return divisors\n    # sum of all the common divisors\n    def sum_of_common_divisors(a,b):\n        common_divisors_sum = 0\n        for i in common_divisors(a,b):\n            common_divisors_sum += i\n        return common_divisors_sum\n    # check whether the sum is a common divisor\n    def is_common_divisor(a,b):\n        return (sum_of_common_divisors(a,b) % a == 0 and sum_of_common_divisors(b,a) % b == 0)\n    # a - b and a + b are common divisors of two given numbers\n    def common_divisors_two_numbers(a,b):\n        divisors_list = common_divisors(a,b)\n        common_divisors_sum = 0\n        for i in range(len(divisors_list)):\n            common_divisors_sum += divisors_list[i]\n        return common_divisors_sum % a == 0 and common_divisors_sum % b == 0\n    # a - b and a + b are common divisors of two given numbers\n    def common_divisors_two_numbers_two_numbers(a,b):\n        divisors_list = common_divisors(a,b)\n        common_divisors_sum = 0\n        for i in range(len(divisors_list)):\n            common_divisors_sum += divisors_list[i]\n        return common_divisors_sum % a == 0 and common_divisors_sum % b == 0\n    # a - b and a + b is common divisors of two given numbers\n    # sum of all the common divisors of a and b\n    def common_divisors_two_numbers_and_sum(a,b):\n        common_divisors_sum = 0\n        for i in common_divisors(a,b):\n            common_divisors_sum += i\n        return common_divisors_sum % a == 0 and common_divisors_sum % b == 0\n    if a >= b:\n        if is_common_divisor(a,b):\n            return True\n        elif is_common_divisor(b,a):\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 681
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b \n",
        "num_ids": 9
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    a = abs(a)\n    b = abs(b)\n    # compute sum\n    s = a+b\n    # print number of divisors\n    # i = 1\n    # while i <= s:\n    #     if s % i == 0:\n    #         print i\n    #         break\n    #     i += 1\n    # return sum\n    div = []\n    for i in range(1, s+1):\n        if a % i == 0 and b % i == 0:\n            div.append(i)\n    return div\n",
        "num_ids": 148
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    sum = 0\n    for i in range(1,min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def factors(n): \n        count = 0 \n        while n%2 == 0: \n            count += 1\n            n = n/2\n        return count\n    \n    if a>b: \n        a,b = b,a \n    if a==b: return a \n    for i in range(a,b): \n        if factors(i) == 1: \n            return i \n",
        "num_ids": 100
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b == 0):\n        print(a, \"and\", b)\n        return a\n    else:\n        print(a)\n        print(b)\n        return sum(a,b-1)\n",
        "num_ids": 52
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    while a%b!=0:\n        a,b=b,a%b\n    if a>b:\n        a,b=b,a\n    return a+b\n",
        "num_ids": 61
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b%2==0:\n        return a+b\n    elif b!=0:\n        if a%b==0:\n            return a+b\n        else:\n            return a-b\n    else:\n        return 'Error'\n",
        "num_ids": 61
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            c += i\n    return c\n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    else:\n        return sum(b,a%b)\n",
        "num_ids": 40
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        raise ZeroDivisionError('Cannot divide by zero.')\n    else:\n        return x * y\n",
        "num_ids": 34
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"x and y must be integers\")\n    return x * y\n",
        "num_ids": 41
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x * y\n",
        "num_ids": 24
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while x!= 0:\n        result = result*10 + x%10\n        x = x//10\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError('Must pass an integer.')\n    return x * y\n",
        "num_ids": 40
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \n    \ndef is_prime(x):\n    '''\n    Write a function that determines if a number is prime.\n    '''\n    if x <= 1:\n        return False\n    elif x == 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \n",
        "num_ids": 83
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(\"What is the result of the operation? (Integer 1, Integer 2, etc.)\")\n    return int(x) * int(y)\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words",
        "num_ids": 37
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    result = []\n",
        "num_ids": 17
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    '''\n    This method will check for each word within the given list\n    '''\n    \n    #Code here\n    str = str.split(' ')\n    for i in range(len(str)):\n        if len(str[i]) > n:\n            str[i] = str[i][0:n]\n    return str\n",
        "num_ids": 62
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_word = \"\"\n    str_length = len(str)\n    for i in range(0,str_length):\n        longest_word = longest_word + str[i]\n    \n    if n == str_length:\n        return longest_word\n    else:\n        return None\n",
        "num_ids": 73
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    word_set = set()\n    for word in str.split(' '):\n        if len(word) > n:\n            word_set.add(word)\n            words.append(word)\n    return(words)\n",
        "num_ids": 60
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) >= n:\n            result.append(word)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # your code here\n    n = n\n    str_list = str.split()\n    for i in str_list:\n        if len(i)>n:\n            print(i)\n    \nprint(long_words(6, \"hello world\")",
        "num_ids": 62
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str = list(str)\n    str.sort()\n    for i in range(0,len(str)):\n        if str[i] > n:\n            str[i] = n\n        else:\n            continue\n    str = ''.join(str)\n    return str\n",
        "num_ids": 69
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # YOUR CODE HERE\n    # To run this test, test the matrix and see if it's a square.\n    \n    # check if it's square\n    if len(my_matrix) == len(my_matrix[0]):\n        for row in my_matrix:\n            if len(row)!= len(row[0]):\n                return False\n            for col in row:\n                if len(col)!= len(col[0]):\n                    return False\n        \n        # all squares are square\n        return True\n    \n    else:\n        return False\n        \ndef test_magic_square():\n    my_matrix = [['1', '2'], ['3', '4'], ['5', '6'], ['7', '8'], ['9', '10']]\n    print(magic_square_test(my_matrix))\n    \nif __name__ == '__main__':\n    test_magic_square()",
        "num_ids": 224
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0])\n    for r in range(num_rows):\n        for c in range(num_cols):\n            if r == num_rows//2:\n                if c == num_cols//2:\n                    if my_matrix[r][c] == '1':\n                        return False\n            if c == num_cols//2:\n                if r == num_rows//2:\n                    if my_matrix[r][c] == '1':\n                        return False\n    return True\n",
        "num_ids": 144
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not my_matrix or len(my_matrix) < 4:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # TODO: your code here\n    return True\n",
        "num_ids": 15
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # write your code here\n    if my_matrix[0][0] * my_matrix[1][1] == my_matrix[0][1] * my_matrix[1][0]:\n        return True\n    else:\n        return False\n    \ndef check_diagonal(my_matrix):\n    '''\n    Write a function to check if a 2D matrix is a diagonal matrix.\n    '''\n    # write your code here\n    sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            sum += my_matrix[i][j]\n    if sum == my_matrix[0][0] * my_matrix[1][1]:\n        return True\n    else:\n        return False\n    \ndef check_horizontal(my_matrix):\n    '''\n    Write a function to check if a 2D matrix is a horizontal matrix.\n    '''\n    # write your code here\n    sum = 0\n    for i in range(len(my_matrix)):\n        sum += my_matrix[i][0]\n    if sum == my_matrix[0][0] * my_matrix[1][0]:\n        return True\n    else:\n        return False\n    \ndef check_vertical(my_matrix):\n    '''\n    Write a function to check if a 2D matrix is a vertical matrix.\n    '''\n    # write your code here\n    sum = 0\n    for i in range(len(my_matrix)):\n        sum += my_matrix[0][i]\n    if sum == my_matrix[0][0] * my_matrix[0][1]:\n        return True\n    else:\n        return False\n    \ndef check_all(my_matrix):\n    '''\n    Write a function to check if a 2D matrix is a sum of diagonals or the sum of squares.\n    '''\n    # write your code here\n    sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            sum += my_matrix[i][j]\n    if sum == my_matrix[0][0] * my_matrix[1][1]:\n        return True\n    else:\n        return False\n        \ndef search_sudoku(input_list):\n    '''\n    Write a function to search a sudoku puzzle given a list of strings.\n    '''\n    # write your code here\n    # read a valid puzzle input\n    try:\n        with open(input_list, 'r') as file:\n            content = file.read()\n            content = content.split('\\n')\n            return process_sudoku(content)\n    except:\n        return False\n    \ndef process_sudoku(sudoku_input):\n    '''\n    Write a function to process a sudoku puzzle.\n    '''\n    # write your code here\n    rows = []\n    for i in range(9):\n        rows.append([])\n        for j in range(9):\n            rows[i].append(0)\n    for i in range(len(sudoku_input)):\n        for j in range(len(sudoku_input[i])):\n            if j == 0 or j == 2:\n                rows[j][i] = 1\n            if i == 0 or i == 2:\n                rows[i][j] = 1\n    return rows\n",
        "num_ids": 129
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if sum(my_matrix) == sum(my_matrix[0]):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = len(my_matrix)\n    n = len(my_matrix[0])\n    count_biggest = 0\n    count_smallest = 0\n    for i in range(m):\n        for j in range(n):\n            if my_matrix[i][j] == 0:\n                count_biggest = count_biggest + 1\n            if my_matrix[i][j] == 1:\n                count_smallest = count_smallest + 1\n    if count_biggest < count_smallest:\n        return True\n    else:\n        return False",
        "num_ids": 140
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here.\n    \n    size = len(my_matrix)\n    if size == 1:\n        return True\n    elif size == 2:\n        if my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2] == 1 or my_matrix[0][2] == my_matrix[1][1] == my_matrix[2][0] == 1:\n            return True\n        else:\n            return False\n    elif size == 3:\n        for r in range(size):\n            if my_matrix[r][r] == 1:\n                return False\n            elif my_matrix[r][r] == my_matrix[r][r] == 1:\n                return False\n            elif my_matrix[r][2-r] == 1:\n                return False\n            elif my_matrix[2-r][r] == 1:\n                return False\n            elif my_matrix[2-r][2-r] == 1:\n                return False\n            elif my_matrix[2-r][r] == 1:\n                return False\n            elif my_matrix[2-r][2-r] == 1:\n                return False\n    elif size == 4:\n        for r in range(size):\n            for c in range(size):\n                if my_matrix[r][c] == 1:\n                    return False\n                elif my_matrix[r][c] == my_matrix[r][2-r] == my_matrix[2-r][c] == 1 or my_matrix[r][c] == my_matrix[2-r][c] == my_matrix[r][2-r] == 1:\n                    return False\n                elif my_matrix[r][c] == my_matrix[2-r][c] == my_matrix[r][2-r] == 1:\n                    return False\n                elif my_matrix[2-r][c] == my_matrix[r][c] == 1:\n                    return False\n                elif my_matrix[2-r][c] == my_matrix[r][2-r] == 1:\n                    return False\n                elif my_matrix[r][2-r] == 1:\n                    return False\n                elif my_matrix[2-r][r] == 1:\n                    return False\n                elif my_matrix[2-r][r] == 1:\n                    return False\n        for r in range(size):\n            for c in range(size):\n                if my_matrix[r][c] == 1:\n                    return False\n                elif my_matrix[r][c] == my_matrix[r][2-r] == my_matrix[2-r][c] == 1 or my_matrix[r][c] == my_matrix[2-r][c] == my_matrix[r][2-r] == 1:\n                    return False\n                elif my_matrix[r][c] == my_matrix[2-r][c] == 1:\n                    return False\n                elif my_matrix[2-r][c] == 1:\n                    return False\n                elif my_matrix[2-r][c] == my_matrix[r][2-r] == 1:\n                    return False\n                elif my_matrix[2-r][r] == 1:\n                    return False\n                elif my_matrix[2-r][r] == 1:\n                    return False\n                elif my_matrix[2-r][2-r] == 1:\n                    return False\n                elif my_matrix[2-r][2-r] == 1:\n                    return False\n    elif size == 5:\n        for r in range(size):\n            for c in range(size):\n                for r1 in range(r):\n                    for c1 in range(c):\n                        if my_matrix[r][c] == 1:\n                            if my_matrix[r][2-r] == my_matrix[2-r][c] == my_matrix[r][2-r1] == my_matrix[2-r1][c] == 1:\n                                return False\n                            else:\n                                return False\n                        elif my_matrix[r][c] == my_matrix[2-r][c] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[r][2-r] == my_matrix[2-r1][c] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[r][2-r] == my_matrix[2-r1][2-r] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][2-r] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][c] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][2-r] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == 1:\n                            return False\n                        elif my_matrix[2-r][c] == my_matrix[r][2-r] == my_matrix[2-r1][c] == 1:\n                            return False\n                        elif my_matrix[2-r][c] == my_matrix[2-r1][c] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][2-r] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[2-r][c] == my_matrix[r][2-r] == my_matrix[2-r1][2-r] == 1:\n                            return False\n                        elif my_matrix[2-r][c] == my_matrix[r][2-r] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == 1:\n                            return False\n                        elif my_matrix[r][2-r] == my_matrix[2-r][c] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][c] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][2-r] == my_matrix[2-r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][r] == my_matrix[2-r1][2-r] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][2-r] == my_matrix[r][r] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[2-r][r] == my_matrix[r][2-r1] == 1:\n                            return False\n                        elif my_matrix[r][c] == my_matrix[r][r] == 1:\n                            return False\n                        elif my_matrix[r][2-r] == my_matrix[r][r] == 1:\n                            return False\n                        elif my_matrix[r][2-r] == my_matrix[2-r][r] == 1:\n                            return False\n                        elif my_matrix[r][2-r] == my_matrix[r][r] == 1:\n                            return False\n                        elif my_matrix[r][2-r] == my_matrix[2-r][r] == 1:\n                            return False\n                        elif my_matrix[r][2-r] == my_matrix",
        "num_ids": 2013
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    s = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8]\n    ]\n    for row in s:\n        for num in row:\n            if(num == 0):\n                return False\n            elif num == 0:\n                return True\n            elif num < 0:\n                return False\n            elif num > 9:\n                return False\n            else:\n                pass\n    return True\n",
        "num_ids": 116
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    item_freq = defaultdict(int)\n    for num in nums:\n        item_freq[num] += 1\n    \n    max_freq = -1\n    for num in item_freq:\n        if item_freq[num] > max_freq:\n            max_freq = item_freq[num]\n            max_freq_index = num\n    \n    return max_freq_index\n",
        "num_ids": 105
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_freq_idx = 0\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n            max_freq_idx = nums.index(max_freq)\n        \n    return max_freq_idx\n",
        "num_ids": 79
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_freq = 0\n    for num in nums:\n        if num == max_freq:\n            max_count += 1\n        else:\n            max_freq = num\n            max_count += 1\n    return max_count\n        \n",
        "num_ids": 69
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = dict()\n    for item in nums:\n        if item in d.keys():\n            d[item] += 1\n        else:\n            d[item] = 1\n    \n    max_frequency = max(d.values())\n    for key, val in d.items():\n        if val == max_frequency:\n            return key\n    return None\n",
        "num_ids": 87
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(lambda: 0)\n    max_freq = 0\n    for num in nums:\n        occurrences[num] += 1\n        max_freq = max(max_freq, occurrences[num])\n",
        "num_ids": 59
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(lambda: 0)\n    for num in nums:\n        count[num] += 1\n    max_freq = max(count.values())\n    for key, val in count.items():\n        if val == max_freq:\n            return key\n        \n",
        "num_ids": 69
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    max_freq = max(max_freq.values())\n    \n    freq = defaultdict(int)\n    freq = {num: freq[num] for num in nums}\n    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    max_freq = freq[0][1]\n    return max_freq\n",
        "num_ids": 109
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    temp_dict = defaultdict(int)\n    for num in nums:\n        temp_dict[num] += 1\n    \n    max_freq = 0\n    for i in temp_dict.values():\n        if i > max_freq:\n            max_freq = i\n            max_freq_item = i\n    return max_freq_item\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(list)\n    for i in nums:\n        if i in max_freq:\n            max_freq[i].append(i)\n        else:\n            max_freq[i] = [i]\n    return max(max_freq, key=max_freq.get)\n",
        "num_ids": 81
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # time complexity: O(n) for lookup\n    # space complexity: O(n) for the result\n    \n    # initializing count map to store the frequency\n    count_map = defaultdict(int)\n    \n    for num in nums:\n        count_map[num] += 1\n        \n    return max(count_map, key=count_map.get)\n    \n    # if there are no frequent items in the list, return None\n    # return the value of the key in the dictionary\n    \ndef min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    # time complexity: O(n) for lookup\n    # space complexity: O(n) for the result\n    \n    # initializing count map to store the frequency\n    count_map = defaultdict(int)\n    \n    for num in nums:\n        count_map[num] += 1\n        \n    return min(count_map, key=count_map.get)\n    \ndef majority_element(nums):\n    '''\n    Write a function to find the majority element in a given list.\n    '''\n    # time complexity: O(n) for lookup\n    # space complexity: O(n) for the result\n    \n    # initializing count map to store the frequency\n    count_map = defaultdict(int)\n    \n    for num in nums:\n        count_map[num] += 1\n        \n    # now loop through the map and if it has two items with the same value, return the first item\n    # if the second item is the same, return the first item\n    # if the second item has only one occurrence, return the first item, we always return the first item, even if the second item does not have any occurrence\n    for key in count_map:\n        if count_map[key] == 1:\n            return key\n        elif count_map[key] == 2:\n            for key_next, count_next in count_map.items():\n                if count_map[key_next] == 1 and count_map[key] == 2:\n                    return key\n    return None\n    \ndef can_add_to_list(nums, index):\n    '''\n    Write a function to add an element to a list at a given index.\n    '''\n    # time complexity: O(n) for lookup\n    # space complexity: O(1) for the result\n    \n    # initializing count map to store the frequency\n    count_map = defaultdict(int)\n    \n    for num in nums:\n        count_map[num] += 1\n        \n    return index in count_map\n",
        "num_ids": 81
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            new_str += str1[i]\n    return new_str\n",
        "num_ids": 73
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Hint: You can use the function.reverse() and.translate() methods to reverse a string.\n    # Hint: You can use list() to convert a string into a list.\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reverse_str = \"\"\n    for c in str1:\n        if c in vowels:\n            c = vowels.index(c)\n            reverse_str = reverse_str + vowels[c]\n        else:\n            reverse_str = reverse_str + c\n    return reverse_str\n",
        "num_ids": 152
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    str1_reverse = ''\n    for char in str1:\n        if char in vowels:\n            str1_reverse = char + str1_reverse\n    return str1_reverse\n",
        "num_ids": 69
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    return ''.join([str1[x:x+2] for x in range(len(str1)-2) if x+2 in range(len(str1)) and str1[x:x+3] not in vowels])\n",
        "num_ids": 84
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result += char\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = str1.lower()\n    vowels = \"aeiou\"\n    vowels2 = \"aeiouAEIOU\"\n    res = \"\"\n    for i in s:\n        if i not in vowels and i not in vowels2:\n            res += i\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s1=str1.lower()\n    for i in range(len(s1)-1,-1,-1):\n        if s1[i].isalpha() and s1[i] not in 'aeiouAEIOU':\n            str1 = str1.replace(s1[i], 'Y')\n    print(str1)\n",
        "num_ids": 82
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    final = []\n    for char in str1:\n        if char in vowels:\n            if char not in final:\n                final.append(char)\n    final_string = ''.join(final)\n    return final_string\n    \nprint(reverse_vowels('whilth'))",
        "num_ids": 93
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    def is_vowel(char):\n        return char in set(('a','e','i','o','u'))\n",
        "num_ids": 32
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_dict = {'a': 'z', 'e': 'y', 'i': 'o', 'o': 'i', 'u': 'u', 'y': 'a', 'A': 'A', 'E': 'E', 'I': 'I', 'O': 'O', 'U': 'U'}\n    str1 = str1.lower()\n    new_str = \"\"\n    for letter in str1:\n        if letter in vowels_dict:\n            new_str += vowels_dict[letter]\n        else:\n            new_str += letter\n    return new_str\n",
        "num_ids": 143
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = []\n    for el in tup1:\n        str_tup.append(str(el))\n    return \"(\" + \"\".join(str_tup) + \")\"\n",
        "num_ids": 50
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a = \"(\"\n    for x in tup1:\n        a = a + str(x)\n    a = a + \")\"\n    return a\n",
        "num_ids": 39
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return '\\n'.join(tup1)\n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + \",\".join(tup1) + \")\"\n    \n",
        "num_ids": 22
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    \ndef merge(tup1, tup2):\n    '''\n    Write a function to merge 2 tuple of numbers.\n    '''\n    return (tup1[0] + tup2[0], tup1[1] + tup2[1])\n",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    print(type(tup1))\n    print(tup1)\n    return f'({\",\".join(map(str,tup1))})'\n",
        "num_ids": 40
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # YOUR CODE HERE\n    return str(tup1)\n    \ndef list_tuple(list1):\n    '''\n    Write a function that converts a list of numbers into a tuple.\n    '''\n    # YOUR CODE HERE\n    return tuple(list1)\n    \ndef convert_to_lower_case(str1):\n    '''\n    Write a function that converts a string into lower case.\n    '''\n    # YOUR CODE HERE\n    return str1.lower()\n    \ndef max_number(num1, num2):\n    '''\n    Write a function that returns the maximum of two numbers.\n    '''\n    # YOUR CODE HERE\n    if num1 > num2:\n        return num1\n    elif num2 > num1:\n        return num2\n    else:\n        return num1\n    \ndef reverse_string(str1):\n    '''\n    Write a function that reverses a string.\n    '''\n    # YOUR CODE HERE\n    return str1[::-1]\n    \ndef sum_numbers(num1, num2):\n    '''\n    Write a function that returns the sum of the two numbers.\n    '''\n    # YOUR CODE HERE\n    return num1 + num2\n    \ndef list_numbers(list1):\n    '''\n    Write a function that converts a list of numbers into a string.\n    '''\n    # YOUR CODE HERE\n    return str(list1)\n    \ndef make_great(num1, num2):\n    '''\n    Write a function that returns the sum of two numbers.\n    '''\n    # YOUR CODE HERE\n    return num1 + num2\n    \ndef get_great_numbers():\n    '''\n    Write a function that returns the sum of the first 3 numbers in a list.\n    '''\n    # YOUR CODE HERE\n    return sum_numbers(3,5)\n    \ndef get_great_numbers2():\n    '''\n    Write a function that returns the sum of the first 3 numbers in a list.\n    '''\n    # YOUR CODE HERE\n    return sum_numbers(5,9)\n    \n    \ndef list_of_strings(list1):\n    '''\n    Write a function that converts a list into a string.\n    '''\n    # YOUR CODE HERE\n    return str(list1)\n    \ndef check_even_list(list1):\n    '''\n    Write a function that checks if a list has an even number of elements.\n    '''\n    # YOUR CODE HERE\n    return len(list1) % 2 == 0\n    \n    \ndef get_even_index(list1):\n    '''\n    Write a function that returns the index of the first element that is an even number.\n    '''\n    # YOUR CODE HERE\n    return list1.index(2)\n    \ndef odd_index(list1):\n    '''\n    Write a function that returns the index of the first element that is an odd number.\n    '''\n    # YOUR CODE HERE\n    return list1.index(3)\n    \ndef get_odd_index(list1):\n    '''\n    Write a function that returns the index of the first element that is an even number.\n    '''\n    # YOUR CODE HERE\n    return list1.index(2)\n    \ndef check_odd_list(list1):\n    '''\n    Write a function that checks if a list has any even elements.\n    '''\n    # YOUR CODE HERE\n    return len(list1) % 2 == 0\n    \ndef reverse_string_list(list1):\n    '''\n    Write a function that reverses a list.\n    '''\n    # YOUR CODE HERE\n    return str(list1[::-1])\n    \ndef string_reverse_list(str1):\n    '''\n    Write a function that reverses a list.\n    '''\n    # YOUR CODE HERE\n    return str1[::-1]\n    \ndef string_count_substring(str1, str2):\n    '''\n    Write a function that counts the number of substrings of length n between two given strings.\n    '''\n    # YOUR CODE HERE\n    return len(list(str2))\n    \ndef string_count_substring2(str1, str2):\n    '''\n    Write a function that counts the number of substrings of length n between two given strings.\n    '''\n    # YOUR CODE HERE\n    return len(str1.replace(' ','').split(' '))\n    \ndef concatenate_list(list1, list2):\n    '''\n    Write a function that concatenates a list.\n    '''\n    # YOUR CODE HERE\n    return list1 + list2\n    \ndef merge_tuples(list1, list2):\n    '''\n    Write a function that concatenates a list.\n    '''\n    # YOUR CODE HERE\n    return tuple(list1 + list2)\n    \ndef get_intersection(list1, list2):\n    '''\n    Write a function that returns the intersection of two lists.\n    '''\n    # YOUR CODE HERE\n    return list(set(list1).intersection(list2))\n    \ndef get_list_divisible_by_tw(list1):\n    '''\n    Write a function that returns the list containing every even numbers from a given list.\n    '''\n    # YOUR CODE HERE\n    return list(filter(lambda x: x%2 == 0, list1))\n    \ndef get_list_of_odd_numbers(list1):\n    '''\n    Write a function that returns the list containing every odd number from a given list.\n    '''\n    # YOUR CODE HERE\n    return list(filter(lambda x: x%2!= 0, list1))\n    \ndef sort_list(list1):\n    '''\n    Write a function that sorts a list.\n    '''\n    # YOUR CODE HERE\n    return sorted(list1)\n    \ndef get_longest_word(list1):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    # YOUR CODE HERE\n    return list1[0]\n    \ndef longest_word(list1):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    # YOUR CODE HERE\n    return str(max(list1, key=len))\n    \ndef get_longest_word2(list1):\n    '''\n    Write a function that returns the longest word in a given list of words.\n    '''\n    # YOUR CODE HERE\n    return list(max(list1, key=len))\n    \ndef add_char(str1, char):\n    '''\n    Write a function that adds a character to a string.\n    '''\n    # YOUR CODE HERE\n    return str1 + char\n    \ndef reverse_word(str1):\n    '''\n    Write a function that reverses a word.\n    '''\n    # YOUR CODE HERE\n    return str1[::-1]\n    \ndef words_to_int(str1):\n    '''\n    Write a function that converts a string to an integer.\n    '''\n    # YOUR CODE HERE\n    return int(str1)\n    \ndef words_to_int2(str1):\n    '''\n    Write a function that converts a string to an integer.\n    '''\n    # YOUR CODE HERE\n    return int(str1[::-1])\n    \ndef get_longest_word_without_character(str1):\n    '''\n    Write a function that returns the longest word without a specific character in a given string.\n    '''\n    # YOUR CODE HERE\n    return str1[0:str1.index(' ')]\n    \ndef check_longest_word_without_character(str1):\n    '''\n    Write a function that checks if a given word has a specific character in a given string.\n    '''\n    # YOUR CODE HERE\n    return str1[str1.index(' ') + 1::] == str1[:str1.index(' ')]\n    \ndef largest_string_in_list(list1):\n    '''\n    Write a function that returns the largest string in a given list.\n    '''\n    # YOUR CODE HERE\n    return str(max(list1, key=len))\n    \ndef is_odd(num):\n    '''\n    Write a function that checks if a given number is odd.\n    '''\n    # YOUR CODE HERE\n    return num % 2 == 1\n    \ndef is_od",
        "num_ids": 22
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for x in tup1:\n        tup_str += str(x) + ','\n    return tup_str[:-1]\n",
        "num_ids": 44
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = \"\"\n    for i in range(len(tup1)):\n        string1 += str(tup1[i])\n    return string1\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            count += nums[i]\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for n in nums:\n        if n < 0:\n            total += n\n    return total\n    \n    pass\n",
        "num_ids": 36
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Your code here\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n    \n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for i in nums:\n        if i < 0:\n            neg_sum += i\n    return neg_sum\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total -= num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n",
        "num_ids": 18
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n==1):\n        return 1\n    elif (n==3):\n        return 3\n    elif (n==5):\n        return 5\n    elif (n==7):\n        return 7\n    elif (n==9):\n        return 9\n    else:\n        return n * n\n",
        "num_ids": 76
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    l = n*n + 1\n    for i in range(l-1, -1, -1): \n        if i == n-1: \n            return i + 1\n        i += 1\n",
        "num_ids": 50
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 4 == 0:\n        return n\n    else:\n        return (n * (n + 1)) / 2\n    \n    \ndef main():\n    while True:\n        n = input('Please enter a positive integer: ')\n        if n.isdigit():\n            n = int(n)\n            break\n        else:\n            print('Please only enter a number.')\n",
        "num_ids": 94
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    # your code goes here\n    \n    # For example, if n is 12, the function should return 7 because \n    # of the following condition:\n    #\n    #. For 12, the hexagonal numbers are: \n    #. 1, 3, 6, 10, 15, 18, 24, 30, 45, 60, 90, 120, \n    #....\n    \n    return 7\n",
        "num_ids": 95
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    print(n)\n    x = 1 \n    while (x <= n):\n        y = 0\n        while (x <= y*2 +1 ):\n            print(x, end = \" \")\n            x = x + 1\n        y = y*2 + 1\n        while (x <= y*2 +1):\n            print(y, end = \" \")\n            y = y + 1\n        x = x*2 + 1\n    print(\"\\n\")\n",
        "num_ids": 112
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<=1: \n        raise ValueError(\"n must be greater than 1\")\n    if n==0: \n        return 1\n    if n==1: \n        return 2\n    return n*(n+1)/6 + (n*(3*n+1)/2 - n*n)**(1/2)\n",
        "num_ids": 82
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    # define a variable to store the value in\n    value = 0\n    \n    # For loop\n    for i in range(0, n):\n        # set the current variable to the value of i+1\n        value = (i + 1) * (i + 1)\n        \n        # return the result\n        return value\n    \n    # if n is negative return -1\n    return -1\n",
        "num_ids": 96
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_index = 0\n    while hex_index < n:\n        hex_index = hex_index + (n // 2)\n        if hex_index % 4 == 0:\n            if hex_index % 16 == 0:\n                print(hex_index)\n                return hex_index\n        elif hex_index % 16 == 0:\n            print(hex_index)\n            return hex_index\n",
        "num_ids": 95
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n > 1:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 1) * 2\n    else:\n        return n\n",
        "num_ids": 41
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n <= 0): \n        return 0\n    for i in range(n): \n        if (i % 2 == 0): \n            x = -(n - i) \n        else: \n            x = (n + i) \n        if (x % 2 == 0): \n            y = -(x - 1) \n        else: \n            y = x \n        if (y % 2 == 0): \n            z = -(y - 1) \n        else: \n            z = y \n        if (z % 2 == 0): \n            a = -(z - 1) \n        else: \n            a = z \n        if (a % 2 == 0): \n            b = -(a - 1) \n        else: \n            b = a \n        if (b % 2 == 0): \n            c = -(b - 1) \n        else: \n            c = b \n        if (c % 2 == 0): \n            d = -(c - 1) \n        else: \n            d = c \n        if (d % 2 == 0): \n            e = -(d - 1) \n        else: \n            e = d \n        if (e % 2 == 0): \n            f = -(e - 1) \n        else: \n            f = e \n        if (f % 2 == 0): \n            g = -(f - 1) \n        else: \n            g = f \n        if (g % 2 == 0): \n            h = -(g - 1) \n        else: \n            h = g \n        if (h % 2 == 0): \n            i = -(h - 1) \n        else: \n            i = h \n        if (i % 2 == 0): \n            j = -(i - 1) \n        else: \n            j = i \n        if (j % 2 == 0): \n            k = -(j - 1) \n        else: \n            k = j \n        if (k % 2 == 0): \n            l = -(k - 1) \n        else: \n            l = k \n        if (l % 2 == 0): \n            m = -(l - 1) \n        else: \n            m = l \n        if (m % 2 == 0): \n            n = -(m - 1) \n        else: \n            n = m \n        if (n % 2 == 0): \n            o = -(n - 1) \n        else: \n            o = n \n        if (o % 2 == 0): \n            p = -(o - 1) \n        else: \n            p = o \n        if (p % 2 == 0): \n            q = -(p - 1) \n        else: \n            q = p \n        if (q % 2 == 0): \n            r = -(q - 1) \n        else: \n            r = q \n        if (r % 2 == 0): \n            s = -(r - 1) \n        else: \n            s = r \n        if (s % 2 == 0): \n            t = -(s - 1) \n        else: \n            t = s \n        if (t % 2 == 0): \n            u = -(t - 1) \n        else: \n            u = t \n        if (u % 2 == 0): \n            v = -(u - 1) \n        else: \n            v = u \n        if (v % 2 == 0): \n            w = -(v - 1) \n        else: \n            w = v \n        if (w % 2 == 0): \n            x = -(w - 1) \n        else: \n            x = w \n        if (x % 2 == 0): \n            y = -(x - 1) \n        else: \n            y = x \n        if (y % 2 == 0): \n            z = -(y - 1) \n        else: \n            z = y \n        if (z % 2 == 0): \n            a = -(z - 1) \n        else: \n            a = z \n        if (a % 2 == 0): \n            b = -(a - 1) \n        else: \n            b = a \n        if (b % 2 == 0): \n            c = -(b - 1) \n        else: \n            c = b \n        if (c % 2 == 0): \n            d = -(c - 1) \n        else: \n            d = c \n        if (d % 2 == 0): \n            e = -(d - 1) \n        else: \n            e = d \n        if (e % 2 == 0): \n            f = -(e - 1) \n        else: \n            f = e \n        if (f % 2 == 0): \n            g = -(f - 1) \n        else: \n            g = f \n        if (g % 2 == 0): \n            h = -(g - 1) \n        else: \n            h = g \n        if (h % 2 == 0): \n            i = -(h - 1) \n        else: \n            i = h \n        if (i % 2 == 0): \n            j = -(i - 1) \n        else: \n            j = i \n        if (j % 2 == 0): \n            k = -(j - 1) \n        else: \n            k = j \n        if (k % 2 == 0): \n            l = -(k - 1) \n        else: \n            l = k \n        if (l % 2 == 0): \n            m = -(l - 1) \n        else: \n            m = l \n        if (m % 2 == 0): \n            n = -(m - 1) \n        else: \n            n = m \n        if (n % 2 == 0): \n            o = -(n - 1) \n        else: \n            o = n \n        if (o % 2 == 0): \n            p = -(o - 1) \n        else: \n            p = o \n        if (p % 2 == 0): \n            q = -(p - 1) \n        else: \n            q = p \n        if (q % 2 == 0): \n            r = -(q - 1) \n        else: \n            r = q \n        if (r % 2 == 0): \n            s = -(r - 1) \n        else: \n            s = r \n        if (s % 2 == 0): \n            t = -(s - 1) \n        else: \n            t = s \n        if (t % 2 == 0): \n            u = -(t - 1) \n        else: \n            u = t \n        if (u % 2 == 0): \n            v = -(u - 1) \n        else: \n            v = u \n        if (v % 2 == 0): \n            w = -(v - 1) \n        else: \n            w = v \n        if (w % 2 == 0): \n            x = -(w - 1) \n        else: \n            x = w \n        if (x % 2 == 0): \n            y = -(x - 1) \n        else: \n            y = x \n        if (y % 2 == 0): \n            z = -(y - 1) \n        else: \n            z = y \n        if (z % 2 == 0): \n            a = -(z - 1) \n        else: \n            a = z \n        if (a % 2 == 0): \n            b = -(a - 1) \n        else: \n            b = a \n        if (b % 2 == 0): \n            c = -(b - 1) \n        else: \n            c = b \n        if (c % 2 == 0): \n            d = -(c - 1) \n        else: \n            d = c \n        if (d % 2 == 0): \n            e = -(d - 1) \n        else: \n            e = d \n        if (e % 2 == 0)",
        "num_ids": 2018
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            nonzeros+=1\n        else:\n            zeros+=1\n    return nonzeros/len(nums)\n",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    zeroes = zeroes / len(nums)\n    non_zeroes = non_zeroes / len(nums)\n    return zeroes, non_zeroes\n",
        "num_ids": 91
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 48
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    # find the absolute value of each number and divide by the sum\n    # ie:   abs(x) = abs(x) / sum(nums)\n    for num in nums:\n        abs_val = abs(num)\n        non_zero_count += abs_val\n        zero_count += abs_val\n    return non_zero_count / non_zero_count\n",
        "num_ids": 106
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    \n    return (zero_count/len(nums))*100\n",
        "num_ids": 57
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total = 0\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n        else:\n            total += 1\n    return count/len(nums)\n",
        "num_ids": 51
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_counts = 0\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == 0:\n            zero_counts += 1\n    zero_counts /= n\n    return zero_counts\n",
        "num_ids": 63
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0 or n == 1: \n        return True\n    else: \n        if n & n-1 == 0: \n            return False\n        else: \n            return is_Sum_Of_Powers_Of_Two(n & n-1)\n",
        "num_ids": 66
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    else:\n        sum=0\n        i=1\n        while i<=n:\n            sum+=i\n            i+=1\n        if sum==n:\n            return True\n        else:\n            return False\n",
        "num_ids": 64
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = sum(range(2, n+1))\n    if s % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        print(\"Please enter a positive integer\")\n        return \n    if n == 0: \n        print(\"Enter positive integer\")\n        return \n    for i in range(2, n+1):\n        if n % i == 0: \n            return False\n    return True\n    \n",
        "num_ids": 77
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n=int(n)\n    num=int(n)\n    p=2**num\n    if n==0:\n        return \"0\"\n    if p==n:\n        return True\n    return False\n    \n    \nprint(is_Sum_Of_Powers_Of_Two(5))\nprint(is_Sum_Of_Powers_Of_Two(16))",
        "num_ids": 92
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return False\n    \n    sum = 0\n    for i in range(1,n//2 + 1):\n        if n % i == 0:\n            sum += i\n        else:\n            break\n    if sum == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    \n    if n < 0:\n        return False\n    \n    for i in range(1,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(num):\n        '''\n        Check if the number can be represented as sum of non-zero powers of 2.\n        '''\n        sum = 0\n        while num!= 0:\n            sum += num & 1\n            num >>= 1\n        if sum == n:\n            return True\n        else:\n            return False\n        return False\n    if is_power_of_two(2):\n        return False\n    else:\n        return True\n",
        "num_ids": 76
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n = n\n    #Your code here\n    for i in range(2, n+1):\n        if n%i==0:\n            return False\n    return True\n    #return n%i==0\n",
        "num_ids": 52
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    if n < 0: \n        return False\n    temp = n * is_Sum_Of_Powers_Of_Two(n//2) \n    if temp == n: \n        return True\n    return temp \n",
        "num_ids": 79
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of a circle is\", circumference)\n    \ndef circle_area(r):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    area = 3.14 * r ** 2\n    print(\"The area of a circle is\", area)\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #Variables\n    circumference = 2*3.14*r\n    print(\"Circumference of circle: \", circumference)\n    \n    return circumference\n",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * (pi * r)\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #a = pi*r*r\n    #return a\n",
        "num_ids": 17
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n",
        "num_ids": 10
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for element in item:\n            flattened_list.append(element)\n    return flattened_list\n",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(input_list):\n        '''\n        Sets the elements of the input_list to their first level\n        '''\n        output_list = []\n",
        "num_ids": 9
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for element in test_list:\n        if type(element) == list:\n            num_list += extract_singly(element)\n        elif type(element) == set:\n            num_list += element\n        else:\n            num_list.append(element)\n    return num_list\n",
        "num_ids": 79
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def list_of_lists():\n        '''\n        Create a list of lists consisting of the numbers from each list.\n        '''\n        li = []\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                li.append(test_list[i][j])\n        return li\n    return list_of_lists()\n",
        "num_ids": 64
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat = []\n    for i in test_list:\n        if type(i) == type([]):\n            for j in i:\n                flat.append(j)\n        else:\n            flat.append(i)\n    return flat\n",
        "num_ids": 59
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # remove duplicate entries\n    test_list = list(dict.fromkeys(test_list))\n    # delete duplicates\n    test_list = list(set(test_list))\n",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    flattened_list = []\n    \n    for item in test_list:\n        item = list(item)\n        if len(item) > 1:\n            flattened_list.append(item)\n        else:\n            flattened_list.append(item[0])\n    \n    return flattened_list\n    \nprint(extract_singly([[1,2,3],[4,5,6],[7,8,9]]))\nprint(extract_singly([[1,2,3],[4,5,6],[7,8,9]]))\n",
        "num_ids": 140
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    set_list = []\n    for test_array in test_list:\n        for element in test_array:\n            set_list.append(element)\n    return set_list\n",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat = []\n    for items in test_list:\n        if type(items)!= list:\n            items = [items]\n        for i in items:\n            if type(i)!= list:\n                i = [i]\n            for j in i:\n                flat.append(j)\n    return flat\n",
        "num_ids": 76
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(map(lambda lst: sum(lst), test_list))\n",
        "num_ids": 22
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # TODO: Write your code here.\n    \n    # sort array\n    for i in range(len(nums)):\n        # find max number\n        max_idx = i\n        # print(max_idx)\n        # swap i with max number\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # print(nums)\n",
        "num_ids": 102
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length - 1\n    count = 1\n    while count <= gap:\n        while count <= length and nums[count] > nums[count - 1]:\n            count += 1\n        nums[count - 1], nums[gap] = nums[gap], nums[count - 1]\n        gap -= 1\n        count = 1\n    return nums\n",
        "num_ids": 97
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Creating two empty lists\n    smaller = []\n    larger = []\n",
        "num_ids": 21
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    temp = []\n    for i in range(len(nums)):\n        temp.append(nums[i])\n    temp.sort(reverse=True)\n    for i in range(len(nums)):\n        nums[i] = temp[i]\n    return nums\n    \n",
        "num_ids": 73
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Loop through the length of the list\n    for i in range(len(nums)):\n        # Find the index of the element to sort\n        index = nums.index(nums[i])\n        # Swap the ith element with the next\n        # element\n        nums[i], nums[index] = nums[index], nums[i]\n    # Return the sorted array\n    return nums\n",
        "num_ids": 100
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Write your code here.\n    size = len(nums)\n    if size <= 1:\n        return nums\n    \n    for i in range(size):\n        index = nums[i]\n        left = i - 1\n        right = i + 1\n        while left >= 0 and nums[left] > index:\n            nums[left + 1] = nums[left]\n            left -= 1\n        while right < size and nums[right] < index:\n            nums[right + 1] = nums[right]\n            right += 1\n        nums[right + 1] = index\n    return num",
        "num_ids": 149
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    new_list = []\n    start, end = 0, len(nums) - 1\n    \n    while start < end:\n        \n        # make a pivot element equal to the leftmost element\n        while start <= end and nums[start] <= nums[end]:\n            start += 1\n            \n        # make a pivot element equal to the rightmost element\n        while start <= end and nums[start] > nums[end]:\n            end -= 1\n            \n        # make a swap element equal to the rightmost element\n        # and make the element smaller, if it's larger than the leftmost element\n        if nums[start] > nums[end]:\n            nums[start], nums[end] = nums[end], nums[start]\n            new_list.append(end - 1)\n            end -= 1\n        \n        # make a swap element equal to the leftmost element\n        # and make the element smaller, if it's larger than the rightmost element\n        elif nums[start] < nums[end]:\n            nums[start], nums[end] = nums[end], nums[start]\n            new_list.append(start + 1)\n            start += 1\n            \n    return new_list\n",
        "num_ids": 292
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return\n    first = nums[0]\n    nums.remove(first)\n    if len(nums) == 0:\n        return\n    pancake_sort(nums)\n    nums.append(first)\n    return num",
        "num_ids": 71
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time complexity is O(n^2)\n    # Space Complexity O(n)\n    # Runtime: 180 ms, faster than 91.62% of Python3 online submissions for Pancake Sort.\n    # Memory Usage: 14.6 MB, less than 75.56% of Python3 online submissions for Pancake Sort.\n    \n    pass\n    pass\n",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    if len(list1)==0 or len(list2)==0 or len(list3)==0:\n        return 0\n    \n    same_list = []\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                same_list.append(i)\n    \n    return len(same_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2004
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    sum = 0\n    for item in list1:\n        if item in list2:\n            sum = sum + 1\n    for item in list3:\n        if item in list2:\n            sum = sum + 1\n    return sum\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    a=list3\n    b=list2\n    c=list1\n    d=list1\n    e=list1\n    \n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if a[i]==b[j]:\n                print(a[i],end=\" \")\n            else:\n                if a[i] in list3 and b[j] in list3:\n                    print(a[i],end=\" \")\n                else:\n                    print(b[j],end=\" \")\n        print()\n",
        "num_ids": 139
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    for i in range(len(list1)-1):\n        for j in range(len(list2)-1):\n            if list1[i]==list2[j] and list2[j]==list3[i]:\n                count+=1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(map(lambda x,y,z: x.count(z)==y.count(z),list1,list2,list3))\n",
        "num_ids": 38
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                count+=1\n    for item3 in list3:\n        if item3 == item1:\n            count+=1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    def count_samepairs(list1,list2,list3):\n        '''\n        Write a function to count number items that are identical in the same position of three given lists.\n        '''\n        \n        a = len(list1)\n        b = len(list2)\n        c = len(list3)\n        \n        if a==b and b==c:\n            return a\n        elif a==b and b!=c:\n            return a\n        elif a!=b and b==c:\n            return a\n        else:\n            return a\n            \n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i == j:\n                continue\n            elif list1[i] == list2[j] or list2[i] == list3[j]:\n                count = count + 1\n            elif list1[i]!= list2[j]:\n                count = count + 1\n        if count == 3:\n            break\n        count = 0\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1956
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(3):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and i!= j:\n                total += 1\n    return total\n",
        "num_ids": 62
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    elif len(Input) == 1:\n        return 1\n",
        "num_ids": 31
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in Input:\n        if type(i) is list:\n            cnt += 1\n    return cnt\ndef find_lists_2(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            cnt += 1\n    return cnt\ndef find_lists_3(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    cnt = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            cnt += 1\n    return cnt\ndef check_2(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_3(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_4(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    if type(Input) is tuple:\n        if len(Input) == 1:\n            return -1\n        else:\n            for i in range(len(Input)):\n                if type(Input[i]) is tuple:\n                    if len(Input[i]) == 0:\n                        return -1\n                    else:\n                        if type(Input[i][0]) is int:\n                            if Input[i][0] == 0:\n                                return -1\n                            else:\n                                return 1\n                        else:\n                            return 0\ndef check_5(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            if len(Input[i]) == 0:\n                return -1\n            else:\n                if type(Input[i][0]) is int:\n                    if Input[i][0] == 0:\n                        return -1\n                    else:\n                        return 1\n                else:\n                    return 0\ndef check_6(Input):\n    '''\n    Write a function to check the tuple values of the elements.\n    '''\n    if type(Input) is tuple:\n        if len(Input) == 1:\n            return -1\n        else:\n            for i in range(len(Input)):\n                if type(Input[i]) is tuple:\n                    if len(Input[i]) == 0:\n                        return -1\n                    else:\n                        if type(Input[i][0]) is int:\n                            if Input[i][0] == 0:\n                                return -1\n                            else:\n                                return 1\n                        else:\n                            return 0\n",
        "num_ids": 123
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=0\n    for i in range(0, len(Input), 2):\n        if Input[i]==\"[\" and Input[i+1]==\"]\":\n            n=n+1\n    return n\n",
        "num_ids": 53
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n",
        "num_ids": 9
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    ans = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j] == '{' or Input[i][j] == '[' or Input[i][j] == '(':\n                ans += 1\n    return ans\n",
        "num_ids": 75
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    newlist=[]\n    if len(Input) ==0 :\n        return 0\n    else:\n        for item in Input:\n            if type(item) is int:\n                newlist.append(1)\n            else:\n                newlist.append(0)\n        return(newlist.count(1))\n",
        "num_ids": 76
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    tuple = Input\n    return len(tuple)\n",
        "num_ids": 16
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    if len(Input) == 2:\n        if Input[0] not in lst:\n            lst.append(Input[0])\n        if Input[1] not in lst:\n            lst.append(Input[1])\n    elif len(Input) == 3:\n        if Input[0] in lst:\n            if Input[1] in lst:\n                if Input[2] in lst:\n                    return 2\n        elif Input[0] in lst:\n            if Input[1] in lst:\n                if Input[2] in lst:\n                    return 2\n        elif Input[1] in lst:\n            if Input[0] in lst:\n                if Input[2] in lst:\n                    return 2\n        else:\n            if Input[0] in lst:\n                if Input[1] in lst:\n                    if Input[2] in lst:\n                        return 2\n    elif len(Input) == 4:\n        if Input[0] in lst:\n            if Input[1] in lst:\n                if Input[2] in lst:\n                    if Input[3] in lst:\n                        return 2\n        elif Input[0] in lst:\n            if Input[1] in lst:\n                if Input[2] in lst:\n                    if Input[3] in lst:\n                        return 2\n        elif Input[1] in lst:\n            if Input[0] in lst:\n                if Input[2] in lst:\n                    if Input[3] in lst:\n                        return 2\n        else:\n            if Input[0] in lst:\n                if Input[1] in lst:\n                    if Input[2] in lst:\n                        if Input[3] in lst:\n                            return 2\n    return 0\n",
        "num_ids": 442
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=len(Input)\n    if n==0:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = abs(arr[0]-arr[1])\n    for i in range(1, len(arr)):\n        cur_abs_diff = abs(arr[i] - arr[i-1])\n        max_abs_diff = max(cur_abs_diff, max_abs_diff)\n    return max_abs_diff\n",
        "num_ids": 85
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    sum_element = 0\n    for i in range(len(arr)):\n        sum_element = sum_element + arr[i]\n    return sum_element\n",
        "num_ids": 41
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0] - arr[1]\n    min = arr[0] \n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            max = arr[i] - arr[i-1]\n            min = max\n        else:\n            max = arr[i] - arr[i-1]\n            min = arr[i]\n        i+=1\n    return max - min\n",
        "num_ids": 110
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Take the elements of arr as input and store in a variable.\n    arr = arr[:]\n    for i in range(len(arr)):\n        arr[i] = int(arr[i])\n    \n    # Find the maximum difference.\n    max_abs_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        max_abs_diff = max(diff, max_abs_diff)\n    \n    return max_abs_diff\n    \n",
        "num_ids": 131
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs = arr[0]\n    max_abs_index = 0\n",
        "num_ids": 21
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max_Abs_Diff = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                Max_Abs_Diff = arr[j] - arr[i]\n                break\n    return Max_Abs_Diff\n",
        "num_ids": 80
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0: \n        return -1\n    if len(arr) == 1: \n        return abs(arr[0])\n    max_abs_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)): \n        max_abs_diff = max(max_abs_diff, abs(arr[i] - arr[i - 1]))\n    return max_abs_diff \n",
        "num_ids": 109
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # your code goes here\n    maxDiff = abs(arr[0] - arr[1])\n    for i in range(1, len(arr)):\n        maxDiff = max(abs(arr[i] - arr[i-1]), maxDiff)\n    return maxDiff\n",
        "num_ids": 67
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return arr[0] - arr[1]\n    else:\n        max_abs_diff = arr[0] - arr[1]\n        for i in range(2, len(arr)):\n            cur_max_abs_diff = max_abs_diff\n            max_abs_diff = max(max_abs_diff, arr[i] - arr[i-1])\n            cur_max_abs_diff = max(cur_max_abs_diff, arr[i] - arr[i-2])\n        return cur_max_abs_diff\n        \ndef find_minimum(arr):\n    '''\n    Write a python function to find the minimum value in a given array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    else:\n        min_val = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < min_val:\n                min_val = arr[i]\n        return min_val\n",
        "num_ids": 75
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = len(arr)\n    if m == 1: \n        return arr[0] - arr[1] \n    else: \n        # initializing the maximum difference \n        mx = arr[0] - arr[1] \n        \n        # iterating till the second element \n        for i in range(2, m): \n            # update the maximum difference \n            mx = max(mx, arr[i] - arr[i-2]) \n        return mx \n",
        "num_ids": 117
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == n:\n        return (a[0], a[1])\n    else:\n        for i in range(a[0], a[1]+1):\n            for j in range(a[1], a[1]+1):\n                if i + j == n:\n                    return (i, j)\n                elif not(i + j > n):\n                    continue\n                else:\n                    return find_solution(i, j, n)\n",
        "num_ids": 109
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    sols = []\n    for i in range(n):\n        x, y = solution(a, b, i)\n        if x!= None and y!= None:\n            sols.append((x, y))\n    if len(sols) == 0:\n        return None\n    else:\n        return tuple(sols)\n",
        "num_ids": 82
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    import math\n    \n    if n % 2 == 0:\n        return None\n    if n == 0:\n        return a, b\n    a, b = sorted([a, b])\n    diff = b - a\n    x, y = None, None\n    if diff < 0:\n        x = find_solution(b, a - 1, n // 2)\n    else:\n        y = find_solution(a, b - 1, n // 2)\n        if x!= None:\n            return x, y\n        x = find_solution(a - 1, b, n // 2)\n        if y!= None:\n            return x, y\n    return x, y\n    \n    \n",
        "num_ids": 168
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find x and y of the first solution\n    x = find_smallest(a, b, n)\n    y = find_smallest(b, a, n)\n",
        "num_ids": 43
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    x, y = map(int, a.split())\n    if x < 0:\n        return None\n    if x == 0:\n        return y, x\n    if y == 0:\n        return x, y\n    while b % x!= 0:\n        x, y = x - 1, y + 1\n    x = x // b\n    y = y // b\n    if y == 1:\n        return None\n    if y == n:\n        return x, y\n    else:\n        return x, y\n",
        "num_ids": 134
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # A tuple is a collection of any immutable Python objects.\n    x = y = None\n",
        "num_ids": 23
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(n):\n        if a[i]!= n or b[i]!= n:\n            return None\n        if a[i] == n:\n            if b[i] >= n:\n                return (x, n-b[i])\n            x = i\n        if b[i] == n:\n            if a[i] >= n:\n                return (n, x)\n            y = i\n    return (x, y)\n",
        "num_ids": 122
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Step 1\n    x = 0\n    y = 1\n    # Step 2\n    for i in range(n):\n        if a * x + b * y == n:\n            return x, y\n        y = y + 1\n        # Step 3\n        x = x + 1\n",
        "num_ids": 69
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return x, y\n    if a == 0:\n        if b == 1:\n            return x, y\n        if b == 2:\n            return x, y\n        if b == 3:\n            return x, y\n    if b == 0:\n        if a == 1:\n            return x, y\n        if a == 2:\n            return x, y\n        if a == 3:\n            return x, y\n",
        "num_ids": 111
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b == n:\n        return a, b, n\n    if a == b:\n        return None\n    if n % 2 == 0:\n        return find_solution(a, b, n//2)\n    else:\n        return find_solution(a, b, n//2 - 1)\n",
        "num_ids": 77
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list1.remove(i)\n    return list1\n    \nlist1 = [1, 2, 2, 4, 5, 6, 7, 8, 9, 10]\nlist2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n",
        "num_ids": 91
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list1.remove(j)\n    return list1\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print(\"\\nRemove all elements from the given list:\")\n    print(list1)\n    print(list2)\n    print(\"\\n\")\n",
        "num_ids": 38
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list1:\n        list2.remove(x)\n    return list2\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return\n    elif len(list1) > 0 and len(list2) > 0:\n        for i in range(len(list1)):\n            list1.pop(0)\n        return\n    else:\n        print(\"Input lists are empty\")\n",
        "num_ids": 82
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return_list = []\n    for item in list1:\n        if item in list2:\n            list2.remove(item)\n        return_list.append(item)\n    return return_list\n",
        "num_ids": 50
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    newlist = []\n    for i in list1:\n        if i not in list2:\n            newlist.append(i)\n    return newlist\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # list1.sort()\n    # list2.sort()\n    # l1 = list1[0:0]\n    # l2 = list2[0:0]\n    # for i in range(len(list1)):\n    #     for j in range(len(list2)):\n    #         if list1[i] == list2[j]:\n    #             del l2[j]\n    #         else:\n    #             l2.append(list1[i])\n    #     l1.append(l2)\n    #     l2 = []\n    # return l1\n    return [list1.pop(i) for i in range(len(list1)) if list1[i] not in list2]\n    ",
        "num_ids": 178
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += (i*(i+1))//2\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    ans = 0\n    i = 0\n    while i <= n // 2:\n        ans = ans + i + (n-i)\n        i = i + 1\n    return ans\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    return sum_series(n - 1) + sum_series(n - 2)\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Sum up all the numbers in an array and return the sum\n    pass\n",
        "num_ids": 20
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    numbers = []\n    \n    for i in range(0, n, 2):\n        numbers.append(i+1)\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    if n < 0:\n        return 0\n    while n >= 2:\n        s += (n - 2*i) + (n-4)\n        i+=1\n        n-=2\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4)\n",
        "num_ids": 18
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    j = n // 2\n    sum = 0\n    while j <= n:\n        sum = sum + (n - (j + i))\n        i = i + 1\n        j = j + i\n    return sum\n",
        "num_ids": 58
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 2*sum_series(n-1)) + (sum_series(n-1) + sum_series(n-2))\n",
        "num_ids": 52
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n,0,-1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(s-l)**2)/2\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for k in range(len(l)):\n        area += (s * (l[k] / 2))\n    return area\n",
        "num_ids": 38
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*(l*2+2)/3\n    pass\n",
        "num_ids": 18
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return sum([(1/2) * l * tan(2 * n / l) * pi for n in range(l)])\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(l) > 4:\n        print(\"The lenght of the polygon must be less than 4.\\n\")\n    else:\n        a = pi * (l[0] * (l[0] + l[1]) / 2)\n        b = pi * (l[0] * (l[0] + l[2]) / 2)\n        c = pi * (l[1] * (l[1] + l[2]) / 2)\n        d = pi * (l[1] * (l[1] + l[3]) / 2)\n        e = pi * (l[2] * (l[2] + l[3]) / 2)\n        f = pi * (l[2] * (l[2] + l[4]) / 2)\n        g = pi * (l[3] * (l[3] + l[4]) / 2)\n        h = pi * (l[3] * (l[3] + l[5]) / 2)\n        area = a + b + c + d + e + f + g + h\n        return area\n",
        "num_ids": 260
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(s):\n        area += (l * (i + 1) + (1 - i) * l)\n    return area\n",
        "num_ids": 43
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 3 * s * (l ** 2) / 2\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # write your code here\n    return sum([(2*s)/(l**2), (2*s)/((l**2)*(l+2)), (2*s)/(l**2)]*l)\n",
        "num_ids": 52
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * l * s**2\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # The area is the sum of square of the area of the outer edges of the polygon\n    area = 0.0\n    for i in range(1, len(s)):\n        area += pow(s[i], 2)\n    return area * (1 / 4) * pow(l, 2)\n",
        "num_ids": 73
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = n-1 # Getting the first number minus 1 to know the result\n    if n%2==0: # Checking if the first number is even\n        return False\n    else: # Checking if the first number is odd\n        return True\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime or not.\n    '''\n    if n>1: # Checking if n is not 0\n        for i in range(2,n): # Checking each number from 2 to n\n            if n%i==0: # If number is divisible by i then it is not a prime number\n                return False # If the number is divisible by i then it is not a prime number\n    else:\n        return False # If the number is 0 then it is not a prime number\n    return True # If the number is 1 then it is not a prime number\n",
        "num_ids": 117
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # your code goes here\n    # my code goes here\n    \n    return (sum(int(i) for i in str(n)) == sum(int(j) for j in str(n)))\n",
        "num_ids": 49
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    elif n % 2 == 0:\n        return div_sum(n//2)\n    else:\n        return div_sum(n-1)\n    #elif n % 2!= 0:\n        #return div_sum(n//2)\n",
        "num_ids": 85
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return \"0\"\n    elif n == 1: \n        return \"1\"\n    else:\n        d = n//math.gcd(n,2)\n        if d == 0:\n            return \"0\"\n        elif d == 1:\n            return \"1\"\n        else:\n            divisors = [2,3,5]\n            index = 0\n            while index < len(divisors):\n                if divisors[index] == d:\n                    index += 1\n                elif divisors[index] < d:\n                    index += 1\n                else:\n                    return \"0\"\n            return \"1\"\n",
        "num_ids": 161
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total == n\n    \ndef is_prime(n):\n    '''\n    Return True if n is a prime number, or False otherwise. A prime number is a natural number greater than 1.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n == 4 or n == 5:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_anagram(a, b):\n    '''\n    Returns True if the two strings are anagrams, and False otherwise.\n    '''\n    if len(a)!= len(b):\n        return False\n    for i in range(0, len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n        \ndef is_palindrome(n):\n    '''\n    Returns True if the number n is a palindrome, or False otherwise.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 10 == 0:\n        return True\n    if n % 10 > 5:\n        return False\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n == 1):\n        return False\n    if (n % 2 == 0):\n        return False\n    \n    s = 1\n    k = n // 2\n    for i in range(1, k+1):\n        if (k % i == 0):\n            if (i % 2 == 0):\n                return False\n            else:\n                s *= i\n    return s == n\n    \ndef is_prime(n):\n    if (n < 2):\n        return False\n    if (n == 2):\n        return True\n    if (n % 2 == 0):\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if (n % i == 0):\n            return False\n    return True\n",
        "num_ids": 184
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = {}\n    for i in range(1,int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            divisors[i] = divisors.get(i,0) + 1\n    return divisors[n // math.sqrt(n)] == 1\n",
        "num_ids": 79
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    i = 2\n    while i <= math.sqrt(n):\n        if n%i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # open and read file\n    with open(str1, 'r') as f: \n        txt = f.read()\n    # count characters and check if there are any spaces\n    c = txt.count(\" \")\n    return c\n",
        "num_ids": 59
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #create an empty dictionary to store the character counts in. \n    dict = {}\n    #iterate through the string and look at the position of each character in the string\n    for i in str1: \n        if i.isalpha(): \n            if i not in dict: \n                dict[i] = 0 \n            dict[i] += 1 \n    #count the total of characters in dictionary. \n    return len(dict)\n",
        "num_ids": 105
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = str1.lower()\n    count = 0\n    for i in range(len(str2)):\n        if str2[i] == str2[i].lower():\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            count += 1\n    return count\n    \ndef count_chars_in_string(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i in alphabet:\n            count += 1\n    return count\n    \ndef num_repeated_characters(str1): \n    '''\n    Write a function to count the number of repeating characters in a string that occur in the same order as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            for j in range(len(alphabet)):\n                if str1[i] == alphabet[j]:\n                    if j!= i:\n                        count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for ch in str1:\n        if str1.count(ch) > 1:\n            count += 1\n    return count \n",
        "num_ids": 38
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    print(\"\\nPrinting the number of times an character occurs at a certain position in a string as a count, as in the English alphabet: \")\n    print(\"1. With. Count\")\n    print(\"2. Without. Count\")\n    print(\"3. Printing the count of the character in a string\")\n    print(\"4. Printing the count of the character in a string, with a character located at the same position in the English alphabet\")\n    print(\"5. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"6. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet\")\n    print(\"7. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"8. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"9. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"10. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"11. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"12. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"13. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"14. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"15. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"16. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"17. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"18. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"19. Printing the count of the character in a string, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed, with a character located at the same position in the English alphabet, and reversed\")\n    print(\"20. Printing the count of the character i",
        "num_ids": 1998
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counts = {}\n    for c in str1:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create the dictionary of lower case alphabets\n    lower_alphabet_dict = {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0}\n    # create the dictionary of upper case alphabets\n    upper_alphabet_dict = {\"A\": 0, \"B\": 0, \"C\": 0, \"D\": 0, \"E\": 0, \"F\": 0, \"G\": 0, \"H\": 0, \"I\": 0, \"J\": 0, \"K\": 0, \"L\": 0, \"M\": 0, \"N\": 0, \"O\": 0, \"P\": 0, \"Q\": 0, \"R\": 0, \"S\": 0, \"T\": 0, \"U\": 0, \"V\": 0, \"W\": 0, \"X\": 0, \"Y\": 0, \"Z\": 0}\n    # create the dictionary of letters of the alphabet\n    alphabet_dict = {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0}\n    count = 0\n    # iterate over the string\n    for char in str1: \n        # if char is an alphabet, add to the dictionary\n        if char in lower_alphabet_dict:\n            lower_alphabet_dict[char] += 1\n        elif char in upper_alphabet_dict:\n            upper_alphabet_dict[char] += 1\n        else: \n            if char in alphabet_dict:\n                alphabet_dict[char] += 1\n    # loop over the dictionary\n    for key in alphabet_dict:\n        count += alphabet_dict[key] * lower_alphabet_dict[key] * upper_alphabet_dict[key]\n    # return the number of characters\n    return count\n",
        "num_ids": 623
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            for j in alphabet:\n                if str1[i] == j:\n                    count += 1\n        else:\n            count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # 1. Make a variable called char_pos \n    # 2. Create a for loop that goes through each char of the string \n    # 3. Return a single integer\n    # 4. Use the function to return the number of occurances of a char at the same position \n    #5. Use the function to return the number of occurances of a char at a different position in a string\n    char_pos = 0\n    for char in str1: \n        if char.isalpha():\n            char_pos += 1\n    return char_pos\n",
        "num_ids": 127
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    if (len(A) % 2 == 0):\n        for i in range(0, len(A) // 2):\n            if A[i] ^ A[i + 1] == 0:\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] == A[j] or A[i] % 2 == 0:\n                even += 1\n    return even\n    \ndef find_sum(A):\n    '''\n    Write a function that returns the sum of A.\n    '''\n    sum = 0\n    for i in range(len(A)):\n        sum += A[i]\n    return sum\n    \ndef find_count(A, b):\n    '''\n    Write a function that returns the number of pairs of integers A[i] and B[i], that sum up to b.\n    '''\n    sum = 0\n    for i in range(len(A)):\n        sum += A[i] * b\n    return sum\n    \ndef find_odd_pair(A):\n    '''\n    Write a function that returns the number of pairs of integers A[i] and B[i], that sum up to b.\n    '''\n    sum = 0\n    for i in range(len(A)):\n        sum += A[i] * 2\n    return sum\n    \ndef find_average(A):\n    '''\n    Write a function that returns the average of A.\n    '''\n    return sum(A)/len(A)\n    \ndef find_sum_of_squares(A):\n    '''\n    Write a function that returns the sum of squares of A.\n    '''\n    sum = 0\n    for i in range(len(A)):\n        sum += (A[i] ** 2)\n    return sum\n    \ndef find_product(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    prod = 1\n    for i in range(len(A)):\n        prod *= A[i] * B[i]\n    return prod\n    \ndef find_product_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    prod = 1\n    for i in range(len(A)):\n        prod *= A[i] ** 2\n    for j in range(len(B)):\n        prod *= B[j] ** 2\n    return prod\n    \ndef find_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the sum of squares of A and B.\n    '''\n    return find_sum_of_squares(A) * find_sum_of_squares(B)\n    \ndef find_average_of_squares(A):\n    '''\n    Write a function that returns the average of A.\n    '''\n    return find_sum_of_squares(A)/len(A)\n    \ndef find_product_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    return find_product_of_squares(A, B)\n    \ndef find_product_of_squares_of_squares_with_sum(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    prod = find_product_of_squares(A, B)\n    return prod * (prod + find_sum_of_squares_of_squares(A, B)) / 2\n    \ndef find_product_of_squares_of_squares_with_sum_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    prod = 1\n    for i in range(len(A)):\n        prod *= A[i] ** 2\n    prod *= B\n    return prod\n    \ndef find_product_of_squares_of_squares_with_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    prod = 1\n    for i in range(len(A)):\n        prod *= A[i] ** 2\n    for i in range(len(B)):\n        prod *= B[i] ** 2\n    return prod\n    \ndef find_sum_of_squares_of_squares_with_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the sum of squares of A and B.\n    '''\n    return find_sum_of_squares(A) * find_sum_of_squares(B)\n    \ndef find_product_of_squares_of_squares_with_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    prod = 1\n    for i in range(len(A)):\n        prod *= A[i] ** 2\n    for i in range(len(B)):\n        prod *= B[i] ** 2\n    return prod\n    \ndef find_sum_of_squares_of_squares_with_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the sum of squares of A and B.\n    '''\n    return find_sum_of_squares(A) * find_sum_of_squares(B)\n    \ndef find_product_of_squares_of_squares_with_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    return find_product_of_squares(A, B)\n    \ndef find_sum_of_squares_of_squares_with_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the sum of squares of A and B.\n    '''\n    return find_sum_of_squares(A) * find_sum_of_squares(B)\n    \ndef find_product_of_squares_of_squares_with_sum_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    return find_product_of_squares(A, B)\n    \ndef find_product_of_squares_of_squares_with_sum_of_squares_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    return find_product_of_squares(A, B) * (find_sum_of_squares_of_squares(A, B) + find_product_of_squares_of_squares(A, B))\n    \ndef find_sum_of_squares_of_squares_with_sum_of_squares_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the sum of squares of A and B.\n    '''\n    return find_sum_of_squares(A) * find_sum_of_squares(B)\n    \ndef find_product_of_squares_of_squares_with_sum_of_squares_of_squares_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the product of A and B, respectively.\n    '''\n    return find_product_of_squares(A, B)\n    \ndef find_sum_of_squares_of_squares_with_sum_of_squares_of_squares_of_squares_of_squares_of_squares(A, B):\n    '''\n    Write a function that returns the sum of squares of A and B.\n    '''\n    return find_sum_of_squares(A) * find_sum_of_squares(B)\n    \ndef find_product_of_squares_of_squares",
        "num_ids": 44
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    odd_pair = 0\n    for i in range(0, len(A)-1, 2):\n        if A[i] ^ A[i+1] == 0:\n            even_pair += 1\n        else:\n            odd_pair += 1\n    return even_pair, odd_pair\n",
        "num_ids": 78
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            even_pairs += 1\n    return even_pairs\n",
        "num_ids": 49
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if A[i] == A[j]:\n                even_pairs += 1\n            else:\n                break\n    return even_pairs\n",
        "num_ids": 74
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # def find_even_pair(A):\n    #     xor_sum = 0\n    #     for i in range(0,len(A)):\n    #         for j in range(i+1,len(A)):\n    #             if A[i] & A[j] == 0:\n    #                 xor_sum += 1\n    #     return xor_sum\n",
        "num_ids": 94
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair += 1\n    return even_pair\n",
        "num_ids": 63
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]&A[j] == 0:\n                pair_count+=1\n    return pair_count\ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]&A[j] == 0:\n                pair_count+=1\n    return pair_count",
        "num_ids": 64
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_counter = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] == A[j]:\n                even_counter += 1\n    return even_counter\n",
        "num_ids": 62
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        if i % 2 == 0:\n            count = count + 1\n    return count \n",
        "num_ids": 35
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # code to solve above problem\n    if n == 1:\n        return 2\n    elif n <= 2:\n        return 1\n    else:\n        return n * next_power_of_2(n-1)\n",
        "num_ids": 54
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # write your code here\n    i = 0\n    max = 1\n    while i < n:\n        if i == 0:\n            max = i\n        i += 1\n    \n    print(f'The smallest power of 2 greater than or equal to {n} is {max}')\n",
        "num_ids": 71
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    elif n % 2 == 0: \n        return next_power_of_2(n // 2) + 1\n    else: \n        return next_power_of_2(n - 1) + 1\n",
        "num_ids": 64
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1: \n        return 0 \n    if n % 2 == 0: \n        return 1\n    return next_power_of_2(n // 2) + 1\n",
        "num_ids": 46
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n_string = str(n)\n    if n_string.isdigit():\n        return int(n_string)\n    else:\n        return \"Invalid Input\"\n",
        "num_ids": 43
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    ans = n \n    while ans > 1:\n        ans //= 2\n        if ans % 2 == 0:\n            return ans + 1\n    return ans\n",
        "num_ids": 40
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    s = 2\n    while s**2 <= n:\n        s *= 2\n    return s\n    # Do not remove the below line\n    # return s\n",
        "num_ids": 40
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Check for base case\n    if n == 1 or n == 0: \n        return 1\n    \n    # If n is a power of 2, return 1 \n    if n % 2 == 0: \n        return 2\n    \n    # Find the smallest power of 2 \n    return n * next_power_of_2(n / 2)\n",
        "num_ids": 86
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Check for n < 0 and return None.\n    if n < 0: return None\n    if n == 0: return 0\n    \n    # if n == 1: return 1\n    # if n == 2: return 2\n    # if n == 3: return 3\n    \n    # if n == 4: return 4\n    # if n == 5: return 5\n    # if n == 6: return 6\n    # if n == 7: return 7\n    # if n == 8: return 8\n    # if n == 9: return 9\n    \n    # if n == 10: return 10\n    # if n == 11: return 11\n    # if n == 12: return 12\n    # if n == 13: return 13\n    # if n == 14: return 14\n    # if n == 15: return 15\n    # if n == 16: return 16\n    # if n == 17: return 17\n    # if n == 18: return 18\n    # if n == 19: return 19\n    # if n == 20: return 20\n    # if n == 21: return 21\n    # if n == 22: return 22\n    # if n == 23: return 23\n    # if n == 24: return 24\n    # if n == 25: return 25\n    # if n == 26: return 26\n    # if n == 27: return 27\n    # if n == 28: return 28\n    # if n == 29: return 29\n    # if n == 30: return 30\n    # if n == 31: return 31\n    # if n == 32: return 32\n    # if n == 33: return 33\n    # if n == 34: return 34\n    # if n == 35: return 35\n    # if n == 36: return 36\n    # if n == 37: return 37\n    # if n == 38: return 38\n    # if n == 39: return 39\n    # if n == 40: return 40\n    # if n == 41: return 41\n    # if n == 42: return 42\n    # if n == 43: return 43\n    # if n == 44: return 44\n    # if n == 45: return 45\n    # if n == 46: return 46\n    # if n == 47: return 47\n    # if n == 48: return 48\n    # if n == 49: return 49\n    # if n == 50: return 50\n    # if n == 51: return 51\n    # if n == 52: return 52\n    # if n == 53: return 53\n    # if n == 54: return 54\n    # if n == 55: return 55\n    # if n == 56: return 56\n    # if n == 57: return 57\n    # if n == 58: return 58\n    # if n == 59: return 59\n    # if n == 60: return 60\n    # if n == 61: return 61\n    # if n == 62: return 62\n    # if n == 63: return 63\n    # if n == 64: return 64\n    # if n == 65: return 65\n    # if n == 66: return 66\n    # if n == 67: return 67\n    # if n == 68: return 68\n    # if n == 69: return 69\n    # if n == 70: return 70\n    # if n == 71: return 71\n    # if n == 72: return 72\n    # if n == 73: return 73\n    # if n == 74: return 74\n    # if n == 75: return 75\n    # if n == 76: return 76\n    # if n == 77: return 77\n    # if n == 78: return 78\n    # if n == 79: return 79\n    # if n == 80: return 80\n    # if n == 81: return 81\n    # if n == 82: return 82\n    # if n == 83: return 83\n    # if n == 84: return 84\n    # if n == 85: return 85\n    # if n == 86: return 86\n    # if n == 87: return 87\n    # if n == 88: return 88\n    # if n == 89: return 89\n    # if n == 90: return 90\n    # if n == 91: return 91\n    # if n == 92: return 92\n    # if n == 93: return 93\n    # if n == 94: return 94\n    # if n == 95: return 95\n    # if n == 96: return 96\n    # if n == 97: return 97\n    # if n == 98: return 98\n    # if n == 99: return 99\n    # if n == 100: return 100\n    # if n == 101: return 101\n    # if n == 102: return 102\n    # if n == 103: return 103\n    # if n == 104: return 104\n    # if n == 105: return 105\n    # if n == 106: return 106\n    # if n == 107: return 107\n    # if n == 108: return 108\n    # if n == 109: return 109\n    # if n == 110: return 110\n    # if n == 111: return 111\n    # if n == 112: return 112\n    # if n == 113: return 113\n    # if n == 114: return 114\n    # if n == 115: return 115\n    # if n == 116: return 116\n    # if n == 117: return 117\n    # if n == 118: return 118\n    # if n == 119: return 119\n    # if n == 120: return 120\n    # if n == 121: return 121\n    # if n == 122: return 122\n    # if n == 123: return 123\n    # if n == 124: return 124\n    # if n == 125: return 125\n    # if n == 126: return 126\n    # if n == 127: return 127\n    # if n == 128: return 128\n    # if n == 129: return 129\n    # if n == 130: return 130\n    # if n == 131: return 131\n    # if n == 132: return 132\n    # if n == 133: return 133\n    # if n == 134: return 134\n    # if n == 135: return 135\n    # if n == 136: return 136\n    # if n == 137: return 137\n    # if n == 138: return 138\n    # if n == 139: return 139\n    # if n == 140: return 140\n    # if n == 141: return 141\n    # if n == 142: return 142\n    # if n == 143: return 143\n    # if n == 144: return 144\n    # if n == 145: return 145\n    # if n == 146: return 146\n    # if n == 147: return 147\n    # if n == 148: return 148\n    # if n == 149: return 149\n    # if n == 150: return 150\n    # if n == 151: return 151\n    # if n == 152: return 152\n    # if n == 153: return 153\n    # if n == 154: return 154\n    # if n == 155: return 155\n    # if n == 156: return 156\n    # if n == 157: return 157\n    # if n == 158: return 158\n    # if n == 159: return 159\n    # if n == 160: return 160\n    # if n == 161: return 161\n    # if n == 162: return 162\n    # if n == 163: return 163\n    # if n == 164: return 164\n    # if n == 165: return 165\n    # if n == 166: return 166\n    # if n == 167: return 167\n    # if n == 168: return 168\n    # if n == 169: return 169\n    # if n == 170: return 170\n    # if n == 171: return 171\n    # if n == 172: return 172\n    # if n == 173: return 173\n    # if n == 174: return 174\n    # if n == 175: return 175\n    # if n == 176: return 176\n    # if n == 177: return 177\n    # if n == 178: return 178\n    # if n == 179: return 179\n    # if n == 180: return 180\n    # if n == 181: return 181\n    # if n == 182: return 182\n    # if n == 183: return 183\n    # if n == 184: return 184\n    # if n == 185: return 185\n    # if n == 186: return 186\n    # if n == 187: return 187\n    # if n == 188: return 188\n    # if n == 189: return 189\n    # if n == 190: return 190\n    # if n == 191: return 191\n    # if n == 192: return 192\n    # if n == 193: return 193\n    # if n == 194: return 194\n    # if n == 195: return 195\n    # if n == 196: return 196\n    # if n == 197: return 19",
        "num_ids": 2009
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=2\n    while i<=n:\n        if n%i==0:\n            return n//i\n        i+=1\n    return \"No such number exists\"\n",
        "num_ids": 44
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    result = 0\n    for i in a:\n        if i==x:\n            result += 1\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            f+=1\n    return f\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.sort()\n    dic = {}\n    count = 0\n    for i in a:\n        if x in dic:\n            dic[x] = dic[x]+1\n        else:\n            dic[x] = 1\n    for key in dic:\n        count = count + dic[key]\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == a[x]:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n):\n        total += list1[i]\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n):                                                                                                                \n        total += list1[i]\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n):\n        total = total + list1[i]\n    print(total)\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    if n == 0:\n        return 0\n    if m == 0:\n        return 0\n    for i in range(n):\n        total += list1[i]\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    import numpy as np\n    \n    sum = 0\n    \n    for i in range(n):\n        sum = sum + list1[i]\n    \n    return sum\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ",
        "num_ids": 1999
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum = sum + list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Write your code here\n    s = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j:\n                s += list1[i]\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s=0\n    for i in range(m,n):\n        s+=list1[i]\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if type(a) == int or type(a) == float:\n        return 0\n    if type(a)!= list:\n        raise TypeError('A must be a list of floats or ints')\n    if len(a) < 2 or len(a) > 6:\n        raise TypeError('A must be a list of length at least 2 and at most 6')\n",
        "num_ids": 88
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (2*a*math.cos(math.pi/5)) + (2*a*math.cos(math.pi/4)) + (2*a*math.cos(math.pi/3)) + (2*a*math.cos(math.pi/2)) + (2*a*math.cos(math.pi/1.5))\n    return perimeter\n",
        "num_ids": 92
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        return 0\n    elif a == 0:\n        return math.sqrt(3)\n    else:\n        return (math.sqrt(3) * a) + (math.sqrt(3) * (a + 1))\n",
        "num_ids": 64
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    p = (side1 + side2 + side3 + side4) / 2\n    return p\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    a = (side1**2 + side2**2 + side3**2 + side4**2)**0.5\n    return a\ndef volume_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**3 + side2**3 + side3**3 + side4**3)**0.5\n    return v\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**4 + side2**4 + side3**4 + side4**4)**0.5\n    return v\ndef volume_sphere(a):\n    '''\n    Write a function to find the volume of a sphere from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**3 + side2**3 + side3**3 + side4**3)**0.5\n    return v\ndef volume_cylinder(a):\n    '''\n    Write a function to find the volume of a cylinder from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**2 + side2**2 + side3**2 + side4**2)**0.5\n    return v\ndef surface_volume(a):\n    '''\n    Write a function to find the surface volume of a cube from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**3 + side2**3 + side3**3 + side4**3)**0.5\n    return v\ndef volume_trapeze(a):\n    '''\n    Write a function to find the volume of a trapeze from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**4 + side2**4 + side3**4 + side4**4)**0.5\n    return v\ndef volume_elliptic(a):\n    '''\n    Write a function to find the volume of an elliptic trapeze from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**2 + side2**2 + side3**2 + side4**2)**0.5\n    return v\ndef volume_hexagon(a):\n    '''\n    Write a function to find the volume of a hexagon from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**3 + side2**3 + side3**3 + side4**3)**0.5\n    return v\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**2 + side2**2 + side3**2 + side4**2)**0.5\n    return v\ndef volume_sphere_truncated(a):\n    '''\n    Write a function to find the volume of a sphere truncated from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**3 + side2**3 + side3**3 + side4**3)**0.5\n    return v\ndef volume_polygon(a):\n    '''\n    Write a function to find the volume of a polygon from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    v = (side1**3 + side2**3 + side3**3 + side4**3)**0.5\n    return v\ndef area_parallelogram(a):\n    '''\n    Write a function to find the area of a parallelogram from the length of its sides.\n    '''\n    # the length of the sides\n    side1 = int(a)\n    side2 = int(a*5/6)\n    side3 = int(a*7/6)\n    side4 = int(a*9/6)\n    # print(side1, side2, side3, side4)\n    a = (side1**2 + side2**2 + side3**2 + side4**2)**0.5\n    return a\ndef area_elliptic(a):\n    '''\n    Write a function to find the area of an elliptic trapeze from the length of its sides.\n    '''\n    # th",
        "num_ids": 5
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\ndef area_of_circle(radius):\n    '''\n    This function calculates the area of a circle.\n    '''\n    return math.pi*radius*radius\ndef perimeter_triangle(a,b):\n    '''\n    This function calculates the perimeter of a triangle.\n    '''\n    return a+b+math.sqrt(a*a+b*b)\ndef area_of_triangle(a,b):\n    '''\n    This function calculates the area of a triangle.\n    '''\n    return a*b*math.sqrt(a+b+0.0000001)\ndef area_of_equilateral_triangle(a,b,c):\n    '''\n    This function calculates the area of a equilateral triangle.\n    '''\n    return a*b*c\ndef area_of_equilateral_triangle2(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return math.sqrt(a*a+b*b+c*c)\ndef area_of_rectangle(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*width\ndef area_of_square(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*length\ndef area_of_pentagon(a):\n    '''\n    This function calculates the area of a pentagon.\n    '''\n    return (4/3)*a*a*a\ndef area_of_triangle2(a,b):\n    '''\n    This function calculates the area of a triangle.\n    '''\n    return a*b*math.sqrt(a+b+0.0000001)\ndef area_of_equilateral_triangle(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return a*b*c\ndef area_of_rectangle(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*width\ndef area_of_square(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*length\ndef perimeter_circle(radius):\n    '''\n    This function calculates the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef area_of_circle(radius):\n    '''\n    This function calculates the area of a circle.\n    '''\n    return math.pi*radius*radius\ndef perimeter_pentagon(a):\n    '''\n    This function calculates the perimeter of a pentagon.\n    '''\n    return a*6\ndef area_of_pentagon(a):\n    '''\n    This function calculates the area of a pentagon.\n    '''\n    return a*3.141592*a\ndef perimeter_triangle(a,b):\n    '''\n    This function calculates the perimeter of a triangle.\n    '''\n    return a+b+math.sqrt(a*a+b*b)\ndef area_of_triangle(a,b):\n    '''\n    This function calculates the area of a triangle.\n    '''\n    return a*b*math.sqrt(a+b+0.0000001)\ndef area_of_equilateral_triangle(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return a*b*c\ndef area_of_equilateral_triangle2(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return math.sqrt(a*a+b*b+c*c)\ndef area_of_rectangle(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*width\ndef area_of_square(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*length\ndef perimeter_circle(radius):\n    '''\n    This function calculates the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef area_of_circle(radius):\n    '''\n    This function calculates the area of a circle.\n    '''\n    return math.pi*radius*radius\ndef area_of_pentagon(a):\n    '''\n    This function calculates the area of a pentagon.\n    '''\n    return a*6\ndef perimeter_triangle(a,b):\n    '''\n    This function calculates the perimeter of a triangle.\n    '''\n    return a+b+math.sqrt(a*a+b*b)\ndef area_of_triangle(a,b):\n    '''\n    This function calculates the area of a triangle.\n    '''\n    return a*b*math.sqrt(a+b+0.0000001)\ndef area_of_equilateral_triangle(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return a*b*c\ndef area_of_equilateral_triangle2(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return math.sqrt(a*a+b*b+c*c)\ndef area_of_rectangle(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*width\ndef area_of_square(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*length\ndef perimeter_circle(radius):\n    '''\n    This function calculates the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef area_of_circle(radius):\n    '''\n    This function calculates the area of a circle.\n    '''\n    return math.pi*radius*radius\ndef area_of_pentagon(a):\n    '''\n    This function calculates the area of a pentagon.\n    '''\n    return a*6\ndef perimeter_triangle(a,b):\n    '''\n    This function calculates the perimeter of a triangle.\n    '''\n    return a+b+math.sqrt(a*a+b*b)\ndef area_of_triangle(a,b):\n    '''\n    This function calculates the area of a triangle.\n    '''\n    return a*b*math.sqrt(a+b+0.0000001)\ndef area_of_equilateral_triangle(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return a*b*c\ndef area_of_equilateral_triangle2(a,b,c):\n    '''\n    This function calculates the area of an equilateral triangle.\n    '''\n    return math.sqrt(a*a+b*b+c*c)\ndef area_of_rectangle(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*width\ndef area_of_square(length,width):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    return length*length\ndef perimeter_circle(radius):\n    '''\n    This function calculates the perimeter of a circle.\n    '''\n    return 2*math.pi*radius\ndef area_of_circle(radius):\n    '''\n    This function calculates the area of a circle.\n    '''\n    return math.pi*radius*radius\ndef area_of_pentagon(a):\n    '''\n    This function calculates the area of a pentagon.\n    '''\n    return a*6\ndef perimeter_triangle(a,b):\n    '''\n    This function calculates the perimeter of a triangle.\n    '''\n    return a+b+math.sqrt(a*a+b*b)\ndef area_of_triangle(a,b):\n    '''\n    This function calculates the area of a triangle.\n    '''\n    return a*b*math.sqrt(a+b+0.0000001)\ndef area_of_eq",
        "num_ids": 29
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = len(a)\n    if n < 3:\n        return 0\n    return 2 * (n - 1) * math.pi\n",
        "num_ids": 35
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\ndef area_circle(r):\n    '''\n    Function to find the area of a circle from the radius of its center.\n    '''\n    return math.pi*r*r\ndef area_square(a):\n    '''\n    Function to find the area of a square from the length of its sides.\n    '''\n    return math.sqrt(a)\ndef area_rectangle(h,l):\n    '''\n    Function to find the area of a rectangle from the height and the width of its sides.\n    '''\n    return h*l\ndef area_hexagon(a):\n    '''\n    Function to find the area of a hexagon from the base and the height of its sides.\n    '''\n    return a*6\ndef area_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*3\ndef area_heptaagon_rect(h,l):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return h*l*3\ndef area_heptaagon_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*3\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*3*3\ndef area_heptaagon_rect_heptaagon(h,l):\n    '''\n    Function to find the area of a rectangle from the height and the length of its sides.\n    '''\n    return h*l*6\ndef area_heptaagon_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*3*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6\ndef area_heptaagon_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*3\ndef area_heptaagon_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6\ndef area_heptaagon_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*3\ndef area_heptaagon_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*3\ndef area_heptaagon_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6*3\ndef area_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_rect(h,l):\n    '''\n    Function to find the area of a rectangle from the height and the length of its sides.\n    '''\n    return h*l*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6\ndef area_heptaagon_rect_heptaagon(h,l):\n    '''\n    Function to find the area of a rectangle from the height and the length of its sides.\n    '''\n    return h*l*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_rect(h,l):\n    '''\n    Function to find the area of a rectangle from the height and the length of its sides.\n    '''\n    return h*l*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaagon_heptaagon(a):\n    '''\n    Function to find the area of a heptaagon from the base and the height of its sides.\n    '''\n    return a*6*6*6*6\ndef area_heptaagon_heptaago",
        "num_ids": 24
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    side_a = int(math.sqrt(a))\n    side_b = int(a/3)\n    return side_a*side_a + side_b*side_b\n",
        "num_ids": 47
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(2*a*a+3*a*(a+1))\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return math.sqrt(2*a*a+4*a)\ndef perimeter_square_2(a,b):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides, with an additional parameter b.\n    '''\n    return math.sqrt(2*a*a+4*a*b+4*a*b*b+4*a*b*b*(a+1))\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    return 3*a*a+4*a*a+3*a\ndef perimeter_triangle_2(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides, with an additional parameter c.\n    '''\n    return 3*a*a+3*a*b+4*a*c+3*a*(a+1)+3*a*(b+1)+3*a*(c+1)\ndef perimeter_triangle_3(a,b,c):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides, with an additional parameter c.\n    '''\n    return 3*a*a+3*a*b+3*a*c+4*a*b*b+4*a*(a+1)+3*a*b*(b+1)+3*a*(c+1)\ndef perimeter_pentagon_2(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(2*a*a+3*a*(a+1))\ndef perimeter_pentagon_3(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+4*a*b*c*d+2*a*b*c*d*d+4*a*a*b*(a+1)+4*a*a*b*(b+1)+4*a*a*b*c*(c+1)+4*a*a*b*d*(d+1))\ndef perimeter_pentagon_3_2(a,b,c,d):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+4*a*b*c*d+4*a*b*c*d*d+6*a*a*b*(a+1)+6*a*a*b*(b+1)+6*a*a*b*c*(c+1)+6*a*a*b*d*(d+1))\ndef perimeter_pentagon_4(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+4*a*b*c*d+6*a*b*c*d*d+6*a*a*b*(a+1)+8*a*a*b*(b+1)+8*a*a*b*c*(c+1)+8*a*a*b*d*(d+1)+8*a*a*b*e*(e+1)+8*a*a*b*f*(f+1))\ndef perimeter_pentagon_4_2(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+6*a*b*c*d+6*a*b*c*d*d+6*a*a*b*(a+1)+8*a*a*b*(b+1)+8*a*a*b*(c+1)+8*a*a*b*d*(d+1)+8*a*a*b*e*(e+1)+8*a*a*b*f*(f+1))\ndef perimeter_pentagon_4_3(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+6*a*b*c*d+6*a*b*c*d*d+6*a*a*b*(a+1)+8*a*a*b*(b+1)+8*a*a*b*(c+1)+8*a*a*b*(d+1)+8*a*a*b*e*(e+1)+8*a*a*b*f*(f+1))\ndef perimeter_pentagon_5(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+6*a*b*c*d+6*a*b*c*d*d+6*a*a*b*(a+1)+8*a*a*b*(b+1)+8*a*a*b*(c+1)+8*a*a*b*(d+1)+8*a*a*b*(e+1)+8*a*a*b*f*(f+1))\ndef perimeter_pentagon_5_2(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+6*a*b*c*d+6*a*b*c*d*d+6*a*a*b*(a+1)+8*a*a*b*(b+1)+8*a*a*b*(c+1)+8*a*a*b*(d+1)+8*a*a*b*(e+1)+8*a*a*b*f*(f+1))\ndef perimeter_pentagon_6(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+6*a*b*c*d+6*a*b*c*d*d+6*a*a*b*(a+1)+8*a*a*b*(b+1)+8*a*a*b*(c+1)+8*a*a*b*(d+1)+8*a*a*b*(e+1)+8*a*a*b*(f+1))\ndef perimeter_pentagon_6_2(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides, with additional parameters.\n    '''\n    return math.sqrt(2*a*a+6*a*b*c*d+6*a*b*c*d*d+6*a*a*b*(a+1)+8*a*a*b*(b+1)+8*a*a*b*(c+1)+8*a*a*b*(d+1)+8*a*a*b*(e+1)+8*a*a*b*(f+1))\ndef perimeter_square_2(a,b):\n    '''\n    Write a function to find the perimeter of a regular square fro",
        "num_ids": 15
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #define the length\n    l = a * math.sqrt(3)\n    #define the area\n    a = 4 * math.pi * l\n    #set a to the area\n    a = a\n    #print a\n    #print(a)\n    return a\n",
        "num_ids": 67
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count_std = 0\n    count_std = s.count(std)\n    return count_std\n    \nprint(count_occurance('sdsdsdsd'))\nprint(count_occurance('std'))\nprint(count_occurance('abcdef')",
        "num_ids": 67
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occur = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            occur += 1\n    return occur",
        "num_ids": 40
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    #string = str(input(\"Enter the string : \"))\n    string = s\n    for i in range(len(string)):\n        if string[i] =='s' or string[i] == 'S':\n            count += 1\n    print(\"The number of occurence of string's' in the given string : \", count)\n    print(\"The number of occurence of string 'S' in the given string : \", count)\n    print(\"The number of occurence of string'std' in the given string : \", count)\n    print(\"The number of occurence of string'std' in the given string : \", count)\n    return count\n",
        "num_ids": 159
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurence = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            occurence += 1\n    return occurence\n",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = 0\n    s = s.replace(\" \", \"\")\n    for i in range(0, len(s)):\n        if s[i] == 'r':\n            counter += 1\n    return counter\n",
        "num_ids": 52
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    result = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i]=='s' or s[i]=='t':\n            result += 1\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"s\":\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # replace the string\n    s = s.replace('std','')\n    # count the occurance of a word\n    count = s.lower().count('std')\n    # return the count\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    result = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            result += 1\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s == '':\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type(i):\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list_of_tuple=test_tuple[0]\n    list_of_tuple_data=test_tuple[1]\n    for tuple_data in list_of_tuple_data:\n        if type(tuple_data)!= list:\n            raise TypeError('list is not of type list')\n    for tuple_element in list_of_tuple:\n        if type(tuple_element)!= list:\n            raise TypeError('tuple is not of type list')\n    for tuple_element in list_of_tuple:\n        if len(tuple_element)!= len(list_of_tuple):\n            raise TypeError('length of list is not equal to length of tuple')\n    for tuple_element in list_of_tuple:\n        for tuple_item in tuple_element:\n            if type(tuple_item)!= list:\n                raise TypeError('tuple_element is not of type list')\n",
        "num_ids": 224
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_1 = (1,2,3,4,5,6,7)\n    tuple_2 = (1.1,2.2,3.3,4.4,5.5,6.6,7.7)\n    tuple_3 = (1,2,3,4,5,6,7,8,9,10,11,12,13)\n    print(check_type(tuple_1))\n    print(check_type(tuple_2))\n    print(check_type(tuple_3))\n",
        "num_ids": 133
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for t in test_tuple:\n        if not isinstance(t, tuple):\n            return 'tuple is not a tuple'\n",
        "num_ids": 34
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    t = []\n    for i in test_tuple:\n        t.append(type(i))\n    if all(t == test_tuple):\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        print(i)\n    if len(test_tuple) < 1:\n        return False\n    for i in test_tuple:\n        print(i)\n    if len(set(i) - set(test_tuple)) > 0:\n        return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list = test_tuple[0]\n    value = test_tuple[1]\n    for x in list:\n        if x == value:\n            return True\n        else:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if (all(t.__class__ == test_list[0] for t in test_tuple)):\n        return True\n    else:\n        return False\n    \n    \ndef test_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_data(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_mixed_types(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_date(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n        \n        \ndef test_datetime(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n        \n        \ndef test_str(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n        \n        \ndef test_generator(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n        \n        \ndef test_reversed(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_len(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n        \n        \ndef test_min(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_max(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_contains(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n        \n        \ndef test_get(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_set(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    import datetime\n    \n    test_list = []\n    for test in test_tuple:\n        test_list.append(test.__class__)\n    \n    #print(test_list)\n    \n    if not all(t.__class__ == test_list[0] for t in test_tuple):\n        return True\n    else:\n        return False\n    \n    \ndef test_del(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same dat",
        "num_ids": 17
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    for i in range(0, len(test_list)):\n        if type(test_list[i]) is not str:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Write your code here.\n    \n    maj = arr[0]\n    count = 0\n    for i in range(1, n):\n        if arr[i] == maj:\n            count += 1\n        else:\n            count -= 1\n        if count == x - 1:\n            return True\n    return False\n",
        "num_ids": 78
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    elif n == arr.count(x) + 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        count += arr[i]\n        if (count >= x):\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Base case: If there are only 1 element in the array, return True\n    if n == 1: return True\n    \n    # If there are multiple elements, it is the majority element in the array.\n    if len(arr) == 1:\n        if arr[0] == x: return True\n        else: return False\n    \n    # find the middle point\n    mid = n // 2\n    if arr[mid] == x: return True\n    else: return is_majority(arr[:mid], n, x)\n    ",
        "num_ids": 126
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    def majorityElement(arr, n, x):\n        #Your code here\n        if len(arr)==1:\n            return arr[0]\n        elif n<len(arr):\n            return arr[n//2]\n        else:\n            return arr[n//2-1]\n    if x<=n/2:\n        return majorityElement(arr, n, x)\n    else:\n        return majorityElement(arr, len(arr), x-n/2)\n",
        "num_ids": 121
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return is_majority(arr[0:2], n, x)\n",
        "num_ids": 42
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        if arr[0] == x:\n            return True\n        else:\n            return False\n    elif n % 2 == 0:\n        return is_majority(arr[:int(n/2)], n, x)\n    else:\n        return is_majority(arr[int(n/2):], n, x)\n",
        "num_ids": 86
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if (n == 0):\n        return False\n    \n    elif (n == 1):\n        return arr[0] == x\n    \n    else:\n        left = 0\n        right = n - 1\n        \n        while (left < right):\n            mid = (left + right) // 2\n            \n            if (arr[mid] == x):\n                return True\n            \n            elif (arr[mid] > x):\n                right = mid - 1\n            \n            else:\n                left = mid + 1\n        \n        return False\n        ",
        "num_ids": 133
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize an array of n 1s, then iterate through all the elements, returning if the element is the majority element.\n    array = [0 for i in range(n)]\n    for i in range(n):\n        array[i] = arr[i]\n        \n    # Find the majority element and return it.\n    return majority(array, x)\n    \n",
        "num_ids": 90
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n] == x:\n        return True\n    if n == 0 or x == arr[n - 1]:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    count = 0\n    for i in str(n):\n        count = count + count_Set_Bits(int(i))\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return count_Set_Bits_Function(bin(n))\n",
        "num_ids": 18
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # code goes here\n    n = n%2\n    count_n = 0\n    while n>0:\n        n = n//2\n        if n%2==1:\n            count_n+=1\n    return count_n\n",
        "num_ids": 58
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = 0\n    for i in range(1, n+1):\n        if(i % 2 == 0):\n            set_bits += 1\n    return set_bits\n",
        "num_ids": 45
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s=0\n    while n > 0:\n        s+=n%2\n        n=n//2\n    return s\ndef count_Complement(n):\n    '''\n    Write a python function to find the number of complement bits (binary digits with value 1) in a given number.\n    '''\n    s=0\n    while n > 0:\n        s+=1\n        n-=1\n    return s\ndef count_Total_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    return 2**(n-1)\ndef count_Mul_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    return (n&1)<<1\ndef count_Div_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    return (n&1)\ndef count_Implementation(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    s=0\n    while n > 0:\n        s+=1\n        n-=1\n    return s\ndef count_Count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return count_Set_Bits(n)-count_Complement(n)\ndef count_Count_Complement(n):\n    '''\n    Write a python function to count the number of complement bits (binary digits with value 1) in a given number.\n    '''\n    return count_Complement(n)-count_Implementation(n)\ndef count_Count_Total_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    return count_Total_Bits(n)-count_Implementation(n)\ndef count_Count_Mul_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    return count_Mul_Bits(n)-count_Implementation(n)\ndef count_Count_Div_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    return count_Div_Bits(n)-count_Implementation(n)\ndef count_Count_Implementation(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n<=0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Complement(n):\n    '''\n    Write a python function to count the number of complement bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Total_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Mul_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Div_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Implementation(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Complement(n):\n    '''\n    Write a python function to count the number of complement bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Total_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Mul_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Div_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Implementation(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Complement(n):\n    '''\n    Write a python function to count the number of complement bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Total_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Mul_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Div_Bits(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Implementation(n):\n    '''\n    Write a python function to count the number of bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n==0:\n        return 0\n    return 2**(n-1)\ndef count_Count_Complement(n):\n    '''\n    Write a python function to count the number of complement bits (binary digits with value 1) in a given number.\n",
        "num_ids": 27
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    nums = []\n    for i in range(2 ** n):\n        if (i & 1) == 1:\n            nums.append(1)\n        else:\n            nums.append(0)\n    return len(nums)\n",
        "num_ids": 60
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    for i in range(0,n):\n        if (n&i):\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    set_bits = set()\n    for i in range(n):\n        if i % 2!= 0:\n            set_bits.add(1)\n        else:\n            set_bits.add(0)\n    return len(set_bits)\n",
        "num_ids": 62
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n // 2\n",
        "num_ids": 36
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    from math import log2\n",
        "num_ids": 9
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    o = ''\n    for char in str:\n        if char % 2 == 1:\n            o = o + char\n    return o\n",
        "num_ids": 34
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(x for x in str if (x % 2))\n",
        "num_ids": 20
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = []\n    index = 0\n    while index < len(str):\n        if index % 2 == 1:\n            odd_index_values.append(str[index])\n        index += 1\n    return \"\".join(odd_index_values)\n",
        "num_ids": 66
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\"Odd\",\" \").replace(\"even\",\" \").replace(\"even\",\" \").replace(\"even\",\" \").replace(\"odd\",\" \")\n",
        "num_ids": 38
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for character in str:\n        if character % 2!= 0:\n            odd_values.append(character)\n    return ''.join(odd_values)\n",
        "num_ids": 47
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd = []\n    for i in range(len(str)):\n        if str[i]%2 == 1:\n            odd.append(str[i])\n    return ''.join(odd)\n",
        "num_ids": 50
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if type(str) == str:\n        for i in range(0, len(str), 2):\n            if str[i] % 2!= 0:\n                str = str[:i] + str[i + 1]\n                print(str)\n    else:\n        print(\"Wrong Input\")\n        exit(0)\n",
        "num_ids": 80
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # We need a method to check if the index is even or odd. If so, we need to check if the index is odd or even.\n    # If it is odd, we need to remove the characters with odd index values and create a new string with even index values.\n    # If it is even, we remove the characters with odd index values and create a new string with even index values.\n    # In other words, even index values are defined as the characters that are between index 1 and the index 2,\n    # and odd index values are defined as the characters that are between index 3 and the index 4.\n    \n    # The reason is that odd index values are defined as the characters between index 3 and the index 4,\n    # whereas even index values are defined as the characters between index 2 and the index 3.\n    \n    # Slices are created on the string. These slices will be used to break down the string and return it to the original string.\n    # The function will then check if the index is odd or even, if it is, it will return the string with odd or even elements removed.\n    # If it is odd, the string will be split into two slices, one starting from the index 2 and one ending at the index 3.\n    # If it is even, the string will be split into two slices, one starting from the index 1 and one ending at the index 4.\n    # The function returns the resulting string, which is not returned at the end.\n    # No input or output values are allowed.\n",
        "num_ids": 335
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd.append(str[i])\n    return odd\n",
        "num_ids": 42
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace('Odd', 'Odd')\n",
        "num_ids": 16
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        return b\n    if a<c:\n        return c\n    if b<c:\n        return c\n    if a<b:\n        return b\n    if a<c:\n        return c\n    if c<a:\n        return a\n    if c<b:\n        return b\n    if c<a:\n        return a\n    if c<b:\n        return b\n    if c<a:\n        return a\n",
        "num_ids": 112
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c: \n        return a \n    elif b<c<a: \n        return b \n    else: \n        return c \n",
        "num_ids": 43
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c: \n        return a,b,c\n",
        "num_ids": 20
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    elif c < a and c < b:\n        return c\n",
        "num_ids": 49
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > a and c > b:\n        return c\n    return \"These values are not in order, please try again\"\n",
        "num_ids": 62
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return max(a,b,c)\nprint(min_of_three(2,3,4)",
        "num_ids": 27
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c:\n        return a\n    elif a<b:\n        return b\n    elif b<a:\n        return a\n    else:\n        return c\n",
        "num_ids": 47
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return a\n        else:\n            return b\n    elif b > a:\n        if a > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        else:\n            return c\n",
        "num_ids": 78
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_bits_l = l\n    all_bits_r = r\n",
        "num_ids": 20
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n == (r-l+1)\n",
        "num_ids": 14
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n == 0 or n == 1):\n        return True\n    else:\n        for i in range(l,r+1):\n            if (i < 0 or i > 255):\n                return False\n            if (i % n == 0):\n                return False\n        return True\n",
        "num_ids": 69
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #print(f'***{n}***')\n    #print(f'{n},{l},{r}')\n    if (r<=n) and (l <=n):\n        #print('Checking if all bits are unset')\n        return all_bits_not_set(n,l,r)\n    elif (r>=n) and (l<=n):\n        #print('Checking if all bits are unset')\n        return all_bits_not_set(n,l,r)\n    elif (l>=n) and (r<=n):\n        #print('Checking if all bits are unset')\n        return all_bits_not_set(n,l,r)\n    else:\n        return 'All bits are not set.'\n",
        "num_ids": 188
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return True\n    elif l==0 or r==0:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l-1,r) or all_Bits_Set_In_The_Given_Range(n,l,r-1)\n",
        "num_ids": 83
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    count = 0\n    for i in range(n):\n        if (l <= (i & 1)) and (((i >> 1) & 1) == 0):\n            count = count + 1\n        if (r <= (i & 1)) and (((i >> 1) & 1) == 0):\n            count = count + 1\n",
        "num_ids": 80
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    if r<=0 or r>=l:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n >= 0:\n        return (((1 << n) - 1) & (1 << (l-1) - 1) == 0) and (r - l + 1 > 0)\n    else:\n        return (((1 << (r-1)) - 1) & (1 << (l-1) - 1) == 0) and (r - l + 1 > 0)\n",
        "num_ids": 90
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l>=n or r>=n):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if (n >> i) & 1:\n            print(1)\n        else:\n            print(0)\n",
        "num_ids": 40
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return [(elem, i) for i, elem in enumerate(arr[:n]) if elem > 0] + [(elem, i) for i, elem in enumerate(arr[:n]) if elem < 0]\n",
        "num_ids": 58
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n    return arr\n",
        "num_ids": 35
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # YOUR CODE HERE\n    arr_new = []\n    for i in range(len(arr)):\n        arr_new.append(arr[i] if arr[i] > 0 else -arr[i])\n    return arr_new\n",
        "num_ids": 58
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n==1:\n        return arr\n",
        "num_ids": 13
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    '''\n    To keep track of the nth negative element, we keep a counter\n    '''\n    n_neg = 0\n    arr_reordered = []\n    for i in range(0, n):\n        if arr[i] < 0:\n            n_neg += 1\n            arr_reordered.append(-arr[i])\n        elif arr[i] > 0:\n            arr_reordered.append(arr[i])\n    '''\n    To convert the list to a sorted version, we use a helper function\n    '''\n    return arr_reordered[::-1] + [0]*n_neg + arr_reordered[1::]\n",
        "num_ids": 31
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            result.append(arr[i])\n            result.append(-arr[i])\n        else:\n            result.append(arr[i])\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    \n    return\n    \n    #raise NotImplementedError('Need to complete this function')\n    \n    #raise NotImplementedError('Need to complete this function')\n",
        "num_ids": 49
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_new = [[] for i in range(n)]\n    for i in range(n):\n        arr_new[i] = arr[i]\n    arr_new = re_arrange_array(arr_new, n)\n    for i in range(n):\n        if arr[i] < 0:\n            arr_new[i].append(arr[i])\n            arr_new[i].sort()\n    arr_new = re_arrange_array(arr_new, n)\n    return arr_new\n",
        "num_ids": 126
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_new = []\n    arr_pos = []\n    for i in arr:\n        if i >= 0:\n            arr_pos.append(i)\n        else:\n            arr_new.append(i)\n    arr_new.extend(arr_pos)\n    arr_new.extend(arr_neg)\n    arr_new.sort()\n    for i in range(n):\n        arr_new.append(-1)\n    return arr_new",
        "num_ids": 112
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,'')\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',''.join(char))\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(char,char.capitalize())\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\r','')\n    return str1\n",
        "num_ids": 82
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1.replace(\" \",\"_\")\n    str1.replace(\"/\",\"_\")\n    str1.replace(\"\\n\",\"_\")\n    str1.replace(\"\\t\",\"_\")\n    str1.replace(\"\\b\",\"_\")\n    str1.replace(\".\",\"_\")\n    str1.replace(\"*\",\"_\")\n    str1.replace(\"?\",\"_\")\n    str1.replace(\"{\",\"_\")\n    str1.replace(\"}\",\"_\")\n    str1.replace(\"[\",\"_\")\n    str1.replace(\"]\",\"_\")\n    str1.replace(\"\\n\",\"_\")\n    str1.replace(\"\\t\",\"_\")\n    str1.replace(\"\\b\",\"_\")\n    str1.replace(\" \",\"_\")\n    str1.replace(\"_\",\"_\")\n    return str1\n",
        "num_ids": 199
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.upper())\n",
        "num_ids": 16
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n',' ')\n    str1 = str1.replace('\\r',' ')\n    str1 = str1.replace('\\t',' ')\n    str1 = str1.replace('    ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',' ')\n    str1 = str1.replace('  ',",
        "num_ids": 2003
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char =='':\n        str1 = str1.replace(' ','')\n        return str1\n    else:\n        return str1\n",
        "num_ids": 36
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # write your code here\n    if char =='':\n        return str1.replace(' ','')\n    elif char == '\\n':\n        return str1.replace('\\n',' ')\n    elif char == '\\t':\n        return str1.replace('\\t',' ')\n    else:\n        return str1\n",
        "num_ids": 82
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\"%char)\n",
        "num_ids": 18
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('\\r',' ')\n    str1=str1.replace('\\f',' ')\n    str1=str1.replace(' ','')\n    str1=str1.replace('  ',' ')\n    str1=str1.replace('\\n',' ')\n    str1=str1.replace('\\t',' ')\n    str1=str1.replace('\\r',' ')\n    str1=str1.replace('\\f',' ')\n    str1=str1.replace('\\b',' ')\n    return str1\n",
        "num_ids": 196
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap_lst = []\n    for x in list1:\n        heapq.heappush(heap_lst,x)\n    return heap_lst\ndef find_nearest_element(list_data):\n    '''\n    The function takes in a list of numbers and returns the nth nearest element in the list.\n    '''\n    print(\"---PART 1---\")\n    new_list = []\n    for y in list_data:\n        new_list.append(y)\n    print(new_list)\n    new_list.sort()\n    print(new_list)\n    return new_list[len(new_list)-1]\ndef find_second_nearest_element(list_data):\n    '''\n    The function takes in a list of numbers and returns the second nearest element in the list.\n    '''\n    print(\"---PART 2---\")\n    new_list = []\n    for y in list_data:\n        new_list.append(y)\n    new_list.sort()\n    print(new_list)\n    return new_list[len(new_list)-2]\ndef main():\n    '''\n    This function takes in the parameter n, which is a positive integer, and then returns a list containing the n smallest numbers in the list.\n    '''\n    print(\"---PART 1---\")\n    list_data = []\n    n = int(input(\"Enter the number of elements: \"))\n    for i in range(n):\n        numbers = int(input(\"Enter element: \"))\n        list_data.append(numbers)\n    print(list_data)\n    print(\"---PART 2---\")\n    new_list = larg_nnum(list_data, n)\n    print(new_list)\n    print(\"---PART 3---\")\n    new_list2 = []\n    for x in new_list:\n        if x not in new_list2:\n            new_list2.append(x)\n    print(new_list2)\n    print(\"---PART 4---\")\n    second_element = find_second_nearest_element(new_list2)\n    print(second_element)\n    print(\"---PART 5---\")\nmain()",
        "num_ids": 215
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # TODO: Write the function to sort the list and return a list of the n largest numbers.\n    \n    return sorted(list1, key=lambda x: x[n])\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse=True)\n    # return sorted(list1, key=lambda x: x[n], reverse",
        "num_ids": 1998
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 1:\n        return list1\n    else:\n        heapq.heapify(list1)\n        for i in range(n-2):\n            heapq.heappush(list1,heapq.heappop(list1))\n    return list1\n",
        "num_ids": 71
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1 = list1[:n]\n    return list1\n",
        "num_ids": 25
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 0:\n        return []\n    if len(list1) == 0:\n        return []\n    heapq.heapify(list1)\n    for i in range(n):\n        heapq.heappop(list1)\n    return list1\n",
        "num_ids": 68
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n == 0:\n        return []\n    else:\n        return list1[:n]\n",
        "num_ids": 26
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    L = list1[:]\n    L.sort(reverse=True)\n    return L[:n]\n",
        "num_ids": 28
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in range(n):\n        list2.append(list1[i])\n    list2.sort()\n    return list2\n",
        "num_ids": 41
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n<0:\n        print(\"\\nNegative number is not accepted\")\n    else:\n        return sorted(list1, key=lambda x: x[n], reverse=True)[:n]\ndef load_graph(input_file):\n    '''\n    Load the graph from the file into a dictionary.\n    '''\n    f=open(input_file,\"r\")\n    lines=f.readlines()\n    graph={}\n    for l in lines:\n        if l.startswith(\"vertex\"):\n            num=l.split()[1]\n            graph[num]=[]\n        elif l.startswith(\"edge\"):\n            num1=l.split()[0]\n            num2=l.split()[1]\n            graph[num1].append((int(num2),float(l.split()[2])))\n            graph[num2].append((int(num1),float(l.split()[2])))\n        else:\n            continue\n    return graph\ndef load_heap(file_name):\n    '''\n    Read a heap from the file into a list of lists.\n    '''\n    h = []\n    f = open(file_name,\"r\")\n    lines=f.readlines()\n    for l in lines:\n        if l.startswith(\"vertex\"):\n            num=l.split()[1]\n            h.append((int(num),[]) )\n        elif l.startswith(\"edge\"):\n            num1=l.split()[0]\n            num2=l.split()[1]\n            h[-1][1].append((int(num1),float(l.split()[2])))\n            h[-1][1].append((int(num2),float(l.split()[2])))\n        else:\n            continue\n    return h\ndef print_heap(heap):\n    '''\n    Print the given heap.\n    '''\n    for e in heap:\n        print(e[0],\": \",e[1],\"\\n\")\n    return None\ndef get_degree(list1):\n    '''\n    return the degree of a list.\n    '''\n    dict={}\n    for v in list1:\n        if v not in dict:\n            dict[v]=1\n        else:\n            dict[v]+=1\n    return dict\ndef get_cost(list1,vertex,weight):\n    '''\n    return the cost of a list.\n    '''\n    cost=0\n    for v in vertex:\n        cost+=weight[v]*v\n    return cost\ndef get_minimum_node(heap):\n    '''\n    return the minimum node in the heap.\n    '''\n    m=heap[0][1]\n    for i in range(len(heap)):\n        if heap[i][1]<m:\n            m=heap[i][1]\n    return m\ndef get_minimum_cost(heap,vertex):\n    '''\n    return the minimum cost of a list.\n    '''\n    m=heap[0][1]\n    for v in vertex:\n        if heap[v][1]<m:\n            m=heap[v][1]\n    return m\ndef get_minimum_cost2(heap,vertex):\n    '''\n    return the minimum cost of a list.\n    '''\n    m=heap[0][1]\n    for v in vertex:\n        if heap[v][1]<m:\n            m=heap[v][1]\n    return m\ndef dijkstra(graph,start,end):\n    '''\n    start is the start node, end is the end node.\n    '''\n    '''\n    dijskt is a dictionary that records the distance from start node to each node.\n    '''\n    dijskt={}\n    for v in graph:\n        dijskt[v]=float(\"inf\")\n    dijskt[start]=0\n    vertex=graph.keys()\n    heapq.heapify(vertex)\n    heapq.heappush(vertex,[dijskt[start],start])\n    while vertex:\n        v=heapq.heappop(vertex)[1]\n        for e in graph[v]:\n            if e[0] not in dijskt:\n                dijskt[e[0]]=e[1]\n                heapq.heappush(vertex,[dijskt[e[0]],e[0]])\n    return dijskt,vertex\ndef dijkstra_reverse(graph,start,end):\n    '''\n    start is the start node, end is the end node.\n    '''\n    '''\n    dijkstra is a dictionary that records the distance from start node to each node.\n    '''\n    dijskt={}\n    for v in graph:\n        dijskt[v]=float(\"inf\")\n    dijskt[start]=0\n    vertex=graph.keys()\n    vertex.reverse()\n    heapq.heapify(vertex)\n    heapq.heappush(vertex,[dijskt[start],start])\n    while vertex:\n        v=heapq.heappop(vertex)[1]\n        for e in graph[v]:\n            if e[0] not in dijskt:\n                dijskt[e[0]]=e[1]\n                heapq.heappush(vertex,[dijskt[e[0]],e[0]])\n    return dijskt,vertex\ndef dijkstra_reverse2(graph,start,end):\n    '''\n    start is the start node, end is the end node.\n    '''\n    '''\n    dijkstra is a dictionary that records the distance from start node to each node.\n    '''\n    dijskt={}\n    for v in graph:\n        dijskt[v]=float(\"inf\")\n    dijskt[start]=0\n    vertex=graph.keys()\n    vertex.reverse()\n    heapq.heapify(vertex)\n    heapq.heappush(vertex,[dijskt[start],start])\n    while vertex:\n        v=heapq.heappop(vertex)[1]\n        for e in graph[v]:\n            if e[0] not in dijskt:\n                dijskt[e[0]]=e[1]\n                heapq.heappush(vertex,[dijskt[e[0]],e[0]])\n    return dijskt,vertex\ndef is_connected(graph):\n    '''\n    return True if the graph is connected.\n    '''\n    vertex=graph.keys()\n    for v in vertex:\n        for e in graph[v]:\n            if e[1]==0:\n                return False\n    return True\ndef is_connected2(graph):\n    '''\n    return True if the graph is connected.\n    '''\n    vertex=graph.keys()\n    for v in vertex:\n        for e in graph[v]:\n            if e[1]==0:\n                return False\n    return True\ndef print_graph(graph):\n    '''\n    print the graph\n    '''\n    for v in graph:\n        print(v,\": \",graph[v])\n    return None\ndef print_heap(heap):\n    '''\n    print the heap\n    '''\n    for v in heap:\n        print(v,\": \",heap[v])\n    return None\ndef print_heap2(heap):\n    '''\n    print the heap\n    '''\n    for v in heap:\n        print(v,\": \",heap[v])\n    return None\ndef shortest_path(graph,source,dest):\n    '''\n    return the shortest path from source to dest.\n    '''\n    '''\n    given a graph, a starting and ending node, and a shortest path, \n    return the shortest path.\n    '''\n    '''\n    dijskt,v=dijkstra(graph,source,dest)\n    print(\"source: \",source)\n    print(\"destination: \",dest)\n    print(\"dijkstra: \"",
        "num_ids": 48
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1,reverse=True,key=lambda x:x[n])\ndef kclosest(list1,k,n):\n    '''\n    Write a function that takes in a list and an integer k, and returns a list containing the n closest items from the list.\n    '''\n    return sorted(list1,key=lambda x:x[n],reverse=True)[:k]\ndef least_mul(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n least repeated items from the list.\n    '''\n    return sorted(list1,key=lambda x:x[n],reverse=True)[:n]\n",
        "num_ids": 26
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    c1 = 2.2*(r*r*(1-math.cos(h)))\n    c2 = 2.2*(r*r*(1+math.cos(h)))\n    return (c1+c2)/2\n",
        "num_ids": 59
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from numpy import zeros, ones, pi, sqrt\n    # Define the input/output variables\n    # Add any necessary values here\n    A = r[0]\n    B = r[1]\n    C = r[2]\n    D = h[0]\n    E = h[1]\n    f = (A*C)/((A+C)*(A+C*(B/A)*(B-C))**0.5)\n    p = (2*pi)*f\n    # Return the result\n    return p\n",
        "num_ids": 129
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (r**2)*(np.pi/4)*(np.tan(h/2))**2\n",
        "num_ids": 28
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    l = 2.0*math.pi*r\n    S = (2*h)/math.pi*(math.pi*r**2)\n    return S\n",
        "num_ids": 41
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x = r*math.cos(h)\n    y = r*math.sin(h)\n    return (x**2+y**2)**(1/2)\n",
        "num_ids": 44
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h*sin(pi*((2*r)/2)))\n",
        "num_ids": 23
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (4*pi*r**2)*(h**2)\n",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    return h*r\n    \n    \ndef lateralsuface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    \n    return 2*h*r\n    \n    \ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    \n    return h*r\n    \n    \ndef lateralsuface_cube(r,h):\n    '''\n    Write a function to find the lateral surface area of a cube.\n    '''\n    \n    return 4*h*r\n    \n    \ndef plane_normal(x,y,z):\n    '''\n    Write a function to find the normalized (unit) plane normal of a plane.\n    '''\n    \n    return Vector((-x,y,z))/sqrt(x*x + y*y + z*z)\n    \n    \ndef plane_intersection(a,b,c,d):\n    '''\n    Write a function to find the plane normal that lies between two planes.\n    '''\n    \n    return Vector((a.x-b.x,a.y-b.y,a.z-b.z))/Vector((c.x-d.x,c.y-d.y,c.z-d.z))\n    \n    \ndef plane_area(a,b,c,d):\n    '''\n    Write a function to find the area of a plane.\n    '''\n    \n    return (a.x*b.y-b.x*c.y-b.x*d.y-b.x*c.z-c.x*d.z)/(a.y*b.z-b.y*c.z-b.y*d.z-c.y*d.z)\n    \n    \ndef line_intersection(a,b):\n    '''\n    Write a function to find the line that lies between two lines.\n    '''\n    \n    return Line(a,b)\n    \n    \ndef line_intersection(a,b):\n    '''\n    Write a function to find the line that lies between two lines.\n    '''\n    \n    return Line(a,b).normal\n    \n    \ndef plane_normal_intersection(a,b,c,d):\n    '''\n    Write a function to find the plane normal that lies between two planes.\n    '''\n    \n    return (a.normal(c.normal(d))-b.normal(c.normal(d)))*(a.normal(d)-b.normal(c.normal(d)))\n    \n    \ndef plane_area_intersection(a,b,c,d):\n    '''\n    Write a function to find the area of a plane.\n    '''\n    \n    return (a.normal(c.normal(d))-b.normal(c.normal(d)))*(a.normal(d)-b.normal(c.normal(d)))\n    \n    \ndef plane_tangential_intersection(a,b,c,d):\n    '''\n    Write a function to find the plane tangential that lies between two planes.\n    '''\n    \n    return (a.normal(d)-b.normal(c.normal(d)))*(a.normal(d)-b.normal(c.normal(d)))\n    \n    \ndef plane_tangential_area_intersection(a,b,c,d):\n    '''\n    Write a function to find the area of a plane.\n    '''\n    \n    return (a.normal(d)-b.normal(c.normal(d)))*(a.normal(d)-b.normal(c.normal(d)))\n    \n    \ndef line_intersection(a,b):\n    '''\n    Write a function to find the line that lies between two lines.\n    '''\n    \n    return Line(a,b).normal\n    \n    \ndef line_intersection(a,b):\n    '''\n    Write a function to find the line that lies between two lines.\n    '''\n    \n    return Line(a,b).normal\n    \n    \ndef plane_intersection(a,b,c,d):\n    '''\n    Write a function to find the plane tangential that lies between two planes.\n    '''\n    \n    return (a.normal(c.normal(d))-b.normal(c.normal(d)))*(a.normal(d)-b.normal(c.normal(d)))\n    \n    \ndef plane_area_intersection(a,b,c,d):\n    '''\n    Write a function to find the area of a plane.\n    '''\n    \n    return (a.normal(d)-b.normal(c.normal(d)))*(a.normal(d)-b.normal(c.normal(d)))\n    \n    \ndef polygon_area(p):\n    '''\n    Write a function to find the area of a polygon.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef polygon_area(p):\n    '''\n    Write a function to find the area of a polygon.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: t[2], p))))\n    \n    \ndef parallelogram_area(p):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    \n    return sum(sum(map(lambda t: t[0]*t[1], map(lambda t: ",
        "num_ids": 30
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def backface(x,y,z):\n        '''\n        Write a function that draws a backface.\n        '''\n        glBegin(GL_QUADS)\n        glVertex3f(x,y,z)\n        glVertex3f(x,y,z+h)\n        glVertex3f(x+r,y,z)\n        glVertex3f(x+r,y,z+h)\n        glEnd()\n        glBegin(GL_TRIANGLES)\n        glVertex3f(x+r,y,z)\n        glVertex3f(x+r,y,z+h)\n        glVertex3f(x+r,y+r,z+h)\n        glVertex3f(x+r,y+r,z)\n        glEnd()\n    def cylinder(r,h):\n        '''\n        Write a function to calculate the linear surface area of a cylinder.\n        '''\n        def add(a,b):\n            return a+b\n        def scale(a,b):\n            return a*b\n        def rotate(a,b):\n            return a*b\n        def translate(a,b):\n            return a+b\n        def backface(x,y,z):\n            '''\n            Write a function that draws a backface.\n            '''\n            glBegin(GL_TRIANGLES)\n            glNormal3f(0,1,0)\n            glColor3f(1,0,0)\n            for i in range(1,r):\n                glNormal3f(0,0,-1)\n                glVertex3f(x+i*h,y,z)\n            glNormal3f(0,0,1)\n            glVertex3f(x,y,z)\n            glNormal3f(0,0,0)\n            for i in range(1,r):\n                glNormal3f(0,1,0)\n                glVertex3f(x+i*h,y,z)\n            glEnd()\n        def scale(a,b):\n            '''\n            Write a function to scale a linear surface area.\n            '''\n            def add(a,b):\n                return a+b\n            def scale(a,b):\n                return a*b\n            def rotate(a,b):\n                return a*b\n            def translate(a,b):\n                return a+b\n            def backface(x,y,z):\n                '''\n                Write a function that draws a backface.\n                '''\n                glBegin(GL_TRIANGLES)\n                glNormal3f(0,1,0)\n                glColor3f(1,0,0)\n                for i in range(1,r):\n                    glNormal3f(0,0,-1)\n                    glVertex3f(x+i*h,y,z)\n                glNormal3f(0,0,1)\n                glVertex3f(x,y,z)\n                glNormal3f(0,0,0)\n                for i in range(1,r):\n                    glNormal3f(0,1,0)\n                    glVertex3f(x+i*h,y,z)\n                glEnd()\n            def scale(a,b):\n                '''\n                Write a function to scale a linear surface area.\n                '''\n                def add(a,b):\n                    return a+b\n                def scale(a,b):\n                    return a*b\n                def rotate(a,b):\n                    return a*b\n                def translate(a,b):\n                    return a+b\n                def backface(x,y,z):\n                    '''\n                    Write a function that draws a backface.\n                    '''\n                    glBegin(GL_TRIANGLES)\n                    glNormal3f(0,1,0)\n                    glColor3f(1,0,0)\n                    for i in range(1,r):\n                        glNormal3f(0,0,-1)\n                        glVertex3f(x+i*h,y,z)\n                    glNormal3f(0,0,1)\n                    glVertex3f(x,y,z)\n                    glNormal3f(0,0,0)\n                    for i in range(1,r):\n                        glNormal3f(0,1,0)\n                        glVertex3f(x+i*h,y,z)\n                    glEnd()\n            def rotate(a,b):\n                '''\n                Write a function to rotate a linear surface area.\n                '''\n                def add(a,b):\n                    return a+b\n                def scale(a,b):\n                    return a*b\n                def rotate(a,b):\n                    return a*b\n                def translate(a,b):\n                    return a+b\n                def backface(x,y,z):\n                    '''\n                    Write a function that draws a backface.\n                    '''\n                    glBegin(GL_TRIANGLES)\n                    glNormal3f(0,1,0)\n                    glColor3f(1,0,0)\n                    for i in range(1,r):\n                        glNormal3f(0,0,-1)\n                        glVertex3f(x+i*h,y,z)\n                    glNormal3f(0,0,1)\n                    glVertex3f(x,y,z)\n                    glNormal3f(0,0,0)\n                    for i in range(1,r):\n                        glNormal3f(0,1,0)\n                        glVertex3f(x+i*h,y,z)\n                    glEnd()\n            def translate(a,b):\n                '''\n                Write a function to translate a linear surface area.\n                '''\n                def add(a,b):\n                    return a+b\n                def scale(a,b):\n                    return a*b\n                def rotate(a,b):\n                    return a*b\n                def rotate(a,b):\n                    return a*b\n                def backface(x,y,z):\n                    '''\n                    Write a function that draws a backface.\n                    '''\n                    glBegin(GL_TRIANGLES)\n                    glNormal3f(0,1,0)\n                    glColor3f(1,0,0)\n                    for i in range(1,r):\n                        glNormal3f(0,0,-1)\n                        glVertex3f(x+i*h,y,z)\n                    glNormal3f(0,0,1)\n                    glVertex3f(x,y,z)\n                    glNormal3f(0,0,0)\n                    for i in range(1,r):\n                        glNormal3f(0,1,0)\n                        glVertex3f(x+i*h,y,z)\n                    glEnd()\n            def draw(x,y,z,r):\n                '''\n                Write a function that draws a linear surface area.\n                '''\n                backface(x,y,z)\n                scale(1,r)\n                rotate(r,r)\n                rotate(1,r)\n                translate(r,r)\n                rotate(1,r)\n                rotate(r,r)\n                scale(1,r)\n                rotate(r,r)\n                translate(r,r)\n                scale(1,r)\n                rotate(r,r)\n                translate(r,r)\n                scale(1,r)\n                rotate(r,r)\n                translate(r,r)\n                rotate(r,r)\n                scale(1,r)\n                translate(r,r)\n                rotate(r,r)\n                translate(r,r)\n                scale(1,r)\n                rotate(r,r)\n                translate(r,r)\n                rotate(r,r)\n                scale(1,r)\n                translate(r,r)\n                rotate(r,r)\n                translate(r,r)\n                scale(1,r)\n                rotate(r,r)\n                translate(r,r)\n                rotate(r,r)\n                scale(1,r)\n                translate(r,r)\n                rotate(r,r)\n                translate(r,r)\n                scale(1,r)\n                rotate(r,",
        "num_ids": 342
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    t = (h/2) * math.tan(math.radians(90-r))\n    S = r*t*t\n    return S\n",
        "num_ids": 38
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def volume_cube_helper(side):\n        if side == 1:\n            return 1\n        elif side == 2:\n            return 4 * 4\n        elif side == 3:\n            return 16 * 16\n",
        "num_ids": 53
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code goes here\n    print(\"Volume of cube of side length\", l)\n",
        "num_ids": 22
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l*3)*(l*3)*(l*3)\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (4*l*l) + (4*l*l*l) + (2*l*l*l*l)\n    return volume\n",
        "num_ids": 39
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3*l**3\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for side in range(0,4):\n        volume = volume + (l**(1/3))*(3.14159265359**(3/4)*(10**(4/3)))\n    print(volume)\n",
        "num_ids": 60
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit_set = bin(n).replace(\"0b\", \"\")\n    bit_set = bit_set[2:]\n    even_bit_set = int(\"0b\" + bit_set, 2)\n    print(even_bit_set)\n",
        "num_ids": 61
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # set bitwise odd number to 1\n    odd_bits = 0\n    # set bitwise even number to 1\n    even_bits = 0\n",
        "num_ids": 36
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    ans = 0\n    for i in range(0, n):\n        if (i % 2 == 0):\n            ans += 2**i\n    return ans\n",
        "num_ids": 39
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n > 0:\n        n = n & 0xFFFFFFFFFFFFFFFF\n    else:\n        n = n | 0xFFFFFFFFFFFFFFFF\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n=str(n)\n    for i in range(0,len(n),2):\n        if n%2==0:\n            n=n[:i]+n[i+1]+n[i]+n[i+2]\n    return n\n",
        "num_ids": 63
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # define an initial bit\n    bit = 1\n    # set all even bits to 1\n    while bit <= n:\n        # increment bit\n        bit = bit << 1\n    return bit\n",
        "num_ids": 46
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum+=1\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n <= 0:\n        raise ValueError(\"number should be > 0\")\n    n_string = bin(n)[2:].zfill(8)\n    lst = []\n    for i in range(0,8,2):\n        if n & (1 << i):\n            lst.append(1)\n        else:\n            lst.append(0)\n    print(lst)\n    \ndef odd_bit_set_number(n):\n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    if n <= 0:\n        raise ValueError(\"number should be > 0\")\n    n_string = bin(n)[2:].zfill(8)\n    lst = []\n    for i in range(0,8,2):\n        if n & (1 << i):\n            lst.append(1)\n        else:\n            lst.append(0)\n    print(lst)\n    \ndef bitwise_and(a,b):\n    '''\n    Write a python function to perform the bitwise and of two given numbers.\n    '''\n    return (a & b)\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n & 0x1) == 0:\n        print(\"Even bit set\")\n        return\n    else:\n        print(\"Not even bit set\")\n        return\neven_bit_set_number(7",
        "num_ids": 51
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # code here\n    even_number = 0\n    while n:\n        even_number += (n & 1) #add 1 to even number\n        n = n >> 1 #remove 1 to remove bits\n        #print(even_number)\n    return even_number\n",
        "num_ids": 64
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #BASE CASE\n    if len(test_list)!= 0:\n        test_list = list(set(test_list))\n        new_test_list = []\n        for i in test_list:\n            if i not in new_test_list:\n                new_test_list.append(i)\n        return new_test_list\n    else:\n        return []\n",
        "num_ids": 92
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_test = dict()\n    for item in test_list:\n        if item[1] not in dict_test:\n            dict_test[item[1]] = 0\n        dict_test[item[1]] += 1\n    return dict_test\n",
        "num_ids": 62
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    out = {}\n    for entry in test_list:\n        key = tuple(entry)\n        if key in out:\n            out[key] += 1\n        else:\n            out[key] = 1\n    return out\n",
        "num_ids": 55
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for item in test_list:\n        if item[0] in dictionary:\n            dictionary[item[0]] += 1\n        else:\n            dictionary[item[0]] = 1\n    return dictionary\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_of_occurences = dict()\n    for item in test_list:\n        if dict_of_occurences.get(item[0]) == None:\n            dict_of_occurences[item[0]] = 1\n        else:\n            dict_of_occurences[item[0]] += 1\n    return dict_of_occurences\n",
        "num_ids": 89
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #this is the dictionary of tuples \n    dictionary={}\n",
        "num_ids": 19
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {item: dict(Counter(test_list).most_common(1)) for item in set(test_list)} \n",
        "num_ids": 32
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for x in test_list:\n        result[x[0]] = x[1]\n    return result\n    \ndef main():\n    test_list = [('Sugar',1), ('Meat',2), ('Coffee',1), ('Spices',1), ('Pizza',2)]\n    result = check_occurences(test_list)\n    print(result)\n",
        "num_ids": 96
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_dict = {}\n    for i in test_list:\n        occurence_dict[i[0]] = occurence_dict.get(i[0], 0) + 1\n    return occurence_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    #print(counter)\n",
        "num_ids": 19
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = str.replace(\" \", \"\")\n    return len(set(s))\n",
        "num_ids": 22
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #declare empty dictionary\n    count = {}\n    for i in range(len(str)):\n        \n        #if string is not empty, check for each character in string\n        if str[i] in count:\n            count[str[i]] += 1\n        else:\n            count[str[i]] = 1\n    \n    #iterate through dictionary and find all strings with non-repeating characters in a given string\n    #add all result to a dictionary\n    result = {}\n    for key in count:\n        if key in result:\n            result[key] = result[key] + 1\n        else:\n            result[key] = 1\n    \n    #create a for loop and iterate through the dictionary\n    for key in result:\n        if result[key] >= 2:\n            for i in range(result[key] - 1):\n                result[key] += 1\n        elif result[key] == 2:\n            for i in range(1, result[key] + 1):\n                result[key] += 1\n    \n    #return final result\n    return result\n    \nprint(number_of_substrings(\"bbabbbcccccdddddddd\"))\nprint(number_of_substrings(\"aabcddd\"))\nprint(number_of_substrings(\"ababcdcdababcdcdababcdcd\"))\nprint(number_of_substrings(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))\nprint(number_of_substrings(\"abcabcabcabcabc\"))\nprint(number_of_substrings(\"abab\"))\nprint(number_of_substrings(\"ababcd\"))\nprint(number_of_substrings(\"bab\"))\nprint(number_of_substrings(\"bcabc\")",
        "num_ids": 406
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == None or len(str) == 0:\n        return 0\n    n = 0\n    for i in range(0, len(str)):\n        for j in range(i, len(str)):\n            if (str[i:j+1] == str[i:j+1].replace(' ', '')):\n                n += 1\n    return n\n",
        "num_ids": 89
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Create an empty string\n    sub_str_lst = []\n    # Traverse string\n    for i in range(len(str)-1):\n        # Traverse the left substring \n        for j in range(i, len(str)):\n            # If the left substring is empty\n            if str[i:j+1] in sub_str_lst:\n                # Increment the count\n                sub_str_lst.append(str[i:j+1])\n            else:\n                # If not, add it to the list\n                sub_str_lst.append(\"\")\n    return len(sub_str_lst)\n",
        "num_ids": 156
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    sub = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= str[i:j] and str[i:j+1]!= str[i:j+1][::-1]:\n                sub += 1\n    return sub\n",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    c = 0\n    if str == \"\":\n        return c\n    \n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            c += 1\n        else:\n            if c > 1:\n                c = 0\n            return c\n    \n    return c\n    \n    \ndef length_of_longest_substring(str): \n    '''\n    Write a python function to find the length of the longest substring in a given string.\n    '''\n    if str == \"\":\n        return 0\n    if len(str) == 0:\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    s = list(str)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            counter += 1\n    return counter\n",
        "num_ids": 51
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n=0\n    for i in range(1,len(str)):\n        for j in range(len(str)-i+1):\n            if str[j:j+i]==str[j:j+i]:\n                n+=1\n    return n\n",
        "num_ids": 65
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) < 2:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # write your code here\n    sub_strings = 0\n    lst = list(str)\n    if len(lst) <=1:\n        return 0\n    # if the last character is a non-letter\n    if str[-1].isalpha():\n        for i in range(len(lst)):\n            if lst[i].isalpha():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a number\n    if str[-1].isdigit():\n        for i in range(len(lst)):\n            if lst[i].isdigit():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a non-letter and is not a number\n    if str[-1].isalpha() and str[-1].isdigit():\n        for i in range(len(lst)):\n            if lst[i].isalpha() and lst[i].isdigit():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a non-letter and is a letter\n    if str[-1].isalpha() and not str[-1].isdigit():\n        for i in range(len(lst)):\n            if lst[i].isalpha() and not lst[i].isdigit():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a non-letter and is a non-letter\n    if not str[-1].isalpha():\n        for i in range(len(lst)):\n            if lst[i].isalpha():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a non-letter and is a non-letter\n    if not str[-1].isdigit():\n        for i in range(len(lst)):\n            if lst[i].isalpha() and not lst[i].isdigit():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a non-letter and is a non-letter\n    if not str[-1].isalpha() and not str[-1].isdigit():\n        for i in range(len(lst)):\n            if lst[i].isalpha():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a non-letter and is a non-letter\n    if not str[-1].isdigit():\n        for i in range(len(lst)):\n            if lst[i].isalpha():\n                sub_strings += 1\n        return sub_strings\n    # if the last character is a non-letter and is a non-letter\n    if not str[-1].isdigit():\n        for i in range(len(lst)):\n            if lst[i].isalpha():\n                sub_strings += 1\n        return sub_strings\n",
        "num_ids": 691
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    counter = 0\n    for i in range(0,m-1):\n        if n > (i+1):\n            counter += 1\n        else:\n            counter += 1\n            n = n - (i+1)\n    if m == 1:\n        return counter\n    else:\n        return counter + 1\n        \n",
        "num_ids": 78
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for sequence in range(1,n+1):\n        total_number_of_sequences += (m*sequence)\n        # print(total_number_of_sequences)\n    return total_number_of_sequences\n",
        "num_ids": 68
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n: \n        raise ValueError('m must be larger than n')\n    \n    num_of_sequences = 0\n    for i in range(n): \n        if i >= m - 1 and i % 2 == 1: \n            num_of_sequences += 1\n        else: \n            num_of_sequences += (2 ** (n - i - 1))\n    return num_of_sequences\n",
        "num_ids": 104
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Write your code here\n    seq_length = 2\n    number_of_seqs = 0\n    sequence_of_lengths = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n    for x in sequence_of_lengths:\n        while x>=2:\n            if n >= 2*x:\n                seq_length += 1\n                n -= 2*x\n            else:\n                break\n    for x in sequence_of_lengths[1:]:\n        while n>=2*x:\n            seq_length += 1\n            n -= 2*x\n    for x in sequence_of_lengths[1:]:\n        if n > 2*x:\n            seq_length += 1\n            n -= 2*x\n    return seq_length\n",
        "num_ids": 229
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    '''\n    # write your code here\n    def check_sequence(n):\n        if (n == 1):\n            return True\n        if(n % 2 == 1):\n            return False\n        for i in range(1,n//2+1):\n            if (check_sequence(i) == False):\n                return False\n        return True\n        \n    '''\n    \n    \n    total_sequence = 0\n    \n    while (True):\n        m = random.randint(1,m)\n        n = random.randint(1,m)\n        if (check_sequence(n) == False):\n            total_sequence += n\n        else:\n            break\n    \n    return total_sequence\n    \n    \ndef get_m_n(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (n == 1):\n        return [1]\n    else:\n        return [i for i in get_m_n(m,n-1)] + [i for i in get_m_n(m,n-2)]\n    \n    \ndef get_m_n_binary(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    return get_m_n(m,n)\n    \n    \ndef get_m_n_binary_rec(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return [1]\n    else:\n        return get_m_n_binary_rec(m-1,n) + get_m_n_binary_rec(m-1,n-1)\n    \n    \ndef get_m_n_binary_rec_2(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (n == 0):\n        return []\n    else:\n        l = [i for i in get_m_n_binary(m,n-1)]\n        l.append(0)\n        return l\n        \n    \n    \ndef get_m_n_binary_rec_3(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return [1]\n    else:\n        return get_m_n_binary_rec_3(m-1,n-1) + get_m_n_binary_rec_3(m-1,n-2) + get_m_n_binary_rec_3(m-2,n-1)\n        \n    \ndef get_m_n_binary_rec_4(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return [1]\n    else:\n        return get_m_n_binary_rec_4(m-1,n-1) + get_m_n_binary_rec_4(m-1,n-2) + get_m_n_binary_rec_4(m-2,n-1)\n        \n    \ndef get_m_n_binary_rec_5(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return []\n    else:\n        l = []\n        for i in range(1,m):\n            l.append(i)\n            l.append(i)\n            l.append(i)\n        return l\n        \n    \ndef get_m_n_binary_rec_6(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return []\n    else:\n        l = []\n        for i in range(1,m):\n            l.append(i)\n            l.append(i)\n            l.append(i)\n        return l\n        \n    \n    \ndef get_m_n_binary_rec_7(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return []\n    else:\n        l = []\n        for i in range(1,m):\n            l.append(i)\n            l.append(i)\n            l.append(i)\n        return l\n        \n    \ndef get_m_n_binary_rec_8(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return []\n    else:\n        l = []\n        for i in range(1,m):\n            l.append(i)\n            l.append(i)\n            l.append(i)\n        return l\n        \n    \ndef get_m_n_binary_rec_9(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return []\n    else:\n        l = []\n        for i in range(1,m):\n            l.append(i)\n            l.append(i)\n            l.append(i)\n        return l\n    \n    \ndef get_m_n_binary_rec_10(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return []\n    else:\n        l = []\n        for i in range(1,m):\n            l.append(i)\n            l.append(i)\n            l.append(i)\n        return l\n    \n    \n    \ndef get_m_n_binary_rec_11(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    elif (m == 1):\n        return [1]\n    elif (n == 0):\n        return []\n    else:\n        l = []\n        for i in range(1,m):\n            l.append(i)\n            l.append(i)\n            l.append(i)\n        return l\n        \n    \ndef get_m_n_binary_rec_12(m,n):\n    '''\n    Given a positive integer m and an integer n, return a list of all possible sequences of length n.\n    '''\n    if (m == 0):\n        return []\n    e",
        "num_ids": 16
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # write your code here\n    import math\n    answer = (m*n)//2\n    # if m > n then m, n are equal, there are no sequences\n    if m > n:\n        return answer\n    # if m < n, m, n are equal, we have to use a binary search\n    while m <= n:\n        mid = (m + n) // 2\n        mid_count = 0\n        for j in range(1,mid+1):\n            if m < mid:\n                mid_count += j\n            if m > mid:\n                mid_count -= j\n            if mid_count == mid:\n                return mid\n        m = mid + 1\n    return -1\n",
        "num_ids": 165
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if m <= 0 or n <= 0: \n        return 0\n    \n    total = 0\n    for i in range(m - 1): \n        total = total + 2 * (n - i - 1)\n    total = total + n - m\n    return total",
        "num_ids": 66
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    m = m+1\n    n = n+1\n    return (((m*(m+1))//2)//n)\n    \ndef main():\n    '''\n    Calls the main function of the module.\n    '''\n    m = int(input(\"Enter the length of the sequence: \"))\n    n = int(input(\"Enter the length of the sequence: \"))\n    print(get_total_number_of_sequences(m,n))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 71
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for x in range(0,n):\n        total_number_of_sequences += 2 ** x\n    return total_number_of_sequences\n",
        "num_ids": 50
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int((m+n)/2)\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Create the function that will be called\n    def replace_last(list1,list2):\n        '''\n        Write a function that replaces the last element of the first list with the elements of the second list.\n        '''\n        list1[-1]=list2[-1]\n        return list1\n",
        "num_ids": 21
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    #Fill in start\n    if(len(list1)==len(list2)):\n        list1.append(list2[-1])\n    else:\n        for i in range(len(list2)-1, -1, -1):\n            list1.append(list2[i])\n    \n    #Fill in end\n    \n    return list1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2002
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list1[-1]) + list(list2[-1])\n    \n    \ndef remove_space(str):\n    '''\n    This function takes in a string and returns it with all newlines removed.\n    '''\n    newstr = str.replace('\\n', '')\n    return newstr\n    \ndef check_string(string):\n    '''\n    This function takes in a string and returns True or False.\n    '''\n    if'' in string:\n        return True\n    else:\n        return False\n        \ndef check_string_n_space(string):\n    '''\n    This function takes in a string and returns True or False.\n    '''\n    if'' in string:\n        return True\n    else:\n        return False\n    \ndef upper_case(string):\n    '''\n    This function takes in a string and returns it in upper case.\n    '''\n    return string.upper()\n    \ndef swap_case(string):\n    '''\n    This function takes in a string and returns it in lower case.\n    '''\n    return string.lower()\n    \ndef delete_space(string):\n    '''\n    This function takes in a string and returns it without the newlines.\n    '''\n    return string.replace('\\n','')\n    \ndef get_number_dict(line):\n    '''\n    This function takes in a line of input and returns a dictionary that contains the number and its respective key.\n    '''\n    temp_dict = {}\n    lines = line.split()\n    for item in lines:\n        temp_dict[item] = lines.index(item)\n    return temp_dict\n    \ndef count_the_words(string):\n    '''\n    This function takes in a string and returns the number of words in the string.\n    '''\n    return len(string.split())\n    \ndef is_vowel(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a vowel.\n    '''\n    if character == \"a\" or character == \"e\" or character == \"i\" or character == \"o\" or character == \"u\":\n        return True\n    else:\n        return False\n    \ndef is_consonant(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a consonant.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n        \ndef is_consonant_vowel(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a consonant with a vowel.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n        \ndef is_vowel_consonant(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a vowel with a consonant.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n        \ndef is_vowel_consonant_vowel(character):\n    '''\n    This function takes in a character as an input and returns True or False depending on whether or not the character is a vowel with a consonant with a vowel.\n    '''\n    if character == \"g\" or character == \"G\" or character == \"t\" or character == \"T\" or character == \"y\" or character == \"Y\" or character == \"a\" or character == \"A\" or character == \"i\" or character == \"I\" or character == \"o\" or character == \"O\":\n        return True\n    else:\n        return False\n    \ndef write_list_to_file(output_list, file_name):\n    '''\n    This function takes in a list of strings and write them to a text file.\n    '''\n    f = open(file_name, 'w')\n    for item in output_list:\n        f.write(item)\n        f.write('\\n')\n    f.close()\n    \ndef write_dict_to_file(output_dict, file_name):\n    '''\n    This function takes in a dictionary of keys and values and write them to a text file.\n    '''\n    f = open(file_name, 'w')\n    for key in output_dict:\n        f.write(key)\n        f.write('\\n')\n        f.write(str(output_dict[key]))\n        f.write('\\n')\n    f.close()\n    \ndef read_file(file_name):\n    '''\n    This function takes in a text file as an input and returns a list of strings.\n    '''\n    input_list = []\n    f = open(file_name, 'r')\n    for line in f:\n        input_list.append(line)\n    f.close()\n    return input_list\n    \ndef read_dictionary(file_name):\n    '''\n    This function takes in a text file as an input and returns a dictionary.\n    '''\n    input_dict = {}\n    f = open(file_name, 'r')\n    for line in f:\n        key = line.strip()\n        value = line.strip()\n        input_dict[key] = value\n    f.close()\n    return input_dict\n    \ndef main():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line,get_number_dict(input_line))\n    write_list_to_file(output_line, \"output.txt\")\n    \ndef main_v():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line, get_number_dict(input_line))\n    output_line = delete_space(output_line)\n    write_list_to_file(output_line, \"output_v.txt\")\n    \n    \nmain()\n    \ndef main_n():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line, get_number_dict(input_line))\n    output_line = delete_space(output_line)\n    write_list_to_file(output_line, \"output_n.txt\")\n    \n    \nmain_n()\n    \ndef main_n_v():\n    '''\n    This function takes in an input string and writes it to a text file.\n    '''\n    input_line = input(\"Input a string: \")\n    output_line = replace_list(input_line, get_number_dict(input_line))\n    output_line = delete_space(output_line)\n    output_line = upper_case(output_line)\n    output_line = swap_case(output_line)\n    output_line = remove_space(output_line)\n    output_line = is_vowel(output_line)\n    output_line = is_vowel_consonant(output_line)\n    output_line = is_consonant(output_line)\n    output_line = is",
        "num_ids": 154
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if(len(list1)<len(list2)):\n        list2.extend(list1)\n    else:\n        list1.extend(list2)\n    return list1",
        "num_ids": 48
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    temp = list1.pop(-1)\n    list1.append(temp)\n    list2.pop(-1)\n    list2.append(temp)\n",
        "num_ids": 40
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Create new list\n    new_list = []\n    # Loop through both lists and keep the last element\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    for i in range(len(list2)):\n        new_list.append(list2[i])\n    # Return new list\n    return new_list\n    \n    ",
        "num_ids": 94
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # YOUR CODE HERE\n    list1.pop()\n    list1.pop()\n    list1.append(list2.pop())\n    \n    return list1\n    \n    \n",
        "num_ids": 45
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list2)] + list2[:]\n",
        "num_ids": 19
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    return list1[:len(list2)]+list2\n",
        "num_ids": 19
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        if char.isalpha():\n            char_count += 1\n    return char_count\n",
        "num_ids": 38
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n    ",
        "num_ids": 25
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Initialize an empty list.\n    count_list = []\n    # Iterate through the string.\n    for char in str1:\n        # Add the number of characters to the list.\n        count_list.append(char)\n    # Return the total number of characters.\n    return sum(count_list)\n",
        "num_ids": 76
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for i in str1:\n        if i.isalpha():\n            char_count += 1\n    return char_count\n",
        "num_ids": 38
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # case sensitive\n    # for each character in the string\n    count_char = 0\n    # for each character in the string\n    for character in str1:\n        # if the character is uppercase\n        if character.isupper():\n            # count the characters of uppercase\n            count_char += 1\n        # if the character is lowercase\n        elif character.islower():\n            # count the characters of lowercase\n            count_char += 1\n        # if the character is a symbol\n        else:\n            # count the characters of a symbol\n            count_char += 1\n    return count_char\n",
        "num_ids": 144
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # use the count() method to return the number of times\n    # that a character appears in a string\n    count = 0\n    for i in str1:\n        count += 1\n    print(f\"{count} characters in {str1}\")\n",
        "num_ids": 60
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += len(i)\n    return count\n",
        "num_ids": 27
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = 0\n    for i in str1:\n        result += 1\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count(\"a\")+str1.count(\"e\")+str1.count(\"i\")+str1.count(\"o\")+str1.count(\"u\")\n",
        "num_ids": 44
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = math.sqrt(N)\n    if square % 1 == 0:\n        square = int(square)\n    sqrt = int(square)\n    for i in range(1, len(sqrt)):\n        if (sqrt ** 2 + (1 - sqrt) ** 2) ** 0.5 == math.sqrt(N):\n            if (sqrt ** 2 + (1 - sqrt) ** 2) > N:\n                return sqrt ** 2 + (1 - sqrt) ** 2\n",
        "num_ids": 121
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 2:\n        return N\n",
        "num_ids": 13
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = math.sqrt(N)\n    if N == 1: \n        return sqrtN\n    if N == 2:\n        return 2*sqrtN\n    if N % 2 == 0:\n        return (N+1)**2\n",
        "num_ids": 63
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return math.sqrt(N) + 1\n",
        "num_ids": 14
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if N <= 1:\n        return N\n    \n    # find the next perfect square\n    square_n = N ** 0.5\n",
        "num_ids": 36
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    answer = 0\n    n = N\n    d = math.floor(math.sqrt(n))\n    while n % d == 0: \n        answer += 1\n        n = n/d\n    \n    if answer == 1:\n        return math.sqrt(n)\n    else:\n        return answer\n    \n    \n    ",
        "num_ids": 83
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Using the math library, calculate the sum of the squares of all numbers smaller than a given number, and \n    # the sum of the squares of all numbers greater than a given number.\n    sum1 = 0\n    sum2 = 0\n    for i in range(0, N + 1):\n        sum1 += i\n    sum2 = N + sum1\n    for j in range(1, int(math.sqrt(sum2)) + 1):\n        if j ** 2 >= sum2:\n            return int(sum1 + sum2) ** 2\n",
        "num_ids": 129
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<1:\n        print(N)\n        return\n    if N==1:\n        print(N)\n        return\n    \n    next_Perfect_Square(N//2)\n",
        "num_ids": 48
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # get the number of digits in the number\n    digits = len(str(N))\n    # initialize an initial value\n    # if N is 0, return the starting value\n    if digits == 0:\n        return math.sqrt(N)\n    # if the number is not perfect square, return the next perfect square\n    else:\n        # initialize an initial value\n        i = 0\n        # go through each digit\n        # if the number is divisible by 2, add one digit to the i\n        while i < digits:\n            if N % (10 ** i) == 0:\n                N = N // (10 ** i)\n                # if the number is not divisible by 2, return the next perfect square\n                if N == 0:\n                    return next_Perfect_Square(N)\n            i += 1\n",
        "num_ids": 189
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1:\n        return N\n",
        "num_ids": 13
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_subsequence(arr): \n        if arr == []: \n            return 0\n",
        "num_ids": 27
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    sum = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the maximum value of the array\n    max_val = arr[0]\n    # Append the elements of the array into an array\n    arr = [x+y for x, y in zip(arr[1:], arr[:-1])]\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the value of the current element is higher than the maximum value of the array\n        if arr[i] > max_val:\n            # Set the maximum value as the current element\n            max_val = arr[i]\n        # If the current value is lower than the maximum value of the array\n        elif arr[i] < max_val:\n            # Set the maximum value as the current value\n            max_val = arr[i]\n    # Return the maximum value of the array\n    return max_val\n",
        "num_ids": 199
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    sum_array = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] >= arr[j]:\n                sum_array += arr[i]\n            else:\n                sum_array += arr[j]\n    return sum_array\n    \n",
        "num_ids": 85
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic_sequence(arr,m):\n        \n        l, r = 0, 1; count = 0\n        \n        while l < m and r < m:\n            if arr[l] <= arr[r]:\n                count += 1\n                l += 1\n            else:\n                count = max(count, 1)\n                r += 1\n        \n        return count\n    \n    return bitonic_sequence(arr, len(arr))\n",
        "num_ids": 105
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n",
        "num_ids": 9
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n",
        "num_ids": 48
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum = 0\n    i = 0\n    j = 1\n    while i <= len(arr) - 2:\n        if j == len(arr) - 1:\n            break\n        if arr[i] < arr[j]:\n            sum += arr[i]\n            i += 1\n            j += 1\n        else:\n            sum += arr[j]\n            j += 1\n    return sum\n",
        "num_ids": 95
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    sequence = []\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            sequence.append(arr[i])\n            max_sum = max(sequence)\n            sequence = sequence[1:]\n        else:\n            sequence.append(arr[i])\n    return max_sum\n    \n",
        "num_ids": 86
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def babylonian_squareroot_rec(x, max, comp=False, comp_sq=False, max_comp=None):\n        if comp and comp_sq:\n            return (x**2 + x + 1)*(1 if comp else (x**2) + (x - 1))\n        if comp:\n            return (x**2 + x + 1)*(1 if comp else (x**2) + (x - 1))\n        if comp_sq:\n            return (x**2 + x + 1)*(1 if comp_sq else (x**2) + (x - 1))\n        if max_comp is not None:\n            if max_comp == 1:\n                return (x**2 + x + 1)*(1 if comp else (x**2) + (x - 1))\n            elif max_comp == 2:\n                return (x**2 + x + 1)*(1 if comp_sq else (x**2) + (x - 1))\n            else:\n                return (x**2 + x + 1)*(1 if comp_sq else (x**2) + (x - 1))\n        else:\n            return (x**2 + x + 1)*(1 if comp_sq else (x**2) + (x - 1))\n    def is_babylonian(x, max=None):\n        if max is None:\n            max = 0\n        return x <= max\n",
        "num_ids": 330
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return (number**0.5)**(1/2)\n    \ndef main():\n    '''\n    The main function, which uses the turtle module for creating turtles.\n    '''\n    # create a new turtle\n    turtle = turtle_module.Turtle()\n    turtle.speed('fastest')\n    \n    # create a new turtle and draw the figure\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.circle(50)\n    turtle.end_poly()\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.circle(50)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.end_poly()\n    \n    # create a new turtle and draw the square\n    turtle.up()\n    turtle.goto(0, 0)\n    turtle.down()\n    turtle.begin_poly()\n    turtle.forward(50)\n    turtle.left(90)\n    turtle.forwar",
        "num_ids": 1971
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    number = abs(number)\n    while number > 0:\n        if (number % 10) == 0:\n            squareroot = squareroot + 1\n            number = int(number / 10)\n        else:\n            squareroot = squareroot + 1\n            number = int(number / 10) + 1\n    return squareroot\n",
        "num_ids": 83
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqrt_numbers = []\n    i = 0\n    while i < len(number):\n        if number[i] == 0:\n            sqrt_numbers.append(0)\n        else:\n            sqrt = 0\n            for j in range(i, len(number)):\n                if number[j]!= 0:\n                    sqrt = sqrt + number[j]*j\n            if sqrt!= 0:\n                sqrt_numbers.append(sqrt)\n        i += 1\n    return sum(sqrt_numbers)\n",
        "num_ids": 134
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x=number\n    print(\"Square Root of\",number,\"is\",end=\" \")\n    while (x>0):\n        r=x%10\n        print(r,end=\", \")\n        x=x//10\n    print(\"1\")\n    print(\"Square Root of\",number,\"is\",end=\" \")\n    while (x>0):\n        r=x%10\n        print(r,end=\", \")\n        x=x//10\n    print(\"1\")\ndef main():\n    print(\"\\n---Welcome to the Babylonian Square Root Calculator---\")\n    print(\"The Babylonian Square Root Calculator is a simple math calculator that computes square roots using babylonian method. \")\n    print(\"The input is the number of terms to compute the square roots of. If only the number of terms is less than or equal to 0, a normal method is used. If only a certain number of terms is entered, the output is the square root of that number.\")\n    print(\"\")\n    print(\"The Babylonian Square Root Calculator\\n\")\n    print(\"This program is based on the Babylonian Square Root Calculator in a very easy way by calculating the square root of the number passed in. \")\n    print(\"The program computes the square roots using babylonian method. \")\n    print(\"\")\n    print(\"Some of the inputs are:\")\n    print(\"\")\n    print(\"   Number of terms\\t\",end=\"\")\n    print(\"\")\n    print(\"\"\"1.     The input is a number (int)\n2.     The input is an integer (int)\n3.     The input is a string (str)\"\"\")\n    print(\"\")\n    print(\"The program uses the babylonian method to compute the square roots.\")\n    print(\"\")\n    print(\"The program uses the babylonian method to compute the square roots of the number passed in.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    print(\"\")\n    print(\"The program then prints the square root of the input number, separated by a space.\")\n    print(\"\")\n    prin",
        "num_ids": 2016
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number==0:\n        return 0\n    elif number==1:\n        return 1\n    elif number==2:\n        return 2\n    else:\n        for i in range(2,number):\n            if i%2==0:\n                pass\n            else:\n                return (babylonian_squareroot(number-i))/i\n",
        "num_ids": 86
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Number to be divided by 10^0\n    # A rational number is exactly a rational number in the form a/b where a is the square root of b.\n    # The result is rounded down to the nearest integer.\n    # b is then divided by 10^0.\n    # A positive integer is a rational number that is divisible by a.\n    # A negative integer is a rational number that is not divisible by a.\n",
        "num_ids": 99
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return number\n    elif number < 0:\n        return babylonian_squareroot(abs(number))\n    elif number % 2 == 0:\n        return babylonian_squareroot(number // 2)\n    elif number % 2 == 1:\n        return fabs(number) ** (1/2)\n    else:\n        return fabs(number) ** (1/2) + fabs(number // 2) ** (1/2)\n",
        "num_ids": 115
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    ans = 0\n    for i in range(1, number + 1):\n        ans = ans + (i ** 2) * (1 / (i ** 2))\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = [1,2,3,4,5]\n    result = []\n    for i in x:\n        result.append(babylonian(i,number))\n    return(result)\n",
        "num_ids": 50
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    \n    #make a stack to store the previous palindromic subsequence\n    stack = []\n    max_len = 1\n    \n    #for each letter in the string\n    for letter in str:\n        #check if the letter is in the stack\n        if(letter in stack):\n            #add it to the stack\n            stack.append(letter)\n        #if the stack is empty, we can get it\n        elif(len(stack) == 0):\n            #if the length is not greater than max_len, we know it is a palindrome\n            #add it to the stack\n            stack.append(letter)\n            max_len = max(max_len, len(stack))\n        #else, we have to pop the last element from the stack\n        else:\n            #then, we put the last element in to the stack\n            stack.pop()\n            #then, check the length of the stack and add it to the max_len\n            max_len = max(max_len, len(stack))\n        \n    #check if the length of the stack is the same as the length of the string\n    #if the length is not the same, then we cannot get a palindrome\n    return max_len if len(stack) == len(str) else 0\n        \nif __name__ == \"__main__\":\n    str = \"aba\"\n    print(lps(str)",
        "num_ids": 326
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # To store longest palindromic subsequence\n    longest = []\n",
        "num_ids": 22
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    t = {\n        'r':'p',\n        'p':'a',\n        'b':'n',\n        'n':'o',\n        'a':'t',\n        'n':'n',\n        't':'u',\n        'u':'w',\n        'r':'l',\n        'l':'d',\n        'd':'o'\n    }\n    dp = [[0 for x in range(len(str)+1)] for y in range(len(str)+1)]\n    for i in range(1,len(str)+1):\n        for j in range(1,i+1):\n            if str[i-j] == str[i-1]:\n                dp[i][j] = dp[i-j][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i-1][j-1],dp[i-1][j])\n    return dp[-1][-1]\n",
        "num_ids": 235
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == \"\":\n        return 0\n    \n    if str[0] == str[-1]:\n        return 1 + lps(str[1:-1])\n    else:\n        return max(lps(str[1:]), lps(str[:-1]))\n",
        "num_ids": 68
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # This line starts a loop.\n    LPS = []\n    for i in range(len(str)): \n        # A palindrome is a string that reads the same backwards as forwards. \n        # This is a palindrome if it is a palindrome where it reads the same backwards as forward. \n        # E.g., \"abcba\" is a palindrome because \"bac\" and \"cba\" are both palindromes.\n        if len(str) == 1: \n            LPS.append(str[0]) \n            return len(LPS)\n        # Find the longest palindrome that ends in a \"s\" or \"t\". \n        # Note that we can have multiple \"s\" and \"t\" in a palindrome. \n        if str[i] == str[i+1]: \n            # Can't end in a s. \n            if i+2 >= len(str): \n                LPS.append(str[i]) \n                return len(LPS)\n            # Can end in t. \n            elif str[i+1] == str[i+2]: \n                LPS.append(str[i]) \n                return len(LPS)\n            # Can end in a s and a t. \n            else: \n                LPS.append(str[i]) \n                return len(LPS)\n        # Remove the next char and backtrack. \n        # Note: this is the same as removing a char from the string. \n        elif str[i]!= str[i+1]: \n            str[i+1] = str[i+1] \n            LPS.append(str[i]) \n            return len(LPS)\n    # All palindromes are returned as long as we still have a palindrome. \n    return len(LPS)\n",
        "num_ids": 439
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # str: str, int\n    \n    if len(str) == 1: \n        return 1\n    \n    if len(str) == 2: \n        return 2 if str[0] == str[1] else 1\n    \n    dp = [[0] * (len(str) + 1) for i in range(len(str))]\n    for i in range(1, len(str)): \n        dp[i][i] = 1\n        for j in range(i): \n            if str[i] == str[j] and dp[i - 1][j - 1] == 1: \n                dp[i][j + 1] = 1 + dp[i - 1][j] \n            elif str[i] == str[j] and dp[i - 1][j] == 1: \n                dp[i][j] = 1 + dp[i - 1][j - 1]\n        dp[i][i] = 1\n    \n    lps = 1\n    for i in range(len(str)): \n        lps = max(lps, dp[i][i])\n    \n    return lps ",
        "num_ids": 274
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2:\n        return len(str)\n    # store the current length of string\n    curr_len = 1\n    # keep looping until the first element of string is larger than 1\n    for i in range(1, len(str)):\n        # if the current element of string is not the first element of the string\n        if str[i] > str[i-1]:\n            # increment the current length by 1\n            curr_len += 1\n        else:\n            # if the current element of string is larger than the previous element\n            # then break out of the loop\n            break\n    # initialize a hash table to store the subsequences\n    sub_lps = {'_': 1}\n    # get the longest subsequence\n    for j in range(1, curr_len):\n        # get the index of the current element\n        i = j - 1\n        # get the length of the subsequence\n        l = len(str[i])\n        # if the current element of the subsequence is larger than the previous element\n        if l > sub_lps[str[i]]:\n            # add the subsequence\n            sub_lps[str[i]] = l\n    return max(sub_lps.values())\n",
        "num_ids": 293
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def longestPalindrome(s):\n        memo = {}\n        max_len = 0\n        def dfs(s,curr_len,curr_memo):\n            if curr_len > max_len:\n                max_len = curr_len\n            if len(s) == curr_len:\n                return curr_memo[curr_len]\n            if len(s) > curr_len:\n                return max(dfs(s[1:],curr_len+1,curr_memo) + (curr_len+1) * dfs(s[1:],curr_len,curr_memo), dfs(s[1:],curr_len,curr_memo))\n        for i in range(len(s)):\n            curr_len = len(s) - i\n            curr_memo = {}\n            dfs(s[i:],curr_len,curr_memo)\n        return max_len\n",
        "num_ids": 241
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    s = ''.join(sorted(str))\n    length = 0\n    for i in range(len(s)-1, -1, -1):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j] and i+1 == j:\n                length += 2\n            else:\n                break\n    return length\n",
        "num_ids": 90
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # def lps(str): \n    #     if len(str) == 0:\n    #         return 0\n    #     if len(str) == 1:\n    #         return 1\n    #     if str[0] == str[-1]:\n    #         return 1 + lps(str[1:-1])\n    #     else:\n    #         return 1 + lps(str[1:])\n    # return lps(str)\n",
        "num_ids": 109
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n/2) + (n-1)/2\n",
        "num_ids": 17
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1\n    while (n > 0):\n        harmonic_sum += 1/n\n        n = n-1\n    return harmonic_sum\n",
        "num_ids": 41
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/(1+n))**(1/n)\n",
        "num_ids": 18
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n + 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + (1/n)*harmonic_sum(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    \n    if n==0:\n        return 0\n    else:\n        return (harmonic_sum(n-1))/n\n",
        "num_ids": 34
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n + 1)/(2*n + 1)\n",
        "num_ids": 17
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1 - n)\n",
        "num_ids": 12
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for a in array_nums1:\n        for b in array_nums2:\n            if a == b:\n                result.append(a)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    i,j = 0,0\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i] < array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return intersection\n",
        "num_ids": 125
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #To find the intersection of two arrays\n    intersection = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i == j:\n                intersection.append(i)\n",
        "num_ids": 56
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # array_1 = [0,1,2,4]\n    # array_2 = [5,6,7,8]\n    # intersection = [0,1,3]\n    \n    array_1 = array_nums1\n    array_2 = array_nums2\n",
        "num_ids": 70
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = array_nums1.copy()\n    array2 = array_nums2.copy()\n    array_dif = []\n    for i in range(len(array1)):\n        for j in range(len(array2)):\n            if array1[i] == array2[j]:\n                array_dif.append(array1[i])\n    array_dif.sort()\n    return array_dif\n",
        "num_ids": 106
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    temp = []\n    for i in array_nums1:\n        temp.append(i)\n    for j in array_nums2:\n        if (j in temp):\n            temp.remove(j)\n    return temp\n",
        "num_ids": 57
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    sorted_nums1 = sorted(array_nums1)\n    sorted_nums2 = sorted(array_nums2)\n    \n    index = 0\n    res = []\n    while index < len(sorted_nums1):\n        if sorted_nums1[index] in sorted_nums2 and sorted_nums1[index] not in res:\n            res.append(sorted_nums1[index])\n            index += 1\n        elif sorted_nums2[index] in sorted_nums1 and sorted_nums2[index] not in res:\n            res.append(sorted_nums2[index])\n            index += 1\n        else:\n            pass\n    return res\n",
        "num_ids": 174
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_num = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection_num.append(array_nums1[i])\n    return intersection_num\n",
        "num_ids": 67
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection_array.append(num)\n    return intersection_array\n",
        "num_ids": 49
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # TODO: Write a Python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    # Hint: https://www.geeksforgeeks.org/python-count-occurrence-of-two-numbers-in-a-tuple/\n    tup_lst = []\n    for element in tup:\n        if element == x:\n            tup_lst.append(tup.count(element))\n        \n    return tup_lst\n",
        "num_ids": 123
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len([i for i in tup if i==x])\n",
        "num_ids": 18
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    s = 0\n    for i in tup:\n        if i == x:\n            s += 1\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # get the elements\n    elems = list(tup)\n    # get the elements\n    elems.sort()\n    # increment the count\n    elems.append(x)\n    # return the new tuple\n    return elems\n",
        "num_ids": 58
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            cnt += 1\n    return cnt\n",
        "num_ids": 43
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count \n",
        "num_ids": 34
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup = list(tup)\n    x = list(x)\n    tup.sort()\n    x.sort()\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x[i]:\n            count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    lst = list(tup) \n    n = len(lst) \n    count = 0\n    for i in lst: \n        if i == x: \n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count = count + 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result_list=[]\n    for element in list:\n        result_list.append(element)\n        result_list.insert(0,element)\n",
        "num_ids": 38
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    for i in range(len(list)-1):\n        \n        #this is just for the last element, but if there is no last element, we will just append it.\n        if i == len(list) - 1:\n            list.append(element)\n            return list\n        \n        #if there is one before it, we will just move it up until it has the element.\n        else:\n            \n            #This is going to be the slowest part of the algorithm, but this time we'll just move our element to the end of the list, as well as remove it from our list.\n            #So if the list is the default list, this should be the only way we can do.\n            if list == []:\n                list.append(element)\n                return list\n                \n            #We'll go through the elements and if the element we're trying to insert is already in the list, we just append it.\n            #If the element is not there, we will go through it, and if it is, we'll remove it from the list, and add it to the end of the list.\n            elif list[i] == element:\n                list.remove(list[i])\n                list.append(element)\n                return list\n            \n            #if the element is not there, we'll go through it, and if it is, we'll remove it from the list, and append it to the end of the list.\n            #If it is the only one in the list, we will just add it to the list, and return the list.\n            else:\n                \n                #if the element is before it, we will just move it down until it is in the list.\n                if i == 0:\n                    list.insert(i,element)\n                    return list\n                    \n                #if the element is not before it, we will go through it, and if it is, we'll move it to the end of the list.\n                elif i == len(list)-1:\n                    list.insert(i,element)\n                    return list\n                    \n                #if the element is before it, we will just move it down until it is in the list.\n                elif list[i] == element:\n                    list.insert(i,element)\n                    return list\n                    \n                #if the element is not there, we'll move it to the end of the list.\n                else:\n                    list.insert(i,element)\n                    return list\n                    \n    #If we didn't break, the while loop would be running, and nothing was actually added to the list.\n    return lis",
        "num_ids": 584
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in list:\n        list.insert(list.index(i),element)\n    return list\n",
        "num_ids": 27
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    elif len(list) == 1:\n        list.append(element)\n        return list\n    else:\n        index = 0\n        while index < len(list)-1:\n            if element < list[index]:\n                list[index],list[index+1] = list[index+1],list[index]\n                index += 1\n                return list\n            else:\n                index += 1\n    return list\n",
        "num_ids": 113
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) < 2:\n        return list\n    index = len(list) - 1\n    last_element = list[index]\n    \n    while index > 0:\n        if list[index] == last_element:\n            break\n        index -= 1\n    \n    if list[index] == last_element:\n        index = index - 1\n        \n    list[index] = element\n    \n    return list\n",
        "num_ids": 102
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for i in range(len(list)):\n        new_list.append(list[i])\n    \n    new_list.insert(0,element)\n    return new_list\n",
        "num_ids": 53
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        raise IndexError('empty list')\n    else:\n        s = 0\n        for i in range(len(list)):\n            if not list[i] == element:\n                list.insert(s,element)\n                s += 1\n        return list\n",
        "num_ids": 68
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list\n",
        "num_ids": 6
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element = element\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n        list = new_list\n    return list\n",
        "num_ids": 59
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    newlist = []\n    for i in list:\n        newlist.append(i)\n    newlist.insert(0,element)\n    return newlist\n",
        "num_ids": 40
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        conversion = cmath.rect(0,0)\n        for i in range(len(numbers)):\n            conversion = cmath.rect(conversion.real,conversion.imag*numbers[i])\n        conversion = str(round(conversion.real,2)) + 'i' + str(round(conversion.imag,2))\n    except:\n        conversion = 'The following error occurred.'\n    return conversion\n",
        "num_ids": 109
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    if not numbers:\n        return 0\n    else:\n        a=numbers[0]\n        b=numbers[1]\n        c=numbers[2]\n    \n    if a==0 and b!=0:\n        d=cmath.polar(b)\n        e=cmath.polar(d)\n        f=cmath.polar(a)\n        g=cmath.polar(b/a)\n        h=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        i=cmath.polar(b*cmath.sqrt(b**2-4*a*c))\n        j=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        print(\"\\nAngles of the entered complex number are as follows\")\n        print(\"\\t1.1.1.1\",str(d))\n        print(\"\\t1.1.2.1\",str(e))\n        print(\"\\t1.1.3.1\",str(f))\n        print(\"\\t1.1.4.1\",str(g))\n        print(\"\\t1.1.5.1\",str(h))\n        print(\"\\t1.1.6.1\",str(i))\n        print(\"\\t1.1.7.1\",str(j))\n        \n    elif b==0 and a!=0:\n        d=cmath.polar(a)\n        e=cmath.polar(b)\n        f=cmath.polar(d)\n        g=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        print(\"\\nAngles of the entered complex number are as follows\")\n        print(\"\\t1.1.1.1\",str(d))\n        print(\"\\t1.1.2.1\",str(e))\n        print(\"\\t1.1.3.1\",str(f))\n        print(\"\\t1.1.4.1\",str(g))\n        \n    elif c==0 and a!=0:\n        d=cmath.polar(a)\n        e=cmath.polar(b)\n        f=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        g=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        h=cmath.polar(b*cmath.sqrt(b**2-4*a*c))\n        i=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        j=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        print(\"\\nAngles of the entered complex number are as follows\")\n        print(\"\\t1.1.1.1\",str(d))\n        print(\"\\t1.1.2.1\",str(e))\n        print(\"\\t1.1.3.1\",str(f))\n        print(\"\\t1.1.4.1\",str(g))\n        print(\"\\t1.1.5.1\",str(h))\n        print(\"\\t1.1.6.1\",str(i))\n        print(\"\\t1.1.7.1\",str(j))\n    \n    elif c==0 and a!=0:\n        d=cmath.polar(a)\n        e=cmath.polar(b)\n        f=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        g=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        h=cmath.polar(b*cmath.sqrt(b**2-4*a*c))\n        i=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        j=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        print(\"\\nAngles of the entered complex number are as follows\")\n        print(\"\\t1.1.1.1\",str(d))\n        print(\"\\t1.1.2.1\",str(e))\n        print(\"\\t1.1.3.1\",str(f))\n        print(\"\\t1.1.4.1\",str(g))\n        print(\"\\t1.1.5.1\",str(h))\n        print(\"\\t1.1.6.1\",str(i))\n        print(\"\\t1.1.7.1\",str(j))\n    \n    elif b==0 and a!=0:\n        d=cmath.polar(a)\n        e=cmath.polar(b)\n        f=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        g=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        h=cmath.polar(b*cmath.sqrt(b**2-4*a*c))\n        i=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        j=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        print(\"\\nAngles of the entered complex number are as follows\")\n        print(\"\\t1.1.1.1\",str(d))\n        print(\"\\t1.1.2.1\",str(e))\n        print(\"\\t1.1.3.1\",str(f))\n        print(\"\\t1.1.4.1\",str(g))\n        print(\"\\t1.1.5.1\",str(h))\n        print(\"\\t1.1.6.1\",str(i))\n        print(\"\\t1.1.7.1\",str(j))\n    \n    elif b==0 and a!=0:\n        d=cmath.polar(a)\n        e=cmath.polar(b)\n        f=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        g=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        h=cmath.polar(b*cmath.sqrt(b**2-4*a*c))\n        i=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        j=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        print(\"\\nAngles of the entered complex number are as follows\")\n        print(\"\\t1.1.1.1\",str(d))\n        print(\"\\t1.1.2.1\",str(e))\n        print(\"\\t1.1.3.1\",str(f))\n        print(\"\\t1.1.4.1\",str(g))\n        print(\"\\t1.1.5.1\",str(h))\n        print(\"\\t1.1.6.1\",str(i))\n        print(\"\\t1.1.7.1\",str(j))\n    \n    elif c==0 and a!=0:\n        d=cmath.polar(a)\n        e=cmath.polar(b)\n        f=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        g=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        h=cmath.polar(b*cmath.sqrt(b**2-4*a*c))\n        i=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        j=cmath.polar(cmath.sqrt(b**2-4*a*c))\n        print(\"\\nAngles of the entered complex number are as follows\")\n        print(\"\\t1.1.1.1\",str(d))\n        print(\"\\t1.1.2.1\",str(e))\n        print(\"\\t1.1.3.1\",str(f))\n        print(\"\\t1.1.4.1\",str(g))\n    ",
        "num_ids": 2015
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # First function to convert from complex to polar\n    # First return value of function is not complex\n    if type(numbers) == complex:\n        return numbers.real, numbers.imag\n    elif type(numbers) == int or type(numbers) == float:\n        # Second function to convert from polar to complex\n        return numbers * cmath.pi, -1 * numbers * cmath.polar(0)\n",
        "num_ids": 99
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for n in numbers:\n        if type(n) is complex:\n            polar_list.append(cmath.polar(n))\n        else:\n            polar_list.append(n)\n    return polar_list\n",
        "num_ids": 65
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    if isinstance(numbers, complex):\n        complex_numbers.append(numbers)\n    else:\n        for i in numbers:\n            if isinstance(i, complex):\n                complex_numbers.append(i.conjugate())\n            else:\n                complex_numbers.append(i)\n    return complex_numbers\n    \ndef solve(complex_numbers):\n    '''\n    Write a python function to find the complex number that is closest to zero.\n    '''\n    diffs = []\n    if isinstance(complex_numbers, list):\n        complex_numbers = convert(complex_numbers)\n    for i in complex_numbers:\n        complex_numbers[complex_numbers.index(i)] = complex(0,0)\n    for i in range(len(complex_numbers)-1):\n        diffs.append((complex_numbers[i+1] - complex_numbers[i])/complex_numbers[i])\n    diffs.append((complex_numbers[-1] - complex_numbers[-2])/complex_numbers[-1])\n    return complex_numbers[diffs.index(min(diffs))]\n    \ndef solve_final(complex_numbers):\n    '''\n    Write a python function to find the complex number that is closest to zero.\n    '''\n    return complex(0,0)\n    \ndef print_complex(complex_numbers):\n    '''\n    Write a python function to print the complex number.\n    '''\n    for i in complex_numbers:\n        print(i)\n    \ndef expo(x):\n    '''\n    Write a python function to compute the real part and imaginary part of a complex number.\n    '''\n    real = (complex(0,0)).conjugate()\n    imag = 0\n    for i in x:\n        try:\n            real = real*(complex(i))\n            imag += i\n        except TypeError:\n            return real,i\n    return real,imag\n",
        "num_ids": 67
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # YOUR CODE HERE\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = round(complex(numbers[i][0], numbers[i][1]), 4)\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = complex(numbers[i][0], numbers[i][1])\n",
        "num_ids": 38
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = list(map(lambda x: cmath.polar(x), numbers))\n    return x\n",
        "num_ids": 27
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    p = [cmath.polar(x) for x in numbers]\n    print(p)\n",
        "num_ids": 26
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    s = (numbers.real**2+numbers.imag**2)**0.5\n    if abs(numbers.real) < 0.0000001:\n        return s\n    else:\n        return s*cmath.sqrt(numbers.real)\n    \n    \n    \ndef find_nearest(numbers,value):\n    '''\n    Write a python function to find the nearest value in a sequence.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return numbers[0]\n    elif (numbers[0] <= value and value < numbers[1]):\n        return find_nearest(numbers[1:],value)\n    elif (numbers[0] >= value and value >= numbers[1]):\n        return find_nearest(numbers[1:],value)\n    else:\n        return numbers[0]\n    \ndef find_derivative(numbers,value):\n    '''\n    Write a python function to find the derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])\n    else:\n        return (1/numbers[1])*(numbers[0]**2-numbers[1]**2)\n    \ndef find_second_derivative(numbers,value):\n    '''\n    Write a python function to find the second derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \ndef find_third_derivative(numbers,value):\n    '''\n    Write a python function to find the third derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_fourth_derivative(numbers,value):\n    '''\n    Write a python function to find the fourth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_fifth_derivative(numbers,value):\n    '''\n    Write a python function to find the fifth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \n    \ndef find_sixth_derivative(numbers,value):\n    '''\n    Write a python function to find the sixth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_seventh_derivative(numbers,value):\n    '''\n    Write a python function to find the seventh derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_eigth_derivative(numbers,value):\n    '''\n    Write a python function to find the eigth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \ndef find_eighth_derivative(numbers,value):\n    '''\n    Write a python function to find the eighth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_ninth_derivative(numbers,value):\n    '''\n    Write a python function to find the ninth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_tenth_derivative(numbers,value):\n    '''\n    Write a python function to find the tenth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_eleventh_derivative(numbers,value):\n    '''\n    Write a python function to find the eleventh derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_twelfth_derivative(numbers,value):\n    '''\n    Write a python function to find the twelfth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[1]**2-numbers[0]**2)\n    else:\n        return (1/numbers[1])*(numbers[1]**2-numbers[0]**2)\n    \n    \ndef find_thirteenth_derivative(numbers,value):\n    '''\n    Write a python function to find the thirteenth derivative of a complex number.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers)==1:\n        return (1/numbers[0])*(numbers[",
        "num_ids": 44
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list_of_complexes = []\n",
        "num_ids": 12
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if type(item) == int:\n            counter = counter + 1\n    return counter\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_elements = len(list1)\n    return num_elements\n",
        "num_ids": 21
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    my_list = []\n    for element in list1:\n        if type(element) == int:\n            my_list.append(element)\n    return len(my_list)\n",
        "num_ids": 46
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_elements = 0\n    for element in list1:\n        if type(element) == int:\n            num_elements += 1\n    return num_elements\n",
        "num_ids": 43
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # define a function that returns the number of integer elements in a given list\n    return len(list1)\n",
        "num_ids": 27
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for el in list1:\n        if type(el) == int:\n            i += 1\n    return i\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    count = 0\n    \n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n    \ndef first_three(list1):\n    '''\n    Return the first three elements in a given list.\n    '''\n    \n    return list1[:3]\n    \ndef last_three(list1):\n    '''\n    Return the last three elements in a given list.\n    '''\n    \n    return list1[-3:]\n    \ndef middle(list1):\n    '''\n    Return the middle element in a given list.\n    '''\n    \n    return list1[len(list1)//2]\n    \ndef first_four(list1):\n    '''\n    Return the first four elements in a given list.\n    '''\n    \n    return list1[0:4]\n    \ndef last_four(list1):\n    '''\n    Return the last four elements in a given list.\n    '''\n    \n    return list1[-4:]\n    \ndef first_fifth(list1):\n    '''\n    Return the first five elements in a given list.\n    '''\n    \n    return list1[0:5]\n    \ndef last_sixth(list1):\n    '''\n    Return the last six elements in a given list.\n    '''\n    \n    return list1[-6:]\n    \ndef first_seven(list1):\n    '''\n    Return the first seven elements in a given list.\n    '''\n    \n    return list1[0:7]\n    \ndef last_seven(list1):\n    '''\n    Return the last seven elements in a given list.\n    '''\n    \n    return list1[-7:]\n    \ndef first_eight(list1):\n    '''\n    Return the first eight elements in a given list.\n    '''\n    \n    return list1[0:8]\n    \ndef last_eight(list1):\n    '''\n    Return the last eight elements in a given list.\n    '''\n    \n    return list1[-8:]\n    \ndef first_nine(list1):\n    '''\n    Return the first nine elements in a given list.\n    '''\n    \n    return list1[0:9]\n    \ndef last_nine(list1):\n    '''\n    Return the last nine elements in a given list.\n    '''\n    \n    return list1[-9:]\n    \ndef count_char(string, char):\n    '''\n    Count the number of times that a given character appears in a given string.\n    '''\n    \n    count = 0\n    \n    for i in string:\n        if i == char:\n            count += 1\n    \n    return count\n    \ndef count_even_numbers(list1):\n    '''\n    Return the number of even numbers in a given list.\n    '''\n    \n    count = 0\n    \n    for i in list1:\n        if isinstance(i, int):\n            if i % 2 == 0:\n                count += 1\n    return count\n    \ndef count_elements(list1, element):\n    '''\n    Return the number of times that element appears in a given list.\n    '''\n    \n    count = 0\n    \n    for i in list1:\n        if element in i:\n            count += 1\n    return count\n    \ndef smallest_number(list1):\n    '''\n    Return the smallest number in a given list.\n    '''\n    \n    smallest = float('inf')\n    \n    for i in list1:\n        if isinstance(i, int):\n            if smallest > i:\n                smallest = i\n    return smallest\n    \ndef smallest_element(list1):\n    '''\n    Return the smallest element in a given list.\n    '''\n    \n    smallest = float('inf')\n    \n    for i in list1:\n        if isinstance(i, int):\n            if smallest > i:\n                smallest = i\n    return smallest\n    \ndef largest_element(list1):\n    '''\n    Return the largest element in a given list.\n    '''\n    \n    largest = float('-inf')\n    \n    for i in list1:\n        if isinstance(i, int):\n            if largest < i:\n                largest = i\n    return largest\n    \ndef smallest_multiple_of_three(list1):\n    '''\n    Return the smallest multiple of three in a given list.\n    '''\n    \n    smallest = 0\n    \n    for i in list1:\n        if isinstance(i, int) and i % 3 == 0:\n            smallest += i\n    \n    return smallest\n    \ndef smallest_multiple_of_two(list1):\n    '''\n    Return the smallest multiple of two in a given list.\n    '''\n    \n    smallest = 0\n    \n    for i in list1:\n        if isinstance(i, int) and i % 2 == 0:\n            smallest += i\n    \n    return smallest\n    \ndef largest_multiple_of_two(list1):\n    '''\n    Return the largest multiple of two in a given list.\n    '''\n    \n    largest = 0\n    \n    for i in list1:\n        if isinstance(i, int) and i % 2 == 0:\n            largest += i\n    \n    return largest\n    \ndef product_of_primes(list1):\n    '''\n    Return the product of all prime numbers in a given list.\n    '''\n    \n    product = 1\n    \n    for i in list1:\n        if isinstance(i, int):\n            if i > 2:\n                product *= i\n    \n    return product\n    \ndef product_of_primes_recursive(list1):\n    '''\n    Return the product of all prime numbers in a given list.\n    '''\n    \n    if len(list1) == 0:\n        return 1\n    \n    if isinstance(list1[0], int):\n        if list1[0] > 2:\n            return 1\n        else:\n            return 0\n    \n    else:\n        return 0\n    \ndef first_duplicate(list1):\n    '''\n    Return the first duplicate in a given list.\n    '''\n    \n    count = 0\n    \n    for i in list1:\n        if list1.count(i) > 1:\n            count += 1\n    \n    return count\n    \ndef first_duplicate_recursive(list1):\n    '''\n    Return the first duplicate in a given list.\n    '''\n    \n    if len(list1) == 0:\n        return 0\n    \n    if list1.count(list1[0]) > 1:\n        return 1\n    else:\n        return 0\n    \ndef count_duplicates(list1):\n    '''\n    Return the number of duplicate elements in a given list.\n    '''\n    \n    count = 0\n    \n    for i in list1:\n        if list1.count(i) > 1:\n            count += 1\n    \n    return count\n    \ndef flatten(list1):\n    '''\n    Return a flattened list containing all the elements of a given list.\n    '''\n    \n    list2 = []\n    \n    for i in list1:\n        if isinstance(i, list):\n            list2 += i\n    \n    return list2\n    \ndef flatten_recursive(list1):\n    '''\n    Return a flattened list containing all the elements of a given list.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    if list1.count(list1[0]) > 1:\n        return list1\n    else:\n        return list1\n    \ndef duplicate_removal_sorting(list1):\n    '''\n    Sort a given list such that no element appears more than once.\n    '''\n    \n    list2 = []\n    \n    for i in list1:\n        if list1.count(i) > 1:\n            list2.append(i)\n    \n    list2.sort()\n    \n    return list2\n    \ndef duplicate_removal_sorting_recursive(list1):\n    '''\n    Sort a given list such that no element appears more than once.\n    '''\n    \n    if len(list1) == 0",
        "num_ids": 13
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # TODO: Write your code here\n    if len(list1) == 0:\n        return 0\n    else:\n        return len(list1)\n",
        "num_ids": 39
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(el) for el in combinations_with_replacement(l, n)]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    numbers_set = set(l)\n    combinations = []\n    for i in range(1, len(l)+1):\n        for j in combinations_with_replacement(l, i):\n            if j not in numbers_set:\n                combinations.append(tuple(j))\n    return combinations\n",
        "num_ids": 76
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return [tuple(l)]\n    else:\n        return [tuple(l) for i in range(len(l)) for j in combinations_colors(l[i+1:], n-1)]\n",
        "num_ids": 59
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos_list = []\n    for i in range(len(l)):\n        temp_list = []\n        for j in range(n):\n            temp_list.append(l[i][j])\n        combos_list.append(tuple(temp_list))\n    return combos_list\n",
        "num_ids": 74
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # return [list(it) for it in combinations_with_replacement(l, n)]\n    return combinations_with_replacement(l, n)\n",
        "num_ids": 39
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = list(combinations_with_replacement(l, n))\n    return combinations\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_length = len(l)\n    list_combs = list(combinations_with_replacement(l, n))\n    print(list_combs)\n    return list_combs\n",
        "num_ids": 49
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations(l, n))\n",
        "num_ids": 14
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return []\n    elif len(l) == n:\n        return [tuple(l)]\n    else:\n        l_new = l[:n]\n        new_l = list(combinations_with_replacement(l, n-len(l)))\n        new_l += [tuple(l_new)]\n        return new_l\n",
        "num_ids": 95
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    if n<0:\n        print(\"input should be positive int\")\n        return\n    else:\n        for x in range(0,len(l)-n+1):\n            for y in combinations_with_replacement(l,x+n):\n                y.sort()\n                y.insert(0,l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.insert(0,l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.insert(0,l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.insert(0,l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.insert(0,l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.insert(0,l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.insert(0,l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])\n                y.append(l[x])",
        "num_ids": 1978
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # TODO: Your code here\n    print(n)\n    for x in range(2,n+1):\n        if(n%x==0):\n            print(n//x)\n",
        "num_ids": 48
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    # print('This is a test for your solution')\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        if(i%2==0):\n            if(i==1):\n                continue\n            for j in range(2, i):\n                if(i%j==0):\n                    isPrime = False\n                    break\n            if(isPrime):\n                count+=1\n    return count\n",
        "num_ids": 145
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_list = [1]\n    for n in range(2,n):\n        if (n < prime_list[-1]):\n            prime_list.append(n)\n        else:\n            prime_list.append(0)\n    return len(prime_list)\n",
        "num_ids": 69
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # If the number is non-positive return 0.\n    if n <= 0:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_nums = [2]\n    if n < 2:\n        return prime_nums\n",
        "num_ids": 26
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_counter = 0\n    for i in range(1, n+1):\n        if is_prime(i):\n            prime_counter += 1\n    return prime_counter\n",
        "num_ids": 44
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    lst = []\n    for i in range(2, n):\n        if is_prime(i):\n            lst.append(i)\n    return len(lst)\n",
        "num_ids": 45
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(1,n):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                count = count + 1\n    print(count)\n",
        "num_ids": 67
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = 1\n    for i in range(2, n+1):\n        if isprime(i):\n            num = num+1\n    return num\n",
        "num_ids": 39
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n",
        "num_ids": 25
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = int(a)\n    b = int(b)\n    if a > b:\n        a,b = b,a\n    return (b,a)\n",
        "num_ids": 42
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=a[::-1]\n    b=b[::-1]\n    return a,b\n    \ndef to_list(s):\n    '''\n    Write a function that takes a string and returns a list.\n    '''\n    return list(s)\n",
        "num_ids": 9
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if(b == a):\n        return(a,b)\n    else:\n        return(b,a)\n",
        "num_ids": 30
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(a,b)\n    \n",
        "num_ids": 12
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    d = b\n    return (c,d)\n",
        "num_ids": 20
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #assert type(a) is int and type(b) is int, \"a and b must be integers\"\n    if a<b:\n        return(b,a)\n    else:\n        return (a,b)\ndef multiply_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the product of them.\n    '''\n    #assert type(a) is int and type(b) is int, \"a and b must be integers\"\n    if b==0:\n        return a\n    else:\n        return (a*b)\ndef divide_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the quotient.\n    '''\n    #assert type(a) is int and type(b) is int, \"a and b must be integers\"\n    if b==0:\n        return a\n    else:\n        return (a/b)\ndef round_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the number of decimal places they are rounded to.\n    '''\n    #assert type(a) is int and type(b) is int, \"a and b must be integers\"\n    if b==0:\n        return int(a)\n    else:\n        return (int(a)+b)\ndef sum_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the sum of the two numbers.\n    '''\n    #assert type(a) is int and type(b) is int, \"a and b must be integers\"\n    if b==0:\n        return int(a)\n    else:\n        return int(a) + int(b)\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    elif n==2:\n        return True\n    elif n>1:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\ndef is_multiple(n):\n    '''\n    Check if a number is multiple.\n    '''\n    return (n>0) and (n%10==0) and (n%100!=0)\ndef main():\n    #variables\n    a = 0\n    b = 0\n    #logic\n    print(swap_numbers(4,5))\n    print(multiply_numbers(4,5))\n    print(divide_numbers(4,5))\n    print(round_numbers(4,5))\n    print(sum_numbers(4,5))\n    print(is_prime(4))\n    print(is_multiple(4))\n    #test\n    print(is_multiple(2))\n",
        "num_ids": 154
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code goes here\n    if test_tup1[1] < test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2\n    \n",
        "num_ids": 51
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create list of tuples\n    t1_list = []\n    t2_list = []\n",
        "num_ids": 26
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # First, make sure the order is correct\n    test_tup1.sort()\n    test_tup2.sort()\n    # Now test if the two tuples have the same elements\n    if test_tup1 == test_tup2:\n        # Return the tuple with the highest number\n        return test_tup1\n    # If not, raise an exception\n    else:\n        raise ValueError('Two tuples have unequal elements')\n",
        "num_ids": 106
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)>len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    elif len(test_tup1)<len(test_tup2):\n        test_tup2, test_tup1 = test_tup1, test_tup2\n    return max(test_tup1, test_tup2)\n",
        "num_ids": 110
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    # Calculate the greatest common divisor\n    gcd = max(tup1[1], tup2[1])\n    # Get the maximum element\n    max = tup1[0]\n    for tup in tup1[2:]:\n        if tup/gcd > max:\n            max = tup/gcd\n    # Return the greatest common divisor\n    return gcd, max\n    \ndef max_heapify(arr, n, i):\n    '''\n    Given an array arr of size n, and an index i, this function\n    returns the index of the largest element and the maximum element in the heap.\n    '''\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    # Loop through elements of the array\n    for j in range(l, r):\n        # Check if the largest element is less than the element in the heap\n        if arr[j] < arr[largest]:\n            # If yes, swap the elements\n            # i.e. arr[i] < arr[largest]\n            arr[i], arr[largest] = arr[largest], arr[i]\n            # Heapify the array\n            largest = (i + 1) // 2\n    return largest\n",
        "num_ids": 140
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return (test_tup1[0], test_tup1[1])\n    elif test_tup2[0] > test_tup1[0]:\n        return (test_tup2[0], test_tup2[1])\n    else:\n        return test_tup1\n",
        "num_ids": 95
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        return test_tup1\n    elif (len(test_tup2) > len(test_tup1)):\n        return test_tup2\n    else:\n        return test_tup1\n        \ndef minus_elements(test_tup1, test_tup2):\n    '''\n    Write a function to minimize the given two tuples.\n    '''\n    if (len(test_tup1) > len(test_tup2)):\n        return test_tup2\n    elif (len(test_tup2) > len(test_tup1)):\n        return test_tup1\n    else:\n        return test_tup1\n        ",
        "num_ids": 76
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = max(test_tup1,test_tup2)\n    min_num = min(test_tup1,test_tup2)\n    return max_num, min_num\n    \ndef min_diff(test_tup1, test_tup2):\n    '''\n    Write a function to minimize the given two tuples.\n    '''\n    max_num = max(test_tup1,test_tup2)\n    min_num = min(test_tup1,test_tup2)\n    return max_num - min_num\n",
        "num_ids": 52
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return (test_tup1, test_tup2)\n    elif test_tup2 > test_tup1:\n        return (test_tup2, test_tup1)\n    else:\n        return ('', '')\n",
        "num_ids": 76
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #base case\n    if (n == 1): return 1\n    elif (n == 2): return 2\n    elif (n == 3): return 3\n",
        "num_ids": 39
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while i <= n: \n        if i == 1 or i == n: \n            result = i\n        else: \n            result = newman_prime(i-1) \n        i = i + 1\n        return result \n    \ndef prime_shanks_wilson(n): \n    '''\n    Find the nth prime number that satisfies the equation: \n    \n    \n    \n    \n    \n    '''\n    i = 1\n    while i <= n: \n        if prime_shanks_wilson(i-1) == i: \n            return i \n        i = i + 1\n    return 'Not Prime'\n",
        "num_ids": 54
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n > 20: \n        raise Exception(\"n should be less than 20\")\n    if n <= 2: \n        return n \n    for i in range(2, n): \n        if i == (n - 1): \n            if n % i == 0: \n                return False \n        else: \n            if (n % i) == 0: \n                return False \n    return True \n",
        "num_ids": 100
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 0\n    if n < 2:\n        return n\n",
        "num_ids": 24
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while p*p <= n: \n        if n % p == 0: \n            return False\n        p += 1\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 0\n    b = 1\n    for x in range(1, n): \n        a = (a * x) % n\n        b = (b * (x-1)) % n \n    return a * b % n \n",
        "num_ids": 59
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return n\n    if n % 2 == 0:\n        return n//2\n    else:\n        return n-1-newman_prime(n-1)\n    return\n    \ndef main():\n    print(newman_prime(5))\n    print(newman_prime(6))\n    print(newman_prime(7))\n    print(newman_prime(8))\n    print(newman_prime(9))\n    print(newman_prime(10))\n    print(newman_prime(50))\n    print(newman_prime(100))\n    print(newman_prime(500))\n",
        "num_ids": 156
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # base case \n    if (n == 1 or n == 2):\n        return n\n    # recursion \n    elif (n % 2 == 0): \n        return(n//2) + newman_prime(n//2)\n    elif (n % 3 == 0): \n        return(n//3) + newman_prime(n//3)\n    else: \n        return newman_prime(n-1) + newman_prime(n-2) \n",
        "num_ids": 118
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = n // 2\n    while a > 1:\n        if isprime(a):\n            if isprime(a**2 + 1):\n                return a\n        a = a // 2\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n): \n        if (i % 2 == 0) and (n % 2!= 0): \n            return 0 \n        if i % 2!= 0: \n            j = 3\n            while (j * j <= n): \n                if (n % j == 0): \n                    return 0\n                j += 2\n        if i % 2 == 0: \n            return 0\n",
        "num_ids": 100
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # take the first element of the tuple\n    element1 = test_tup1[0]\n",
        "num_ids": 25
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your Code Here\n    #TODO-2: Complete this function by printing a message saying that you did not divide the elements of the tuple.\n    \n    \n    #Get the length of both tuples\n    length = len(test_tup1)\n    \n    #Create an empty list of the correct length\n    division_elements = []\n    \n    #For each element of the tuple...\n    for element in test_tup1:\n        #...set the number of elements equal to the length of the tuple\n        length_elements = len(test_tup2)\n        \n        #While the number of elements are less than the length of the tuple\n        while length_elements > length:\n            #If there is a number in the list, then add the number to the result\n            if element in test_tup2:\n                #If it is already in the result\n                if element in test_tup2:\n                    #Set the result\n                    result = test_tup1[test_tup1.index(element)]/test_tup2[test_tup2.index(element)]\n                    #Print the result\n                    print(result)\n                #If it is not, then it should be in the result list and have a variable printed\n                else:\n                    #Set the result\n                    result = test_tup1[test_tup1.index(element)]/test_tup2[test_tup2.index(element)]\n                    #Print the result\n                    print(result)\n            #If it is not, then it should be in the result list and have a variable printed\n            else:\n                #Set the result\n                result = test_tup1[test_tup1.index(element)]/test_tup2[test_tup2.index(element)]\n                #Print the result\n                print(result)\n            #The result should be in the empty list and have a variable printed\n            division_elements.append(result)\n            length_elements -= 1\n    #The for loop should not be broken if the for loop terminates.\n    #If the for loop has no break statement, then the while loop should be broken.\n    return division_elements\n    \n    \n",
        "num_ids": 514
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    for i in test_tup1:\n        result += i / test_tup2[1]\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get elements of the tuples\n    element_1 = test_tup1[0]\n    element_2 = test_tup1[1]\n    element_3 = test_tup1[2]\n    element_4 = test_tup2[0]\n    element_5 = test_tup2[1]\n    element_6 = test_tup2[2]\n",
        "num_ids": 95
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [x / y for x, y in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tuple_1 = test_tup1[0]\n    tuple_2 = test_tup2[0]\n    \n    division = (tuple_1[0] / tuple_2[0])\n    \n    return division\n",
        "num_ids": 59
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            test_tup3.append(test_tup1[i]/test_tup2[i])\n        else:\n            test_tup3.append(0)\n    test_tup4 = tuple(test_tup3)\n    return test_tup4\n",
        "num_ids": 117
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def division(val1, val2):\n        '''\n        Function for division of elements.\n        '''\n        return val1 // val2\n",
        "num_ids": 10
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    #print(type(test_tup1))\n    #print(type(test_tup2))\n    return test_tup1[0]/test_tup1[1], test_tup1[0]/test_tup2[1]\n    #print(test_tup1)\n    #print(test_tup2)\n    #print(type(test_tup1))\n    #print(type(test_tup2))\n    #print('--------')\n",
        "num_ids": 142
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tuple1 = test_tup1\n    tuple2 = test_tup2\n    return tuple1 // tuple2\n",
        "num_ids": 32
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 2:\n        return (list1, None)\n    else:\n        first = split_two_parts(list1, L//2)\n        second = split_two_parts(list1[L//2:], L)\n        return (first, second)\n",
        "num_ids": 67
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # TODO: Write your code here\n    # This is a very basic split function.\n    # The idea here is to split the list into two pieces, the first is for the first part of the given list, and the second for the second part\n    \n    # If there are multiple parts, return a tuple\n    if len(list1)%L!=0:\n        return None\n    \n    part_1_list=[]\n    part_2_list=[]\n    index=0\n    while index < len(list1)/L:\n        part_1_list.append(list1[index:index+L])\n        index+=L\n    index=0\n    while index < (len(list1)/L):\n        part_2_list.append(list1[index:index+L])\n        index+=L\n    \n    # Return the three parts\n    return (part_1_list, part_2_list)\n    \ndef merge_two_lists(list1, list2):\n    '''\n    Write a function that takes in two lists and returns a new one, consisting of the elements of the lists in either list1 or list2.\n    '''\n    # TODO: Write your code here\n    # This is a very basic merge function.\n    # The idea here is to merge the given lists, and return a new list in which the elements of the first list are combined with the elements of the second list, and the elements of the second list are combined with the elements of the first list\n    \n    # If there are no elements to merge, return None\n    if len(list1)==0:\n        return None\n    if len(list2)==0:\n        return None\n    \n    # Add the first element of each list, add the second element of each list, add the third element of each list\n    result=[]\n    index1=0\n    index2=0\n    while index1<len(list1):\n        result.append(list1[index1])\n        index1+=1\n    index1=0\n    while index2<len(list2):\n        result.append(list2[index2])\n        index2+=1\n    \n    # Merge the elements\n    index=0\n    while index<len(result):\n        result[index]=result[index]+result[index1]\n        index1+=1\n        index+=1\n    \n    return result\n    \ndef three_sum(nums, target):\n    '''\n    Given an unsorted array of integers, return indices of the three elements such that sum of elements is target.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    You can return the answer in any order.\n    '''\n    # TODO: Write your code here\n    # This is a very basic three sum function, which sums all the numbers in the array\n    # The idea here is to sum all numbers in the array, and add them all to get the target.\n    # If there are multiple numbers, it will return the index of one of the numbers\n    \n    # If there are no numbers, return None\n    if len(nums)==0:\n        return None\n    \n    # Sort the numbers\n    nums.sort()\n    \n    # Declare a set for the numbers, which is to keep track of the numbers\n    numbers_set=set(nums)\n    \n    # Declare a set for the indices which is to keep track of the indices\n    indices_set=set(range(len(nums)))\n    \n    # Initialize three sums\n    three_sum_set=set()\n    \n    # Initialize a dictionary for storing the indices of the numbers\n    indices_dict=dict()\n    \n    # Iterate over all the elements in the array\n    for index, num in enumerate(nums):\n        # Calculate all the indices for the num\n        indices_dict[num]=indices_set-numbers_set\n        indices_set=set()\n    \n        # Store the indices in the set\n        indices_set.add(index)\n        \n    # Find the target in the set\n    three_sum_set=indices_dict[target]\n    \n    return three_sum_set\n    \ndef seven_sum(nums, target):\n    '''\n    Given an unsorted array of integers, return indices of the seven elements such that sum of elements is target.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    You can return the answer in any order.\n    '''\n    # TODO: Write your code here\n    # This is a very basic seven sum function, which sums all the numbers in the array\n    # The idea here is to sum all numbers in the array, and add them all to get the target.\n    # If there are multiple numbers, return None\n    \n    # If there are no numbers, return None\n    if len(nums)==0:\n        return None\n    \n    # Sort the numbers\n    nums.sort()\n    \n    # Declare a set for the numbers, which is to keep track of the numbers\n    numbers_set=set(nums)\n    \n    # Declare a set for the indices which is to keep track of the indices\n    indices_set=set()\n    \n    # Initialize seven sums\n    seven_sum_set=set()\n    \n    # Initialize a dictionary for storing the indices of the numbers\n    indices_dict=dict()\n    \n    # Iterate over all the elements in the array\n    for index, num in enumerate(nums):\n        # Calculate all the indices for the num\n        indices_dict[num]=indices_set-numbers_set\n        indices_set=set()\n        \n        # Store the indices in the set\n        indices_set.add(index)\n        \n    # Find the target in the set\n    seven_sum_set=indices_dict[target]\n    \n    return seven_sum_set\n",
        "num_ids": 339
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    for x in range(len(list1)):\n        list1[x] = list1[x][:L]\n    return tuple(list1), tuple(list1[-1])\n",
        "num_ids": 47
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0:\n        return list1, []\n",
        "num_ids": 16
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert len(list1) > L, 'L must be greater than the length of the first part of the list.'\n    assert type(list1) is list, 'The list parameter must be a list.'\n    assert type(L) is int, 'The length parameter must be an integer.'\n    assert L >= 0, 'The length parameter must be positive.'\n    assert type(list1) is list, 'The list parameter must be a list.'\n    assert type(L) is int, 'The length parameter must be an integer.'\n    assert L > 0, 'The length parameter must be greater than 0.'\n",
        "num_ids": 139
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split = len(list1)\n    if split % L!= 0:\n        split = L - (split % L)\n    first_part = [list1[i:i+L] for i in range(0, split, L)]\n    second_part = [list1[i:i+L] for i in range(split, len(list1), L)]\n    return first_part, second_part\n",
        "num_ids": 99
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    return (list1[:L], list1[L:])\n    pass",
        "num_ids": 26
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L],list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a,b=list1[0:L],list1[L:2*L]\n    return a,b\n",
        "num_ids": 30
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    temp = []\n    for num in list1:\n        temp.append(num)\n    len(list1)\n",
        "num_ids": 30
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age < 3:\n        return 0\n    elif h_age >= 3 and h_age <= 5:\n        return (3-h_age)\n    elif h_age >= 6 and h_age <= 13:\n        return (h_age-4)\n    elif h_age >= 14 and h_age <= 17:\n        return (h_age-8)\n    elif h_age >= 18 and h_age <= 22:\n        return (h_age-10)\n    elif h_age >= 23 and h_age <= 27:\n        return (h_age-12)\n    elif h_age >= 28:\n        return h_age-24\n",
        "num_ids": 170
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age*365.25)\n",
        "num_ids": 14
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return 0\n    elif h_age <= 4:\n        return 1\n    elif h_age <= 6:\n        return 2\n    elif h_age <= 8:\n        return 3\n    else:\n        return 4",
        "num_ids": 64
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 1:\n        if h_age <= 1.8:\n            return \"no\"\n        elif h_age <= 2.0:\n            return \"a little\"\n        elif h_age <= 2.1:\n            return \"a medium\"\n        elif h_age <= 2.2:\n            return \"a large\"\n        else:\n            return \"an average\"\n    else:\n        return \"no\"\n",
        "num_ids": 106
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 4:\n        age = 'YYYY-YYYY'\n    elif h_age >=4 and h_age <7:\n        age = 'YYYY-MAY'\n    elif h_age >=7 and h_age <13:\n        age = 'MAY-YYYY'\n    elif h_age >=13 and h_age <17:\n        age = 'MAY-WED'\n    elif h_age >=17 and h_age <22:\n        age = 'WED-YYYY'\n    elif h_age >=22 and h_age <25:\n        age = 'WED-MAY'\n    elif h_age >=25 and h_age <28:\n        age = 'WED-WEE'\n    elif h_age >=28 and h_age <32:\n        age = 'FRI-YYYY'\n    elif h_age >=32 and h_age <38:\n        age = 'FRI-MAY'\n    elif h_age >=38 and h_age <45:\n        age = 'FRI-WED'\n    elif h_age >=45 and h_age <48:\n        age = 'FRI-THU'\n    elif h_age >=48 and h_age <54:\n        age = 'FRI-FRI'\n    elif h_age >=54 and h_age <59:\n        age = 'FRI-SAT'\n    elif h_age >=59 and h_age <65:\n        age = 'FRI-SUN'\n    elif h_age >=65:\n        age = 'SAT-YYYY'\n    else:\n        age = 'error'\n    return age",
        "num_ids": 408
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    animal_years = h_age*365\n    print(\"The dog's age in dog's years is\",animal_years,\"years.\")\n",
        "num_ids": 33
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * (365.2425)\n",
        "num_ids": 15
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 1:\n        print(f\"{h_age} year old dog is {h_age * 1.8 + 30} years old.\")\n    else:\n        print(f\"{h_age} year old dog is {h_age * 1.8 + 30} years old.\")\n",
        "num_ids": 73
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*365\n",
        "num_ids": 10
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 1: return [S]\n    if step == 0:\n        return [[S]]\n    \n    l = list_split(S, step - 1)\n    for item in l:\n        item.append(S)\n    return l\n    \n    \ndef convert_to_big_endian(s):\n    '''\n    Write a function that takes a string s of 8-bit as input and returns a new string with each bit reversed.\n    '''\n    return \"\".join([chr(int(s[i:i+8], 2)) for i in range(0, len(s), 8)])\n    \n    \ndef expand_n_squares(S):\n    '''\n    Write a function that takes in a string of 8-bit characters as input and returns a string of 32-bit characters.\n    '''\n    n = 7\n    S = convert_to_big_endian(S)\n    for i in range(len(S) - n + 1):\n        S += S\n    return S\n    \ndef expand_n_cubes(S):\n    '''\n    Write a function that takes a string of 8-bit characters as input and returns a string of 64-bit characters.\n    '''\n    n = 7\n    S = convert_to_big_endian(S)\n    S += S\n    for i in range(len(S) - n + 1):\n        S += S\n    S = \"\".join([\"1\" for i in range(len(S))])\n    return S\n    \n    \ndef reverse(S):\n    '''\n    Write a function that takes a string of 8-bit characters as input and returns a string of 16-bit characters.\n    '''\n    n = 7\n    S = convert_to_big_endian(S)\n    S += S\n    for i in range(len(S) - n + 1):\n        S += S\n    return \"\".join(S)\n    \ndef list_mul(S, n):\n    '''\n    Write a function that takes in a string of 8-bit characters as input and returns a string of 32-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    S += S\n    for i in range(len(S) - n + 1):\n        S += S\n    S = \"\".join([\"1\" for i in range(len(S))])\n    return S\n    \n    \ndef base64_encode(S, n):\n    '''\n    Write a function that takes in a string of 8-bit characters as input and returns a string of 32-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    S += S\n    for i in range(len(S) - n + 1):\n        S += S\n    S = \"\".join([\"1\" for i in range(len(S))])\n    return S\n    \ndef base64_decode(S, n):\n    '''\n    Write a function that takes in a string of 32-bit characters as input and returns a string of 8-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    S += S\n    for i in range(len(S) - n + 1):\n        S += S\n    S = \"\".join([\"1\" for i in range(len(S))])\n    return S\n    \n    \ndef p32(S):\n    '''\n    Write a function that takes in a string of 32-bit characters as input and returns a string of 8-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    S += S\n    for i in range(len(S) - 7 + 1):\n        S += S\n    S = \"\".join([\"0\" for i in range(len(S))])\n    return S\n    \n    \ndef p64(S):\n    '''\n    Write a function that takes in a string of 64-bit characters as input and returns a string of 8-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    S += S\n    for i in range(len(S) - 7 + 1):\n        S += S\n    S = \"\".join([\"0\" for i in range(len(S))])\n    return S\n    \ndef hex_dump(S):\n    '''\n    Write a function that takes in a string of 8-bit characters as input and returns a string of 64-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    for i in range(len(S) - 2 + 1):\n        S += S\n    S = \"\".join([\"0\" for i in range(len(S))])\n    return S\n    \ndef hex_dump_raw(S):\n    '''\n    Write a function that takes in a string of 8-bit characters as input and returns a string of 32-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    for i in range(len(S) - 2 + 1):\n        S += S\n    S = \"\".join([\"0\" for i in range(len(S))])\n    return S\n    \ndef int2bcd(s):\n    '''\n    Write a function that takes in an integer as input and converts it to a string of 8-bit characters.\n    '''\n    s = int(s)\n    S = \"\"\n    while s!= 0:\n        rem = s % 16\n        if rem == 15:\n            S += \"0\"\n        elif rem >= 16:\n            S += chr(rem)\n        else:\n            S += chr(rem + ord('a'))\n        s //= 16\n    return S\n    \ndef bcd2int(S):\n    '''\n    Write a function that takes in a string of 8-bit characters as input and converts it to a string of 16-bit characters.\n    '''\n    S = convert_to_big_endian(S)\n    rem = 0\n    for i in range(len(S) - 1, -1, -1):\n        if S[i] == \"0\":\n            rem = 0\n        else:\n            rem = (rem * 16) + int(S[i])\n    if rem >= 16:\n        rem = rem - (ord(\"a\") * rem)\n    return rem\n    \ndef main():\n    print(\"Type 'exit' to exit\")\n    \n    \n    print(\"ASCII:\\n\", ascii_encode(\"hello world!\"))\n    print(\"Padded:\\n\", padded_encode(\"hello world!\"))\n    print(\"Reverse:\\n\", reverse(\"hello world!\"))\n    print(\"Expand N Squares:\\n\", expand_n_squares(\"hello world!\"))\n    print(\"Expand N Squares, 4:\\n\", expand_n_squares(4))\n    print(\"Expand N Squares, 8:\\n\", expand_n_squares(8))\n    print(\"List Split:\\n\", list_split(\"hello world!\"))\n    print(\"List Split, 4:\\n\", list_split(4, 4))\n    print(\"List Split, 8:\\n\", list_split(8, 8))\n    print(\"Convert to big endian:\\n\", convert_to_big_endian(\"hello world!\"))\n    print(\"Convert to big endian, 16:\\n\", convert_to_big_endian(16))\n    print(\"Base64 encode:\\n\", base64_encode(\"hello world!\"))\n    print(\"Base64 encode, 32:\\n\", base64_encode(32, 4))\n    print(\"Base64 decode:\\n\", base64_decode(\"hello world!\"))\n    print(\"Base64 decode, 64:\\n\", base64_decode(64, 4))\n    print(\"Hex dump:\\n\", hex_dump(\"hello world!\"))\n    print(\"Hex dump, 8:\\n\", hex_dump(8, 4))\n    print(\"Hex dump, 16:\\n\", hex_dump(16, 4))\n    print(\"Int2bcd:\\n\", int2bcd(\"hello world!\"))\n    print(\"Int2bcd, 16:\\n\", int2bcd(16))\n    print(\"Bcd2int:\\n\", bcd2int(32))\n    print(\"Bcd2int, 16:\\n\", bcd2int(16))\n    \n    ",
        "num_ids": 577
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    if step == 0:\n        L = S\n    else:\n        for x in range(0,len(S), step):\n            L.append(S[x:x+step])\n    return L\n",
        "num_ids": 56
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Write your code here\n    if step == 0:\n        return [[]]\n    elif step == 1:\n        return [[S]]\n    elif step == 2:\n        return [[S]] + [S] + [S]\n    else:\n        return list(list_split(S, step - 1)) + [[S]] + [[S]] + [[S]]\n    \ndef list_permutations(S):\n    '''\n    Write a function that takes in a list and returns the list of all permutations of S.\n    '''\n    # Write your code here\n    if S == []:\n        return []\n    elif S == [1] or S == [1, 2]:\n        return [[1]]\n    elif S == [1, 2, 3]:\n        return [[1, 2], [1, 3], [2, 3]]\n    elif S == [1, 3, 2]:\n        return [[1, 3], [2, 3], [1, 2]]\n    elif S == [1, 2, 3, 4, 5, 6]:\n        return [[1, 2, 4, 6], [1, 5, 6], [1, 2, 5], [1, 3, 6], [2, 4, 6], [3, 4, 6]]\n    elif S == [1, 2, 3, 4]:\n        return [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 4, 2], [1, 4, 2, 3], [1, 3, 4, 2], [1, 2, 4, 3]]\n    elif S == [1, 2, 3]:\n        return [[1, 2, 3], [1, 3, 2], [1, 3, 2], [1, 2, 3], [1, 2, 3]]\n    elif S == [1, 2]:\n        return [[1, 2], [1, 2]]\n    elif S == [1, 2, 3, 4, 5, 6, 7, 8]:\n        return [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 4, 6, 7, 8], [1, 3, 4, 6, 7, 8], [1, 3, 4, 7, 8], [1, 3, 4, 7, 8], [1, 2, 4, 6, 7, 8]]\n    else:\n        return [[1]]\n    \ndef list_index(S, L):\n    '''\n    Write a function that takes in a list and an integer n and returns the index of the first n elements of the list.\n    '''\n    # Write your code here\n    if len(S) == 0:\n        return -1\n    if len(S) == 1:\n        return 0 if L == S[0] else -1\n    if L == S[0]:\n        return 1 if len(S) == 2 else -1\n    if len(S) == 2:\n        return 2 if len(S) == 3 and L == S[1] else -1\n    if len(S) == 3:\n        return 3 if S[2] == S[0] and S[1] == S[1] and S[0] == S[1] and S[1] == S[2] and S[2] == S[2] else -1\n    else:\n        return -1\n",
        "num_ids": 178
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Write a function that takes in an integer n and returns a list of lists with n elements, starting at the origin.\n    #       For example, the function should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100].\n    #       The function should return a list of lists.\n    #       Each inner list in the list should be a list containing each element in the nth split from the origin.\n    #       For example, the function should return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48], [49, 50, 51], [52, 53, 54], [55, 56, 57], [58, 59, 60], [61, 62, 63], [64, 65, 66], [67, 68, 69], [70, 71, 72], [73, 74, 75], [76, 77, 78], [79, 80, 81], [82, 83, 84], [85, 86, 87], [88, 89, 90], [91, 92, 93], [94, 95, 96], [97, 98, 99]]\n    #       For example, the function should return [1, [2, 3], [4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    #       The function should return None if either of the lists are empty.\n    #       For example, the function should return [].\n    #       The function should return None if either of the lists are not lists.\n    #       For example, the function should return None if either of the lists are empty.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the last element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not a list.\n    #       For example, the function should return None if the first element is not ",
        "num_ids": 2000
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split(S, step):\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result\n    return split\n",
        "num_ids": 53
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Write a helper function to split a list into sublists of size n.\n    # Input:\n    # listA = [1,2,3,4,5,6,7,8,9]\n    # n = 2\n    # Output: [[1,2],[3,4],[5,6],[7,8],[9]]\n",
        "num_ids": 83
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # write your code here\n    l = []\n    for i in range(len(S)):\n        l.append(S[i:i+step])\n    return l\n    \n    \n    \n    \ndef sum_lists(L):\n    '''\n    Write a function that takes a list and returns the sum of the numbers in the list.\n    '''\n    # write your code here\n    n = len(L)\n    sum = 0\n    for i in range(n):\n        sum += L[i]\n    return sum\n    \n    \ndef mean(L):\n    '''\n    Write a function that takes a list and returns the average of all of the numbers in the list.\n    '''\n    # write your code here\n    n = len(L)\n    sum = 0\n    for i in range(n):\n        sum += L[i]\n    return sum/n\n    \n    \n    \ndef median(L):\n    '''\n    Write a function that takes a list and returns the median of all of the numbers in the list.\n    '''\n    # write your code here\n    n = len(L)\n    median = []\n    if n % 2 == 0:\n        for i in range(n//2):\n            median.append(L[i])\n            median.append(L[n-i-1])\n    else:\n        median = [L[n//2], L[n//2-1]]\n    \n    return median\n    \n    \ndef mode(L):\n    '''\n    Write a function that takes a list and returns the mode of all of the numbers in the list.\n    '''\n    # write your code here\n    n = len(L)\n    count = 0\n    m = {}\n    for i in range(n):\n        if L[i] in m:\n            m[L[i]] += 1\n        else:\n            m[L[i]] = 1\n    for i in range(n):\n        if m[L[i]] > count:\n            count = m[L[i]]\n            mode = L[i]\n    return mode\n    \n    \ndef sum_squares(S):\n    '''\n    Write a function that takes a list and returns the sum of all the squares of all the numbers in the list.\n    '''\n    # write your code here\n    sum = 0\n    for i in range(len(S)):\n        sum += S[i]**2\n    return sum\n    \n    \n    \ndef factorial(n):\n    '''\n    Write a function that takes a number n as input and returns the number factorial.\n    '''\n    # write your code here\n    fac = 1\n    for i in range(1,n+1):\n        fac *= i\n    return fac\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that takes a number n as input and returns True if n is prime, otherwise it returns False.\n    '''\n    # write your code here\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 6\n        return True\n    \n    \n    \n    \n    \ndef is_prime_factor(n):\n    '''\n    Write a function that takes a number as input and returns the factor of n as a string, e.g. \"7,9,5,4\".\n    '''\n    # write your code here\n    f = str(factorial(n))\n    if n < 2:\n        return f\n    elif n == 2:\n        return f[1]\n    elif n == 3:\n        return f[2]\n    else:\n        return f[3] + ',' + is_prime_factor(n-1)\n    \n    \n    \n    \n    \ndef is_prime_sum(n):\n    '''\n    Write a function that takes a number as input and returns the sum of all prime numbers up to and including the number n as a string, e.g. \"13,13,9,13,14,13,3,5,2,4,6,3,6,9,10\".\n    '''\n    # write your code here\n    if n == 0:\n        return ''\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    else:\n        num = ''\n        i = 1\n        while i < 4:\n            if n % i == 0:\n                num += str(i)\n                n //= i\n            else:\n                i += 1\n        return num + ',' + is_prime_sum(n)\n    \n    \n    \n    \ndef num_to_word(n):\n    '''\n    Write a function that takes a number as input and returns a string of digits representing it.\n    '''\n    # write your code here\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    elif n == 4:\n        return '4'\n    elif n == 5:\n        return '5'\n    elif n == 6:\n        return '6'\n    elif n == 7:\n        return '7'\n    elif n == 8:\n        return '8'\n    elif n == 9:\n        return '9'\n    elif n == 10:\n        return '10'\n    elif n == 11:\n        return '11'\n    elif n == 12:\n        return '12'\n    elif n == 13:\n        return '13'\n    elif n == 14:\n        return '14'\n    elif n == 15:\n        return '15'\n    elif n == 16:\n        return '16'\n    elif n == 17:\n        return '17'\n    elif n == 18:\n        return '18'\n    elif n == 19:\n        return '19'\n    elif n == 20:\n        return '20'\n    elif n == 21:\n        return '21'\n    elif n == 22:\n        return '22'\n    elif n == 23:\n        return '23'\n    elif n == 24:\n        return '24'\n    elif n == 25:\n        return '25'\n    elif n == 26:\n        return '26'\n    elif n == 27:\n        return '27'\n    elif n == 28:\n        return '28'\n    elif n == 29:\n        return '29'\n    elif n == 30:\n        return '30'\n    elif n == 31:\n        return '31'\n    elif n == 32:\n        return '32'\n    elif n == 33:\n        return '33'\n    elif n == 34:\n        return '34'\n    elif n == 35:\n        return '35'\n    elif n == 36:\n        return '36'\n    elif n == 37:\n        return '37'\n    elif n == 38:\n        return '38'\n    elif n == 39:\n        return '39'\n    elif n == 40:\n        return '40'\n    elif n == 41:\n        return '41'\n    elif n == 42:\n        return '42'\n    elif n == 43:\n        return '43'\n    elif n == 44:\n        return '44'\n    elif n == 45:\n        return '45'\n    elif n == 46:\n        return '46'\n    elif n == 47:\n        return '47'\n    elif n == 48:\n        return '48'\n    elif n == 49:\n        return '49'\n    elif n == 50:\n        return '50'\n    elif n == 51:\n        return '51'\n    elif n == 52:\n        return '52'\n    elif n == 53:\n        return '53'\n    elif n == 54:\n        return '54'\n    elif n == 55:\n        return ",
        "num_ids": 789
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your code here\n    if len(S) < step:\n        return []\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 51
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # STEP 0: Build the list into a nested list.\n    # STEP 1: For each element in the list, add it to a list.\n    # STEP 2: Return the resulting list.\n    \n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 57
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Note that this is an O(n) algorithm\n    # so, we do n+1 times and use them to return the list\n    # Note that the first element is the smallest, so we're using this as the first element\n    \n    # Return a list of lists\n    return [[S[i] for i in range(0, len(S), step)] for j in range(0, len(S) // step + 1)]\n",
        "num_ids": 101
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # your code goes here\n    return 0\n",
        "num_ids": 13
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l*l\n    print('The lateral surface area of the cube is '+str(a))\n",
        "num_ids": 27
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralSurfaceArea(l):\n        area = 0\n        for row in range(3):\n            area += l * (3 * l + 1) // 2\n            l -= 1\n        return area\n    return lateralSurfaceArea\n",
        "num_ids": 57
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #Create a few rectangle to help calculate the surface area\n    x = 0\n    y = 0\n    z = 0\n    #The following variable controls the direction of the angle to be taken for finding the surface\n    rotation_axis = 1\n    while x <= l:\n        if x == 0:\n            x = 1\n        else:\n            x = x + 0.5\n            \n        if x < l:\n            #The following if statement allows the input to go outside the rectangle, \n            #otherwise it will print the error\n            if rotation_axis == 1:\n                print(\"Please input the cube's rotation axis\")\n                x = -x\n                rotation_axis = 2\n            #The following if statement allows the input to go outside the rectangle, \n            #otherwise it will print the error\n            else:\n                print(\"Please input the cube's rotation axis\")\n                x = -x\n                rotation_axis = 1\n        \n        y = y + 0.5\n    #The following variable will be the circle to be used as the base of the calculation\n    radius = 0.5\n    #The following for loop will do the calculation, using the variables above to find the total surface area\n    for i in range(0,360,90):\n        print(f\"rotation angle is {i}, and x is {x}, y is {y}\")\n        print(f\"R = {(i+x)*(180/pi)}\")\n        #The following print statement will print the calculated circle and the rounded version\n        print(f\"The rounded version of the cube is:\")\n        #The following while loop will do the calculation, using the variables above to find the total surface area\n        #The following while loop will go to the next circle, by performing the calculation with the calculated circle, using the variables above to find the rounded version\n        while x <= l:\n            if y > 0:\n                #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                if rotation_axis == 1:\n                    print(\"Please input the cube's rotation axis\")\n                    x = -x\n                    rotation_axis = 2\n                #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                else:\n                    print(\"Please input the cube's rotation axis\")\n                    x = -x\n                    rotation_axis = 1\n            else:\n                #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                if rotation_axis == 1:\n                    print(\"Please input the cube's rotation axis\")\n                    x = -x\n                    rotation_axis = 2\n                #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                else:\n                    print(\"Please input the cube's rotation axis\")\n                    x = -x\n                    rotation_axis = 1\n            \n            y = y - 0.5\n        #The following for loop will do the calculation, using the variables above to find the total surface area\n        for j in range(0,360,90):\n            print(f\"rotation angle is {j}, and x is {x}, y is {y}\")\n            print(f\"R = {(j+x)*(180/pi)}\")\n            #The following print statement will print the calculated circle and the rounded version\n            print(f\"The rounded version of the cube is:\")\n            #The following while loop will do the calculation, using the variables above to find the total surface area\n            #The following while loop will go to the next circle, by performing the calculation with the calculated circle, using the variables above to find the rounded version\n            while x <= l:\n                if y > 0:\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    if rotation_axis == 1:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 2\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    else:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 1\n                else:\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    if rotation_axis == 1:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 2\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    else:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 1\n                \n                y = y - 0.5\n        #The following for loop will do the calculation, using the variables above to find the total surface area\n        for k in range(0,360,90):\n            print(f\"rotation angle is {k}, and x is {x}, y is {y}\")\n            print(f\"R = {(k+x)*(180/pi)}\")\n            #The following print statement will print the calculated circle and the rounded version\n            print(f\"The rounded version of the cube is:\")\n            #The following while loop will do the calculation, using the variables above to find the total surface area\n            #The following while loop will go to the next circle, by performing the calculation with the calculated circle, using the variables above to find the rounded version\n            while x <= l:\n                if y > 0:\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    if rotation_axis == 1:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 2\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    else:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 1\n                else:\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    if rotation_axis == 1:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 2\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    else:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 1\n                \n                y = y - 0.5\n        #The following for loop will do the calculation, using the variables above to find the total surface area\n        for i in range(0,360,90):\n            print(f\"rotation angle is {i}, and x is {x}, y is {y}\")\n            print(f\"R = {(i+x)*(180/pi)}\")\n            #The following print statement will print the calculated circle and the rounded version\n            print(f\"The rounded version of the cube is:\")\n            #The following while loop will do the calculation, using the variables above to find the total surface area\n            #The following while loop will go to the next circle, by performing the calculation with the calculated circle, using the variables above to find the rounded version\n            while x <= l:\n                if y > 0:\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    if rotation_axis == 1:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 2\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    else:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 1\n                else:\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    if rotation_axis == 1:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 2\n                    #The following if statement will allow the input to go outside the rectangle, otherwise it will print the error\n                    else:\n                        print(\"Please input the cube's rotation axis\")\n                        x = -x\n                        rotation_axis = 1\n                \n                y = y - 0.5\n        \n    return\n",
        "num_ids": 1923
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = (l**2) * (2 * np.pi)\n    return area\n",
        "num_ids": 23
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print('This function finds the lateral surface area of a cube given its side length.')\n    print('SIDE LENGTH:', l)\n    print('\\n')\n    return \n",
        "num_ids": 45
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # YOUR CODE HERE\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print('\\n-- Calculating surface area of cube --\\n')\n    l = float(l)\n    import math\n    s = 2.7 * math.pi * l\n    area = (math.pi * l**2) * (s ** 4)\n    return area\n    \n",
        "num_ids": 69
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Create an empty list to store the squares of the first n odd numbers.\n    squares = []\n",
        "num_ids": 26
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1, 2):\n        s += i\n    return s\n    \n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    return n * (n + 1) // 2\n    \n    \n    \n    \ndef is_prime(number):\n    '''\n    Write a python function that takes in an integer and returns True if the number is prime, or False if the number is not prime.\n    '''\n    \n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    for x in range(2, number):\n        if number % x == 0:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    if n < 0:\n        print(\"Please enter a positive integer\")\n    elif n == 0:\n        return 0\n    else:\n        square = 0\n        i = 1\n        while i <= n:\n            square = square + i * i\n            i = i + 1\n        print(square)\n        \n    ",
        "num_ids": 79
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(0, n+1):\n        s += i ** 2\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n ** 2\n",
        "num_ids": 8
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 2\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            sum += i\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n*n\n",
        "num_ids": 8
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        raise ValueError('number of stars must be positive')\n    elif n == 1:\n        return 1\n    else:\n        star_num = 0\n        while n % 2 == 0:\n            star_num = star_num + 1\n            n = n/2\n        return star_num + 1\n",
        "num_ids": 80
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1: \n        return 1\n    elif n%2==0: \n        return find_star_num(n-1) + 2\n    else: \n        return find_star_num(n-1) + 3\n        ",
        "num_ids": 61
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n-1,1,-1):\n        if i*i<n:\n            return i*i\n        else:\n            continue\n",
        "num_ids": 39
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    m = n * 10\n    return m if n > 0 else 0\n",
        "num_ids": 19
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0: \n        raise ValueError(\"Error\")\n    elif n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 5\n    elif n == 5: \n        return 6\n    elif n == 6: \n        return 7\n    elif n == 7: \n        return 8\n    elif n == 8: \n        return 9\n    elif n == 9: \n        return 10\n    elif n == 10: \n        return 11\n    elif n == 11: \n        return 12\n    elif n == 12: \n        return 13\n    elif n == 13: \n        return 14\n    elif n == 14: \n        return 15\n    elif n == 15: \n        return 16\n    elif n == 16: \n        return 17\n    elif n == 17: \n        return 18\n    elif n == 18: \n        return 19\n    elif n == 19: \n        return 20\n    elif n == 20: \n        return 21\n    elif n == 21: \n        return 22\n    elif n == 22: \n        return 23\n    elif n == 23: \n        return 24\n    elif n == 24: \n        return 25\n    elif n == 25: \n        return 26\n    elif n == 26: \n        return 27\n    elif n == 27: \n        return 28\n    elif n == 28: \n        return 29\n    elif n == 29: \n        return 30\n    elif n == 30: \n        return 31\n    elif n == 31: \n        return 32\n    elif n == 32: \n        return 33\n    elif n == 33: \n        return 34\n    elif n == 34: \n        return 35\n    elif n == 35: \n        return 36\n    elif n == 36: \n        return 37\n    elif n == 37: \n        return 38\n    elif n == 38: \n        return 39\n    elif n == 39: \n        return 40\n    elif n == 40: \n        return 41\n    elif n == 41: \n        return 42\n    elif n == 42: \n        return 43\n    elif n == 43: \n        return 44\n    elif n == 44: \n        return 45\n    elif n == 45: \n        return 46\n    elif n == 46: \n        return 47\n    elif n == 47: \n        return 48\n    elif n == 48: \n        return 49\n    elif n == 49: \n        return 50\n    elif n == 50: \n        return 51\n    elif n == 51: \n        return 52\n    elif n == 52: \n        return 53\n    elif n == 53: \n        return 54\n    elif n == 54: \n        return 55\n    elif n == 55: \n        return 56\n    elif n == 56: \n        return 57\n    elif n == 57: \n        return 58\n    elif n == 58: \n        return 59\n    elif n == 59: \n        return 60\n    elif n == 60: \n        return 61\n    elif n == 61: \n        return 62\n    elif n == 62: \n        return 63\n    elif n == 63: \n        return 64\n    elif n == 64: \n        return 65\n    elif n == 65: \n        return 66\n    elif n == 66: \n        return 67\n    elif n == 67: \n        return 68\n    elif n == 68: \n        return 69\n    elif n == 69: \n        return 70\n    elif n == 70: \n        return 71\n    elif n == 71: \n        return 72\n    elif n == 72: \n        return 73\n    elif n == 73: \n        return 74\n    elif n == 74: \n        return 75\n    elif n == 75: \n        return 76\n    elif n == 76: \n        return 77\n    elif n == 77: \n        return 78\n    elif n == 78: \n        return 79\n    elif n == 79: \n        return 80\n    elif n == 80: \n        return 81\n    elif n == 81: \n        return 82\n    elif n == 82: \n        return 83\n    elif n == 83: \n        return 84\n    elif n == 84: \n        return 85\n    elif n == 85: \n        return 86\n    elif n == 86: \n        return 87\n    elif n == 87: \n        return 88\n    elif n == 88: \n        return 89\n    elif n == 89: \n        return 90\n    elif n == 90: \n        return 91\n    elif n == 91: \n        return 92\n    elif n == 92: \n        return 93\n    elif n == 93: \n        return 94\n    elif n == 94: \n        return 95\n    elif n == 95: \n        return 96\n    elif n == 96: \n        return 97\n    elif n == 97: \n        return 98\n    elif n == 98: \n        return 99\n    elif n == 99: \n        return 100\n    elif n == 100: \n        return 101\n    elif n == 101: \n        return 102\n    elif n == 102: \n        return 103\n    elif n == 103: \n        return 104\n    elif n == 104: \n        return 105\n    elif n == 105: \n        return 106\n    elif n == 106: \n        return 107\n    elif n == 107: \n        return 108\n    elif n == 108: \n        return 109\n    elif n == 109: \n        return 110\n    elif n == 110: \n        return 111\n    elif n == 111: \n        return 112\n    elif n == 112: \n        return 113\n    elif n == 113: \n        return 114\n    elif n == 114: \n        return 115\n    elif n == 115: \n        return 116\n    elif n == 116: \n        return 117\n    elif n == 117: \n        return 118\n    elif n == 118: \n        return 119\n    elif n == 119: \n        return 120\n    elif n == 120: \n        return 121\n    elif n == 121: \n        return 122\n    elif n == 122: \n        return 123\n    elif n == 123: \n        return 124\n    elif n == 124: \n        return 125\n    elif n == 125: \n        return 126\n    elif n == 126: \n        return 127\n    elif n == 127: \n        return 128\n    elif n == 128: \n        return 129\n    elif n == 129: \n        return 130\n    elif n == 130: \n        return 131\n    elif n == 131: \n        return 132\n    elif n == 132: \n        return 133\n    elif n == 133: \n        return 134\n    elif n == 134: \n        return 135\n    elif n == 135: \n        return 136\n    elif n == 136: \n        return 137\n    elif n == 137: \n        return 138\n    elif n == 138: \n        return 139\n    elif n == 139: \n        return 140\n    elif n == 140: \n        return 141\n    elif n == 141: \n        return 142\n    elif n == 142: \n        return 143\n    elif n == 143: \n        return 144\n    elif n == 144: \n        return 145\n    elif n == 145: \n        return 146\n    elif n == 146: \n        return 147\n    elif n == 147: \n        return 148\n    elif n == 148: \n        return 149\n    elif n == 149: \n        return 150\n    elif n == 150: \n        return 151\n    elif n == 151: \n        return 152\n    elif n == 152: \n        return 153\n    elif n == 153: \n    ",
        "num_ids": 2017
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # your code goes here\n    # find then'th number of the star\n    # return then'th number\n    return n % 100\n",
        "num_ids": 34
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n):\n        if (i % 2 == 0): \n            print(i+1, end=' ') \n        else: \n            print(i, end=' ') \n    print() \n",
        "num_ids": 56
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0:\n        raise ValueError(\"Negative input.\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    \n    return find_star_num(n-1) + 2\n    \ndef find_dups(arr):\n    '''\n    Find the duplicates in the array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    \n    return [arr[0]] + find_dups(arr[1:])\n    \ndef find_dups_two(arr):\n    '''\n    Find the duplicates in the array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    \n    return [arr[0], arr[1]] + find_dups_two(arr[2:])\n    \ndef find_dups_no_dups(arr):\n    '''\n    Find the duplicates in the array.\n    '''\n    if len(arr) == 0:\n        return []\n    \n    return [arr[0]] + find_dups_no_dups(arr[1:])\n    \ndef find_dups_three(arr):\n    '''\n    Find the duplicates in the array.\n    '''\n    if len(arr) == 0:\n        return []\n    \n    return [arr[0], arr[1], arr[2]] + find_dups_three(arr[3:])\n    \ndef find_dups_two_no_dups(arr):\n    '''\n    Find the duplicates in the array.\n    '''\n    if len(arr) == 0:\n        return []\n    \n    return [arr[0], arr[1]] + find_dups_two_no_dups(arr[2:])\n    \ndef find_star(arr):\n    '''\n    Find then'th star number.\n    '''\n    if len(arr) == 0:\n        return 1\n    \n    return find_star_num(len(arr)-1) + 2\n    \ndef find_dups_two_star(arr):\n    '''\n    Find then'th star number.\n    '''\n    if len(arr) == 0:\n        return 1\n    \n    if arr[0] == arr[1]:\n        return 2\n    \n    return find_dups_two_star(arr[1:]) + 2\n    \ndef find_dups_two_star_small(arr):\n    '''\n    Find then'th star number.\n    '''\n    if len(arr) == 0:\n        return 1\n    \n    if arr[0] == arr[1]:\n        return 2\n    \n    if arr[1] == arr[0]:\n        return 2\n    \n    return find_dups_two_star_small(arr[1:]) + 2\n    \ndef find_dups_two_star_small_small(arr):\n    '''\n    Find then'th star number.\n    '''\n    if len(arr) == 0:\n        return 1\n    \n    if arr[0] == arr[1]:\n        return 2\n    \n    if arr[1] == arr[0]:\n        return 2\n    \n    if arr[0] == arr[2]:\n        return 2\n    \n    return find_dups_two_star_small(arr[1:]) + 2\n",
        "num_ids": 93
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # define star number, and the index, as the following:\n    # - the lower bound of the range, from 1 to n\n    # - the upper bound of the range, from 1 to n\n    # - the stepsize for the range, from 1 to n\n    # - the index of the smallest step, from 1 to n\n    # - the index of the largest step, from 1 to n\n    # \n    # A star is a number that satisfies:\n    # - has n numbers less than or equal to it.\n    # \n    # Since 1 \u2264 n \u2264 10, we can check every number between 1 and 10, \n    #  however, the number of index will be less than or equal to n.\n    # \n    # We can also check only if the number is larger than 0.\n    # \n    # Return then'th star number.\n    \n    def find_star_num_star(n):\n        '''\n        Write a function to find then'th star number.\n        '''\n        if n == 0:\n            return 1\n        # write your logic here\n        return (find_star_num_star(n-1) + n * find_star_num_star(n-2))\n",
        "num_ids": 51
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    i=1\n    while i<=n:\n        if(n%i==0):\n            n//=i\n        else:\n            i+=1\n    return n\n",
        "num_ids": 46
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == type(''):\n        return ord(k) - ord('a') + 1\n    else:\n        return ord(k) - ord('a') + 1\n",
        "num_ids": 46
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return k.decode('ascii')\n    else:\n        return ascii_value(k[0:len(k)//2]) + ascii_value(k[len(k)//2:])\n",
        "num_ids": 65
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ''.join(chr(ord(x) % 128) for x in k)\n",
        "num_ids": 24
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in char_dict:\n        return char_dict[k]\n    else:\n        return ord(k)\n",
        "num_ids": 31
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # If char is a single character, return the ordinal\n    if k == ord(k):\n        return k\n    # Otherwise, return ordinal\n    return ord(k)\n",
        "num_ids": 44
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k not in ascii_values:\n        ascii_values[k] = 0\n    ascii_values[k] += 1\n    return ascii_values[k]\n",
        "num_ids": 49
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    elif k.isdigit():\n        return int(k)\n    else:\n        raise ValueError(f'Character {k} not valid.')\n",
        "num_ids": 54
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k, 16)\n",
        "num_ids": 11
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    sum_even = 0\n    while even_index < len(arr):\n        if arr[even_index] % 2 == 0:\n            sum_even += arr[even_index]\n            even_index += 1\n        else:\n            continue\n    return sum_even",
        "num_ids": 72
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #Your code here\n    #Hint: use an if or else statement to find the sum.\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n",
        "num_ids": 61
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum=0\n    even_index=0\n    \n    while even_index<len(arr):\n        if arr[even_index]%2==0:\n            even_sum+=arr[even_index]\n            even_index+=1\n        else:\n            even_index+=1\n    return even_sum\n",
        "num_ids": 79
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_index += 1\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 60
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = []\n    even_sum = 0\n    for index, num in enumerate(arr):\n        if num % 2 == 0:\n            even_index.append(index)\n            even_sum += num\n",
        "num_ids": 54
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for index in range(0,len(arr)):\n        if arr[index] % 2 == 0:\n            total_sum = total_sum + arr[index]\n    return total_sum\n",
        "num_ids": 55
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even += arr[i]\n        else:\n            odd += arr[i]\n    return even + odd\n",
        "num_ids": 62
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    sum_even = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            sum_even += arr[i]\n        else:\n            if (even_index < len(arr) / 2):\n                even_index += 1\n    return sum_even\n",
        "num_ids": 83
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            even += arr[i]\n    return even\n",
        "num_ids": 44
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_pos = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_pos = even_pos + 1\n            sum_even = sum_even + num\n    print(\"The even numbers sum is \", sum_even)\n",
        "num_ids": 68
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # Declare variables\n    sum = 0\n    x = n\n    \n    # If the number is divisible by 2 then sum = 2\n    while x >= 0:\n        if x%2 == 0:\n            sum += x\n        x -= 1\n    \n    # If the number is divisible by 5 then sum = (x * x)\n    while x >= 0:\n        if x%5 == 0:\n            sum += x\n        x -= 1\n        \n    # Return the sum\n    return sum\n",
        "num_ids": 122
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Step 1: Create a list of n natural numbers.\n    numbers = list(range(1, n + 1))\n    # Step 2: Create a new list of the numbers that are the powers of 2.\n    powers = []\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            powers.append(numbers[i])\n    # Step 3: Create a sum from the numbers in the powers list.\n    sum = 0\n    for i in powers:\n        sum += i ** 5\n    # Step 4: Return the sum.\n    return sum\n",
        "num_ids": 142
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return even_Power_Sum(n - 1) + n\n    else:\n        return even_Power_Sum(n - 1) + even_Power_Sum(n - 2)\n    \ndef even_Power_Sum_3(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the third power.\n    '''\n    if n == 1:\n        return n\n    elif n % 2 == 0:\n        return even_Power_Sum(n - 1) + n\n    else:\n        return even_Power_Sum(n - 1) + even_Power_Sum(n - 2) + even_Power_Sum(n - 3)\n",
        "num_ids": 77
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += i\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0: \n        return 0\n    else:\n        result = 0\n        for x in range(1, n + 1):\n            result = result + (x ** 5)\n        return result\n",
        "num_ids": 51
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 5 == 0:\n            sum += i**3\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n > 0:\n        # Write your code here\n        # Your code here\n        return n*even_Power_Sum(n-1)\n    else:\n        return 0\n    \n    return 0\n",
        "num_ids": 51
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            Sum += i**5\n    return Sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n        if sum % 5 == 0:\n            return sum\n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # Set the sum to 0\n    # Loop through each power of the number\n    sum = 0\n    \n    # Determine if the number is even or odd\n    # If the number is even, add the number to the sum\n    # If the number is odd, subtract from the sum\n    \n    # Add 1 to the sum until the number is divided by 5\n    # Add the value of the number to the sum\n    # Return the sum\n    \n    # Initialize the sum to 0\n    # Loop through the number\n    # If the number is even, add the value to the sum\n    # If the number is odd, subtract from the sum\n    \n    # Add 1 to the sum until the number is divided by 5\n    # Add the value of the number to the sum\n    # Return the sum\n    \n    # Return sum\n    \n    # Return sum\n    return sum\n",
        "num_ids": 203
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for t in test_list:\n        new_list.append(t[1])\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[-1][0]\n    \n",
        "num_ids": 16
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    l = []\n    for x in test_list:\n        l.append(x[1])\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Start with an empty list\n    rear = []\n",
        "num_ids": 16
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[-1])\n    return rear_list\n",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_rear = []\n    for i in range(len(test_list)):\n        list_rear.append(test_list[i][-1])\n    return list_rear\n",
        "num_ids": 49
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    if not test_list:\n        return []\n    if len(test_list) < 2:\n        return test_list[0]\n    return [test_list[0][1]] + rear_extract(test_list[1:])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2005
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # create an empty list\n    new_list = []\n    for x in test_list:\n        new_list.append(x[1])\n    # return the first element\n    return new_list[0]\n",
        "num_ids": 53
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[0])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)-1):\n        rear.append(test_list[i][1])\n    return rear\n",
        "num_ids": 42
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n    raise NotImplementedError\n",
        "num_ids": 68
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup = test_tup1 + test_tup2\n    return test_tup\n",
        "num_ids": 27
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print(f\"Your subtraction is: {tuple(test_tup1) - tuple(test_tup2)}\")\n",
        "num_ids": 33
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Write your code here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # test_tup1 = (1, 2, 3, 4, 5, 6)\n    # test_tup2 = (1, 2, 3, 4)\n    # result = []\n    # for i in test_tup1:\n    #     result.append(i - test_tup2[test_tup1.index(i)])\n    # print(result)\n    # print(len(result))\n    # print(test_tup1)\n    # print(test_tup2)\n    # print(len(result))\n    # print(test_tup1)\n    # print(test_tup2)\n",
        "num_ids": 156
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    def get_index(index):\n        index_start = index\n        index_end = len(test_tup1) - 1\n",
        "num_ids": 34
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    a = []\n    for i in range(len(test_tup1)):\n        a.append(test_tup2[i]-test_tup1[i])\n    \n    return a\n",
        "num_ids": 57
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for index in test_tup2:\n        new_tup.append(test_tup1[index])\n    new_tup = tuple(new_tup)\n    return new_tup\n    \ndef length_of_longest_substring(string):\n    '''\n    Write a function that returns the length of the longest substring in the given string.\n    '''\n    max_len = 1\n    index = 0\n    for i in range(len(string)):\n        if string[i]!= string[index]:\n            index = i\n            if i == len(string) - 1:\n                max_len = max(max_len, i - index + 1)\n            else:\n                max_len = max(max_len, i - index + 1)\n    return max_len\n    \ndef number_of_keys_in_subset(test_tup, test_tup2):\n    '''\n    Write a function that counts the number of keys in the given subset.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup2)):\n            if test_tup[i] in test_tup2[j]:\n                count += 1\n    return count\n    \ndef shortest_palindromes(string):\n    '''\n    Write a function that returns the shortest palindromes in a string.\n    '''\n    string = string.lower()\n    index = 0\n    while index < len(string) - 1:\n        if string[index] == string[index + 1]:\n            if string[index] == string[index + 2]:\n                string = string[:index] + string[index + 2:]\n                index += 1\n        index += 1\n    return string\n",
        "num_ids": 85
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in test_tup2:\n        test_tup1.pop(0)\n    for i in test_tup1:\n        test_tup2.pop(0)\n    return test_tup1, test_tup2\n",
        "num_ids": 62
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Write a function that takes in a list and returns a new list with the elements of the first tuple minus the elements of the second tuple.\n    # HINT: You may want to make the function mutable.\n",
        "num_ids": 52
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        # print(n, i)\n        # print(2**i)\n        sum += 2**i*math.factorial(2**i)\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef odd_binomial_Coeff_Sum( n):\n    '''\n    This function finds the sum of odd index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef even_binomial_Coeff_Sum_Even( n):\n    '''\n    This function finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef odd_binomial_Coeff_Sum_Even( n):\n    '''\n    This function finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef odd_binomial_Coeff_Sum_Odd( n):\n    '''\n    This function finds the sum of odd index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef odd_binomial_Coeff_Sum_Odd( n):\n    '''\n    This function finds the sum of odd index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef odd_binomial_Coeff_Sum_Odd_Even( n):\n    '''\n    This function finds the sum of odd index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef even_binomial_Coeff_Sum_Even_Odd( n):\n    '''\n    This function finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef odd_binomial_Coeff_Sum_Even_Odd( n):\n    '''\n    This function finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef odd_binomial_Coeff_Sum_Odd_Even( n):\n    '''\n    This function finds the sum of odd index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-2) * math.factorial(n-1)))\ndef binomial_Coeff_Sum( n, k):\n    '''\n    This function finds the sum of binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-k) * math.factorial(n-k-1)))\ndef binomial_Coeff_Sum_Even( n, k):\n    '''\n    This function finds the sum of binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-k) * math.factorial(n-k-1)))\ndef binomial_Coeff_Sum_Odd( n, k):\n    '''\n    This function finds the sum of binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-k) * math.factorial(n-k-1)))\ndef binomial_Coeff_Sum_Even_Odd( n, k):\n    '''\n    This function finds the sum of binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-k) * math.factorial(n-k-1)))\ndef binomial_Coeff_Sum_Odd_Even( n, k):\n    '''\n    This function finds the sum of binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n    else:\n        return round(math.factorial(n)/(math.factorial(n-k) * math.factorial(n-k-1)))\n",
        "num_ids": 60
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # calculate the binomial coefficients using the built in math module.\n    coeff_sum = math.comb(n, 2) # n^2\n    return coeff_sum\n",
        "num_ids": 43
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # write your code here\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return even_binomial_Coeff_Sum(n // 2) + n * even_binomial_Coeff_Sum(n - 1)\n    else:\n        return even_binomial_Coeff_Sum(n // 2) + (n - 1) * even_binomial_Coeff_Sum(n // 2)\n",
        "num_ids": 110
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+even_binomial_Coeff(i)\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.factorial(n)/(math.factorial(n-2)*math.factorial(n-1))\n",
        "num_ids": 31
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n%2==0:\n        return(even_binomial_Coeff_Sum(n//2))\n    else:\n        return(even_binomial_Coeff_Sum(n-1))\n",
        "num_ids": 53
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i+1) * (2*i)**2\n",
        "num_ids": 39
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n):\n        result += math.factorial(n-i)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Calculate the sum of even binomial coefficients\n    #where the number of odds is even\n    even_odd_coeff = n/2\n    return even_odd_coeff\n    #return even_odd_coeff * (n-even_odd_coeff)\n",
        "num_ids": 67
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = h*r**2\n    return v\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3*pi*r**3\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*h\n",
        "num_ids": 10
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4/3*pi*r**3\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3) * pi * (r**3) * (h**3)\n    return volume\n",
        "num_ids": 29
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*h)/2",
        "num_ids": 10
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*pi*(r**3)*(h/2)**3\n",
        "num_ids": 24
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3 * pi * r * h**3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3*r**3\n    print(volume)\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r * h\n",
        "num_ids": 8
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_list=[]\n    for key,value in dict.items():\n        if value >= n:\n            filter_list.append(key)\n    return filter_list\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for i in dict:\n        if dict[i] >= n:\n            filtered[i] = dict[i]\n    return filtered\n",
        "num_ids": 41
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for k in dict:\n        if dict[k] >= n:\n            filtered_dict[k] = dict[k]\n    return filtered_dict\n",
        "num_ids": 47
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    \n    for key in dict.keys():\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n    \n    return filtered_dict\n",
        "num_ids": 53
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict\n",
        "num_ids": 33
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Create a tuple of the numbers from test_tup\n    tup = tuple(test_tup)\n",
        "num_ids": 28
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] < test_tup[i + 1]:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for i in range(len(test_tup)):\n        if test_tup[i]<=test_tup[i+1]:\n            count+=1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element = test_tup[0]\n    count = 0\n    for el in test_tup:\n        if el < first_element:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    temp_tuple = tuple(test_tup)\n    i = 0\n    length = len(temp_tuple)\n    while i < length:\n        if temp_tuple[i] == test_tup[i]:\n            i += 1\n        else:\n            i += 1\n    return i\n",
        "num_ids": 75
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0,len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        if count == 1:\n            break\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup[0])\n",
        "num_ids": 14
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    if type(test_tup) is tuple:\n        # Base case\n        if test_tup[0] is tuple:\n            print(test_tup[0])\n            # print(f'number of first elements = {len(test_tup[0])}')\n            return len(test_tup[0])\n",
        "num_ids": 97
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    if not test_tup:\n        return 0\n    else:\n        return len(test_tup)\n",
        "num_ids": 31
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return is_num_decagonal(n - 1) + is_num_decagonal(n - 2)\n",
        "num_ids": 58
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = n - 1\n    b = n + 1\n    c = n + 2\n    d = n + 3\n    e = n + 4\n    f = n + 5\n    g = n + 6\n    h = n + 7\n    i = n + 8\n    j = n + 9\n    k = n + 10\n    l = n + 11\n    m = n + 12\n    n = n + 13\n    o = n + 14\n    p = n + 15\n    q = n + 16\n    r = n + 17\n    s = n + 18\n    t = n + 19\n    u = n + 20\n    v = n + 21\n    w = n + 22\n    x = n + 23\n    y = n + 24\n    z = n + 25\n    \n    f = f - 1\n    g = g + 1\n    h = h + 2\n    i = i + 3\n    j = j + 4\n    k = k + 5\n    l = l + 6\n    m = m + 7\n    n = n + 8\n    o = o + 9\n    p = p + 10\n    q = q + 11\n    r = r + 12\n    s = s + 13\n    t = t + 14\n    u = u + 15\n    v = v + 16\n    w = w + 17\n    x = x + 18\n    y = y + 19\n    z = z + 20\n    \n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        if n%10 == 1:\n            return True\n        else:\n            return False\n    \n    \nn = int(input())\nprint(is_num_decagonal(n))\n",
        "num_ids": 407
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: \n        raise ValueError('n must be >= 0')\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 3\n    if n == 4: \n        return 5\n    if n == 5: \n        return 15\n    if n == 6: \n        return 20\n    if n == 7: \n        return 33\n    if n == 8: \n        return 70\n    if n == 9: \n        return 90\n    if n == 10: \n        return 120\n    if n == 11: \n        return 151\n    if n == 12: \n        return 210\n    if n == 13: \n        return 241\n    if n == 14: \n        return 280\n    if n == 15: \n        return 303\n    if n == 16: \n        return 390\n    if n == 17: \n        return 483\n    if n == 18: \n        return 584\n    if n == 19: \n        return 605\n    if n == 20: \n        return 730\n    if n == 21: \n        return 783\n    if n == 22: \n        return 860\n    if n == 23: \n        return 933\n    if n == 24: \n        return 983\n    if n == 25: \n        return 1060\n    if n == 26: \n        return 1133\n    if n == 27: \n        return 1179\n    if n == 28: \n        return 1240\n    if n == 29: \n        return 1293\n    if n == 30: \n        return 1350\n    if n == 31: \n        return 1395\n    if n == 32: \n        return 1460\n    if n == 33: \n        return 1495\n    if n == 34: \n        return 1550\n    if n == 35: \n        return 1595\n    if n == 36: \n        return 1660\n    if n == 37: \n        return 1695\n    if n == 38: \n        return 1750\n    if n == 39: \n        return 1795\n    if n == 40: \n        return 1860\n    if n == 41: \n        return 1895\n    if n == 42: \n        return 1960\n    if n == 43: \n        return 1929\n    if n == 44: \n        return 1950\n    if n == 45: \n        return 1960\n    if n == 46: \n        return 2000\n    if n == 47: \n        return 2085\n    if n == 48: \n        return 2090\n    if n == 49: \n        return 2145\n    if n == 50: \n        return 2190\n    if n == 51: \n        return 2255\n    if n == 52: \n        return 2210\n    if n == 53: \n        return 2275\n    if n == 54: \n        return 2300\n    if n == 55: \n        return 2315\n    if n == 56: \n        return 2330\n    if n == 57: \n        return 2345\n    if n == 58: \n        return 2400\n    if n == 59: \n        return 2485\n    if n == 60: \n        return 2500\n    if n == 61: \n        return 2585\n    if n == 62: \n        return 2600\n    if n == 63: \n        return 2675\n    if n == 64: \n        return 2700\n    if n == 65: \n        return 2785\n    if n == 66: \n        return 2800\n    if n == 67: \n        return 2885\n    if n == 68: \n        return 2900\n    if n == 69: \n        return 2985\n    if n == 70: \n        return 3050\n    if n == 71: \n        return 3095\n    if n == 72: \n        return 3160\n    if n == 73: \n        return 3285\n    if n == 74: \n        return 3300\n    if n == 75: \n        return 3345\n    if n == 76: \n        return 3400\n    if n == 77: \n        return 3445\n    if n == 78: \n        return 3500\n    if n == 79: \n        return 3555\n    if n == 80: \n        return 3600\n    if n == 81: \n        return 3645\n    if n == 82: \n        return 3700\n    if n == 83: \n        return 3745\n    if n == 84: \n        return 3800\n    if n == 85: \n        return 3845\n    if n == 86: \n        return 3900\n    if n == 87: \n        return 3945\n    if n == 88: \n        return 4000\n    if n == 89: \n        return 4045\n    if n == 90: \n        return 4100\n    if n == 91: \n        return 4255\n    if n == 92: \n        return 4210\n    if n == 93: \n        return 4275\n    if n == 94: \n        return 4300\n    if n == 95: \n        return 4345\n    if n == 96: \n        return 4500\n    if n == 97: \n        return 4545\n    if n == 98: \n        return 4600\n    if n == 99: \n        return 4645\n    if n == 100: \n        return 4700\n    if n == 101: \n        return 4785\n    if n == 102: \n        return 4800\n    if n == 103: \n        return 4945\n    if n == 104: \n        return 5020\n    if n == 105: \n        return 5045\n    if n == 106: \n        return 5150\n    if n == 107: \n        return 5125\n    if n == 108: \n        return 5250\n    if n == 109: \n        return 5345\n    if n == 110: \n        return 5800\n    if n == 111: \n        return 5995\n    if n == 112: \n        return 6200\n    if n == 113: \n        return 6485\n    if n == 114: \n        return 7000\n    if n == 115: \n        return 6995\n    if n == 116: \n        return 7100\n    if n == 117: \n        return 7255\n    if n == 118: \n        return 7600\n    if n == 119: \n        return 7995\n    if n == 120: \n        return 8000\n    if n == 121: \n        return 8000\n    if n == 122: \n        return 8125\n    if n == 123: \n        return 8250\n    if n == 124: \n        return 8485\n    if n == 125: \n        return 8700\n    if n == 126: \n        return 8995\n    if n == 127: \n        return 9000\n    if n == 128: \n        return 9125\n    if n == 129: \n        return 9250\n    if n == 130: \n        return 9485\n    if n == 131: \n        return 9700\n    if n == 132: \n        return 9995\n    if n == 133: \n        return 10000\n    if n == 134: \n        return 10025\n    if n == 135: \n        return 10050\n    if n == 136: \n        return 10075\n    if n == 137: \n        return 10090\n    if n == 138: \n        return 10125\n    if n == 139: \n        return 10150\n    if n == 140: \n        return 10175\n    if n == 141: \n        return 10190\n    if n == 142: \n        return 10225\n    if n == 143: \n        return 10250\n    if n == 144: \n        return 10485\n    if n == 145: \n        return 10700\n    if n == 146: \n        return 10995\n    if n == 147: \n        return 11100\n    if n == 148: \n        return 11125\n    if n == 149: \n        return 11250\n    if n == 150: \n        return 11485\n    if n == 151: \n        return 11700\n    if n == 152: \n        return 11995\n    if n == 153: \n        return 12000\n    if n == 154: \n        return 1225\n    if n == 155",
        "num_ids": 2009
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    elif n % 2 == 0:\n        return n//2\n    else:\n        return (n-1)//2\n",
        "num_ids": 47
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = n\n    if n == 1:\n        return n\n    elif n == 2:\n        return a\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n",
        "num_ids": 60
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    deci = []\n    for i in range(n+1):\n        if i % 2 == 1:\n            deci.append(i/2)\n        else:\n            deci.append(i/2 + 2)\n",
        "num_ids": 56
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # your code goes here\n    if n < 2:\n        return 0\n    if n%2 == 0:\n        return n//2\n    return n//2 + 1\n",
        "num_ids": 43
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0:\n        return True\n    elif n==1:\n        return False\n    else:\n        return is_num_decagonal(n-1) and is_num_decagonal(n-2)\n",
        "num_ids": 55
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        raise ValueError \n    elif n == 0:\n        return 1 \n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        n_temp = n % 3\n        if n_temp == 0:\n            return is_num_decagonal(n // 3) + 1\n        elif n_temp == 1:\n            return is_num_decagonal(n // 2) + 1\n        elif n_temp == 2:\n            return is_num_decagonal(n // 1)\n    \n    \n",
        "num_ids": 144
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, n + 1):\n        if i < n:\n            sum += i\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)\n",
        "num_ids": 41
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the array, looking for the position of the element \n    position = -1\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            position = i\n    return (position == -1)\n",
        "num_ids": 61
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if len(dlist) == 0:\n        return (False, -1)\n    elif item in dlist:\n        return (True, dlist.index(item))\n    else:\n        return (False, -1)\n",
        "num_ids": 57
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n        else:\n            return (False, -1)\n    \ndef binary_search(arr, item):\n    '''\n    Write a function that takes an array and an item and returns its index position in the array. If the item is not present in the array, return -1.\n    '''\n    start_index = 0\n    end_index = len(arr)-1\n    while start_index <= end_index:\n        mid_index = start_index + (end_index - start_index) // 2\n        if arr[mid_index] == item:\n            return mid_index\n        elif arr[mid_index] < item:\n            start_index = mid_index + 1\n        else:\n            end_index = mid_index - 1\n    return -1\n    ",
        "num_ids": 115
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return index,index+1\n",
        "num_ids": 48
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, j in enumerate(dlist):\n        if item == j:\n            return (i == 0)\n    return (-1)",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, element in enumerate(dlist):\n        if item == element:\n            return (True, i)\n        if item < element:\n            return sequential_search(dlist, item)\n    return (False, -1)\n",
        "num_ids": 58
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if not test_list:\n        return True\n",
        "num_ids": 14
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = list(set(test_list))\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) < len(test_list):\n        return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #test list\n    for index, ele in enumerate(test_list):\n        if(index == 0):\n            print(f\"Uniqe elem: {ele}\")\n        else:\n            print(f\"Uniqe elem: {ele}\")\n        print(\"\\n\")\n        print(test_list)\n        print(\"\\n\")\n",
        "num_ids": 87
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    for i in range(len(test_list)):\n        if test_list[i] in test_list:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # set to false if duplicate elements are present in the list\n    duplicate_elements = {}\n    # iterate through each list\n    for i in test_list:\n        # check if value of element is unique and if duplicate values are present in list\n        if i not in duplicate_elements.values():\n            # store the value of element in dictionary\n            duplicate_elements[i] = 1\n    # return if it is unique\n    return len(duplicate_elements) == len(test_list)\n",
        "num_ids": 124
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(set(test_list))\n    test_list.sort()\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 42
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if i not in test_list:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    return [x-y for x,y in zip(nums1,nums2)]\n    \n    \n    ",
        "num_ids": 55
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    '''\n    Write your code here.\n    '''\n    num_min = min(nums1, nums2)\n    nums1.remove(num_min)\n    nums2.remove(num_min)\n    return num_min\n",
        "num_ids": 48
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Logic\n    # loop through the lists\n    # if nums1 is greater than nums2 then add\n    # if nums2 is greater than nums1 then add\n    # if nums1 and nums2 are both greater than the last element\n    # then add the second last element to the first element\n    # return the result\n    \n    # if nums1 is greater than nums2 then return first element\n    # if nums2 is greater than nums1 then return second element\n    # if nums1 is greater than nums2 then return last element\n    # if nums2 is greater than nums1 then return first element\n    \n    # sub_list(nums1,nums2)\n    \n    pass\n",
        "num_ids": 172
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in nums1:\n        if i not in nums2:\n            sub_list.append(i)\n    return sub_list\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.append(nums2[0])\n    nums1.append(nums2[1])\n    print(nums1)\n    \n    for i in range(2,len(nums2)):\n        nums1.append(nums1[i]-nums1[i-1])\n        print(nums1)\n    print(nums1)\n    return nums1\n    \n    \n    \n",
        "num_ids": 106
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n    \n    \n    ",
        "num_ids": 10
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n",
        "num_ids": 21
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in n:\n        if (not isinstance(i, int)):\n            return False\n        if (i < 10):\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if(n < 10):\n        return int(n)\n    else:\n        for i in range(0, len(n)):\n            if n[i] < n[i-1]:\n                return int(n)\n                break\n    return int(n)\n",
        "num_ids": 68
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1: \n        return True\n    else: \n        for i in str(n): \n            if not (i.isdigit()): \n                return False \n            if not (int(i) <= n): \n                return False\n        return True\n",
        "num_ids": 73
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0: \n        return False\n    check = 1\n    while (n%check!= 0): \n        check += 1\n    if (check == n): \n        return True\n    else: \n        return False\n",
        "num_ids": 58
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def frequency(num,digit): \n        for i in range(0, digit): \n            if num % 10 == digit: \n                num = num / 10\n            else: \n                num = num / 10 + num % 10\n        return num\n    counter = 0\n    for i in range(0, n): \n        num = int(n) * frequency(i, n)\n        if num == n: \n            counter += 1\n    if counter == n: \n        return True\n    else: \n        return False\n",
        "num_ids": 127
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in n:\n        if i > 9:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    s = 0\n    for i in str(n):\n        s += int(i)\n    for i in d:\n        if s % int(i)!= 0:\n            return False\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) is not int:\n        raise TypeError(\"Please enter an Integer!\")\n    if type(n) is not int:\n        raise TypeError(\"Please enter an Integer!\")\n    else:\n        if type(n) is not int:\n            raise TypeError(\"Please enter an Integer!\")\n        if n < 0 or n > 10**6:\n            raise ValueError(\"Please enter an Integer!\")\n        else:\n            return n\ndef main():\n    '''\n    The following code runs on a MacOS 10.15.5 computer, not Linux.\n    '''\n    # if not os.path.exists('numbers.txt'):\n    #     raise FileNotFoundError(\"numbers.txt does not exist!\")\n    # valid_numbers = open('numbers.txt').read().split()\n    # nums = [valid_numbers[i] for i in range(len(valid_numbers)) if i%2==0]\n    # print(nums)\n    # return nums\n    print(nombres_l)\n    for nombre in nombres_l:\n        nombres_l.remove(nombre)\n    return nombres_l\n",
        "num_ids": 150
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n > 9:\n        return False\n    elif n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 10 == 0:\n        return False\n    elif n % 10 == 9:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if(n==0): \n        return False\n    else:\n        digits=[]\n        for i in range(0,10):\n            if(n%10==i):\n                digits.append(i)\n        if(n%10==digits[0]):\n            return False\n        else:\n            return True\n",
        "num_ids": 81
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Empty list to store element to check\n    sum = 0\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n        else:\n            sum += list[i]\n    return True\n    \ndef solution(k, lists):\n    answer = []\n    for i in lists:\n        if check_element(i,k):\n            answer.append(i)\n    \n    return answe",
        "num_ids": 107
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    else:\n        for i in range(len(list)):\n            if element == list[i]:\n                return True\n            else:\n                return False\n",
        "num_ids": 50
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for index,item in enumerate(list):\n        if(item == element):\n            return False\n        else:\n            if(index == len(list)-1):\n                return False\n            else:\n                return True\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if(list.index(item)!= list.index(element) and list.index(item)!= list.index(element)):\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #need to make a set of all the elements in the list to check if equal to the element\n    set_elements = set(list)\n    #make sure the elements are not in the list\n    if element not in set_elements:\n        return False\n    #make sure the item is not in the set\n    else:\n        for element in list:\n            if element!= element:\n                return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #If the list contains elements of the same class, the function should return true.\n    if type(list)==list:\n        for i in list:\n            if isinstance(i,element):\n                return True\n        return False\n    #If the list contains elements of different classes, the function should return false.\n    elif type(list)==list:\n        for i in list:\n            if isinstance(i,element):\n                return False\n        return True\n    #If the list is empty, the function should return false.\n    elif list==[]:\n        return False\n    #If the list is empty, the function should return true.\n    elif list==[]:\n        return True\n    #If the list is not empty, the function should return false, and then return the list.\n    else:\n        return False\n    ",
        "num_ids": 195
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item == element:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if not list:\n        print(\"The list is empty\")\n    elif element in list[0]:\n        print(\"Element is in list\")\n    else:\n        print(\"Element not in list\")\n    #End if",
        "num_ids": 53
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 2 or len(text) > 3:\n        return False\n    if text[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    if text[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    if text[0] == text[-1] and len(text) == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 115
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r'a\\s{1,}\\b\\s{2,}\\bb', text)!= None\n",
        "num_ids": 31
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_three_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_three_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_one(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_four_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\ndef text_match_four_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'b' in text\ndef text_match_five_zero(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.sub('[^\\w\\s]','', text)\n    return 'a' in text\nde",
        "num_ids": 30
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a')+text.count('b')==len(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '[^a-zA-Z\\d\\s]'\n    count = 0\n    for i in text:\n        if re.search(pattern,i)!= None:\n            count+=1\n    return(count)\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '[^a-zA-Z\\d\\s]'\n    count = 0\n    for i in text:\n        if re.search(pattern,i)!= None:\n            count+=1\n    return(count)\ndef text_match_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '[^a-zA-Z\\d\\s]'\n    count = 0\n    for i in text:\n        if re.search(pattern,i)!= None:\n            count+=1\n    return(count)\ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '[^a-zA-Z\\d\\s]'\n    count = 0\n    for i in text:\n        if re.search(pattern,i)!= None:\n            count+=1\n    return(count)\ndef text_match_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = '[^a-zA-Z\\d\\s]'\n    count = 0\n    for i in text:\n        if re.search(pattern,i)!= None:\n            count+=1\n    return(count)\n",
        "num_ids": 56
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    m = re.search(\"a([bcdfghjklmnpqrstvwxyz]*)b\", text)\n",
        "num_ids": 34
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # your code here\n    text = text.lower()\n    result = re.findall(\"\\w\\w\",text)\n    if result:\n        if len(result) >= 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    reg = re.compile('a[^b]*b')\n    if(reg.search(text)):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'[a-zA-Z]\\b', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_list = list(text)\n    pattern = \"a+|b+|b+\"\n    text_match = re.match(pattern, text)\n    if text_match:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array = [a[0]]\n    for i in range(1, n):\n        for j in range(k):\n            if i-j > 0:\n                max_sub_array.append(a[i-j])\n    return max(max_sub_array)\n",
        "num_ids": 71
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    m = [None] * n # dp table for getting the maximum sum, which is not negative, in the first iteration of the for loop\n    m[0] = 0\n",
        "num_ids": 42
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Python3 implementation\n    \n    # Create an array to store the sub-array sums\n    sub_array_sum_array = [0] * n\n    \n    # Initialize result array\n    result = 0\n    \n    # Loop through all elements and create a sub-array sum for each repetition\n    for i in range(1, n):\n        sub_array_sum = 0\n        for j in range(i, n):\n            sub_array_sum += a[j]\n            if sub_array_sum >= k:\n                result = max(result, sub_array_sum_array[j] + sub_array_sum)\n                sub_array_sum_array[j] = 0\n    \n    # Return the final result\n    return result\n",
        "num_ids": 177
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here\n    if n == 1:\n        return a[0]\n    else:\n        index = 1\n        sum = 0\n        for i in range(n-1):\n            if i == 0:\n                sum += a[i+1]\n            else:\n                sum += a[i+1] * k\n        return max(sum, a[-1])\n",
        "num_ids": 93
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = []\n    sum = 0\n",
        "num_ids": 12
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def util(a, k): \n        s = 0\n        for i in range(len(a) - k + 1): \n            s = s + a[i]\n        return s \n",
        "num_ids": 49
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum_arr_k = 0\n    i = 0\n    while i < n:\n        max_sum_arr_k += a[i]\n        i += k\n    return max_sum_arr_",
        "num_ids": 52
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Write your code here.\n    mod = 1000000001\n    max_sum = 0\n    for i in range(k):\n        temp = a\n        for j in range(k):\n            temp += a[j]\n            if temp % mod == 0:\n                max_sum += temp // mod\n                break\n            else:\n                break\n        if max_sum < a[j]:\n            max_sum = a[j]\n    return max_sum\n",
        "num_ids": 110
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if k == 0:\n        return 0\n    # Add this to the left side\n    left = 0\n    right = n - k + 1\n    # Get the maximum sum from the left side\n    left_max = 0\n    for i in range(left, right + 1):\n        left_max = left_max + a[i]\n    # Get the maximum sum from the right side\n    right_max = 0\n    for i in range(n - k + 1, n):\n        right_max = right_max + a[i]\n    \n    return max(left_max, right_max)\n",
        "num_ids": 154
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i**2\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s = s + i\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**2\n",
        "num_ids": 8
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sq = 0\n    for i in range(1, n+1):\n        sq = sq + i**2\n    return sq\nprint(square_Sum(10)",
        "num_ids": 41
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i%2==0])\n",
        "num_ids": 28
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(0,n):\n        if i % 2 == 0:\n            s = s + i**2\n    print(s)\n",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n",
        "num_ids": 46
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i %2==0:\n            sum +=i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1,n+1):\n        sum_squares += i**2\n    print(sum_squares)\n",
        "num_ids": 42
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Write your code here\n    if not list1:\n        return None\n",
        "num_ids": 20
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n",
        "num_ids": 42
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    if list1 == []:\n        return max_length\n    for list1_item in list1:\n        if len(list1_item) > max_length:\n            max_length = len(list1_item)\n    return max_length\n",
        "num_ids": 68
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for list1_i in list1:\n        if len(list1_i) > len(max_length_list):\n            max_length_list = list1_i\n    return max_length_list\n",
        "num_ids": 61
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    temp=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            temp=max(temp,len(list1[i][j]))\n    return temp\n",
        "num_ids": 57
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    '''\n    Note: you need to create a function that returns the length of a given list.\n    For example:\n    max_length([[1, 2, 3], [3, 1, 7, 8, 6], [5, 6, 4, 2, 8, 3, 10]])\n    => 6\n    '''\n    max_length = 0\n",
        "num_ids": 9
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(lambda x: len(x), list1))\n",
        "num_ids": 19
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length_list=[]\n    \n    for element in list1:\n        length_list.append(len(element))\n    return max(length_list)\n",
        "num_ids": 40
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    n = n + 1\n    k = k + 1\n    dp = [[0 for x in range(k)] for y in range(n)]\n",
        "num_ids": 36
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n < 2): \n        return 1\n    \n    # base case \n    if n == 2: \n        return 2 \n    \n    # first case \n    if (n == 3): \n        return 4 \n",
        "num_ids": 58
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence_paintings = 0\n",
        "num_ids": 12
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Pythonic approach:\n    \n    # 1. Initialize the count array.\n    count = 0\n    \n    # 2. Go through the fence n times.\n    for i in range(n):\n        # 3. Count the number of ways.\n        for j in range(k):\n            # 4. Update the count.\n            count += 1\n            \n    return count\n",
        "num_ids": 90
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n    ways = 0\n    for i in range(1, k+1):\n        ways += count_no_of_ways(n, k-i)\n    return ways\n",
        "num_ids": 53
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case\n    if n == 0 or k == 0:\n        return 1\n    \n    # Base case\n    if k == 1:\n        return (count_no_of_ways(n-1, k) * k)\n",
        "num_ids": 57
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    from collections import defaultdict\n    n,k = [int(i) for i in input().split()]\n    G = defaultdict(int)\n",
        "num_ids": 37
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    if n < k:\n        return 0\n    \n    # if left side is black then total count of ways = right side for each white post\n    # if right side is black then total count of ways = left side for each white post\n    # for left side white post and right side black post, count number of ways\n    left_side_count = count_no_of_ways(n-2, k-1) + count_no_of_ways(n-1, k-1)\n    right_side_count = count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k-1)\n    return left_side_count * right_side_count\n",
        "num_ids": 191
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    m = [[0 for x in range(n + 1)] for x in range(n + 1)] \n    if n == 0 or k == 0 or n == 1: \n        return 1\n    if m[n][k]!= 0: \n        return m[n][k] \n    if n == k: \n        return 1 \n    for i in range(n, k): \n        for j in range(n - 1, i - 1, -1): \n            m[i][j] = 1 + m[i - 1][j] + m[i][j - 1]\n    return m[n][k] \n",
        "num_ids": 153
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m>n:\n        m,n=n,m\n    if n>=m:\n        for i in range(m,n):\n            if n%i==0:\n                return i\n    else:\n        return -1\n",
        "num_ids": 59
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x = n % 10\n    y = m % 10\n    if x >= y:\n        return(y + 10)\n    else:\n        return(x + 10)\n",
        "num_ids": 43
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return 0\n    elif n>m:\n        return n//m\n    elif n<m:\n        return (m+n//m)//2\n    else:\n        return n\n",
        "num_ids": 55
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < 0 or m < 0:\n        return \"Invalid Input\"\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    i = 1\n    while i < n+1:\n        if i == n:\n            return i\n        if i % m == 0:\n            return i\n        i += 1\n",
        "num_ids": 85
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #Write your code here\n    if(n==m):\n        return n\n    elif(n<m):\n        return find(n,m-1)\n    else:\n        return find(n-1,m)\n",
        "num_ids": 56
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0 or m==0:\n        return n\n",
        "num_ids": 17
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return find(n+1,m)\n    else:\n        return 1/find(n-1,m)\n",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        q = n\n        n = m\n        m = q\n    if m == 0:\n        return n\n    while m:\n        q = n % m\n        n = m\n        m = q\n    return n\n",
        "num_ids": 61
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=0:\n        return -1\n    elif m==0:\n        return 1\n    elif n==1:\n        return 2\n    elif n>1:\n        return n/find(n-1,m-1)\n",
        "num_ids": 62
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    if m == 1:\n        return n\n    if m == 2:\n        return n*2\n    else:\n        return n*(find(m-1,m%2)+find(m//2,m%2))\n",
        "num_ids": 67
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return -1*(w+h)/3\n",
        "num_ids": 14
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    v = w*h\n    return math.sqrt(v)\n    #to find the third side of a right angled triangle\ndef area_of_a_right_angled_triangle(side_a,side_b,side_c):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    d = math.sqrt((side_a**2)+(side_b**2)+(side_c**2))\n    a = (side_a+side_b+side_c)/2\n    b = ((2*side_a*side_b)/math.sqrt(d))\n    c = ((side_c**2)*math.sqrt((side_a**2)+(side_b**2)+(side_c**2)))\n    area = (b*c)/(math.sqrt(d))\n    return area\n    #to find the area of a right angled triangle\ndef area_of_a_right_angled_triangle_given_side(side_a,side_b,side_c):\n    '''\n    Write a function to find the area of a right angled triangle given\n    side of the two given sides of the triangle.\n    '''\n    a = side_a**2\n    b = (side_a*side_b)\n    c = (side_c*side_c)\n    d = ((side_b**2)+(side_c**2))\n    area = (a+b+c)/(math.sqrt(d))\n    return area\n    #to find the area of a right angled triangle\ndef area_of_a_right_angled_triangle_given_side2(side_a,side_b,side_c):\n    '''\n    Write a function to find the area of a right angled triangle given\n    side of the two given sides of the triangle.\n    '''\n    a = side_a**2\n    b = (side_a*side_b)\n    c = (side_c*side_c)\n    d = ((side_b**2)+(side_c**2))\n    area = (a*b/d + c*d/math.sqrt(d))/2\n    return area\n    #to find the area of a right angled triangle\ndef convex_hull(points):\n    '''\n    Write a function to compute the convex hull of a set of points.\n    '''\n    #convert the set of points into a list\n    points = list(points)\n    #calculate the area of the convex hull\n    hull_area = 0\n    hull = []\n    for i in range(len(points)):\n        for j in range(len(points)):\n            if i == j:\n                continue\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n            elif points[i][0] > points[j][0] and points[i][1] < points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[j][0], points[j][1]))\n                hull.append((points[i][0], points[i][1]))\n            elif points[i][0] < points[j][0] and points[i][1] > points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n            elif points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[j][0], points[j][1]))\n                hull.append((points[i][0], points[i][1]))\n            else:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n    #return the list of the hull\n    return hull\n    #to compute the convex hull\ndef convex_hull_with_lines(points):\n    '''\n    Write a function to compute the convex hull of a set of points.\n    '''\n    #convert the set of points into a list\n    points = list(points)\n    #calculate the area of the convex hull\n    hull_area = 0\n    hull = []\n    for i in range(len(points)):\n        for j in range(len(points)):\n            if i == j:\n                continue\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n            elif points[i][0] > points[j][0] and points[i][1] < points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[j][0], points[j][1]))\n                hull.append((points[i][0], points[i][1]))\n            elif points[i][0] < points[j][0] and points[i][1] > points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n            elif points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[j][0], points[j][1]))\n                hull.append((points[i][0], points[i][1]))\n            else:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n    #return the list of the hull\n    return hull\n    #to compute the convex hull\ndef convex_hull_with_rectangle(points):\n    '''\n    Write a function to compute the convex hull of a set of points.\n    '''\n    #convert the set of points into a list\n    points = list(points)\n    #calculate the area of the convex hull\n    hull_area = 0\n    hull = []\n    for i in range(len(points)):\n        for j in range(len(points)):\n            if i == j:\n                continue\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n            elif points[i][0] > points[j][0] and points[i][1] < points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[j][0], points[j][1]))\n                hull.append((points[i][0], points[i][1]))\n            elif points[i][0] < points[j][0] and points[i][1] > points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[i][0], points[i][1]))\n                hull.append((points[j][0], points[j][1]))\n            elif points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                #compute the area of a convex hull\n                hull.append((points[j][",
        "num_ids": 384
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt(w**2+h**2-x**2)\n    ang = math.acos((x**2 + (r**2 - w**2)**2) / (2*r * w))\n    theta = math.degrees(ang)\n    return theta\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x= math.sqrt(w**2+h**2)\n    r = math.sqrt",
        "num_ids": 26
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    phi = math.pi/2\n    if(w < h):\n        return 2*math.pi*(h/w)-phi\n    else:\n        return 2*math.pi*(w/h)+phi\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    phi = math.pi/2\n    if(w < h):\n        return 2*math.pi*(w/h)-phi\n    else:\n        return 2*math.pi*(h/w)+phi\n",
        "num_ids": 53
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = (w*h)/2\n    b = math.sqrt(a*a+h*h)\n    c = 2*h/b\n    return c\n",
        "num_ids": 42
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    r = math.sqrt(math.pow(w,2)+math.pow(h,2))\n    if r < 1.38*r:\n        return 1.38*r\n    elif r < 2.54*r:\n        return 2.54*r\n    else:\n        return r\n",
        "num_ids": 76
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"\\n\\n\\t\\t\\t\\t\\t\\t*** YOUR CODE HERE *** \\n\\n\")\n    print(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tWELCOME TO BOTH OF PICTURES IN THE CLASS! \\n\\n\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tBOTH OF THE IMAGES\")\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWIDTH:\",w)\n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tHEIGHT:\",h)\n",
        "num_ids": 169
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # The angles of the lines are given as matrices\n    a = w[0]\n    b = w[1]\n    c = w[2]\n    a1 = h[0]\n    b1 = h[1]\n    c1 = h[2]\n    # The angle difference between the x coordinates\n    deltaX = c1-a1\n    # The angle difference between the y coordinates\n    deltaY = b1-b1\n    # The angle difference between the z coordinates\n    deltaZ = c1-c1\n    # The cosine angle between the x and y components\n    cosX = math.cos(math.radians(a))\n    # The cosine angle between the y and z components\n    cosY = math.cos(math.radians(b))\n    # The cosine angle between the z and y components\n    cosZ = math.cos(math.radians(c))\n    # The sine angle between the x and y components\n    sinX = math.sin(math.radians(a))\n    # The sine angle between the y and z components\n    sinY = math.sin(math.radians(b))\n    # The sine angle between the z and y components\n    sinZ = math.sin(math.radians(c))\n    # The cosine angle between the z and y components\n    cosZ_1 = 1 - cosY\n    # The cosine angle between the x and z components\n    cosX_1 = 1 - cosZ\n    # The cosine angle between the x and z components\n    cosY_1 = 1 - cosZ_1\n    # The distance between the z components\n    dis = math.sqrt(deltaZ*deltaZ + deltaX*deltaX + deltaY*deltaY)\n    # The new x coordinates for the y components\n    x = dis/2 * cosY * cosZ_1 - dis/2 * cosX * cosY_1\n    # The new y coordinates for the z components\n    y = dis/2 * cosZ * cosY_1 - dis/2 * cosX * cosZ_1\n    # The new z coordinates for the x components\n    z = dis/2 * cosZ * cosX_1 - dis/2 * cosX * cosZ_1\n    # Return a tuple of the x,y, and z coordinates\n    return (x, y, z)\n",
        "num_ids": 556
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #find the third side of the triangle\n    third_side = math.sqrt(math.pow(w,2) + math.pow(h,2))\n    return third_side\n",
        "num_ids": 48
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    theta = math.radians(45)\n    phi = math.radians(180)\n    n = 0.5 * h\n    S = math.sqrt(n**2-w**2)\n    x = S * math.sin(theta) * math.cos(phi)\n    y = S * math.sin(theta) * math.sin(phi)\n    z = S * math.cos(theta)\n    return [x,y,z]\n",
        "num_ids": 114
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[-1]\n",
        "num_ids": 18
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 56
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    list1 = []\n    for x in listval:\n        list1.append(x)\n    return max(list1)\n",
        "num_ids": 33
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for item in listval:\n        if item > maxval:\n            maxval = item\n    return maxval\n",
        "num_ids": 39
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    else:\n        return max(listval)\n",
        "num_ids": 29
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for value in listval:\n        if value > max_val:\n            max_val = value\n    return max_val\n    #raise NotImplementedError\n",
        "num_ids": 48
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 2:\n        return max(listval[0], listval[1])\n    if len(listval) == 3:\n        return max(listval[0], max(listval[1], listval[2]), listval[1])\n    if len(listval) == 4:\n        return max(listval[0], max(listval[1], listval[2], listval[3]), listval[1])\n    if len(listval) == 5:\n        return max(listval[0], max(listval[1], listval[2], listval[3], listval[4]), listval[1])\n    if len(listval) == 6:\n        return max(listval[0], max(listval[1], listval[2], listval[3], listval[4], listval[5]), listval[1])\n    else:\n        return max(listval[0], listval[1])\n        \n",
        "num_ids": 265
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n",
        "num_ids": 46
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number==1:\n        return 1\n    if number==2:\n        return 2\n    if number==3:\n        return 3\n    if number%2==0:\n        return 1+sum_div(number//2)\n    if number%3==0:\n        return 2+sum_div(number//3)\n    if number%5==0:\n        return 3+sum_div(number//5)\n    if number%7==0:\n        return 4+sum_div(number//7)\n    if number%11==0:\n        return 5+sum_div(number//11)\n    if number%13==0:\n        return 6+sum_div(number//13)\n    if number%17==0:\n        return 7+sum_div(number//17)\n    if number%19==0:\n        return 8+sum_div(number//19)\n    if number%23==0:\n        return 9+sum_div(number//23)\n    if number%29==0:\n        return 10+sum_div(number//29)\n    if number%31==0:\n        return 11+sum_div(number//31)\n    if number%37==0:\n        return 12+sum_div(number//37)\n    if number%41==0:\n        return 13+sum_div(number//41)\n    if number%47==0:\n        return 14+sum_div(number//47)\n    if number%49==0:\n        return 15+sum_div(number//49)\n    if number%53==0:\n        return 16+sum_div(number//53)\n    if number%59==0:\n        return 17+sum_div(number//59)\n    if number%63==0:\n        return 18+sum_div(number//63)\n    if number%67==0:\n        return 19+sum_div(number//67)\n    if number%71==0:\n        return 20+sum_div(number//71)\n    if number%79==0:\n        return 21+sum_div(number//79)\n    if number%83==0:\n        return 22+sum_div(number//83)\n    if number%89==0:\n        return 23+sum_div(number//89)\n    if number%91==0:\n        return 24+sum_div(number//91)\n    if number%97==0:\n        return 25+sum_div(number//97)\n    if number%101==0:\n        return 26+sum_div(number//101)\n    if number%107==0:\n        return 27+sum_div(number//107)\n    if number%111==0:\n        return 28+sum_div(number//111)\n    if number%127==0:\n        return 29+sum_div(number//127)\n    if number%131==0:\n        return 30+sum_div(number//131)\n    if number%139==0:\n        return 31+sum_div(number//139)\n    if number%143==0:\n        return 32+sum_div(number//143)\n    if number%149==0:\n        return 33+sum_div(number//149)\n    if number%163==0:\n        return 34+sum_div(number//163)\n    if number%179==0:\n        return 35+sum_div(number//179)\n    if number%191==0:\n        return 36+sum_div(number//191)\n    if number%199==0:\n        return 37+sum_div(number//199)\n    if number%203==0:\n        return 38+sum_div(number//203)\n    if number%211==0:\n        return 39+sum_div(number//211)\n    if number%219==0:\n        return 40+sum_div(number//219)\n    if number%223==0:\n        return 41+sum_div(number//223)\n    if number%229==0:\n        return 42+sum_div(number//229)\n    if number%233==0:\n        return 43+sum_div(number//233)\n    if number%239==0:\n        return 44+sum_div(number//239)\n    if number%243==0:\n        return 45+sum_div(number//243)\n    if number%249==0:\n        return 46+sum_div(number//249)\n    if number%253==0:\n        return 47+sum_div(number//253)\n    if number%259==0:\n        return 48+sum_div(number//259)\n    if number%263==0:\n        return 49+sum_div(number//263)\n    if number%281==0:\n        return 50+sum_div(number//281)\n    if number%297==0:\n        return 51+sum_div(number//297)\n    if number%307==0:\n        return 52+sum_div(number//307)\n    if number%311==0:\n        return 53+sum_div(number//311)\n    if number%329==0:\n        return 54+sum_div(number//329)\n    if number%331==0:\n        return 55+sum_div(number//331)\n    if number%337==0:\n        return 56+sum_div(number//337)\n    if number%341==0:\n        return 57+sum_div(number//341)\n    if number%349==0:\n        return 58+sum_div(number//349)\n    if number%353==0:\n        return 59+sum_div(number//353)\n    if number%359==0:\n        return 60+sum_div(number//359)\n    if number%363==0:\n        return 61+sum_div(number//363)\n    if number%371==0:\n        return 62+sum_div(number//371)\n    if number%381==0:\n        return 63+sum_div(number//381)\n    if number%399==0:\n        return 64+sum_div(number//399)\n    if number%413==0:\n        return 65+sum_div(number//413)\n    if number%421==0:\n        return 66+sum_div(number//421)\n    if number%427==0:\n        return 67+sum_div(number//427)\n    if number%431==0:\n        return 68+sum_div(number//431)\n    if number%439==0:\n        return 69+sum_div(number//439)\n    if number%443==0:\n        return 70+sum_div(number//443)\n    if number%449==0:\n        return 71+sum_div(number//449)\n    if number%453==0:\n        return 72+sum_div(number//453)\n    if number%471==0:\n        return 73+sum_div(number//471)\n    if number%487==0:\n        return 74+sum_div(number//487)\n    if number%501==0:\n        return 75+sum_div(number//501)\n    if number%517==0:\n        return 76+sum_div(number//517)\n    if number%519==0:\n        return 77+sum_div(number//519)\n    if number%533==0:\n        return 78+sum_div(number//533)\n    if number%549==0:\n        return 79+sum_div(number//549)\n    if number%567==0:\n        return 80+sum_div(number//567)\n    if number%591==0:\n        return 81+sum_div(number//591)\n    if number%599==0:\n        return 82+sum_div(number//599)\n    if number%603==0:\n        return 83+sum_div(number//603)\n    if number%609==0:\n        return 84+sum_div(number//609)\n    if number%613==0:\n        return 85+sum_div(number//613)\n    if number%611==0:\n        return 86+sum_div(number//611)\n    if number%619==0:\n        return 87+sum_div(number//619)\n    if number%633==0:\n        return 88+sum_div(number//633)\n    if number%651==0:\n        return 89+sum_div(number//651)\n    if number%659==0:\n        return 90+sum",
        "num_ids": 2015
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i=0\n    result=0\n    while(number%2==0):\n        i=i+2\n        if(number==i):\n            result=result+i\n            print(\"The sum of all divisors is:\",result)\n        else:\n            print(\"The sum of all divisors is:\",result)\n        number=number/2\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Sum all divisors of a number\n    # If the number is a divisor, then add it to the return value\n    \n    if number == 1:\n        return 1\n    elif number == 0:\n        return 0\n    else:\n        return number + sum_div(number-1)\n",
        "num_ids": 74
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [x for x in range(1, number) if number % x == 0]\n    return sum(divisors)\n",
        "num_ids": 35
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Write your code here\n    if number == 0 or number == 1:\n        return number\n",
        "num_ids": 24
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    def divisors(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n        \n    def check_if_number_is_divisible(number):\n        if number == 0:\n            return False\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n    \n    if check_if_number_is_divisible(number):\n        return sum_div(number)\n    else:\n        return 0\n",
        "num_ids": 153
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return number\n    else:\n        return sum_div(number-1) + sum_div(number-2)\n",
        "num_ids": 37
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(number/2) + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # TODO: Write your code here\n",
        "num_ids": 12
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    a = sorted(arr)\n    count = 0\n    for i in range(len(a)):\n        if a[i] > a[i - 1]:\n            count += 1\n        elif a[i] < a[i - 1]:\n            count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = 0\n    for num in arr:\n        if num < 0:\n            invCount += 1\n    return invCount\n",
        "num_ids": 33
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i=0\n    n=len(arr)\n    m=0\n    while m<n:\n        if arr[m] > arr[i]:\n            i+=1\n            m+=1\n        elif arr[m] < arr[i]:\n            m+=1\n        else:\n            i+=1\n    return i\n",
        "num_ids": 80
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    d = {}\n    for i in range(n): \n        if arr[i] in d: \n            d[arr[i]] += 1 \n        else: \n            d[arr[i]] = 1 \n    s = 0\n    for k, v in d.items(): \n        if v % 2 == 1: \n            s += (v - 1) \n    return s\n",
        "num_ids": 104
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    if n < 2:\n        return count\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n    \ndef get_Insertion_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    insert_count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                insert_count += 1\n    return insert_count\n    \ndef get_deletion_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    deletion_count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] < arr[j]:\n                deletion_count += 1\n    return deletion_count\n",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            inv_count = inv_count + 1\n    return inv_count\n",
        "num_ids": 52
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    s = 0\n    for x in range(len(arr)):\n        while(arr[x] < arr[s]):\n            s += 1\n        while(arr[x] > arr[s]):\n            s += 1\n    return s\n",
        "num_ids": 61
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            inv_count += 1\n            if inv_count == 2:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n",
        "num_ids": 79
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def flatten(l):\n        if type(l) is not list:\n            return l\n        if type(l) is list:\n            return [flatten(i) for i in l]\n        else:\n            return [l]\n    return flatten(list1)\n",
        "num_ids": 68
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == list:\n            new_list += flatten_list(i)\n        else:\n            new_list.append(i)\n    return new_list\n    ",
        "num_ids": 61
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return list1\n    new_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            new_list.extend(flatten_list(sublist))\n        else:\n            new_list.append(sublist)\n    return new_list\n    \ndef flatten_dict(d, parent=''):\n    '''\n    Write a function to flatten a given dictionary structure.\n",
        "num_ids": 15
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == None:\n        return []\n    if type(list1) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1]\n",
        "num_ids": 61
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i)!= list:\n            new_list.append(i)\n        else:\n            new_list.extend(flatten_list(i))\n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    import itertools\n    from operator import itemgetter\n",
        "num_ids": 16
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [y for x in list1 for y in flatten_list(x)]\n",
        "num_ids": 22
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # check if is a list\n    if isinstance(list1, list):\n        # flatten list\n        list2 = [item for sublist in list1 for item in sublist]\n        # return list2\n        return list2\n    else:\n        return None\n",
        "num_ids": 65
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # the output of this function is a tuple of tuples (Aggregate,Value)\n    # you can try to understand it:\n    # 1. the tuples are ordered so that the next tuple comes the one with the highest value\n    # 2. the value is going to be the index of the tuple in the list, with the highest value being at that index\n    # 3. you can use the tuple to do a comparison with the next tuple, to make sure that the first tuple is greater than the second one\n    # 4. because we found a great way of doing this we will always keep track of the index of the previous index,\n    # since you don't know which index to use and which to use for the next one\n    # the index used here is the index of the value in the tuple in the list, not the index of the tuple\n    # you can access the data in the tuple by using the indexing syntax: \"tuple[index]\"\n    # so you can write this as:\n    # tuple[index]\n    # tuple[index:index+1]\n    # or you can write this as:\n    # tuple[:index]\n    # tuple[index:]\n    # or you can write this as:\n    # tuple[index:]\n    # if you want to get the index of the last element, you can do this by doing:\n    # tuple[:-1]\n    # (this is the same as the above)\n    \n    # you can also get the tuple itself, but you do not need to print it.\n    # so you can just do:\n    # print(tuple)\n    # (this is the same as the above)\n",
        "num_ids": 374
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    num_of_two = len(stdata)\n    if num_of_two == 0:\n        return 0\n",
        "num_ids": 30
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # check the length of the list\n    if (len(stdata) == 0):\n        return 0\n    # initialize the aggregated value\n    aggregated_value = 0\n    # check each element\n    for i in range(0, len(stdata)):\n        # check the aggregated value of the element\n        if (stdata[i][0] == 'agg'):\n            # update aggregated value\n            aggregated_value = aggregated_value + stdata[i][2]\n    # return the aggregated value\n    return aggregated_value\n",
        "num_ids": 134
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(stdata, key = lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_list = []\n    for row in stdata:\n        agg_row = [0, 0, 0]\n        for col in row:\n            agg_row[0] = agg_row[0] + col[0]\n            agg_row[1] = agg_row[1] + col[1]\n            agg_row[2] = agg_row[2] + col[2]\n        if agg_row[0] > agg_row[1] and agg_row[1] > agg_row[2]:\n            max_aggregate_list.append(row)\n    return max_aggregate_list\n",
        "num_ids": 152
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum_of_values = 0\n    for tup in stdata:\n        sum_of_values += tup[1]\n    return sum_of_values\n",
        "num_ids": 41
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # find the maximum aggregate\n    max_aggregate = 0\n    # iterate over tuples and make a list of tuples\n    for row in stdata:\n        max_aggregate = max(max_aggregate, row[1])\n    return max_aggregate\n",
        "num_ids": 65
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # The max(stdata) is defined as max(map(lambda x:x[1],stdata))\n    # Using the max function is important since the keys need to be sorted\n    max_aggregate = 0\n    for item in stdata:\n        if item[1] > max_aggregate:\n            max_aggregate = item[1]\n    return max_aggregate\n",
        "num_ids": 91
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    lst = []\n    for key,value in stdata.items():\n        lst.append((value[0],value[1]))\n    return lst\n",
        "num_ids": 41
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggreg = defaultdict(list)\n    for row in stdata:\n        for key in row:\n            if key in aggreg:\n                aggreg[key] += [row[key]]\n            else:\n                aggreg[key] = [row[key]]\n    return max(aggreg.values())\n",
        "num_ids": 74
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Declare variables\n    ans = 0\n    m = 10**8\n    \n    # find sum of first n bits\n    for i in range(n):\n        if i < n-1:\n            ans += m\n        if n % 2 == 0:\n            ans += m//2\n            m = m//2\n        else:\n            m = m//2+1\n            \n    # return answer\n    return ans",
        "num_ids": 102
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(n):\n        a = 0\n        x = 1\n        y = 1\n        while x<n:\n            a+=1\n            x+=1\n        while y<n:\n            y+=1\n            y-=1\n        return a\n    \n    def count_binary_seq_2(n):\n        a = 0\n        x = 0\n        y = 0\n        x+=1\n        y+=1\n        \n        while x<n:\n            a+=1\n            x+=1\n        while y<n:\n            y+=1\n            y-=1\n        return a\n    \n    return count(n) - count(n-1)\n",
        "num_ids": 160
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    mask = 2 ** (n-1) \n    bin = bin(mask) \n    \n    p = 0 \n    for i in bin[::-1]: \n        if p == n: \n            return i \n        else: \n            p = p + 1 \n    \ndef main(): \n    n = int(input())\n    print(count_binary_seq(n))\nif __name__=='__main__':\n    main(",
        "num_ids": 110
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n < 0: \n        print(\"Error: n cannot be negative\")\n        return\n    if n == 0: \n        return 1\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n",
        "num_ids": 60
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    for i in range(2**n):\n        count=count+n&1\n        #print(i)\n        if (count&1)==1:\n            count+=1\n    print(count)\n    \n",
        "num_ids": 58
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt = 0\n    for i in range(2**n): \n        if (i)&(i+1)!= 0:\n            cnt += 1\n    return cnt \n",
        "num_ids": 47
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    num_of_binary_seq = 0\n    while n: \n        first = bin(n & 0xffff)\n        first = first[2:]\n        n >>= 2\n        if n:\n            if len(first)!= 2:\n                break\n            else:\n                n -= 1\n            else:\n                num_of_binary_seq += 1\n    return num_of_binary_seq\n",
        "num_ids": 97
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(1, n):\n        if (i%2 == 1):\n            res += (bin(i)[2:].count('1'))\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    numbers = [int(i) for i in range(256)]\n    count_b = 0\n    for i in range(256):\n        for j in range(i, 256):\n            if count_b == 0:\n                if (numbers[i] == numbers[j]):\n                    count_b = 1\n                    continue\n            else:\n                if (numbers[i] == numbers[j]):\n                    count_b = 0\n                    break\n    return count_b\n",
        "num_ids": 115
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    for i in range(n):\n        num = bin(i+1)[2:]\n        num = num[::-1]\n        num = num.count('1')\n        sum = i + num\n        if sum == i:\n            print(i)\n            return\n    print(-1)\n    return\n",
        "num_ids": 75
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.keys():\n        depth += 1\n    return depth\n",
        "num_ids": 25
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + dict_depth(d.values())\n    else:\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def get_depth(d):\n        # TODO: write your function here\n        i = 0\n        while i < len(d):\n            j = 0\n            while j < len(d):\n                if d[i] < d[j]:\n                    j = j + 1\n                else:\n                    i = i + 1\n            i = i + 1\n",
        "num_ids": 86
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # create a depth counter\n    depth = 0\n    # iterate through each value\n    for key, val in d.items():\n        # if it is not a dictionary, continue\n        if not type(val) is dict:\n            continue\n        # else, iterate through each key\n        for k, v in val.items():\n            # if key is a dictionary\n            if type(k) is dict:\n                # increment depth\n                depth += 1\n                # and add the key to the value\n                k.update(v)\n    # if depth is greater than or equal to 2, return the dictionary\n    return depth if depth >= 2 else d\n",
        "num_ids": 151
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    count = 0\n    for key in d:\n        count += d[key]\n    return count\n    \ndef count_words(txt):\n    '''\n    Find the number of words in a string.\n    '''\n    \n    # Split the string into a list\n    words = txt.split()\n    \n    # Iterate over the list\n    for i in range(len(words)):\n        # Count the number of words\n        count = len(words[i].split())\n        # If the word count is greater than the current word count\n        if count > 0:\n            # Increment the count\n            return count + 1\n    # If the word count is not greater than 0, return 0\n    return 0\n",
        "num_ids": 117
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    import sys\n    def depth(d):\n        if(type(d)!= dict):\n            return sys.getsizeof(d)\n        elif(d == {}):\n            return 0\n        else:\n            n = 0\n            for k,v in d.items():\n                if type(v) == dict:\n                    n += depth(v)\n                elif type(v) == int:\n                    n += 1\n            return n\n    return depth(d)\n",
        "num_ids": 113
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    depth = 0\n    for key in d:\n        depth += dict_depth(d[key])\n    return depth + 1\n",
        "num_ids": 43
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError('d must be a dict')\n    if not d:\n        return 0\n    else:\n        return 1 + max([dict_depth(t) for t in d.values()])\n",
        "num_ids": 60
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is not dict:\n        return 0\n    depth = 1\n    for k,v in d.items():\n        depth = max(depth,dict_depth(v))\n    return depth + 1\n",
        "num_ids": 53
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Your code here\n    pass",
        "num_ids": 10
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if(arr[i][index] == rotations[0]) : \n            return i\n        if(arr[i][index] == rotations[1]) :\n            return i\n        if(arr[i][index] == rotations[2]) :\n            return i\n        if(arr[i][index] == rotations[3]) :\n            return i\n    \ndef rotate(arr,index) :\n    '''\n    Write a python function to rotate a given array of elements.\n    '''\n    for i in range(len(arr)) :\n        rotate_array[i][index] = arr[i][index]\n",
        "num_ids": 32
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for rot in range(0,rotations) :\n        for j in range(0,len(arr)-1) :\n            if arr[j] == arr[j+1] :\n                index = index -1\n                break\n    if index >= len(arr)-2 :\n        print(\"The value is not present at the index\")\n        return -1\n    elif index >= len(arr)-1 :\n        print(\"The value is not present at the index\")\n        return -1\n    else :\n        return arr[index]\n    \ndef find_Range(arr,rotations,index) :  \n    '''\n    Write a python function to find all values in a given list after number of rotations.\n    '''\n    for rot in range(0,rotations) :\n        for i in range(index,index+3) :\n            arr[i] = arr[i+1]\n    return arr\n",
        "num_ids": 46
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] == -1 :\n        return arr[index]\n    elif ranges[index] == 0 :\n        return arr[index + ranges[index]]\n    elif ranges[index] == ranges[index - 1] :\n        return arr[index + ranges[index]]\n    elif ranges[index] == ranges[index + 1] :\n        return arr[index + ranges[index]]\n    else :\n        return arr[index + ranges[index]]\n        \ndef rotations(arr,rotations):\n    '''\n    Write a python function to rotate a given array.\n    '''\n    return arr[rotations : rotations + len(arr)]\n",
        "num_ids": 17
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(len(ranges) < 2) :\n        return arr[index]\n    if (rotations == 0):\n        return arr[index]\n",
        "num_ids": 38
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(arr)-1 :\n        return arr[index]\n    if index >= len(arr) :\n        return None\n    for i in range(rotations) :\n        new_arr = list(arr)\n        new_arr[index], new_arr[index+1] = new_arr[index+1], new_arr[index]\n        if find_Element(new_arr,ranges,rotations,index+1) :\n            return new_arr[index+1]\n    return None\n",
        "num_ids": 123
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Write your code here.\n    from itertools import product\n    l = []\n    for i in range(ranges[0],ranges[1]) :\n        l.append(list(product(range(1,rangements[0]+1), repeat=rotations[i])))\n    for i in range(rotations[0]+1,rotations[1]+1) :\n        l.append(list(product(range(1,rangements[1]+1), repeat=i)))\n",
        "num_ids": 117
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations\n    for i in range(rotations):\n        x = arr[index + i * len(ranges)]\n        if x in ranges :\n            index = index + i * len(ranges)\n        else :\n            return arr[index]\n    return arr[index]\n    \ndef find_Smallest(arr,rotations):\n    '''\n    Write a python function to find smallest element in a given array.\n    '''\n    smallest = arr[0]\n    for i in range(len(arr)) :\n        if arr[i] < smallest :\n            smallest = arr[i]\n    return smallest\n",
        "num_ids": 46
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # range test\n    if rotations < 0 :\n        rotations = -rotations\n        ranges = -ranges\n",
        "num_ids": 31
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index in range(len(arr)) :\n        x = arr[index]\n        n = ranges[0]\n        for i in range(n) :\n            x = rotations[0]\n            x = x[0]\n            arr[index] = x\n            index = index + 1\n        return arr\n",
        "num_ids": 76
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #print(words)\n    p_list = []\n    for word in words:\n        if word[0]=='p':\n            p_list.append(word)\n    #print(p_list)\n    return p_list\n",
        "num_ids": 59
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n",
        "num_ids": 24
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(0,len(words)):\n        if words[i][0]=='p':\n            return words[i]\n    return 'not found'\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if type(words)!= list:\n        raise Exception(\"Invalid input\")\n    return words[0].lower(),words[1].lower()\n",
        "num_ids": 35
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    length = len(words)\n    for word in words:\n        if word.startswith(('p', 'P')):\n            return word[1:], word[:2]\n    return None, None\n",
        "num_ids": 52
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_p = []\n    for i in words:\n        if i[0] == 'p':\n            words_p.append(i)\n    return words_p\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first_words = []\n    second_words = []\n    for word in words:\n        if word[0] == 'p':\n            first_words.append(word)\n    for word in words:\n        if word[0] == 't':\n            second_words.append(word)\n    return first_words, second_words\ndef end_withp(first_words):\n    '''\n    Write a function that takes a list of words as an argument, and returns the last word from the list.\n    '''\n    if len(first_words) == 0:\n        return first_words\n    if len(first_words) == 1:\n        return first_words[0]\n    return first_words[-1]\ndef rpn(n):\n    '''\n    Given a number n, return the longest word in the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the first 10 words\n    for i in range(1, 11):\n        if n >= i:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef lpn(n):\n    '''\n    Given a number n, return the last word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the last 10 words\n    for i in range(10, n):\n        if i <= 10:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef rpn_p(n):\n    '''\n    Given a number n, return the longest word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the first 10 words\n    for i in range(10, n):\n        if i <= 10:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef lpn_p(n):\n    '''\n    Given a number n, return the last word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the last 10 words\n    for i in range(10, n):\n        if i <= 10:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef rpn_t(n):\n    '''\n    Given a number n, return the longest word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the first 10 words\n    for i in range(10, n):\n        if i <= 10:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef lpn_t(n):\n    '''\n    Given a number n, return the last word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the last 10 words\n    for i in range(10, n):\n        if i <= 10:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef lpn_p_t(n):\n    '''\n    Given a number n, return the longest word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the first 10 words\n    for i in range(10, n):\n        if i <= 10:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef lpn_p_t_t(n):\n    '''\n    Given a number n, return the longest word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    if n < 0:\n        return None\n    # if n is between 1-10, return the first 10 words\n    for i in range(10, n):\n        if i <= 10:\n            rpn_list.append(end_withp(start_withp(rpn_list)))\n    return rpn_list\ndef rpn_n(n):\n    '''\n    Given a number n, return the longest word from the rpn sequence of words,\n    if n is greater than 10, return the longest word in the rpn sequence of words,\n    if n is less than 0, return none.\n    '''\n    # Initialize a empty list\n    rpn_list = []\n    # if n is greater than 10, return the longest word\n    if n > 10:\n        return end_withp(start_withp(rpn_list))\n    # if n is less than 0, return none\n    i",
        "num_ids": 71
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'[a-z]'\n    for word in words:\n        if word[0].lower() == 'p':\n            return word[1:]\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # return two words starting with a letter 'p'\n    if words is None:\n        return []\n    for word in words:\n        if word[0].lower() == 'p':\n            return word\n",
        "num_ids": 50
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # pattern = r'^(\\w)\\1'\n    pattern = r'^(\\w)\\1'\n    res = []\n    for word in words:\n        if re.match(pattern, word):\n            res.append(word)\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n    max_sum = 0\n    for i in range(index + 1, n):\n        current_sum = a[i] + max_sum\n        if current_sum > k:\n            break\n        else:\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "num_ids": 88
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base Case\n    if index == n and k == 0:\n        return sum(a[i] for i in range(n))\n    # Recursion\n    if index == n:\n        return sum(a[i] for i in range(n, len(a), 1)) + k\n    # Traversing\n    if index < n and a[index] > a[index+1]:\n        max_subseq = max_sum_increasing_subseq(a, n, index+1, k)\n        return max(max_subseq, max_sum_increasing_subseq(a, n, index, k-1) + k)\n    else:\n        return max_sum_increasing_subseq(a, n, index, k)\n",
        "num_ids": 176
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if index == n:\n        return a[n - 1]\n    if k == 0:\n        return a[index - 1]\n    if index > n:\n        return a[-1]\n    if k >= n:\n        return max(a[index - 1] + max_sum_increasing_subseq(a, n - 1, index, k - 1), a[index - 1] + max_sum_increasing_subseq(a, n - 1, index, k))\n",
        "num_ids": 126
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    current_max = 0\n    subseq = []\n    i = 0\n    j = index\n    while i <= j:\n        if a[i] >= a[i - 1] and current_max < k:\n            current_max = k\n        elif a[i] >= a[i - 1]:\n            current_max = max(k, a[j - 1] - a[i - 1])\n        if current_max > k:\n            j = j - 1\n        else:\n            i += 1\n    return current_max\n",
        "num_ids": 129
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    kth = n - 1 - index\n    if a[n - 1] >= a[index]:\n        return a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq2(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq2(a, n, index + 1, k), max_sum_increasing_subseq2(a, n, index + 1, k + 1)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq3(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq3(a, n, index + 1, k), max_sum_increasing_subseq3(a, n, index + 1, k + 1), max_sum_increasing_subseq3(a, n, index + 1, k + 2)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq4(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq4(a, n, index + 1, k), max_sum_increasing_subseq4(a, n, index + 1, k + 1), max_sum_increasing_subseq4(a, n, index + 1, k + 2), max_sum_increasing_subseq4(a, n, index + 1, k + 3)) + a[k]\n    else:\n        return a[k]\n    \ndef max_sum_increasing_subseq5(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq5(a, n, index + 1, k), max_sum_increasing_subseq5(a, n, index + 1, k + 1), max_sum_increasing_subseq5(a, n, index + 1, k + 2), max_sum_increasing_subseq5(a, n, index + 1, k + 3), max_sum_increasing_subseq5(a, n, index + 1, k + 4), max_sum_increasing_subseq5(a, n, index + 1, k + 5)) + a[k]\n    else:\n        return a[k]\n        \ndef max_sum_increasing_subseq6(a, n, index, k):\n    if index == n:\n        return a[k]\n    if k > index:\n        return max(max_sum_increasing_subseq6(a, n, index + 1, k), max_sum_increasing_subseq6(a, n, index + 1, k + 1), max_sum_increasing_subseq6(a, n, index + 1, k + 2), max_sum_increasing_subseq6(a, n, index + 1, k + 3), max_sum_increasing_subseq6(a, n, index + 1, k + 4), max_sum_increasing_subseq6(a, n, index + 1, k + 5), max_sum_increasing_subseq6(a, n, index + 1, k + 6)) + a[k]\n    else:\n        return a[k]\n",
        "num_ids": 963
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # edge case\n    if (n < index): return a[0]\n    if (n == index): return a[index]\n    \n    if (n == index + 1): return max_sum_increasing_subseq(a, n - 1, index, k)\n    \n    # array\n    local_sum = 0\n    i = 0\n    for i in range(index, n):\n        if (k > i):\n            local_sum += a[i]\n        else:\n            local_sum = max(local_sum, max_sum_increasing_subseq(a, n - 1, i + 1, k))\n    return local_sum + a[index]\n",
        "num_ids": 160
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if the prefix is already present in the array then return the sum of the prefix\n    if index == n:\n        return sum(a[index])\n",
        "num_ids": 37
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return a[k]\n    if index == n:\n        return 0\n    if k < n:\n        ans = max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[k] + max_sum_increasing_subseq(a, n, index + 1, k+1))\n        return ans\n    return 0\n",
        "num_ids": 98
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base Cases:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    \n    # Base Cases:\n    if index == n:\n        return max(a[index], k + max_sum_increasing_subseq(a, n-1, index, k))\n    \n    # Base Cases:\n    elif index == 0:\n        return max(a[index], k + max_sum_increasing_subseq(a, n-1, index, k))\n    \n    # Base Cases:\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n-1, index-1, k), a[index] + k)\n    \n    # Base Cases:\n    return a[index] + k\n",
        "num_ids": 192
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -math.inf\n    current_sum = 0\n    max_indices = []\n    # if n < 0 or index < 0 or a[index] < a[i]:\n    #     return current_sum\n",
        "num_ids": 56
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(m[tuplex[i]])\n    return c\ndef horiz_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a horizontal tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 1:\n            c.append(tuplex[i])\n        else:\n            c.append(m[tuplex[i]])\n    return c\ndef vert_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a vertical tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(n[tuplex[i]])\n    return c\ndef trans_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(m[tuplex[i]])\n    return c\ndef concat_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to concatenate two tuples.\n    '''\n    c = []\n    for i in range(len(tuplex1)):\n        c.append(tuplex1[i]+tuplex2[i])\n    return c\ndef back_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a backward tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(n[tuplex[i]])\n    return c\ndef back_tuplex_m(m,n):\n    '''\n    Write a function to get a backward tuple.\n    '''\n    c = []\n    for i in range(len(m)):\n        if i%2 == 0:\n            c.append(m[i])\n        else:\n            c.append(n[m[i]])\n    return c\ndef back_tuplex_n(n,m):\n    '''\n    Write a function to get a backward tuple.\n    '''\n    c = []\n    for i in range(len(n)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[n[i]])\n    return c\ndef edge_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an edge tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(m[tuplex[i]])\n    return c\ndef triangle_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a triangle tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(m[tuplex[i]])\n    return c\ndef triangle_tuplex_m(m,n):\n    '''\n    Write a function to get a triangle tuple.\n    '''\n    c = []\n    for i in range(len(m)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[i])\n    return c\ndef triangle_tuplex_n(n,m):\n    '''\n    Write a function to get a triangle tuple.\n    '''\n    c = []\n    for i in range(len(n)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[n[i]])\n    return c\ndef permut_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an permutation tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(n[tuplex[i]])\n    return c\ndef permut_tuplex_m(m,n):\n    '''\n    Write a function to get an permutation tuple.\n    '''\n    c = []\n    for i in range(len(m)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[i])\n    return c\ndef permut_tuplex_n(n,m):\n    '''\n    Write a function to get an permutation tuple.\n    '''\n    c = []\n    for i in range(len(n)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[n[i]])\n    return c\ndef adj_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an adjacency tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(m[tuplex[i]])\n    return c\ndef adj_tuplex_m(m,n):\n    '''\n    Write a function to get an adjacency tuple.\n    '''\n    c = []\n    for i in range(len(m)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[n[i]])\n    return c\ndef adj_tuplex_n(n,m):\n    '''\n    Write a function to get an adjacency tuple.\n    '''\n    c = []\n    for i in range(len(n)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[n[i]])\n    return c\ndef adj_tuplex_trans(tuplex,m,n):\n    '''\n    Write a function to get an adjacency tuple.\n    '''\n    c = []\n    for i in range(len(tuplex)):\n        if i%2 == 0:\n            c.append(tuplex[i])\n        else:\n            c.append(n[tuplex[i]])\n    return c\ndef adj_tuplex_trans_m(m,n):\n    '''\n    Write a function to get an adjacency tuple.\n    '''\n    c = []\n    for i in range(len(m)):\n        if i%2 == 0:\n            c.append(m[i])\n        else:\n            c.append(n[m[i]])\n    return c\ndef adj_tuplex_trans_n(n,m):\n    '''\n    Write a function to get an adjacency tuple.\n    '''\n    c = []\n    for i in range(len(n)):\n        if i%2 == 0:\n            c.append(n[i])\n        else:\n            c.append(m[n[i]])\n    return c\ndef adj_tuplex_trans_back(tuplex,m,n):\n    '''\n    Write a function to get an adjacency tuple.\n    '''\n    c = []\n    for i in range(len(tuplex",
        "num_ids": 18
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    output=[]\n    for i in tuplex:\n        output.append(i[n])\n    return output\n",
        "num_ids": 30
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        return '\\n'\n    elif m==n:\n        return '\\n'.join([tuplex[0],tuplex[1]])\n    else:\n        return '\\n'.join(['\\n'.join([tuplex[i+1]+colon_tuplex(tuplex,i+1,m),tuplex[i]]) for i in range(m-n)])\n",
        "num_ids": 107
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i][0]=='F':\n            if i==0:\n                tuplex[i][0]=n\n            elif i==1:\n                tuplex[i][0]=m\n            elif i==2:\n                tuplex[i][0]=m+n\n        elif tuplex[i][0]=='L':\n            if i==0:\n                tuplex[i][0]=m\n            elif i==1:\n                tuplex[i][0]=n+m\n            elif i==2:\n                tuplex[i][0]=m+n+n\n    \n    return tuplex\n",
        "num_ids": 175
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    i,j=0,0\n    while i<len(tuplex) and j<len(tuplex):\n        if tuplex[i]<tuplex[j]:\n            tuplex[i],tuplex[j]=tuplex[j],tuplex[i]\n            i+=1\n        j+=1\n    return tuplex\ndef transpose(tuplex):\n    '''\n    Write a function to transpose a tuple.\n    '''\n    tuplex=colon_tuplex(tuplex,len(tuplex),len(tuplex[0]))\n    for i in range(len(tuplex)):\n        tuplex[i]=tuplex[i][::-1]\n    return tuplex\ndef zeros(n):\n    '''\n    Write a function to fill the n-by-n zero-matrix.\n    '''\n    mat=[]\n    for i in range(n):\n        mat.append(colon_tuplex([0]*n,n,n))\n    return mat\ndef matrix_block_totensor(m,n):\n    '''\n    Write a function to get a matrix of all blocks.\n    '''\n    mat=zeros(m*n)\n    k=0\n    for i in range(n):\n        for j in range(m):\n            mat[k]=mat[k]+mat[k+1]\n            k+=2\n        k=0\n    return mat\ndef matrix_block_totensor2(m,n):\n    '''\n    Write a function to get a matrix of all blocks.\n    '''\n    mat=zeros(m*n)\n    k=0\n    for i in range(m):\n        for j in range(n):\n            mat[k]=mat[k]+mat[k+1]\n            k+=2\n        k=0\n    return mat\ndef mat_transpose(mat):\n    '''\n    Write a function to get the transpose of a matrix.\n    '''\n    mat=colon_tuplex(mat,len(mat),len(mat[0]))\n    for i in range(len(mat)):\n        mat[i]=mat[i][::-1]\n    return mat\ndef mat_print(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows2(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows3(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    for i in range(len(mat)):\n        mat[i]=mat[i][::-1]\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows4(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    print(\"\\n\")\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows5(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    print(\"\\n\")\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows6(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    print(\"\\n\")\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows7(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    print(\"\\n\")\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows8(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    print(\"\\n\")\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows9(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    print(\"\\n\")\n    for i in range(len(mat)):\n        print(mat[i],end=\" \")\n    print()\ndef mat_print_rows10(mat):\n    '''\n    Write a function to print a matrix.\n    '''\n    for i in range(len(mat)):\n        mat[i]=colon_tuplex(mat[i],len(mat[i]),len(mat[i][0]))\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n        mat[i]=mat[i][::-1]\n    print(\"\\n\")\n    for i in range(len(mat)):\n        print",
        "num_ids": 109
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[0],tuplex[1],tuplex[2],tuplex[3],tuplex[4],tuplex[5])\n",
        "num_ids": 42
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy[m][n] = m+n\n    return tuplex_copy\ndef find_colon(colon_tuplex,m,n,w):\n    '''\n    Return the position of the colon in the tuplex.\n    '''\n    for i in range(m-1,-1,-1):\n        if tuplex[i][n] == ':':\n            for j in range(i+1,m):\n                if colon_tuplex[j][n] == ':':\n                    for k in range(j-1,-1,-1):\n                        if colon_tuplex[k][n] == ':':\n                            colon = k\n            break\n    for i in range(w-1,-1,-1):\n        if tuplex[n][i] == ':':\n            for j in range(n-1,-1,-1):\n                if colon_tuplex[j][i] == ':':\n                    for k in range(j-1,-1,-1):\n                        if colon_tuplex[k][i] == ':':\n                            colon = k\n            break\n    return colon\ndef remove_tuple(tuplex,colon_tuplex,m,n):\n    '''\n    Remove the colon from the tuplex.\n    '''\n    for i in range(m-1,-1,-1):\n        if tuplex[i][n] == colon_tuplex[i][n]:\n            for j in range(i+1,m):\n                if tuplex[j][n] == colon_tuplex[j][n]:\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][n] == colon_tuplex[k][n]:\n                            tuplex[k] = tuplex[k][:n+1] + tuplex[k][n+1:]\n                            break\n    for i in range(n-1,-1,-1):\n        if tuplex[m][i] == colon_tuplex[m][i]:\n            for j in range(m-1,-1,-1):\n                if tuplex[j][i] == colon_tuplex[j][i]:\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][i] == colon_tuplex[k][i]:\n                            tuplex[k] = tuplex[k][:i+1] + tuplex[k][i+1:]\n                            break\n    return tuplex\ndef choose_tuple(tuplex,m,n):\n    '''\n    Choose the set of tuplex and try to remove the colon.\n    '''\n    if m!= n:\n        return None\n    if not tuplex[m][n] == colon_tuplex[m][n]:\n        return None\n    else:\n        m_copy = deepcopy(tuplex)\n        n_copy = deepcopy(tuplex)\n        return m_copy,n_copy,m,n\ndef change_tuple(tuplex,m,n,w):\n    '''\n    Change the tuplex.\n    '''\n    for i in range(m-1,-1,-1):\n        if tuplex[i][n] == ':':\n            for j in range(i+1,m):\n                if tuplex[j][n] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][n] == ':':\n                            tuplex[k] = tuplex[k][:n+1] + colon_tuplex[k][n+1:]\n                            break\n    for i in range(n-1,-1,-1):\n        if tuplex[m][i] == ':':\n            for j in range(m-1,-1,-1):\n                if tuplex[j][i] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][i] == ':':\n                            tuplex[k] = tuplex[k][:i+1] + colon_tuplex[k][i+1:]\n                            break\n    return tuplex\ndef fix_tuplex(tuplex,m,n):\n    '''\n    Fix the tuplex.\n    '''\n    for i in range(m-1,-1,-1):\n        if tuplex[i][n] == ':':\n            for j in range(i+1,m):\n                if tuplex[j][n] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][n] == ':':\n                            tuplex[k] = colon_tuplex[k][n] + tuplex[k][:n+1]\n                            break\n    for i in range(n-1,-1,-1):\n        if tuplex[m][i] == ':':\n            for j in range(m-1,-1,-1):\n                if tuplex[j][i] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][i] == ':':\n                            tuplex[k] = colon_tuplex[k][n] + tuplex[k][:i+1]\n                            break\n    return tuplex\ndef reassign_tuplex(tuplex,m,n):\n    '''\n    Reassign the tuplex.\n    '''\n    for i in range(m-1,-1,-1):\n        if tuplex[i][n] == ':':\n            for j in range(i+1,m):\n                if tuplex[j][n] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][n] == ':':\n                            tuplex[k] = tuplex[k][:n+1] + colon_tuplex[k][n+1:]\n                            break\n    for i in range(n-1,-1,-1):\n        if tuplex[m][i] == ':':\n            for j in range(m-1,-1,-1):\n                if tuplex[j][i] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][i] == ':':\n                            tuplex[k] = colon_tuplex[k][n] + tuplex[k][:i+1]\n                            break\n    return tuplex\ndef rotate_tuplex(tuplex,m,n):\n    '''\n    Rotate the tuplex.\n    '''\n    for i in range(m-1,-1,-1):\n        if tuplex[i][n] == ':':\n            for j in range(i+1,m):\n                if tuplex[j][n] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][n] == ':':\n                            tuplex[k] = colon_tuplex[k][n] + tuplex[k][:n+1]\n                            break\n    for i in range(n-1,-1,-1):\n        if tuplex[m][i] == ':':\n            for j in range(m-1,-1,-1):\n                if tuplex[j][i] == ':':\n                    for k in range(j-1,-1,-1):\n                        if tuplex[k][i] == ':':\n                            tuplex[k] = colon_tuplex[k][n] + tuplex[k][:i+1]\n                            break\n    return tuplex\ndef get_tuplex(tuplex,m,n,w):\n    '''\n    Generate a tuplex.\n    '''\n    tuplex[m][n] = colon_tuplex[m][n]\n    tuplex[m][n+1] = colon_tuplex[m][n+1]\n    tuplex[m][n+2] = colon_tuplex[m][n+2]\n    tuplex[m]",
        "num_ids": 80
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    if not m:\n        if not n:\n            return (0,0)\n        else:\n            return (0,n)\n    if not n:\n        if not m:\n            return (m,0)\n        else:\n            return (m,n)\n    if not m:\n        if not n:\n            return (0,n)\n        else:\n            return (m,n)\n    if n:\n        if m:\n            return (m,n)\n        else:\n            return (m,0)\n    else:\n        if m:\n            return (m,m)\n        else:\n            return (0,m)\ndef val_to_tuple(v):\n    '''\n    Convert a value to a tuple.\n    '''\n    if type(v) == int:\n        return (v,0)\n    elif type(v) == str:\n        return (0,len(v))\n    elif type(v) == float:\n        return (v,0)\n    elif type(v) == bool:\n        return (0,0)\n    elif type(v) == tuple:\n        return v\n    else:\n        raise TypeError(f\"Invalid type for {type(v)}\")\ndef sort_list(tuple):\n    '''\n    Sort a list of tuples.\n    '''\n    return sorted(tuple)\ndef convert_tuple_to_list(tuple):\n    '''\n    Convert a tuple to a list.\n    '''\n    if len(tuple) == 1:\n        return tuple\n    elif len(tuple) == 2:\n        return tuple[:1] + tuple[1:]\n    elif len(tuple) == 3:\n        return tuple[:2] + tuple[2:]\n    else:\n        raise TypeError(f\"Invalid number of elements for {len(tuple)}\")\ndef find_min_length(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple.\n    '''\n    return int(math.log10(len(tuplex[0][0]) + 1)) + 1\ndef find_min_width(tuplex,m,n):\n    '''\n    Calculate the minimum width of a tuple.\n    '''\n    return int(math.log10(len(tuplex[0][1]) + 1)) + 1\ndef find_max_length(tuplex,m,n):\n    '''\n    Calculate the maximum length of a tuple.\n    '''\n    return int(math.log10(len(tuplex[0][0]) + 1)) + 1\ndef find_max_width(tuplex,m,n):\n    '''\n    Calculate the maximum width of a tuple.\n    '''\n    return int(math.log10(len(tuplex[0][1]) + 1)) + 1\ndef find_min_len_seq(tuplex,m,n):\n    '''\n    Calculate the minimum length of a sequence.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_min_len_str(tuplex,m,n):\n    '''\n    Calculate the minimum length of a string.\n    '''\n    return int(math.log10(len(tuplex[0][1])) + 1) + 1\ndef find_max_len_seq(tuplex,m,n):\n    '''\n    Calculate the maximum length of a sequence.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_max_len_str(tuplex,m,n):\n    '''\n    Calculate the maximum length of a string.\n    '''\n    return int(math.log10(len(tuplex[0][1])) + 1) + 1\ndef find_min_len_tuple(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_min_len_list(tuplex,m,n):\n    '''\n    Calculate the minimum length of a list.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_max_len_tuple(tuplex,m,n):\n    '''\n    Calculate the maximum length of a tuple.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_max_len_list(tuplex,m,n):\n    '''\n    Calculate the maximum length of a list.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_min_len_tuple_list(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple list.\n    '''\n    return int(math.log10(len(tuplex[0][0]) + 1)) + 1\ndef find_max_len_tuple_list(tuplex,m,n):\n    '''\n    Calculate the maximum length of a tuple list.\n    '''\n    return int(math.log10(len(tuplex[0][0]) + 1)) + 1\ndef find_min_len_tuple_str(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple string.\n    '''\n    return int(math.log10(len(tuplex[0][1])) + 1) + 1\ndef find_max_len_tuple_str(tuplex,m,n):\n    '''\n    Calculate the maximum length of a tuple string.\n    '''\n    return int(math.log10(len(tuplex[0][1])) + 1) + 1\ndef find_min_len_tuple_list_str(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple list string.\n    '''\n    return int(math.log10(len(tuplex[0][1]) + 1)) + 1\ndef find_max_len_tuple_list_str(tuplex,m,n):\n    '''\n    Calculate the maximum length of a tuple list string.\n    '''\n    return int(math.log10(len(tuplex[0][1]) + 1)) + 1\ndef find_min_len_tuple_list_seq(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple list sequence.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_max_len_tuple_list_seq(tuplex,m,n):\n    '''\n    Calculate the maximum length of a tuple list sequence.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_min_len_tuple_list_str_seq(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple list sequence.\n    '''\n    return int(math.log10(len(tuplex[0][1]) + 1)) + 1\ndef find_max_len_tuple_list_str_seq(tuplex,m,n):\n    '''\n    Calculate the maximum length of a tuple list sequence.\n    '''\n    return int(math.log10(len(tuplex[0][1]) + 1)) + 1\ndef find_min_len_tuple_tuple(tuplex,m,n):\n    '''\n    Calculate the minimum length of a tuple tuple.\n    '''\n    return int(math.log10(len(tuplex[0][0])) + 1) + 1\ndef find_max_len_tuple_tuple(tuplex,m,n):\n    '''\n    Ca",
        "num_ids": 4
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex)\n    return (tuplex[0:m],tuplex[m:n])\n",
        "num_ids": 31
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = (tuplex[0:m] + (m-tuplex[m-1])*tuplex[m:n] + tuplex[n:])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        if nums1[i] * nums2[i] > N:\n            break\n        else:\n            res.append(nums1[i] * nums2[i])\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort both lists\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # create an empty dictionary\n    d = {}\n",
        "num_ids": 46
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    p1 = 1\n    p2 = 1\n    res = 0\n    for i in nums1:\n        p1 = p1 * i\n    for i in nums2:\n        p2 = p2 * i\n    for i in range(N):\n        p1 = (p1 // nums2[i])\n        p2 = (p2 // nums1[i])\n        res = max(res, p1 * p2)\n    return res\n",
        "num_ids": 112
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #nums1 = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]\n    #nums2 = [1,3,6,9]\n    \n    #Create a list of products from all the lists\n    listOfProducts = [[] for _ in range(len(nums1))]\n    for i in range(len(nums1)):\n        for j in range(len(nums1[i])):\n            for k in range(len(nums1[i][j])):\n                listOfProducts[i].append(nums1[i][j][k])\n    \n    #Create a list of products from all the lists\n    listOfProducts = [[] for _ in range(len(nums2))]\n    for i in range(len(nums2)):\n        for j in range(len(nums2[i])):\n            for k in range(len(nums2[i][j])):\n                listOfProducts[i].append(nums2[i][j][k])\n    \n    #Create a list of products from all the lists\n    listOfProducts = [[] for _ in range(N)]\n    for i in range(len(nums1)):\n        for j in range(len(nums1[i])):\n            for k in range(len(nums1[i][j])):\n                if len(listOfProducts[k]) == 0:\n                    listOfProducts[k].append(nums1[i][j][k])\n                else:\n                    for m in range(len(listOfProducts[k])):\n                        if nums1[i][j][k] > listOfProducts[k][m]:\n                            listOfProducts[k].append(nums1[i][j][k])\n                        else:\n                            break\n    \n    #Create a list of products from all the lists\n    listOfProducts = [[] for _ in range(N)]\n    for i in range(len(nums2)):\n        for j in range(len(nums2[i])):\n            for k in range(len(nums2[i][j])):\n                if len(listOfProducts[k]) == 0:\n                    listOfProducts[k].append(nums2[i][j][k])\n                else:\n                    for m in range(len(listOfProducts[k])):\n                        if nums2[i][j][k] > listOfProducts[k][m]:\n                            listOfProducts[k].append(nums2[i][j][k])\n                        else:\n                            break\n",
        "num_ids": 622
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    You are given two lists of length N. The function should return the maximum product of their elements.\n    '''\n    '''\n    Input: nums1 = [1,2,3,4,5], nums2 = [1,3,2,4], N = 3\n    Output: 25\n    Explanation: The maximum product is 6 since nums1 = [1,2,3], nums2 = [1,2,4], and N = 3.\n    '''\n    # Create a memo to save the result of max(num1 * num2) \n    memo = {}\n",
        "num_ids": 28
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    for num1, num2 in zip(nums1, nums2):\n        n = num1 * num2\n        for _ in range(N):\n            n = n * num1 * num2\n        if num1 > num2:\n            n = num1 * num2 * num2\n        else:\n            n = num2 * num1 * num2\n        nums1.append(n)\n    return max(nums1)\n",
        "num_ids": 106
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # base case\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return [nums1]\n    # if not a number, return empty array\n    if nums1[0] < nums2[0]:\n        return [nums1] + large_product(nums1[1:], nums2, N-1)\n    return [nums2] + large_product(nums1, nums2[1:], N-1)\n",
        "num_ids": 126
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    if not nums1 or not nums2 or not N:\n        return []\n    \n    smallest_val = float(\"inf\")\n    product_set = set()\n    \n    for x in nums1:\n        for y in nums2:\n            if x*y < smallest_val:\n                smallest_val = x*y\n                product_set = {x,y}\n    \n    print(product_set)\n    return product_set\n",
        "num_ids": 113
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    for i in range(1, N+1):\n        result.append(list(map(lambda num1, num2: num1 * num2, nums1, nums2)))\n    return sorted(result, key=lambda x: x[N])[-1]\n",
        "num_ids": 71
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = a + b\n    if a == 0:\n        return 0\n    if a > 0:\n        return a\n    else:\n        return -a\n    # could also return a random int:\n    # if a > 0:\n    #     return a\n    # else:\n    #     return -a\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a = a + b\n    if a == 0:\n        return 0\n    if a < 0:\n        return a\n    else:\n        return a\n    # could also return a random int:\n    # if a < 0:\n    #     return a\n    # else:\n    #     return a\ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    a = a + b\n    if a == 0:\n        return 0\n    if a < 0:\n        return a\n    else:\n        return a/2\n    # could also return a random int:\n    # if a < 0:\n    #     return a\n    # else:\n    #     return a/2\ndef removeDuplicates(arr):\n    '''\n    Write a python function to find the duplicate numbers in an array.\n    '''\n    res = []\n    for i in range(len(arr)):\n        if arr[i] not in res:\n            res.append(arr[i])\n    return res\ndef replaceDuplicates(arr):\n    '''\n    Write a python function to replace duplicates in an array.\n    '''\n    res = []\n    for i in range(len(arr)):\n        if arr[i] not in res:\n            res.append(arr[i])\n    return res\ndef minMax(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    min_value = max_value = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < max_value:\n            max_value = arr[i]\n        if arr[i] > min_value:\n            min_value = arr[i]\n    return max_value,min_value\ndef minMaxAvg(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    avg = 0\n    min_value = max_value = arr[0]\n    for i in range(1,len(arr)):\n        avg = avg + arr[i]\n        if arr[i] < min_value:\n            min_value = arr[i]\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return avg/len(arr),max_value,min_value\ndef minMaxSum(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    sum = 0\n    min_value = max_value = arr[0]\n    for i in range(1,len(arr)):\n        sum = sum + arr[i]\n        if arr[i] < min_value:\n            min_value = arr[i]\n        if arr[i] > max_value:\n            max_value = arr[i]\n    return sum/len(arr),max_value,min_value\ndef minMaxAvgSum(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    sum = 0\n    min_value = max_value = arr[0]\n    for i in range(1,len(arr)):\n        sum = sum + arr[i]\n        if arr[i] < min_value:\n            min_value = arr[i]\n        if arr[i] > max_value:\n            max_value = arr[i]\n    avg = sum/len(arr)\n    return avg,max_value,min_value\ndef maxMinAvg(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    avg = 0\n    min_value = arr[0]\n    for i in range(1,len(arr)):\n        avg = avg + arr[i]\n        if arr[i] > min_value:\n            min_value = arr[i]\n        if arr[i] < avg:\n            avg = arr[i]\n    return avg/len(arr),min_value\ndef maxMinAvgSum(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    sum = 0\n    min_value = arr[0]\n    for i in range(1,len(arr)):\n        sum = sum + arr[i]\n        if arr[i] > min_value:\n            min_value = arr[i]\n        if arr[i] < sum:\n            sum = arr[i]\n    avg = sum/len(arr)\n    return avg,min_value\ndef median(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    median = arr[len(arr)//2]\n    for i in range(len(arr)):\n        if arr[i] < median:\n            median = arr[i]\n    return median\ndef minMaxAvgSumMedian(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    sum = 0\n    min_value = arr[0]\n    avg = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n        avg = avg + arr[i]\n    if sum/len(arr) < avg/len(arr):\n        avg = sum/len(arr)\n    if sum/len(arr) > avg/len(arr):\n        avg = sum/len(arr)\n    return avg,min_value\ndef minMaxAvgSumMedian(arr):\n    '''\n    Write a python function to find the minimum and maximum of an array.\n    '''\n    sum = 0\n    min_value = arr[0]\n    avg = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n        avg = avg + arr[i]\n    if sum/len(arr) < avg/len(arr):\n        avg = sum/len(arr)\n    if sum/len(arr) > avg/len(arr):\n        avg = sum/len(arr)\n    if avg/len(arr) > avg:\n        avg = avg/len(arr)\n    if avg/len(arr) < avg:\n        avg = avg/len(arr)\n    return avg,min_value\ndef medianAvg(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    avg = 0\n    med = arr[len(arr)//2]\n    for i in range(len(arr)):\n        if arr[i] < med:\n            med = arr[i]\n        if arr[i] > avg:\n            avg = arr[i]\n    return med\ndef medianAvgSum(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    sum = 0\n    med = arr[len(arr)//2]\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n        if arr[i] < med:\n            med = arr[i]\n        if arr[i] > sum:\n            sum = arr[i]\n    avg = sum/len(arr)\n    return avg,med\ndef mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    avg = 0\n    for i in range(len(arr)):\n        avg = avg + arr[i]\n    avg = avg/len(arr)\n    return avg\ndef meanSum(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n        avg = avg + arr[i]\n",
        "num_ids": 46
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    return b\n",
        "num_ids": 17
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n",
        "num_ids": 12
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b == 0:\n        return a\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 33
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # Write your code here\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 28
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum=a\n    if b==a:\n        return b\n    if b<a:\n        minimum=b\n        maximum=a\n    else:\n        minimum=a\n        maximum=b\n    for i in range(maximum,b-1,-1):\n        if a<=i<=b:\n            maximum=i\n            break\n    for j in range(minimum,maximum-1,-1):\n        if a<=j<=b:\n            minimum=j\n            break\n    return maximum\n",
        "num_ids": 121
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # your code goes here\n    return max(a,b)\n",
        "num_ids": 18
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    try:\n        return tuple(str1)\n    except:\n        return str1\n",
        "num_ids": 23
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(\"'\", \"\")\n    return tuple(str1)\n",
        "num_ids": 24
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = ()\n    for char in str1:\n        result += char,\n    return tuple(result)\n",
        "num_ids": 28
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if type(str1)!= str:\n        raise TypeError(\"Input must be a string\")\n    tup = tuple(str1)\n    return tup\n",
        "num_ids": 40
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple = ()\n    if str1[0] =='':\n        tuple = tuple(str1[1:])\n    else:\n        tuple = tuple(str1)\n    return tuple\n",
        "num_ids": 50
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_lst = list(str1)\n    tuple_lst.reverse()\n    return tuple(tuple_lst)\n",
        "num_ids": 36
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    temp = 0\n    for i in range(32):\n        if n & (1 << i):\n            temp |= 1 << (i + 1)\n    return temp\n",
        "num_ids": 42
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & 0xFFFFFFFF\n    #print('n: ', n)\n    #print('n & 0xFFFFFFFF: ', n & 0xFFFFFFFF)\n    #print('n ^ 0xFFFFFFFF: ', n ^ 0xFFFFFFFF)\n    l = 0xFFFFFFFF\n    l = (l & n) | (((l & (n >> 32)) << 32) & 0xFFFFFFFF)\n    #print('l: ', l)\n    return l\n",
        "num_ids": 112
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # your code goes here\n    m=0\n    for i in n:\n        m=m^i\n    m=m^(2**(len(n)))\n    print(\"m\",m)\n    return m\n",
        "num_ids": 54
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return n\n    return n | 1\n",
        "num_ids": 19
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n > 0:\n        n = n & 0x7F    # convert to a negative number\n        n |= (1 << 7)    # set the bit 7\n        return n \n    else:\n        n |= (1 << 7)    # set the bit 7\n        return n \n",
        "num_ids": 72
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0:\n        raise ValueError('the input must be positive')\n    if n == 0:\n        return 0\n    elif n > 0:\n        return 1\n    else:\n        return -1\n",
        "num_ids": 53
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print \"set_left_most_unset_bit: %s\" % n\n    n &= (1 << n.bit_length()) - 1\n    print \"    %s = %s\" % (n, n & 1)\n    return n\n",
        "num_ids": 61
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n & n - 1) == n:\n        n -= 1\n    else:\n        n |= 0\n    return n\n",
        "num_ids": 34
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(n):\n        if (i % 2 == 1):\n            bit = 1\n        else:\n            bit = 0\n        a = (i >> 1) & 0x7fffffff\n        b = (i >> 0) & 0x7fffffff\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        b = (b & bit) | (bit << 1)\n        a = (a & bit) | (bit << 1)\n        a = (a & bit) | (bi",
        "num_ids": 2011
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~n-1\n",
        "num_ids": 11
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi*(r**2)*h\n    return v\ndef volume_cone_perimeter(r,h):\n    '''\n    Write a function to calculate the volume of a cone perimeter.\n    '''\n    #TODO: implement this function\n    return math.pi*(r**2)*h\ndef area_of_circle(r):\n    '''\n    Write a function that calculates the area of a circle.\n    '''\n    return math.pi*math.pow(r,2)\ndef area_of_circle_perimeter(r):\n    '''\n    Write a function that calculates the area of a circle perimeter.\n    '''\n    return 2*math.pi*math.pow(r,2)\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that calculates the volume of a cylinder.\n    '''\n    #TODO: implement this function\n    return math.pi*(r**3)*h\ndef volume_of_cylinder_perimeter(r,h):\n    '''\n    Write a function that calculates the volume of a cylinder perimeter.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,3)*h\ndef volume_of_sphere(r):\n    '''\n    Write a function that calculates the volume of a sphere.\n    '''\n    #TODO: implement this function\n    return 3*math.pi*math.pow(r,3)\ndef volume_of_sphere_perimeter(r):\n    '''\n    Write a function that calculates the volume of a sphere perimeter.\n    '''\n    #TODO: implement this function\n    return 4*math.pi*math.pow(r,3)\ndef volume_of_sphere_cylinder(r,h):\n    '''\n    Write a function that calculates the volume of a sphere cylinder.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,2)*h\ndef volume_of_sphere_cylinder_perimeter(r,h):\n    '''\n    Write a function that calculates the volume of a sphere cylinder perimeter.\n    '''\n    #TODO: implement this function\n    return 4*math.pi*math.pow(r,2)*h\ndef volume_of_sphere_ellipsoid(r,h):\n    '''\n    Write a function that calculates the volume of a sphere ellipsoid.\n    '''\n    #TODO: implement this function\n    return 6*math.pi*math.pow(r,2)*h\ndef volume_of_sphere_ellipsoid_perimeter(r,h):\n    '''\n    Write a function that calculates the volume of a sphere ellipsoid perimeter.\n    '''\n    #TODO: implement this function\n    return 6*math.pi*math.pow(r,3)*h\ndef volume_of_triangle(a,b,c):\n    '''\n    Write a function that calculates the volume of a triangle.\n    '''\n    #TODO: implement this function\n    return 0.5*(math.pow(b,2)+math.pow(c,2))\ndef volume_of_triangle_perimeter(a,b,c):\n    '''\n    Write a function that calculates the volume of a triangle perimeter.\n    '''\n    #TODO: implement this function\n    return (4*math.pi*math.pow(a,2))+(4*math.pi*math.pow(b,2))+(4*math.pi*math.pow(c,2))\ndef volume_of_polygon(a,b,c,d,e,f):\n    '''\n    Write a function that calculates the volume of a polygon.\n    '''\n    #TODO: implement this function\n    return math.pow(math.pow(a,2)+math.pow(b,2)+math.pow(c,2)+math.pow(d,2)+math.pow(e,2)+math.pow(f,2))\ndef volume_of_polygon_perimeter(a,b,c,d,e,f):\n    '''\n    Write a function that calculates the volume of a polygon perimeter.\n    '''\n    #TODO: implement this function\n    return (4*math.pi*math.pow(a,3))+(4*math.pi*math.pow(b,3))+(4*math.pi*math.pow(c,3))+(4*math.pi*math.pow(d,3))+(4*math.pi*math.pow(e,3))+(4*math.pi*math.pow(f,3))\ndef area_of_circle(r):\n    '''\n    Write a function that calculates the area of a circle.\n    '''\n    #TODO: implement this function\n    return math.pi*(r**2)\ndef area_of_circle_perimeter(r):\n    '''\n    Write a function that calculates the area of a circle perimeter.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,2)\ndef area_of_circle_surface(r):\n    '''\n    Write a function that calculates the area of a circle surface.\n    '''\n    #TODO: implement this function\n    return math.pi*math.pow(r,2)\ndef area_of_circle_surface_perimeter(r):\n    '''\n    Write a function that calculates the area of a circle surface perimeter.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,3)\ndef perimeter_of_cylinder(r):\n    '''\n    Write a function that calculates the perimeter of a cylinder.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,2)\ndef perimeter_of_cylinder_perimeter(r):\n    '''\n    Write a function that calculates the perimeter of a cylinder perimeter.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,3)\ndef perimeter_of_sphere(r):\n    '''\n    Write a function that calculates the perimeter of a sphere.\n    '''\n    #TODO: implement this function\n    return 4*math.pi*math.pow(r,3)\ndef perimeter_of_sphere_perimeter(r):\n    '''\n    Write a function that calculates the perimeter of a sphere perimeter.\n    '''\n    #TODO: implement this function\n    return 4*math.pi*math.pow(r,3)\ndef area_of_sphere(r):\n    '''\n    Write a function that calculates the area of a sphere.\n    '''\n    #TODO: implement this function\n    return math.pi*math.pow(r,2)\ndef area_of_sphere_perimeter(r):\n    '''\n    Write a function that calculates the area of a sphere perimeter.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,3)\ndef perimeter_of_circle(r):\n    '''\n    Write a function that calculates the perimeter of a circle.\n    '''\n    #TODO: implement this function\n    return math.pi*math.pow(r,2)\ndef perimeter_of_circle_perimeter(r):\n    '''\n    Write a function that calculates the perimeter of a circle perimeter.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,3)\ndef circumference_of_sphere(r):\n    '''\n    Write a function that calculates the circumference of a sphere.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,3)\ndef circumference_of_sphere_perimeter(r):\n    '''\n    Write a function that calculates the circumference of a sphere perimeter.\n    '''\n    #TODO: implement this function\n    return 2*math.pi*math.pow(r,3)\ndef circumference_o",
        "num_ids": 34
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Volume of cone given by r and h\n    return r**3.0*h\n",
        "num_ids": 23
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*(r**2)*h**2\n    return v\n    #Write your code here!\n    #print(v)\n    #print(math.pi*(r**2)*h**2)\n",
        "num_ids": 55
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (3/2)*math.pi*r*h\n    return v\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r**3 * math.pi * h**3 * (2/3) * (math.tan(math.radians(45)))\n",
        "num_ids": 35
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Assuming you get to know the volume of a cone.\n    #We\u2019ll need to do this for a number r,h.\n    #r is the radius of the cone\n    #h is the height of the cone\n    #The following equation is the volume of a cone given by:\n    #Vol = r^3 * h^3\n    #the formula takes into account the addition of a third variable,\n    # and the fact that there is no point in writing a formula in a\n    # form that has more than a third variable.\n    #In other words, we don\u2019t know which two variables we would\n    #have if we had added one.\n",
        "num_ids": 153
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a = math.pi * (r**2)\n    b = math.pi * (r*h)\n    c = math.pi * (r**2 * h)\n    return a + b + c\n",
        "num_ids": 51
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = h/2 * math.pow(math.tan(math.radians(60)),2)\n    return r * v\n",
        "num_ids": 34
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/2)**2\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #get volume of given cone\n    vol = h*r*(math.pi)*math.sqrt(3)\n    return vol\n",
        "num_ids": 34
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # handle base cases:\n    # 1 <= n <= 15\n    if n == 1 or n == 2:\n        return 1\n",
        "num_ids": 32
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while n > 0:\n        if n%2 == 0:\n            n = n/2\n        else:\n            n = n*3+1\n        power = power+1\n    return power\n",
        "num_ids": 54
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 2: \n        return n \n    else: \n        if n%2 == 0: \n            return n//2 \n        else: \n            return (n//2)+1 \n        \ndef find_factors(x): \n    '''\n    Write a python function that returns a list of all the factors of x. \n    '''\n    if x == 0: \n        return []\n    elif x % 2 == 0: \n        return find_factors(x//2) + [x]\n    else: \n        return find_factors(x//2) + [x] + find_factors(x//2 + 1)\n        \ndef main(): \n    '''\n    Write a python program to sum all of the numbers in a list, \n    using a while loop.\n    '''\n    print(\"Using while loop\\n\")\n    num_list = [10,5,7,9,8,4,3,6,2,1]\n    index = 0\n    sum = 0\n    while index < len(num_list):\n        sum = sum + num_list[index]\n        index = index + 1\n    print(\"The sum is:\", sum)\n",
        "num_ids": 90
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 2\n    while n >= power:\n        power += 1\n    return power\n",
        "num_ids": 23
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    if n < 1:\n        return 0\n    else:\n        return highest_Power_of_2(n - 1)\n",
        "num_ids": 47
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while n>0:\n        if n%2 == 0:\n            count += 1\n        n //= 2\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n<=1:\n        return n\n    elif n%2 ==0:\n        return highest_Power_of_2(n//2)\n    elif n%2 ==1:\n        return highest_Power_of_2(n//2+1)\n    else:\n        print(\"There is no power of 2 that is greater than n.\")\n",
        "num_ids": 88
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return highest_Power_of_2(n-1) + 1\n",
        "num_ids": 34
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = n \n    if n == 1:\n        return n\n    for i in range(2, n):\n        if n%i == 0:\n            print (n, \"is not a power of 2\")\n            return 0\n    print (n, \"is a power of 2\")\n    return n\n",
        "num_ids": 74
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    def is_power_of_2(n): \n        '''\n        Check if number n is power of 2 \n        '''\n        if n == 2: \n            return True\n        if n%2 == 0: \n            return False\n    \n    if n < 2 or n > int(math.sqrt(n) + 1) or n == int(math.sqrt(n) + 1): \n        return 0\n    return is_power_of_2(n-1) and is_power_of_2(n-2)\n",
        "num_ids": 99
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    else:\n        return find_lucas(n - 1) + 3 * find_lucas(n - 2)\n",
        "num_ids": 65
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        return n \n    else: \n        return find_lucas(n - 1) + 2 * find_lucas(n - 2) \n",
        "num_ids": 47
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(n+1): \n        if i == 0 or i == 1:\n            continue\n        elif i % 2 == 0: \n            x = i // 2\n            y = 3 * x + (i-1)\n            if y % 2 == 0: \n                z = 2 * y + (i-1)\n                if z % 2 == 0: \n                    lucas_number = y * y * y + x * x * x + 1\n                else:\n                    lucas_number = y * y * y + 2 * y * x + 3 * (x + 1)\n        else:\n            x = i // 2\n            y = 3 * x + (i-1)\n            if y % 2 == 0: \n                z = 2 * y + (i-1)\n                if z % 2 == 0: \n                    lucas_number = 2 * y + 3 * (x + 1)\n                else:\n                    lucas_number = 2 * y + 5 * x + (x + 1)\n            else: \n                lucas_number = 2 * y + 3 * (x + 1)\n    return lucas_number\n",
        "num_ids": 276
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1)+find_lucas(n-2)\n        \nlucas = find_lucas(10)\nprint(lucas)",
        "num_ids": 73
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    m = 0\n    #Find the index of the first number\n    for i in range(n-1):\n        m = m*10 + ord(input(\"Enter a character: \")) - ord('a') + 1\n    return m\n",
        "num_ids": 57
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #write your code here\n    if n<=2:\n        return n\n    elif n<=3:\n        return 2*find_lucas(n-1)+find_lucas(n-2)\n    else:\n        return find_lucas(n-2)+find_lucas(n-3)\n",
        "num_ids": 82
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n_th_lucas = int(2 * n + 1) \n    if n <= 1: \n        return n_th_lucas \n    return find_lucas(n - 2) \n",
        "num_ids": 54
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    if n < 0: \n        raise ValueError('n must be >= 0')\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 45\n    elif n == 6:\n        return 720\n    elif n == 7:\n        return 1260\n    elif n == 8:\n        return 8660\n    elif n == 9:\n        return 1792\n    elif n == 10:\n        return 21060\n    elif n == 11:\n        return 36060\n    elif n == 12:\n        return 306060\n    elif n == 13:\n        return 376060\n    elif n == 14:\n        return 456060\n    elif n == 15:\n        return 606060\n    elif n == 16:\n        return 636060\n    elif n == 17:\n        return 726060\n    elif n == 18:\n        return 966060\n    elif n == 19:\n        return 1024060\n    elif n == 20:\n        return 1130240\n    elif n == 21:\n        return 1245120\n    elif n == 22:\n        return 1385520\n    elif n == 23:\n        return 1965520\n    elif n == 24:\n        return 255520\n    elif n == 25:\n        return 3652520\n    elif n == 26:\n        return 367520\n    elif n == 27:\n        return 445520\n    elif n == 28:\n        return 4645520\n    elif n == 29:\n        return 5545520\n    elif n == 30:\n        return 64655520\n    elif n == 31:\n        return 7445520\n    elif n == 32:\n        return 8445520\n    elif n == 33:\n        return 9355520\n    elif n == 34:\n        return 10355520\n    elif n == 35:\n        return 12355520\n    elif n == 36:\n        return 14355520\n    elif n == 37:\n        return 16355520\n    elif n == 38:\n        return 18355520\n    elif n == 39:\n        return 20355520\n    elif n == 40:\n        return 22355520\n    elif n == 41:\n        return 24355520\n    elif n == 42:\n        return 26355520\n    elif n == 43:\n        return 28355520\n    elif n == 44:\n        return 30355520\n    elif n == 45:\n        return 32355520\n    elif n == 46:\n        return 34355520\n    elif n == 47:\n        return 36355520\n    elif n == 48:\n        return 38355520\n    elif n == 49:\n        return 40355520\n    elif n == 50:\n        return 42355520\n    elif n == 51:\n        return 54355520\n    elif n == 52:\n        return 66355520\n    elif n == 53:\n        return 78355520\n    elif n == 54:\n        return 86355520\n    elif n == 55:\n        return 99355520\n    elif n == 56:\n        return 101355520\n    elif n == 57:\n        return 112355520\n    elif n == 58:\n        return 117355520\n    elif n == 59:\n        return 120355520\n    elif n == 60:\n        return 123355520\n    elif n == 61:\n        return 125355520\n    elif n == 62:\n        return 126355520\n    elif n == 63:\n        return 128355520\n    elif n == 64:\n        return 129355520\n    elif n == 65:\n        return 131355520\n    elif n == 66:\n        return 132355520\n    elif n == 67:\n        return 133355520\n    elif n == 68:\n        return 135355520\n    elif n == 69:\n        return 137355520\n    elif n == 70:\n        return 140355520\n    elif n == 71:\n        return 143355520\n    elif n == 72:\n        return 145355520\n    elif n == 73:\n        return 147355520\n    elif n == 74:\n        return 152355520\n    elif n == 75:\n        return 154355520\n    elif n == 76:\n        return 157355520\n    elif n == 77:\n        return 160355520\n    elif n == 78:\n        return 163355520\n    elif n == 79:\n        return 165355520\n    elif n == 80:\n        return 167355520\n    elif n == 81:\n        return 170355520\n    elif n == 82:\n        return 173355520\n    elif n == 83:\n        return 174355520\n    elif n == 84:\n        return 177355520\n    elif n == 85:\n        return 180355520\n    elif n == 86:\n        return 183355520\n    elif n == 87:\n        return 185355520\n    elif n == 88:\n        return 187355520\n    elif n == 89:\n        return 190355520\n    elif n == 90:\n        return 192355520\n    elif n == 91:\n        return 193355520\n    elif n == 92:\n        return 195355520\n    elif n == 93:\n        return 196355520\n    elif n == 94:\n        return 197355520\n    elif n == 95:\n        return 200355520\n    elif n == 96:\n        return 202355520\n    elif n == 97:\n        return 204355520\n    elif n == 98:\n        return 207355520\n    elif n == 99:\n        return 208355520\n    elif n == 100:\n        return 209355520\n    elif n == 101:\n        return 210355520\n    elif n == 102:\n        return 211355520\n    elif n == 103:\n        return 212355520\n    elif n == 104:\n        return 213355520\n    elif n == 105:\n        return 214355520\n    elif n == 106:\n        return 215355520\n    elif n == 107:\n        return 216355520\n    elif n == 108:\n        return 217355520\n    elif n == 109:\n        return 218355520\n    elif n == 110:\n        return 219355520\n    elif n == 111:\n        return 220355520\n    elif n == 112:\n        return 221355520\n    elif n == 113:\n        return 222355520\n    elif n == 114:\n        return 223355520\n    elif n == 115:\n        return 224355520\n    elif n == 116:\n        return 225355520\n    elif n == 117:\n        return 226355520\n    elif n == 118:\n        return 227355520\n    elif n == 119:\n        return 228355520\n    elif n == 120:\n        return 229355520\n    elif n == 121:\n        return 230355520\n    elif n == 122:\n        return 231355520\n    elif n == 123:\n        return 232355520\n    elif n == 124:\n        return 233355520\n    elif n == 125:\n        return 234355520\n    elif n == 126:\n        return 235355520\n    elif n == 127:\n        return 236355520\n    elif n == 128:\n        return 237355520\n    elif n == 129:\n        return 240355520\n    elif n == 130:\n        return 241355520\n    elif n == 131:\n        return 242355520\n    elif n == 132:\n        return 243355520\n    elif n == 133:\n        return 244355520\n    elif n == 134:\n        return 245355520\n    elif n == 135:\n        return 246355520\n    elif n == 136:\n    ",
        "num_ids": 2011
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n<= 1:\n        return n\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n == 175:\n        return 174\n    if n == 176:\n        return 175\n    if n == 177:\n        return 176\n    if n == 178:\n        return 177\n    if n == 179:\n        return 178\n    if n == 180:\n        return 179\n    if n == 181:\n        return 180\n    if n == 182:\n        return 181\n    if n == 183:\n        return 182",
        "num_ids": 2015
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n == 1):\n        return 1\n    else:\n        return n * find_lucas(n-1)\n",
        "num_ids": 33
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        try:\n            list_.append(element.format(string))\n        except TypeError:\n            pass\n    return list_\n",
        "num_ids": 40
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for string_ in string.split():\n        result.append(apply_string(list_, string_))\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.extend([f'{string}'])\n",
        "num_ids": 17
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for el in list_:\n        list_.append(str(el).replace(string, '{0}'.format(string)))\n",
        "num_ids": 33
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # First make a copy of the list\n    new_list = list_[:]\n    # Use the format string to replace all occurrences of the substring with the value\n    for i in range(len(new_list)):\n        new_list[i] = new_list[i].replace(string, \"\")\n    # Return the new list\n    return new_list\n",
        "num_ids": 88
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string_split = string.split(\",\")\n    for i in range(len(string_split)):\n        list_.append(list_[i].strip())\n    return list_\n",
        "num_ids": 46
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    try:\n        result = []\n        for i in list_:\n            result.append(f'{string.format(i)}\\n')\n        return result\n    except:\n        return list_\n    # raise Exception\n",
        "num_ids": 55
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if string in list_:\n        return False\n    elif string == 'None':\n        list_.append(None)\n        return True\n    elif string == '\"':\n        list_.append(\"')\"+str(list_.index(string)))\n        list_.remove(string)\n        list_.remove(',')\n        return True\n    elif string == '\"':\n        list_.append(\"'''\")\n        list_.remove(string)\n        list_.remove(',')\n        return True\n    elif string == '{':\n        list_.append('{')\n        list_.remove(string)\n        return True\n    elif string == '}':\n        list_.append('}')\n        list_.remove(string)\n        return True\n    elif string == ';':\n        list_.append(';')\n        return True\n    elif string == ',':\n        list_.append(',')\n        return True\n    elif string =='':\n        list_.append(' ')\n        return True\n    else:\n        list_.append(string)\n        return True\n",
        "num_ids": 159
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        if type(element) == str:\n            element = element.format(string)\n        list_.append(element)\n",
        "num_ids": 38
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for el in l1:\n        d1[el] = convert_list_dictionary(l2, l3, el)\n    return d1\n",
        "num_ids": 44
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in l1:\n        if type(i) == list:\n            d1 = convert_list_dictionary(i, l2, d1)\n        else:\n            d2[i] = l3[i]\n    return d1, d2\n",
        "num_ids": 77
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {key: convert_list_dictionary(l1, l2, l3) for key in l1}\n",
        "num_ids": 30
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in l1:\n        d1[i] = l1[i]\n    for i in l2:\n        d2[i] = l2[i]\n    for i in l3:\n        d1[i] = l3[i]\n    return d1, d2\n",
        "num_ids": 85
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict()\n    d2 = dict()\n    d3 = dict()\n    for i in l1:\n        d1.update(i)\n    for i in l2:\n        d2.update(i)\n    for i in l3:\n        d3.update(i)\n    return (d1, d2, d3)\n",
        "num_ids": 87
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        if i not in d:\n            d[i] = []\n        for j in l2:\n            if j not in d:\n                d[j] = []\n            d[i].append(j)\n    for i in l3:\n        if i not in d:\n            d[i] = []\n        for j in l2:\n            if j not in d:\n                d[j] = []\n            d[i].append(j)\n    return d\n",
        "num_ids": 127
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(0, len(l1)):\n        d1[l1[i]] = l2[i]\n    d3 = {}\n    for i in range(0, len(l3)):\n        d3[l3[i]] = l1[i]\n    return d1, d3\n",
        "num_ids": 84
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    if type(l1) == list:\n        for elem in l1:\n            dictionary[elem] = convert_list_dictionary(l2, l3, l4)\n    elif type(l1) == dict:\n        dictionary[l1['key']] = l2\n    else:\n        print(\"Invalid data type. Input must be a list or dictionary\")\n        return None\n    return dictionary\n",
        "num_ids": 107
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_list = []\n",
        "num_ids": 9
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        if l1[i] not in d:\n            d[l1[i]] = [l2[i]]\n        else:\n            d[l1[i]].append(l3[i])\n    return d\n",
        "num_ids": 73
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n*(n+1)/2) + (n*(n+3)/2) + (n*(n+4)/2) + (n*(n+5)/2)\n",
        "num_ids": 48
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # formula for the maximum possible sum\n    # n is the number of squares\n    # f(n) is the sum of the squares\n    # return f(n)\n    n = int(n)\n    f = n * (n+1) / 2\n    return max(f, n * (n+1) / 2, n * (n+3) / 6)\n",
        "num_ids": 89
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return max(n, n + 1)\n    elif n == 3:\n        return n + 1\n    else:\n        return max( n*(n+1)/2, n*(n+2)/2, n*(n+3)/3)\n    \n",
        "num_ids": 84
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    try:\n        assert (n % 2 == 0)\n        # print(n)\n        # print(\"----\")\n        if n < 2:\n            return n\n        \n        # print(\"----------------\")\n        # print(n)\n        # print(\"-----\")\n        if n < 5:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 10:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 100:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 10000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 100000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 10000000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 100000000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 10000000000000:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 10000000000001001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 100000000000010011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\")\n        # print(n)\n        # print(\"------\")\n        # print(n)\n        # print(\"------\")\n        if n < 1000000000000100110011001:\n            return n\n        \n        # print(\"------------------\"",
        "num_ids": 2003
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    f = lambda n: max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n",
        "num_ids": 56
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n1, n2 = n // 2, n // 3\n    s1, s2 = 0, 0\n    for i in range(n):\n        s1 += f(n1)\n        s2 += f(n2)\n        n1, n2 = n2, n2 + n1\n    return s1 + s2 + n1\n",
        "num_ids": 84
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    elif n < 6:\n        return get_max_sum(n - 1)\n    else:\n        return get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n",
        "num_ids": 84
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_f(n):\n        if n == 1:\n            return n\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 4\n        else:\n            return get_max_sum_f(n - 1) + get_max_sum_f(n - 2) + get_max_sum_f(n - 3) + n\n",
        "num_ids": 97
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (n + 1)/2 * (n + 2) * (n + 3) * (n + 4) * (n + 5)\n",
        "num_ids": 35
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # get the coefficients from the formula f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    f_coeffs = []\n    n_coeffs = [n / 2, n / 3, n / 4, n / 5]\n    for i in range(5):\n        coeffs = [n_coeffs[i], n_coeffs[i+1]]\n        f_coeffs.append(sum(coeffs))\n    return max(f_coeffs)\n",
        "num_ids": 143
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) > 0:\n        return input_list[0]\n    else:\n        return []\n    \n",
        "num_ids": 33
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for i in range(len(input_list)):\n        length = len(input_list[i])\n        if(length > length_list[i]):\n            length_list[i] = length\n    return length_list\n",
        "num_ids": 62
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list)\n    for elem in input_list:\n        if len(elem) > max_len:\n            max_len = len(elem)\n    return max_len\n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min_len = len(input_list)\n    for elem in input_list:\n        if len(elem) < min_len:\n            min_len = len(elem)\n    return min_len\n    \ndef count_words(input_list):\n    '''\n    Write a function that counts the number of words in a list.\n    '''\n    count = 0\n    for elem in input_list:\n        if isinstance(elem, str):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = max(len(item) for item in input_list)\n    return max_length\n",
        "num_ids": 27
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return []\n    \n    elif len(input_list) == 1:\n        return input_list\n    \n    elif len(input_list) == 2:\n        return max(input_list)\n",
        "num_ids": 63
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n    return max_length\n",
        "num_ids": 50
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for i in range(len(input_list)):\n        if input_list[i] > max_length:\n            max_length = input_list[i]\n    return max_length\n    \n    \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    min_length = input_list[0]\n    for i in range(len(input_list)):\n        if input_list[i] < min_length:\n            min_length = input_list[i]\n    return min_length\n",
        "num_ids": 60
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    \n    return max(input_list, key=len)\n",
        "num_ids": 17
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n    return max_length\n",
        "num_ids": 50
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        raise TypeError('Invalid input.')\n    \n    if len(input_list) == 1:\n        return input_list\n    \n    if len(input_list) == 2:\n        return [input_list[0],input_list[1]]\n    \n    return [max_length_list(input_list[:2]), max_length_list(input_list[2:])]\n",
        "num_ids": 107
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique = []\n    for i in test_tup:\n        if i not in unique:\n            unique.append(i)\n    if len(unique) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create list of tuples\n    tup_list = []\n",
        "num_ids": 18
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a dictionary to look for duplicates\n    # {(1, 2, 3): [1, 2, 3]}\n    # returns\n    # True\n    # False\n",
        "num_ids": 43
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # pass the tuple\n    return len(set(test_tup))==len(test_tup)\n",
        "num_ids": 28
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup)!= len(test_tup):\n        return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i)!= 1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    a = test_tup[0]\n    b = test_tup[1]\n    c = a\n    d = b\n    e = c\n    f = d\n    g = e\n    if(len(a)!=len(b)):\n        return False\n    if(len(a)==len(c)):\n        if(len(b)==len(e)):\n            return False\n    if(len(b)==len(d)):\n        if(len(a)==len(g)):\n            return False\n    if(len(c)==len(g)):\n        if(len(a)==len(d)):\n            return False\n    return True\n",
        "num_ids": 167
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # initialize an empty list\n    distinct_list = []\n",
        "num_ids": 17
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # iterate through each item in the tuple, if it contains no duplicate, print True\n    for i in range(0, len(test_tup)):\n        if test_tup[i] == test_tup[i]:\n            return False\n        else:\n            return True\n",
        "num_ids": 69
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if not isinstance(test_tup, tuple):\n        print(f\"input {test_tup} should be a tuple\")\n        return False\n    for x in test_tup:\n        if x in test_tup:\n            print(f\"{x} is a duplicate\")\n            return False\n    print(f\"{test_tup} is a valid tuple\")\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counts = {}\n    for char in str1:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    for char in str1:\n        if char in counts:\n            counts[char] -= 1\n        if counts[char] == 0:\n            return char\n    return \"null\"\n",
        "num_ids": 89
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #declare dictionary with key as characters and value as frequency\n    char_frequency = {}\n    #loop through string\n    for char in str1:\n        #if char is not in char_frequency dictionary, return it\n        if char not in char_frequency:\n            return char\n        #update character frequency dictionary\n        char_frequency[char] = char_frequency.get(char, 0) + 1\n    #return the character with the highest frequency\n    return char_frequency.get(str1[0], 0)\n",
        "num_ids": 120
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    res = ''\n    for ch in str1:\n        if ch not in res:\n            res += ch\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    start = 0\n    end = len(str1) - 1\n    str2 = list(str1)\n    while start < end:\n        if str2[start] == str2[start+1]:\n            start += 1\n        else:\n            end -= 1\n            str2.remove(str2[start])\n    return str2[0]\n",
        "num_ids": 85
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Code here\n    dict_of_letters = {}\n    for i in str1:\n        if i in dict_of_letters:\n            dict_of_letters[i] += 1\n        else:\n            dict_of_letters[i] = 1\n    for i in dict_of_letters:\n        if dict_of_letters[i] == 1:\n            return i\n    return \"No characters have been repeated.\"\n",
        "num_ids": 102
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = {}\n    for c in str1:\n        if c in char:\n            char[c] += 1\n        else:\n            char[c] = 1\n    for k in char:\n        if char[k] > 1:\n            return k\n    return None\n",
        "num_ids": 67
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_char = \"\"\n    first_char_occurrence = 0\n    for char in str1:\n        if char == first_char:\n            first_char_occurrence += 1\n        else:\n            if first_char_occurrence > 0:\n                first_char = char\n                first_char_occurrence = 0\n            else:\n                return first_char\n    return first_char\n",
        "num_ids": 95
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    i = 0\n    count = 0\n    while i < len(str1):\n        if str1[i] == str1[i+1]:\n            count = count + 1\n        else:\n            count = count - 1\n        i += 1\n",
        "num_ids": 61
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    c = str1.lower().replace(' ', '')\n    for i in range(0, len(c)):\n        if c[i] == c[i-1]:\n            continue\n        else:\n            return c[i]\n    return None\n",
        "num_ids": 62
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    lst = []\n    for i in str1:\n        if i not in lst:\n            lst.append(i)\n    lst.sort()\n    return lst[0]\n",
        "num_ids": 49
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n    \ndef remove_all_spaces(string):\n    '''\n    Write a function to remove all the spaces from the given string.\n    '''\n    return''.join([i for i in string.split() if i!=''])\n",
        "num_ids": 22
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]==string[-1]:\n        return True\n    else:\n        return False",
        "num_ids": 26
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if re.match(pattern,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # if the string starts or ends with the given character\n    if re.search(regex, string): \n        return True \n    # otherwise return false \n    return False \n",
        "num_ids": 45
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (len(string) == 0):\n        return True\n    elif (re.search(regex, string)):\n        return True\n    elif (re.search(regex, string[:-1])):\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    start_check = re.search(regex, string)\n    if start_check:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 40
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n",
        "num_ids": 15
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 2:\n        return False\n    elif not(string[0].lower() == string[-1].lower()):\n        return False\n    else:\n        return True\ndef check_span(string):\n    '''\n    Write a function to check whether the given string spans the whole word or not.\n    '''\n    if not(string ==''):\n        return False\n    else:\n        return True\ndef find_span(string):\n    '''\n    Write a function that takes in a string and returns the start and end of the string.\n    '''\n    match = re.findall(regex, string)\n    if match!= None:\n        span = match[0][0]\n        span_start = string.find(span)\n        span_end = span_start + len(span)\n        return span_start, span_end\n    else:\n        return None\ndef find_space(string):\n    '''\n    Write a function that takes in a string and returns the start and end of the string.\n    '''\n    match = re.findall(regex, string)\n    if match!= None:\n        span = match[0][0]\n        span_start = string.find(span)\n        span_end = span_start + len(span)\n        return span_start, span_end\n    else:\n        return None\ndef find_match(string, word):\n    '''\n    Write a function that takes in a string and a word and returns the start and end of the string where the word matches the given word.\n    '''\n    match = re.findall(regex, string)\n    if match!= None:\n        span = match[0][0]\n        span_start = string.find(span)\n        span_end = span_start + len(span)\n        return span_start, span_end\n    else:\n        return None\n",
        "num_ids": 78
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # part 1: lower() and upper() function\n    s = string.lower() \n    # print(s)\n    # part 2: re.search() function\n    return re.search(regex, s)\n    # part 3: for string in a, iterate over a and compare the characters with the given character\n    # part 4: if the characters are equal, return True\n",
        "num_ids": 90
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string: return False\n    elif len(string) < 1: return False\n    elif len(string) > 4: return False\n    else:\n        if string[0] == string[-1]: return True\n        elif string[0] == '#' or string[0] == '$': return True\n        else: return False\n",
        "num_ids": 84
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    elif c<a:\n        return c\n    else:\n        return (a+b+c)/2\n    \nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nc = list(map(int,input().split()))\n",
        "num_ids": 107
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) > 1 and len(b) > 1 and len(c) > 1:\n        median = (sum(a) + sum(b) + sum(c)) / 3\n        return median\n    else:\n        print(\"Invalid input\")\n        return -1\n",
        "num_ids": 68
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and b>c:\n        return max(a,b,c)\n    elif a>b:\n        return a\n    elif a>c:\n        return c\n    elif b>c:\n        return b\n    else:\n        return a\n    return\n",
        "num_ids": 71
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b and a>c:\n        median=a\n    elif b>a and b>c:\n        median=b\n    else:\n        median=c\n    return median\n",
        "num_ids": 51
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        a = a - c\n    if b > a and b > c:\n        b = b - c\n    return (a+b+c)/3\n",
        "num_ids": 49
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/2\n",
        "num_ids": 13
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=sorted([a,b,c])\n    if len(a)%2==0:\n        return (a[int(len(a)/2-1)]+a[int(len(a)/2)])/2\n    elif len(a)%2!=0:\n        return a[int(len(a)/2)]\n",
        "num_ids": 84
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    n=3\n    m=int((n+1)/2)\n    if m==1:\n        return a\n    if m==2:\n        return b\n    if m==3:\n        return c\n    median=[]\n    sorted_a=sorted(a)\n    sorted_b=sorted(b)\n    sorted_c=sorted(c)\n    sorted_sum=sorted(sorted_a+sorted_b+sorted_c)\n    for i in sorted_sum:\n        if len(str(i))<3:\n            median.append(i)\n    median.sort()\n    median=median[int(len(median)/2)]\n    return median\n",
        "num_ids": 177
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c=list(map(int, (a,b,c)))\n    n=len(a)\n    x,y,z=0,0,0\n    if n % 2==0:\n        x=(a[n//2]+b[n//2]+c[n//2])//3\n        y=a[n//2]+b[n//2]\n        z=c[n//2]\n    elif n%2==1:\n        x=(a[n//2]+b[n//2])//3\n        y=a[n//2]\n        z=b[n//2]\n    else:\n        print('ERROR')\n    return sorted([x,y,z])\n",
        "num_ids": 172
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i % 10\n    return sum\n    \n    \n    #Sum of digits of each number of a given list    ",
        "num_ids": 43
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for number in nums:\n        total = total + int(str(number)[-1])\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for number in nums:\n        sum += number\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #your code here\n    \n    ans = 0\n    for num in nums:\n        ans += num\n",
        "num_ids": 28
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += num\n    return digit_sum\n",
        "num_ids": 30
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    s = 0\n    for num in nums:\n        s += num\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    dig_sum = 0\n    \n    for num in nums:\n        dig_sum += num\n    \n    return dig_sum\n    \ndef sum_of_even_digits(nums):\n    '''\n    Write a function to compute the sum of even digits of each number of a given list.\n    '''\n    \n    even_sum = 0\n    \n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    \n    return even_sum\n    \ndef sum_of_fibonacci(n):\n    '''\n    Write a function to compute the sum of the numbers 1 through n\n    '''\n    \n    fib_sum = 0\n    \n    if n <= 1:\n        return n\n    else:\n        fib_sum = nums[0] + nums[1]\n        \n        for i in range(2, n):\n            fib_sum += nums[i]\n            \n        return fib_sum\n        \ndef sum_of_factors(n):\n    '''\n    Return the sum of the first n factors of the input number.\n    '''\n    \n    factors_sum = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            factors_sum += i\n    \n    return factors_sum\n    \ndef sum_of_primes(n):\n    '''\n    Return the sum of primes below the given input number.\n    '''\n    \n    p_sum = 0\n    \n    for i in range(2, n):\n        if n % i == 0:\n            p_sum += i\n    \n    return p_sum\n    \ndef sum_of_primes2(n):\n    '''\n    Return the sum of the primes below the given input number.\n    '''\n    \n    primes_sum = 0\n    \n    for i in range(2, n):\n        if n % i == 0:\n            primes_sum += i\n            \n    return primes_sum\n    \ndef factorial(n):\n    '''\n    Return the factorial of the number n, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    return n * factorial(n - 1)\n    \ndef factorial2(n):\n    '''\n    Return the factorial of the number n, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    return n * factorial2(n-1)\n    \ndef fib(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib(n-1) + fib(n-2)\n    \ndef fib_2(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_2(n-1) + fib_2(n-2)\n    \ndef fib_3(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_3(n-1) + fib_3(n-2) + fib_3(n-3)\n    \ndef fib_4(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_4(n-1) + fib_4(n-2) + fib_4(n-3)\n    \ndef fib_5(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_5(n-1) + fib_5(n-2) + fib_5(n-3)\n    \ndef fib_6(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_6(n-1) + fib_6(n-2) + fib_6(n-3)\n    \ndef fib_7(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_7(n-1) + fib_7(n-2) + fib_7(n-3)\n    \ndef fib_8(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_8(n-1) + fib_8(n-2) + fib_8(n-3)\n    \ndef fib_9(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_9(n-1) + fib_9(n-2) + fib_9(n-3)\n    \ndef fib_10(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_10(n-1) + fib_10(n-2) + fib_10(n-3)\n    \ndef fib_11(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_11(n-1) + fib_11(n-2) + fib_11(n-3)\n    \ndef fib_12(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_12(n-1) + fib_12(n-2) + fib_12(n-3)\n    \ndef fib_13(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_13(n-1) + fib_13(n-2) + fib_13(n-3)\n    \ndef fib_14(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    return fib_14(n-1) + fib_14(n-2) + fib_14(n-3)\n    \ndef fib_15(n):\n    '''\n    Return the nth Fibonacci number, if it is a positive integer, otherwise return 0.\n    '''\n    \n    if n == 0:\n        retur",
        "num_ids": 14
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    sum = 0\n    for num in nums:\n        sum += int(num)\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n",
        "num_ids": 16
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for i in range(len(test_tup1)):\n        xor_tup = xor_tup + (test_tup1[i] ^ test_tup2[i])\n    return xor_tup\n",
        "num_ids": 67
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        return (test_tup1[0] ^ test_tup2[0])\n    else:\n        return 'Error'\n",
        "num_ids": 53
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = test_tup1.xor(test_tup2)\n    return result\n    \n    \ndef add(test_tup1, test_tup2):\n    '''\n    Write a function to perform the addition of two tuples.\n    '''\n    return test_tup1.add(test_tup2)\n    \ndef sub(test_tup1, test_tup2):\n    '''\n    Write a function to perform the subtraction of two tuples.\n    '''\n    return test_tup1.sub(test_tup2)\n    \ndef mul(test_tup1, test_tup2):\n    '''\n    Write a function to perform the multiplication of two tuples.\n    '''\n    return test_tup1.mul(test_tup2)\n    \ndef div(test_tup1, test_tup2):\n    '''\n    Write a function to perform the division of two tuples.\n    '''\n    return test_tup1.div(test_tup2)\n    \ndef mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulo of two tuples.\n    '''\n    return test_tup1.mod(test_tup2)\n    \ndef con(test_tup1, test_tup2):\n    '''\n    Write a function to perform the comparison of two tuples.\n    '''\n    return test_tup1.con(test_tup2)\n    \ndef raplace(test_tup1, test_tup2):\n    '''\n    Write a function to perform the right circular placement of two tuples.\n    '''\n    return test_tup1.right_circular_placement(test_tup2)\n    \ndef power(test_tup1, test_tup2):\n    '''\n    Write a function to perform the power of two tuples.\n    '''\n    return test_tup1.power(test_tup2)\n    \ndef mod_inv(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv(test_tup2)\n    \ndef mod_inv2(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv2(test_tup2)\n    \ndef mod_inv3(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv3(test_tup2)\n    \ndef mod_inv4(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv4(test_tup2)\n    \ndef mod_inv5(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv5(test_tup2)\n    \ndef mod_inv6(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv6(test_tup2)\n    \ndef mod_inv7(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv7(test_tup2)\n    \ndef mod_inv8(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv8(test_tup2)\n    \ndef mod_inv9(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv9(test_tup2)\n    \ndef mod_inv10(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv10(test_tup2)\n    \ndef mod_inv11(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv11(test_tup2)\n    \ndef mod_inv12(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv12(test_tup2)\n    \ndef mod_inv13(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv13(test_tup2)\n    \ndef mod_inv14(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv14(test_tup2)\n    \ndef mod_inv15(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv15(test_tup2)\n    \ndef mod_inv16(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv16(test_tup2)\n    \ndef mod_inv17(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv17(test_tup2)\n    \ndef mod_inv18(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv18(test_tup2)\n    \ndef mod_inv19(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv19(test_tup2)\n    \ndef mod_inv20(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv20(test_tup2)\n    \ndef mod_inv21(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv21(test_tup2)\n    \ndef mod_inv22(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv22(test_tup2)\n    \ndef mod_inv23(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two tuples.\n    '''\n    return test_tup1.mod_inv23(test_tup2)\n    \ndef mod_inv24(test_tup1, test_tup2):\n    '''\n    Write a function to perform the modulus of two t",
        "num_ids": 14
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Invalid arguments given\")\n    if not isinstance(test_tup1, tuple):\n        raise TypeError(\"Argument 1 should be a tuple\")\n    if not isinstance(test_tup2, tuple):\n        raise TypeError(\"Argument 2 should be a tuple\")\n",
        "num_ids": 89
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Number of tuples must be equal!\"\n    assert all(type(tup1) == type(tup2) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same type!\"\n    assert all(len(tup1) == len(tup2) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same length!\"\n    assert all(type(tup1[i]) == type(tup2[i]) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same type!\"\n    assert all(len(tup1) == len(tup2[i]) for tup1, tup2 in zip(test_tup1, test_tup2)), \"Each tuple must be of the same length!\"\n",
        "num_ids": 241
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #declare empty lists to store the results\n    result = []\n    #if the lengths of the first and second arguments are zero, return empty lists\n    if len(test_tup1)!= len(test_tup2):\n        result = []\n    #else, for each element of the first tuple, perform the xor operation, and append it to the result list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    # loop through the tuples\n    for i in range(0,len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            pass\n        else:\n            test_tup1[i] ^= test_tup2[i]\n    # return the result\n    return test_tup1\n",
        "num_ids": 121
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # TODO: Fill this in\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    # Check to see if the given tuples are identical\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of the same size\")\n",
        "num_ids": 84
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_x = test_tup1[0]\n    test_tup2_x = test_tup2[0]\n    test_tup3_x = test_tup1[1]\n    test_tup4_x = test_tup2[1]\n    #checking if the given tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        #if the lengths are equal then xor them\n        xor_result = (test_tup1_x ^ test_tup2_x)\n        #checking if result is 0 then return it\n        if xor_result == 0:\n            return xor_result\n        else:\n            return -xor_result\n    #checking if the length of tuples are equal\n    else:\n        print(\"Length of the test tuples are not equal to the length of the second tuple\")\n        return -1\n",
        "num_ids": 225
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple_count = 0\n    for i in test_list:\n        i = [int(i) for i in i.split(',')]\n        i = set(i)\n        unique_tuple_count += len(i)\n    return unique_tuple_count\n",
        "num_ids": 70
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_count = 0\n    for item in test_list:\n        if len(set(item)) == len(item):\n            unique_count += 1\n    return unique_count\n",
        "num_ids": 45
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = []\n    for i in test_list:\n        result.append(len(i))\n    result = list(dict.fromkeys(result))\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for item in test_list:\n        if isinstance(item, list):\n            for elem in item:\n                if isinstance(elem, list):\n                    freq += len(elem)\n        else:\n            if isinstance(item, list):\n                freq += len(item)\n    return freq\n",
        "num_ids": 84
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # TO DO: Replace this with the solution from lesson 4\n    freq = 0\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            if test_list[i][j]!= '0' and test_list[i][j]!= '1':\n                freq += 1\n    return freq\n",
        "num_ids": 97
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Function to extract the number of unique tuples in the given list.\n    def unique_list(test_list):\n        '''\n        Return a list that contains the unique tuples.\n        '''\n        # Use list comprehension to extract the number of unique tuples in the list.\n        unique_list = [set(test_list[i]) for i in range(0,len(test_list))]\n        return unique_list\n",
        "num_ids": 55
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [tuple(x.split()) for x in test_list]\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n",
        "num_ids": 46
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    with open('text/freq.txt', 'w') as f:\n        for i in range(len(test_list)):\n            f.write(str(test_list[i]) + '\\n')\n            f.flush()\n    f.close()\n    return 0\n",
        "num_ids": 69
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #all_freq = []\n    unique_freq = []\n    #for i in range(len(test_list)):\n    #    all_freq.append(len(test_list[i]))\n    #print(all_freq)\n    \n    freq = 0\n    for i in range(len(test_list)):\n        unique_freq.append(len(set(test_list[i])))\n        freq = freq + 1\n    print(unique_freq)\n    return freq\n",
        "num_ids": 129
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple((test_tup1[0]+test_tup2[0],test_tup1[1]+test_tup2[1]))\ndef multiply_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0],test_tup1[1]*test_tup2[1])\ndef divide_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two nested tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0],test_tup1[1]/test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Add the tuples to the first list\n    test_tup1.append(tuple(test_tup2[0]))\n    \n    # Add the tuples to the second list\n    test_tup2.append(tuple(test_tup1[1]))\n    \n    return test_tup1, test_tup2\n",
        "num_ids": 88
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuple(a,b):\n        if type(a) == tuple:\n            if type(b) == tuple:\n                return tuple(a + b for a,b in zip(a,b))\n            else:\n                return tuple([a + b for a,b in zip(a,b)])\n        else:\n            return a + b\n    return tuple([add_tuple(i,j) for i,j in zip(test_tup1, test_tup2)])\n",
        "num_ids": 121
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def inner(a, b):\n        return tuple([sum([a[i] + b[i] for i in range(len(a))]) for i in range(len(a))])\n",
        "num_ids": 47
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    return test_tup1 + test_tup2\n",
        "num_ids": 38
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Define a helper function to add the indices of the two tuples\n    def add_tuples(ind1, ind2):\n        \"\"\"\n        Adds two tuples together\n",
        "num_ids": 43
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return None\n    if type(test_tup1) is tuple and type(test_tup2) is tuple:\n        return tuple(map(add_nested_tuples, test_tup1, test_tup2))\n    if type(test_tup1) is list and type(test_tup2) is list:\n        return tuple(map(add_nested_tuples, test_tup1, test_tup2))\n    return None\n",
        "num_ids": 133
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # first declare the empty list\n    test_tuple_1 = []\n    # second declare the empty list\n    test_tuple_2 = []\n    \n    # Iterate through each tuple\n    for index in range(len(test_tup1)):\n        \n        # check if the tuple has two items\n        if len(test_tup1[index])!= 2:\n            \n            # if not, throw an error message\n            raise IndexError(\"Each tuple must have 2 elements\")\n        \n        # add tuple element by using index\n        test_tuple_1.append(test_tup1[index][0])\n        test_tuple_1.append(test_tup1[index][1])\n    \n    # Iterate through each tuple\n    for index in range(len(test_tup2)):\n        \n        # check if the tuple has two items\n        if len(test_tup2[index])!= 2:\n            \n            # if not, throw an error message\n            raise IndexError(\"Each tuple must have 2 elements\")\n        \n        # add tuple element by using index\n        test_tuple_2.append(test_tup2[index][0])\n        test_tuple_2.append(test_tup2[index][1])\n        \n    # add the two tuples into the result\n    test_tuple_1 = tuple(test_tuple_1)\n    test_tuple_2 = tuple(test_tuple_2)\n    \n    # return the result\n    return test_tuple_1, test_tuple_2\n    \n    ",
        "num_ids": 382
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # add the tuple elements\n    test_tup1.append(1)\n    test_tup2.append(2)\n    \n    # initialize a new tuple\n    add_nested = ()\n    \n    # check if each tuple contains one element\n    # this is not true for tuple as it is mutable\n    if not all(isinstance(tup, tuple) for tup in test_tup1):\n        raise TypeError('Test tuples must contain 1 element')\n    if not all(isinstance(tup, tuple) for tup in test_tup2):\n        raise TypeError('Test tuples must contain 2 elements')\n    \n    # if it is present in both tuples, then add them\n    for index, tup in enumerate(test_tup1):\n        if index < len(test_tup2):\n            # if the tuples have different length then add\n            add_nested += (tup, test_tup2[index])\n        else:\n            # if the tuples have the same length than add\n            add_nested += (tup,)\n    \n    # return the result\n    return add_nested\n    \n    \n    \ndef test_add_nested_tuples():\n    # test add_nested_tuples function\n    test_tup1 = [1, 2, 3]\n    test_tup2 = (4, 5, 6)\n    \n    assert add_nested_tuples(test_tup1, test_tup2) == (1, 4, 5, 6)\n    \n    # check if tuple is immutable\n    test_tup2 = (1, 2, 3)\n    assert add_nested_tuples(test_tup1, test_tup2)!= (1, 2, 3)\n    \n    # check for error if tuple is not length 2\n    assert add_nested_tuples(test_tup1, test_tup2) == (1, 2, 3)\n    \n    # check for error if tuple has wrong length\n    assert add_nested_tuples(test_tup1, test_tup2) == (1, 2, 3)\n    \n    \n    \ndef test_reduce_tuple():\n    # test reduce tuple function\n    assert reduce(lambda x, y: x+y, [1, 2, 3, 4]) == 7\n    \n    # check if tuple is immutable\n    assert reduce(lambda x, y: x+y, [1, 2, 3, 4])!= 7\n    \n    # check for error if tuple is not length 2\n    assert reduce(lambda x, y: x+y, [1, 2, 3, 4]) == 7\n    \n    # check for error if tuple has wrong length\n    assert reduce(lambda x, y: x+y, [1, 2, 3, 4]) == 7\n    \n    \ndef test_merge_two_tuples():\n    # test merge two tuples function\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (4, 5, 6)\n    \n    assert merge_two_tuples(test_tup1, test_tup2) == (1, 2, 3, 4, 5, 6)\n    \n    # check if tuple is immutable\n    assert merge_two_tuples(test_tup1, test_tup2)!= (1, 2, 3, 4, 5, 6)\n    \n    # check for error if tuple is not length 2\n    assert merge_two_tuples(test_tup1, test_tup2) == (1, 2, 3, 4, 5, 6)\n    \n    # check for error if tuple has wrong length\n    assert merge_two_tuples(test_tup1, test_tup2) == (1, 2, 3, 4, 5, 6)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1999
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup_1 = test_tup1\n    tup_2 = test_tup2\n",
        "num_ids": 26
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a==b:\n        return a\n    else:\n        return b\n        \ndef maximum(a,b): \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a==b:\n        return a\n    else:\n        return b\n",
        "num_ids": 33
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n",
        "num_ids": 17
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if (b<a):\n        minimum=b\n    else:\n        minimum=a\n    return minimum\n",
        "num_ids": 33
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(type(a)!= int and type(b)!= int):\n        raise TypeError('Input is not an int')\n    if a<0 or b<0:\n        raise ValueError('Input cannot be negative')\n    elif a>b:\n        return b\n    else:\n        return a\n    \n    \n    # Find the minimum of the two numbers\n    # Hint: Can you use the built in function min(a,b) instead of directly passing in the arguments?\n    # Or: Can you use a try/except block here?\n    # Compare the two numbers using their function min(a,b) and store the result in a new variable and return the minimum element?\n    # Try to use a try/except block here.\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(type(a)!= int and type(b)!= int):\n        raise TypeError('Input is not an int')\n    if a<0 or b<0:\n        raise ValueError('Input cannot be negative')\n    elif a>b:\n        return b\n    else:\n        return a\n    # Find the maximum of the two numbers\n    # Hint: Can you use the built in function max(a,b) instead of directly passing in the arguments?\n    # Or: Can you use a try/except block here?\n    # Compare the two numbers using their function max(a,b) and store the result in a new variable and return the maximum element?\n    # Try to use a try/except block here.\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    if(type(a)!= int and type(b)!= int):\n        raise TypeError('Input is not an int')\n    if a<0 or b<0:\n        raise ValueError('Input cannot be negative')\n    elif a>b:\n        return b\n    else:\n        return a/b\n    # Find the average of the two numbers\n    # Hint: Can you use the built in function average(a,b) instead of directly passing in the arguments?\n    # Or: Can you use a try/except block here?\n    # Compare the two numbers using their function average(a,b) and store the result in a new variable and return the average element?\n    # Try to use a try/except block here.\ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if(type(a)!= int and type(b)!= int):\n        raise TypeError('Input is not an int')\n    if a<0 or b<0:\n        raise ValueError('Input cannot be negative')\n    elif a>b:\n        return b\n    else:\n        return a/b\n    # Find the median of the two numbers\n    # Hint: Can you use the built in function median(a,b) instead of directly passing in the arguments?\n    # Or: Can you use a try/except block here?\n    # Compare the two numbers using their function median(a,b) and store the result in a new variable and return the median element?\n    # Try to use a try/except block here.\ndef product(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    if(type(a)!= int and type(b)!= int):\n        raise TypeError('Input is not an int')\n    if a<0 or b<0:\n        raise ValueError('Input cannot be negative')\n    elif a>b:\n        return b\n    else:\n        return a*b\n    # Find the product of the two numbers\n    # Hint: Can you use the built in function product(a,b) instead of directly passing in the arguments?\n    # Or: Can you use a try/except block here?\n    # Compare the two numbers using their function product(a,b) and store the result in a new variable and return the product element?\n    # Try to use a try/except block here.\n",
        "num_ids": 171
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if b==0:\n        return a\n    return a if a<b else minimum(b,a-b)\n",
        "num_ids": 30
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        a,b = b,a\n",
        "num_ids": 18
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    print(min(a,b))\n    \n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(max(a,b))\n    \n    \ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    print(sum(a)/len(a))\n    \n    \ndef main():    \n    print('The output of this script is not included.')\n    # input()\n    a = int(input('Please enter an integer:'))\n    b = int(input('Please enter another integer:'))\n    if a > b:\n        maximum(a,b)\n    elif a < b:\n        minimum(a,b)\n    else:\n        average(a,b)\n",
        "num_ids": 113
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 36
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # your code here\n    return tuplex[0] in tuplex[1]\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_list = list(tuplex)\n    for i in tuplex_list:\n        if i in tuple1:\n            return True\n        else:\n            return False\n    return False",
        "num_ids": 50
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = tuple(tuplex)\n    tuple1 = tuple(tuple1)\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_tuple(tuple,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuple = tuple1\n    tuplex = tuple\n    if tuplex == tuple:\n        return True\n    else:\n        return False\n    \n    \n    \ndef tuples_equal(a,b):\n    '''\n    Write a function to compare a tuple to a another tuple.\n    '''\n    a = a[0]\n    b = b[0]\n    if tuple_equal(a,b):\n        return True\n    else:\n        return False\n    \n    \n    \ndef tuples_list(tuplex):\n    '''\n    Write a function to return a list containing the elements of a tuple.\n    '''\n    tuplex = list(tuplex)\n    tuple_list = []\n    for x in range(len(tuplex)):\n        tuple_list.append(tuplex[x])\n    return tuple_list\n",
        "num_ids": 57
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)): \n        if tuplex[i] == tuple1: \n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check = True\n    for i in tuplex:\n        if i not in tuple1:\n            check = False\n            break\n    return check\ndef list_check(list,tuple1):\n    '''\n    Write a function that takes in a list of elements and return whether the elements are present within the tuple.\n    '''\n    for i in range(0,len(list),1):\n        if list[i] not in tuple1:\n            check = False\n            break\n    return check\ndef check_list(list,tuple1):\n    '''\n    Write a function that takes a list and a tuple, and returns whether the elements in the tuple are present within the list.\n    '''\n    for i in range(0,len(list),1):\n        if list[i] not in tuple1:\n            check = False\n            break\n    return check\ndef check_dict(dict,tuple1):\n    '''\n    Write a function that takes a dictionary and a tuple, and returns whether the keys in the dictionary are present within the tuple.\n    '''\n    for i in range(0,len(dict),1):\n        if dict[i] not in tuple1:\n            check = False\n            break\n    return check\ndef check_string(string,tuple1):\n    '''\n    Write a function that takes in a string and a tuple, and returns whether the string is present within the tuple.\n    '''\n    if string not in tuple1:\n        check = False\n        break\n    return check\ndef check_set(set,tuple1):\n    '''\n    Write a function that takes a set and a tuple, and returns whether the elements in the tuple are present within the set.\n    '''\n    check = True\n    if tuple1 not in set:\n        check = False\n        break\n    return check\ndef find_set_in_set(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether any of the elements in the two sets are present in the two sets.\n    '''\n    check = False\n    for i in set1:\n        if i not in set2:\n            check = True\n            break\n    return check\ndef split_set(set1,set2):\n    '''\n    Write a function that takes in two sets and returns their sets.\n    '''\n    if len(set1)!= len(set2):\n        check = False\n        return check\n    result = {}\n    for i in range(0,len(set1),1):\n        if set1[i] not in result:\n            result[set1[i]] = [set2[i]]\n        else:\n            result[set1[i]].append(set2[i])\n    return result\ndef dict_contains_set(dict1,set1):\n    '''\n    Write a function that takes in a dictionary and a set, and returns whether each key in the dictionary is present in the set.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in set1:\n            check = False\n            break\n    return check\ndef check_dict_set(dict1,set1):\n    '''\n    Write a function that takes in a dictionary and a set, and returns whether all the keys are in the set.\n    '''\n    if set1 not in dict1:\n        check = False\n        break\n    return check\ndef check_string_set(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether the string is present in the two sets.\n    '''\n    for i in range(0,len(set1),1):\n        if set1[i] not in set2:\n            check = False\n            break\n    return check\ndef set_check(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether any of the elements in the two sets are present in the two sets.\n    '''\n    if set1.issubset(set2):\n        check = True\n    else:\n        check = False\n    return check\ndef set_check_empty(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether any element in the first set is present in the second set.\n    '''\n    if set1.issubset(set2):\n        check = True\n    else:\n        check = False\n    return check\ndef set_check_empty_empty(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether any element in the first set is present in the second set.\n    '''\n    if set1.issubset(set2):\n        check = True\n    else:\n        check = False\n    return check\ndef set_check_empty_none(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether any element in the first set is present in the second set.\n    '''\n    if set1.issubset(set2):\n        check = True\n    else:\n        check = False\n    return check\ndef set_check_none_empty(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether any element in the first set is present in the second set.\n    '''\n    if set1.issubset(set2):\n        check = True\n    else:\n        check = False\n    return check\ndef set_check_none_empty_none(set1,set2):\n    '''\n    Write a function that takes in two sets and returns whether any element in the first set is present in the second set.\n    '''\n    if set1.issubset(set2):\n        check = True\n    else:\n        check = False\n    return check\ndef dict_check(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and returns whether each key in the first dictionary is present in the second dictionary.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in dict2:\n            check = False\n            break\n    return check\ndef dict_check_empty(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and returns whether each key in the first dictionary is present in the second dictionary.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in dict2:\n            check = False\n            break\n    return check\ndef dict_check_none(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and returns whether each key in the first dictionary is present in the second dictionary.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in dict2:\n            check = False\n            break\n    return check\ndef dict_check_none_empty(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and returns whether each key in the first dictionary is present in the second dictionary.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in dict2:\n            check = False\n            break\n    return check\ndef dict_check_none_empty_none(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and returns whether each key in the first dictionary is present in the second dictionary.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in dict2:\n            check = False\n            break\n    return check\ndef dict_check_none_empty_none(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and returns whether each key in the first dictionary is present in the second dictionary.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in dict2:\n            check = False\n            break\n    return check\ndef dict_check_none_empty_none(dict1,dict2):\n    '''\n    Write a function that takes in two dictionaries and returns whether each key in the first dictionary is present in the second dictionary.\n    '''\n    for i in range(0,len(dict1),1):\n        if dict1[i] not in dict2:\n            chec",
        "num_ids": 34
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem in tuple1:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) > 0:\n        for item in tuplex:\n            if item not in tuple1:\n                return False\n            else:\n                return True\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # comment out this line if you don't want it\n    # return(x%2!= 0)\n    return x%2 == 0",
        "num_ids": 34
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 0\n",
        "num_ids": 12
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        return print('1')\n    else:\n        return print('0')\nfind_Parity(6",
        "num_ids": 37
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2 == 0):\n        return 'Even'\n    else:\n        return 'Odd'\n",
        "num_ids": 29
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # 1\n    # x = int(input(\"Input a number: \"))\n    # print(f\"The sum of the squares of all numbers less than or equal to {x} is: {x**2}\")\n",
        "num_ids": 52
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def is_odd(n):\n        '''\n        Return True if the number is odd, otherwise False.\n        '''\n        if n % 2!= 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return 0\n    else: \n        return 1\n",
        "num_ids": 25
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    is_odd = 0\n    if x % 2 == 0:\n        is_odd = 1\n    return is_odd\n",
        "num_ids": 31
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if (n < 10) and (n >= 0):\n        return n\n",
        "num_ids": 20
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def create_next_bigger(n):\n        a = list(str(n))\n        m = 1\n        for i in range(1, len(a)):\n            if int(a[i]) < int(a[i-1]):\n                m += 1\n        return str(int(m))\n    return create_next_bigger(n)\n",
        "num_ids": 88
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n[::-1]\n",
        "num_ids": 11
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n + 1\n",
        "num_ids": 8
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join([str(n%10) if n>9 else str(n//10) for n in [int(x) for x in str(n)]]))\n    \ndef get_next_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join([str(n%10) if n>9 else str(n//10) for n in [int(x) for x in str(n)]]))\n    \ndef solve(n):\n    '''\n    Write a function to check if a given number is a proper subset of another given number.\n    '''\n    return str(rearrange_smaller(n)) == str(rearrange_bigger(n))\n    \nif __name__ == '__main__':\n    print solve(90)",
        "num_ids": 47
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = list(str(n))\n    a[-1] = str(int(''.join(a[-1])[::-1]))\n    return int(''.join(a))\n",
        "num_ids": 48
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    current_num = n\n    n = n//10\n    while n>0:\n        current_num = n*10+current_num\n        n-=1\n    return current_num\n",
        "num_ids": 48
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # your code here\n    # raise NotImplementedError\n    pass\n",
        "num_ids": 20
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Output : 0 2 3 4 5 8 9 10 11 12 13 14 15\n    # For example, if input is 26, the next bigger number is 26 * 2 + 3 * 4 + 5 * 9 + 8 * 10 = 26 * 2 + 3 * 4 + 5 * 9 + 8 * 10 = 26 * 2 * 3 + 4 * 5 + 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 8 * 10 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 8 * 10 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 = 26 * 2 * 3 * 4 + 5 * 9 * 8 + 10 * 11 ",
        "num_ids": 2011
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    for x in range(0,n):\n        if n%10==0:\n            n//=10\n        else:\n            n*=10\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def find_k_smallest(a,b,k):\n        c = []\n        for i in range(len(a)):\n            for j in range(len(b)):\n                if a[i] + b[j] < k:\n                    c.append([a[i],b[j]])\n        return c\n    n1 = len(nums1)\n    n2 = len(nums2)\n    c = []\n    if n1 < n2:\n        a = nums1[:n1]\n        b = nums2[:n2]\n        c = find_k_smallest(a,b,k)\n    else:\n        a = nums2[:n2]\n        b = nums1[:n1]\n        c = find_k_smallest(a,b,k)\n    c = sorted(c)\n    result = []\n    for i in c:\n        result.append([i[0],i[1]])\n    return result\n    \ndef smallest_k_pairs(nums1, nums2, k):\n    '''\n    Write a function that accepts two arrays nums1 and nums2 and a desired k. It should find the smallest number of\n    pairs. That is, it should return nums1 and nums2 such that the number of elements in the\n    final array is k. Assume that the elements in the arrays have already been\n    sorted in the ascending order.\n    '''\n    n = len(nums1)\n    k = k - 1\n    if n < k:\n        return []\n    k_smallest_pairs = k_smallest_pairs(nums1,nums2,k)\n    m = len(k_smallest_pairs)\n    k_smallest_pairs_sorted = sorted(k_smallest_pairs, key = lambda x: x[1])\n    result = []\n    if k_smallest_pairs_sorted[m][0] == k_smallest_pairs_sorted[m][1]:\n        result.append([k_smallest_pairs_sorted[m][0],k_smallest_pairs_sorted[m][1]])\n    for i in range(n - k):\n        result.append([k_smallest_pairs_sorted[i][0],k_smallest_pairs_sorted[i][1]])\n    return result\n    \ndef smallest_k_pairs_naive(nums1, nums2, k):\n    '''\n    You are given two arrays, nums1 and nums2, where nums1[i] and nums2[j] are integers. The k largest elements in the arrays are numbers from nums1 to nums2.\n    Return a list of the k largest elements in the arrays. The list should be sorted in ascending order.\n    '''\n    result = []\n    k = k - 1\n    if len(nums2) < k:\n        return []\n    pq = []\n    heapq.heapify(pq)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pq, [abs(nums1[i] - nums2[j]), [i,j]])\n    result = []\n    while pq:\n        a = heapq.heappop(pq)[0]\n        b = heapq.heappop(pq)[1][0]\n        if b > k:\n            continue\n        if a < b:\n            heapq.heappush(pq, [a, [b,a]])\n        else:\n            heapq.heappush(pq, [b, [a,b]])\n    result = sorted(result)\n    return result\n",
        "num_ids": 234
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #  sort the numbers with increasing order\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    if k <= 1:\n        return 0\n    elif k == 2:\n        return 2\n    else:\n        for i in range(k):\n            if (i >= nums1.index(nums2[i])):\n                return i\n",
        "num_ids": 97
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1!= num2 and abs(num1 - num2) <= k:\n                heapq.heappush(h, [num1, num2])\n",
        "num_ids": 67
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    nums1.sort()\n    nums2.sort()\n    n = len(nums1)\n",
        "num_ids": 33
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pairs = []\n    heap = []\n    for i in range(len(nums1)):\n        smallest = nums1[i]\n        for j in range(i, len(nums1)):\n            if smallest > nums1[j]:\n                smallest = nums1[j]\n        heapq.heappush(heap, smallest)\n    for i in range(len(nums2)):\n        smallest = nums2[i]\n        for j in range(i, len(nums2)):\n            if smallest > nums2[j]:\n                smallest = nums2[j]\n        heapq.heappush(heap, smallest)\n    # print(heap)\n    # print(heapq.heappop(heap))\n    for i in range(len(heap)):\n        smallest = heapq.heappop(heap)\n        smallest_pair = [smallest, nums1[i]]\n        smallest_pairs.append(smallest_pair)\n    return smallest_pairs\n",
        "num_ids": 264
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    count = 0\n    for i in range(len(nums1)):\n        count += 1\n        heapq.heappush(heap, (nums1[i] * count, i))\n",
        "num_ids": 57
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Building the hashtable of numbers with key as the number of the pair and value as the index of the element\n    hashtable = {}\n    for n in nums1:\n        hashtable[n] = nums1.index(n)\n    for n in nums2:\n        hashtable[n] = nums2.index(n)\n",
        "num_ids": 83
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return 0\n    if k > len(nums1):\n        return len(nums1)\n    if k > len(nums2):\n        return len(nums2)\n    sorted_list = []\n    for i in range(len(nums1)):\n        heapq.heappush(sorted_list, (nums1[i] - nums2[i], nums1[i], nums2[i]))\n    k_nums1 = heapq.nlargest(k, sorted_list, key = lambda x: x[1])\n    k_nums2 = heapq.nsmallest(k, sorted_list, key = lambda x: x[1])\n    # print(k_nums1)\n    # print(k_nums2)\n    # print(nums1)\n    # print(nums2)\n    return len(k_nums1) + len(k_nums2)\n",
        "num_ids": 250
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h=[]\n    for i in range(0,len(nums1)):\n        for j in range(0,len(nums2)):\n            if nums1[i]==nums2[j]:\n                continue\n            heapq.heappush(h, (nums1[i]*nums2[j], nums1[i], nums2[j]))\n    count=0\n    for i in range(k):\n        if len(h)!=0:\n            now=heapq.heappop(h)[2]\n            heapq.heappop(h)\n            count+=1\n            if count==k:\n                break\n    return count",
        "num_ids": 167
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # heapq.nlargest(k, nums1, key=None, n=None, maxsize=-1, ret=False)\n    nums1.sort()\n    nums2.sort()\n    count = 0\n    pair = []\n    while True:\n        if count >= k:\n            break\n        if len(nums1) < k:\n            return []\n        if len(nums2) < k:\n            return []\n        if nums1[count] == nums2[count]:\n            pair.append(nums1[count])\n            count += 1\n        else:\n            break\n    return pair\n",
        "num_ids": 151
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #create dictionary\n    dictionary={}\n    #loop through all keys of list\n    for key in list1[0]:\n        dictionary[key]=list1[0][key]\n    for key in list1[1]:\n        dictionary[key]=list1[1][key]\n    #loop through all keys of dictionary\n    for key in dictionary.keys():\n        #check if value is greater than all values in dictionary\n        if dictionary[key]>dictionary[key+1]:\n            #add to dictionary\n            dictionary[key]=dictionary[key+1]\n    #loop through dictionary\n    for key in dictionary.keys():\n        #check if value is greater than all values in dictionary\n        if dictionary[key]>dictionary[key+1]:\n            #add to dictionary\n            dictionary[key]=dictionary[key+1]\n    return dictionary[0]",
        "num_ids": 205
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product=[]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product=list1[i]*list1[j]\n            min_product.append(product)\n",
        "num_ids": 64
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_val = sys.maxsize\n    i = 0\n    while i < len(list1):\n        val_1 = list1[i][0]\n        val_2 = list1[i][1]\n        val_1_product = val_1*val_2\n        val_2_product = val_2*val_1\n        if val_1_product < min_val:\n            min_val = val_1_product\n            index_val_1 = i\n        if val_2_product < min_val:\n            min_val = val_2_product\n            index_val_2 = i\n        i += 1\n    return (min_val, index_val_1, index_val_2)\n",
        "num_ids": 174
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_price = 0\n    min_product = 0\n    if len(list1) == 0:\n        return 0\n    else:\n        for i in range(len(list1)):\n            for j in range(i + 1, len(list1)):\n                if list1[i][0] <= list1[j][0] and list1[i][1] <= list1[j][1]:\n                    # print(list1[i][1], list1[j][1])\n                    # print(\"PRODUCT\", i + 1, j + 1)\n                    # print(\"PRICE\", list1[i][0], list1[j][0])\n                    # print(\"PRICE\", list1[i][1], list1[j][1])\n                    # print(list1[i][1] * list1[j][1])\n                    min_price = list1[i][1] * list1[j][1]\n                    min_product = min(min_product, min_price)\n    return min_product\n",
        "num_ids": 241
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][1]*list1[1][1]\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            prod = list1[i][1]*list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod\n",
        "num_ids": 97
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_tuple = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product_tuple += list1[i][0] * list1[j][0]\n    return product_tuple\n",
        "num_ids": 69
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][1]*list1[1][1]\n    list_index = 0\n    for i in range(len(list1)-1):\n        if(list1[i][1]<list1[i+1][1]):\n            list_index = i\n    return list_index+1\n",
        "num_ids": 81
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = None\n    temp_min = None\n    for item in list1:\n        if product is None:\n            product = item[0]\n            temp_min = item[1]\n        elif item[0] < product and item[1] < product:\n            product = item[0]\n            temp_min = item[1]\n    return product, temp_min\n",
        "num_ids": 91
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0][0]*list1[0][1]\n    min_val = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        if list1[i][0] < list1[i-1][0]:\n            min_val = list1[i][0]*list1[i][1]\n            min_index = i\n    return min_val\n",
        "num_ids": 121
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # remove duplicates from list\n    list1 = list(dict.fromkeys(list1))\n",
        "num_ids": 25
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Your code here\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 64
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in listval:\n        min=i\n        min=min\n        return min\n",
        "num_ids": 24
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    if listval[0] == listval[-1]:\n        return listval[0]\n    else:\n        if listval[0] < listval[-1]:\n            return listval[0]\n        else:\n            return listval[-1]\n    \n    \nprint(min_val([0,0,0,1,1,1,2,2,3,3]))\nprint(min_val([1,2,3,4,5,6,7,8,9,10]))\nprint(min_val([0,0,0,1,1,1,2,2,3,3]))\n",
        "num_ids": 184
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = 0\n    for item in listval:\n        if item < minimum:\n            minimum = item\n    return minimum\n",
        "num_ids": 31
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    i = 1\n    while(i < len(listval)):\n        if(val < listval[i]):\n            val = listval[i]\n        i += 1\n    return val\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    if len(listval)==1:\n        return listval[0]\n    min=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]<min:\n            min=listval[i]\n    return min\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    if len(listval)==1:\n        return listval[0]\n    max=listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]>max:\n            max=listval[i]\n    return max\ndef media(listval):\n    '''\n    Write a function to find the average value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    if len(listval)==1:\n        return listval[0]\n    media=listval[0]\n    for i in range(1,len(listval)):\n        media=media+(listval[i])\n    return media/len(listval)\ndef mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    if len(listval)==1:\n        return listval[0]\n    media=media(listval)\n    return round(media,1)\ndef mode(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    if len(listval)==1:\n        return listval[0]\n    m=[listval[0]]\n    for i in range(1,len(listval)):\n        if listval[i] in m:\n            m[m.index(listval[i])]+=1\n        else:\n            m.append(listval[i])\n    return m\ndef sum_of_squares(listval):\n    '''\n    Write a function to find the sum of squares of a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    sum=0\n    for i in range(len(listval)):\n        sum+=listval[i]*listval[i]\n    return sum\ndef sum_of_squares_with_all_values(listval):\n    '''\n    Write a function to find the sum of squares of a given heterogeneous list with all values.\n    '''\n    if len(listval)==0:\n        return None\n    sum=0\n    for i in range(len(listval)):\n        sum+=listval[i]*listval[i]\n    return sum\ndef sum_of_squares_with_sum(listval):\n    '''\n    Write a function to find the sum of squares of a given heterogeneous list with sum.\n    '''\n    if len(listval)==0:\n        return None\n    sum=0\n    for i in range(len(listval)):\n        sum+=listval[i]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None:\n            min_val = val\n        elif val < min_val:\n            min_val = val\n    return min_val\n",
        "num_ids": 56
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min = listval[0]\n    for item in listval:\n        if min > item:\n            min = item\n    return min\n",
        "num_ids": 50
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        if listval[0] > listval[1]:\n            return listval[1]\n        else:\n            return listval[0]\n",
        "num_ids": 59
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_word += word[i].lower()\n        elif word[i] =='':\n            camel_word += '_'\n        elif word[i] == '-':\n            camel_word += '_-'\n        else:\n            camel_word += word[i]\n    return camel_word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    snake_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            snake_word += word[i].lower()\n        elif word[i] =='':\n            snake_word += '_'\n        elif word[i] == '-':\n            snake_word += '-'\n        else:\n            snake_word += word[i]\n    return snake_word\ndef snake_to_snake_or_camel(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    snake_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            snake_word += word[i].lower()\n        elif word[i] =='':\n            snake_word += '_'\n        elif word[i] == '-':\n            snake_word += '-'\n        else:\n            snake_word += word[i]\n    return snake_to_camel(snake_word)\n",
        "num_ids": 117
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", word).lower()\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r' \\1_\\2', word).title()\n",
        "num_ids": 36
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join(words[0].title() + ''.join(w.capitalize() for w in words[1:]) for w in words)\n",
        "num_ids": 48
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'((?<=[A-Z])[A-Z]+)', r' \\1', word)\n    word = re.sub(r'((?<=[a-z])(?=[A-Z])[a-z])', r' \\1', word)\n    word = re.sub(r'([a-zA-Z])', r' \\1', word)\n    word = re.sub(r'([^A-Za-z0-9])(?=[A-Z])', r' \\1', word)\n    word = re.sub(r'([^a-zA-Z])', r' \\1', word)\n    word = re.sub(r'([^\\d])(?=[\\w])', r' \\1', word)\n    return word\n",
        "num_ids": 195
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # If '_' is present in the string, remove it\n    if '_' in word:\n        word = word.replace('_','')\n",
        "num_ids": 40
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_regex = re.compile(\"([a-z])([A-Z])\")\n    return word_regex.sub(r\"\\1 \\2\", word)\ndef is_alphabet(char):\n    '''\n    Check if a given character is alphabete or not.\n    '''\n    return char.isalpha()\n",
        "num_ids": 10
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert any internal keys to camel case\n    return re.sub('(((?<=[A-Z])[A-Z])|([A-Z])(?=[A-Z]))', '_\\\\1', word)\n",
        "num_ids": 55
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "num_ids": 36
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_odd = []\n    for i in l:\n        if i % 2!= 0:\n            l_odd.append(i)\n    return l_odd\n",
        "num_ids": 42
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in l:\n        if i % 2 == 1:\n            odds.append(i)\n    return odds\n    \n    \ndef calculate_mean(l):\n    '''\n    Write a python function that returns the average of the elements of a list.\n    '''\n    total = 0\n    for i in l:\n        total += i\n    mean = total/len(l)\n    return mean\n    \n    \ndef filter_numbers(l):\n    '''\n    Write a python function that removes any numbers that are more than ten from the list.\n    '''\n    new_l = []\n    for i in l:\n        if i >= 10:\n            new_l.append(i)\n    return new_l\n    \n    \ndef upper_case(l):\n    '''\n    Write a python function that converts the string 'upper' to '_UPPERCASE'\n    '''\n    for i in l:\n        if i.isupper():\n            l[l.index(i)] = \"_UPPERCASE\"\n    return l\n    \n    \ndef lower_case(l):\n    '''\n    Write a python function that converts the string 'lower' to '_LOWERCASE'\n    '''\n    for i in l:\n        if i.islower():\n            l[l.index(i)] = \"_LOWERCASE\"\n    return l\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function that checks whether a string is a palindrome.\n    '''\n    str_s = str(s)\n    if str_s[::-1] == str_s:\n        return True\n    else:\n        return False\n    \n    \ndef reverse_string(s):\n    '''\n    Write a python function that returns the reversed string.\n    '''\n    str_s = str(s)\n    return str_s[::-1]\n    \n    \ndef reverse_words(s):\n    '''\n    Write a python function that returns the reversed string\n    '''\n    str_s = str(s)\n    return str_s[::-1]\n    \n    \ndef reverse_words2(s):\n    '''\n    Write a python function that returns the reversed string.\n    '''\n    str_s = str(s)\n    return str_s[::-1]\n    \n    \ndef join(l):\n    '''\n    Write a python function that joins the elements of a list in the form of a string.\n    '''\n    str_l = ''\n    for i in l:\n        str_l += i\n    return str_l\n    \n    \ndef remove_times(l):\n    '''\n    Write a python function that removes any numbers that have a times value in them.\n    '''\n    new_l = []\n    for i in l:\n        if i.isdigit():\n            new_l.append(i)\n    return new_l\n    \n    \ndef merge_lists(l1, l2):\n    '''\n    Write a python function that merges two lists together.\n    '''\n    new_l = []\n    for i in range(len(l1)):\n        new_l.append(l1[i])\n    for i in range(len(l2)):\n        new_l.append(l2[i])\n    return new_l\n    \n    \ndef find_the_index(l, number):\n    '''\n    Write a python function that returns the index of a number from a list.\n    '''\n    for i in range(len(l)):\n        if l[i] == number:\n            return i\n    return -1\n    \n    \ndef count_occurences(l, number):\n    '''\n    Write a python function that returns the number of times a given number appears in the list.\n    '''\n    occurences = 0\n    for i in l:\n        if i == number:\n            occurences += 1\n    return occurences\n    \n    \ndef reverse_strings(s):\n    '''\n    Write a python function that returns the reverse of the given string.\n    '''\n    str_s = str(s)\n    return str_s[::-1]\n    \n    \ndef is_monotonic(l):\n    '''\n    Write a python function that checks whether a list of numbers is monotonic.\n    '''\n    \n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n    \n    \ndef max_abs(l):\n    '''\n    Write a python function that returns the maximum absolute value of a list.\n    '''\n    max_abs_val = 0\n    for i in l:\n        abs_val = abs(i)\n        if abs_val > max_abs_val:\n            max_abs_val = abs_val\n    return max_abs_val\n    \n    \ndef max_abs_list(l):\n    '''\n    Write a python function that returns the maximum absolute value of a list.\n    '''\n    max_abs_list = []\n    for i in l:\n        abs_val = abs(i)\n        if abs_val > max_abs_list[0]:\n            max_abs_list = [abs_val]\n        elif abs_val > max_abs_list[1]:\n            max_abs_list = [abs_val, i]\n        elif abs_val > max_abs_list[2]:\n            max_abs_list = [abs_val, i, i]\n        elif abs_val > max_abs_list[3]:\n            max_abs_list = [abs_val, i, i, i]\n    return max_abs_list\n    \n    \ndef sum_of_squares(l):\n    '''\n    Write a python function that returns the sum of squares of a list.\n    '''\n    sum_of_squares_val = 0\n    for i in l:\n        sum_of_squares_val += i ** 2\n    return sum_of_squares_val\n    \n    \ndef merge_numbers(l1, l2):\n    '''\n    Write a python function that merges two lists together.\n    '''\n    new_l = []\n    for i in range(len(l1)):\n        new_l.append(l1[i])\n    for i in range(len(l2)):\n        new_l.append(l2[i])\n    return new_l\n    \n    \ndef is_all_odd(l):\n    '''\n    Write a python function that checks whether all numbers in a list are odd.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            return False\n    return True\n    \n    \ndef find_all_odds(l):\n    '''\n    Write a python function that returns a list of all odds in a given list.\n    '''\n    new_l = []\n    for i in l:\n        if i % 2!= 0:\n            new_l.append(i)\n    return new_l\n    \n    \ndef count_all_odds(l):\n    '''\n    Write a python function that returns the number of all odds in a given list.\n    '''\n    count = 0\n    for i in l:\n        if i % 2!= 0:\n            count += 1\n    return count\n    \n    \ndef add_to_list(l):\n    '''\n    Write a python function that adds a list of numbers to a given list.\n    '''\n    new_l = []\n    for i in l:\n        new_l.append(i)\n    return new_l\n    \n    \ndef remove_from_list(l):\n    '''\n    Write a python function that removes a list of numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        new_l.append(i)\n    return new_l\n    \n    \ndef remove_all_from_list(l):\n    '''\n    Write a python function that removes all numbers from a given list.\n    '''\n    new_l = []\n    for i in l:\n        new_l.append(i)\n    return new_l\n    \n    \ndef remove_digits(l)",
        "num_ids": 44
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_new = []\n    for i in l:\n        if i%2 == 0:\n            l_new.append(i)\n    return l_new\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in l:\n        if (i % 2) == 0:\n            odds.append(i)\n    return odds\n",
        "num_ids": 39
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # your code here\n    l1 = []\n    l2 = []\n    for i in range(0,len(l)):\n        if l[i] % 2 == 1:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    for i in range(0,len(l1)):\n        l.remove(l1[i])\n    for i in range(0,len(l2)):\n        l.remove(l2[i])\n    return l\n",
        "num_ids": 128
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code goes here\n    l.sort()\n    res=[]\n    for i in range(len(l)):\n        if l[i]%2==1:\n            res.append(l[i])\n    print(res)\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    l.sort(reverse=True)\n    return l\n",
        "num_ids": 24
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index = n-1\n    return list1[index]\n",
        "num_ids": 17
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \ndef extract_nth_element_of_list(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \ndef convert_nth_to_string(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][2]\n    \ndef extract_nth_second_element(list1):\n    '''\n    Write a function to extract the nth second element from a given list of tuples.\n    '''\n    return list1[0][2]\n    \ndef extract_nth_second_element_of_list(list1):\n    '''\n    Write a function to extract the nth second element from a given list of tuples.\n    '''\n    return list1[0][2]\n    \ndef reverse_string_list(list1):\n    '''\n    Write a function to reverse a given list.\n    '''\n    return list1[::-1]\n    \ndef extract_nth_first_element(list1):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[-1]\n    \ndef extract_nth_first_element_of_list(list1):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[-1]\n    \ndef convert_nth_to_string(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][2]\n    \ndef convert_nth_to_string_2(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][1] + list1[0][2]\n    \ndef convert_nth_to_string_3(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][0] + list1[0][2]\n    \ndef nth_to_string_1(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[-1][1] + list1[-1][2]\n    \ndef nth_to_string_2(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[-1][0] + list1[-1][2]\n    \ndef nth_to_string_3(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[-1][0] + list1[-1][1]\n    \ndef extract_nth_first_element_of_list(list1):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[0][0]\n    \ndef extract_nth_first_element_of_list_2(list1):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[0][0]\n    \ndef extract_nth_first_element_of_list_3(list1):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[0][0]\n    \ndef extract_nth_second_element_of_list(list1):\n    '''\n    Write a function to extract the nth second element from a given list of tuples.\n    '''\n    return list1[0][1]\n    \ndef extract_nth_second_element_of_list_2(list1):\n    '''\n    Write a function to extract the nth second element from a given list of tuples.\n    '''\n    return list1[0][1]\n    \ndef extract_nth_second_element_of_list_3(list1):\n    '''\n    Write a function to extract the nth second element from a given list of tuples.\n    '''\n    return list1[0][1]\n    \ndef list_nth_to_string_1(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][2]\n    \ndef list_nth_to_string_2(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][3]\n    \ndef list_nth_to_string_3(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][4]\n    \ndef list_nth_to_string_4(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][5]\n    \ndef list_nth_to_string_5(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][6]\n    \ndef list_nth_to_string_6(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][7]\n    \ndef list_nth_to_string_7(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][8]\n    \ndef list_nth_to_string_8(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][9]\n    \ndef list_nth_to_string_9(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][10]\n    \ndef list_nth_to_string_10(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][11]\n    \ndef list_nth_to_string_11(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][12]\n    \ndef list_nth_to_string_12(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][13]\n    \ndef list_nth_to_string_13(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][14]\n    \ndef list_nth_to_string_14(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][15]\n    \ndef list_nth_to_string_15(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][16]\n    \ndef list_nth_to_string_16(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][17]\n    \ndef list_nth_to_string_17(list1):\n    '''\n    Write a function to convert a given list of tuples into a string.\n    '''\n    return list1[0][18]\n    \ndef list_nth_to_string_18(list1):\n    ''",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # TODO: modify this function\n    return list1[n]\n",
        "num_ids": 19
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = None\n    if n >= len(list1):\n        nth_element = list1[-1]\n    else:\n        nth_element = list1[n]\n    return nth_element\n",
        "num_ids": 56
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # nth element of the list\n    index = 0\n    # Initialize an empty string\n    nth_element = \"\"\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    ",
        "num_ids": 11
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\n",
        "num_ids": 17
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = any(value in list1 for value in list2)\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # pass\n    if (len(list1)<2):\n        return False\n    elif (len(list2)<2):\n        return False\n    elif (list2[0] in list1):\n        return True\n    else:\n        return False\n    \nlist1=[1,2,3,4,5,6,7,8,9]\nlist2=[4,5,6,7,8,9,0,1,2]\nprint(overlapping(list1,list2))",
        "num_ids": 123
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list1[j] and j>i:\n                return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\ndef intersection(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence intersects another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\ndef is_double(x,y):\n    if (x>y):\n        return False\n    if (y>x):\n        return True\n    return False\ndef is_left_tuple(tuple):\n    '''\n    Write a python function to check whether a tuple is a tuple or not.\n    '''\n    if(len(tuple)==0):\n        return True\n    else:\n        return False\ndef is_sum(list1,list2):\n    '''\n    Write a python function to check whether two lists are sum or not.\n    '''\n    if(len(list1)!=len(list2)):\n        return False\n    for i in range(0,len(list1)):\n        if(list1[i]!=list2[i]):\n            return False\n    return True\ndef find_longest_substring(string1,string2):\n    '''\n    Write a python function to find the longest string substring in a given string.\n    '''\n    if(len(string1)!=len(string2)):\n        return \"\"\n    max_len=0\n    for i in range(0,len(string1)):\n        if(string1[i]!=string2[i]):\n            break\n        else:\n            max_len=max(max_len,len(string1))\n    return string1[0:max_len]\n",
        "num_ids": 97
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #check if sequence len is equal to zero\n    if len(list1)==0 or len(list2)==0:\n        return False\n    #check whether all values in sequence are same\n    if list1[0]!=list2[0]:\n        return False\n    #check whether any value in sequence is not present in list\n    for x in range(1,len(list1)):\n        if list1[x]!=list2[x]:\n            return False\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    counter = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                counter +=1\n    if counter == len(list1):\n        return True\n    else:\n        return False\n    \n    # Write a Python program to check whether a given string is a permutation of a given string or not.\n",
        "num_ids": 85
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    #passed in 2 parameters\n    #returns True if both sequence are non empty\n    def overlapping(list1,list2):\n        if list1 == [] or list2 == []:\n            return True\n        elif list1[0] == list2[0]:\n            return True\n        elif list1[0] < list2[0]:\n            return False\n        elif list1[-1] == list2[-1]:\n            return True\n        elif list1[-1] > list2[-1]:\n            return False\n        else:\n            return False\n",
        "num_ids": 140
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result=True\n    for i in list1:\n        if i in list2:\n            result=False\n    return result\n    \nlist1=[\"hello\",\"goodbye\",\"hello\"]\nlist2=[\"hi\",\"hello\",\"bye\"]\nprint(overlapping(list1,list2))",
        "num_ids": 69
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #create empty dictionary\n    dic={}\n    #iterate through values\n    for i in list1:\n        #check the value in dictionary\n        if i in dic.keys():\n            #increment the count of the value in dictionary\n            dic[i]+=1\n        else:\n            #add the value in the dictionary\n            dic[i]=1\n    #check if any value in the dictionary is repeated\n    for j in list2:\n        #if that value is in the dictionary\n        if j in dic.keys():\n            #increment the count of the value in dictionary\n            dic[j]+=1\n        else:\n            #if value is not in the dictionary\n            return False\n    #return True if no repeats occur\n    return True if len(dic)==len(list1) else Fals",
        "num_ids": 195
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    i = 0\n    res = None\n    while (i < len(arr)):\n        prod = 1\n        while (i < len(arr)):\n            prod = prod*arr[i]\n            i += 1\n        if (res == None or prod < res):\n            res = prod\n        i = 0\n    return res\n",
        "num_ids": 82
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    largest = arr[0]\n    i = 0\n    while i < len(arr):\n        if arr[i] > largest:\n            largest = arr[i]\n        i += 1\n    return (largest,i)\n",
        "num_ids": 55
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)==0:\n        return 0\n    max_product = arr[0]\n    for i in range(len(arr)):\n        curr_product = arr[i]\n        for j in range(i+1,len(arr)):\n            curr_product *= arr[j]\n            if curr_product > max_product:\n                max_product = curr_product\n    return max_product\n",
        "num_ids": 105
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for num in arr:\n        if num > max_product:\n            max_product = num\n",
        "num_ids": 35
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -1\n    num_list = []\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            num_list = [arr[i], arr[i]]\n            max_product = arr[i]\n    return (max_product, num_list)\n",
        "num_ids": 78
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product=0\n    for i in arr:\n        for j in arr:\n            if i*j>max_product:\n                max_product=i*j\n    return max_product\n",
        "num_ids": 49
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = float(\"-inf\")\n    # find the first index and max_prod = arr[0]\n",
        "num_ids": 31
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product, (product, arr)\n",
        "num_ids": 38
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest_product = 0\n    for i in arr:\n        product = i * i\n        if product > highest_product:\n            highest_product = product\n    return (highest_product,arr.index(highest_product))\n",
        "num_ids": 55
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = dict() \n    for i in Input: \n        d[i[0]] = d.get(i[0], 0) + 1\n    for k, v in d.items(): \n        if v == 1: \n            return k \n",
        "num_ids": 63
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code here\n    pass \n",
        "num_ids": 12
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    temp = []\n    for tup in Input:\n        if tup not in temp:\n            temp.append(tup)\n    if len(temp)!= 0:\n        return temp[0]\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    f = []\n    for x in Input:\n        f.append(x[0])\n        \n    return f\n    \ndef first_item(input_list):\n    '''\n    Write a function to return the first item from the given list.\n    '''\n    \n    return input_list[0][0]\n    \ndef second_item(input_list):\n    '''\n    Write a function to return the second item from the given list.\n    '''\n    return input_list[0][1]\n    \ndef third_item(input_list):\n    '''\n    Write a function to return the third item from the given list.\n    '''\n    return input_list[0][2]\n    \ndef fourth_item(input_list):\n    '''\n    Write a function to return the fourth item from the given list.\n    '''\n    return input_list[0][3]\n    \ndef fifth_item(input_list):\n    '''\n    Write a function to return the fifth item from the given list.\n    '''\n    return input_list[0][4]\n    \ndef sixth_item(input_list):\n    '''\n    Write a function to return the sixth item from the given list.\n    '''\n    return input_list[0][5]\n    \ndef seventh_item(input_list):\n    '''\n    Write a function to return the seventh item from the given list.\n    '''\n    return input_list[0][6]\n    \ndef eighth_item(input_list):\n    '''\n    Write a function to return the eighth item from the given list.\n    '''\n    return input_list[0][7]\n    \ndef nineth_item(input_list):\n    '''\n    Write a function to return the nineth item from the given list.\n    '''\n    return input_list[0][8]\n    \ndef tenth_item(input_list):\n    '''\n    Write a function to return the tenth item from the given list.\n    '''\n    return input_list[0][9]\n    \ndef eleventh_item(input_list):\n    '''\n    Write a function to return the eleventh item from the given list.\n    '''\n    return input_list[0][10]\n    \ndef twelfth_item(input_list):\n    '''\n    Write a function to return the twelfth item from the given list.\n    '''\n    return input_list[0][11]\n    \ndef uffth_item(input_list):\n    '''\n    Write a function to return the uffth item from the given list.\n    '''\n    return input_list[0][12]\n    \ndef tenth_of_nineth_item(input_list):\n    '''\n    Write a function to return the tenth of nineth item from the given list.\n    '''\n    return input_list[0][13]\n    \ndef fifth_of_twelfth_item(input_list):\n    '''\n    Write a function to return the fifth of twelfth item from the given list.\n    '''\n    return input_list[0][14]\n    \ndef fourth_of_tenth_item(input_list):\n    '''\n    Write a function to return the fourth of tenth item from the given list.\n    '''\n    return input_list[0][15]\n    \ndef third_of_eighth_item(input_list):\n    '''\n    Write a function to return the third of eleventh item from the given list.\n    '''\n    return input_list[0][16]\n    \ndef second_of_ninth_item(input_list):\n    '''\n    Write a function to return the second of nineth item from the given list.\n    '''\n    return input_list[0][17]\n    \ndef first_of_tenth_of_fifth_item(input_list):\n    '''\n    Write a function to return the first of fifth item from the given list.\n    '''\n    return input_list[0][18]\n    \ndef tenth_of_sixth_item(input_list):\n    '''\n    Write a function to return the tenth of sixth item from the given list.\n    '''\n    return input_list[0][19]\n    \ndef nth_of_tenth_of_seventh_item(input_list):\n    '''\n    Write a function to return the nth of tenth item from the given list.\n    '''\n    return input_list[0][20]\n    \ndef tenth_of_eighth_of_seventh_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return input_list[0][21]\n    \ndef nth_of_tenth_of_ninth_item(input_list):\n    '''\n    Write a function to return the nth of tenth item from the given list.\n    '''\n    return input_list[0][22]\n    \ndef tenth_of_tenth_of_eleventh_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return input_list[0][23]\n    \ndef tenth_of_ninth_of_tenth_item(input_list):\n    '''\n    Write a function to return the tenth of nineth item from the given list.\n    '''\n    return input_list[0][24]\n    \ndef tenth_of_tenth_of_ninth_item(input_list):\n    '''\n    Write a function to return the tenth of tenth item from the given list.\n    '''\n    return input_list[0][25]\n    \ndef tenth_of_eighth_of_ninth_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return input_list[0][26]\n    \ndef tenth_of_ninth_of_ninth_item(input_list):\n    '''\n    Write a function to return the tenth of ninth item from the given list.\n    '''\n    return input_list[0][27]\n    \ndef tenth_of_ninth_of_tenth_item(input_list):\n    '''\n    Write a function to return the tenth of tenth item from the given list.\n    '''\n    return input_list[0][28]\n    \ndef tenth_of_tenth_of_eleventh_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return input_list[0][29]\n    \ndef tenth_of_eleventh_of_tenth_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return input_list[0][30]\n    \ndef nth_of_tenth_of_tenth_item(input_list):\n    '''\n    Write a function to return the nth of tenth item from the given list.\n    '''\n    return input_list[0][31]\n    \ndef tenth_of_eleventh_of_tenth_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return input_list[0][32]\n    \ndef nth_of_tenth_of_tenth_item(input_list):\n    '''\n    Write a function to return the nth of tenth item from the given list.\n    '''\n    return input_list[0][33]\n    \ndef tenth_of_tenth_of_eleventh_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return input_list[0][34]\n    \ndef tenth_of_ninth_of_tenth_item(input_list):\n    '''\n    Write a function to return the tenth of ninth item from the given list.\n    '''\n    return input_list[0][35]\n    \ndef tenth_of_eleventh_of_ninth_item(input_list):\n    '''\n    Write a function to return the tenth of eleventh item from the given list.\n    '''\n    return inpu",
        "num_ids": 6
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    i = 0\n    # loop through list\n    while i < len(Input):\n        # if first element in list is not common\n        if Input[i][0]!= Input[i+1][0]:\n            # remove first element from list\n            Input.pop(i)\n        else:\n            i += 1\n    # remove last element from list\n    if Input[i][0] == Input[i+1][0]:\n        # Remove last element from list\n        Input.pop(i+1)\n    # return list\n    return Input\n",
        "num_ids": 130
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in Input:\n        if i not in lst:\n            lst.append(i)\n    return lst\n",
        "num_ids": 38
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = list(Input)\n    output = []\n    for x in range(len(lst)):\n        for y in range(x+1,len(lst)):\n            if lst[x] == lst[y]:\n                output.append((lst[x],lst[y]))\n    return output\n",
        "num_ids": 81
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = set(Input) & set(Input)\n    return list(common_first)\n",
        "num_ids": 26
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # create an empty list \n    result = []\n    \n    # iterate over the tuple \n    for x in Input: \n    \n        # if first element of tuple is same as first element \n        # of the other tuple then add it to result \n        if x[0] == x[1]: \n            result.append(x) \n    \n    # if there is any element with same first element \n    # return that element \n    if len(result)!= 0: \n    \n        # return first element of list \n        return result[0][0] \n    \n    # return empty list \n    return result \n",
        "num_ids": 155
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max = 0\n    for i in range(len(lst)): \n        if(max < lst[i]): \n            max = lst[i] \n            index = i \n    return index\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ = lst[0]\n    for i in lst:\n        if i > max_:\n            max_ = i\n    return max_\n",
        "num_ids": 39
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if (i!= j):\n                if lst[i][1] < lst[j][1]:\n                    max_length = max(max_length, len(lst[i]))\n    return max_length\n",
        "num_ids": 88
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    if len(lst)>1:\n        if lst[0] == lst[1]:\n            return lst[0]\n        return Find_Max(lst[1:])\n    else:\n        return lst[0]\n        \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort()\n    if len(lst)>1:\n        if lst[0] == lst[1]:\n            return lst[0]\n        return Find_Min(lst[1:])\n    else:\n        return lst[0]\n",
        "num_ids": 67
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxLen = 0\n    for i in lst:\n        if len(i) > maxLen:\n            maxLen = len(i)\n    return maxLen",
        "num_ids": 40
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = lst.copy()\n    lst.sort()\n    max_length = 0\n    for i in range(0, len(lst)):\n        max_length = max(max_length, len(lst[i]))\n    return max_length\n",
        "num_ids": 67
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_length = len(lst)\n    current_max_length = 0\n    for i in lst:\n        if current_max_length < i:\n            current_max_length = i\n",
        "num_ids": 51
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if i>max:\n            max=i\n    return max\n    # OR\n    # max=lst.index(max(lst))\n    # return max\n    # Write a python function to find the element of a list having minimum length.\n",
        "num_ids": 73
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = list(lst)\n    for i in range(len(lst)):\n        if lst[i] == max(lst):\n            return i\n    return -1\n",
        "num_ids": 48
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for ele in lst:\n        if ele > max:\n            max = ele\n    return max\nlst = [3,4,5,8,8,4,7,4]\nprint(Find_Max(lst))\n",
        "num_ids": 66
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total = total + x\n    print(total)\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    length_of_list = len(list1)\n    \n    sum = 0\n    \n    for i in range(length_of_list):\n        sum += list1[i]\n    \n    return sum\n    \n    \n    \ndef main():\n    '''\n    Write a function that takes a list of numbers and returns a new list with each number rounded to 2 decimal places.\n    '''\n    \n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 28
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length=len(list1)\n    result=[]\n    for i in range(0,length):\n        round=round(list1[i],2)\n        result.append(round)\n    print(f'{result}')\n",
        "num_ids": 58
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    # write a loop to get the lengths of the numbers in the list\n    for i in list1:\n        total_sum += i\n    print(total_sum)\n    print(len(list1))\n",
        "num_ids": 57
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if len(list1) == 0:\n        return 0\n    total = 0\n    for number in list1:\n        total += number\n    return total * len(list1)\n    \ndef round_and_sum_no_zero(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list, without zero numbers, and print the total multiplied by the number of numbers.\n    '''\n    if len(list1) == 0:\n        return 0\n    total = 0\n    for number in list1:\n        if number > 0:\n            total += number\n    return total * len(list1)\n    \ndef max_even(list1):\n    '''\n    Write a function to check if the first element of a list is even and print it as a string.\n    '''\n    if len(list1) == 0:\n        return 'No values'\n    if len(list1) % 2 == 0:\n        list1.remove(list1[0])\n        return str(list1[0]) +'is even'\n    else:\n        return str(list1[0]) +'is odd'\n",
        "num_ids": 79
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(list1)\n    length = len(list1)\n    print(length)\n    sum = 0\n    for item in list1:\n        print(item)\n        sum += item\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    total_sum = 0\n    for i in range(len(list1)):\n        total_sum += list1[i]\n    return total_sum\n",
        "num_ids": 67
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for num in list1:\n        print(round(num, 1))\n        \n",
        "num_ids": 22
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_ = 0\n    num_list = []\n    for item in list1:\n        num_list.append(int(item))\n    num_list.sort()\n    for item in num_list:\n        sum_ += item\n    print(sum_ * len(num_list))\n    \ndef main():\n    '''\n    Write a function that prints your name, your age, and your address.\n    '''\n    # Replace the blanks in this code with the results of your function.\n    print('Your name:', name)\n    print('Your age:', age)\n    print('Your address:', address)\n",
        "num_ids": 49
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i, 2)\n    return sum * len(list1)\n    \nlist1 = [1, 5, 2, 4, 8, 0, 6, 9, 1, 9, 2, 3, 1]\nprint(round_and_sum(list1))",
        "num_ids": 79
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Note: I do not give me the time complexity of this function\n    # Hint: 1. Go through all numbers in range 1 to n.\n    # 2. Multiply the numbers in range 1 to n.\n    # 3. Take the sum of the numbers multiplied by the square of the sum.\n    # 4. Return the sum\n    \n    # Problem statement:\n    # Write a python function to find the cube sum of first n even natural numbers.\n    # Input:\n    # n (int): A natural number to find the cube sum of.\n    # Output:\n    # cube_sum (int): The cube sum of the numbers in the range 1 to n.\n    def cube_Sum(n):\n        return (1)\n    \n    # Testing:\n    print(cube_Sum(5)) # 5\n    print(cube_Sum(6)) # 81\n    print(cube_Sum(10)) # 210\n    print(cube_Sum(12)) # 415\n    print(cube_Sum(11)) # 2\n    print(cube_Sum(13)) # 527\n    print(cube_Sum(1)) # 1\n    print(cube_Sum(10)) # 40\n    print(cube_Sum(9)) # 36\n    print(cube_Sum(9)) # 9\n    print(cube_Sum(9)) # 9\n    print(cube_Sum(9)) # 9\n    \n    # How does the code work?\n    # 1. Define a function that takes a natural number n and returns its cube sum.\n    # 2. Write a python function to find the cube sum of first n even natural numbers.\n    # 3. Write a python function to find the cube sum of first n even natural numbers.\n    # 4. Write a python function to find the cube sum of first n even natural numbers.\n    # 5. Write a python function to find the cube sum of first n even natural numbers.\n    # 6. Write a python function to find the cube sum of first n even natural numbers.\n    # 7. Write a python function to find the cube sum of first n even natural numbers.\n    # 8. Write a python function to find the cube sum of first n even natural numbers.\n    # 9. Write a python function to find the cube sum of first n even natural numbers.\n    # 10. Write a python function to find the cube sum of first n even natural numbers.\n    # 11. Write a python function to find the cube sum of first n even natural numbers.\n    # 12. Write a python function to find the cube sum of first n even natural numbers.\n    # 13. Write a python function to find the cube sum of first n even natural numbers.\n    # 14. Write a python function to find the cube sum of first n even natural numbers.\n    # 15. Write a python function to find the cube sum of first n even natural numbers.\n    # 16. Write a python function to find the cube sum of first n even natural numbers.\n    # 17. Write a python function to find the cube sum of first n even natural numbers.\n    # 18. Write a python function to find the cube sum of first n even natural numbers.\n    # 19. Write a python function to find the cube sum of first n even natural numbers.\n    # 20. Write a python function to find the cube sum of first n even natural numbers.\n    # 21. Write a python function to find the cube sum of first n even natural numbers.\n    # 22. Write a python function to find the cube sum of first n even natural numbers.\n    # 23. Write a python function to find the cube sum of first n even natural numbers.\n    # 24. Write a python function to find the cube sum of first n even natural numbers.\n    # 25. Write a python function to find the cube sum of first n even natural numbers.\n    # 26. Write a python function to find the cube sum of first n even natural numbers.\n    # 27. Write a python function to find the cube sum of first n even natural numbers.\n    # 28. Write a python function to find the cube sum of first n even natural numbers.\n    # 29. Write a python function to find the cube sum of first n even natural numbers.\n    # 30. Write a python function to find the cube sum of first n even natural numbers.\n    # 31. Write a python function to find the cube sum of first n even natural numbers.\n    # 32. Write a python function to find the cube sum of first n even natural numbers.\n    # 33. Write a python function to find the cube sum of first n even natural numbers.\n    # 34. Write a python function to find the cube sum of first n even natural numbers.\n    # 35. Write a python function to find the cube sum of first n even natural numbers.\n    # 36. Write a python function to find the cube sum of first n even natural numbers.\n    # 37. Write a python function to find the cube sum of first n even natural numbers.\n    # 38. Write a python function to find the cube sum of first n even natural numbers.\n    # 39. Write a python function to find the cube sum of first n even natural numbers.\n    # 40. Write a python function to find the cube sum of first n even natural numbers.\n    # 41. Write a python function to find the cube sum of first n even natural numbers.\n    # 42. Write a python function to find the cube sum of first n even natural numbers.\n    # 43. Write a python function to find the cube sum of first n even natural numbers.\n    # 44. Write a python function to find the cube sum of first n even natural numbers.\n    # 45. Write a python function to find the cube sum of first n even natural numbers.\n    # 46. Write a python function to find the cube sum of first n even natural numbers.\n    # 47. Write a python function to find the cube sum of first n even natural numbers.\n    # 48. Write a python function to find the cube sum of first n even natural numbers.\n    # 49. Write a python function to find the cube sum of first n even natural numbers.\n    # 50. Write a python function to find the cube sum of first n even natural numbers.\n    # 51. Write a python function to find the cube sum of first n even natural numbers.\n    # 52. Write a python function to find the cube sum of first n even natural numbers.\n    # 53. Write a python function to find the cube sum of first n even natural numbers.\n    # 54. Write a python function to find the cube sum of first n even natural numbers.\n    # 55. Write a python function to find the cube sum of first n even natural numbers.\n    # 56. Write a python function to find the cube sum of first n even natural numbers.\n    # 57. Write a python function to find the cube sum of first n even natural numbers.\n    # 58. Write a python function to find the cube sum of first n even natural numbers.\n    # 59. Write a python function to find the cube sum of first n even natural numbers.\n    # 60. Write a python function to find the cube sum of first n even natural numbers.\n    # 61. Write a python function to find the cube sum of first n even natural numbers.\n    # 62. Write a python function to find the cube sum of first n even natural numbers.\n    # 63. Write a python function to find the cube sum of first n even natural numbers.\n    # 64. Write a python function to find the cube sum of first n even natural numbers.\n    # 65. Write a python function to find the cube sum of first n even natural numbers.\n    # 66. Write a python function to find the cube sum of first n even natural numbers.\n    # 67. Write a python function to find the cube sum of first n even natural numbers.\n    # 68. Write a python function to find the cube sum of first n even natural numbers.\n    # 69. Write a python function to find the cube sum of first n even natural numbers.\n    # 70. Write a python function to find the cube sum of first n even natural numbers.\n    # 71. Write a python function to find the cube sum of first n even natural numbers.\n    # 72. Write a python function to find the cube sum of first n even natural numbers.\n    # 73. Write a python function to find the cube sum of first n even natural numbers.\n    # 74. Write a python function to find the cube sum of first n even natural numbers.\n    # 75. Write a python function to find the cube sum of first n even natural numbers.\n    # 76. Write a python function to find the cube sum of first n even natural numbers.\n    # 77. Write a python function to find the cube sum of first n even natural numbers.\n    # 78. Write a python function to find the cube sum of first n even natural numbers.\n    # 79. Write a python function to find the cube sum of first n even natural numbers.\n    # 80. Write a python function to find the cube sum of first n even natural numbers.\n    ",
        "num_ids": 2014
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        res += i **3\n    return res\nn = int(input(\"Enter the number of terms : \"))\nprint(cube_Sum(n)",
        "num_ids": 54
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return ((n*(n+1))//2)**3\n",
        "num_ids": 18
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    l=[]\n    for i in range(1,n+1):\n        cube=i*i*i\n        l.append(cube)\n    sum=sum(l)\n    print(sum)\n    \ncube_Sum(10)\n",
        "num_ids": 60
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #Base case\n    if n == 0:\n        return 0\n    \n    #Step 1 : Find the sum of the even numbers\n    #using a loop\n    sum_even=0\n    for i in range(n):\n        if i%2==0:\n            sum_even=sum_even+i**3\n",
        "num_ids": 77
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += i**3\n    print(result)\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return n * cube_Sum(n-1) \n",
        "num_ids": 46
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i ** 3\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube=1\n    for i in range(1,n,2):\n        cube=cube*i\n    print(cube)\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0: \n        raise ValueError('number of inputs must be >= 0') \n    \n    return sum([i**3 for i in range(1,n+1) if i%2==0]) \n",
        "num_ids": 54
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup_list = list(test_tup)\n    for item in test_tup_list:\n        test_tup_list.append(item)\n",
        "num_ids": 43
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = []\n    for elt in test_tup:\n        if isinstance(elt, tuple):\n            for item in elt:\n                s.append(item)\n        else:\n            s.append(elt)\n    return tuple(s)\n",
        "num_ids": 63
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tuple = []\n    for i in range(len(test_tup)):\n        test_tuple.append(test_tup[i])\n    return tuple(test_tuple)\n",
        "num_ids": 51
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if not test_tup:\n        return ''\n    else:\n        return str(test_tup[0]) + \" \" + str(test_tup[1]) + \" \" + str(test_tup[2])\n",
        "num_ids": 57
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #TODO: Write a function that concatenates all tuple elements.\n    #TODO: Write a function that concatenates all elements of tuple.\n",
        "num_ids": 39
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for x in test_tup:\n        new_tup += x\n    return new_tup\n",
        "num_ids": 35
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    # Converting tuple to list\n    test_tuple = list(test_tup)\n    # The empty list has been created, so we need to add it to the list of lists\n    # This is just the only way we can fix the issue where concatenate(tuple) would be \n    # used but the list has length 1\n    test_tuple.append([])\n    return test_tuple\n",
        "num_ids": 99
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    x=test_tup[0]\n    for i in range(1,len(test_tup)):\n        x=x+test_tup[i]\n    return x\n",
        "num_ids": 47
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) > 1:\n        return tuple(test_tup)\n    elif len(test_tup) == 0:\n        return ()\n    else:\n        return test_tup[0]\n",
        "num_ids": 57
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    i = 1\n    while i <= n:\n        result += i ** 3\n        i += 1\n    print(result / n)\n    return\n",
        "num_ids": 42
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print('Function for finding average of cubes')\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('Sum of cubes:'))\n    print('{0:^25s}'.format('Average: '))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('{0:^25s}'))\n    print('{0:^25s}'.format('#'))\n    print('{0:^25s}'.forma",
        "num_ids": 2012
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = []\n    for i in range(0, n):\n        cube.append(i ** 3)\n    print(cube)\n    sum = 0\n    for i in range(0, n):\n        sum += cube[i]\n    avg = sum/n\n    return avg\n",
        "num_ids": 70
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # list_1 = [1,2,3,4,5]\n    # # list_2 = [1,2,3]\n    # total = 0\n    # for i in list_1:\n    #     total += i\n    # print(total/n)\n",
        "num_ids": 67
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    avg = total/n\n    return avg\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i**3)\n    print(sum(cubes)/len(cubes))\n    return sum(cubes)/len(cubes)\n",
        "num_ids": 59
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum/n\n    \n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n):\n        result += i**3\n    return result/n\n    \ndef find_Average_Of_Cube(n):  \n    '''\n",
        "num_ids": 2
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n)])/n\n",
        "num_ids": 20
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n+1):\n        avg += i**3\n    return avg/n\n",
        "num_ids": 35
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # TODO: Replace this by your own code\n    #return test_tuple[-1][:1]\n    return test_tuple[-1][::-1]\n",
        "num_ids": 44
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = 0\n    for j in test_tuple:\n        if j == 'R':\n            rear = rear + 1\n        elif j == 'Rear':\n            rear = rear + 2\n    return rear\n",
        "num_ids": 56
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for element in test_tuple:\n        if element.find('rear')!= -1:\n            rear.append(element[element.find('rear') + len('rear'):])\n    return tuple(rear)\n",
        "num_ids": 65
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front, rear = test_tuple\n    rear = front[rear]\n    return front, rear\n",
        "num_ids": 28
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = list(test_tuple)\n    rear_index = 0\n    for index, x in enumerate(test_list):\n        if x == 'R':\n            rear_index = index\n    return (rear_index)\n",
        "num_ids": 62
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_string = test_tuple[0]\n    test_string = test_string.replace(',', '')\n    test_string = test_string.replace('.', '')\n    test_string = test_string.replace(' ', '')\n    test_string = test_string.replace('\\n', '')\n    test_string = test_string.replace('\\t', '')\n    test_string = test_string.replace('\\r', '')\n    test_string = test_string.replace('\\b', '')\n    test_string = test_string.replace('\\f', '')\n    test_string = test_string.replace('\\v', '')\n    test_string = test_string.replace('\\xa0', '')\n    test_string = test_string.replace('\\x00', '')\n    test_string = test_string.replace('\\x08', '')\n    test_string = test_string.replace('\\x09', '')\n    test_string = test_string.replace('\\x0b', '')\n    test_string = test_string.replace('\\x0c', '')\n    test_string = test_string.replace('\\x0d', '')\n    test_string = test_string.replace('\\x0e', '')\n    test_string = test_string.replace('\\x0f', '')\n    test_string = test_string.replace('\\x10', '')\n    test_string = test_string.replace('\\x11', '')\n    test_string = test_string.replace('\\x12', '')\n    test_string = test_string.replace('\\x13', '')\n    test_string = test_string.replace('\\x14', '')\n    test_string = test_string.replace('\\x15', '')\n    test_string = test_string.replace('\\x16', '')\n    test_string = test_string.replace('\\x17', '')\n    test_string = test_string.replace('\\x18', '')\n    test_string = test_string.replace('\\x19', '')\n    test_string = test_string.replace('\\x1a', '')\n    test_string = test_string.replace('\\x1b', '')\n    test_string = test_string.replace('\\x1c', '')\n    test_string = test_string.replace('\\x1d', '')\n    test_string = test_string.replace('\\x1e', '')\n    test_string = test_string.replace('\\x1f', '')\n    test_string = test_string.replace('\\x20', '')\n    test_string = test_string.replace('\\x21', '')\n    test_string = test_string.replace('\\x22', '')\n    test_string = test_string.replace('\\x23', '')\n    test_string = test_string.replace('\\x24', '')\n    test_string = test_string.replace('\\x25', '')\n    test_string = test_string.replace('\\x26', '')\n    test_string = test_string.replace('\\x27', '')\n    test_string = test_string.replace('\\x28', '')\n    test_string = test_string.replace('\\x29', '')\n    test_string = test_string.replace('\\x2a', '')\n    test_string = test_string.replace('\\x2b', '')\n    test_string = test_string.replace('\\x2c', '')\n    test_string = test_string.replace('\\x2d', '')\n    test_string = test_string.replace('\\x2e', '')\n    test_string = test_string.replace('\\x2f', '')\n    test_string = test_string.replace('\\x30', '')\n    test_string = test_string.replace('\\x31', '')\n    test_string = test_string.replace('\\x32', '')\n    test_string = test_string.replace('\\x33', '')\n    test_string = test_string.replace('\\x34', '')\n    test_string = test_string.replace('\\x35', '')\n    test_string = test_string.replace('\\x36', '')\n    test_string = test_string.replace('\\x37', '')\n    test_string = test_string.replace('\\x38', '')\n    test_string = test_string.replace('\\x39', '')\n    test_string = test_string.replace('\\x3a', '')\n    test_string = test_string.replace('\\x3b', '')\n    test_string = test_string.replace('\\x3c', '')\n    test_string = test_string.replace('\\x3d', '')\n    test_string = test_string.replace('\\x3e', '')\n    test_string = test_string.replace('\\x3f', '')\n    test_string = test_string.replace('\\x40', '')\n    test_string = test_string.replace('\\x41', '')\n    test_string = test_string.replace('\\x42', '')\n    test_string = test_string.replace('\\x43', '')\n    test_string = test_string.replace('\\x44', '')\n    test_string = test_string.replace('\\x45', '')\n    test_string = test_string.replace('\\x46', '')\n    test_string = test_string.replace('\\x47', '')\n    test_string = test_string.replace('\\x48', '')\n    test_string = test_string.replace('\\x49', '')\n    test_string = test_string.replace('\\x4a', '')\n    test_string = test_string.replace('\\x4b', '')\n    test_string = test_string.replace('\\x4c', '')\n    test_string = test_string.replace('\\x4d', '')\n    test_string = test_string.replace('\\x4e', '')\n    test_string = test_string.replace('\\x4f', '')\n    test_string = test_string.replace('\\x50', '')\n    test_string = test_string.replace('\\x51', '')\n    test_string = test_string.replace('\\x52', '')\n    test_string = test_string.replace('\\x53', '')\n    test_string = test_string.replace('\\x54', '')\n    test_string = test_string.replace('\\x55', '')\n    test_string = test_string.replace('\\x56', '')\n    test_string = test_string.replace('\\x57', '')\n    test_string = test_string.replace('\\x58', '')\n    test_string = test_string.replace('\\x59', '')\n    test_string = test_string.replace('\\x5a', '')\n    test_string = test_string.replace('\\x5b', '')\n    test_string = test_string.replace('\\x5c', '')\n    test_string = test_string.replace('\\x5d', '')\n    test_string = test_string.replace('\\x5e', '')\n    test_string = test_string.replace('\\x5f', '')\n    test_string = test_string.replace('\\x60', '')\n    test_string = test_string.replace('\\x61', '')\n    test_string = test_string.replace('\\x62', '')\n    test_string = test_string.replace('\\x63', '')\n    test_string = test_string.replace('\\x64', '')\n    test_string = test_string.replace('\\x65', '')\n    test_string = test_string.replace('\\x66', '')\n    test_string = test_string.replace('\\x67', '')\n    test_string = test_string.replace('\\x68', '')\n    test_string = test_string.replace('\\x69', '')\n    test_string = test_string.replace('\\x6a', '')\n    test_string = test_string.replac",
        "num_ids": 2011
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    test_tuple = list(test_tuple)\n    for i in range(len(test_tuple)):\n        for j in range(len(test_tuple[i])):\n            if test_tuple[i][j] == 'R':\n                rear_indices.append(i)\n    return rear_indices\n",
        "num_ids": 92
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def extract_rear_index(test_tuple):\n        return test_tuple[1]\n",
        "num_ids": 27
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return list(test_tuple)[1]\n",
        "num_ids": 14
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_arr = []\n    for elem in test_tuple:\n        extracted_arr.append(elem[1])\n    return extracted_arr\n",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if x == list1[i][j]:\n                count+=1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    i=0\n    for sublist in list1:\n        if x in sublist:\n            i+=1\n    return i\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if (list1[i] == x):\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in list1:\n        if i == x:\n            counter += 1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count += 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]==x:\n                count+=1\n    return count\ndef main():\n    list1=[]\n    n=int(input(\"enter the size of list\"))\n    for i in range(0,n):\n        x=int(input(\"enter the element\"))\n        list1.append(x)\n    print(\"the element in list is:\",list1)\n    print(\"Number of sublists in list:\",count_element_in_list(list1,x))\nif __name__ == \"__main__\":\n    main()",
        "num_ids": 166
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"l1 must be a list\")\n    elif len(list1)==0:\n        raise ValueError(\"l1 must have a non-empty list\")\n    elif x not in list1[0]:\n        raise ValueError(\"x not in l1[0]\")\n    else:\n        count = 1\n        for i in range(0, len(list1)):\n            if x in list1[i]:\n                count += 1\n        return count\n",
        "num_ids": 125
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = filter(lambda x: x % 2!= 0, nums)\n    print(list(odds))\n    \n",
        "num_ids": 33
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums[i] = nums[i] + nums[i + 1]\n        # if the number is odd, it is not included in the result\n        if nums[i] < 0:\n            nums[i] = -nums[i]\n",
        "num_ids": 91
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2==1, nums)\n    \nnums = [1,2,3,4,5,6,7,8,9,10]\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    # Runtime: 36 ms (36.07%)\n    # Memory Usage: 13.9 MB (25.41%)\n    \n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "num_ids": 96
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = list(nums)\n    print(nums)\n    filtered_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            filtered_nums.append(num)\n    print(filtered_nums)\n",
        "num_ids": 67
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for number in nums:\n        if number % 2!= 0:\n            new_list.append(number)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for x in nums:\n        if x%2!= 0:\n            result.append(x)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered = []\n    for n in nums:\n        if n % 2 == 0:\n            filtered.append(n)\n    return filtered\n",
        "num_ids": 38
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    import datetime\n    #convert date to string\n    date=dt.strftime('%Y-%m-%d')\n    return date\n",
        "num_ids": 37
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # create a list of date strings\n    date_strings = dt.split('-')\n    # convert string to date object\n    date_object = date(int(date_strings[0]),int(date_strings[1]),int(date_strings[2]))\n    # convert date object to string\n    date_string = date_object.strftime('%d-%m-%Y')\n    return date_string\n",
        "num_ids": 101
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = re.findall(r'\\d{2}-\\d{2}-\\d{4}', dt)\n    d = d[0] + '-' + d[1] + '-' + d[2] + '-' + d[3]\n    return d\n",
        "num_ids": 70
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt == '' or dt == None:\n        return ''\n    else:\n        if dt.startswith('20'):\n            return '2020-'+dt[2:]\n        elif dt.startswith('21'):\n            return '2021-'+dt[2:]\n        elif dt.startswith('25'):\n            return '2020-'+dt[2:]\n        elif dt.startswith('26'):\n            return '2021-'+dt[2:]\n        elif dt.startswith('27'):\n            return '2022-'+dt[2:]\n        elif dt.startswith('28'):\n            return '2022-'+dt[2:]\n        else:\n            return dt\n",
        "num_ids": 185
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    # 1:1 : d1 = \n    1. Date 1. 01.\n    1. Date 1. 1.\n    1. Date 1. 02.\n    1. Date 1. 02.\n    1. Date 1. 02.\n    \n    # 2 : d2 = \n    2. Date 02. 01.\n    2. Date 02. 1.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    2. Date 02. 02.\n    \n    # 3 : d3 = \n    3. Date 03. 01.\n    3. Date 03. 1.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    3. Date 03. 02.\n    \n    # 4 : d4 = \n    4. Date 04. 01.\n    4. Date 04. 1.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    4. Date 04. 02.\n    \n    # 5 : d5 = \n    5. Date 05. 01.\n    5. Date 05. 1.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05. 02.\n    5. Date 05",
        "num_ids": 1997
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt:\n        dt = dt.strip().split('-')\n        if len(dt)!= 3:\n            return ''\n        d,m,y = dt\n        d = int(d)\n        m = int(m)\n        y = int(y)\n        if d == 0 or m == 0 or y % 4 == 0 or y % 100!= 0 or y % 400 == 0:\n            return '%s-%s-%s' % (str(d), str(m), str(y))\n        else:\n            return '%s-%s-%s' % (str(d), str(m+1), str(y))\n",
        "num_ids": 159
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d\\d)-(\\d\\d)-(\\d\\d)$', dt)\n    if match:\n        return \"{:04d}-{:02d}-{:02d}\".format(int(match.group(1)),int(match.group(2)),int(match.group(3)))\n    else:\n        raise ValueError(\"Invalid format!\")\n",
        "num_ids": 98
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Write your code here\n    \n    date_list = dt.split('-')\n    date_list = date_list[::-1]\n    date_list = date_list[:-1]\n    date_list = date_list.split('-')\n    \n    new_date = '-'.join(date_list) + '-' + '-'.join(date_list)\n    \n    return new_date\n",
        "num_ids": 103
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = re.sub(r'(^0)[1-9]\\d*$','0',dt)\n    dt = re.sub(r'([0-9]+)/(\\d+)$','/',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)$','\\1/\\2',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)','\\1/\\2',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(\\d+)/(\\d+)','\\1/\\2/\\3',dt)\n    dt = re.sub(r'(\\d+)/(",
        "num_ids": 2002
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if type(dt) == str:\n        dt = dt.split('-')\n        if len(dt) == 2:\n            if int(dt[0]) == 31:\n                dt[0] = 1\n                dt[1] = 12\n            else:\n                dt[1] = int(dt[0])\n                dt[0] = int(dt[1]) + 31\n        if len(dt) == 3:\n            if int(dt[0]) == 31:\n                dt[0] = 1\n                dt[1] = int(dt[0]) + 12\n                dt[2] = int(dt[2]) + 31\n            else:\n                dt[1] = int(dt[0])\n                dt[0] = int(dt[1]) + 12\n                dt[2] = int(dt[2]) + 31\n        if len(dt) == 4:\n            if int(dt[0]) == 31:\n                dt[0] = int(dt[1]) + 12\n                dt[1] = int(dt[2]) + 31\n                dt[2] = int(dt[3]) + 31\n            else:\n                dt[0] = int(dt[1])\n                dt[1] = int(dt[2]) + 12\n                dt[2] = int(dt[3]) + 31\n                dt[3] = int(dt[0])\n        return dt\n    else:\n        return dt\n",
        "num_ids": 341
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Iterate from 1 to len(array)\n    for i in range(1, len(my_list)):\n        # Shift elements to left\n        for j in range(0, i):\n            # Compare current element to next element\n            # if it's less than next element, shift element\n            # to the right\n            if my_list[j] < my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n        # Shift elements to right\n        # Repeat for i-1 elements\n        for j in range(i-1, 0, -1):\n            # Compare elements to left\n            # if it's less than left, shift element\n            # to the left\n            if my_list[j] < my_list[j-1]:\n                my_list[j], my_list[j-1] = my_list[j-1], my_list[j]\n    return my_list\n",
        "num_ids": 237
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n    \ndef main():\n    '''\n    Write a function to merge two sorted linked lists and return head of merged list.\n    '''\n    a = ListNode(5)\n    b = ListNode(2)\n    c = ListNode(3)\n    d = ListNode(4)\n    e = ListNode(3)\n    f = ListNode(2)\n    g = ListNode(5)\n    a.next = b\n    b.next = c\n    c.next = d\n    d.next = e\n    e.next = f\n    f.next = g\n    \n    print(shell_sort(a))\n    print(shell_sort(b))\n    print(shell_sort(c))\n    print(shell_sort(d))\n    print(shell_sort(e))\n    print(shell_sort(f))\n    print(shell_sort(g))\n    \n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 197
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    length = len(my_list)\n    if length < 2:\n        return my_list\n    mid = length // 2\n    while mid > 0:\n        for i in range(mid, length):\n            curr_val = my_list[i]\n            j = i\n            while j >= mid and my_list[j - mid] > curr_val:\n                my_list[j] = my_list[j - mid]\n                j -= mid\n            my_list[j] = curr_val\n        mid = mid // 2\n    return my_list\n",
        "num_ids": 137
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j = j - gap\n        gap = gap//2\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_helper(arr, n):\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n    def shell_sort(arr):\n        n = len(arr)\n        k = n//2\n        while k > 0:\n            for i in range(k):\n                shell_sort_helper(arr, n)\n            k -= 1\n    def merge(left, right):\n        # Merges the two sorted lists\n        # You are going to take the middle two lists, i.e. L and R\n        left_size = len(left)\n        right_size = len(right)\n        # You are going to merge the lists\n        # 1. Start merging the two lists\n        # 2. Starting index of L is 1\n        # 3. Starting index of R is 0\n        i = 0\n        j = left_size - 1\n        k = right_size - 1\n        # As long as i or j is not equal to k - 1\n        # If i and j are not equal to k - 1\n        # They are going to be merged\n        # 1. Until there are not remaining elements in either left or right\n        while i < left_size and j >= 0:\n            # 1. If i is greater than or equal to j\n            if (left[i] <= right[j]):\n                # 2. Add left_arr[i] to arr[j]\n                arr[k] = left[i]\n                i += 1\n            else:\n                # 2. Add right_arr[j] to arr[i]\n                arr[k] = right[j]\n                j -= 1\n            # 3. If i equals j\n            if i == j:\n                # 3. Add either left[i] or right[i] to arr[k]\n                arr[k] = left[i]\n                i += 1\n                j -= 1\n        # 4. If i equals k - 1\n        # 4. Add either left[i] or right[j] to arr[k]\n        while i < left_size:\n            arr[k] = left[i]\n            i += 1\n            k -= 1\n        while j >= 0:\n            arr[k] = right[j]\n            j -= 1\n            k -= 1\n    # Calculate the length of the array\n    len_arr = len(arr)\n    gap = len_arr - 1\n    # Start merging\n    while gap >= 1:\n        # Merge the arrays\n        # Merge the arrays into one list\n        # You are going to merge the lists\n        # 1. Start merging the two lists\n        # 2. Starting index of L is 1\n        # 3. Starting index of R is 0\n        # 4. If i and j are not equal to k - 1\n        # If i and j are equal to k - 1\n        # They are going to be merged\n        # 1. Until there are not remaining elements in either left or right\n        while gap >= 1:\n            # 1. If i equals j\n            if (gap) % 2 == 0:\n                i = gap // 2\n                j = gap // 2\n            else:\n                i = gap // 2\n                j = gap // 2 + 1\n            # 2. Add left_arr[i] to arr[j]\n            # 3. Add right_arr[j] to arr[i]\n            # 4. If i equals j\n            # 4. If i equals k - 1\n            # If i equals k - 1\n            # They are going to be merged\n            # 1. Until there are not remaining elements in either left or right\n            while i < len_arr and j < len_arr:\n                arr[gap] = arr[i]\n                i += 1\n                gap -= 1\n                j += 1\n            # 3. If i equals k - 1\n            # 3. Add either left[i] or right[j] to arr[k]\n            # 4. If i equals j\n            # 4. If i equals k - 1\n            # If i equals k - 1\n            # They are going to be merged\n            # 1. Until there are not remaining elements in either left or right\n            while i < len_arr:\n                arr[gap] = arr[i]\n                i += 1\n                gap -= 1\n            while j >= 0:\n                arr[gap] = arr[j]\n                j -= 1\n                gap -= 1\n        gap //= 2\n    # Delete the duplicates from the sorted array\n    return arr\n",
        "num_ids": 1077
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sorted_list = []\n    for i in range(0, len(my_list)):\n        for j in range(0, len(my_list) - i - 1):\n            if my_list[j] > my_list[j + 1]:\n                my_list[j], my_list[j + 1] = my_list[j + 1], my_list[j]\n        sorted_list.append(my_list[j])\n    return sorted_list\n",
        "num_ids": 116
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    count = 0\n    while n > 0:\n        for i in range(n-1):\n            if count == 0:\n                print('Sort by index:', end=' ')\n                count += 1\n                break\n            if my_list[i] > my_list[i+1]:\n                print('Sort by index:', end=' ')\n                count += 1\n                break\n        n -= 1\n",
        "num_ids": 107
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    def sort(list):\n        '''\n        Takes a list and sorts the array.\n        '''\n        \n        for i in range(len(list)):\n            for j in range(i,0,-1):\n                if list[j] < list[j-1]:\n                    list[j],list[j-1] = list[j-1],list[j]\n    \n    def print_list(list):\n        '''\n        Prints a sorted list.\n        '''\n        \n        for i in range(len(list)):\n            print(list[i],end=' ')\n        print()\n        \n        \n    def shell_sort(my_list):\n        '''\n        Takes a list and sorts the array.\n        '''\n        \n        #Iterate through the whole list.\n        for i in range(len(my_list)-1):\n            #Find the middle element.\n            #Using a loop, you can use for loop, which is less costly, but more memory-efficient, and also iterates through each item in the list.\n            #The middle element is only printed once.\n            for j in range(i,0,-1):\n                #Swap the values of the first index with the last index.\n                temp = my_list[j]\n                my_list[j] = my_list[j-1]\n                my_list[j-1] = temp\n        \n        #Print the sorted list.\n        print_list(my_list)\n        \n    my_list = [5,4,3,2,1]\n    sort(my_list)\n    \n    print_list(my_list)\n    \n    #Do this as many times as you want.\n    #Use the same method from the shell sort\n    #This time using a for loop.\n    for i in range(4):\n        print('sorting')\n        my_list = [3,2,1,4,5]\n        sort(my_list)\n        print_list(my_list)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1833
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def sort(my_list):\n        '''\n        Write a shell sort algorithm that sorts an array of integers in ascending order.\n        '''\n        if len(my_list) == 1:\n            return my_list\n        n = len(my_list)\n        last = n - 1\n        while last > 0:\n            for i in range(last, n):\n                temp = my_list[i]\n                j = i\n                while j >= 0 and temp < my_list[j] :\n                    my_list[j] = my_list[j + 1]\n                    j -= 1\n                my_list[j + 1] = temp\n            last -= 1\n",
        "num_ids": 125
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1])\n",
        "num_ids": 38
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup2[0] or test_tup2[0] and test_tup1[0]\n",
        "num_ids": 40
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        test_list.append(test_tup2[i])\n    return test_list\n",
        "num_ids": 79
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0], test_tup2[0]), (test_tup1[1], test_tup2[1])\n",
        "num_ids": 39
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup = test_tup1 + test_tup2\n    return test_tup\n",
        "num_ids": 27
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for x in test_tup1:\n        for y in test_tup2:\n            if x == y:\n                print(x,y)\n                return\n    print(\"the 2 tuples do not have elements in common\")\n",
        "num_ids": 57
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [item for item in test_tup1 for item in test_tup2]\n",
        "num_ids": 24
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a0, b0, c0 = a, b, c\n    x = [a0, b0, c0]\n    y = [a0**2, b0**2, c0**2]\n    z = [a0**3, b0**3, c0**3]\n    p = [1, 2, 3]\n    x_len = [x[i] - x[i - 1] for i in range(1, len(x))]\n    y_len = [y[i] - y[i - 1] for i in range(1, len(y))]\n    z_len = [z[i] - z[i - 1] for i in range(1, len(z))]\n    p_len = [p[i] - p[i - 1] for i in range(1, len(p))]\n",
        "num_ids": 203
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    n = int(input(\"Enter a number : \")) \n    x1 = float(input(\"Enter x1 : \"))\n    x2 = float(input(\"Enter x2 : \"))\n    x3 = float(input(\"Enter x3 : \"))\n    x4 = float(input(\"Enter x4 : \"))\n    x5 = float(input(\"Enter x5 : \"))\n    x6 = float(input(\"Enter x6 : \"))\n    x7 = float(input(\"Enter x7 : \"))\n    x8 = float(input(\"Enter x8 : \"))\n    x9 = float(input(\"Enter x9 : \"))\n    x10 = float(input(\"Enter x10 : \"))\n    x11 = float(input(\"Enter x11 : \"))\n    x12 = float(input(\"Enter x12 : \"))\n    x13 = float(input(\"Enter x13 : \"))\n    x14 = float(input(\"Enter x14 : \"))\n    x15 = float(input(\"Enter x15 : \"))\n    x16 = float(input(\"Enter x16 : \"))\n    x17 = float(input(\"Enter x17 : \"))\n    x18 = float(input(\"Enter x18 : \"))\n    x19 = float(input(\"Enter x19 : \"))\n    x20 = float(input(\"Enter x20 : \"))\n    x21 = float(input(\"Enter x21 : \"))\n    x22 = float(input(\"Enter x22 : \"))\n    x23 = float(input(\"Enter x23 : \"))\n    x24 = float(input(\"Enter x24 : \"))\n    x25 = float(input(\"Enter x25 : \"))\n    x26 = float(input(\"Enter x26 : \"))\n    x27 = float(input(\"Enter x27 : \"))\n    x28 = float(input(\"Enter x28 : \"))\n    x29 = float(input(\"Enter x29 : \"))\n    x30 = float(input(\"Enter x30 : \"))\n    x31 = float(input(\"Enter x31 : \"))\n    x32 = float(input(\"Enter x32 : \"))\n    x33 = float(input(\"Enter x33 : \"))\n    x34 = float(input(\"Enter x34 : \"))\n    x35 = float(input(\"Enter x35 : \"))\n    x36 = float(input(\"Enter x36 : \"))\n    x37 = float(input(\"Enter x37 : \"))\n    x38 = float(input(\"Enter x38 : \"))\n    x39 = float(input(\"Enter x39 : \"))\n    x40 = float(input(\"Enter x40 : \"))\n    x41 = float(input(\"Enter x41 : \"))\n    x42 = float(input(\"Enter x42 : \"))\n    x43 = float(input(\"Enter x43 : \"))\n    x44 = float(input(\"Enter x44 : \"))\n    x45 = float(input(\"Enter x45 : \"))\n    x46 = float(input(\"Enter x46 : \"))\n    x47 = float(input(\"Enter x47 : \"))\n    x48 = float(input(\"Enter x48 : \"))\n    x49 = float(input(\"Enter x49 : \"))\n    x50 = float(input(\"Enter x50 : \"))\n    x51 = float(input(\"Enter x51 : \"))\n    x52 = float(input(\"Enter x52 : \"))\n    x53 = float(input(\"Enter x53 : \"))\n    x54 = float(input(\"Enter x54 : \"))\n    x55 = float(input(\"Enter x55 : \"))\n    x56 = float(input(\"Enter x56 : \"))\n    x57 = float(input(\"Enter x57 : \"))\n    x58 = float(input(\"Enter x58 : \"))\n    x59 = float(input(\"Enter x59 : \"))\n    x60 = float(input(\"Enter x60 : \"))\n    x61 = float(input(\"Enter x61 : \"))\n    x62 = float(input(\"Enter x62 : \"))\n    x63 = float(input(\"Enter x63 : \"))\n    x64 = float(input(\"Enter x64 : \"))\n    x65 = float(input(\"Enter x65 : \"))\n    x66 = float(input(\"Enter x66 : \"))\n    x67 = float(input(\"Enter x67 : \"))\n    x68 = float(input(\"Enter x68 : \"))\n    x69 = float(input(\"Enter x69 : \"))\n    x70 = float(input(\"Enter x70 : \"))\n    x71 = float(input(\"Enter x71 : \"))\n    x72 = float(input(\"Enter x72 : \"))\n    x73 = float(input(\"Enter x73 : \"))\n    x74 = float(input(\"Enter x74 : \"))\n    x75 = float(input(\"Enter x75 : \"))\n    x76 = float(input(\"Enter x76 : \"))\n    x77 = float(input(\"Enter x77 : \"))\n    x78 = float(input(\"Enter x78 : \"))\n    x79 = float(input(\"Enter x79 : \"))\n    x80 = float(input(\"Enter x80 : \"))\n    x81 = float(input(\"Enter x81 : \"))\n    x82 = float(input(\"Enter x82 : \"))\n    x83 = float(input(\"Enter x83 : \"))\n    x84 = float(input(\"Enter x84 : \"))\n    x85 = float(input(\"Enter x85 : \"))\n    x86 = float(input(\"Enter x86 : \"))\n    x87 = float(input(\"Enter x87 : \"))\n    x88 = float(input(\"Enter x88 : \"))\n    x89 = float(input(\"Enter x89 : \"))\n    x90 = float(input(\"Enter x90 : \"))\n    x91 = float(input(\"Enter x91 : \"))\n    x92 = float(input(\"Enter x92 : \"))\n    x93 = float(input(\"Enter x93 : \"))\n    x94 = float(input(\"Enter x94 : \"))\n    x95 = float(input(\"Enter x95 : \"))\n    x96 = float(input(\"Enter x96 : \"))\n    x97 = float(input(\"Enter x97 : \"))\n    x98 = float(input(\"Enter x98 : \"))\n    x99 = float(input(\"Enter x99 : \"))\n    x100 = float(input(\"Enter x100 : \"))\n    x101 = float(input(\"Enter x101 : \"))\n    x102 = float(input(\"Enter x102 : \"))\n    x103 = float(input(\"Enter x103 : \"))\n    x104 = float(input(\"Enter x104 : \"))\n    x105 = float(input(\"Enter x105 : \"))\n    x106 = float(input(\"Enter x106 : \"))\n    x107 = float(input(\"Enter x107 : \"))\n    x108 = float(input(\"Enter x108 : \"))\n    x109 = float(input(\"Enter x109 : \"))\n    x110 = float(input(\"Enter x110 : \"))\n    x111 = float(input(\"Enter x111 : \"))\n    x112 = float(input(\"Enter x112 : \"))\n    x113 = float(input(\"Enter x113 : \"))\n    x114 = float(input(\"Enter x114 : \"))\n    x115 = float(input(\"Enter x115 : \"))\n    x116 = float(input(\"Enter x116 : \"))\n    x117 = float(input(\"Enter x117 : \"))\n    x118 = float(input(\"Enter x118 : \"))\n    x119 = float(input(\"Enter x119 : \"))\n    x120 = float(input(\"Enter x120 : \"))\n    x121 = float(input(\"Enter x121 : \"))\n    x122 = float(input(\"Enter x122 : \"))\n    x123 = float(input(\"Enter x123 : \"))\n    x124 = float(input(\"Enter x124 : \"))\n    x125 = float(input(\"Enter x125 : \"))\n    x126 = float(input(\"Enter x126 : \"))\n    x127 = float(input(\"Enter x127 : \"))\n    x128 = float(input(\"Enter x128 : \"))\n    x129 = float(input(\"Enter x129 : \"))\n    x130 = float(input(\"Enter x130 : \"))\n    x131 = float(input(\"Enter x131 : \"))\n    x132 = float(input(\"Enter x132 : \"))\n    x133 = float(input(\"Enter x133 : ",
        "num_ids": 2010
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (a ** 2) + (b ** 2) + (c ** 2)\n    x2 = 2 * (a ** 2) + (b ** 2) + (c ** 2)\n    x3 = -1 * a ** 2 - 2 * b ** 2 - 2 * c ** 2\n",
        "num_ids": 71
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here.\n    return a*b*c\n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b * c ** 0.5\n    ",
        "num_ids": 15
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a == 0 and b == 0:\n        return b * b * (c + c)\n    return (a * c * (b + b) + b * a * (c + c) + c * a * b) / (a + b + c + c)\n",
        "num_ids": 84
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b - c*b*c\n",
        "num_ids": 14
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = (b*b - 4*a*c) / (2*a)\n    y = (a*a - x*x) / (2*a)\n    return x, y\n",
        "num_ids": 48
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b + (c/b)\n    x2 = a + (c/b)\n    x3 = -a + (c/b)\n    return x1, x2, x3\n    \ndef parabola_trapezoidal(a, b, c): \n    '''\n    Write a function to find the trapezoidal parabola.\n    '''\n    x1 = a + b\n    x2 = a + (b/2)\n    x3 = b + (b/2)\n    x4 = a + (b/2)\n    return x1, x2, x3, x4\n    \ndef parabola_simpsons(a, b, c): \n    '''\n    Write a function to find the parabola with a natural rule.\n    '''\n    x1 = a + (b/2)\n    x2 = a + (b/3)\n    x3 = b + (b/3)\n    x4 = a + (b/3)\n    return x1, x2, x3, x4\n",
        "num_ids": 64
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = [0,0]\n    y = [0,0]\n    m = [0,0]\n    n = [0,0]\n",
        "num_ids": 38
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elem = False\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common_elem = True\n                break\n    return common_elem\n    \ndef common_elem_2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elem = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                common_elem += 1\n    return common_elem > 1\n",
        "num_ids": 67
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] == list2[j]:\n            i += 1\n            j += 1\n        else:\n            return True\n    \n    return False\n",
        "num_ids": 68
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Common elements will be the elements of the lists that have a common element\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for item in list1:\n        if item in list2:\n            common.append(item)\n    return len(common) > 0\n",
        "num_ids": 40
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = set(list1) & set(list2)\n    return len(common_elements) > 0\n",
        "num_ids": 32
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    for item in list1:\n        if item in list2:\n            common += 1\n    return common == len(list1)\n",
        "num_ids": 38
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1.intersection(list2)) > 0\n",
        "num_ids": 18
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for el in list1:\n        if el in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) >= 1 or len(list2) >= 1\n",
        "num_ids": 20
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    res = 0.0\n    low = max(height)\n    high = min(height)\n    mid = (high+low)/2\n    if base1 > base2:\n        return median_trapezium_recursive(base1,base2,mid,high,height)\n    else:\n        return median_trapezium_recursive(base2,base1,mid,low,height)\n",
        "num_ids": 96
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #solution 1\n    try:\n        s = height/2\n        #solution 2\n        #s = (height+height*height)/2\n        #solution 3\n        #s = (base1+base2)/2\n        s2 = (base2+base1)/2\n        s3 = (base1+base2+base1+base2)/3\n        return (s,s2,s3)\n    except:\n        print(\"Error, please enter a valid number\")\n        return None\n    \n    \n    ",
        "num_ids": 126
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_height = (base1 + base2) / 2\n    base2_height = (base2 + base1) / 2\n    \n    if (height > base1_height and height > base2_height):\n        return base1 + ((base1_height + base2_height) / 2)\n    \n    elif (height < base1_height and height < base2_height):\n        return base2 + ((base1_height + base2_height) / 2)\n    \n    elif (height > base1_height and height < base2_height):\n        return (base1 + base2_height) / 2\n    \n    elif (height > base1_height and height > base2_height):\n        return (base2 + base1_height) / 2\n    \n    else:\n        return \"Error: Should not happen\"\n",
        "num_ids": 201
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium_median(base1,base2,height):\n        return ((height/2)*(base1 + base2)/2) + ((height/2)*(base1 + base2)/2 + base1)\n    median = trapezium_median(base1,base2,height)\n    return median\n",
        "num_ids": 79
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<=base2:\n        median = (base1+base2)/2\n        return median\n    else:\n        return \"Error: the base is too large\"\n",
        "num_ids": 45
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_median = round((base1 + base2)/2,2)\n    base2_median = round((base2 + base1)/2,2)\n",
        "num_ids": 42
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the middle point of each base\n    base1_mid = (base1+base2)//2\n    base2_mid = (base1+base2)//2\n    # Find the medians\n    median_left_length = base1_mid + ((base1_mid+base2_mid)//2)*(height//2)\n    median_right_length = base2_mid + ((base1_mid+base2_mid)//2)*(height//2)\n",
        "num_ids": 117
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_dict={}\n    sum1=base1+base2\n    sum2=base2+base1\n    base_sum=sum1/2\n    for i in range(1,height+1):\n        trapezium_dict[i]=base_sum+base_sum*i/2\n        sum2=sum2-base2*height-base2*base2/2\n        base_sum=sum1/2\n    return trapezium_dict[height]/2\n",
        "num_ids": 118
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    if(base1 < base2):\n        return median_trapezium(base1, base2, height)\n    else:\n        return base2\n",
        "num_ids": 40
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height==0 or base1==0 or base2==0:\n        raise ValueError(\"Invalid base values\")\n    if base1==base2:\n        return height\n    if base1>base2:\n        a,b=base1,base2\n    else:\n        a,b=base2,base1\n    \n    s=((a+b)/2)*height\n    return int(s)\n",
        "num_ids": 98
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n    elif len(arr) == 1 and arr[0] > number:\n        return False\n    elif len(arr) == 1 and arr[0] > number:\n        return False\n    elif arr[0] > number:\n        return True\n    else:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_element = []\n    for element in arr:\n        if element > number:\n            greater_than_element.append(element)\n        if len(greater_than_element) == 0:\n            greater_than_element.append(0)\n    return greater_than_element\n",
        "num_ids": 75
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == None or len(arr) == 0 or number <= 0:\n        return False\n    if arr[0] < number:\n        return True\n    return check_greater(arr[1:], number)\n",
        "num_ids": 53
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            print(arr[i], end=\", \")\n        return \n    return \n",
        "num_ids": 47
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if arr.count(number) > 0 else False\n",
        "num_ids": 17
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    result = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] > number:\n            result += 1\n        i += 1\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count=0\n    if number in arr:\n        for i in range(len(arr)):\n            if number>arr[i]:\n                count+=1\n    if count>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # if we return false, then we have not found the element in the given array.\n    if len(arr) == 0:\n        return False\n    \n    # if we find the number, we can't check the array.\n    if arr[0] == number:\n        return False\n    \n    # we sort the given array.\n    arr = sorted(arr)\n    \n    # we count the number of times the number is in the array.\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == number:\n            count += 1\n        \n    # if the number is not found in the array, it is not greater.\n    if count == 0:\n        return False\n    \n    # we return the boolean.\n    return True\n",
        "num_ids": 182
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr == []:\n        return False\n    if arr[0] > number:\n        return False\n    if arr[0] < number and arr[0] >= number:\n        return True\n    if arr[-1] > number:\n        return True\n    if arr[-1] < number and arr[-1] >= number:\n        return True\n    return False\n",
        "num_ids": 90
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if len(text) < 3:\n        return False\n    # Check if the string contains a single a or more b's\n    if 'a' in text or 'b' in text:\n        return text_match('a', text) or text_match('b', text)\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '^a'\n    b_pattern = 'a[b]?'\n    try:\n        return re.search(pattern, text, re.IGNORECASE)\n    except:\n        print(\"Pattern not found, or the string is a mistake\")\n",
        "num_ids": 63
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall(r'[a-zA-Z]',text)\n    for r in result:\n        if r[-1]=='b':\n            return r[:-1]\n    \n    return None\n",
        "num_ids": 57
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'^(.*?)(a)(b)([.?!][^\\.])b$'\n    result = re.match(pattern, text)\n    if result is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('a(.)')\n    match = pattern.search(text)\n    return match.group()\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'([A-Za-z]+)\\b\\1+'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "num_ids": 40
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a)(b)')\n    match = pattern.search(text)\n    if match:\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    r = re.compile('[a-zA-Z]+\\s*[a-zA-Z]+\\s*[a-zA-Z]+\\s*[a-zA-Z]+\\s*[a-zA-Z]+')\n    m = r.search(text)\n    if m:\n        return True\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # text = text.strip()\n    pattern = re.compile(r\"a\\b\")\n    if pattern.match(text) == None:\n        return False\n    else:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text.endswith('a') or text.endswith('b')\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has one or more a's followed by one or more b's.\n    '''\n    return text.endswith('a') or text.endswith('b') or text.endswith('c') or text.endswith('d')\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has one or more b's followed by one or more a's.\n    '''\n    return text.endswith('b') or text.endswith('a')\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more a's followed by one or more b's.\n    '''\n    return text.endswith('a') or text.endswith('b') or text.endswith('c') or text.endswith('d')\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's followed by one or more b's.\n    '''\n    return text.endswith('b') or text.endswith('a') or text.endswith('c') or text.endswith('d')\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a a followed by one or more a's followed by one or more b's followed by one or more c's.\n    '''\n    return text.endswith('b') or text.endswith('c') or text.endswith('d') or text.endswith('e')\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more a's followed by one or more c's followed by one or more d's.\n    '''\n    return text.endswith('b') or text.endswith('c') or text.endswith('d') or text.endswith('e') or text.endswith('f')\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more c's followed by one or more d's followed by one or more e's.\n    '''\n    return text.endswith('b') or text.endswith('c') or text.endswith('d') or text.endswith('e') or text.endswith('f') or text.endswith('g')\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's.\n    '''\n    return text.endswith('b') or text.endswith('c') or text.endswith('d') or text.endswith('e') or text.endswith('f') or text.endswith('g') or text.endswith('h')\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's.\n    '''\n    return text.endswith('b') or text.endswith('c') or text.endswith('d') or text.endswith('e') or text.endswith('f') or text.endswith('g') or text.endswith('h') or text.endswith('i') or text.endswith('j') or text.endswith('k') or text.endswith('l')\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's.\n    '''\n    return text.endswith('b') or text.endswith('c') or text.endswith('d') or text.endswith('e') or text.endswith('f') or text.endswith('g') or text.endswith('h') or text.endswith('i') or text.endswith('j') or text.endswith('k') or text.endswith('l') or text.endswith('m') or text.endswith('n') or text.endswith('o') or text.endswith('p') or text.endswith('q') or text.endswith('r') or text.endswith('s') or text.endswith('t') or text.endswith('u') or text.endswith('v') or text.endswith('w') or text.endswith('x') or text.endswith('y') or text.endswith('z')\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's.\n    '''\n    return text.endswith('b') or text.endswith('c') or text.endswith('d') or text.endswith('e') or text.endswith('f') or text.endswith('g') or text.endswith('h') or text.endswith('i') or text.endswith('j') or text.endswith('k') or text.endswith('l') or text.endswith('m') or text.endswith('n') or text.endswith('o') or text.endswith('p') or text.endswith('q') or text.endswith('r') or text.endswith('s') or text.endswith('t') or text.endswith('u') or text.endswith('v') or text.endswith('w') or text.endswith('x') or text.endswith('y') or text.endswith('z')\ndef text_match_one_nine(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's followed by one or more k's followed by one or more l's followed by one or more m's followed by one or more n's followed by one or more o's followed by one or more p's followed by one or more q's followed by one or more r's followed by one or more s's followed by one or more t's followed by one or more u's followed by one or more v's followed by one or more w's followed by one or more x's followed by one or more y's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by one or more z's followed by on",
        "num_ids": 465
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 1\n    if n == 3 :\n        return 2\n    if n == 4 :\n        return 2\n    if n == 5 :\n        return 3\n    if n == 6 :\n        return 3\n    if n == 7 :\n        return 4\n    if n == 8 :\n        return 4\n    if n == 9 :\n        return 4\n    if n == 10 :\n        return 5\n    if n == 11 :\n        return 5\n    if n == 12 :\n        return 5\n    if n == 13 :\n        return 6\n    if n == 14 :\n        return 6\n    if n == 15 :\n        return 6\n    if n == 16 :\n        return 7\n    if n == 17 :\n        return 7\n    if n == 18 :\n        return 7\n    if n == 19 :\n        return 7\n    if n == 20 :\n        return 7\n    if n == 21 :\n        return 8\n    if n == 22 :\n        return 8\n    if n == 23 :\n        return 8\n    if n == 24 :\n        return 8\n    if n == 25 :\n        return 9\n    if n == 26 :\n        return 9\n    if n == 27 :\n        return 9\n    if n == 28 :\n        return 9\n    if n == 29 :\n        return 9\n    if n == 30 :\n        return 10\n    if n == 31 :\n        return 10\n    if n == 32 :\n        return 10\n    if n == 33 :\n        return 10\n    if n == 34 :\n        return 10\n    if n == 35 :\n        return 11\n    if n == 36 :\n        return 11\n    if n == 37 :\n        return 11\n    if n == 38 :\n        return 11\n    if n == 39 :\n        return 12\n    if n == 40 :\n        return 12\n    if n == 41 :\n        return 12\n    if n == 42 :\n        return 12\n    if n == 43 :\n        return 13\n    if n == 44 :\n        return 13\n    if n == 45 :\n        return 13\n    if n == 46 :\n        return 14\n    if n == 47 :\n        return 14\n    if n == 48 :\n        return 14\n    if n == 49 :\n        return 15\n    if n == 50 :\n        return 15\n    if n == 51 :\n        return 16\n    if n == 52 :\n        return 16\n    if n == 53 :\n        return 16\n    if n == 54 :\n        return 17\n    if n == 55 :\n        return 17\n    if n == 56 :\n        return 17\n    if n == 57 :\n        return 18\n    if n == 58 :\n        return 18\n    if n == 59 :\n        return 18\n    if n == 60 :\n        return 19\n    if n == 61 :\n        return 19\n    if n == 62 :\n        return 19\n    if n == 63 :\n        return 20\n    if n == 64 :\n        return 20\n    if n == 65 :\n        return 20\n    if n == 66 :\n        return 21\n    if n == 67 :\n        return 21\n    if n == 68 :\n        return 21\n    if n == 69 :\n        return 22\n    if n == 70 :\n        return 22\n    if n == 71 :\n        return 23\n    if n == 72 :\n        return 23\n    if n == 73 :\n        return 24\n    if n == 74 :\n        return 24\n    if n == 75 :\n        return 25\n    if n == 76 :\n        return 25\n    if n == 77 :\n        return 26\n    if n == 78 :\n        return 26\n    if n == 79 :\n        return 27\n    if n == 80 :\n        return 27\n    if n == 81 :\n        return 28\n    if n == 82 :\n        return 28\n    if n == 83 :\n        return 29\n    if n == 84 :\n        return 29\n    if n == 85 :\n        return 30\n    if n == 86 :\n        return 30\n    if n == 87 :\n        return 31\n    if n == 88 :\n        return 31\n    if n == 89 :\n        return 32\n    if n == 90 :\n        return 32\n    if n == 91 :\n        return 33\n    if n == 92 :\n        return 33\n    if n == 93 :\n        return 34\n    if n == 94 :\n        return 34\n    if n == 95 :\n        return 35\n    if n == 96 :\n        return 35\n    if n == 97 :\n        return 36\n    if n == 98 :\n        return 36\n    if n == 99 :\n        return 37\n    if n == 100 :\n        return 37\n    if n == 101 :\n        return 38\n    if n == 102 :\n        return 38\n    if n == 103 :\n        return 39\n    if n == 104 :\n        return 39\n    if n == 105 :\n        return 40\n    if n == 106 :\n        return 40\n    if n == 107 :\n        return 41\n    if n == 108 :\n        return 41\n    if n == 109 :\n        return 42\n    if n == 110 :\n        return 42\n    if n == 111 :\n        return 43\n    if n == 112 :\n        return 43\n    if n == 113 :\n        return 44\n    if n == 114 :\n        return 44\n    if n == 115 :\n        return 45\n    if n == 116 :\n        return 45\n    if n == 117 :\n        return 46\n    if n == 118 :\n        return 46\n    if n == 119 :\n        return 47\n    if n == 120 :\n        return 47\n    if n == 121 :\n        return 48\n    if n == 122 :\n        return 48\n    if n == 123 :\n        return 49\n    if n == 124 :\n        return 49\n    if n == 125 :\n        return 50\n    if n == 126 :\n        return 50\n    if n == 127 :\n        return 51\n    if n == 128 :\n        return 51\n    if n == 129 :\n        return 52\n    if n == 130 :\n        return 52\n    if n == 131 :\n        return 53\n    if n == 132 :\n        return 53\n    if n == 133 :\n        return 54\n    if n == 134 :\n        return 54\n    if n == 135 :\n        return 55\n    if n == 136 :\n        return 55\n    if n == 137 :\n        return 56\n    if n == 138 :\n        return 56\n    if n == 139 :\n        return 57\n    if n == 140 :\n        return 57\n    if n == 141 :\n        return 58\n    if n == 142 :\n        return 58\n    if n == 143 :\n        return 59\n    if n == 144 :\n        return 59\n    if n == 145 :\n        return 60\n    if n == 146 :\n        return 60\n    if n == 147 :\n        return 61\n    if n == 148 :\n        return 61\n    if n == 149 :\n        return 62\n    if n == 150 :\n        return 62\n    if n == 151 :\n        return 63\n    if n == 152 :\n        return 63\n    if n == 153 :\n        return 64\n    if n == 154 :\n        return 64\n    if n == 155 :\n        return 65\n    if n == 156 :\n        return 65\n    if n == 157 :\n        return 66\n    if n == 158 :\n        return 66\n    if n == 159 :\n        return 67\n    if n == 160 :\n        return 67\n    if n == 161 :\n        return 68\n    if n == 162 :\n        return 68\n    if n == 163 :\n        return 69\n    if n == 164 :\n        return 69\n    if n == 165 :\n        return 70\n    if n == 166 :\n        return 70\n    if n == 167 :\n        return 71\n    if n == 168 :\n        return 71\n    if n == 169 :\n        return 72\n    if n == 170 :\n        return 72\n    if n == 171 :\n        return 73\n    if n == 172 :\n        return 73\n    if n == 173 :\n        return 74\n    if n == 174 :\n        return 74\n    if n == 175 :\n        return 75\n    if n == 176 :\n        return 75\n    if n == 177 :\n        return 76\n    if n == 178 :\n        return 76\n    if n == 179 :\n        return 77\n    if n == 180 :\n        return 77\n    if n == 181 :\n        return 78\n    if n == 182 :\n        return 78\n",
        "num_ids": 2015
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return(n%10)\ndef sum_digits(n) :\n    '''\n    Write a python function to sum the digits in a number.\n    '''\n    return(sum(str(n)))\ndef is_prime(n) :\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return(False)\n    return(True)\ndef is_prime_iterative(n) :\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return(False)\n    return(True)\ndef is_prime_recursive(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if n<=1:\n        return(True)\n    if n==2 or n==3:\n        return(True)\n    if n%2==0:\n        return(False)\n    if n%3==0:\n        return(False)\n    return(is_prime_recursive(n-1))\n",
        "num_ids": 78
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = 0\n    while(n>0) :\n        last_digit = n%10\n        n = n//10\n    return last_digit\n",
        "num_ids": 40
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    ans = n % 10\n    if ans == 0 :\n        return int(n/10)\n    else :\n        return ans\n",
        "num_ids": 33
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = 0\n    while n > 0:\n        digit = n % 10\n        last = digit + last\n        n = n // 10\n    return last\n",
        "num_ids": 39
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    print(n)\n    return n % 10\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + last_Digit(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n_list = list(str(n))\n    return n_list[-1]\n    \nprint(lastDigit(123))\nprint(lastDigit(123))\nprint(lastDigit(9867432))\nprint(lastDigit(2_123))\n",
        "num_ids": 66
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    num = list1.pop()\n    num = list1.pop()\n    num = list1.pop()\n    num = list1.pop()\n    list1.append(-num)\n    print(list1)\nneg_nos(list1)\n",
        "num_ids": 62
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n    \ndef main():\n    print(\"Hello!\")\n    \nmain()\n",
        "num_ids": 52
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list()\n    negative = list()\n    for i in range(len(list1)):\n        list2.append(-list1[i])\n    negative.append(list2)\n    return negative\n",
        "num_ids": 53
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        neg_list.append(-i)\n    return neg_list\n",
        "num_ids": 33
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(-num)\n        else:\n            new_list.append(num)\n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i < 0:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(-num)\n    return neg_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = list()\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(-num)\n    return negative_numbers\n",
        "num_ids": 44
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 45
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            lst.append(str1[i])\n    return ''.join(lst)\n",
        "num_ids": 52
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    str3 = \"\"\n    for i in range(len(str1)):\n        if(str1[i]%2==0):\n            str2+=str1[i]\n    for i in range(len(str2)-1, -1, -1):\n        if(str2[i]%2==1):\n            str3+=str2[i]\n    return str3\n",
        "num_ids": 100
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    print(str1)\n    for i in str1:\n        if(i%2!= 0):\n            print(i, end=\"\")\n            count = count+1\n    print(count)\n    return str1\n        \n",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == '':\n        return ''\n    else:\n        str1 = str1.lower()\n        if len(str1) % 2 == 0:\n            return ''.join(str1[i] for i in range(0,len(str1),2) if i % 2 == 1)\n        else:\n            return ''.join(str1[i] for i in range(0,len(str1),2) if i % 2 == 0)\n    # END remove odd\n",
        "num_ids": 117
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(x for x in str1 if int(x)%2!=0)\n",
        "num_ids": 26
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    temp = ''\n    for i in str1:\n        if i % 2!= 0:\n            temp += i\n        else:\n            result += temp\n            temp = ''\n    return resul",
        "num_ids": 53
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) % 2!= 0:\n        if str1[0] == str1[-1]:\n            return str1.replace(str1[0],\"\")\n        else:\n            return str1.replace(str1[0],\"\") + str1.replace(str1[-1],\"\")\n    else:\n        return str1.replace(str1[0],\"\") + str1.replace(str1[-1],\"\")\n",
        "num_ids": 107
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # TODO: Write your code here\n",
        "num_ids": 12
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code goes here\n    print(\"The odd characters are:\")\n    for i in str1:\n        if i % 2!= 0:\n            print(i,end=\" \")\n    print(\"\\n\")\n",
        "num_ids": 54
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # C1-C4: count pairs of each letter\n    # C5: Count pairs of each letter\n    # C6: Count pairs of each letter\n    # C7: Count pairs of each letter\n    # C8: Count pairs of each letter\n    # C9: Count pairs of each letter\n",
        "num_ids": 71
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    count2 = 0\n    for x in test_list:\n        if x[0]==x[2]:\n            count = count+1\n        elif x[1]==x[2]:\n            count2 = count2+1\n    return count,count2\n",
        "num_ids": 70
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # count the number of bidirectional pairs\n    # for every pair in the tuple, we have 3 or more positive pairs (pair #1, pair #2, pair #3)\n    # count_bidirectional should return a list of number of pairs\n    # you will need a loop that counts the number of positive pairs\n    # return the list\n    \n    # your code goes here\n    lst = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][j][0] == test_list[j][i][0] and test_list[i][j][1] == test_list[j][i][1] and test_list[i][j][2] == test_list[j][i][2]:\n                lst.append(test_list[i][j])\n    return lst\n",
        "num_ids": 211
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = []\n",
        "num_ids": 9
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for elem in test_list:\n        if elem[0] == elem[1]:\n            count += 1\n    return count\n    \n",
        "num_ids": 42
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]>test_list[j]:\n                result+=1\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    count_counts = {}\n    for i in range(len(test_list)):\n        a, b = test_list[i]\n        if a == b:\n            count_counts[a] = count_counts.get(a, 0) + 1\n        else:\n            count_counts[a] = count_counts.get(b, 0) + 1\n            count_counts[b] = count_counts.get(a, 0) + 1\n    return count_counts\n",
        "num_ids": 125
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    sentence_count = 0\n    for sentence in test_list:\n        if len(sentence) > 1:\n            sentence_count += 1\n    return sentence_count\n",
        "num_ids": 44
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    bidirectional_dict = dict()\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                if test_list[i] not in bidirectional_dict:\n                    bidirectional_dict[test_list[i]] = 1\n                else:\n                    bidirectional_dict[test_list[i]] += 1\n",
        "num_ids": 133
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for tup in test_list:\n        if tup[0] == tup[1]:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ','.join(map(str, L))\n",
        "num_ids": 16
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # create an empty list to join the input lists into\n    join_list = []\n    \n    # iterate through each list\n    for i in range(len(L)):\n        # join the two lists together\n        join_list.append(L[i])\n    \n    # return the combined list\n    return int(''.join(join_list))\n",
        "num_ids": 87
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return reduce(lambda x,y: str(x)+str(y), L)\n",
        "num_ids": 24
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    dummy = L\n    new_dummy = ''\n    for n in dummy:\n        new_dummy += str(n)\n    return int(new_dummy)\n",
        "num_ids": 44
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    s = \"\".join(str(x) for x in L)\n    return int(s)\n",
        "num_ids": 28
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join_list(L):\n        '''\n        Write a function that takes a list of integers and returns a single integer.\n        '''\n        def get_sum(num_list):\n            '''\n            Write a function that takes a list of integers and returns a single integer.\n            '''\n            sum = 0\n            for num in num_list:\n                sum = sum + num\n            return sum\n        \n        if len(L) == 0:\n            return 0\n        else:\n            return get_sum(L)\n    return join_list(L)\n",
        "num_ids": 65
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    i=0\n    while i < len(L):\n        res += L[i]\n        i+=1\n    return res\n    pass\n",
        "num_ids": 41
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(0,len(L)):\n        L[i] = str(L[i])\n    return int(\"\".join(L))\n",
        "num_ids": 39
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        if len(L) == 1:\n            return L[0]\n        else:\n            s = \"\"\n            for el in L:\n                s = s + str(el)\n            return int(s)\n",
        "num_ids": 70
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    lst=[]\n    for i in L:\n        lst.append(i)\n    \n    return sum(lst",
        "num_ids": 34
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    regex = r'\\b(\\w*(?:[aeiou]+))\\b'\n    pattern = re.findall(regex,text)\n    if pattern:\n        adverbs = []\n        for word in pattern:\n            if word[-1]==\".\":\n                adverbs.append(word[:-1])\n            else:\n                adverbs.append(word)\n        adverb_position = [word[-1] for word in adverbs]\n        adverb_position = [x for x in adverb_position if x!=\".\"]\n        adverb_position = adverb_position[::-1]\n        return adverb_position\n    else:\n        return \"\",[]\n",
        "num_ids": 176
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regex = r'\\b[an]s\\b[a-z]*(?:\\s*\\b[a-z]{3}[a-z]+\\b)'\n    # pattern = re.compile(regex)\n    regex = r'\\b(?:\\s*[a-z]*[a-z]+[a-z]*(?:\\s*\\b[a-z]{3}[a-z]+\\b))\\b'\n    pattern = re.compile(regex)\n    m = pattern.search(text)\n    adverb_positions = m.group().split(' ')\n    adverb_positions = [i for i in adverb_positions if i!= '']\n    adverb_positions = [int(i) for i in adverb_positions if i!= '']\n    adverb_positions = [i for i in adverb_positions if i > 0]\n    adverb_positions = [i-1 for i in adverb_positions]\n    return adverb_positions\n",
        "num_ids": 257
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match_pattern = re.compile('^(ADV|ADVI|ADVIN|ADVINI|ADVINI|ADVINILI|ADVINILI|ADVINILINI|ADVINILINI|ADVINILINILI|ADVINILINILI|ADVINILINILINI|ADVINILINILINI|ADVINILINILINILI|ADVINILINILINILINI|ADVINILINILINILINI|ADVINILINILINILINILI|ADVINILINILINILINILINI|ADVINILINILINILINILINI|ADVINILINILINILINILINI|ADVINILINILINILINILINILI|ADVINILINILINILINILINILINI|ADVINILINILINILINILINILINILI)$', re.IGNORECASE)\n    matches = match_pattern.findall(text)\n    if matches:\n        return matches[0], matches[1]\n    return None, None\n",
        "num_ids": 268
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    text = re.sub(' ', '', text)\n    for n, word in enumerate(re.split('[!-\u00ff]', text)):\n        if word == '!' or word == '\u00ac':\n            continue\n        else:\n            if word.endswith('!'):\n                positions.append((n, word.replace('!', '').find('!')))\n            elif word.endswith('\u00b7'):\n                positions.append((n, word.replace('\u00b7', '').find('!')))\n            elif word.endswith('('):\n                positions.append((n, word.replace('(', '').find('!')))\n            elif word.endswith(')'):\n                positions.append((n, word.replace(')', '').find('!')))\n    positions = sorted(positions, key=lambda x: x[1])\n    return positions\n",
        "num_ids": 221
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # You are given an input sentence in the format below. \n    # Let's call it \"sentence\" if it's a sentence that contains only the letters from the English alphabet.\n    # The first two letters are always the letters 'a' and 'i' respectively.\n    # There will be no spaces after the first and last letters.\n    sentence = text.replace(' ', '').lower()\n    if sentence == '':\n        return -1, -1, -1, -1\n    # Remove spaces from the end of the sentence.\n    sentence = sentence[:-1]\n    # Splits sentence into words.\n    words = sentence.split(' ')\n    # Remove any words that are only letters.\n    for i in range(len(words)):\n        if words[i] not in ['a', 'i']:\n            return -1, -1, -1, -1\n    # Initialize the variables.\n    index = 0\n    first_letter = 'a'\n    adverbs = []\n    first_adverb = ''\n    while index < len(words):\n        # Check if it's a space.\n        if words[index] =='':\n            index = index + 1\n        # Check if it's a letter.\n        if words[index] in ['a', 'i']:\n            # Check if it's a space.\n            if words[index] =='':\n                # Check if it's the first letter.\n                if first_letter == 'a':\n                    # If it is, add it to the list of adverbs.\n                    adverbs.append(first_adverb)\n                    first_adverb = ''\n                    index = index + 1\n                # Check if it's the last letter.\n                elif first_letter == 'i':\n                    # If it is, add it to the list of adverbs.\n                    adverbs.append(first_adverb)\n                    first_adverb = ''\n                    index = index + 1\n                # If it is not, check if it's a space.\n                else:\n                    first_adverb = first_letter + words[index]\n                    index = index + 1\n            else:\n                first_adverb = first_letter + words[index]\n                index = index + 1\n        # Otherwise, it is not a space.\n        else:\n            first_adverb = first_letter + words[index]\n            index = index + 1\n    # If there are no adverbs, return -1.\n    if len(adverbs) == 0:\n        return -1, -1, -1, -1\n    # Sort adverbs by order.\n    adverbs.sort()\n    # Return the index of the adverb.\n    return adverbs.index(first_adverb), index, first_adverb, words[index]\n",
        "num_ids": 647
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.search('(([a-zA-Z_]\\w*):)([A-Z_]+)([0-9]+)',text)\n    if result!= None:\n        adverb = result.group(3)\n        adverb_position = result.group(4)\n    else:\n        print(\"Could not find adverb position\")\n    return adverb, adverb_position\ndef get_adverbs(text):\n    '''\n    Function to get all the adverbs.\n    '''\n    result = re.findall('(a-zA-Z_)([a-zA-Z_]+)([0-9]+)',text)\n    adverbs = []\n    for adverb in result:\n        adverbs.append(adverb[1])\n    return adverbs\n",
        "num_ids": 70
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['a', 'an', 'the', 'an', 'the']\n    pattern = r'^(a|an|the|an|the|an)\\b'\n    adverb_positions = []\n    for adverb in adverbs:\n        for i in range(len(text)):\n            if re.search(pattern, text[i:i+len(adverb)], re.IGNORECASE):\n                adverb_positions.append((i,i+len(adverb)))\n    return adverb_positions\n",
        "num_ids": 129
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def get_adverbs(text):\n        positions = []\n        for i in range(len(text)):\n            if text[i].isalpha():\n                if text[i] not in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]:\n                    if text[i] in [\"+\", \"-\", \"|\", \",\", \".\"]:\n                        if text[i+1] == \"e\":\n                            positions.append(i)\n        return positions\n",
        "num_ids": 128
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def search_adverb(text, pattern, pos):\n        '''\n        Find the first adverb in a given sentence and return its position and the text replaced with the adverb.\n        '''\n        regex = re.compile(pattern)\n        match = regex.search(text)\n        while match:\n            start = match.span()[0]\n            end = match.span()[1]\n            text = text[:start] + text[end:]\n            start = 0\n            match = regex.search(text, start)\n        return text, start, end\n    pattern = '\\w{2}'\n    adverb = search_adverb(text, pattern, 0)\n    return adverb\n",
        "num_ids": 122
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # pattern for finding adverb\n    pattern = r'(?:l|ll|lll|(?:' + \\\n            r'|l[aeiou]|ll[aeiou]|lll[aeiou]|ll[aeiou])[aeiou])'\n",
        "num_ids": 69
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    for i in l:\n        area += i**3\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a=0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if i == j==k:\n                    pass\n                else:\n                    a+=l[i][j][k]\n    return a\n",
        "num_ids": 66
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**3)*(3.1416)\n",
        "num_ids": 16
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S = 4 * l * (l+1)\n    return S\n",
        "num_ids": 19
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                surfacearea += (l**3) * (i + 1) + (j + 1)**2 + (k + 1)**2\n    return surfacearea\n",
        "num_ids": 72
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l < 0:\n        print(\"Invalid input\")\n        return\n    elif l % 4!= 0:\n        print(\"Invalid input\")\n        return\n    else:\n        surface = (4/3)*(l**3)\n        return surface\n",
        "num_ids": 62
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    side_length = l/3\n    return round(side_length ** 3)\n",
        "num_ids": 22
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l <= 0:\n        print('Error: Invalid dimension.')\n    else:\n        area = 0\n        l = abs(l)\n        for i in range(l):\n            for j in range(l):\n                for k in range(l):\n                    area += 4*(l**3)\n        print(f'The surface area of the cube with size {l} is: {area}')\n",
        "num_ids": 97
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 0.5*(l[0]*l[3] + l[0]*l[1] + l[0]*l[2] + l[1]*l[3] + l[1]*l[2] + l[2]*l[3])\n",
        "num_ids": 69
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    l = len(nums)\n    if l <= 1:\n        return nums\n    elif nums[0] > nums[1]:\n        nums = nums[::-1]\n    else:\n        nums = nums[::-1]\n    l2 = len(nums)\n    for i in range(2,l2):\n        if nums[i] > 0:\n            nums[i] = nums[i]/nums[i-1]\n    return nums\n",
        "num_ids": 125
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    positives = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n            positives += num\n",
        "num_ids": 39
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for item in nums:\n        if item > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    print(count)\n    return count/len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # https://stackoverflow.com/questions/82963142/python-array-arrays-and-arrays-count-values-in-a-single-element-in-python\n    def list_num_list(num):\n        num_array = array('i', [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "num_ids": 2009
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #compare each num with the max number\n    #if it is more than the max\n    #return the max value\n    \n    #convert to array\n    a = array('i',nums)\n    l = len(a)\n    max = a[0]\n    for i in range(1,l):\n        if a[i] > max:\n            max = a[i]\n    #return max\n    return max/l\n    \n",
        "num_ids": 108
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    i=0\n    num=1\n    for num in nums:\n        if num>0:\n            i+=1\n        else:\n            num=num*num\n    return num/i\ndef negative_count(nums):\n    '''\n    Write a function that returns the ration of negative numbers in an array of integers.\n    '''\n    i=0\n    num=1\n    for num in nums:\n        if num<0:\n            i+=1\n        else:\n            num=num*num\n    return num/i\ndef positive_count_sub(nums):\n    '''\n    Write a function that returns the ration of positive numbers in an array of integers.\n    '''\n    i=0\n    num=1\n    for num in nums:\n        if num>0:\n            i+=1\n        else:\n            num=num*num\n    return num/i\ndef negative_count_sub(nums):\n    '''\n    Write a function that returns the ration of negative numbers in an array of integers.\n    '''\n    i=0\n    num=1\n    for num in nums:\n        if num<0:\n            i+=1\n        else:\n            num=num*num\n    return num/i\ndef positive_count_mod(nums):\n    '''\n    Write a function that returns the ration of positive numbers in an array of integers.\n    '''\n    i=0\n    num=1\n    for num in nums:\n        if num>0:\n            i+=1\n        else:\n            num=num*num\n    return num/i\ndef negative_count_mod(nums):\n    '''\n    Write a function that returns the ration of negative numbers in an array of integers.\n    '''\n    i=0\n    num=1\n    for num in nums:\n        if num<0:\n            i+=1\n        else:\n            num=num*num\n    return num/i\ndef is_prime(num):\n    '''\n    Write a function that returns True if the number is a prime number and False if it is not.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num<2 or num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num%i==0:\n                return False\n        return True\ndef is_prime_sub(num):\n    '''\n    Write a function that returns True if the number is a prime number and False if it is not.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num<2 or num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num%i==0:\n                return False\n        return True\ndef is_prime_mod(num):\n    '''\n    Write a function that returns True if the number is a prime number and False if it is not.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num<2 or num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num%i==0:\n                return False\n        return True\ndef is_prime_square(num):\n    '''\n    Write a function that returns True if the number is a prime number and False if it is not.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num<2 or num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num%i==0:\n                return False\n        return True\ndef is_prime_square_mod(num):\n    '''\n    Write a function that returns True if the number is a prime number and False if it is not.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num<2 or num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num%i==0:\n                return False\n        return True\ndef is_prime_cube(num):\n    '''\n    Write a function that returns True if the number is a prime number and False if it is not.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num<2 or num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num%i==0:\n                return False\n        return True\ndef is_prime_cube_mod(num):\n    '''\n    Write a function that returns True if the number is a prime number and False if it is not.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num<2 or num%2==0:\n        return False\n    elif num%3==0:\n        return False\n    else:\n        for i in range(5,int(num**0.5)+1,6):\n            if num%i==0:\n                return False\n        return True\ndef find_primes(num):\n    '''\n    Write a function that returns a list of all prime numbers less than or equal to the argument.\n    '''\n    if num==0:\n        return []\n    elif num==1:\n        return [1]\n    elif num==2:\n        return [2,3]\n    elif num==3:\n        return [2,3,5]\n    elif num==4:\n        return [2,3,5,7]\n    elif num==5:\n        return [2,3,5,7,11]\n    elif num==6:\n        return [2,3,5,7,11,13]\n    elif num==7:\n        return [2,3,5,7,11,13,17]\n    elif num==8:\n        return [2,3,5,7,11,13,17,19]\n    elif num==9:\n        return [2,3,5,7,11,13,17,19,23]\n    elif num==10:\n        return [2,3,5,7,11,13,17,19,23,29]\n    elif num==11:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41]\n    elif num==12:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n    elif num==13:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]\n    elif num==14:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59]\n    elif num==15:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]\n    elif num==16:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,63]\n    elif num==17:\n        return [2,3,5,7,11,13,17,19,23,29,31,37",
        "num_ids": 545
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        n = len(nums)\n        i = 0\n        d = {}\n        k = 0\n        while i < n:\n            if nums[i] > 0:\n                d[nums[i]] = 1\n                i += 1\n            else:\n                d[nums[i]] = -1\n                i += 1\n        for key in d:\n            if d[key] == 1:\n                k += 1\n        return k/n\n",
        "num_ids": 128
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    print(count)\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums == []:\n        return 0\n    return nums.count(0) / len(nums)\n",
        "num_ids": 30
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if list1:\n        list1.sort()\n        return list1[-1]\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    max_val = 0\n    max_val_index = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_val:\n                max_val = list1[i]\n                max_val_index = i\n    if max_val == 0:\n        return None\n    return max_val_index\n",
        "num_ids": 111
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #print(list1)\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    #print(list1)\n    return max(list1)\n",
        "num_ids": 64
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    maximum = list1[0]\n    for i in range(1, len(list1)):\n        if (list1[i] < 0):\n            if (list1[i] < 0):\n                maximum = max(maximum, list1[i])\n    print(maximum)\n    return maximum\n",
        "num_ids": 80
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for value in list1:\n        if value < 0:\n            if largest < value:\n                largest = value\n    return largest\n",
        "num_ids": 38
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n        elif list1[i] == 0:\n            return i\n",
        "num_ids": 56
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -1\n    for i in list1:\n        if i < 0:\n            max_num = i\n            break\n    return max_num\n",
        "num_ids": 41
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    big_num = -1\n    for i in list1:\n        if i < 0:\n            big_num = i\n            break\n    return big_num\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(-x for x in list1 if x < 0)\n",
        "num_ids": 18
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            l.append(list1[i])\n    l = sorted(l)\n    for i in range(len(l)):\n        if l[i] < 0:\n            return l[i]\n",
        "num_ids": 79
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # keep the current index of the tuple\n    index = 0\n    # loop through the current tuple and remove the k from each tuple\n    while index < len(test_list):\n        # if the tuple is the last one, remove the last index\n        if index == len(test_list):\n            #print(\"tuple: {}, index: {}\".format(test_list[index], index))\n            del test_list[index]\n        # get the tuple item from the index of the tuple\n        tuple_item = test_list[index]\n        # remove the k from the tuple\n        del test_list[index]\n        # add the k to the index\n        test_list.insert(index, tuple_item)\n        # increment the index\n        index += 1\n    return test_list\n",
        "num_ids": 186
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_tuple = ()\n    new_list = []\n",
        "num_ids": 17
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # E.g.:\n    # test_list = [('a', 'b', 'c'), ('d', 'e', 'f')]\n    # K = 3\n    # result = ['a', 'd', 'e', 'f']\n    # return result\n",
        "num_ids": 64
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n",
        "num_ids": 12
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[0:K]\n",
        "num_ids": 13
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) % K == 0:\n        return test_list\n    else:\n        return [test_list[i : i + K] for i in range(0, len(test_list), K)]\n",
        "num_ids": 55
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    \n    for index in range(len(test_list)):\n        if len(test_list[index]) < K:\n            test_list[index] = (' '*(K-len(test_list[index])))+test_list[index]\n        \n    return return_list\n",
        "num_ids": 78
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(test_list)\n    return [(x[:K], x[K:]) for x in test_list]\n",
        "num_ids": 31
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # YOUR CODE HERE\n    def trim(tuple_list):\n        for i in range(K):\n            for j in range(len(tuple_list) - i):\n                tuple_list.pop()\n        return tuple_list\n",
        "num_ids": 59
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_tuple = ()\n    for i in test_list:\n        if len(i) < K:\n            new_tuple += (i,)\n        else:\n            new_tuple += (i[0:K],)\n    return new_tuple\n",
        "num_ids": 65
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1], test_tup1[0] * test_tup2[1]\n",
        "num_ids": 56
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # TODO: COMPLETE THIS FUNCTION\n    result_tuple = ()\n    #for index in range(len(test_tup1)):\n    #    result_tuple += (test_tup1[index] * test_tup2[index])\n    result_tuple = test_tup1 * test_tup2\n    return result_tuple\n",
        "num_ids": 91
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for index in test_tup1:\n        result_tuple += (index * test_tup2[index])\n",
        "num_ids": 39
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #declaring variables\n    index1 = 0\n    index2 = 0\n",
        "num_ids": 20
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        print('\\nError: Index Multiplication cannot be performed.\\n')\n        return\n    for i in range(0,len(test_tup1)):\n        print(i + 1, ') ', test_tup1[i],'x ', test_tup2[i],'= ', test_tup1[i] * test_tup2[i])\n",
        "num_ids": 114
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    len_of_1 = len(l1)\n    len_of_2 = len(l2)\n    list_of_sum = []\n    for i in range(len_of_1):\n        for j in range(len_of_2):\n            list_of_sum.append(l1[i]*l2[j])\n    return tuple(list_of_sum)\n",
        "num_ids": 121
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mult = 1\n    for i in test_tup1:\n        mult = mult * i\n    for i in test_tup2:\n        mult = mult * i\n    return mult\n",
        "num_ids": 47
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Length of tuples should be same.\")\n        return \n    for i in range(len(test_tup1)):\n        print(test_tup1[i], test_tup2[i], test_tup1[i]*test_tup2[i])\n    return\n",
        "num_ids": 94
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup = res_tup + (test_tup1[i] * test_tup2[i])\n    return res_tup\n",
        "num_ids": 63
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index = 0\n    result = 0\n    test_list1 = test_tup1\n    test_list2 = test_tup2\n",
        "num_ids": 36
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count=0\n    for i in lst: \n        if i in tup: \n            count += 1\n    return count \n \nprint(count_Occurrence((1, 3, 4, 5), [1,2,3,5,1,5,2,3]))\nprint(count_Occurrence((1, 2, 1, 3, 4, 5), [1, 2, 3, 4, 5, 1, 5, 2]))\nprint(count_Occurrence((1, 4, 2, 5), [1, 2, 4, 5, 1, 2, 5, 4, 5]))\nprint(count_Occurrence((1, 5, 2, 3), [1, 2, 5, 3, 1, 5, 2, 3]))",
        "num_ids": 178
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in lst:\n        if x in tup:\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    return c.update(tup)\n",
        "num_ids": 21
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).most_common(len(tup))\n",
        "num_ids": 19
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = 0\n    for ele in tup: \n        occurence += 1 \n    return occurence \n",
        "num_ids": 33
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ = Counter(tup)\n    return sum(occ.values())\n",
        "num_ids": 20
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ_list = Counter(lst)\n    occ_dict = dict(occ_list)\n    for ele in tup: \n        if ele in occ_dict: \n            occ_dict[ele] = occ_dict[ele] + 1\n        else:\n            occ_dict[ele] = 1\n    return occ_dict \n",
        "num_ids": 82
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup) \n    lst = lst[0]\n    for i in lst:\n        if i in c.keys():\n            c[i] = c[i] + 1\n    return c\n",
        "num_ids": 56
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # your code goes here\n    # return the count\n    count=0\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            count+=1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if tup[0] in lst:\n        return lst.count(tup[0])\n    else:\n        return 0\n    \n    \ndef find_parent(parent, x): \n    '''\n    Write a python function to find the parent of the node.\n    '''\n    if parent[x]!= x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\n",
        "num_ids": 37
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in range(1, len(nums)):\n        result.append(nums[i] ** 3)\n    return result\n    \n    \nnums = [1,2,3,4,5]\nprint(cube_nums(nums))\n",
        "num_ids": 70
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) == 1:\n        return [nums[0]]\n    else:\n        new_nums = []\n        new_nums.append(nums[0])\n        for i in range(len(nums)):\n            if nums[i]!= nums[i]:\n                new_nums.append(nums[i])\n        return new_nums\n",
        "num_ids": 97
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num ** 3 for num in nums]\n    return cubes\n",
        "num_ids": 21
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) == 0:\n        return\n    elif len(nums) == 1:\n        return nums[0]*nums[0]*nums[0]\n    elif len(nums) == 2:\n        return nums[0]*nums[1]*nums[1]\n    elif len(nums) == 3:\n        return nums[0]*nums[1]*nums[2]\n    elif len(nums) == 4:\n        return nums[0]*nums[1]*nums[2]*nums[3]\n    else:\n        return nums[0]*nums[1]*nums[2]*nums[3]*nums[4]\n",
        "num_ids": 186
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    import math\n    cube = 0\n    for num in nums:\n        cube = cube * num\n    return cube\n",
        "num_ids": 30
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) <= 0:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n",
        "num_ids": 8
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # return int(sum([int(num)**3 for num in nums]))\n    return [int(num**3) for num in nums]\n",
        "num_ids": 39
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    n = len(nums)\n    return [x**3 for x in nums]\n",
        "num_ids": 24
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = [num ** 3 for num in nums]\n    return sum(cube_list)\n",
        "num_ids": 27
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    lst = []\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        lst.append(sum)\n    return lst\n",
        "num_ids": 45
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            list.append(i)\n    return sum(list)\n",
        "num_ids": 44
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    i=0\n    while i<n:\n        sum=sum+i\n        i=i+1\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total=0\n    for i in range(0,n):\n        total+=i\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        num = num + i\n    return num\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n + 1) // 2\n",
        "num_ids": 14
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return '' if len(str) <= l else str[:l]\n",
        "num_ids": 19
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    split_str = []\n    for i in range(len(l)):\n        split_str.append(l[i].split(\":\")[0].split('-'))\n    for i in range(len(split_str)):\n        if len(split_str[i][0]) == 0 or len(split_str[i][1]) == 0:\n            pass\n        else:\n            str_list.append(split_str[i][0])\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].strip()\n    if len(str_list) == 0:\n        return None\n    else:\n        return str_list[0]\n",
        "num_ids": 176
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    word_list = []\n    for s in str:\n        if s in word_list:\n            word_list.remove(s)\n        else:\n            word_list.append(s)\n    word_list = ''.join(word_list)\n    print(word_list)\n    \n    return word_list\n    \ndef main():\n    #take user input\n    \n    #split input into list of words\n    str = input('Enter a string of words separated by spaces: ').split()\n    \n    #join each word with spaces, then print\n    print(extract_string(str, [' ', 'a', 'b', 'c']))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 173
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for s in str:\n        if s.find(l)!= -1:\n            res.append(s[l.find(l):])\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    for i in l:\n        s.append(i[-l:])\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i=0\n    string=''\n    while i<len(str):\n        string+=str[i:i+l]\n        i+=l\n    return string\n",
        "num_ids": 42
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return len(str[:l])\n",
        "num_ids": 12
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # TODO: write your own implementation\n    # return None\n    pass\n    # raise NotImplementedError\n",
        "num_ids": 29
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        if(i+l>len(str)-1):\n            break\n        else:\n            yield str[i:i+l]\n",
        "num_ids": 47
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = \"\"\n    for i in range(l):\n        extracted_str += str[i]\n",
        "num_ids": 30
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    print(text1)\n    text = re.sub(r'\\s+','', text1)\n    print(text)\n    text = re.sub(r'\\s+','', text).strip().lower()\n    print(text)\n    return text\n",
        "num_ids": 64
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace('\\t', '').replace('\\n', '').replace('\\r', '').replace('  ', '')\n    text3 = re.sub(\" +\", \" \", text2)\n    return text3\n",
        "num_ids": 58
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(\"\\n\",\" \")\n    text3 = text2.replace(\"\\t\",\" \")\n    text4 = text3.replace(\" \",\" \")\n    text5 = text4.replace(\"  \",\" \")\n    return text5\n",
        "num_ids": 65
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''\n    for t in text1:\n        if t!= '\\n' and t!= '\\t':\n            text += t\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub(r'\\s+', '', text1)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    #for every character in the input string\n    for i in text1:\n        #if it's not a whitespace\n        if not i.isspace():\n            text2 += i\n",
        "num_ids": 51
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1==' ':\n        pass\n    else:\n        text1=re.sub('[\\W_]+',' ',text1)\n    return text1\n",
        "num_ids": 42
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # initializing an empty string\n    new_text = ''\n    # looping through the string\n    for char in text1:\n        if char =='':\n            # if char is a space, remove it\n            new_text += char\n        else:\n            # if char is not a space, add it to the string\n            new_text += char\n    # returning the resulting string\n    return new_text\n",
        "num_ids": 97
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text1)\n",
        "num_ids": 24
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub(\"\\s+\",'', text1)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try: \n        if actual_cost < sale_amount:\n            return actual_cost-sale_amount\n        else:\n            return 0\n    except: \n        return 0\n",
        "num_ids": 45
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if sale_amount == actual_cost:\n        return 0.0\n    elif sale_amount == actual_cost + actual_cost*0.01:\n        return 0.0\n    else:\n        return actual_cost - sale_amount\n",
        "num_ids": 61
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0: return 0\n    else: \n        return sale_amount * actual_cost / sale_amount\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    elif actual_cost <= sale_amount:\n        return actual_cost\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount==0:\n        return 0\n    else:\n        return actual_cost-(sale_amount*0.1)\n",
        "num_ids": 34
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=actual_cost:\n        return 0\n    else:\n        return actual_cost-sale_amount\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost + sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n == 1) : \n        return 1\n    else : \n        if(n%2 == 0) : \n            return sumofFactors(n/2) \n        else : \n            return (n*sumofFactors(n-1)) \n",
        "num_ids": 67
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # to return sum of even factors\n    if n == 1 :\n        return 1\n    # return the sum of even factors\n    return sum(filter(lambda x: x % 2 == 0, range(1, n+1)))\n    # in the previous line, filter() recur for all factors of n and store it into a list\n",
        "num_ids": 80
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0 : \n        return math.factorial(n) // math.factorial(n // 2) \n    else : \n        return math.factorial(n) // math.factorial(3 * n + 1) \n",
        "num_ids": 61
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    elif n % 2 == 0: \n        return sumofFactors(n//2) + n \n    else: \n        return (n * sumofFactors(n-1)) \n",
        "num_ids": 66
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2 :\n        return 0\n    if n == 2 :\n        return 1\n    else :\n        i = 3\n        while i <= math.sqrt(n) :\n            if n % i == 0 :\n                return i\n            i += 2\n",
        "num_ids": 64
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # # base case \n    if n <= 1 : \n        return n \n    \n    # # base case \n    if n % 2 == 0 : \n        return sumofFactors(n//2) \n    \n    # # recursive case \n    else : \n        return sumofFactors(n//2) + sumofFactors(n//2 + 1) \n        \n    \n    \nprint(sumofFactors(500)",
        "num_ids": 110
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            sum=sum+i\n    return sum\ndef numberOfCommonFactors(n,n1):\n    '''\n    n: number\n    n1: n1 and n\n    return : the common factor for n and n1\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i==0 and n1%i==0:\n            l.append(i)\n    if len(l)==0:\n        return 0\n    else:\n        return len(l)\ndef isprime(n):\n    '''\n    n: number\n    return : true if n is a prime number, false otherwise\n    '''\n    if n==0 or n==1:\n        return False\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef primeFactors(n):\n    '''\n    n: number\n    return : a list of prime numbers\n    '''\n    l=[]\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            if n%i==0:\n                l.append(i)\n            else:\n                l.append(i)\n    if len(l)==0:\n        return []\n    else:\n        return l\ndef factors(n):\n    '''\n    n: number\n    return : a list of factors of n\n    '''\n    l=[]\n    for i in range(1,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            l.append(i)\n    return l\ndef isHappy(n):\n    '''\n    n: number\n    return : true if n is a happy number, false otherwise\n    '''\n    s=set()\n    g=0\n    for i in range(2,int(math.sqrt(n))+1):\n        g+=1\n        f=sumofFactors(i)\n        if f==n:\n            s.add(i)\n    for i in s:\n        if isprime(i):\n            if isprime(i)*isprime(i-1):\n                return False\n    return True\ndef isPerfect(n):\n    '''\n    n: number\n    return : true if n is a perfect number, false otherwise\n    '''\n    if n<0:\n        return False\n    f=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            f=1\n            break\n    if f==1:\n        return True\n    else:\n        return False\ndef isDivisible(n,k):\n    '''\n    n: number\n    k: number\n    return : true if n is divisible by k, false otherwise\n    '''\n    f=False\n    if n<0 or k<0:\n        return False\n    if n<k:\n        return False\n    l=[]\n    i=2\n    while i<=k:\n        if n%i==0:\n            l.append(i)\n        i+=1\n    if len(l)==0:\n        return True\n    else:\n        return False\ndef isNotPerfect(n):\n    '''\n    n: number\n    return : true if n is not a perfect number, false otherwise\n    '''\n    if n<0:\n        return False\n    i=2\n    while i<=int(math.sqrt(n)):\n        if n%i==0:\n            return True\n        i+=1\n    return False\ndef isPerfectNumber(n):\n    '''\n    n: number\n    return : true if n is a perfect number, false otherwise\n    '''\n    if n==2 or n==3 or n==5:\n        return True\n    if n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\ndef isFactor(n):\n    '''\n    n: number\n    return : true if n is a factor of n, false otherwise\n    '''\n    f=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            f=1\n            break\n    if f==1:\n        return False\n    else:\n        return True\ndef isSubset(s,n):\n    '''\n    s: set\n    n: number\n    return : true if s is a subset of n, false otherwise\n    '''\n    if n==1:\n        return True\n    elif n==s[-1]:\n        return True\n    for i in s:\n        if not isSubset(s[i+1:],n):\n            return False\n    return True\ndef isSuperset(s,n):\n    '''\n    s: set\n    n: number\n    return : true if s is a superset of n, false otherwise\n    '''\n    if n==1:\n        return True\n    elif n==s[-1]:\n        return True\n    for i in s:\n        if isSuperset(s[i+1:],n):\n            return True\n    return False\ndef isEquivalent(n,m):\n    '''\n    n: number\n    m: number\n    return : true if n is equivalent to m, false otherwise\n    '''\n    if isPerfectNumber(n) and isPerfectNumber(m):\n        if isPerfectNumber(n/m) and isPerfectNumber(m/n):\n            return True\n        else:\n            return False\n    else:\n        if n==0 and m==0:\n            return True\n        if n<0 or m<0:\n            return False\n        if n==m:\n            return True\n        if n>m:\n            return False\n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i==0:\n                if n%i==0:\n                    return False\n        return True\ndef isEqual(n,m):\n    '''\n    n: number\n    m: number\n    return : true if n and m are equal, false otherwise\n    '''\n    if isPerfectNumber(n) and isPerfectNumber(m):\n        if isPerfectNumber(n/m) and isPerfectNumber(m/n):\n            return True\n        else:\n            return False\n    else:\n        if n==0 and m==0:\n            return True\n        if n<0 or m<0:\n            return False\n        if n==m:\n            return True\n        if n>m:\n            return False\n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i==0:\n                if n%i==0:\n                    return False\n        return True\ndef isEqualPrimeFactors(n):\n    '''\n    n: number\n    return : true if n is prime with factors, false otherwise\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    l=[]\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            l.append(i)\n    if len(l)==0:\n        return False\n    else:\n        return True\ndef isPerfectNumber2(n):\n    '''\n    n: number\n    return : true if n is a perfect number, false otherwise\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return True\n    l=[]\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            l.append(i)\n    if len(l)==0:\n        return False\n    else:\n        return True\ndef isPerfectNumber3(n):\n    '''\n    n: number\n    return : true if n is a perfect number, false otherwise\n    '''\n    if n==1:\n        return True\n    elif n=",
        "num_ids": 18
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0 :\n            s += i\n    return s\n",
        "num_ids": 47
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 : \n        return -sumofFactors(-n)\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    if n % 2 == 0: \n        return 1 + sumofFactors(n//2)\n    else : \n        return sumofFactors(n-1) + sumofFactors(n//2)\n",
        "num_ids": 96
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n%2 == 0: \n        return sumofFactors(int(n/2)) \n    else : \n        return sumofFactors(int(math.sqrt(n))) + sumofFactors(int(math.sqrt(n)/2)) \n",
        "num_ids": 95
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    w_c = ['z']\n    for w in w_c:\n        text = re.sub(f'{w}', '', text)\n    return text\ndef is_palindrome(string):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    string = text_match_wordz(string)\n    is_palindrome = string == string[::-1]\n    return is_palindrome\ndef text_match_word_after_words(text, words):\n    '''\n    Write a function that matches a word after all words in the list.\n    '''\n    list_word = []\n    for word in words:\n        list_word.append(word)\n    for i in range(len(text)):\n        list_word.append(text[i])\n    list_word.append(' ')\n    list_word = list_word[::-1]\n    list_word = list_word[::-1]\n    list_word = list_word[::-1]\n    print(' '.join(list_word))\n    return list_word\ndef text_match_word_after_words2(text, words):\n    '''\n    Write a function that matches a word after all words in the list.\n    '''\n    list_word = []\n    for word in words:\n        list_word.append(word)\n    list_word.append(' ')\n    list_word = list_word[::-1]\n    list_word = list_word[::-1]\n    list_word = list_word[::-1]\n    print(' '.join(list_word))\n    return list_word\ndef text_match_word_after_words3(text, words):\n    '''\n    Write a function that matches a word after all words in the list.\n    '''\n    list_word = []\n    for word in words:\n        list_word.append(word)\n    list_word.append(' ')\n    list_word = list_word[::-1]\n    list_word = list_word[::-1]\n    list_word = list_word[::-1]\n    print(' '.join(list_word))\n    return list_word\n",
        "num_ids": 95
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return text.lower().count('z')>0\n",
        "num_ids": 15
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z = []\n    l = list(text)\n    for i in range(len(l)):\n        if l[i]=='z':\n            z.append(i)\n    return z\n",
        "num_ids": 50
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #check if the word is valid, if it is not return True\n    #else return False\n    global wordz\n    wordz = False\n    for i in text:\n        if (re.match(r'z',i)):\n            wordz = True\n    return wordz\n",
        "num_ids": 68
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile('z')\n    return regex.search(text) is not None\n",
        "num_ids": 26
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = '.*z.*'\n    text = re.sub(pattern, 'z', text)\n",
        "num_ids": 26
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if 'z' in text:\n        text = text.replace('z', 'Z')\n    return text\n",
        "num_ids": 28
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    return pattern.findall(text)\ndef text_match_word(text):\n    '''\n    Write a function that matches any word containing 'x'.\n    '''\n    pattern = re.compile(r'x')\n    return pattern.findall(text)\ndef text_match_word_2(text):\n    '''\n    Write a function that matches any word containing 'y' or 'u'\n    '''\n    pattern = re.compile(r'y|u')\n    return pattern.findall(text)\ndef text_match_word_3(text):\n    '''\n    Write a function that matches any word containing 'z' and 'o'.\n    '''\n    pattern = re.compile(r'z|o')\n    return pattern.findall(text)\ndef text_match_word_4(text):\n    '''\n    Write a function that matches any word containing 'z' and 'w'.\n    '''\n    pattern = re.compile(r'z|w')\n    return pattern.findall(text)\ndef text_match_word_5(text):\n    '''\n    Write a function that matches any word containing 'z' and 'x'\n    '''\n    pattern = re.compile(r'z|x')\n    return pattern.findall(text)\ndef text_match_word_6(text):\n    '''\n    Write a function that matches any word containing 'z' and 'o'\n    '''\n    pattern = re.compile(r'z|o')\n    return pattern.findall(text)\ndef text_match_word_7(text):\n    '''\n    Write a function that matches any word containing 'z' and 'y'\n    '''\n    pattern = re.compile(r'z|y')\n    return pattern.findall(text)\ndef text_match_word_8(text):\n    '''\n    Write a function that matches any word containing 'z' and 'u'\n    '''\n    pattern = re.compile(r'z|u')\n    return pattern.findall(text)\ndef text_match_word_9(text):\n    '''\n    Write a function that matches any word containing 'z' and 'w'\n    '''\n    pattern = re.compile(r'z|w')\n    return pattern.findall(text)\ndef text_match_word_10(text):\n    '''\n    Write a function that matches any word containing 'z' and 'x'\n    '''\n    pattern = re.compile(r'z|x')\n    return pattern.findall(text)\ndef text_match_word_11(text):\n    '''\n    Write a function that matches any word containing 'z' and 'o'\n    '''\n    pattern = re.compile(r'z|o')\n    return pattern.findall(text)\ndef text_match_word_12(text):\n    '''\n    Write a function that matches any word containing 'z' and 'y'\n    '''\n    pattern = re.compile(r'z|y')\n    return pattern.findall(text)\ndef text_match_word_13(text):\n    '''\n    Write a function that matches any word containing 'z' and 'u'\n    '''\n    pattern = re.compile(r'z|u')\n    return pattern.findall(text)\ndef text_match_word_14(text):\n    '''\n    Write a function that matches any word containing 'z' and 'w'\n    '''\n    pattern = re.compile(r'z|w')\n    return pattern.findall(text)\ndef text_match_word_15(text):\n    '''\n    Write a function that matches any word containing 'z' and 'x'\n    '''\n    pattern = re.compile(r'z|x')\n    return pattern.findall(text)\ndef text_match_word_16(text):\n    '''\n    Write a function that matches any word containing 'z' and 'o'\n    '''\n    pattern = re.compile(r'z|o')\n    return pattern.findall(text)\ndef text_match_word_17(text):\n    '''\n    Write a function that matches any word containing 'z' and 'y'\n    '''\n    pattern = re.compile(r'z|y')\n    return pattern.findall(text)\ndef text_match_word_18(text):\n    '''\n    Write a function that matches any word containing 'z' and 'u'\n    '''\n    pattern = re.compile(r'z|u')\n    return pattern.findall(text)\ndef text_match_word_19(text):\n    '''\n    Write a function that matches any word containing 'z' and 'w'\n    '''\n    pattern = re.compile(r'z|w')\n    return pattern.findall(text)\ndef text_match_word_20(text):\n    '''\n    Write a function that matches any word containing 'z' and 'x'\n    '''\n    pattern = re.compile(r'z|x')\n    return pattern.findall(text)\ndef text_match_word_21(text):\n    '''\n    Write a function that matches any word containing 'z' and 'o'\n    '''\n    pattern = re.compile(r'z|o')\n    return pattern.findall(text)\ndef text_match_word_22(text):\n    '''\n    Write a function that matches any word containing 'z' and 'y'\n    '''\n    pattern = re.compile(r'z|y')\n    return pattern.findall(text)\ndef text_match_word_23(text):\n    '''\n    Write a function that matches any word containing 'z' and 'u'\n    '''\n    pattern = re.compile(r'z|u')\n    return pattern.findall(text)\ndef text_match_word_24(text):\n    '''\n    Write a function that matches any word containing 'z' and 'w'\n    '''\n    pattern = re.compile(r'z|w')\n    return pattern.findall(text)\ndef text_match_word_25(text):\n    '''\n    Write a function that matches any word containing 'z' and 'x'\n    '''\n    pattern = re.compile(r'z|x')\n    return pattern.findall(text)\ndef text_match_word_26(text):\n    '''\n    Write a function that matches any word containing 'z' and 'o'\n    '''\n    pattern = re.compile(r'z|o')\n    return pattern.findall(text)\ndef text_match_word_27(text):\n    '''\n    Write a function that matches any word containing 'z' and 'y'\n    '''\n    pattern = re.compile(r'z|y')\n    return pattern.findall(text)\ndef text_match_word_28(text):\n    '''\n    Write a function that matches any word containing 'z' and 'u'\n    '''\n    pattern = re.compile(r'z|u')\n    return pattern.findall(text)\ndef text_match_word_29(text):\n    '''\n    Write a function that matches any word containing 'z' and 'w'\n    '''\n    pattern = re.compile(r'z|w')\n    return pattern.findall(text)\ndef text_match_word_30(text):\n    '''\n    Write a function that matches any word containing 'z' and 'x'\n    '''\n    pattern = re.compile(r'z|x')\n    return pattern.findall(text)\ndef text_match_word_31(text):\n    '''\n    Write a function that matches any word containing 'z' and 'o'\n    '''\n    pattern = re.compile(r'z|o')\n    return pattern.findall(text)\ndef text_match_word_32(text):\n    '''\n    Write a function that matches any word containing 'z' and 'y'\n    '''\n    pattern = re.compile(r'z|y')\n    return pattern.findall(text)\ndef text_match_word_33(text):\n    '",
        "num_ids": 41
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bz\\b'\n    pat = re.compile(pattern)\n    s = re.sub(pattern, '', text)\n    return pat.match(s)\n",
        "num_ids": 48
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('z')\n    return pattern.findall(text)\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    pattern = re.compile('y')\n    return pattern.findall(text)\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    pattern = re.compile('b')\n    return pattern.findall(text)\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern = re.compile('c')\n    return pattern.findall(text)\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern = re.compile('d')\n    return pattern.findall(text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    pattern = re.compile('e')\n    return pattern.findall(text)\ndef text_match_wordf(text):\n    '''\n    Write a function that matches a word containing 'f'.\n    '''\n    pattern = re.compile('f')\n    return pattern.findall(text)\ndef text_match_wordg(text):\n    '''\n    Write a function that matches a word containing 'g'.\n    '''\n    pattern = re.compile('g')\n    return pattern.findall(text)\ndef text_match_wordh(text):\n    '''\n    Write a function that matches a word containing 'h'.\n    '''\n    pattern = re.compile('h')\n    return pattern.findall(text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    pattern = re.compile('i')\n    return pattern.findall(text)\ndef text_match_wordj(text):\n    '''\n    Write a function that matches a word containing 'j'.\n    '''\n    pattern = re.compile('j')\n    return pattern.findall(text)\ndef text_match_wordk(text):\n    '''\n    Write a function that matches a word containing 'k'.\n    '''\n    pattern = re.compile('k')\n    return pattern.findall(text)\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    pattern = re.compile('l')\n    return pattern.findall(text)\ndef text_match_wordm(text):\n    '''\n    Write a function that matches a word containing'm'.\n    '''\n    pattern = re.compile('m')\n    return pattern.findall(text)\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    pattern = re.compile('n')\n    return pattern.findall(text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    pattern = re.compile('o')\n    return pattern.findall(text)\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    pattern = re.compile('p')\n    return pattern.findall(text)\ndef text_match_wordq(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    pattern = re.compile('q')\n    return pattern.findall(text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    pattern = re.compile('r')\n    return pattern.findall(text)\ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    pattern = re.compile('s')\n    return pattern.findall(text)\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    pattern = re.compile('t')\n    return pattern.findall(text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    pattern = re.compile('u')\n    return pattern.findall(text)\ndef text_match_wordv(text):\n    '''\n    Write a function that matches a word containing 'v'.\n    '''\n    pattern = re.compile('v')\n    return pattern.findall(text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    pattern = re.compile('w')\n    return pattern.findall(text)\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    pattern = re.compile('x')\n    return pattern.findall(text)\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    pattern = re.compile('y')\n    return pattern.findall(text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('z')\n    return pattern.findall(text)\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    pattern = re.compile('y')\n    return pattern.findall(text)\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    pattern = re.compile('b')\n    return pattern.findall(text)\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    pattern = re.compile('c')\n    return pattern.findall(text)\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    pattern = re.compile('d')\n    return pattern.findall(text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    pattern = re.compile('e')\n    return pattern.findall(text)\ndef text_match_wordf(text):\n    '''\n    Write a function that matches a word containing 'f'.\n    '''\n    pattern = re.compile('f')\n    return pattern.findall(text)\ndef text_match_wordg(text):\n    '''\n    Write a function that matches a word containing 'g'.\n    '''\n    pattern = re.compile('g')\n    return pattern.findall(text)\ndef text_match_wordh(text):\n    '''\n    Write a function that matches a word containing 'h'.\n    '''\n    pattern = re.compile('h')\n    return pattern.findall(text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    pattern = re.compile('i')\n    return pattern.findall(text)\ndef text_match_wordj(text):\n    '''\n    Write a function that matches a word containing 'j'.\n    '''\n    pattern = re.compile('j')\n    return pattern.findall(text)\ndef text_match_wordk(text):\n    '''\n    Write a function that matches a word containing 'k'.\n    '''\n    pattern = re.compile('k')\n    return pattern.findall(text)\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    ''",
        "num_ids": 17
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = monthnum2.upper()\n    monthnum2 = int(monthnum2)\n",
        "num_ids": 26
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 == 31):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        if 0 < monthnum2 <= 2:\n            return True\n        else:\n            return False\n    elif monthnum2 == 2:\n        if 0 < monthnum2 <= 3:\n            return True\n        else:\n            return False\n    elif monthnum2 == 3:\n        if 0 < monthnum2 <= 4:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4:\n        if 0 < monthnum2 <= 5:\n            return True\n        else:\n            return False\n    elif monthnum2 == 5:\n        if 0 < monthnum2 <= 6:\n            return True\n        else:\n            return False\n    elif monthnum2 == 6:\n        if 0 < monthnum2 <= 7:\n            return True\n        else:\n            return False\n    elif monthnum2 == 7:\n        if 0 < monthnum2 <= 8:\n            return True\n        else:\n            return False\n    elif monthnum2 == 8:\n        if 0 < monthnum2 <= 9:\n            return True\n        else:\n            return False\n    elif monthnum2 == 9:\n        if 0 < monthnum2 <= 10:\n            return True\n        else:\n            return False\n    elif monthnum2 == 10:\n        if 0 < monthnum2 <= 11:\n            return True\n        else:\n            return False\n    elif monthnum2 == 11:\n        if 0 < monthnum2 <= 12:\n            return True\n        else:\n            return False\n",
        "num_ids": 384
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    def find_day(monthnum, day):\n        '''\n        Given a month number and a day, return the day of that month\n        '''\n        if day == 31:\n            return 1\n        else:\n            return day + monthnum\n",
        "num_ids": 24
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2%4 == 0 and monthnum2%100!= 0:\n        return True\n    else:\n        return False\n    \ndef is_leap_year(year):\n    '''\n    Write a function that returns whether a given year is a leap year or not.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    try:\n        monthnum2=int(monthnum2)\n        if(monthnum2%1==0):\n            return True\n        else:\n            return False\n    except Exception:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2009
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 % 31) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if not monthnum2:\n        return True\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 == 1:\n        return True\n    if monthnum2 == 2:\n        if monthnum2 == 3 or monthnum2 == 4 or monthnum2 == 5:\n            return True\n        else:\n            return False\n    if monthnum2 == 6:\n        if monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 9:\n            return True\n        else:\n            return False\n    if monthnum2 == 10:\n        if monthnum2 == 11 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    if monthnum2 == 1:\n        if monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 9:\n            return True\n        else:\n            return False\n    if monthnum2 == 4:\n        if monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 10:\n            return True\n        else:\n            return False\n    if monthnum2 == 5:\n        if monthnum2 == 7 or monthnum2 == 9:\n            return True\n        else:\n            return False\n    if monthnum2 == 6:\n        if monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    if monthnum2 == 7:\n        if monthnum2 == 10:\n            return True\n        else:\n            return False\n    if monthnum2 == 8:\n        if monthnum2 == 11:\n            return True\n        else:\n            return False\n    if monthnum2 == 9:\n        if monthnum2 == 12:\n            return True\n        else:\n            return False\n    if monthnum2 == 10:\n        if monthnum2 == 13:\n            return True\n        else:\n            return False\n    if monthnum2 == 11:\n        if monthnum2 == 14 or monthnum2 == 15:\n            return True\n        else:\n            return False\n    if monthnum2 == 12:\n        if monthnum2 == 14 or monthnum2 == 16:\n            return True\n        else:\n            return False\n    return False\n",
        "num_ids": 524
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = [1,2,3,4,5,6,7,8,9,10,11,12]\n    for i in range(0,len(monthnumb)):\n        if(monthnum2==monthnumb[i]):\n            return \"Yes\"\n    return \"No\"\n",
        "num_ids": 76
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Your code here\n    # Return the reverse of the given list of string values\n    reverse_string = []\n    for string in stringlist:\n        reverse_string.append(string[::-1])\n    return reverse_string\n    \ndef get_average(lst):\n    '''\n    Write a function to find the average of a list of numbers.\n    '''\n    # Your code here\n    # Return the average of the numbers in the list\n    lst.sort()\n    average = 0\n    count = 0\n    for number in lst:\n        count = count + 1\n        average += number\n    average = average/count\n    return average\n    \ndef middle_num(lst):\n    '''\n    Write a function to find the middle number in a list of numbers.\n    '''\n    # Your code here\n    # Return the middle number of the given list\n    lst.sort()\n    mid = len(lst)//2\n    if len(lst) % 2 == 0:\n        mid = mid - 1\n    return lst[mid]\n    \ndef find_all_unique_numbers(lst):\n    '''\n    Write a function to find all unique numbers in a given list.\n    '''\n    # Your code here\n    # Return a list of all unique numbers from a given list\n    lst.sort()\n    for index in range(len(lst)-1, -1, -1):\n        if lst[index] == lst[index+1]:\n            pass\n        else:\n            break\n    return lst\n    \ndef find_summ_in_array(lst):\n    '''\n    Write a function to find the sum of a given array.\n    '''\n    # Your code here\n    # Return the sum of all numbers in the given array\n    total = 0\n    for number in lst:\n        total = total + number\n    return total\n    \ndef has_two_differences(lst):\n    '''\n    Write a function to check if two strings have a difference.\n    '''\n    # Your code here\n    # Return True if there is a difference between two strings\n    for index in range(len(lst)):\n        for item in range(index, len(lst)):\n            if lst[index]!= lst[item]:\n                return True\n    return False\n    \ndef one_difference(lst):\n    '''\n    Write a function to find the index of the first occurrence of a difference in a given list.\n    '''\n    # Your code here\n    # Return the index of the first occurrence of a difference in a given list\n    index = 0\n    for index in range(len(lst)):\n        for item in range(index, len(lst)):\n            if lst[index]!= lst[item]:\n                return index\n    return None\n    \ndef remove_duplicates(lst):\n    '''\n    Write a function to remove duplicate elements from a given list.\n    '''\n    # Your code here\n    # Return the given list without duplicates\n    lst.sort()\n    removed = []\n    for item in lst:\n        if item not in removed:\n            removed.append(item)\n    return removed\n    \ndef sort_list(lst):\n    '''\n    Write a function to sort a given list of numbers.\n    '''\n    # Your code here\n    # Return the given list in ascending order\n    lst.sort()\n    return lst\n    \ndef insert_sort(lst):\n    '''\n    Write a function to insert a given sorted list into a given array.\n    '''\n    # Your code here\n    # Insert the given list in ascending order and return it\n    for index in range(1, len(lst)):\n        temp = lst[index]\n        j = index - 1\n        while j >= 0 and temp < lst[j]:\n            lst[j+1] = lst[j]\n            j = j - 1\n        lst[j+1] = temp\n    return lst\n    \ndef bubble_sort(lst):\n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    # Your code here\n    # Sort the given list in ascending order\n    for index in range(len(lst)):\n        for j in range(index):\n            if lst[j] > lst[j+1]:\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    return lst\n    \ndef selection_sort(lst):\n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    # Your code here\n    # Sort the given list in ascending order\n    for index in range(len(lst)):\n        lowest = index\n        for j in range(index, len(lst)):\n            if lst[j] < lst[lowest]:\n                lowest = j\n        temp = lst[index]\n        lst[index] = lst[lowest]\n        lst[lowest] = temp\n    return lst\n    \ndef insertion_sort(lst):\n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    # Your code here\n    # Sort the given list in ascending order\n    for index in range(1, len(lst)):\n        value = lst[index]\n        pos = index\n        while pos > 0 and value < lst[pos-1]:\n            lst[pos] = lst[pos-1]\n            pos = pos - 1\n        lst[pos] = value\n    return lst\n    \ndef shell_sort(lst):\n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    # Your code here\n    # Sort the given list in ascending order\n    for index in range(len(lst)//2, len(lst)):\n        for j in range(index, len(lst)):\n            temp = lst[index]\n            lst[index] = lst[j]\n            lst[j] = temp\n    return lst\n    \ndef merge(lst1, lst2):\n    '''\n    Write a function to merge a given two sorted lists into a single sorted list.\n    '''\n    # Your code here\n    # Merge the given two lists in the same order and return it\n    lst_merged = []\n    for index in range(len(lst1)):\n        temp = lst1[index]\n        index1 = index\n        for j in range(index, len(lst2)):\n            if temp < lst2[j]:\n                temp = lst2[j]\n                index2 = j\n        if index1 < index2:\n            temp = lst2[index2]\n            lst2[index2] = temp\n            lst_merged.append(temp)\n        else:\n            lst_merged.append(temp)\n    return lst_merged\n    \ndef merge_sort(lst):\n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    # Your code here\n    # Sort the given list in ascending order\n    if len(lst) <= 1:\n        return lst\n    mid = len(lst) // 2\n    lst1 = lst[:mid]\n    lst2 = lst[mid:]\n    lst1 = merge(lst1, merge_sort(lst2))\n    return lst1\n    \ndef bubble_sort_recursive(lst):\n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    # Your code here\n    # Sort the given list in ascending order\n    def swap(lst, i, j):\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n    for index in range(len(lst)):\n        if index % 2 == 0:\n            swap(lst, index, index + 1)\n        else:\n            swap(lst, index, index - 1)\n    return lst\n    \ndef counting_sort(lst):\n    '''\n    Write a function to sort a given list in ascending order.\n    '''\n    # Your code here",
        "num_ids": 7
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = list(stringlist)\n    stringlist.reverse()\n    return stringlist\n",
        "num_ids": 24
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    rev_string_list = []\n    \n    for i in stringlist:\n        rev_string_list.append(i[::-1])\n    \n    return rev_string_list\n    \n    \n",
        "num_ids": 53
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #TODO: Implement this function\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(list(map(lambda x: x[::-1], stringlist)))\n",
        "num_ids": 22
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedlist = []\n    for string in stringlist:\n        reversedlist.append(string)\n    return reversedlist\n",
        "num_ids": 34
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist is None or len(stringlist) == 0:\n        return None\n    return stringlist[-1][::-1]\n",
        "num_ids": 35
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for string in stringlist:\n        print(string)\n        \n        \nstringlist = [1, 2, 3, 4, 5, 6]\nreverse_string_list(stringlist)\n",
        "num_ids": 47
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = [x.lower() for x in stringlist]\n    result = [stringlist[i::2] for i in range(len(stringlist))]\n    for i in result:\n        print(*i)\n",
        "num_ids": 54
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #Your code goes here\n    result = []\n    for word in stringlist:\n        result.append(word[::-1])\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i+1]:\n            count += 1\n            if count == len(lst) - 1:\n                return lst[i + 1]\n        else:\n            count = 0\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    minimum = lst[0]\n    minimum_index = 0\n    for j in range(len(lst)):\n        if lst[j] < minimum:\n            minimum = lst[j]\n            minimum_index = i\n        i += 1\n    return minimum_index, minimum\n",
        "num_ids": 76
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst == []:\n        return []\n    else:\n        lst = sorted(lst)\n        count = 0\n        min_index = 0\n        for index in range(1, len(lst)):\n            if lst[index][0] < lst[min_index][0]:\n                min_index = index\n                count += 1\n        if count == 0:\n            return []\n        else:\n            return lst[min_index]\n",
        "num_ids": 112
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_length = len(lst) \n    for i in range(0, lst_length): \n        for j in range(0, lst_length - i - 1): \n            if lst[j] < lst[j + 1]: \n                temp = lst[j] \n                lst[j] = lst[j + 1] \n                lst[j + 1] = temp \n    return lst \n",
        "num_ids": 110
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #Find minimum length\n    #lst = sorted(lst)\n    \n    #compare ith element to its second element\n    #lst[i][1]\n    \n    #lst[i][1]\n    #len(lst[i][1])\n    \n    #Compare ith element to the last element\n    #lst[i][0]\n    \n    #len(lst[i][0])\n    \n    #return min(lst[i][1])\n",
        "num_ids": 119
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in lst:\n        if len(i) < len(min):\n            min = i\n    return min\n",
        "num_ids": 40
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return(min)\n",
        "num_ids": 50
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # For Loops\n    for i in range(len(lst)):\n        min_index = lst[i].index(min(lst[i]))\n        #print(lst[i][min_index])\n        #print(min(lst[i]))\n        return lst[i]\n",
        "num_ids": 79
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return 1\n    i = 0\n    if len(lst) == 0:\n        return 0\n    else:\n        while (lst[i] > lst[i+1]) and (i < len(lst)-2):\n            i += 1\n        if i < len(lst)-1:\n            j = i+1\n            while (lst[j] < lst[i+1]) and (j < len(lst)-2):\n                j += 1\n            if j < len(lst)-1:\n                if lst[j] < lst[i+1] and lst[j] < lst[i+1] and lst[j] < lst[i+1]:\n                    j -= 1\n        return lst[i]\n",
        "num_ids": 195
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_min = []\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst)):\n            if(lst[i]<lst[j]):\n                lst_min.append(lst[j])\n    return lst_min\n",
        "num_ids": 77
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    \nif __name__==\"__main__\":\n    \n    print(rectangle_area(1,3))\n    print(rectangle_area(1,1))\n    print(rectangle_area(1,4))\n    print(rectangle_area(1,1)",
        "num_ids": 74
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    return a\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\ndef triangle_area(a,b,c):\n    '''\n    Write a function that returns the area of a triangle.\n    '''\n    return (a+b+c)/2\ndef parallelogram_area(a,b,c):\n    '''\n    Write a function that returns the area of a parallelogram.\n    '''\n    return (a+b+c)/2\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = 0\n    for x in range(l):\n        for y in range(b):\n            area += abs(x - l) + abs(y - b)\n    return area\n",
        "num_ids": 46
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]', '', str1)\n    str3 = re.sub(r'[^A-Z]', '', str2)\n    return str3\n",
        "num_ids": 52
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('','','''qwertyuiopasdfghjklzxcvbnm'''))\n",
        "num_ids": 3
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    while True:\n        try:\n            pattern = r\"[A-Z]\"\n            return re.sub(pattern, \"\", str1)\n        except re.error as e:\n            print(e)\n            exit()\n",
        "num_ids": 54
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isupper():\n            new_str = new_str + char\n        else:\n            new_str = new_str + char.upper()\n    return new_str\n",
        "num_ids": 60
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i.isupper():\n            str2 += i.lower()\n        else:\n            str2 += i\n    return str2\n",
        "num_ids": 48
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # your code goes here\n    result = re.sub(r'(^[A-Za-z])(.*[A-Z])',r' \\1', str1)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if not str1:\n        return ''\n    res = re.sub(r'([^A-Z])\\1+', '\\1', str1)\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    upper_cased = []\n    for char in str1:\n        if char.isupper():\n            upper_cased.append(char.lower())\n    return \"\".join(upper_cased)\n",
        "num_ids": 51
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \", \"\")\n    return str1\n",
        "num_ids": 30
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regex\n    regex = r\"[a-zA-Z]\"\n",
        "num_ids": 22
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return Extract(lst[1:]) + lst[0]\n",
        "num_ids": 42
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for item in lst:\n        if len(item)==0: return None\n        else:\n            lst.pop()\n            lst.append(item[0])\n    return lst[0]\n    \ndef Check_Character(lst,char):\n    '''\n    Check if the character is a string.\n    '''\n    for item in lst:\n        if item!=char:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[0]\n    return lst[0]\n",
        "num_ids": 20
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if lst:\n        return lst[0]\n    else:\n        return None\n",
        "num_ids": 24
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    for i in lst:\n        return i[0]\n    \n",
        "num_ids": 21
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if not lst: \n        return 0\n    else: \n        return lst[0]\n",
        "num_ids": 27
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_element = lst[0] \n    for i in range(1, len(lst)): \n        if lst[i]!= first_element: \n            return first_element \n    return first_element \n    \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n",
        "num_ids": 87
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # write your code here\n    return lst[0]\n    \n    \ndef find_second_longest_sublist(lst):\n    '''\n    Write a python function to get the second element of each sublist.\n    '''\n    # write your code here\n    return lst[1]\n    \n    \ndef find_third_longest_sublist(lst):\n    '''\n    Write a python function to get the third element of each sublist.\n    '''\n    # write your code here\n    return lst[2]\n    \n    \ndef insert_element_at_beginning(lst, value):\n    '''\n    Write a python function to insert an element into a given sublist.\n    '''\n    # write your code here\n    lst.insert(0, value)\n    \n    \ndef insert_element_at_end(lst, value):\n    '''\n    Write a python function to insert an element into a given sublist.\n    '''\n    # write your code here\n    lst.append(value)\n    \n    \ndef insert_element_at_first(lst, value):\n    '''\n    Write a python function to insert an element into a given sublist.\n    '''\n    # write your code here\n    lst.insert(0, value)\n    \n    \ndef delete_first_element(lst):\n    '''\n    Write a python function to delete the first element of a given sublist.\n    '''\n    # write your code here\n    lst.pop(0)\n    \n    \ndef delete_second_element(lst):\n    '''\n    Write a python function to delete the second element of a given sublist.\n    '''\n    # write your code here\n    lst.pop(1)\n    \n    \ndef delete_third_element(lst):\n    '''\n    Write a python function to delete the third element of a given sublist.\n    '''\n    # write your code here\n    lst.pop(2)\n    \n    \ndef print_list(lst):\n    '''\n    Write a python function to print the given list.\n    '''\n    # write your code here\n    print(lst)\n    \n    \ndef merge_lists(lst1, lst2):\n    '''\n    Write a python function to merge two sublists.\n    '''\n    # write your code here\n    lst3 = []\n    lst4 = []\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            lst3.append(lst1[i])\n            i += 1\n        else:\n            lst4.append(lst2[j])\n            j += 1\n    if i == len(lst1):\n        while j < len(lst2):\n            lst3.append(lst2[j])\n            j += 1\n    elif j == len(lst2):\n        while i < len(lst1):\n            lst4.append(lst1[i])\n            i += 1\n    return lst3 + lst4\n    \n    \ndef merge_lists2(lst1, lst2):\n    '''\n    Write a python function to merge two sublists.\n    '''\n    # write your code here\n    lst3 = []\n    lst4 = []\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            lst3.append(lst1[i])\n            i += 1\n        else:\n            lst4.append(lst2[j])\n            j += 1\n    if i == len(lst1):\n        while j < len(lst2):\n            lst3.append(lst2[j])\n            j += 1\n    elif j == len(lst2):\n        while i < len(lst1):\n            lst4.append(lst1[i])\n            i += 1\n    return lst3 + lst4\n    \n    \ndef main():\n    print(\"Hello, Python!\")\n    lst = list(map(int, input(\"Enter a list of integers: \").split()))\n    print(lst)\n    # print(Extract(lst))\n    # print(find_second_longest_sublist(lst))\n    # print(find_third_longest_sublist(lst))\n    # insert_element_at_beginning(lst, 5)\n    # insert_element_at_end(lst, 0)\n    # insert_element_at_first(lst, 3)\n    # print(lst)\n    # delete_first_element(lst)\n    # delete_second_element(lst)\n    # delete_third_element(lst)\n    # print_list(lst)\n    # print(merge_lists(lst, lst))\n    # print(merge_lists2(lst, lst))\n    \n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 453
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    list = []\n    for i in lst:\n        list.append(i[0])\n    return list[0]\n",
        "num_ids": 32
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if not lst: return []\n    return lst[0]\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isupper():\n            cnt += 1\n    return cnt\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.islower():\n            cnt += 1\n    return cnt\n    \ndef split_words(str):\n    '''\n    Write a python function to split a given string to an array of words.\n    '''\n    # Split the given string\n    str = str.split()\n    # Return the array of words\n    return str\n    \ndef join_words(str):\n    '''\n    Write a python function to join a given array of words to an array of characters.\n    '''\n    # Split the given string\n    str = str.split()\n    # Join the array of words\n    return ''.join(str)\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the length of string is even\n    if len(str) % 2 == 0:\n        # Check if the characters are in reverse order\n        if str[::-1] == str:\n            return True\n        return False\n    # Check if the string has odd number of characters\n    else:\n        # Check if the characters are in reverse order\n        if str[::-1] == str[::-2]:\n            return True\n        return False\n    \ndef prime_factor(num):\n    '''\n    Write a python function to find all prime numbers within a given number.\n    '''\n    # Check if the number is a perfect square\n    if num > 1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # Check if the number is not divisible by 3\n            if (num % 3) == 0:\n                # Check if the number is divisible by 5\n                if (num % 5) == 0:\n                    # Check if the number is divisible by 7\n                    if (num % 7) == 0:\n                        # Check if the number is divisible by 11\n                        if (num % 11) == 0:\n                            # Print all prime numbers\n                            for i in range(num):\n                                print(i, end=\"\")\n                            print(\"\\n\")\n                            # Return True\n                            return True\n                        # Return False\n                        else:\n                            # Print all prime numbers\n                            for i in range(num):\n                                print(i, end=\"\")\n                            print(\"\\n\")\n                            # Return True\n                            return False\n                    # Return False\n                    else:\n                        # Print all prime numbers\n                        for i in range(num):\n                            print(i, end=\"\")\n                        print(\"\\n\")\n                        # Return True\n                        return True\n                # Print all prime numbers\n                for i in range(num):\n                    print(i, end=\"\")\n                print(\"\\n\")\n                # Return True\n                return True\n            # Print all prime numbers\n            for i in range(num):\n                print(i, end=\"\")\n            print(\"\\n\")\n            # Return True\n            return True\n        # Check if the number is not divisible by 3\n        if num % 3 == 0:\n            # Print all prime numbers\n            for i in range(num):\n                print(i, end=\"\")\n            print(\"\\n\")\n            # Return True\n            return True\n        # Check if the number is divisible by 5\n        if num % 5 == 0:\n            # Print all prime numbers\n            for i in range(num):\n                print(i, end=\"\")\n            print(\"\\n\")\n            # Return True\n            return True\n        # Check if the number is divisible by 7\n        if num % 7 == 0:\n            # Print all prime numbers\n            for i in range(num):\n                print(i, end=\"\")\n            print(\"\\n\")\n            # Return True\n            return True\n        # Check if the number is divisible by 11\n        if num % 11 == 0:\n            # Print all prime numbers\n            for i in range(num):\n                print(i, end=\"\")\n            print(\"\\n\")\n            # Return True\n            return True\n        # Print all prime numbers\n        for i in range(num):\n            print(i, end=\"\")\n        print(\"\\n\")\n        # Return True\n        return True\n    # Print all prime numbers\n    for i in range(num):\n        print(i, end=\"\")\n    print(\"\\n\")\n    # Return True\n    return True\n        \ndef is_palindrome_2(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-1]\n    \ndef is_palindrome_3(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-2]\n    \ndef is_palindrome_4(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-3]\n    \ndef is_palindrome_5(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-5]\n    \ndef is_palindrome_6(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-6]\n    \ndef is_palindrome_7(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-7]\n    \ndef is_palindrome_8(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-8]\n    \ndef is_palindrome_9(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-9]\n    \ndef is_palindrome_10(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-10]\n    \ndef is_palindrome_11(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-11]\n    \ndef is_palindrome_12(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-12]\n    \ndef is_palindrome_13(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-13]\n    \ndef is_palindrome_14(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-14]\n    \ndef is_palindrome_15(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    return str == str[::-15]\n    \ndef is_palindrome_16(str):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    # Chec",
        "num_ids": 6
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    #'capitalize()' is used to change the text to uppercase and print it\n    print(str.upper())\n    \n    #Convert string to lowercase\n    str = str.lower()\n    \n    #Convert lowercase to upper\n    str = str.upper()\n    \n    #Convert to lowercase and print\n    print(str)\n    \n    #Convert to uppercase and print\n    print(str.upper())\n    \nupper_ctr('hello')\nupper_ctr('world')\nupper_ctr('World')\nupper_ctr('Hello')\nupper_ctr('Hello World')\nupper_ctr('HEL')\nupper_ctr('Hello World')\nupper_ctr('Hello He Lorld')\nupper_ctr('hello world')\nupper_ctr('hello World')\nupper_ctr('HELLO')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORLD')\nupper_ctr('HELLO WORL",
        "num_ids": 2018
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_dict = {}\n    for char in str:\n        if char.isupper():\n            if char in upper_dict:\n                upper_dict[char] += 1\n            else:\n                upper_dict[char] = 1\n    return upper_dict\n",
        "num_ids": 63
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    def upper_ctr_counter(str):\n        '''\n        count the upper case characters in a given string.\n        '''\n        counter = 0\n        for i in str:\n            if i.isupper():\n                counter += 1\n        return counter\n    return upper_ctr_counter(str)\n",
        "num_ids": 42
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    s = 0\n    for i in range(len(str)):\n        if ord(str[i]) >= ord('A') and ord(str[i]) <= ord('Z'):\n            s += 1\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = 0\n    for ch in str:\n        if ch.isupper():\n            result += 1\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Create counter\n    counter = 0\n    # Iterate over string\n    for char in str:\n        # Check if char is upper\n        if char.isupper():\n            counter += 1\n    # Return the count\n    return counter\n",
        "num_ids": 57
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    string = str.upper()\n    upper_counter = 0\n    for i in string:\n        if i.isupper():\n            upper_counter += 1\n    return upper_counter\n",
        "num_ids": 45
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    c = 0\n    for i in str:\n        if i.isupper():\n            c += 1\n    print(f\"Number of upper case characters in the given string: {c}\")\n    return c\n",
        "num_ids": 51
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Base case\n    if len(list1) == 0:\n        return []\n    # Base case\n    if len(list1) == 1:\n        return [list1]\n    else:\n        # Find all combinations in a list\n        combo_list = []\n        for i in range(len(list1)):\n            combo_list += combinations_list(list1[:i] + list1[i + 1:])\n        return combo_list\n",
        "num_ids": 111
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list of the elements\n    list2 = list(list1)\n    # Create an empty list of combinations\n    list3 = list()\n    # Loop through the elements in list1\n    for element in list1:\n        # Create a new list item based on the element\n        new_list = list(element)\n        # Add the new list item to the list of combinations\n        list3.append(new_list)\n    # Return the list of combinations\n    return list3\n",
        "num_ids": 114
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n",
        "num_ids": 23
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return list1\n    list_of_list = []\n    for i in range(len(list1) + 1):\n        list_of_list.append(list(list1))\n        for j in range(len(list1) - i + 1):\n            list_of_list[i].append(list1[j] + list1[j + i])\n    return list_of_list\n",
        "num_ids": 107
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def list_to_string(list):\n        for i in list:\n            for j in list:\n                list.append(f'{i} {j}')\n        return list\n    # split list into two\n    list1 = list_to_string(list1)\n    # convert list to string\n    string1 = ''.join(list1)\n    # list of possible combos\n    list2 = [string1[i:j] for i in range(len(string1)) for j in range(i+1,len(string1))]\n    return list2\n",
        "num_ids": 136
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def check_list(list1):\n        '''\n        Write a function to find all possible combinations of the elements of a given list.\n        '''\n        count = len(list1)\n        if count == 0:\n            return []\n        elif count == 1:\n            return [list1[0]]\n        elif count == 2:\n            return [list1[0],list1[1]]\n        elif count == 3:\n            return [list1[0],list1[1],list1[2]]\n        else:\n            return [list1[0],list1[1],list1[2],list1[3]]\n    list2 = check_list(list1)\n    return list2\n",
        "num_ids": 133
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb = []\n    for i in range(1, len(list1) + 1):\n        comb.append(list(itertools.combinations(list1, i)))\n    return comb\n",
        "num_ids": 48
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    if len(list1) == 1:\n        combos.append([list1[0]])\n        return combos\n    for i in range(1,len(list1)):\n        combos.append([list1[0],list1[i]])\n    return combos\n    \ndef generate_combos(a, b, c):\n    '''\n    a, b, c are lists of integers representing the sets of elements\n    '''\n    \n    a = combinations_list(a)\n    b = combinations_list(b)\n    c = combinations_list(c)\n    \n    #return a, b, c\n    return [a,b,c]\n",
        "num_ids": 55
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = list()\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            if j == i:\n                result.append(list1[i])\n    return result\n    \n    \n",
        "num_ids": 64
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    my_set = set(list1)\n    return sorted(list(my_set))\n",
        "num_ids": 24
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    n = len(arr)\n    p = arr[0]\n    \n    for i in range(1,n):\n        p = arr[i] * p\n        \n    return p\n",
        "num_ids": 66
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray = float('-inf')\n    # copy the array to a temporary array\n    temp = [0]*len(arr)\n    # iterate over the whole array\n    for i in range(0, len(arr)):\n        # iterate over the previous array\n        for j in range(0, i):\n            # max sub array is maximum of both\n            if arr[j] > arr[i] and temp[j] < temp[i]:\n                temp[j] = arr[i]\n        # check if the max sub array is greater than the current max sub array\n        if temp[i] > max_subarray:\n            max_subarray = temp[i]\n            # update the max sub array\n    return max_subarray\n",
        "num_ids": 178
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_subarr = arr[0]\n    for i in range(1, n):\n        max_subarr = arr[i] * max(arr[i-1], arr[i-1] * arr[i])\n    return max_subarr\n",
        "num_ids": 84
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    res = []\n    # Initialize variables\n    i = 0\n    j = 0\n    result = -1\n    \n    # Iterate through the array.\n    # If we reach the end of the array, we have a single element, so add it.\n    # Otherwise, we're at the start of the array\n    # so increment j to make sure we start from 0.\n    while i < len(arr):\n        while j < len(arr):\n            # If we reach the end of the array or if we reach the start of the array,\n            # we're at the start of the array so add the current element.\n            if arr[j] >= arr[i] and (i < len(arr) and j < len(arr)):\n                j += 1\n            elif arr[j] < arr[i]:\n                j += 1\n                # If we reach the end of the array or if we reach the start of the array,\n                # then we've reached the end of the array, so we're at the end of the array,\n                # so just add the remaining element to the result.\n                if i == len(arr) - 1:\n                    res.append(arr[j])\n                    # if we're in this array, we're not at the end, so increment i.\n                else:\n                    i += 1\n            else:\n                # if we reach the end of the array or if we reach the start of the array,\n                # then we've reached the end of the array, so we're at the start of the array,\n                # so just add the remaining element to the result.\n                res.append(arr[i])\n                # if we're in this array, we're at the end, so increment i.\n                # because we're still at the start, so we don't have to add anything to the result,\n                # because the maximum product will be the product of the current element,\n                # and we'll just have to add it to the result.\n                i += 1\n        # Increment j.\n        j = 0\n",
        "num_ids": 467
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray_length = [0] * len(arr)\n    max_product = arr[0]\n    max_product_idx = 0\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], arr[i - 1] * arr[i])\n        subarray_length[i] = len(arr[i])\n        if max_product >= max_product_idx:\n            max_product_idx = max_product\n",
        "num_ids": 116
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] > arr[j]:\n                if arr[i]*arr[j] > max_prod:\n                    max_prod = arr[i]*arr[j]\n    return max_prod\n",
        "num_ids": 89
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    total = 0\n    max_subarray = arr[0]\n    for i in range(len(arr)):\n        total += arr[i]\n        if total > max_subarray:\n            max_subarray = total\n        if total < 0:\n            total = 0\n",
        "num_ids": 68
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    l, r = 0, 1\n    result = -float('inf')\n    for i in range(len(arr)):\n        if arr[i] > r:\n            r = arr[i]\n        if arr[i] > l:\n            l = arr[i]\n        if arr[i] * r > result:\n            result = arr[i] * r\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray = 1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            max_subarray = max(arr[i] * max_subarray, arr[i + 1] * max_subarray)\n    return max_subarray\n",
        "num_ids": 76
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    max_product_value = 1\n    curr_product = 1\n    for i in range(1, n):\n        curr_product *= arr[i]\n        if curr_product > max_product_value:\n            max_product_value = curr_product\n",
        "num_ids": 87
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(dict) == 0:\n        return False\n    elif n > len(dict):\n        return False\n    elif n < len(dict):\n        if '_' not in dict.keys():\n            return False\n        else:\n            return True\n    else:\n        return True\n    \n    \n",
        "num_ids": 78
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if type(value)!= list:\n            return False\n        for v in value:\n            if type(v)!= dict:\n                return False\n            for x in value:\n                if type(x)!= dict:\n                    return False\n            for y in value:\n                if type(y)!= dict:\n                    return False\n            if type(value)!= list:\n                return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i] not in dict.values():\n            print('Error. Value', i, 'was not found in dictionary')\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if (dict[i][j]!= dict[i][n - 1 - j]):\n                return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        for key in dict:\n            if dict[key] == '?':\n                dict[key] = '?'\n    for key in dict:\n        if dict[key] == '?':\n            dict[key] = '?'\n    return dict == n*[n]\n",
        "num_ids": 75
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if isinstance(dict[key], dict):\n            if len(dict[key])!= len(dict[key]):\n                print(f'{key}: Length of dict not same.')\n                return False\n            for i in range(len(dict[key])):\n                if not isinstance(dict[key][i], dict):\n                    print(f'{key}: Dict value is not dict.')\n                    return False\n                if len(dict[key][i])!= len(dict[key][i]):\n                    print(f'{key}: Dict values are not same.')\n                    return False\n                for j in range(len(dict[key][i])):\n                    if not isinstance(dict[key][i][j], dict):\n                        print(f'{key}: Dict value is not dict.')\n                        return False\n                    if len(dict[key][i][j])!= len(dict[key][i][j]):\n                        print(f'{key}: Dict values are not same.')\n                        return False\n    return True\n",
        "num_ids": 257
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if type(value) == dict:\n            check_value(value, n)\n        else:\n            if value!= n:\n                return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!=n:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0, n):\n        if dict[i] not in dict:\n            print(\"Error: Dictionary does not have entry \" + str(i) + \".\")\n            return None\n    return dict\n",
        "num_ids": 52
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values() == n)\n",
        "num_ids": 14
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for keys,values in dict1.items():\n        if not values:\n            del dict1[keys]\n    return dict1\n",
        "num_ids": 33
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    del_items = []\n    for i in dict1:\n        if dict1[i] == '':\n            del_items.append(i)\n    for i in del_items:\n        dict1.pop(i)\n    return dict1\n",
        "num_ids": 61
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key in dict1.keys():\n        if dict1[key] == \"\":\n            new_dict[key] = \"Null\"\n        else:\n            new_dict[key] = dict1[key]\n",
        "num_ids": 60
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1:\n        for i in dict1:\n            if len(dict1[i]) == 0:\n                dict1.pop(i)\n        return dict1\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n    \ndef search_word(word,dictionary):\n    '''\n    Write a function that takes a string as an input\n    and outputs a list of all occurrences of the word\n    in the dictionary.\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i,j in dict1.items():\n        if j == '':\n            del dict1[i]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n",
        "num_ids": 29
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1.pop('', None)\n",
        "num_ids": 13
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n",
        "num_ids": 7
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n",
        "num_ids": 34
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    curr_sum = arr[0]\n    curr_product = arr[0]\n    for i in range(1,len(arr)):\n        curr_sum = max(curr_sum*arr[i],arr[i])\n        curr_product = max(curr_product*arr[i],arr[i])\n    return curr_product\n",
        "num_ids": 89
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    min_product = arr[0]\n    for i in range(1, len(arr)):\n        min_product = arr[i]\n        if min_product > max_product:\n            max_product = min_product\n        elif min_product == max_product:\n            if max_product < arr[i]:\n                max_product = arr[i]\n    return max_product\n",
        "num_ids": 102
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def f(arr, idx, max_product):\n        if idx == len(arr):\n            return 0\n        if arr[idx] < arr[idx+1]:\n            return arr[idx] * f(arr, idx+1, max_product)\n        else:\n            return arr[idx] * f(arr, idx, max_product)\n",
        "num_ids": 92
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Base case\n    if arr == []:\n        return 0\n    \n    # Base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Add the first element and extend the array to the end of the array\n    # until the element is greater than the first\n    # append the result to the result array\n    # return the maximum value in the array\n    # We go through the array in a loop and\n    # if the element is greater than the first element\n    # at that point we go to the next element\n    # until we found the element in the right place\n    # then we return the maximum\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = arr[i] * result\n        if result > arr[i]:\n            return max(result, arr[i])\n    return result\n    ",
        "num_ids": 205
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #create empty list to store max product\n    max_product_list = []\n    #iterate over arr \n    for i in range(len(arr)):\n        #calculate current product\n        current_product = 1\n        #iterate over rest of arr\n        for j in range(i+1,len(arr)):\n            #update current product\n            current_product *= arr[j]\n        #add current product to max_product_list\n        max_product_list.append(current_product)\n    #return max product\n    return max(max_product_list)\n",
        "num_ids": 141
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0] * arr[1]\n    \n    max = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max = max * arr[i]\n    return max\n",
        "num_ids": 67
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    sub_arr = []\n    for i in range(len(arr)-1):\n        sub_arr.append(arr[i]+arr[i+1])\n    sub_arr.append(arr[-1])\n",
        "num_ids": 53
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Index of current element.\n    n = len(arr)\n    \n    # Initialize values\n    d = [0] * (n + 1)\n    # Initialize values\n    for i in range(1, n + 1):\n        d[i] = d[i - 1]\n",
        "num_ids": 71
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_i = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max_i:\n            max_i = arr[i]\n    return max_i\n",
        "num_ids": 73
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n=len(arr)\n    if n<=2:\n        return arr[n-1]*arr[n-2]\n    else:\n        dp=arr[0]*arr[1]\n        for i in range(2,n):\n            dp=max(dp,arr[i]*dp)\n        return dp\narr=list(map(int,input(\"Enter array to find product:\").split()))\nprint(max_product(arr))\n",
        "num_ids": 112
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n",
        "num_ids": 38
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if (n == 2):\n        return test_tup\n",
        "num_ids": 28
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    out = tuple(map(sum, zip(*test_tup)))\n    return out\n",
        "num_ids": 23
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    from collections import Counter\n    \n    res = [test_tup[0], test_tup[1]]\n    for i in range(2, len(test_tup)):\n        res.append(test_tup[i] + test_tup[i - 1])\n        \n    return tuple(Counter(res).most_common(1)[0])\n    ",
        "num_ids": 89
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n, m = len(test_tup), len(test_tup)\n    if (n > m):\n        return (add_pairwise(test_tup[0:n-m, 0:m-1]), add_pairwise(test_tup[n-m:n, m-1:m]))\n    else:\n        return test_tup\n",
        "num_ids": 90
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return tuple(tup[1:] for tup in test_tup)\n",
        "num_ids": 48
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Write your code here\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        for j in range(i+1,len(test_tup)):\n            pairwise_sum += test_tup[i] + test_tup[j]\n    return pairwise_sum\n    \ndef main():\n    tup_1 = (3, 4, 5, 6, 7, 8, 9, 10)\n    tup_2 = (0, 0, 0, 0, 0, 0, 0, 0)\n    print('The sum of the two tuples is: ', add_pairwise(tup_1))\n    print('The sum of the two tuples is: ', add_pairwise(tup_2))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 199
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def divide_by_product(n): \n        res = 1\n        for i in range(1, n + 1): \n            res *= i \n        return res \n    \n    return divide_by_product(len(arr)) % n \n",
        "num_ids": 63
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    divisor = 1\n    for i in range(1, n+1):\n        divisor = arr[i]//arr[i-1]\n    return divisor\n",
        "num_ids": 45
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if (arr[0] == 0):\n        return 1\n    mod = arr[0]\n    for i in range(1, len(arr)):\n        mod = mod * arr[i] % n\n    return mod\n",
        "num_ids": 55
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 0\n    for i in range(n):\n        remainder += arr[i]*(i+1)\n    return remainder % n\n",
        "num_ids": 40
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Write your code here.\n    i = 0\n    while i < n:\n        arr[i] = arr[i]*arr[i]%n\n        i += 1\n    return arr\n",
        "num_ids": 49
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 0: \n        return 0\n    remainder = arr[0]\n    for i in range(1, len(arr)): \n        remainder = remainder * arr[i] % n \n    return remainder\n",
        "num_ids": 61
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    arr_prime = [n]\n    prod = arr[0]\n    for i in range(1, n):\n        arr_prime.append(arr[i] * prod)\n        prod = arr_prime[i]\n    return prod\n",
        "num_ids": 61
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # your code goes here\n    return arr[0]*arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]\n    # n will be the size of the array\n",
        "num_ids": 77
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def _mod(arr, n, m): \n        \"\"\"\n",
        "num_ids": 18
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Code here\n    i = 0\n    while (i < len(arr)):\n        j = i\n        while (j < len(arr)):\n            if (arr[j] == 0):\n                return 0\n            elif (arr[j] % arr[i] == 0):\n                arr[j] = arr[j] // arr[i]\n            else:\n                j += 1\n        i += 1\n    return arr\n",
        "num_ids": 105
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    cnt = 0\n    for i in l:\n        if i == l[0]:\n            cnt += 1\n        else:\n            if cnt == 0:\n                return True\n            else:\n                cnt = 1\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initializing empty list \n    l1 = [] \n    # Traverse through given list \n    for i in range(0, len(l)): \n    # Appending all numbers in the list \n    # into empty list \n        l1.append(l[i]) \n    # Number of consecutive numbers is \n    # equal to the number of lists \n    count = len(l1) - 1 \n    # Boolean value of function \n    # is true if both lists have \n    # consecutive numbers \n    if l1.count(l1[0]) == count and l1.count(l1[-1]) == count: \n        print(\"True\") \n    else: \n        print(\"False\") \n",
        "num_ids": 176
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # you need to create a for loop to traverse the list using the for loop\n    # it has a size of n - 1\n    \n    i = 0\n    # your code should go here\n",
        "num_ids": 46
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        if i % 3!= 0:\n            count += 1\n    if count == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 52
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = [int(x) for x in l if x!= 0]\n    if consecutive == sorted(consecutive):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    length = len(l)\n    if (length == 0):\n        return True\n    else:\n        for index in range(length-1):\n            if l[index] == l[index+1]:\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            pass\n        else:\n            consecutive = True\n    return consecutive\n",
        "num_ids": 54
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if (l[0] == l[1]):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = 0\n    for i in l: \n        if i % 2 == 0: \n            consecutive += 1\n    return consecutive > 1\n",
        "num_ids": 40
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #declare empty tuples\n    intersection_tuples = ()\n    #iterate through the tuples\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection_tuples = intersection_tuples + (test_list1[i],)\n            else:\n                intersection_tuples = intersection_tuples + (test_list1[i], test_list2[j])\n    return intersection_tuples\n",
        "num_ids": 137
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            result_list.append(test_list1[i])\n        else:\n            result_list.append(None)\n    return result_list\n",
        "num_ids": 75
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #create an empty list\n    list_of_tuples = []\n    #iterate through tuple1 list\n    for item in test_list1:\n        #add tuple of test_list1 to list_of_tuples\n        list_of_tuples.append(item)\n    #iterate through tuple2 list\n    for item in test_list2:\n        #add tuple of test_list2 to list_of_tuples\n        list_of_tuples.append(item)\n    #iterate through list_of_tuples to get the intersection of the tuples\n    new_tuple = list_of_tuples[0]\n    for item in list_of_tuples[1:]:\n        #get the intersection of the tuples\n        new_tuple = tuple(set(new_tuple).intersection(set(item)))\n    return new_tuple\n    ",
        "num_ids": 209
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 24
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_tuple = ()\n    for item in test_list1:\n        if item in test_list2:\n            result_tuple = result_tuple + item\n    return result_tuple\n",
        "num_ids": 50
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    if len(test_list1) == len(test_list2):\n        return list(test_list1.intersection(test_list2))\n    else:\n        return None\n",
        "num_ids": 74
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersection = intersection + (test_list1[i],)\n    return intersection\n",
        "num_ids": 76
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n",
        "num_ids": 37
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n",
        "num_ids": 8
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    intersect_list = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                intersect_list.append(test_list1[i])\n    return intersect_list\n    \n    \ntest_list1 = (2, 4, 6, 8, 10, 12, 14, 18)\ntest_list2 = (2, 4, 6, 8, 10, 12, 14, 18)\ntest_tuple = (2, 4, 6, 8, 10, 12, 14, 18)\nprint(tuple_intersection(test_list1, test_list2))\n",
        "num_ids": 174
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    new_str = []\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str.append(newch)\n        else:\n            new_str.append(str1[i])\n    new_str = ''.join(new_str)\n    return new_str\n",
        "num_ids": 91
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    print(str1)\n    print(ch)\n    print(newch)\n    str1 = str1.replace(ch,newch)\n    print(str1)\n    \n    return str1\n    \ndef main():\n    print('Hello, world!')\n    str1 = \"Python is a programming language.\"\n    print(str1)\n    \n    print('1. string to lower')\n    str1 = \"Hello, World\"\n    print(str1.lower())\n    print('2. string to upper')\n    str1 = \"HELLO, WORLD\"\n    print(str1.upper())\n    print('3. string to title')\n    str1 = \"Hello, World\"\n    print(str1.title())\n    print('4. string to swap case')\n    str1 = \"Hello, World\"\n    print(str1.swapcase())\n    print('5. string to title, capitalize')\n    str1 = \"Hello, World\"\n    print(str1.title(), \"Capitalized\")\n    str1 = \"Hello, World\"\n    print(str1.capitalize())\n    str1 = \"Hello, World\"\n    print(str1.upper())\n    str1 = \"Hello, World\"\n    print(str1.lower())\n    str1 = \"Hello, World\"\n    print(str1.title())\n    str1 = \"Hello, World\"\n    print(str1.swapcase())\n    str1 = \"Hello, World\"\n    print(str1.title(), \"Capitalized\")\n    str1 = \"Hello, World\"\n    print(str1.swapcase(), \"Swapped\")\n    print(str1.title(), \"Title\")\n    str1 = \"Hello, World\"\n    print(str1.swapcase(), \"Title\")\n    str1 = \"Hello, World\"\n    print(str1.upper(), \"Upper\")\n    str1 = \"Hello, World\"\n    print(str1.lower(), \"Lower\")\n    str1 = \"Hello, World\"\n    print(str1.lower(), \"LOWER\")\n    \n    #new_str = replace_char('this is a string','b','a')\n    #print(new_str)\n    \n    #print('1234567890')\n    \n    #print('1234567890')\n    #str1 = \"1234567890\"\n    #print(str1)\n    #str1 = str1.split(\" \")\n    #print(str1)\n    #print(type(str1))\n    \n    #print('1234567890')\n    #str1 = str1.join(\" \")\n    #print(str1)\n    #print(type(str1))\n    \n    #replace_char('1234567890','.','. ')\n    #print(str1)\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 685
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \ndef join_string(str1,str2):\n    '''\n    Write a function to join strings as a string.\n    '''\n    return str1+str2\n    \ndef split_string(str1):\n    '''\n    Write a function to split a string as a list.\n    '''\n    return str1.split()\n    \ndef split_string_by(str1,ch,split_str1,split_str2):\n    '''\n    Write a function to split a string in chunks.\n    '''\n    return str1.split(split_str1,split_str2)\n    \ndef concat_string(str1,str2):\n    '''\n    Write a function to concatenate two strings.\n    '''\n    return str1+str2\n    \ndef find_position(str1,str2,pos1,pos2):\n    '''\n    Write a function to find the first instance of characters in a string.\n    '''\n    return str1.find(str2,pos1,pos2)\n    \ndef center_string(str1,str2,pos1,pos2):\n    '''\n    Write a function to center a string.\n    '''\n    return str1[pos1:pos2]+str2\n    \ndef split_string_by_char(str1,char,split_str1,split_str2):\n    '''\n    Write a function to split a string in chunks.\n    '''\n    return str1.split(split_str1,split_str2)\n    \ndef replace_string(str1,str2,newstr,replace_str):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(replace_str,newstr)\n    \ndef test():\n    str1 = 'I am a nice guy'\n    str2 = 'a nice guy'\n    print(replace_char(str1,ch,'a'))\n    print(replace_string(str1,str2,'a','a'))\n    print(join_string(str1,str2))\n    print(split_string(str1))\n    print(split_string_by(str1,'a','b','c'))\n    print(split_string_by_char(str1,'a','b','c'))\n    print(find_position(str1,str2,'a','b'))\n    print(center_string(str1,str2,'a','b'))\n    print(split_string_by_char(str1,ch,'a','b'))\n    print(replace_string(str1,str2,'a','b'))\n    \nif __name__ == \"__main__\":\n    test()",
        "num_ids": 242
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for x in range(0,len(str1)):\n        if (str1[x]==ch):\n            str1=str1.replace(str1[x],\"\")\n    return str1\n",
        "num_ids": 50
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if type(ch)!=int:\n        raise ValueError('char needs to be an integer')\n    if type(newch)!=str:\n        raise ValueError('newch needs to be a string')\n    s = list(str1)\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            s[i] = newch\n    return ''.join(s)\ndef replace_string(str1,ch,newstr):\n    '''\n    Write a function to replace all the characters in a string.\n    '''\n    if type(ch)!=str:\n        raise ValueError('char needs to be a string')\n    if type(newstr)!=str:\n        raise ValueError('newstr needs to be a string')\n    s = list(str1)\n    for i in range(len(str1)):\n        s[i] = newstr[i]\n    return ''.join(s)\ndef to_hex(s):\n    '''\n    Return the hexadecimal representation of a given string.\n    '''\n    if type(s)!=str:\n        raise ValueError('string needs to be a string')\n    s = s.replace(' ', '')\n    if len(s)%2==1:\n        s = s+'0'\n    return int(s,base=16)\ndef rev(str1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    if type(str1)!=str:\n        raise ValueError('string needs to be a string')\n    return str1[::-1]\ndef reverse(s):\n    '''\n    Write a function to reverse a given string.\n    '''\n    if type(s)!=str:\n        raise ValueError('string needs to be a string')\n    s = list(s)\n    s.reverse()\n    return ''.join(s)\ndef even_digits(str1):\n    '''\n    Write a function to convert a given string to an even number of digits.\n    '''\n    if type(str1)!=str:\n        raise ValueError('string needs to be a string')\n    str1 = str1.replace(' ','')\n    s = list(str1)\n    for i in range(len(s)):\n        if s[i] == '0':\n            s[i] = '1'\n        elif s[i] == '1':\n            s[i] = '2'\n        elif s[i] == '2':\n            s[i] = '3'\n    return ''.join(s)\ndef check(str1):\n    '''\n    Check if the given string is a valid date or not.\n    '''\n    if type(str1)!=str:\n        raise ValueError('string needs to be a string')\n    if str1[:2]=='20' or str1[:2]=='21':\n        return True\n    if str1[:2]=='19' or str1[:2]=='20':\n        return False\n    return False\ndef check2(str1):\n    '''\n    Check if the given string is a valid date or not.\n    '''\n    if type(str1)!=str:\n        raise ValueError('string needs to be a string')\n    if str1[:2]=='20' or str1[:2]=='21':\n        return True\n    if str1[:2]=='19' or str1[:2]=='20':\n        return False\n    return False\ndef check3(str1):\n    '''\n    Check if the given string is a valid date or not.\n    '''\n    if type(str1)!=str:\n        raise ValueError('string needs to be a string')\n    if str1[:2]=='20' or str1[:2]=='21':\n        return True\n    if str1[:2]=='19' or str1[:2]=='20':\n        return False\n    return False\ndef is_leap(year):\n    '''\n    Return True if the given year is a leap year or not.\n    '''\n    if type(year)!=int:\n        raise ValueError('year needs to be an integer')\n    if year%4!=0:\n        return False\n    if year%100!=0:\n        return True\n    if year%400==0:\n        return False\n    return True\ndef to_list(str1):\n    '''\n    Return a list with the split string.\n    '''\n    if type(str1)!=str:\n        raise ValueError('string needs to be a string')\n    return str1.split()\ndef validate_date(str1):\n    '''\n    Return True if the given string is a valid date or not.\n    '''\n    if check(str1)==False:\n        return False\n    if is_leap(int(str1[0:2]))==False:\n        return False\n    if len(str1)<6:\n        return False\n    if len(str1)>=10:\n        return False\n    if str1[-2:]!='15':\n        return False\n    if not str1[-4:].isdigit():\n        return False\n    return True\ndef generate_date(max_day,max_year,max_month,max_week,max_weekday,max_day_of_week):\n    '''\n    Return a random date.\n    '''\n    if type(max_day)!=int:\n        raise ValueError('day needs to be an integer')\n    if type(max_year)!=int:\n        raise ValueError('year needs to be an integer')\n    if type(max_month)!=int:\n        raise ValueError('month needs to be an integer')\n    if type(max_week)!=int:\n        raise ValueError('week needs to be an integer')\n    if type(max_weekday)!=int:\n        raise ValueError('day needs to be an integer')\n    if type(max_day_of_week)!=int:\n        raise ValueError('weekday needs to be an integer')\n    if max_day_of_week>7:\n        return '{:02d}-{:02d}-{:02d} {}'.format(max_day,max_year,max_month,max_weekday)\n    day = random.randint(1,max_day)\n    year = random.randint(1,max_year)\n    month = random.randint(1,max_month)\n    week = random.randint(1,max_week)\n    weekday = random.randint(1,max_weekday)\n    date = '{:02d}-{:02d}-{:02d} {}'.format(day,year,month,week)\n    return date\ndef valid_date(str1):\n    '''\n    Return True if the given string is a valid date or not.\n    '''\n    if check2(str1)==False:\n        return False\n    return True\ndef generate_word(max_word):\n    '''\n    Return a random word.\n    '''\n    if type(max_word)!=str:\n        raise ValueError('word needs to be a string')\n    return ''.join(random.choices(string.ascii_lowercase, k=random.randint(5,50)))\ndef days_in_month(year,month):\n    '''\n    Return the number of days in the given month.\n    '''\n    if type(year)!=int:\n        raise ValueError('year needs to be an integer')\n    if type(month)!=int:\n        raise ValueError('month needs to be an integer')\n    return [31,59,90,120,181,212,243,304,365]\ndef days_in_year(year):\n    '''\n    Return the number of days in the given year.\n    '''\n    if type(year)!=int:\n        raise ValueError('year needs to be an integer')\n    return [365]\ndef month_name(month):\n    '''\n    Return the name of the month.\n    '''\n    if type(month)!=int:\n        raise ValueError('month needs to be an integer')\n    if month>12 or month<1:\n        raise ValueError('month needs to be an integer in between 1 to 12')\n    return calendar.mont",
        "num_ids": 59
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            if str1[i]!= newch:\n                str1 = str1[:i] + newch + str1[i+1:]\n    return str1\n",
        "num_ids": 76
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        new_str = new_str + chr(ord(str1[i])+newch)\n    return new_str\n",
        "num_ids": 52
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res=''\n    for i in str1:\n        if i==ch:\n            res=res+newch\n        else:\n            res=res+i\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    a=len(str1)\n    for x in range(a):\n        if str1[x]==ch:\n            str1=str1.replace(str1[x],newch)\n    return str1\n",
        "num_ids": 54
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x: x[0])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(),key=lambda item: item[1], reverse=True))\n    return sorted_dict\n",
        "num_ids": 38
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = sorted(dict1, key=dict1.get, reverse=True)\n    return dict1\n",
        "num_ids": 28
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for k in dict1:\n        dict1[k].sort()\n",
        "num_ids": 19
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort=dict1.copy()\n    sort_keys=list(sort.keys())\n    sort_values=list(sort.values())\n    # print(sort_keys)\n    # print(sort_values)\n    sort_keys.sort()\n    sort_values.sort()\n    # print(sort_keys,sort_values)\n    # print(sort)\n    final_dict={}\n    for i in range(len(sort_keys)):\n        final_dict[sort_keys[i]]=sort_values[i]\n    return final_dict",
        "num_ids": 134
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=dict1.get)\n    dict1.sort(reverse=True)\n    return dict1\n",
        "num_ids": 32
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = Counter(dict1)\n    dict1 = sorted(dict1.items(), key = lambda kv: kv[1], reverse = True)\n    return dict1\n",
        "num_ids": 44
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1=sorted(dict1.values())\n    for k,v in dict1.items():\n        if v==list1[0]:\n            dict1[k]=list1[1]\n            list1.remove(list1[0])\n    return dict1\n",
        "num_ids": 66
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l=[]\n    for i in dict1:\n        l.append(dict1[i])\n    l.sort()\n    dict1['c']=l\n    return dict1\n",
        "num_ids": 46
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sorted = dict()\n    for i in dict1.values():\n        dict_sorted[i] = dict1.get(i)\n    for i in sorted(dict_sorted.keys()):\n        dict_sorted[i] = dict1.get(i)\n",
        "num_ids": 70
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums == []:\n        return 0\n    \n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums[0], nums[1])\n    if len(nums) == 3:\n        return max(max(nums[0], nums[1]), min(nums[0], nums[1]))\n    if len(nums) == 4:\n        return max(max(nums[0], nums[1]), min(nums[0], nums[2]), nums[0], nums[3])\n    if len(nums) == 5:\n        return max(max(nums[0], nums[1]), min(nums[0], nums[2]), nums[0], nums[3], nums[4])\n    \n    \n    if nums[0] < nums[1]:\n        return big_sum(nums[2:])\n    if nums[0] < nums[2]:\n        return big_sum(nums[:2])\n    if nums[0] < nums[3]:\n        return big_sum(nums[:3])\n    if nums[0] < nums[4]:\n        return big_sum(nums[:4])\n    if nums[0] < nums[5]:\n        return big_sum(nums[:5])\n    if nums[0] < nums[6]:\n        return big_sum(nums[:6])\n",
        "num_ids": 373
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    biggest_num = 0\n    smallest_num = 0\n    for num in nums:\n        if num > biggest_num:\n            biggest_num = num\n        elif num < smallest_num:\n            smallest_num = num\n    return (biggest_num + smallest_num)\n",
        "num_ids": 74
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= nums[0]:\n            count += 1\n    return count\n    \n",
        "num_ids": 45
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return nums[0] + nums[-1]\n",
        "num_ids": 17
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    #         min = i\n    # return max+min\n    \n    # using the max function from the python library, find the value of the max in the array.\n    #  nums = [1,4,10,100,23]\n    #  max = nums[0]\n    #  min = nums[0]\n    #  for i in nums:\n    #     if i > max:\n    #         max = i\n    #     elif i < min:\n    ",
        "num_ids": 2011
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_sum = sum(nums)\n    smallest_sum = sum(nums[0])\n    if largest_sum > smallest_sum:\n        return smallest_sum\n    else:\n        return largest_sum\n    \nprint(big_sum([1, 2, 3, 4, 5])",
        "num_ids": 72
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_nums = max(nums)\n    min_nums = min(nums)\n    sum_nums = sum(nums)\n    return max_nums - min_nums, sum_nums\n    \n",
        "num_ids": 57
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_array = []\n    for num in nums:\n        if len(sum_array) == 0:\n            sum_array.append(num)\n            continue\n",
        "num_ids": 42
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Write your code here\n    return string.lower()\n",
        "num_ids": 16
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    result = string.lower()\n    return result\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n",
        "num_ids": 10
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #pass\n    return string.lower()\n    #return string.title()\n",
        "num_ids": 21
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # YOUR CODE HERE\n    return string.lower()\n",
        "num_ids": 15
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Your code goes here\n    lower_string = string.lower()\n    return lower_string\n",
        "num_ids": 25
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Your code here\n    l = list(str1)\n    str2 = ''.join(l)\n    return str2\n",
        "num_ids": 33
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '.-/^%()*+-=}{};:![]'})\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '![]'})\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '+-/^%()*+-='})\ndef remove_symbols(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    return str1.translate({ord(c): None for c in ':&?! '})\ndef remove_space(str1):\n    '''\n    Write a function to remove whitespaces from a given string.\n    '''\n    return str1.translate({ord(c): None for c in''})\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '0123456789'})\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'})\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove non ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'abcdefghijklmnopqrstuvwxyz'})\ndef remove_numeric(str1):\n    '''\n    Write a function to remove numeric characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '123456789'})\ndef remove_letter(str1):\n    '''\n    Write a function to remove letters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'abcdefghijklmnopqrstuvwxyz'})\ndef remove_space_symbols(str1):\n    '''\n    Write a function to remove space characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '.-/^%()*+-='})\ndef remove_non_ascii_symbols(str1):\n    '''\n    Write a function to remove non ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'})\ndef remove_digits_symbols(str1):\n    '''\n    Write a function to remove digits characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '0123456789'})\ndef remove_non_numeric(str1):\n    '''\n    Write a function to remove non numeric characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '123456789'})\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove non ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'abcdefghijklmnopqrstuvwxyz'})\ndef remove_digit(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '0123456789'})\ndef remove_symbol(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '![](|][}()'})\ndef remove_non_numeric(str1):\n    '''\n    Write a function to remove non numeric characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '123456789'})\ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove non ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'})\ndef remove_non_alphabet_char(str1):\n    '''\n    Write a function to remove non alphabet characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'abcdefghijklmnopqrstuvwxyz'})\ndef remove_symbol_with_spaces(str1):\n    '''\n    Write a function to remove symbol with spaces from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '![]'})\ndef remove_symbol_with_spaces_ascii(str1):\n    '''\n    Write a function to remove symbol with spaces and ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '![]'})\ndef remove_non_ascii_with_spaces(str1):\n    '''\n    Write a function to remove non ascii and spaces characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'abcdefghijklmnopqrstuvwxyz'})\ndef remove_space_and_ascii(str1):\n    '''\n    Write a function to remove space characters and ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '.-/^%()*+-='})\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '0123456789'})\ndef remove_space_and_digits(str1):\n    '''\n    Write a function to remove space characters and digits from a given string.\n    '''\n    return str1.translate({ord(c): None for c in'0123456789'})\ndef remove_non_ascii_and_digits(str1):\n    '''\n    Write a function to remove non ascii characters and digits from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'})\ndef remove_non_ascii_and_digits(str1):\n    '''\n    Write a function to remove non ascii characters and digits from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '![]'})\ndef remove_digits_and_non_ascii(str1):\n    '''\n    Write a function to remove digits characters and non ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '0123456789'})\ndef remove_non_ascii_and_digits(str1):\n    '''\n    Write a function to remove non ascii characters and digits from a given string.\n    '''\n    return str1.translate({ord(c): None for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'})\ndef remove_digits_and_non_ascii(str1):\n    '''\n    Write a function to remove digits characters and non ascii characters from a given string.\n    '''\n    return str1.translate({ord(c): None for c in '0123456789'})\ndef remove_non_ascii_and_digits(str1):\n",
        "num_ids": 45
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i].islower():\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n",
        "num_ids": 52
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #creating a regex\n    #regex = re.compile(r\"[a-z]\")\n    #string to be removed\n    str2 = str1.lower()\n    #list of strings\n    removed_strings = list()\n    #for loop to remove all lowercase\n    for letter in str2:\n        if letter not in removed_strings:\n            removed_strings.append(letter)\n    #returning the filtered strings\n    return \"\".join(removed_strings)\n",
        "num_ids": 118
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = r\"[a-zA-Z]\"\n    return re.sub(regex, '', str1)\n",
        "num_ids": 31
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    list1=[]\n    list2=[]\n    l_1=[]\n    l_2=[]\n    for i in str1:\n        l=i.lower()\n        if(l in l_1):\n            list1.append(i)\n        else:\n            l_2.append(i)\n    for j in list1:\n        list2.append(j.lower())\n    final=[]\n    for k in list2:\n        if(k not in final):\n            final.append(k)\n    return final\n",
        "num_ids": 130
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l = list(str1.lower())\n    l[2] = \" \"\n    l[3] = \" \"\n    s = \"\".join(l)\n    return s\n",
        "num_ids": 45
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = []\n    for item in re.finditer(r\"(?<=^)([a-zA-Z])(?=$)\", str1):\n        res.append(item.group().lower())\n    return \"\".join(res)\n",
        "num_ids": 60
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u' or str1[i] == 'A' or str1[i] == 'E' or str1[i] == 'I' or str1[i] == 'O' or str1[i] == 'U'):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for i in range(len(str1)):\n        if (str1[i] not in punctuation):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_apostrophes(str1):\n    '''\n    Write a function to remove apostrophes from a given string.\n    '''\n    apostrophe = r'[\\]()-~<>./?]'\n    for i in range(len(str1)):\n        if str1[i] in apostrophe:\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i] == '1' or str1[i] == '2' or str1[i] == '3' or str1[i] == '4' or str1[i] == '5' or str1[i] == '6' or str1[i] == '7' or str1[i] == '8' or str1[i] == '9'):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_lowercase2(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u' or str1[i] == 'A' or str1[i] == 'E' or str1[i] == 'I' or str1[i] == 'O' or str1[i] == 'U'):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_punctuation2(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for i in range(len(str1)):\n        if (str1[i] not in punctuation):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_apostrophes2(str1):\n    '''\n    Write a function to remove apostrophes from a given string.\n    '''\n    apostrophe = r'[\\]()-~<>./?]'\n    for i in range(len(str1)):\n        if str1[i] in apostrophe:\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_numbers2(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i] == '1' or str1[i] == '2' or str1[i] == '3' or str1[i] == '4' or str1[i] == '5' or str1[i] == '6' or str1[i] == '7' or str1[i] == '8' or str1[i] == '9'):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_lowercase3(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u' or str1[i] == 'A' or str1[i] == 'E' or str1[i] == 'I' or str1[i] == 'O' or str1[i] == 'U'):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_punctuation3(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for i in range(len(str1)):\n        if (str1[i] not in punctuation):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_apostrophes3(str1):\n    '''\n    Write a function to remove apostrophes from a given string.\n    '''\n    apostrophe = r'[\\]()-~<>./?]'\n    for i in range(len(str1)):\n        if str1[i] in apostrophe:\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_numbers3(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i] == '1' or str1[i] == '2' or str1[i] == '3' or str1[i] == '4' or str1[i] == '5' or str1[i] == '6' or str1[i] == '7' or str1[i] == '8' or str1[i] == '9'):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_lowercase4(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if (str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u' or str1[i] == 'A' or str1[i] == 'E' or str1[i] == 'I' or str1[i] == 'O' or str1[i] == 'U'):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_punctuation4(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for i in range(len(str1)):\n        if (str1[i] not in punctuation):\n            str1 = str1.replace(str1[i], '')\n    return str1\n    \ndef remove_apostrophes4(str1):\n    '''\n    Write a function to remove apostrophes from a given string.\n    '''\n    apostrophe = r'[\\]()-~<>./?]'\n    for i in range(len(str1)):\n        if str1[i] i",
        "num_ids": 42
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    string = \"\"\n    for char in str1:\n        if char.isalpha():\n            string = string + char\n    print(string)\n",
        "num_ids": 36
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    sum = 0\n    while n!= 0 :\n        sum = n % 10\n        n = n // 10\n    return sum\n    \n",
        "num_ids": 35
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n // 10\n    return n\n    \n    ",
        "num_ids": 23
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 : \n        return 0\n    else :\n        a = int(str(n)[0])\n        return a\n",
        "num_ids": 34
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #your code goes here\n    #return number in case of 0\n    if n < 0 :\n        return -1\n    else :\n        return n % 10\n",
        "num_ids": 40
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # YOUR CODE HERE\n    if n == 0 :\n        print(\"The number is zero.\")\n        return \"zero\"\n    elif n == 1 :\n        print(\"The number is one.\")\n        return \"one\"\n    elif n == 2 :\n        print(\"The number is two.\")\n        return \"two\"\n    elif n == 3 :\n        print(\"The number is three.\")\n        return \"three\"\n    elif n == 4 :\n        print(\"The number is four.\")\n        return \"four\"\n    elif n == 5 :\n        print(\"The number is five.\")\n        return \"five\"\n    elif n == 6 :\n        print(\"The number is six.\")\n        return \"six\"\n    elif n == 7 :\n        print(\"The number is seven.\")\n        return \"seven\"\n    elif n == 8 :\n        print(\"The number is eight.\")\n        return \"eight\"\n    elif n == 9 :\n        print(\"The number is nine.\")\n        return \"nine\"\n    elif n == 10 :\n        print(\"The number is ten.\")\n        return \"ten\"\n    elif n == 11 :\n        print(\"The number is eleven.\")\n        return \"eleven\"\n    elif n == 12 :\n        print(\"The number is twelve.\")\n        return \"twelve\"\n    elif n == 13 :\n        print(\"The number is thirteen.\")\n        return \"thirteen\"\n    elif n == 14 :\n        print(\"The number is fourteen.\")\n        return \"fourteen\"\n    elif n == 15 :\n        print(\"The number is fifteen.\")\n        return \"fifteen\"\n    elif n == 16 :\n        print(\"The number is sixteen.\")\n        return \"sixteen\"\n    elif n == 17 :\n        print(\"The number is seventeen.\")\n        return \"seventeen\"\n    elif n == 18 :\n        print(\"The number is eighteen.\")\n        return \"eighteen\"\n    elif n == 19 :\n        print(\"The number is nineteen.\")\n        return \"nineteen\"\n    elif n == 20 :\n        print(\"The number is twenty.\")\n        return \"twenty\"\n    elif n == 21 :\n        print(\"The number is twenty one.\")\n        return \"twenty one\"\n    elif n == 22 :\n        print(\"The number is twenty two.\")\n        return \"twenty two\"\n    elif n == 23 :\n        print(\"The number is twenty three.\")\n        return \"twenty three\"\n    elif n == 24 :\n        print(\"The number is twenty four.\")\n        return \"twenty four\"\n    elif n == 25 :\n        print(\"The number is twenty five.\")\n        return \"twenty five\"\n    elif n == 26 :\n        print(\"The number is twenty six.\")\n        return \"twenty six\"\n    elif n == 27 :\n        print(\"The number is twenty seven.\")\n        return \"twenty seven\"\n    elif n == 28 :\n        print(\"The number is twenty eight.\")\n        return \"twenty eight\"\n    elif n == 29 :\n        print(\"The number is twenty nine.\")\n        return \"twenty nine\"\n    elif n == 30 :\n        print(\"The number is thirty.\")\n        return \"thirty\"\n    elif n == 31 :\n        print(\"The number is thirty one.\")\n        return \"thirty one\"\n    elif n == 32 :\n        print(\"The number is thirty two.\")\n        return \"thirty two\"\n    elif n == 33 :\n        print(\"The number is thirty three.\")\n        return \"thirty three\"\n    elif n == 34 :\n        print(\"The number is thirty four.\")\n        return \"thirty four\"\n    elif n == 35 :\n        print(\"The number is thirty five.\")\n        return \"thirty five\"\n    elif n == 36 :\n        print(\"The number is thirty six.\")\n        return \"thirty six\"\n    elif n == 37 :\n        print(\"The number is thirty seven.\")\n        return \"thirty seven\"\n    elif n == 38 :\n        print(\"The number is thirty eight.\")\n        return \"thirty eight\"\n    elif n == 39 :\n        print(\"The number is thirty nine.\")\n        return \"thirty nine\"\n    elif n == 40 :\n        print(\"The number is forty.\")\n        return \"forty\"\n    elif n == 41 :\n        print(\"The number is forty one.\")\n        return \"forty one\"\n    elif n == 42 :\n        print(\"The number is forty two.\")\n        return \"forty two\"\n    elif n == 43 :\n        print(\"The number is forty three.\")\n        return \"forty three\"\n    elif n == 44 :\n        print(\"The number is forty four.\")\n        return \"forty four\"\n    elif n == 45 :\n        print(\"The number is forty five.\")\n        return \"forty five\"\n    elif n == 46 :\n        print(\"The number is forty six.\")\n        return \"forty six\"\n    elif n == 47 :\n        print(\"The number is forty seven.\")\n        return \"forty seven\"\n    elif n == 48 :\n        print(\"The number is forty eight.\")\n        return \"forty eight\"\n    elif n == 49 :\n        print(\"The number is forty nine.\")\n        return \"forty nine\"\n    elif n == 50 :\n        print(\"The number is fifty.\")\n        return \"fifty\"\n    elif n == 51 :\n        print(\"The number is fifty one.\")\n        return \"fifty one\"\n    elif n == 52 :\n        print(\"The number is fifty two.\")\n        return \"fifty two\"\n    elif n == 53 :\n        print(\"The number is fifty three.\")\n        return \"fifty three\"\n    elif n == 54 :\n        print(\"The number is fifty four.\")\n        return \"fifty four\"\n    elif n == 55 :\n        print(\"The number is fifty five.\")\n        return \"fifty five\"\n    elif n == 56 :\n        print(\"The number is fifty six.\")\n        return \"fifty six\"\n    elif n == 57 :\n        print(\"The number is fifty seven.\")\n        return \"fifty seven\"\n    elif n == 58 :\n        print(\"The number is fifty eight.\")\n        return \"fifty eight\"\n    elif n == 59 :\n        print(\"The number is fifty nine.\")\n        return \"fifty nine\"\n    elif n == 60 :\n        print(\"The number is sixty.\")\n        return \"sixty\"\n    elif n == 61 :\n        print(\"The number is sixty one.\")\n        return \"sixty one\"\n    elif n == 62 :\n        print(\"The number is sixty two.\")\n        return \"sixty two\"\n    elif n == 63 :\n        print(\"The number is sixty three.\")\n        return \"sixty three\"\n    elif n == 64 :\n        print(\"The number is sixty four.\")\n        return \"sixty four\"\n    elif n == 65 :\n        print(\"The number is sixty five.\")\n        return \"sixty five\"\n    elif n == 66 :\n        print(\"The number is sixty six.\")\n        return \"sixty six\"\n    elif n == 67 :\n        print(\"The number is sixty seven.\")\n        return \"sixty seven\"\n    elif n == 68 :\n        print(\"The number is sixty eight.\")\n        return \"sixty eight\"\n    elif n == 69 :\n        print(\"The number is sixty nine.\")\n        return \"sixty nine\"\n    elif n == 70 :\n        print(\"The number is one.\")\n        return \"one\"\n    elif n == 71 :\n        print(\"The number is one two.\")\n        return \"one two\"\n    elif n == 72 :\n        print(\"The number is one three.\")\n        return \"one three\"\n    elif n == 73 :\n        print(\"The number is one four.\")\n        return \"one four\"\n    elif n == 74 :\n        print(\"The number is one five.\")\n        return \"one five\"\n    elif n == 75 :\n        print(\"The number is one six.\")\n        return \"one six\"\n    elif n == 76 :\n        print(\"The number is one seven.\")\n        return \"one seven\"\n    elif n == 77 :\n        print(\"The number is one eight.\")\n        return \"one eight\"\n    elif n == 78 :\n        print(\"The number is one nine.\")\n        return \"one nine\"\n    elif n == 79 :\n        print(\"The number is two.\")\n        return \"two\"\n    e",
        "num_ids": 2015
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0 :\n        return 0\n    while n>0 :\n        n,r = divmod(n,10)\n        print(r)\n    return r\n",
        "num_ids": 43
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    sum = 0\n    for i in str(n) :\n        sum += int(i)\n    return sum\n    \nprint(first_Digit(40)",
        "num_ids": 40
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Write your code here\n    result=[]\n    for i in list:\n        if i%2!=0:\n            result.append(i)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = [] \n    for num in list: \n        if num%2 == 1: \n            odd.append(num) \n    return odd\n",
        "num_ids": 39
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # your code here\n    odd = [i for i in list if i % 2!= 0]\n    return odd\n",
        "num_ids": 30
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list \n",
        "num_ids": 52
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # YOUR CODE HERE\n    odd = []\n    for number in list:\n        if number % 2 == 1:\n            odd.append(number)\n",
        "num_ids": 37
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [e for e in list if e % 2]\n",
        "num_ids": 16
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list: \n        if i % 2 == 1: \n            odd.append(i)\n    return odd\n",
        "num_ids": 37
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 : \n        return None\n    else : \n        return ( n*(n+1))-2*n*(n+1) \n",
        "num_ids": 41
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(\"\\n\\nDifference\")\n    for i in range(1, n + 1) :\n        print(\"{} + {} = {}\".format(i, i, n * i * i))\n    return n * (n ** 3)\n",
        "num_ids": 60
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return n*(n*n)\n",
        "num_ids": 12
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)*2\ndef sum(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    return n+difference(n)\ndef average(n) :\n    '''\n    Write a python function to find the average of the first n natural numbers.\n    '''\n    return n+difference(n)/2\ndef square(n) :\n    '''\n    Write a python function to find the square of the first n natural numbers.\n    '''\n    return n*n\ndef cube(n) :\n    '''\n    Write a python function to find the cube of the first n natural numbers.\n    '''\n    return n*n*n\ndef rectangle(n) :\n    '''\n    Write a python function to find the rectangle of the first n natural numbers.\n    '''\n    return n*n*n*n\ndef parallelogram(n) :\n    '''\n    Write a python function to find the parallelogram of the first n natural numbers.\n    '''\n    return n*n*n*n*n\ndef parallelogram_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n\ndef triangle(n) :\n    '''\n    Write a python function to find the triangle of the first n natural numbers.\n    '''\n    return n*n*n*n\ndef circle(n) :\n    '''\n    Write a python function to find the circle of the first n natural numbers.\n    '''\n    return n*n*n*n*n\ndef parallelogram_square(n) :\n    '''\n    Write a python function to find the parallelogram of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n\ndef parallelogram_cube_square(n) :\n    '''\n    Write a python function to find the parallelogram cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n\ndef triangle_square(n) :\n    '''\n    Write a python function to find the triangle square of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n\ndef triangle_cube(n) :\n    '''\n    Write a python function to find the triangle cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n\ndef circle_square(n) :\n    '''\n    Write a python function to find the circle square of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n\ndef circle_cube(n) :\n    '''\n    Write a python function to find the circle cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n\ndef parallelogram_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n\ndef triangle_cube_square_cube(n) :\n    '''\n    Write a python function to find the triangle cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n\ndef triangle_cube_square_square_cube(n) :\n    '''\n    Write a python function to find the triangle cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n\ndef triangle_square_cube_cube_square_cube(n) :\n    '''\n    Write a python function to find the triangle square cube cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef triangle_cube_cube_cube_cube(n) :\n    '''\n    Write a python function to find the triangle cube cube cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n*n\ndef circle_square_cube_cube_cube(n) :\n    '''\n    Write a python function to find the circle square cube cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube square cube of the first n natural numbers.\n    '''\n    return n*n*n*n*n*n*n*n*n*n*n*n*n\ndef parallelogram_cube_square_square_square_cube(n) :\n    '''\n    Write a python function to find the parallelogram cube squar",
        "num_ids": 16
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    i = 1\n    while(i <= n):\n        cubes.append(i**3)\n        i += 1\n    ans = []\n    i = 0\n    while(i < len(cubes)):\n        ans.append(cubes[i]**3 - cubes[i-1]**3)\n        i += 1\n    return sum(ans)\n    \nif __name__ == '__main__':\n    print(difference(3))\n    print(difference(4))\n    print(difference(5))\n    print(difference(10))\n    print(difference(12))\n    print(difference(13))\n    print(difference(14))\n    print(difference(15))\n    print(difference(16))\n    print(difference(17))\n    print(difference(18))\n    print(difference(19))\n    print(difference(20))\n    print(difference(21))\n    print(difference(22))\n    print(difference(23))\n    print(difference(24))\n    print(difference(25))\n    print(difference(26))\n    print(difference(27))\n    print(difference(28))\n    print(difference(29))\n    print(difference(30))\n    print(difference(31))\n    print(difference(32))\n    print(difference(33))\n    print(difference(34))\n    print(difference(35))\n    print(difference(36))\n    print(difference(37))\n    print(difference(38))\n    print(difference(39))\n    print(difference(40))\n    print(difference(41))\n    print(difference(42))\n    print(difference(43))\n    print(difference(44))\n    print(difference(45))\n    print(difference(46))\n    print(difference(47))\n    print(difference(48))\n    print(difference(49))\n    print(difference(50))\n    print(difference(51))\n    print(difference(52))\n    print(difference(53))\n    print(difference(54))\n    print(difference(55))\n    print(difference(56))\n    print(difference(57))\n    print(difference(58))\n    print(difference(59))\n    print(difference(60))\n    print(difference(61))\n    print(difference(62))\n    print(difference(63))\n    print(difference(64))\n    print(difference(65))\n    print(difference(66))\n    print(difference(67))\n    print(difference(68))\n    print(difference(69))\n    print(difference(70))\n    print(difference(71))\n    print(difference(72))\n    print(difference(73))\n    print(difference(74))\n    print(difference(75))\n    print(difference(76))\n    print(difference(77))\n    print(difference(78))\n    print(difference(79))\n    print(difference(80))\n    print(difference(81))\n    print(difference(82))\n    print(difference(83))\n    print(difference(84))\n    print(difference(85))\n    print(difference(86))\n    print(difference(87))\n    print(difference(88))\n    print(difference(89))\n    print(difference(90))\n    print(difference(91))\n    print(difference(92))\n    print(difference(93))\n    print(difference(94))\n    print(difference(95))\n    print(difference(96))\n    print(difference(97))\n    print(difference(98))\n    print(difference(99))\n    print(difference(100))\n    print(difference(101))\n    print(difference(102))\n    print(difference(103))\n    print(difference(104))\n    print(difference(105))\n    print(difference(106))\n    print(difference(107))\n    print(difference(108))\n    print(difference(109))\n    print(difference(110))\n    print(difference(111))\n    print(difference(112))\n    print(difference(113))\n    print(difference(114))\n    print(difference(115))\n    print(difference(116))\n    print(difference(117))\n    print(difference(118))\n    print(difference(119))\n    print(difference(120))\n    print(difference(121))\n    print(difference(122))\n    print(difference(123))\n    print(difference(124))\n    print(difference(125))\n    print(difference(126))\n    print(difference(127))\n    print(difference(128))\n    print(difference(129))\n    print(difference(130))\n    print(difference(131))\n    print(difference(132))\n    print(difference(133))\n    print(difference(134))\n    print(difference(135))\n    print(difference(136))\n    print(difference(137))\n    print(difference(138))\n    print(difference(139))\n    print(difference(140))\n    print(difference(141))\n    print(difference(142))\n    print(difference(143))\n    print(difference(144))\n    print(difference(145))\n    print(difference(146))\n    print(difference(147))\n    print(difference(148))\n    print(difference(149))\n    print(difference(150))\n    print(difference(151))\n    print(difference(152))\n    print(difference(153))\n    print(difference(154))\n    print(difference(155))\n    print(difference(156))\n    print(difference(157))\n    print(difference(158))\n    print(difference(159))\n    print(difference(160))\n    print(difference(161))\n    print(difference(162))\n    print(difference(163))\n    print(difference(164))\n    print(difference(165))\n    print(difference(166))\n    print(difference(167))\n    print(difference(168))\n    print(difference(169))\n    print(difference(170))\n    print(difference(171))\n    print(difference(172))\n    print(difference(173))\n    print(difference(174))\n    print(difference(175))\n    print(difference(176))\n    print(difference(177))\n    print(difference(178))\n    print(difference(179))\n    print(difference(180))\n    print(difference(181))\n    print(difference(182))\n    print(difference(183))\n    print(difference(184))\n    print(difference(185))\n    print(difference(186))\n    print(difference(187))\n    print(difference(188))\n    print(difference(189))\n    print(difference(190))\n    print(difference(191))\n    print(difference(192))\n    print(difference(193))\n    print(difference(194))\n    print(difference(195))\n    print(difference(196))\n    print(difference(197))\n    print(difference(198))\n    print(difference(199))\n    print(difference(200))\n    print(difference(201))\n    print(difference(202))\n    print(difference(203))\n    print(difference(204))\n    print(difference(205))\n    print(difference(206))\n    print(difference(207))\n    print(difference(208))\n    print(difference(209))\n    print(difference(210))\n    print(difference(211))\n    print(difference(212))\n    print(difference(213))\n    print(difference(214))\n    print(difference(215))\n    print(difference(216))\n    print(difference(217))\n    print(difference",
        "num_ids": 2002
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    \n    sum_of_cubes = 0\n    first_n = n\n    \n    for i in range(1,first_n+1) :\n        sum_of_cubes += math.pow(3,i)\n    \n    print(sum_of_cubes)\n    \n    return sum_of_cubes\n    \ndifference(4",
        "num_ids": 91
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(0,n) :\n        result = result + (i**3)\n    return result\ndef print_cubes(n) :\n    '''\n    Write a python function to print the cubes of the first n natural numbers.\n    '''\n    for i in range(0,n+1) :\n        print(i**3)\ndef main():\n    print('Difference of cubes of the natural numbers from the first natural number is', difference(7))\n    print_cubes(7)\nif __name__=='__main__' :\n    main(",
        "num_ids": 75
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #xor of a and b is 0, this means a and b are the same.\n    #creating a count of pairs of a and b\n    count = 0\n    #loop over the range [0,1]\n    for i in range(0,N):\n        #a ^ b = 0, this means a and b are the same\n        #if a and b are not equal, the pair is counted as not odd\n        #if a and b are equal, the pair is counted as odd.\n        #if a and b are equal, they are not counted as odd.\n        if A[i] and A[i]!= B[i]:\n            count += 1\n    #return count\n    return count\n",
        "num_ids": 165
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(N) : \n        if ( A[i] & 1 )!= 0 : \n            count+=1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        if (A[i] ^ 1) % 2 == 1 :\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0 \n    for i in range(N) : \n        xor = A[i] \n        y = (xor ^ (xor << 1)) \n        if (y & 1)!= 0 : \n            cnt = cnt + 1 \n    return cnt\n",
        "num_ids": 72
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pairs = 0\n    for i in range(1,N-1) : \n        if A[i] == A[i+1] : \n            Odd_Pairs = Odd_Pairs + 1\n    return Odd_Pairs\n",
        "num_ids": 63
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    # \n    N = int(N)\n    if N % 2 == 0 : \n        X = 0\n        Y = 0\n    else :\n        X = N\n        Y = N - 1\n    \n    if X < 0 : \n        X = X + 2 * N + 1\n    \n    if Y < 0 : \n        Y = Y + 2 * N + 1\n    \n    # \n    lst = []\n    \n    if X > 0 : \n        for i in range(X + 1) : \n            lst.append(i)\n        \n    if Y > 0 : \n        for i in range(Y + 1) : \n            lst.append(i)\n    \n    for i in range(0, len(lst) - 1) : \n        if lst[i] == lst[i + 1] : \n            lst.pop(i) \n            lst.pop(i + 1) \n    \n    if len(lst) > 0 : \n        lst.pop() \n        lst.pop() \n    \n    if len(lst) < 2 : \n        return 0\n    else : \n        return len(lst)\n    \n    ",
        "num_ids": 295
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    odd_dict = {}\n    for key in A :\n        if A[key] % 2!= 0 : \n            if A[key] in odd_dict : \n                odd_dict[A[key]] = odd_dict[A[key]] + 1\n            else : \n                odd_dict[A[key]] = 1\n        else : \n            if A[key] not in odd_dict : \n                odd_dict[A[key]] = 0\n            else : \n                odd_dict[A[key]] = odd_dict[A[key]] + 1\n    for key in odd_dict :\n        if odd_dict[key] % 2!= 0 : \n            if (key % 2 == 0 ) and (key in odd_dict):\n                odd += odd_dict[key]\n            if (key % 2!= 0 ) and (key in odd_dict):\n                odd += odd_dict[key]\n    return odd\n",
        "num_ids": 229
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            xor = A[i] ^ A[j]\n            if (xor % 2!= 0) : \n                count += 1\n    return count \n",
        "num_ids": 74
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) :\n        if A[i]!= A[i+1] :\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    if N % 2 == 1 : \n        for i in range(0,N,2) : \n            if A[i] & 1!= A[i+1] : \n                count = count + 1\n    else : \n        for i in range(0,N,2) : \n            if A[i] & 1!= A[i+1] : \n                count = count + 1\n    return count\n    \nA = [0,1,1,0,1,0,1,1,1,1]\nN = len(A)\nprint(find_Odd_Pair(A,N)",
        "num_ids": 155
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a blank string\n    new_string = ''\n    # make sure the string is of length 2 or greater\n    if len(string) > 2:\n        # if the length is greater than 2\n        if len(string) % 2 == 0:\n            # split the string into an array\n            split_list = string.split(' ')\n            # use a for loop to iterate through each element\n            # split the string into a list\n            # use a for loop to iterate through each element\n            # split the list into an array\n            for letter in split_list:\n                # if the letter is equal to the letter in the original string\n                if letter == string:\n                    # swap the first letter with the second\n                    # letter in the array\n                    new_string += string[0] + string[1]\n                # if the letter is not equal to the letter in the original string\n                else:\n                    # add the letter to the array\n                    new_string += letter\n            # convert the array to a string\n            new_string = new_string.replace(' ', '')\n            # return the result\n            return new_string\n        # if the length is not 2\n        else:\n            # convert the string to an array\n            split_list = string.split(' ')\n            # convert the string array to an array\n            new_string = ''.join(split_list)\n            # convert the array to a string\n            new_string = new_string.replace(' ', '')\n            # return the result\n            return new_string\n    else:\n        # return the string\n        return string\n",
        "num_ids": 369
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Define a new function to do this\n    def new_function(str):\n        new_str = ''\n        for char in str:\n            if char.isupper():\n                new_str += 'A'\n            else:\n                new_str += 'a'\n        return new_str\n    \n    # Call it function\n    return new_function(string)",
        "num_ids": 88
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    for char in string:\n        if string[char] == \"a\":\n            string[char] = \"z\"\n        elif string[char] == \"b\":\n            string[char] = \"y\"\n        elif string[char] == \"c\":\n            string[char] = \"x\"\n        elif string[char] == \"d\":\n            string[char] = \"w\"\n        elif string[char] == \"e\":\n            string[char] = \"v\"\n        elif string[char] == \"f\":\n            string[char] = \"g\"\n        elif string[char] == \"h\":\n            string[char] = \"u\"\n        elif string[char] == \"i\":\n            string[char] = \"c\"\n        elif string[char] == \"j\":\n            string[char] = \"k\"\n        elif string[char] == \"l\":\n            string[char] = \"m\"\n        elif string[char] == \"m\":\n            string[char] = \"j\"\n        elif string[char] == \"n\":\n            string[char] = \"o\"\n        elif string[char] == \"o\":\n            string[char] = \"l\"\n        elif string[char] == \"p\":\n            string[char] = \"z\"\n        elif string[char] == \"q\":\n            string[char] = \"x\"\n        elif string[char] == \"r\":\n            string[char] = \"s\"\n        elif string[char] == \"t\":\n            string[char] = \"x\"\n        elif string[char] == \"u\":\n            string[char] = \"v\"\n        elif string[char] == \"v\":\n            string[char] = \"g\"\n        elif string[char] == \"w\":\n            string[char] = \"y\"\n        elif string[char] == \"x\":\n            string[char] = \"j\"\n        elif string[char] == \"y\":\n            string[char] = \"z\"\n        elif string[char] == \"z\":\n            string[char] = \"m\"\n    return string\n",
        "num_ids": 526
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0] in ('a', 'A'):\n        string = string.replace('a', 'E')\n    if string[0] in ('b', 'B'):\n        string = string.replace('b', 'A')\n    if string[0] in ('c', 'C'):\n        string = string.replace('c', 'E')\n    if string[0] in ('d', 'D'):\n        string = string.replace('d', 'A')\n    if string[0] in ('e', 'E'):\n        string = string.replace('e', 'A')\n    if string[0] in ('f', 'F'):\n        string = string.replace('f', 'A')\n    if string[0] in ('g', 'G'):\n        string = string.replace('g', 'E')\n    if string[0] in ('h', 'H'):\n        string = string.replace('h', 'A')\n    if string[0] in ('i', 'I'):\n        string = string.replace('i', 'E')\n    if string[0] in ('j', 'J'):\n        string = string.replace('j', 'A')\n    if string[0] in ('k', 'K'):\n        string = string.replace('k', 'E')\n    if string[0] in ('l', 'L'):\n        string = string.replace('l', 'A')\n    if string[0] in ('m', 'M'):\n        string = string.replace('m', 'E')\n    if string[0] in ('n', 'N'):\n        string = string.replace('n', 'A')\n    if string[0] in ('o', 'O'):\n        string = string.replace('o', 'E')\n    if string[0] in ('p', 'P'):\n        string = string.replace('p', 'A')\n    if string[0] in ('q', 'Q'):\n        string = string.replace('q', 'E')\n    if string[0] in ('r', 'R'):\n        string = string.replace('r', 'A')\n    if string[0] in ('s', 'S'):\n        string = string.replace('s', 'E')\n    if string[0] in ('t', 'T'):\n        string = string.replace('t', 'A')\n    if string[0] in ('u', 'U'):\n        string = string.replace('u', 'E')\n    if string[0] in ('v', 'V'):\n        string = string.replace('v', 'A')\n    if string[0] in ('w', 'W'):\n        string = string.replace('w', 'E')\n    if string[0] in ('x', 'X'):\n        string = string.replace('x', 'A')\n    if string[0] in ('y', 'Y'):\n        string = string.replace('y', 'E')\n    if string[0] in ('z', 'Z'):\n        string = string.replace('z', 'A')\n    return string\n",
        "num_ids": 734
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for letter in string:\n        if letter.isupper():\n            string = string.replace(letter, '_')\n    return string\n",
        "num_ids": 34
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for i in string:\n        if(i.isupper()):\n            new_string += i.lower()\n        elif(i.islower()):\n            new_string += i.upper()\n    return new_string\n",
        "num_ids": 63
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return\n    if string[0] == '\"':\n        string = string[1:len(string)]\n    if string[0] == \" \":\n        string = string[1:len(string)]\n    if string[0].islower():\n        string = string[0].upper() + string[1:]\n    if string[0].isupper():\n        string = string[0].lower() + string[1:]\n    if string[0].istitle():\n        string = string[0].title() + string[1:]\n    if string[0] == \"\\\\\":\n        string = string[1:].replace(\"\\\\\", \"\\\\\\\\\")\n    return string\n",
        "num_ids": 164
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    i = 0\n    string = string.replace(\" \", \"\").lower()\n    while i < len(string):\n        if string[i].isupper() and string[i+1].islower() and string[i+2].isupper():\n            string = string[:i] + string[i].upper() + string[i+2:]\n            i += 2\n        else:\n            string = string[:i] + string[i].lower() + string[i+1:]\n            i += 1\n    return string\n",
        "num_ids": 123
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    output = ''\n    for c in string:\n        if c.isupper():\n            output += c.lower()\n        elif c.islower():\n            output += c.upper()\n        else:\n            output += c\n    return output\n",
        "num_ids": 60
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #Turns string into list\n    list = list(string)\n    #Toggles each character in the string\n    for i in range(len(list)):\n        if list[i].isupper():\n            list[i] = list[i].lower()\n        elif list[i].islower():\n            list[i] = list[i].upper()\n        elif list[i].isdigit():\n            list[i] = list[i].replace('.', '-')\n    #Returns the string back\n    return ''.join(list)\n    \ndef main():\n    string = 'Hello world'\n    print(toggle_string(string))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 173
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = 0\n    d2 = 0\n    for i in range(1, n1 + 1):\n        d1 += i * n1\n    for i in range(1, n2 + 1):\n        d2 += i * n2\n    return d1 - d2\n",
        "num_ids": 68
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(n1 - n) for n in [n1, n2]])\n",
        "num_ids": 25
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # check all the numbers in the sequence\n    nums = list(range(10))\n    nums[n1-1] = 0\n    nums[n2-1] = 0\n    total = 0\n    # use a for loop to iterate\n    # nums[i] is the current digit of n1\n    # nums[i] is the current digit of n2\n    for num in nums:\n        # if num is even, we add it to the sum\n        # otherwise we subtract it\n        # and we add one to the sum\n        # if the sum is 0, then it's not a digit\n        total += num if num % 2 == 0 else -num\n    return total\n",
        "num_ids": 164
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(set(abs(n1 - n2)))\n",
        "num_ids": 17
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_difference = n1 - n2\n    if digit_difference < 10:\n        return digit_difference\n    else:\n        return digit_difference // 10 + (digit_difference % 10)\n",
        "num_ids": 53
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += (n1-n2) * (10**i)\n    return diff\n",
        "num_ids": 37
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    for i in range(1, n1+1):\n        d += (n2 - i) * (n2 - i)\n    return d\n",
        "num_ids": 42
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    res = 0\n    if n1 < 10 or n1 > 9:\n        res = n1 - n2\n        return res\n    if n2 < 10 or n2 > 9:\n        res = n1 - n2\n        return res\n    for i in range(10):\n        res += (n1 - n2) * (10 ** (n2 - 9))\n    return res\n",
        "num_ids": 93
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1>n2:\n        return abs(n1-n2)\n    else:\n        return abs(n1-n2)+sum(digit_distance_nums(n1, i) for i in range(10))\n    \n    \nprint digit_distance_nums(12, 8)\n",
        "num_ids": 75
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return n1 - n2\n",
        "num_ids": 10
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #Your code here\n    n=size\n    c=0\n    sum=0\n    l=[]\n    for i in range(n):\n        l.append(a[i])\n    l.sort()\n    for i in range(n-1, -1, -1):\n        c=0\n        for j in range(i+1):\n            if j==i or a[i]>a[j]:\n                c+=1\n        if c==0:\n            sum=sum+a[i]\n        else:\n            sum=max(sum,a[i])\n    return sum",
        "num_ids": 143
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    l = 0\n    # Find the sum of the largest sublist\n    for i in range(len(a)):\n        if a[i] > a[l] and i > 0:\n            l = i\n    if l == len(a) and a[l] > 0:\n        return a[l]\n    else:\n        return 0\n",
        "num_ids": 84
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    start, end = 0, 0\n    count = 0\n    largest = -1\n    # iterate through list\n    for i in range(size):\n        if count == 0:\n            end = start + 1\n        else:\n            if a[start] < a[end] and a[start] + a[end] > largest:\n                largest = a[end] + a[start]\n                end += 1\n            else:\n                start += 1\n                count += 1\n    return larges",
        "num_ids": 117
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    ans = 0\n    for i in range(0, len(a)):\n        for j in range(0, i + 1):\n            if a[j] - a[i] > 0:\n                a[j] = a[j] - a[i]\n    return max(a)\n",
        "num_ids": 72
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0 or a is None:\n        return 0\n    \n    if size == 1:\n        return a[0]\n    \n    mid = int(size/2)\n    left_sum = max_sub_array_sum(a, size - mid)\n    right_sum = max_sub_array_sum(a, mid)\n    \n    max_sum = 0\n    \n    for i in range(size - mid):\n        max_sum += max(a[i+mid], a[i])\n        \n    return max(left_sum, max_sum, right_sum)\n    \ndef find_max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0 or a is None:\n        return 0\n    \n    if size == 1:\n        return a[0]\n    \n    mid = int(size/2)\n    left_sum = find_max_sub_array_sum(a, size - mid)\n    right_sum = find_max_sub_array_sum(a, mid)\n    \n    max_sum = 0\n    \n    for i in range(size - mid):\n        max_sum += max(a[i+mid], a[i])\n        \n    return max(left_sum, max_sum, right_sum)\n",
        "num_ids": 148
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = size\n    largest_sum = -float('inf')\n    max_list = []\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            max_list.append(max(a[i:j + 1]))\n    \n    if max_list[0] == 0:\n        return 0\n    \n    for i in range(0, n):\n        if a[i] == max_list[0]:\n            for j in range(i + 1, n):\n                if a[j] > a[i] + max_list[0]:\n                    a[i], a[j] = a[j], a[i]\n                    largest_sum = a[j]\n    \n    return largest_sum\n    \n    \nif __name__ == '__main__':\n    print(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 10))\n    print(max_sub_array_sum([-3, 2, -1, 0, 1, -2, 3, -4, 5, 7, 8, 9, 10, 11, 12, 13], 10))\n    print(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 10))\n    print(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 10))\n    print(max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 10)",
        "num_ids": 414
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # 1) init\n    max_sub_sum = float('-inf')\n    # 2) iterate over each index\n    for i in range(size):\n        # 3) if we already have a sum,\n        #     the sum is the current sum minus the current value\n        if a[i] < 0:\n            # 4) if the sum is larger than the current sum,\n            #     increment the value to the current sum\n            #     so we don't iterate to the next index\n            if max_sub_sum < a[i]:\n                max_sub_sum = a[i]\n                # 5) return the sum\n                return max_sub_sum\n        # 6) if the current value is larger than the largest sum,\n        #     increment the value to the current value so we don't iterate\n        #     to the next index\n        else:\n            a[i] += max_sub_sum\n",
        "num_ids": 216
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_array = 0\n    curr_sum = 0\n    for index in range(0, size):\n        curr_sum += a[index]\n        if curr_sum > max_sub_array:\n            max_sub_array = curr_sum\n    return max_sub_array\n",
        "num_ids": 75
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #sorted(test_tup1)\n    return test_tup1 + test_tup2\n",
        "num_ids": 28
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # remove the brackets that are unnecessary\n    test_tup1 = test_tup1[1:-1]\n    test_tup2 = test_tup2[1:-1]\n    # define the lists\n    t1 = []\n    t2 = []\n    # use extend() to add the elements of the tuples to the lists\n    for i in range(0, len(test_tup1)):\n        t1.append(test_tup1[i])\n    for i in range(0, len(test_tup2)):\n        t2.append(test_tup2[i])\n    # sort them in the order of the elements in both lists\n    t1.sort()\n    t2.sort()\n    # return the union\n    return t1 + t2\n",
        "num_ids": 190
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if type(test_tup1) == tuple:\n        test_tup1 = test_tup1[0]\n    if type(test_tup2) == tuple:\n        test_tup2 = test_tup2[0]\n",
        "num_ids": 62
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1 or not test_tup2:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup_1 = tuple(sorted(test_tup1))\n    tup_2 = tuple(sorted(test_tup2))\n    tup = tup_1 + tup_2\n    return tup\n",
        "num_ids": 57
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_list = []\n    for i in test_tup1:\n        new_list.append(i)\n    for i in test_tup2:\n        new_list.append(i)\n",
        "num_ids": 51
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    tup = tup1.union(tup2)\n    return sorted(tup)\n",
        "num_ids": 53
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    answer = []\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    test_tup1 = tuple(sorted(test_tup1))\n    test_tup2 = tuple(sorted(test_tup2))\n    for item in test_tup1:\n        answer.append(item)\n    for item in test_tup2:\n        answer.append(item)\n    return answer\n",
        "num_ids": 132
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = test_tup1[:]\n    test_list2 = test_tup2[:]\n",
        "num_ids": 30
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    a = set(test_tup1)\n    b = set(test_tup2)\n    return a | b\n",
        "num_ids": 32
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(list(map(len, lst)))\n",
        "num_ids": 16
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    for i in range(1,len(lst)):\n        if lst[i]>lst[i-1]:\n            count = count+1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # find the max of lst and conquer it\n    def findMaxLength(lst):\n        \"\"\"\n        This function is given a list of length 1 and 1.\n        The function returns the length of the longest sublist\n        where the length is in 1\n        \"\"\"\n        if len(lst) == 0:\n            return 0\n",
        "num_ids": 79
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        if len(lst[0]) == 0:\n            return 1\n        else:\n            return Find_Max_Length(lst[1:]) + 1\n",
        "num_ids": 59
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Note - Python doesn't provide a built-in function to find the length of a list.\n    # You have to write a function that will do the following:\n    # 1. loop through each element in the list, and if it is the element,\n    #   find its length, and update the result with the length.\n    # 2. Repeat the process for the second list.\n    # 3. Repeat the process for the third list.\n    # 4. Repeat the process for the fourth list.\n    # 5. Repeat the process for the fifth list.\n    '''\n    Input :\n    lst : list of integers\n    Output :\n    Max length of sublists of the list\n    '''\n    def find_length(lst):  \n        '''\n        Write a python function to find the length of the longest sublists.\n        '''\n        # Note - Python doesn't provide a built-in function to find the length of a list.\n        # You have to write a function that will do the following:\n        # 1. loop through each element in the list, and if it is the element,\n        #   find its length, and update the result with the length.\n        # 2. Repeat the process for the second list.\n        # 3. Repeat the process for the third list.\n        # 4. Repeat the process for the fourth list.\n        # 5. Repeat the process for the fifth list.\n        # Note : the length of the list should be equal to the length of the largest sublist\n        # and not necessarily the length of the smallest sublist\n        #\n        #       Input :\n        #   lst : list of integers\n        # Output :\n        #  Max length of sublists of the list\n        #\n        # Note - Python doesn't provide a built-in function to find the length of a list.\n        # You have to write a function that will do the following:\n        # 1. loop through each element in the list, and if it is the element,\n        #   find its length, and update the result with the length.\n        # 2. Repeat the process for the second list.\n        # 3. Repeat the process for the third list.\n        # 4. Repeat the process for the fourth list.\n        # 5. Repeat the process for the fifth list.\n        #\n        '''\n        Input :\n        lst : list of integers\n        Output :\n        Max length of sublists of the list\n        '''\n        max_length = 0\n        for i in range(len(lst)):\n            if lst[i]>lst[max_length]:\n                max_length = i\n        return max_length\n",
        "num_ids": 51
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sub_lst = []\n    for lst_el in lst:\n        if len(lst_el) > len(sub_lst):\n            sub_lst = lst_el\n    return sub_lst\n",
        "num_ids": 57
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) <= 1:\n        return len(lst)\n",
        "num_ids": 21
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # list[0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,10]\n    length = 0\n    # traverse through the list\n    for i in lst:\n        # if this i is the first element, the length is the current length + 1\n        if i == lst[0]:\n            length += 1\n        # if the element is not the first element, it is the last element of the sublist\n        elif i!= lst[0]:\n            # find the length of the last element\n            # as we cannot know the length of the last element, we need to find the length of the sublist\n            length = max(length, len(lst[i:]) + 1)\n    return length\n",
        "num_ids": 247
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_len = len(lst)\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    max_len = d[lst_len]\n    for i in lst:\n        if d[i] > max_len:\n            max_len = d[i]\n    return max_len\n",
        "num_ids": 108
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # define regular expression\n    reg = re.compile('\"(.*)\"')\n    # return all the matched groups\n    return reg.findall(text)\n",
        "num_ids": 39
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    res = []\n    result = ''\n    for char in text:\n        if char == '\"':\n            res.append(result)\n            result = ''\n        else:\n            result += char\n",
        "num_ids": 49
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    def extract_values_2(s):\n        '''\n        Extracts values between quotation marks from a string.\n        '''\n        return [match.group(1) for match in re.finditer(r\"(?<=[^'\\\" \\n])'(.+)'(?=[^'\\\" \\n])\", s)]\n    \n    values = extract_values_2(text)\n    return values\n",
        "num_ids": 66
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub(r'\\\\','',text)\n    text = re.sub(r'\\\"','',text)\n    text = re.sub(r\"'\",\"\",text)\n    text = re.sub(r\"[^a-zA-Z0-9_]\",\"\",text)\n    text = re.sub(r\"\\.\",\"\",text)\n    text = re.sub(r\"\\,\",\"\",text)\n    return text\n",
        "num_ids": 107
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    def match_and_handle(text):\n        '''\n        A function to match and handle the quotations.\n        '''\n        values = re.findall(r'(\\'[^\\\"]*\\'|\\'.+?\\')', text)\n        for value in values:\n            if value[0] == \"'\":\n                text = text.replace(value[1:-1], '\"')\n            else:\n                text = text.replace(value, '\"')\n        return text\n    return match_and_handle(text)\n",
        "num_ids": 97
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r\"\\\"(.*?)\\\"\"\n    text = re.sub(regex, r\"\\\"\\1\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\2\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\3\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\4\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\5\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\6\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\7\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\8\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\9\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\10\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\11\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\12\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\13\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\14\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\15\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\16\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\17\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\18\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\19\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\20\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\21\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\22\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\23\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\24\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\25\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\26\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\27\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\28\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\29\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\30\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\31\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\32\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\33\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\34\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\35\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\36\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\37\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\38\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\39\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\40\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\41\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\42\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\43\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\44\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\45\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\46\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\47\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\48\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\49\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\50\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\51\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\52\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\53\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\54\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\55\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\56\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\57\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\58\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\59\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\60\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\61\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\62\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\63\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\64\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\65\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\66\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\67\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\68\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\69\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\70\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\71\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\72\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\73\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\74\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\75\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\76\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\77\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\78\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\79\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\80\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\81\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\82\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\83\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\84\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\85\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\86\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\87\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\88\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\89\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\90\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\91\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\92\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\93\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\94\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\95\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\96\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\97\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\98\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\99\\\"\", text)\n    text = re.sub(regex, r\"\\\"\\100\\\"\", text)\n",
        "num_ids": 2015
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\"', \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"`\", \"\")\n    text = text.replace(\"(\", \"\")\n    text = text.replace(\")\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\";\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"?\", \"\")\n    text = text.replace(\">\", \"\")\n    text = text.replace(\"<\", \"\")\n    text = text.replace(\"[\", \"\")\n    text = text.replace(\"]\", \"\")\n    text = text.replace(\"{\", \"\")\n    text = text.replace(\"}\", \"\")\n    text = text.replace(\"{\", \"\")\n    text = text.replace(\"}\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"+\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\";\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"?\", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"?\", \"\")\n    text = text.replace(\">\", \"\")\n    text = text.replace(\"<\", \"\")\n    text = text.replace(\"[\", \"\")\n    text = text.replace(\"]\", \"\")\n    text = text.replace(\"{\", \"\")\n    text = text.replace(\"}\", \"\")\n    text = text.replace(\"{\", \"\")\n    text = text.replace(\"}\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"+\", \"\")\n    text = text.replace(\"+\", \"\")\n    text = text.replace(\".\", \"\")\n    text = text.replace(\"%\", \"\")\n    text = text.replace(\"$\", \"\")\n    text = text.replace(\"`\", \"\")\n    text = text.replace(\"|\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"=\", \"\")\n    text = text.replace(\"+\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"%\", \"\")\n    text = text.replace(\"&\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"+\", \"\")\n    text = text.replace(\"-\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\" \", \"\")\n    text = text.replace(\"+\", \"\")\n    text = text.replace(\"+\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(\"*\", \"\")\n    text = text.replace(",
        "num_ids": 2014
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'(\\w+)[.,;:=!]{1,2}(\\w+)', text)\n",
        "num_ids": 32
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = re.search('(?<=\\\")(.*?)(?=\\\")', text)\n    res = string.group(0)\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub('\\\"', '', text) # Replace all quotes with spaces.\n    text = re.sub('\\'', '', text)\n    text = re.sub('\\'','',text)\n    return text\n",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]!=arr[i+1]:\n            count+=1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Your code here\n    num_pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j] and arr[j] in arr:\n                num_pairs += 1\n    return num_pairs\n",
        "num_ids": 80
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n=n+1\n    pairs_cnt=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                if i!=j:\n                    pairs_cnt+=1\n    return pairs_cnt\n",
        "num_ids": 78
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Your code here\n    ans = 0\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i]!= arr[j] and arr[i]!= 0 and arr[j]!= 0 and arr[i]!= arr[j]:\n                ans += 1\n    return ans",
        "num_ids": 81
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d={}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i]+=1\n    if n>2:\n        d[arr[0]]+=1\n    else:\n        d[arr[0]]=1\n    if n>2:\n        d[arr[1]]+=1\n    else:\n        d[arr[1]]=1\n    for i in range(2, n):\n        if d[arr[i-2]]==1 and d[arr[i-1]]==1:\n            d[arr[i-1]]+=1\n        else:\n            d[arr[i-1]]=1\n        if d[arr[i-2]]==1 and d[arr[i-2]]==1:\n            d[arr[i-2]]+=1\n        else:\n            d[arr[i-2]]=1\n    return d[arr[n-1]]+d[arr[n-2]]\n",
        "num_ids": 241
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]==0:\n                pairs+=1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # your code goes here\n    p=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                p+=1\n    return p\n",
        "num_ids": 62
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Your code goes here\n    c = 0\n    if len(arr) < 2:\n        return c\n    for i in range(1,len(arr)):\n        if arr[i]!= arr[i-1]:\n            c+=1\n    return c\n",
        "num_ids": 66
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unordered_pairs = []\n    for i in range(n-1):\n        for j in range(i+1,n):\n            # check if the first element of the pair is equal to the last element of the pair\n            if arr[i]!= arr[j]:\n                unordered_pairs.append([arr[i],arr[j]])\n    return unordered_pairs\n",
        "num_ids": 95
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = {} \n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    \n    s = 0\n    \n    for i in d:\n        if d[i] % 2 == 1:\n            s += 1\n    \n    return s\n",
        "num_ids": 82
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # start with a simple if-else statement \n    # if-else to split the string \n    # into two words using split method\n    word = word.split() \n    if len(word) > 2: \n        return word[0] + \" \" + word[1] \n    else: \n        return word[0] \n    ",
        "num_ids": 84
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ') \n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [word[i:i+2] for i in range(0, len(word), 2)]\n",
        "num_ids": 27
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    # perform lower case operation\n    word = word.lower()\n    # split into characters\n    return [char for char in word]\n",
        "num_ids": 41
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [word[i : i + 3] for i in range(0, len(word), 3)]\n",
        "num_ids": 27
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    new_list = []\n    length = len(word)\n    new_string = \"\"\n    for i in range(length):\n        char = word[i]\n        new_list.append(char)\n    for j in range(len(new_list)):\n        new_string += new_list[j]\n    return new_string\n",
        "num_ids": 83
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def is_palindrome(num):\n        str = str(num)\n        return str == str[::-1]\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return int(str(n)[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n:\n        result = result + n % 10\n        n = n // 10\n",
        "num_ids": 28
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # your code here\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)\n",
        "num_ids": 39
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (sum(map(int, str(n))))\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not n:\n        return 0\n    return n % 10 + sum_digits(n//10)\n",
        "num_ids": 28
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n",
        "num_ids": 17
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    if len(list1) == 1:\n        if list1[0]!= list1[0]:\n            return False\n        return True\n    if list1[0] < list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])\n",
        "num_ids": 87
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n    \n    \nif __name__ == \"__main__\":\n    print(issort_list([1,2,3,4,5])) #should return True\n    print(issort_list([1,2,3,5,4])) #should return False\n",
        "num_ids": 88
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(len(list1)-1):\n        if list1[index] > list1[index+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return False\n    elif len(list1) == 1:\n        return True\n    elif len(list1) == 2:\n        return list1[0] > list1[1]\n    else:\n        for i in range(0,len(list1) - 2):\n            if list1[i] > list1[i + 1] and list1[i] > list1[i + 2]:\n                return False\n        return True\n",
        "num_ids": 118
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for x in range(0,length)]\n",
        "num_ids": 17
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    for i in range(length):\n        empty.append(dict())\n    return empty\n",
        "num_ids": 28
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty = []\n    for i in range(length):\n        empty.append(dict())\n    return empty\n",
        "num_ids": 28
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list()\n",
        "num_ids": 7
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    # Empty list of dictionaries\n    dictionaries = []\n    \n    # For loop to create empty dictionaries and append it\n    for i in range(0,length):\n        \n        # Dictionary to store values of each record\n        temp = {\"name\": \"\", \"gender\": \"\", \"dob\": \"\", \"nationality\": \"\", \"email\": \"\"}\n        \n        # Adding name, gender, dob, nationality, email to empty dictionary\n        temp[\"name\"] = input(f\"Type your name in {i+1}: \")\n        temp[\"gender\"] = input(f\"Type your gender in {i+1}: \")\n        temp[\"dob\"] = input(f\"Type your DOB in {i+1}: \")\n        temp[\"nationality\"] = input(f\"Type your nationality in {i+1}: \")\n        temp[\"email\"] = input(f\"Type your email in {i+1}: \")\n        \n        # Appending to empty list\n        dictionaries.append(temp)\n    \n    # Return empty list\n    return dictionaries\n    \n",
        "num_ids": 255
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = []\n    return empty_dict\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for x in range(length):\n        l.append({})\n    return l\n",
        "num_ids": 27
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n",
        "num_ids": 6
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[0])\n",
        "num_ids": 27
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for i in range(len(list1)):\n        sub_lists.append(list1[i])\n    return sub_lists\n",
        "num_ids": 41
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #ex - [list1, [list2, list3, list4]]\n    #array_sorted_by_value = []\n",
        "num_ids": 34
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1)<=1:\n        return list1\n    else:\n        def func(l):\n            return sorted(l)\n        return func(list1)\n",
        "num_ids": 45
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if type(list1)!= list:\n        return\n",
        "num_ids": 16
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    list1.sort(key=str.casefold)\n    \ndef index_list(a,n):\n    '''\n    Write a function to get the index of the list at a given index.\n    '''\n    return a.index(n)\n",
        "num_ids": 11
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a new list with new values\n    new_list = []\n    # Get the sublists\n    sublists = list1[0]\n    for i in range(len(sublists)):\n        new_list.append(sublists[i])\n    # Sort the new list\n    new_list.sort()\n    # Create a new sublist with new values\n    for i in range(len(new_list)):\n        new_list[i] = list1[i][0]\n    return new_list\n    ",
        "num_ids": 125
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n    \ndef find_index(list_, element):\n    '''\n    Given a list, find and return index of element in the list.\n    '''\n    i = 0\n    while i < len(list_):\n        if list_[i] == element:\n            return i\n        i += 1\n    return \"Not found\"\n    \ndef concat(*lists):\n    '''\n    Given a list of lists, concatenate all lists into a string.\n    '''\n    return \"\".join(str(list1) for list1 in lists)\n    \ndef remove_whitespace(string):\n    '''\n    Given a string, remove all leading and trailing whitespace.\n    '''\n    return string.lstrip() + string.rstrip()\n    \ndef print_list(list_):\n    '''\n    Given a list, print out the list of strings.\n    '''\n    for item in list_:\n        print(item)\n    \ndef remove_empty_lists(list_):\n    '''\n    Given a list, remove all empty lists.\n    '''\n    for item in list_:\n        if item!= \"\":\n            list_ = list_[list_.index(item):]\n    return list_\n    \ndef remove_one_element(list_, element):\n    '''\n    Given a list, remove the first occurrence of the given element in the list.\n    '''\n    i = 0\n    while i < len(list_):\n        if list_[i] == element:\n            list_ = list_[:i] + list_[i+1:]\n            break\n        i += 1\n    return list_\n    \ndef remove_duplicates(list_):\n    '''\n    Given a list, remove all duplicate elements.\n    '''\n    for item in list_:\n        if item not in list_:\n            list_ = list_[:list_.index(item)] + list_[list_.index(item):]\n    return list_\n    \ndef remove_duplicates_2(list_, element):\n    '''\n    Given a list, remove all duplicate elements where the second occurrence of the given element is also the first occurrence of the given element.\n    '''\n    i = 0\n    while i < len(list_):\n        if list_[i] == element:\n            if list_[list_.index(element, i+1)] == element:\n                list_ = list_[:i] + list_[i+1:]\n                break\n            i += 1\n        i += 1\n    return list_\n    \ndef print_dict(dict_):\n    '''\n    Given a dictionary, print out the dictionary.\n    '''\n    for key in dict_:\n        print(key)\n        for item in dict_[key]:\n            print(\"\\t\", item)\n        print(\"\\n\")\n    \ndef print_list_as_dict(list_):\n    '''\n    Given a list, print out the list as a dictionary.\n    '''\n    dict_ = dict()\n    for item in list_:\n        dict_[item] = 1\n    return dict_\n    \ndef print_dictionary_as_list(dict_):\n    '''\n    Given a dictionary, print out the dictionary as a list.\n    '''\n    for key in dict_:\n        print(key, \"=\", dict_[key])\n    print(\"\\n\")\n    \ndef get_first_key(dict_):\n    '''\n    Given a dictionary, get the first key of the dictionary.\n    '''\n    key = dict_[next(iter(dict_))]\n    return key\n    \ndef get_last_key(dict_):\n    '''\n    Given a dictionary, get the last key of the dictionary.\n    '''\n    return next(iter(dict_))\n    \ndef get_all_keys(dict_):\n    '''\n    Given a dictionary, get all the keys.\n    '''\n    return [k for k in dict_]\n    \ndef get_all_values(dict_):\n    '''\n    Given a dictionary, get all the values.\n    '''\n    return [v for v in dict_.values()]\n    \ndef get_all_items(dict_):\n    '''\n    Given a dictionary, get all the items.\n    '''\n    return [k for k in dict_]\n    \ndef get_all_keys_length(dict_):\n    '''\n    Given a dictionary, get all the keys and the length.\n    '''\n    return [(k, len(v)) for k, v in dict_.items()]\n    \ndef remove_items(list_, list_to_remove):\n    '''\n    Given a list, remove the first occurrence of the list_to_remove from the list.\n    '''\n    i = 0\n    while i < len(list_):\n        if list_[i] in list_to_remove:\n            list_ = list_[:i] + list_[i+1:]\n            break\n        i += 1\n    return list_\n    \ndef del_duplicates(list_):\n    '''\n    Given a list, remove all duplicate elements.\n    '''\n    i = 0\n    while i < len(list_):\n        if list_[i] in list_:\n            list_ = list_[:i] + list_[i+1:]\n            break\n        i += 1\n    return list_\n    \ndef remove_one_item(list_, item):\n    '''\n    Given a list, remove the first occurrence of the given item in the list.\n    '''\n    i = 0\n    while i < len(list_):\n        if list_[i] == item:\n            list_ = list_[:i] + list_[i+1:]\n            break\n        i += 1\n    return list_\n    \ndef swap_two_values(list_, item1, item2):\n    '''\n    Given a list, swap the first two items in the list.\n    '''\n    list_[0], list_[-1] = list_[-1], list_[0]\n    return list_\n    \ndef max_item_value(list_):\n    '''\n    Given a list, return the value of the item closest to the largest item in the list.\n    '''\n    return max(list_, key=lambda x: abs(list_[x]))\n    \ndef min_item_value(list_):\n    '''\n    Given a list, return the value of the item closest to the smallest item in the list.\n    '''\n    return min(list_, key=lambda x: abs(list_[x]))\n    \ndef count_occurrences(list_, item):\n    '''\n    Given a list, count the number of occurrences of the item in the list.\n    '''\n    return sum(1 for i in range(len(list_)) if list_[i] == item)\n    \ndef merge_lists(list1, list2):\n    '''\n    Given a list of lists, merge the two lists into a single list.\n    '''\n    return list(list1 + list2)\n    \ndef merge_lists_2(list1, list2):\n    '''\n    Given a list of lists, merge the two lists into a single list.\n    '''\n    return [list1 + list2 for list1 in list2]\n    \ndef merge_lists_3(list1, list2):\n    '''\n    Given a list of lists, merge the two lists into a single list.\n    '''\n    return [list1[i] + list2[i] for i in range(len(list1))]\n    \ndef merge_dicts(dict1, dict2):\n    '''\n    Given two dictionaries, merge the keys and values of the second dictionary into the first.\n    '''\n    for key in dict1:\n        if key in dict2:\n            dict1[key] = dict1[key] + dict2[key]\n        else:\n            dict1[key] = dict1[key]\n    return dict1\n    \ndef remove_list_duplicates(list_):\n    '''\n    Given a list, remove all duplicate elements in the list.\n    '''\n    for i in range(len(list_)):\n        if list_[i] not in list_:\n            lis",
        "num_ids": 30
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    return list1\n",
        "num_ids": 14
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] =='':\n                list1[i][j] = ''\n            if list1[i][j] == '-':\n                list1[i][j] = ''\n            if list1[i][j] == '.':\n                list1[i][j] = ''\n            if list1[i][j] == ',':\n                list1[i][j] = ''\n            if list1[i][j] == ':':\n                list1[i][j] = ''\n    return list1\n",
        "num_ids": 159
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return list(nums_set)\n    # return list(dict.fromkeys(nums))\n    # set_to_remove = set(nums)\n    # return list(set_to_remove - set(nums_set))\n    # return list(set_to_remove)",
        "num_ids": 82
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    removed = []\n    for num in nums:\n        if num not in removed:\n            removed.append(num)\n    return removed\n",
        "num_ids": 37
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Write your code here\n    import collections\n    set_nums = collections.Counter(nums)\n    return [x for x in nums if set_nums[x] == 1]\n",
        "num_ids": 48
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = []\n    for i in nums:\n        if i not in set_nums:\n            set_nums.append(i)\n    return set_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return nums_set\n    \n    ",
        "num_ids": 24
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # make a dictionary of lists\n    my_dict = {}\n    # loop through the given lists\n    for num in nums:\n        # if the list contains the same number\n        # add to a dictionary\n        if num in my_dict:\n            # update the list\n            my_dict[num] += 1\n        else:\n            # add the number to the dictionary\n            my_dict[num] = 1\n    # return the dictionary\n    return my_dict\n",
        "num_ids": 110
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res = []\n    for i in range(len(nums)):\n        curr = nums[i]\n        j = i+1\n        while(j < len(nums)):\n            if nums[j] == curr:\n                nums[i] = nums[j]\n                j += 1\n            else:\n                j += 1\n    return nums",
        "num_ids": 92
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # YOUR CODE HERE\n    nums_dict = {}\n    \n    for num in nums:\n        if num not in nums_dict:\n            nums_dict[num] = 1\n        else:\n            nums_dict[num] += 1\n    \n    return [key for key, value in nums_dict.items() if value == 1]\n",
        "num_ids": 87
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # creating empty list to store unique numbers\n    unique_numbers = []\n    # iterating through each item in nums\n    for item in nums:\n        # if item not in unique_numbers and item not in nums:\n        if item not in unique_numbers:\n            unique_numbers.append(item)\n    # return new list\n    return unique_numbers\n",
        "num_ids": 92
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    counts = dict()\n    for num in nums:\n        if num not in counts:\n            counts[num] = 0\n        counts[num] += 1\n    return [num for num in counts if counts[num] > 1]\n",
        "num_ids": 60
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = []\n    for i in list_data:\n        if i not in lst:\n            lst.append(i)\n    return sum(lst)\n",
        "num_ids": 43
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num = []\n    for num in list_data:\n        if num not in unique_num:\n            unique_num.append(num)\n    return sum(unique_num)\n    \n",
        "num_ids": 49
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=1\n    for i in list_data:\n        product *= i\n    return product\n",
        "num_ids": 26
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product=0\n    for i in list_data:\n        product+=i\n    return product\n",
        "num_ids": 25
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    num_list = []\n    for i in range(0, len(list_data)):\n        num_list.append(list_data[i])\n    print(num_list)\n    return num_list[0]*num_list[1]*num_list[2]*num_list[3]*num_list[4]*num_list[5]*num_list[6]*num_list[7]*num_list[8]*num_list[9]\n",
        "num_ids": 119
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(\"Product of numbers in list :\",list_data)\n    counter = 1\n    for element in list_data:\n        print(\"Number :\",counter)\n        if element > element:\n            print(\"Too large\")\n        else:\n            print(\"Unique number\")\n        counter+=1\n",
        "num_ids": 70
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(0, len(list_data)):\n        product = product * list_data[i]\n    return product\n",
        "num_ids": 39
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for item in list_data:\n        unique_product *= item\n    return unique_product\n",
        "num_ids": 32
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #Using for loop to iterate through the list and find all the unique elements\n    for item in list_data:\n        if item not in list_data:\n            return item\n",
        "num_ids": 43
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_sum = 1\n    for n in list_data:\n        product_sum = product_sum * n\n    return product_sum\n",
        "num_ids": 35
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*(r*(h**2))\n",
        "num_ids": 15
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4/3)*pi*r*h**2\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    a=3.14*h/2\n    return math.pi*r**2*h\n",
        "num_ids": 29
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*np.pi*r*h)/3\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * (r**2) * (h**2)\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 4 * np.pi * r * r\n    print('The surface area of the cylinder is:',area)\n",
        "num_ids": 30
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = (2*r*h) + (4*r**2)\n    return S\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (4*r**2)*h\n",
        "num_ids": 13
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*(r**2)*h)\n",
        "num_ids": 15
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return math.pi * r ** 2 * h\n    \n",
        "num_ids": 20
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    isSubList = True\n    if len(B) == len(A) and len(A) == 1:\n        isSubList = False\n    return isSubList\n",
        "num_ids": 42
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if both lists have same length \n    if len(A)!= len(B): \n        return False \n    # iterate for both lists \n    for i in range(len(A)): \n        # if element in A is less than B \n        if A[i] < B[i]: \n            # then it is not a sublist \n            return False \n    # else it is a sublist \n    return True \n",
        "num_ids": 109
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)==0):\n        return False\n    if(len(B)==0):\n        return True\n    for i in range(len(A)):\n        if(A[i] not in B):\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(B==[]): return False\n    if(len(B)==0): return False\n    if(B[0]==[]): return False\n    for i in range(0,len(B)-1):\n        for j in range(i,len(B)):\n            if(B[i]==B[j]): return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return (len(A)<len(B) and len(A)>0)\n",
        "num_ids": 23
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j = 0, len(A)-1\n    while i < j:\n        if A[i] == B[j]:\n            i+=1\n            j-=1\n        else:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    B_length=len(B)\n    for i in range(B_length):\n        if(A[i]!=B[i]):\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        return False\n    for i in range(len(A)):\n        if A[i]==B[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    C =[]\n    for i in range(0,len(A)):\n        C.append(A[i:i+len(B)])\n    if B in C:\n        return True\n    else:\n        return False\nA=[1,2,3,4]\nB=[2,4,6,8]\nprint(is_Sub_Array(A,B)",
        "num_ids": 91
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    a = len(A)\n    b = len(B)\n    for i in range(a):\n        for j in range(b):\n            if A[i] == B[j]:\n                return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else:\n        return n % 10 * last_Digit_Factorial(n//10)\n",
        "num_ids": 50
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        return None\n    result = 0\n    while n: \n        rem = n % 10 \n        result += rem**(len(str(rem)) - 1)\n        n //= 10\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    digits = [] \n    i = 1 \n    while n > 0: \n        n, i = n // 10, n % 10 \n        digits.append(i) \n    return digits[-1]\n",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    factorial = 1\n    if n < 0:\n        factorial = 0\n    \n    elif n == 0:\n        factorial = 1\n        \n    elif n == 1:\n        factorial = 1\n        \n    else:\n        for i in range(1, n):\n            factorial = factorial * i\n    \n    return factorial\n",
        "num_ids": 88
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if n < 0:\n        print(\"Please enter a positive number\")\n    elif n == 0:\n        print(f\"{n} is the only number in factorial\")\n    elif n == 1:\n        print(f\"{n} is the only number in factorial\")\n    else:\n        for i in range(1, n):\n            factorial *= i\n        print(f\"{n} is the last digit in factorial of {n}\")\n    return factorial\n",
        "num_ids": 123
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    # find n-1 digits\n    for i in range(1, n):\n        factorial = factorial * i\n    # return the last digit\n    return factorial\n    \nif __name__ == \"__main__\":\n    # get input from user\n    input_number = int(input(\"Enter a number: \"))\n    \n    # calculate factorial\n    factorial = last_Digit_Factorial(input_number)\n    \n    # print factorial\n    print(\"Factorial of %d is %d\" %(input_number, factorial)",
        "num_ids": 138
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return n\n    else: \n        return last_Digit_Factorial(n - 1) + 1\n",
        "num_ids": 40
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 0:\n        return 1\n    else:\n        return int(n % 10) * last_Digit_Factorial(n//10)\n",
        "num_ids": 60
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return n * last_Digit_Factorial(n-1)\n",
        "num_ids": 38
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # create a variable to store the last digit\n    last_digit = 0\n",
        "num_ids": 20
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create a new empty list to insert the interleaved lists\n    result = []\n",
        "num_ids": 22
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        result=[]\n        for i in list1:\n            result.append(i)\n        for i in list2:\n            result.append(i)\n        for i in list3:\n            result.append(i)\n        return result\n    return list3\n",
        "num_ids": 90
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    n = len(list1)\n    m = len(list2)\n    l = len(list3)\n    result = []\n    for i in range(n):\n        for j in range(m):\n            for k in range(l):\n                result.append(list1[i][j] + list2[k][j] + list3[k])\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Your code here\n    if len(list1) == len(list2) == len(list3):\n        result = list1 + list2 + list3\n    else:\n        result = list1 + list3 + list2\n",
        "num_ids": 56
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #1st loop\n    for i in range(0,len(list1)):\n        list1[i].extend(list2[i])\n        list2[i].extend(list3[i])\n        \n    #2nd loop\n    for i in range(0,len(list1)):\n        list1[i].extend(list2[i])\n        \n    #3rd loop\n    for i in range(0,len(list1)):\n        list1[i].extend(list3[i])\n        \n    return list1\n    ",
        "num_ids": 137
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    while len(list1)>0 or len(list2)>0 or len(list3)>0:\n        if len(list1)>0:\n            flat_list.append(list1.pop())\n        if len(list2)>0:\n            flat_list.append(list2.pop())\n        if len(list3)>0:\n            flat_list.append(list3.pop())\n    return flat_list\n    \n    \n",
        "num_ids": 118
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_len_1 = len(list1)\n    list_len_2 = len(list2)\n    list_len_3 = len(list3)\n    if list_len_1 < list_len_2:\n        list_len_2 = list_len_1\n    elif list_len_2 < list_len_3:\n        list_len_3 = list_len_2\n    output_list = [0] * (list_len_1 + list_len_2 + list_len_3)\n    for i in range(list_len_1):\n        output_list[i] = list1[i]\n    for i in range(list_len_2):\n        output_list[i + list_len_1] = list2[i]\n    for i in range(list_len_3):\n        output_list[list_len_1 + i] = list3[i]\n    return output_list\n",
        "num_ids": 226
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list3\n",
        "num_ids": 7
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    list1 = list1 + list2\n    list1 = list1 + list3\n    return final_list\n",
        "num_ids": 35
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[0]+list2[0]+list3[0], list1[1]+list2[1]+list3[1], list1[2]+list2[2]+list3[2]]\n    \ndef solve(a, b, c, d, e, f, g, h, i):\n    '''\n    Write a function to solve a matrix in the following manner:\n    Solve the matrix by using a 2D list\n    Solve the matrix by using a 3D list\n    \n    Assume that the list is of the same length as a, b, c, d, e, f, g, h\n    \n    \n    Example:\n    Input:\n    [[1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12]]\n    Output:\n    [[1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12]]\n    \n    '''\n    return interleave_lists([a[i][j] for j in range(len(a)) for i in range(len(a)) if j!= i],\n                            [b[i][j] for j in range(len(b)) for i in range(len(b)) if j!= i],\n                            [c[i][j] for j in range(len(c)) for i in range(len(c)) if j!= i],\n                            [d[i][j] for j in range(len(d)) for i in range(len(d)) if j!= i],\n                            [e[i][j] for j in range(len(e)) for i in range(len(e)) if j!= i],\n                            [f[i][j] for j in range(len(f)) for i in range(len(f)) if j!= i],\n                            [g[i][j] for j in range(len(g)) for i in range(len(g)) if j!= i],\n                            [h[i][j] for j in range(len(h)) for i in range(len(h)) if j!= i],\n                            [])\n",
        "num_ids": 275
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1_index, test_tup1_value = test_tup1\n    test_tup2_index, test_tup2_value = test_tup2\n    if test_tup1_value == test_tup2_value:\n        return None\n    if test_tup1_value == None or test_tup2_value == None:\n        return None\n    if test_tup1_value == '':\n        return None\n    if test_tup2_value == '':\n        return None\n    if test_tup1_value[0] == test_tup2_value[0]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[0]!= test_tup2_value[0]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[1] == test_tup2_value[1]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n    if test_tup1_value[1]!= test_tup2_value[1]:\n        if test_tup1_index < test_tup2_index:\n            return (test_tup1_index, test_tup1_value)\n        else:\n            return (test_tup2_index, test_tup2_value)\n",
        "num_ids": 482
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = test_tup1[:]\n    test_tup2 = test_tup2[:]\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] = test_tup2[i]\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return test_tup1, test_tup2\n",
        "num_ids": 134
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return test_tup1[0] + test_tup2[0] + test_tup2[1] + test_tup1[1]\n",
        "num_ids": 40
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if test_tup1 == test_tup2:\n        return test_tup1\n    else:\n        return None\n",
        "num_ids": 65
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    num_lst1=[]\n    num_lst2=[]\n    for i in range(len(test_tup1)):\n        num_lst1.append(test_tup1[i][0])\n    for i in range(len(test_tup2)):\n        num_lst2.append(test_tup2[i][0])\n    num_lst1=list(set(num_lst1))\n    num_lst2=list(set(num_lst2))\n    num_lst1.sort()\n    num_lst2.sort()\n    num_lst3=num_lst1+num_lst2\n    tup_lst=[]\n    for i in num_lst3:\n        tup_lst.append(test_tup1[test_tup1.index(i)])\n    return tup_lst\n",
        "num_ids": 222
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_list = []\n    for element in test_tup2:\n        if element not in test_tup1:\n            test_list.append(element)\n    return test_list\n",
        "num_ids": 48
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                res.append(test_tup1[i])\n                break\n    return res\n",
        "num_ids": 81
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return lst1, lst2\n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup_a = test_tup1\n    test_tup_b = test_tup2\n    test_tup_a_list = list(test_tup_a)\n    test_tup_b_list = list(test_tup_b)\n    list_len = len(test_tup_a)\n    if len(test_tup_a)!= len(test_tup_b):\n        print(\"find_dissimilar: not equal lists\")\n        return\n    list_set_a = set(test_tup_a)\n    list_set_b = set(test_tup_b)\n    list_dissim_a = list_set_a - list_set_b\n    if len(list_dissim_a)!= 0:\n        print(\"find_dissimilar: not equal lists\")\n        return\n    list_a = []\n    for elem in list_set_a:\n        list_a.append(elem)\n    list_b = []\n    for elem in list_set_b:\n        list_b.append(elem)\n    list_dissim_b = list_b - list_a\n    if len(list_dissim_b)!= 0:\n        print(\"find_dissimilar: not equal lists\")\n        return\n    # two lists has the same len, the elements can be in the same position\n    print(\"find_dissimilar: len:{0}, list_a:{1}, list_b:{2}\".format(len(test_tup_a),list_a, list_b))\n    return list_a, list_b\n",
        "num_ids": 396
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(list(test_tuple), *test_tuple[1:])\n",
        "num_ids": 25
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc(test_tuple[1]) is True:\n        return test_tuple[0] + (test_tuple[1],)\n    else:\n        return test_tuple[0] + test_tuple[1]\n",
        "num_ids": 62
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd = list(map(lambda x: list(x), test_tuple))\n    odd.sort()\n    odd_index = []\n    even_index = []\n    even_index.append(odd[0][0])\n    for i in range(1, len(odd)):\n        if odd[i][0]!= even_fnc(odd[i-1][0], odd[i][0]):\n            even_index.append(odd[i][0])\n    for i in range(0, len(even_index)):\n        if even_fnc(odd[0][0], even_index[i]) == odd_fnc(odd[-1][0], even_index[i]):\n            odd[0][0] = even_fnc(odd[0][0], even_index[i])\n        else:\n            odd[-1][0] = even_fnc(odd[-1][0], even_index[i])\n            odd[0][0] = odd[0][0]\n    even = list(map(lambda x: x[0], odd))\n    odd.clear()\n    even.clear()\n    return odd, even\n",
        "num_ids": 279
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_ele_tuple = test_tuple[0]\n    even_ele_tuple[0] = even_ele_tuple[1]\n    even_ele_tuple[1] = even_fnc(even_ele_tuple[1], test_tuple[1])\n    return even_ele_tuple\n",
        "num_ids": 81
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_list.append(i)\n",
        "num_ids": 38
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #print(test_tuple)\n    even_elts = []\n    for elt in test_tuple:\n        if type(elt) is tuple:\n            even_elts.append(elt)\n        else:\n            even_elts.append(elt)\n    even_elts = tuple(even_elts)\n    #print(even_elts)\n    for elt in even_elts:\n        test_tuple = tuple(filter(lambda x:x not in elt, test_tuple))\n    return test_tuple",
        "num_ids": 133
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple( filter( lambda x: x%2 == even_fnc, test_tuple) )\n",
        "num_ids": 27
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_count = 0\n    test_tuple = tuple(test_tuple)\n    for item in test_tuple:\n        if item % 2 == 0:\n            even_count += 1\n    print(f'The even_count is {even_count}')\n    even_tuple = tuple(test_tuple)\n    even_fnc(even_tuple, even_count)\n",
        "num_ids": 96
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if test_tuple[0] < test_tuple[1]:\n        return odd_ele(test_tuple[0], even_fnc) + (test_tuple[0], even_fnc)\n    elif test_tuple[1] < test_tuple[0]:\n        return odd_ele(even_fnc, test_tuple[1]) + (test_tuple[1], even_fnc)\n    else:\n        return test_tuple[0], even_fnc\n",
        "num_ids": 123
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc == False: return tuple(i for i in test_tuple if i % 2 == 0)\n    else: return tuple(i for i in test_tuple if i % 2!= 0)\n",
        "num_ids": 53
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    b=int(b)\n    s=int(s)\n",
        "num_ids": 20
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*(s/4)+b*(s/4)*(s/4-1)+b*(s/4)*(s/4-1)*(s/4-1)\n",
        "num_ids": 47
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b + (s-b)//2\n    return a*a + s*s\n",
        "num_ids": 25
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    from math import sqrt\n    a = sqrt((b * (b + s)) / 2)\n    area = (a * s)\n    return area\n",
        "num_ids": 39
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #import \n    \n    #Your code here\n    import math\n    #a,b = 2, 3\n    #s = 3\n    #print(surface_Area(b,s))\n    \n    #HINT\n    #You may not use math.sqrt()\n",
        "num_ids": 67
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # return the area of the base edge\n    return (4 * ((b**2)+(s**2)))**0.5\n",
        "num_ids": 32
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b \n    h = s \n    while(a>0): \n        if(a%h==0): \n            return a*h\n        a = a/h \n    return 0\n ",
        "num_ids": 53
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)*(b*s) \n",
        "num_ids": 16
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    \n    return 0.25*b*s",
        "num_ids": 15
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        if type(dict1[i]) is dict:\n            my_dict(dict1[i])\n        else:\n            pass\n",
        "num_ids": 41
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == []:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "num_ids": 9
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    try:\n        if len(dict1) == 0:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        if dict1[i] == None:\n            return (i)\n",
        "num_ids": 27
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    total = 1\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        for i in range(num - 1):\n            total *= i + 1\n        return total\n",
        "num_ids": 57
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num==0 or num==1:\n        return 1\n    \n    elif num==2:\n        return 4\n    \n    else:\n        curr=2*catalan_number(num-1)\n        prev=catalan_number(num-1)\n        curr+=prev\n        return curr\n",
        "num_ids": 79
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 6\n    elif num == 4:\n        return 24\n    elif num == 5:\n        return 120\n    elif num == 6:\n        return 720\n    elif num == 7:\n        return 1536\n    elif num == 8:\n        return 2560\n    elif num == 9:\n        return 86400\n    elif num == 10:\n        return 1073741824\n    elif num == 11:\n        return 2097152\n    elif num == 12:\n        return 4194304\n    elif num == 13:\n        return 8388608\n    elif num == 14:\n        return 16777216\n    elif num == 15:\n        return 33554432\n    elif num == 16:\n        return 67108864\n    elif num == 17:\n        return 134217728\n    elif num == 18:\n        return 268435456\n    elif num == 19:\n        return 536870912\n    elif num == 20:\n        return 1073741824\n    elif num == 21:\n        return 2097152\n    elif num == 22:\n        return 4194304\n    elif num == 23:\n        return 8388608\n    elif num == 24:\n        return 16777216\n    elif num == 25:\n        return 33554432\n    elif num == 26:\n        return 67108864\n    elif num == 27:\n        return 134217728\n    elif num == 28:\n        return 268435456\n    elif num == 29:\n        return 536870912\n    elif num == 30:\n        return 1073741824\n    elif num == 31:\n        return 2097152\n    elif num == 32:\n        return 4194304\n    elif num == 33:\n        return 8388608\n    elif num == 34:\n        return 16777216\n    elif num == 35:\n        return 33554432\n    elif num == 36:\n        return 67108864\n    elif num == 37:\n        return 134217728\n    elif num == 38:\n        return 268435456\n    elif num == 39:\n        return 536870912\n    elif num == 40:\n        return 1073741824\n    elif num == 41:\n        return 2097152\n    elif num == 42:\n        return 4194304\n    elif num == 43:\n        return 8388608\n    elif num == 44:\n        return 16777216\n    elif num == 45:\n        return 33554432\n    elif num == 46:\n        return 67108864\n    elif num == 47:\n        return 134217728\n    elif num == 48:\n        return 268435456\n    elif num == 49:\n        return 536870912\n    elif num == 50:\n        return 1073741824\n    elif num == 51:\n        return 2097152\n    elif num == 52:\n        return 4194304\n    elif num == 53:\n        return 8388608\n    elif num == 54:\n        return 16777216\n    elif num == 55:\n        return 33554432\n    elif num == 56:\n        return 67108864\n    elif num == 57:\n        return 134217728\n    elif num == 58:\n        return 268435456\n    elif num == 59:\n        return 536870912\n    elif num == 60:\n        return 1073741824\n    elif num == 61:\n        return 2097152\n    elif num == 62:\n        return 4194304\n    elif num == 63:\n        return 8388608\n    elif num == 64:\n        return 16777216\n    elif num == 65:\n        return 33554432\n    elif num == 66:\n        return 67108864\n    elif num == 67:\n        return 134217728\n    elif num == 68:\n        return 268435456\n    elif num == 69:\n        return 536870912\n    elif num == 70:\n        return 1073741824\n    elif num == 71:\n        return 2097152\n    elif num == 72:\n        return 4194304\n    elif num == 73:\n        return 8388608\n    elif num == 74:\n        return 16777216\n    elif num == 75:\n        return 33554432\n    elif num == 76:\n        return 67108864\n    elif num == 77:\n        return 134217728\n    elif num == 78:\n        return 268435456\n    elif num == 79:\n        return 536870912\n    elif num == 80:\n        return 1073741824\n    elif num == 81:\n        return 2097152\n    elif num == 82:\n        return 4194304\n    elif num == 83:\n        return 8388608\n    elif num == 84:\n        return 16777216\n    elif num == 85:\n        return 33554432\n    elif num == 86:\n        return 67108864\n    elif num == 87:\n        return 134217728\n    elif num == 88:\n        return 268435456\n    elif num == 89:\n        return 536870912\n    elif num == 90:\n        return 1073741824\n    elif num == 91:\n        return 2097152\n    elif num == 92:\n        return 4194304\n    elif num == 93:\n        return 8388608\n    elif num == 94:\n        return 16777216\n    elif num == 95:\n        return 33554432\n    elif num == 96:\n        return 67108864\n    elif num == 97:\n        return 134217728\n    elif num == 98:\n        return 268435456\n    elif num == 99:\n        return 536870912\n    elif num == 100:\n        return 1073741824\n    elif num == 101:\n        return 2097152\n    elif num == 102:\n        return 4194304\n    elif num == 103:\n        return 8388608\n    elif num == 104:\n        return 16777216\n    elif num == 105:\n        return 33554432\n    elif num == 106:\n        return 67108864\n    elif num == 107:\n        return 134217728\n    elif num == 108:\n        return 268435456\n    elif num == 109:\n        return 536870912\n    elif num == 110:\n        return 1073741824\n    elif num == 111:\n        return 2097152\n    elif num == 112:\n        return 4194304\n    elif num == 113:\n        return 8388608\n    elif num == 114:\n        return 16777216\n    elif num == 115:\n        return 33554432\n    elif num == 116:\n        return 67108864\n    elif num == 117:\n        return 134217728\n    elif num == 118:\n        return 268435456\n    elif num == 119:\n        return 536870912\n    elif num == 120:\n        return 1073741824\n    elif num == 121:\n        return 2097152\n    elif num == 122:\n        return 4194304\n    elif num == 123:\n        return 8388608\n    elif num == 124:\n        return 16777216\n    elif num == 125:\n        return 33554432\n    elif num == 126:\n        return 67108864\n    elif num == 127:\n        return 134217728\n    elif num == 128:\n        return 268435456\n    elif num == 129:\n        return 536870912\n    elif num == 130:\n        return 1073741824\n    elif num == 131:\n        return 2097152\n    elif num == 132:\n        return 4194304\n    elif num == 133:\n        return 8388608\n    elif num == 134:\n        return 16777216\n    elif num == 135:\n        return 33554432\n    elif num == 136:\n        return 67108864\n    elif num == 137:\n        return 134217728\n    elif num == 138:\n        return 268435456\n    elif num == 139:\n        return ",
        "num_ids": 2020
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # note: Python will use built-in math.factorial() function.\n    # calculate the factorial of num using math.factorial() function.\n    factorial_num = 1\n    for i in range(num+1):\n        factorial_num *= i\n    return factorial_num\n",
        "num_ids": 72
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(n):\n        '''\n        Write a function which calculates the factorial of n.\n        '''\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return factorial(n - 1) * n\n    \n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return factorial(num - 1) * catalan_number(num - 1)\n",
        "num_ids": 90
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 5\n    if num == 5:\n        return 25\n    if num == 6:\n        return 43\n    if num == 7:\n        return 216\n    if num == 8:\n        return 486\n    if num == 9:\n        return 547\n    if num == 10:\n        return 627\n    if num == 11:\n        return 937\n    if num == 12:\n        return 841\n    if num == 13:\n        return 725\n    if num == 14:\n        return 931\n    if num == 15:\n        return 961\n    if num == 16:\n        return 1323\n    if num == 17:\n        return 1431\n    if num == 18:\n        return 1541\n    if num == 19:\n        return 1713\n    if num == 20:\n        return 1831\n    if num == 21:\n        return 2041\n    if num == 22:\n        return 2137\n    if num == 23:\n        return 2131\n    if num == 24:\n        return 2217\n    if num == 25:\n        return 2331\n    if num == 26:\n        return 2333\n    if num == 27:\n        return 2337\n    if num == 28:\n        return 2397\n    if num == 29:\n        return 2411\n    if num == 30:\n        return 2431\n    if num == 31:\n        return 2441\n    if num == 32:\n        return 2539\n    if num == 33:\n        return 2561\n    if num == 34:\n        return 2623\n    if num == 35:\n        return 2639\n    if num == 36:\n        return 2651\n    if num == 37:\n        return 2723\n    if num == 38:\n        return 2741\n    if num == 39:\n        return 2761\n    if num == 40:\n        return 2823\n    if num == 41:\n        return 2841\n    if num == 42:\n        return 2861\n    if num == 43:\n        return 2923\n    if num == 44:\n        return 2941\n    if num == 45:\n        return 2961\n    if num == 46:\n        return 3023\n    if num == 47:\n        return 3041\n    if num == 48:\n        return 3061\n    if num == 49:\n        return 3231\n    if num == 50:\n        return 3241\n    if num == 51:\n        return 3323\n    if num == 52:\n        return 3331\n    if num == 53:\n        return 3423\n    if num == 54:\n        return 3441\n    if num == 55:\n        return 3523\n    if num == 56:\n        return 3551\n    if num == 57:\n        return 3623\n    if num == 58:\n        return 3651\n    if num == 59:\n        return 3723\n    if num == 60:\n        return 3741\n    if num == 61:\n        return 3803\n    if num == 62:\n        return 3851\n    if num == 63:\n        return 3923\n    if num == 64:\n        return 3941\n    if num == 65:\n        return 4023\n    if num == 66:\n        return 4041\n    if num == 67:\n        return 4161\n    if num == 68:\n        return 4219\n    if num == 69:\n        return 4323\n    if num == 70:\n        return 4331\n    if num == 71:\n        return 4661\n    if num == 72:\n        return 4823\n    if num == 73:\n        return 4841\n    if num == 74:\n        return 4923\n    if num == 75:\n        return 5041\n    if num == 76:\n        return 5161\n    if num == 77:\n        return 5221\n    if num == 78:\n        return 5341\n    if num == 79:\n        return 5423\n    if num == 80:\n        return 5541\n    if num == 81:\n        return 5661\n    if num == 82:\n        return 5631\n    if num == 83:\n        return 5721\n    if num == 84:\n        return 5741\n    if num == 85:\n        return 5823\n    if num == 86:\n        return 5841\n    if num == 87:\n        return 5923\n    if num == 88:\n        return 5941\n    if num == 89:\n        return 6023\n    if num == 90:\n        return 6041\n    if num == 91:\n        return 6161\n    if num == 92:\n        return 6221\n    if num == 93:\n        return 6341\n    if num == 94:\n        return 6421\n    if num == 95:\n        return 6441\n    if num == 96:\n        return 6523\n    if num == 97:\n        return 6541\n    if num == 98:\n        return 6621\n    if num == 99:\n        return 6641\n    if num == 100:\n        return 6721\n    if num == 101:\n        return 6741\n    if num == 102:\n        return 6821\n    if num == 103:\n        return 6841\n    if num == 104:\n        return 6921\n    if num == 105:\n        return 6941\n    if num == 106:\n        return 7021\n    if num == 107:\n        return 7041\n    if num == 108:\n        return 7231\n    if num == 109:\n        return 7341\n    if num == 110:\n        return 7421\n    if num == 111:\n        return 7441\n    if num == 112:\n        return 7661\n    if num == 113:\n        return 7671\n    if num == 114:\n        return 7681\n    if num == 115:\n        return 7691\n    if num == 116:\n        return 7693\n    if num == 117:\n        return 7707\n    if num == 118:\n        return 7711\n    if num == 119:\n        return 7751\n    if num == 120:\n        return 7761\n    if num == 121:\n        return 7777\n    if num == 122:\n        return 7811\n    if num == 123:\n        return 7841\n    if num == 124:\n        return 7921\n    if num == 125:\n        return 7941\n    if num == 126:\n        return 8001\n    if num == 127:\n        return 8011\n    if num == 128:\n        return 8041\n    if num == 129:\n        return 8061\n    if num == 130:\n        return 8071\n    if num == 131:\n        return 8081\n    if num == 132:\n        return 8101\n    if num == 133:\n        return 8111\n    if num == 134:\n        return 8101\n    if num == 135:\n        return 8111\n    if num == 136:\n        return 8141\n    if num == 137:\n        return 8141\n    if num == 138:\n        return 8141\n    if num == 139:\n        return 8141\n    if num == 140:\n        return 8141\n    if num == 141:\n        return 8141\n    if num == 142:\n        return 8141\n    if num == 143:\n        return 8141\n    if num == 144:\n        return 8141\n    if num == 145:\n        return 8141\n    if num == 146:\n        return 8141\n    if num == 147:\n        return 8141\n    if num == 148:\n        return 8141\n    if num == 149:\n        return 8141\n    if num == 150:\n        return 8141\n    if num == 151:\n        return 8141\n    if num == 152:\n        return 8141\n    if num == 153:\n        return 8141\n    if num == 154:\n        return 8141\n    if num == 155:\n        return 8141\n    if num == 156:\n        return 8141\n    if num == 157:\n        return 8141\n    if num == 158:\n        return 8141\n    if num == 159:\n        return 8141\n    if num == 160:\n        return 8141\n    if num == 161:\n        return 8141\n    if num == 162:\n        return 8141\n    if num == 163:\n        return 8141\n    if num == 164:\n        return 8141\n    if num == 165:\n        return 8141\n    if num == 166:\n        return 8141\n    if num == 167:\n        return 8141\n    if num =",
        "num_ids": 2019
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan(num)\n",
        "num_ids": 10
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    a = 1\n    # get nth catalan number\n    if num == 1:\n        return 1\n    # if number is greater than 1\n    if num > 1:\n        # get nth catalan number\n        for i in range(1, num+1):\n            # calculate nth catalan number\n            a = a * i\n            # return nth catalan number\n            return a\n    # if number is equal to 1\n    else:\n        # return 1\n        return 1\n",
        "num_ids": 116
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # find nth catalan number\n    n = len(str(num))\n    \n    # iterate\n    for i in range(1, n+1):\n        catalan_number = catalan_number + int(str(num) + str(i))\n    return catalan_number\n",
        "num_ids": 71
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2019
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall('((ly|y)+)|((lx|x)+)|((ly|y)+))', text)\n",
        "num_ids": 32
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    a = [i for i, s in enumerate(text) if s.endswith(\"ly\") and s[-2:] == \"ly\"]\n    if len(a) > 0:\n        return a[0]\n    else:\n        return 0\n",
        "num_ids": 62
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    global adverbs\n    if adverbs == []:\n        adverbs = []\n        \n        for i in range(len(text) - 1):\n            if (text[i] == 'ly' and text[i + 1] == 'y'):\n                adverbs.append(i + 1)\n                adverbs.append(i + 2)\n                adverbs.append(i + 3)\n    return adverbs\n",
        "num_ids": 99
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    numbers = ['0123456789', '0123456789', '0123456789']\n    adverbs = []\n    for i in range(len(text)-2):\n        if text[i:i+2] in numbers:\n            adverbs.append(text[i:i+2])\n    return adverbs\ndef find_adjective(text):\n    '''\n    Write a function to find the first adjective ending with ly and its positions in a given string.\n    '''\n    adjective = []\n    adverbs = find_adverbs(text)\n    for i in adverbs:\n        if 'ly' in i:\n            adjective.append(text[:i.find('ly')])\n    return adjective\n",
        "num_ids": 60
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    text = text.lower()\n    pattern = r'(ly(ed|er)\\s+|ly\\s+|ly|er)'\n    r = re.findall(pattern, text)\n    if len(r) == 0:\n        return adverbs\n    else:\n        for word in r:\n            if word[-1] == 'er':\n                adverbs.append(word)\n                adverbs.append(word[:-1])\n            else:\n                adverbs.append(word)\n                adverbs.append(word[:-2])\n        return adverbs\n",
        "num_ids": 143
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['a.', 'a.e.', 'a.r.', 'a.s.', 'a.c.', 'a.b.', 'a.p.', 'a.f.', 'a.i.', 'a.o.', 'a.d.', 'a.y.', 'a.m.', 'a.s.r.', 'a.r.', 'a.p.r.', 'a.p.', 'a.f.r.', 'a.i.r.', 'a.o.r.', 'a.d.r.', 'a.y.r.', 'a.m.r.', 'a.s.r.r.', 'a.r.r.', 'a.p.r.r.', 'a.f.r.r.', 'a.i.r.r.', 'a.o.r.r.', 'a.d.r.r.', 'a.y.r.r.', 'a.m.r.r.r.', 'a.s.r.r.r.', 'a.r.r.r.', 'a.p.r.r.r.', 'a.f.r.r.r.', 'a.i.r.r.r.', 'a.o.r.r.r.', 'a.d.r.r.r.', 'a.y.r.r.r.', 'a.m.r.r.r.r.', 'a.s.r.r.r.r.', 'a.r.r.r.r.', 'a.p.r.r.r.r.', 'a.f.r.r.r.r.', 'a.i.r.r.r.r.', 'a.o.r.r.r.r.', 'a.d.r.r.r.r.', 'a.y.r.r.r.r.', 'a.m.r.r.r.r.r.', 'a.s.r.r.r.r.r.', 'a.r.r.r.r.r.', 'a.p.r.r.r.r.r.', 'a.f.r.r.r.r.r.', 'a.i.r.r.r.r.r.', 'a.o.r.r.r.r.r.', 'a.d.r.r.r.r.r.', 'a.y.r.r.r.r.r.', 'a.m.r.r.r.r.r.r.', 'a.s.r.r.r.r.r.r.', 'a.r.r.r.r.r.r.', 'a.p.r.r.r.r.r.r.', 'a.f.r.r.r.r.r.r.', 'a.i.r.r.r.r.r.r.', 'a.o.r.r.r.r.r.r.', 'a.d.r.r.r.r.r.r.', 'a.y.r.r.r.r.r.r.', 'a.m.r.r.r.r.r.r.r.', 'a.s.r.r.r.r.r.r.r.', 'a.r.r.r.r.r.r.r.', 'a.p.r.r.r.r.r.r.r.', 'a.f.r.r.r.r.r.r.r.', 'a.i.r.r.r.r.r.r.r.', 'a.o.r.r.r.r.r.r.r.', 'a.d.r.r.r.r.r.r.r.r.', 'a.y.r.r.r.r.r.r.r.r.', 'a.m.r.r.r.r.r.r.r.r.', 'a.s.r.r.r.r.r.r.r.r.', 'a.r.r.r.r.r.r.r.r.r.', 'a.p.r.r.r.r.r.r.r.r.', 'a.f.r.r.r.r.r.r.r.r.', 'a.i.r.r.r.r.r.r.r.r.', 'a.o.r.r.r.r.r.r.r.r.', 'a.d.r.r.r.r.r.r.r.r.r.', 'a.y.r.r.r.r.r.r.r.r.r.', 'a.m.r.r.r.r.r.r.r.r.r.', 'a.s.r.r.r.r.r.r.r.r.r.', 'a.r.r.r.r.r.r.r.r.r.r.', 'a.p.r.r.r.r.r.r.r.r.r.', 'a.f.r.r.r.r.r.r.r.r.r.', 'a.i.r.r.r.r.r.r.r.r.r.', 'a.o.r.r.r.r.r.r.r.r.r.', 'a.d.r.r.r.r.r.r.r.r.r.r.', 'a.y.r.r.r.r.r.r.r.r.r.r.', 'a.m.r.r.r.r.r.r.r.r.r.r.', 'a.s.r.r.r.r.r.r.r.r.r.r.', 'a.r.r.r.r.r.r.r.r.r.r.', 'a.p.r.r.r.r.r.r.r.r.r.r.', 'a.f.r.r.r.r.r.r.r.r.r.', 'a.i.r.r.r.r.r.r.r.r.r.r.', 'a.o.r.r.r.r.r.r.r.r.r.r.', 'a.d.r.r.r.r.r.r.r.r.r.r.', 'a.y.r.r.r.r.r.r.r.r.r.r.', 'a.m.r.r.r.r.r.r.r.r.r.r.', 'a.s.r.r.r.r.r.r.r.r.r.r.', 'a.r.r.r.r.r.r.r.r.r.r.r.', 'a.p.r.r.r.r.r.r.r.r.r.r.', 'a.f.r.r.r.r.r.r.r.r.r.', 'a.i.r.r.r.r.r.r.r.r.r.r.', 'a.o.r.r.r.r.r.r.r.r.r.r.', 'a.d.r.r.r.r.r.r.r.r.r.r.', 'a.y.r.r.r.r.r.r.r.r.r.r.', 'a.m.r.r.r.r.r.r.r.r.r.r.', 'a.s.r.r.r.r.r.r.r.r.r.r.', 'a.r.r.r.r.r.r.r.r.r.r.', 'a.p.r.r.r.r.r.r.r.r.r.r.', 'a.f.r.r.r.r.r.r.r.r.', 'a.i.r.r.r.r.r.r.r.r.r.', 'a.o.r.r.r.r.r.r.r.r.r.r.'",
        "num_ids": 2007
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all adverbs\n    adverbs = []\n    # list of all words\n    lst_word = []\n    # join all words\n    for word in text.split():\n        if word[-1] in [\"ly\", \"la\"]:\n            lst_word.append(word)\n        else:\n            adverbs.append(word)\n    # list of all words\n    lst_adverbs = []\n    # loop through the list\n    for word in adverbs:\n        # loop through all adverbs\n        for adverb in adverbs:\n            # check if adverb is ending with ly\n            if word.endswith(adverb) and word[:len(adverb)] in lst_word:\n                # add to list\n                lst_adverbs.append(word)\n    # return the first adverb\n    return lst_adverbs[0][:lst_adverbs[0].find('ly')]\n",
        "num_ids": 222
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'\\b(?<=ly)\\b(?=ly)')\n    matched = regex.findall(text)\n    return matched\n",
        "num_ids": 44
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    r = re.compile(r\"([^a-zA-Z]?ly|ly|_ly|lazy|ly|lazy|ly|lazy|lazyly|ly|lyl|lyl|lylle|lylle|ly_lyl|ly_lyl|ly_lylle|ly_lylle|ly_lylle|lyl|lylle|ly_lyle|ly_lylle|ly_lylle|lyl|lyle|lyle|lyly|lylle|lylle|lylle|ly_lylle|ly_lylle|ly_lylle|lyl|ly_lylle|ly_lylle|lylle)\")\n    results = re.findall(r,text)\n    return results\n",
        "num_ids": 194
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    regex = re.compile('ly')\n    pos = regex.findall(text)\n    adverbs = []\n    for i in pos:\n        if i[1]!= '.':\n            adverbs.append(i[1])\n    return adverbs\n",
        "num_ids": 72
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    for i in range(n):\n        items_heap.append((items[i][1],items[i][0]))\n    items_heap = sorted(items_heap,reverse = True)\n    heapq.heapify(items_heap)\n    print(items_heap)\n    return items_heap[:n]\n    \ndef expensive_items_2(items,n):\n    '''\n    This function is to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    for i in range(n):\n        items_heap.append((items[i][1],items[i][0]))\n    items_heap = sorted(items_heap,reverse = True)\n    heapq.heapify(items_heap)\n    print(items_heap)\n    return items_heap[:n]\n",
        "num_ids": 94
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a dictionary containing the counts of each type of item\n    d = dict()\n    # create a dictionary to store the counts of each type of item\n    c = dict()\n    for x in items:\n        if x[0] not in d:\n            d[x[0]] = x[1]\n        else:\n            d[x[0]] += x[1]\n            c[x[0]] = c[x[0]] + x[1]\n    # sort the counts of each item in the dataset\n    heapq.heapify(c)\n    for i in range(n):\n        print(heapq.nlargest(1,c)[0],end=\" \")\n",
        "num_ids": 165
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    res = [0] * n\n    while items:\n        item = heapq.heappop(items)\n        res[item] = item\n        for i in items:\n            if res[i] == 0:\n                res[i] = item\n                heapq.heappush(items,i)\n    return res\n    \n    \n    \ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    res = [0] * n\n    for item in items:\n        if res[item] == 0:\n            res[item] = item\n            heapq.heappush(items,item)\n    return res\n    \n    \n",
        "num_ids": 70
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # result = []\n    # result_2 = []\n    # for item in items:\n    #     if item[1] > result[0][1]:\n    #         result.clear()\n    #         result.append(item)\n    #         result.append(item[1])\n    #         result.append(item[0])\n    #         result_2.clear()\n    #         result_2.append(item)\n    #         result_2.append(item[1])\n    #         result_2.append(item[0])\n",
        "num_ids": 132
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    for item in items:\n        if item[1]>n:\n            n=item[1]\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,(i[1],i[0]))\n    heapq.sort(heap)\n    return heapq.nlargest(n,heap)\n",
        "num_ids": 63
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    print(\"The n most expensive items are:\")\n    print(items)\n    print(\"\\n\")\n    q = []\n    heapq.heapify(q)\n    for item in items:\n        heapq.heappush(q,item)\n        \n        if len(q) > n:\n            heapq.heappop(q)\n            heapq.heappush(q,item)\n    print(\"The n most expensive items are:\")\n    print(q)\n    print(\"\\n\")\n",
        "num_ids": 128
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # your code here\n    h = []\n    for i in items:\n        heapq.heappush(h,i[1])\n    for i in range(n):\n        if len(h) < n:\n            heapq.heappush(h,0)\n        else:\n            heapq.heappop(h)\n    # print(h)\n    return h\n",
        "num_ids": 96
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heappush(heap,(0,n,items[0]))\n    for i in range(n-1):\n        price,val,item = heapq.heappop(heap)\n        heapq.heappush(heap,(val,price+1,item))\n    return heapq.nlargest(n,heap)\n",
        "num_ids": 96
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = []\n    for i in range(n):\n        a.append(l[i])\n    return a\n",
        "num_ids": 30
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = \"\"\n    return s.join(l[:n])\n",
        "num_ids": 19
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i + n] for i in range(0, len(l), n)]\n",
        "num_ids": 27
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # find the length of the list\n    l_len = len(l)\n",
        "num_ids": 21
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = ','.join(l[:n])\n    return s\ndef append_Int(l, value):\n    '''\n    Write a python function to add the integer value to the end of a list\n    '''\n    s = ','.join(l)\n    s = s + str(value)\n    return s\ndef reverse(x):\n    '''\n    Write a python function to reverse a string in the ith position of the list.\n    '''\n    l = list(x)\n    l.reverse()\n    return ','.join(l)\ndef get_slice(x, n):\n    '''\n    Write a python function to get a slice of a list at the nth position of the list.\n    '''\n    s = ','.join(x[:n])\n    return s\ndef get_even(x):\n    '''\n    Write a python function to get an even element of a list\n    '''\n    l = list(x)\n    if len(l)%2==0:\n        s = ','.join(l[:len(l)//2])\n        return s\n    else:\n        s = ','.join(l[:len(l)//2+1])\n        return s\ndef my_join(x):\n    '''\n    Write a python function to join a list of strings into a string\n    '''\n    l = list(x)\n    l = ','.join(l)\n    return l\ndef array_to_string(a):\n    '''\n    Write a python function to convert an array of strings into a string\n    '''\n    l = list(a)\n    for i in range(len(l)):\n        l[i] = ','.join(l[i])\n    return ','.join(l)\ndef write_file(x, filename):\n    '''\n    Write a python function to write a list to a file\n    '''\n    f = open(filename, 'w')\n    s = ','.join(x)\n    f.write(s)\n    f.close()\ndef read_file(filename):\n    '''\n    Write a python function to read a file\n    '''\n    f = open(filename, 'r')\n    d = f.readlines()\n    f.close()\n    return d\ndef string_to_array(s):\n    '''\n    Write a python function to convert a string to an array\n    '''\n    l = []\n    for i in s:\n        l.append(i)\n    return l\ndef string_to_int(s):\n    '''\n    Write a python function to convert a string to an integer\n    '''\n    l = list(s)\n    l = [int(i) for i in l]\n    return l\n",
        "num_ids": 28
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    my_list = []\n    for i in range(0, n):\n        my_list.append(l[i])\n    my_list.insert(0, l[0])\n    return my_list\n",
        "num_ids": 52
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = [l[i:i + n] for i in range(0, len(l), n)]\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    \n    return [l[i:i+n] for i in range(0, len(l), n)]\n",
        "num_ids": 31
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_list = []\n    for item in listx:\n        new_list.append(item)\n    return tuple(new_list)\n",
        "num_ids": 36
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for x in listx:\n        tup = tup + (x,)\n    return tup\n",
        "num_ids": 32
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx) == 0:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for i in range(len(listx)):\n        tup = tup + (listx[i])\n    return tup\n",
        "num_ids": 40
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for x in listx:\n        t = t+(x,)\n    return t\n",
        "num_ids": 27
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    list_nums = list(nums)\n    list_nums.sort()\n    nums_len = len(nums)\n    list_nums_diff = []\n    for i in range(nums_len):\n        list_nums_diff.append(list_nums[i] - list_nums[i - 1])\n    return max(list_nums_diff)\n",
        "num_ids": 97
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    smallest = min(nums)\n    largest = max(nums)\n    dif = smallest - largest\n    return dif\n",
        "num_ids": 43
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Your code goes here...\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big_small = sorted(list(set(nums)))[-2]\n    small_diff = []\n    for i in range(len(nums)):\n        if nums[i] == big_small:\n            small_diff.append(i)\n    return len(small_diff)\n",
        "num_ids": 73
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    total_diff = 0\n    for i in range(len(nums)):\n        total_diff = max_value - nums[i]\n        if total_diff > 0:\n            print(\"The difference is \", total_diff)\n        elif total_diff < 0:\n            print(\"The difference is \", total_diff)\n    return\n",
        "num_ids": 105
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in nums:\n        if i > max_val:\n            max_val = i\n        if i < min_val:\n            min_val = i\n    return max_val - min_val\n",
        "num_ids": 74
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    num_max=nums[0]\n    num_min=nums[0]\n    for num in nums:\n        if num_max < num:\n            num_max = num\n        if num_min > num:\n            num_min = num\n    return num_max - num_min\n",
        "num_ids": 74
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # return smallest value if the list is empty\n    if len(nums) == 0:\n        return 0\n    # return largest value if the list is empty\n    if len(nums) == 1:\n        return nums[0]\n    # return value of the first smallest number\n    smallest_num = min(nums)\n    # return value of the last smallest number\n    largest_num = max(nums)\n    # return difference between the first and last smallest numbers\n    diff = largest_num - smallest_num\n    return diff\n",
        "num_ids": 128
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(abs(nums[0] - nums[-1]), abs(nums[1] - nums[-2]))\n",
        "num_ids": 36
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return nums[0] - nums[-1] if len(nums) > 1 else nums[0] - nums[0]\n",
        "num_ids": 37
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    ans = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            ans.append(i)\n    for j in range(1, b+1):\n        if b % j == 0:\n            ans.append(j)\n    return ans\n",
        "num_ids": 71
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    for i in range(2, int(a**(0.5))+1):\n        if a%i == 0 and b%i == 0:\n            print(a*b*i, i)\n            return\n",
        "num_ids": 69
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return int(a**2 + b**2",
        "num_ids": 13
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            c.append(i)\n    return c\n",
        "num_ids": 41
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a % b == 0:\n        return [a, b]\n    else:\n        res = perfect_squares(a, b//2)\n        if a == b:\n            res.append(a)\n        return res + perfect_squares(a//2, b)\n",
        "num_ids": 85
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    s = 0\n    s = a * a + b * b\n    while s % 2 == 0:\n        s //= 2\n    return s\n",
        "num_ids": 53
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    print('\\nPerfect squares for', a, 'and', b, ': ')\n    if a <= b:\n        print(a, 'is', a ** 2)\n        print(b, 'is', b ** 2)\n        return\n    print('It is not perfect.')\n    return\n    \n    # ------------------------------------------------------------\n    # write your solution here\n    # ------------------------------------------------------------\n    pass\n",
        "num_ids": 96
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [a]\n    if a == 0:\n        return []\n    if a < b:\n        x = a\n        a = b\n        b = x\n    sum = a + b\n    for i in range(2, int(sum**.5)+1):\n        if sum % i == 0:\n            return perfect_squares(sum//i, i) + [sum//i]\n        \n    \nprint(perfect_squares(1, 10))",
        "num_ids": 117
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return (a**2 + b**2 == a**2 + b**2)\n    \nprint(perfect_squares(1, 10))\nprint(perfect_squares(2, 10))\nprint(perfect_squares(2, 8))",
        "num_ids": 59
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return False\n    if a == b:\n        return True\n    else:\n        if (a == b) or (a % 2 == 0):\n            return False\n        else:\n            if abs(a) > abs(b):\n                a,b = b,a\n            while a > abs(a):\n                a = a * a\n            while b > abs(b):\n                b = b * b\n            return a < b\n",
        "num_ids": 115
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x<0:\n        x=x*-1\n        y=-y\n    elif x>=1:\n        y=y*-1\n    return x,y\ndef polar_rect_ls(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates and lists them in a list.\n    '''\n    rect_list=[]\n    for i in range(len(x)):\n        x1,y1=polar_rect(x[i],y[i])\n        rect_list.append([x1,y1])\n    return rect_list\ndef cart_to_polar(x,y):\n    '''\n    Write a function that converts cartesian coordinates to polar coordinates.\n    '''\n    x,y=polar_rect(x,y)\n    if (y>=0):\n        y=y*-1\n        x1,x2=x,y\n    else:\n        x1=x\n        x2=y\n    return x1,x2\ndef polar_to_cart(x,y):\n    '''\n    Write a function that converts polar coordinates to cartesian coordinates.\n    '''\n    x1,x2=cart_to_polar(x,y)\n    return (x1,y)\ndef polar_intersect(l1,l2):\n    '''\n    Write a function that checks if two circles overlap.\n    '''\n    x1=l1[0]\n    y1=l1[1]\n    x2=l2[0]\n    y2=l2[1]\n    if x1==x2 and y1==y2:\n        return True\n    else:\n        return False\ndef polar_intersect_ls(l1,l2):\n    '''\n    Write a function that checks if two circles overlap.\n    '''\n    x1=l1[0]\n    y1=l1[1]\n    x2=l2[0]\n    y2=l2[1]\n    if x1==x2 and y1==y2:\n        return l1\n    else:\n        return l2\ndef polar_calc(p1,p2,p3,p4,p5):\n    '''\n    Write a function that calculates the polar coordinates for the intersection of the given two circles.\n    '''\n    x1=p1[0]\n    y1=p1[1]\n    x2=p2[0]\n    y2=p2[1]\n    x3=p3[0]\n    y3=p3[1]\n    x4=p4[0]\n    y4=p4[1]\n    x5=p5[0]\n    y5=p5[1]\n    x1=min(x1,x2,x3,x4,x5)\n    x2=max(x2,x3,x4,x5)\n    x3=max(x1,x2,x4,x5)\n    x4=min(x1,x2,x3,x4,x5)\n    x5=min(x2,x1,x3,x4,x5)\n    x=max(x1,x2,x3,x4,x5)\n    y=max(y1,y2,y3,y4,y5)\n    return (x,y)\ndef polar_intersect_ls_polar(l1,l2):\n    '''\n    Write a function that calculates the polar coordinates for the intersection of the given two circles.\n    '''\n    x1=l1[0]\n    y1=l1[1]\n    x2=l2[0]\n    y2=l2[1]\n    x3=l2[2]\n    y3=l2[3]\n    x4=l2[4]\n    y4=l2[5]\n    x5=l2[6]\n    y5=l2[7]\n    x1=min(x1,x2,x3,x4,x5)\n    x2=max(x2,x3,x4,x5)\n    x3=max(x1,x2,x4,x5)\n    x4=min(x1,x2,x3,x4,x5)\n    x5=min(x2,x1,x3,x4,x5)\n    x=max(x1,x2,x3,x4,x5)\n    y=max(y1,y2,y3,y4,y5)\n    return (x,y)\ndef cart_intersect(l1,l2):\n    '''\n    Write a function that checks if two circles overlap.\n    '''\n    x1=l1[0]\n    y1=l1[1]\n    x2=l2[0]\n    y2=l2[1]\n    x3=l2[2]\n    y3=l2[3]\n    x4=l2[4]\n    y4=l2[5]\n    x5=l2[6]\n    y5=l2[7]\n    x1=min(x1,x2,x3,x4,x5)\n    x2=max(x2,x3,x4,x5)\n    x3=max(x1,x2,x4,x5)\n    x4=min(x1,x2,x3,x4,x5)\n    x5=min(x2,x1,x3,x4,x5)\n    x=max(x1,x2,x3,x4,x5)\n    y=max(y1,y2,y3,y4,y5)\n    return (x,y)\ndef cart_intersect_ls(l1,l2):\n    '''\n    Write a function that checks if two circles overlap.\n    '''\n    x1=l1[0]\n    y1=l1[1]\n    x2=l2[0]\n    y2=l2[1]\n    x3=l2[2]\n    y3=l2[3]\n    x4=l2[4]\n    y4=l2[5]\n    x5=l2[6]\n    y5=l2[7]\n    x1=min(x1,x2,x3,x4,x5)\n    x2=max(x2,x3,x4,x5)\n    x3=max(x1,x2,x4,x5)\n    x4=min(x1,x2,x3,x4,x5)\n    x5=min(x2,x1,x3,x4,x5)\n    x=max(x1,x2,x3,x4,x5)\n    y=max(y1,y2,y3,y4,y5)\n    return (x,y)\ndef cart_intersect_ls_polar(l1,l2):\n    '''\n    Write a function that calculates the polar coordinates for the intersection of the given two circles.\n    '''\n    x1=l1[0]\n    y1=l1[1]\n    x2=l2[0]\n    y2=l2[1]\n    x3=l2[2]\n    y3=l2[3]\n    x4=l2[4]\n    y4=l2[5]\n    x5=l2[6]\n    y5=l2[7]\n    x1=min(x1,x2,x3,x4,x5)\n    x2=max(x2,x3,x4,x5)\n    x3=max(x1,x2,x4,x5)\n    x4=min(x1,x2,x3,x4,x5)\n    x5=min(x2,x1,x3,x4,x5)\n    x=max(x1,x2,x3,x4,x5)\n    y=max(y1,y2,y3,y4,y5)\n    return (x,y)\ndef polar_intersect(l1,l2):\n    '''\n    Write a function that checks if two circle",
        "num_ids": 11
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.phase(y)\n    theta = cmath.phase(x)\n    r = cmath.sqrt(y**2+x**2)\n    print(phi, theta, r)\n    p = cmath.polar(phi,theta)\n    print(p)\n    x, y = polar_to_rect(p[0], p[1], r)\n    print(x,y)\ndef polar_to_rect(phi, theta, r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(cmath.phase(phi))\n    y = r*cmath.sin(cmath.phase(phi))\n    return x, y\ndef trig(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef trig_function(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef polar_to_rect(phi,theta,r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(cmath.phase(phi))\n    y = r*cmath.sin(cmath.phase(phi))\n    return x, y\ndef trig_function(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef pi_pi(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef euler_func(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sinus(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef cosin(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef tan(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sec(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef csc(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef cos_cosec(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sec_cosec(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef tan_cosec(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef csc_cosec(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef cos_taylor(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sec_taylor(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef cos_pi(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef csc_pi(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef taylor_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef euler_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sinus_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef cosinus_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef tan_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sec_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef cos_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sec_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef tan_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef csc_y(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef cos_x(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x**(1/3)\n        return f\n    except:\n        print(\"not a trigonometric function\")\ndef sec_x(x):\n    '''\n    Write a trigonometry function.\n    '''\n    try:\n        f = x*",
        "num_ids": 11
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    # Calculate azimuth and latitude of polar coordinate\n    r = cmath.sqrt(x**2 + y**2)\n    azimuth = cmath.atan2(y,x)\n",
        "num_ids": 51
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    X=x*cmath.pi/180\n    Y=y*cmath.pi/180\n    return (X,Y)\ndef polar_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef rect_cart(X,Y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef int_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef mid_cart(X,Y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart(X,Y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_rect(X,Y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_rect_cart(X,Y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef cart_rect(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef cart_rect_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef rect_rect(X,Y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef rect_rect_cart(X,Y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef mid_rect(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef mid_rect_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_rect(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_rect_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_rect_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart_rect(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart_rect_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart_rect_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef cart_cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef rect_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef rect_cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef mid_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef mid_cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef cart_cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '''\n    x=X*cmath.pi/180\n    y=Y*cmath.pi/180\n    return (x,y)\ndef turn_cart_cart_cart(X,Y):\n    '''\n    Write a function to convert polar coordinates to polar coordinates.\n    '",
        "num_ids": 17
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #Define coefficients of the spherical curve\n    rho_star = 2 * 3.141592653589793\n    sigma_star = 1 / 3\n    omega_star = rho_star * sigma_star\n    \n    #Calculate the normal vector (n)\n    n = (x**2) + (y**2)\n    n_inv = 1/n\n    n_norm = n * n_inv\n    \n    #Calculate the polar coordinate (x,y)\n    x_polar = 2 * cmath.acos(n_norm)\n    y_polar = 2 * cmath.asin(n_norm)\n    x_polar = x_polar * n_inv\n    y_polar = y_polar * n_inv\n    \n    #Convert polar to rectangular coordinates\n    x_rect = x_polar * omega_star * n_inv\n    y_rect = y_polar * omega_star * n_inv\n    \n    #Calculate the distance between the points\n    dist = x_rect + y_rect\n    \n    #Return the distance\n    return dist\n",
        "num_ids": 270
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = sqrt(x**2 + y**2)\n    theta = (cmath.acos(x/r) * 2*pi) + pi\n    phi = (cmath.atan(y/x) * 2*pi) + pi/2\n    return r, theta, phi\n",
        "num_ids": 73
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = cmath.pi*x**2\n    r = math.sqrt(rad)\n    return r,math.atan2(y,x)\ndef polar_rect_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect(x,y)\n    return r,theta\ndef polar_rect_2d_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d(x,y)\n    return r*math.cos(theta),r*math.sin(theta)\ndef polar_rect_3d(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_2(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r,theta = polar_rect_2d_2(x,y)\n    r_z = r*math.cos(theta)\n    theta_z = theta*math.sin(theta)\n    return r_z,theta_z\ndef polar_rect_3d_3(x,y,z):\n    '''\n    Write a function to convert polar coordinate",
        "num_ids": 10
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x, y)\n",
        "num_ids": 14
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    numerator = x**2 + y**2\n    denominator = cmath.sqrt(numerator)\n    return numerator/denominator\n",
        "num_ids": 40
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    n = x**2 + y**2\n    d = cmath.sqrt(n)\n    r = 2*x*y\n    return (r/d)\n    \n    \ndef polar_rect_normal(r,theta,x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(x,y)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_1d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d_1d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d_2d_1d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d_2d_2d_1d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_normal_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    t = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)*(1/t)\n    return c\n    \n    \ndef polar_rect_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_1d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_1d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n    c = cmath.exp(1j*theta)*(1/s)\n    return c\n    \n    \ndef polar_rect_2d_2d_2d_2d_2d_2d_2d(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    s = polar_rect(r,theta)\n",
        "num_ids": 17
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList.append(newList.pop())\n    newList.insert(0, newList.pop())\n    \n    \ndef check_Tests(test_list):\n    \"\"\"\n    Check if the given list contains all the same values.\n    \"\"\"\n    \n    for item in test_list:\n        if item not in test_list:\n            return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1):\n        newList[i], newList[i+1] = newList[i+1], newList[i]\n",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.insert(0, newList.pop())\n    newList.insert(len(newList), newList.pop())\n    return newList\n",
        "num_ids": 38
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the size of the list\n    size = len(newList)\n    # Pick the index of the first element\n    firstIndex = 0\n    # Pick the index of the last element\n    lastIndex = size - 1\n    # Go through the list\n    for index in range(size): \n        # Get the value at the index\n        value = newList[index]\n        # Swap the values\n        newList[index] = value\n        # Determine the index of the swapped value\n        if (index < lastIndex):\n            # Determine the new index of the value\n            newIndex = (lastIndex + 1) - index\n            # Swap the value in the new index\n            newList[newIndex] = value\n        # Determine the index of the last value\n        elif (index > firstIndex):\n            # Determine the new index of the value\n            newIndex = (firstIndex + 1) - index\n            # Swap the value in the new index\n            newList[newIndex] = value\n    return newList\n",
        "num_ids": 238
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # set_first = 0\n    # set_last = 0\n    # while len(newList) > 0: \n    #     if newList[set_first] > newList[set_last]:\n    #         # this means the first element is bigger than the last\n    #         # swap the first element with the last one\n    #         # set_first = set_last \n    #         # set_last = set_first \n    #         newList[set_first], newList[set_last] = newList[set_last], newList[set_first]\n    #     else:\n    #         # the first element is smaller than the last one, set the\n    #         # first element as the last element\n    #         newList[set_first], newList[set_last] = newList[set_last], newList[set_first]\n    #     # now have swapped the elements\n    #     set_first += 1\n    #     set_last += 1\n    # return newList \n    # -------------------------------------------------------------------------\n    # for i in range(len(newList)): \n    #     swap = newList[i] \n    #     temp = newList[i] \n    #     newList[i] = temp \n    #     newList[i] = swap \n    #     return newList \n    \n    '''\n    This method can be generalized to create a second list by swapping the elements in both lists.\n    '''\n    # new_list = []\n    # for i in range(len(newList)): \n    #     if i % 2 == 0:\n    #         new_list.append(newList[i]) \n    #     else:\n    #         new_list.insert(i, newList[i]) \n    # return new_list \n",
        "num_ids": 84
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef merge_List(lst):\n    '''\n    Write a python function to merge the last 2 lists into one list.\n    '''\n    temp = []\n    temp.extend(lst[:2])\n    temp.extend(lst[2:])\n    return temp\n",
        "num_ids": 37
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = newList[0]\n    new_list = newList[1:]\n    new_list = new_list + newList[0]\n    return new_list\n",
        "num_ids": 45
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    for i in range(length - 1):\n        newList[i], newList[i + 1] = newList[i + 1], newList[i]\n    return newList\n",
        "num_ids": 54
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    tempList = newList.copy()\n    tempList[0], tempList[-1] = tempList[-1], tempList[0]\n    return tempList\n",
        "num_ids": 42
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    index = 0\n    length = len(newList)\n    if(length%2!= 0):\n        first_swap = 0\n        second_swap = 1\n    else:\n        first_swap = 1\n        second_swap = 0\n    newList.insert(index, first_swap)\n    newList.append(second_swap)\n    return newList\n",
        "num_ids": 94
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(1,k+1):\n        result += n**i / factorial(i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += binomCoeff(i+1,k)\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if k == 0:\n        return n\n",
        "num_ids": 35
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    sum_coeff = 0\n    \n    for i in range(1,n+1):\n        sum_coeff = sum_coeff + (i**k)*(i**(n-k))\n    \n    return sum_coeff\n",
        "num_ids": 61
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(n+1):\n        result += i*(binomial_Coeff(n-i,k-1))\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0 \n    for i in range(n):\n        if (k == 1):\n            result += (i+1)*(n-1)\n        elif (k > 1):\n            result += (i+1)*(n-i-1)\n        k -= 1\n    return result",
        "num_ids": 72
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #Your code here\n    #Take the values of n,k and sum them\n    #Return the product of the binomial coefficients\n    return(n*(k**n))\n    \ndef sum_of_binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #Your code here\n    #Take the values of n,k and sum them\n    #Return the product of the binomial coefficients\n    return(binomial_Coeff(n,k)*binomial_Coeff(n-1,k))\n",
        "num_ids": 60
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n,k-1) * binomial_Coeff(n-1,k)\n",
        "num_ids": 59
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    if k==1:\n        return n\n    return binomial_Coeff(n,k-1) * binomial_Coeff(n-1,k-1)\n",
        "num_ids": 56
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # check if the input is in range\n    if n < 0:\n        print(\"Sorry that's not a valid input!\")\n        return 0\n    if n < 2:\n        return 1\n    if n < 3:\n        return n\n    if n < 4:\n        return n**2\n    if n < 5:\n        return n**3\n    if n < 6:\n        return n**4\n    if n < 7:\n        return n**5\n    if n < 8:\n        return n**6\n    if n < 9:\n        return n**7\n    if n < 10:\n        return n**8\n    if n < 11:\n        return n**9\n    if n < 12:\n        return n**10\n    if n < 13:\n        return n**11\n    if n < 14:\n        return n**12\n    if n < 15:\n        return n**13\n    if n < 16:\n        return n**14\n    if n < 17:\n        return n**15\n    if n < 18:\n        return n**16\n    if n < 19:\n        return n**17\n    if n < 20:\n        return n**18\n    if n < 21:\n        return n**19\n    if n < 22:\n        return n**20\n    if n < 23:\n        return n**21\n    if n < 24:\n        return n**22\n    if n < 25:\n        return n**23\n    if n < 26:\n        return n**24\n    if n < 27:\n        return n**25\n    if n < 28:\n        return n**26\n    if n < 29:\n        return n**27\n    if n < 30:\n        return n**28\n    if n < 31:\n        return n**29\n    if n < 32:\n        return n**30\n    if n < 33:\n        return n**31\n    if n < 34:\n        return n**32\n    if n < 35:\n        return n**33\n    if n < 36:\n        return n**34\n    if n < 37:\n        return n**35\n    if n < 38:\n        return n**36\n    if n < 39:\n        return n**37\n    if n < 40:\n        return n**38\n    if n < 41:\n        return n**39\n    if n < 42:\n        return n**40\n    if n < 43:\n        return n**41\n    if n < 44:\n        return n**42\n    if n < 45:\n        return n**43\n    if n < 46:\n        return n**44\n    if n < 47:\n        return n**45\n    if n < 48:\n        return n**46\n    if n < 49:\n        return n**47\n    if n < 50:\n        return n**48\n    if n < 51:\n        return n**49\n    if n < 52:\n        return n**50\n    if n < 53:\n        return n**51\n    if n < 54:\n        return n**52\n    if n < 55:\n        return n**53\n    if n < 56:\n        return n**54\n    if n < 57:\n        return n**55\n    if n < 58:\n        return n**56\n    if n < 59:\n        return n**57\n    if n < 60:\n        return n**58\n    if n < 61:\n        return n**59\n    if n < 62:\n        return n**60\n    if n < 63:\n        return n**61\n    if n < 64:\n        return n**62\n    if n < 65:\n        return n**63\n    if n < 66:\n        return n**64\n    if n < 67:\n        return n**65\n    if n < 68:\n        return n**66\n    if n < 69:\n        return n**67\n    if n < 70:\n        return n**68\n    if n < 71:\n        return n**69\n    if n < 72:\n        return n**70\n    if n < 73:\n        return n**71\n    if n < 74:\n        return n**72\n    if n < 75:\n        return n**73\n    if n < 76:\n        return n**74\n    if n < 77:\n        return n**75\n    if n < 78:\n        return n**76\n    if n < 79:\n        return n**77\n    if n < 80:\n        return n**78\n    if n < 81:\n        return n**79\n    if n < 82:\n        return n**80\n    if n < 83:\n        return n**81\n    if n < 84:\n        return n**82\n    if n < 85:\n        return n**83\n    if n < 86:\n        return n**84\n    if n < 87:\n        return n**85\n    if n < 88:\n        return n**86\n    if n < 89:\n        return n**87\n    if n < 90:\n        return n**88\n    if n < 91:\n        return n**89\n    if n < 92:\n        return n**90\n    if n < 93:\n        return n**91\n    if n < 94:\n        return n**92\n    if n < 95:\n        return n**93\n    if n < 96:\n        return n**94\n    if n < 97:\n        return n**95\n    if n < 98:\n        return n**96\n    if n < 99:\n        return n**97\n    if n < 100:\n        return n**98\n    if n < 101:\n        return n**99\n    if n < 102:\n        return n**100\n    if n < 103:\n        return n**101\n    if n < 104:\n        return n**102\n    if n < 105:\n        return n**103\n    if n < 106:\n        return n**104\n    if n < 107:\n        return n**105\n    if n < 108:\n        return n**106\n    if n < 109:\n        return n**107\n    if n < 110:\n        return n**108\n    if n < 111:\n        return n**109\n    if n < 112:\n        return n**110\n    if n < 113:\n        return n**111\n    if n < 114:\n        return n**112\n    if n < 115:\n        return n**113\n    if n < 116:\n        return n**114\n    if n < 117:\n        return n**115\n    if n < 118:\n        return n**116\n    if n < 119:\n        return n**117\n    if n < 120:\n        return n**118\n    if n < 121:\n        return n**119\n    if n < 122:\n        return n**120\n    if n < 123:\n        return n**121\n    if n < 124:\n        return n**122\n    if n < 125:\n        return n**123\n    if n < 126:\n        return n**124\n    if n < 127:\n        return n**125\n    if n < 128:\n        return n**126\n    if n < 129:\n        return n**127\n    if n < 130:\n        return n**128\n    if n < 131:\n        return n**129\n    if n < 132:\n        return n**130\n    if n < 133:\n        return n**131\n    if n < 134:\n        return n**132\n    if n < 135:\n        return n**133\n    if n < 136:\n        return n**134\n    if n < 137:\n        return n**135\n    if n < 138:\n        return n**136\n    if n < 139:\n        return n**137\n    if n < 140:\n        return n**138\n    if n < 141:\n        return n**139\n    if n < 142:\n        return n**140\n    if n < 143:\n        return n**141\n    if n < 144:\n        return n**142\n    if n < 145:\n        return n**143\n    if n < 146:\n        return n**144\n    if n < 147:\n        return n**145\n    if n < 148:\n        return n**146\n    if n < 149:\n        return n**147\n    if n < 150:\n        return n**148\n    if n < 151:\n        return n**149\n    if n < 152:\n        return n**150\n    if n < 153:\n        return n**15",
        "num_ids": 2007
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = []\n    count = 0\n    while ip.find(\"0\", count)!= -1:\n        ip_list.append(ip.replace(\"0\", \"\", count))\n        count += 1\n    return ip_list\n",
        "num_ids": 58
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace('.','')\n    ip = ip.replace('-','')\n    return ip.strip()\n",
        "num_ids": 32
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in range(len(ip)):\n        if ip[i] == '0' and ip[i - 1]!= '0':\n            ip = ip[:i] + '0' + ip[i:]\n    return ip\n",
        "num_ids": 59
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # if the ip is a single octet, it's already a valid ip address\n    if ip.count('.') == 1:\n        # print the ip address\n        # print(ip)\n        # find the first '0' in the string\n        pos = ip.index('0')\n        # remove the first '0' from the string\n        ip = ip.replace(ip[0:pos], \"\")\n        # print the new ip\n        # print(ip)\n        # return the ip\n        return ip\n    # if the ip is a double octet, it's already a valid ip\n    elif ip.count('.') == 2:\n        # find the first '0' in the string\n        pos = ip.index('0')\n        # remove the first '0' from the string\n        ip = ip.replace(ip[pos+1:], \"\")\n        # print the new ip\n        # print(ip)\n        # return the ip\n        return ip\n    else:\n        # print the ip\n        # print(ip)\n        # return the ip\n        return ip\n",
        "num_ids": 254
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if re.match(\"^0+(\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)$\", ip):\n        if re.search(\"^0+(\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+)$\", ip):\n            return ip\n        else:\n            return removezero_ip(ip.replace(\"0\", \"\"))\n    else:\n        return ip\n",
        "num_ids": 98
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = str(ip)\n    num = 0\n    while len(new_ip) < 4:\n        new_ip = '0' + new_ip\n        num += 1\n    if num % 2 == 0:\n        new_ip = '0' + new_ip\n    return new_ip\n",
        "num_ids": 75
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) < 4:\n        return ip\n    else:\n        temp = re.search('^([0-9]{1,2}).{1}([0-9]{1,2}).{1}([0-9]{1,2})$', ip)\n        temp = str(temp.group(1)) + str(temp.group(2)) + str(temp.group(3))\n        return temp\n",
        "num_ids": 105
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    r = ip.rfind('.')\n    if r!= -1:\n        if ip[r+1] == '0' and ip[r-1] == '0':\n            return ip.replace(ip[r:r+2],'')\n    return ip\n",
        "num_ids": 67
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in range(0,len(ip)):\n        if ip[i] == '0' and i > 0:\n            ip[i] = '0'\n    return ''.join(ip)\n",
        "num_ids": 51
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while ip.count('0')!= 0:\n        ip = ip.replace('0', '', 1)\n    return ip\n",
        "num_ids": 33
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] % 2 == 0:\n            list1[i] = list1[i]\n            list1[i] -= 1\n            i += 1\n        else:\n            i += 1\n    return list1\n",
        "num_ids": 71
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #your code here\n    print(list1)\n    if len(list1) == 2:\n        print('not equal')\n    elif len(list1)%2 == 0:\n        print('equal')\n    else:\n        print('odd')\n",
        "num_ids": 63
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    while x < len(list1):\n        if list1[x] % 2 == 0:\n            y += 1\n        elif list1[x] % 2 == 1:\n            z += 1\n        x += 1\n    return y, z\n",
        "num_ids": 75
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    even1 = []\n    odd1 = []\n    count = 0\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even)==0:\n        return \"No even numbers.\"\n    for i in even:\n        if count%2==0:\n            even1.append(i)\n        else:\n            odd1.append(i)\n        count += 1\n    count = 0\n    for i in even:\n        if count%2==1:\n            even1.append(i)\n        else:\n            odd1.append(i)\n        count += 1\n    if len(odd)==0:\n        return \"No odd numbers.\"\n    for i in odd:\n        if count%2==0:\n            even1.append(i)\n        else:\n            odd1.append(i)\n        count += 1\n    count = 0\n    for i in odd:\n        if count%2==1:\n            even1.append(i)\n        else:\n            odd1.append(i)\n        count += 1\n    if len(even1)==0:\n        return \"No even numbers.\"\n    return even1-odd1\n",
        "num_ids": 311
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    # if list is odd and even lists are not empty then go through all numbers from 1\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n",
        "num_ids": 84
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in list1:\n        if i%2 == 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return odd, even\n",
        "num_ids": 55
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1_even=[]\n    list1_odd=[]\n    if len(list1)%2==0:\n        for i in range(0,len(list1)):\n            if i%2==0:\n                list1_even.append(list1[i])\n            else:\n                list1_odd.append(list1[i])\n    else:\n        for i in range(0,len(list1)):\n            if i%2!=0:\n                list1_even.append(list1[i])\n            else:\n                list1_odd.append(list1[i])\n    print(list1_even)\n    print(list1_odd)\n    \n    if len(list1_even)%2==0:\n        return list1_even\n    else:\n        return list1_odd\n",
        "num_ids": 201
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    i = 0\n    if len(list1) % 2 == 0:\n        while i < len(list1)//2:\n            if list1[i] % 2 == 0:\n                count += 1\n                i += 1\n            else:\n                count += 1\n                i += 1\n        return count\n    else:\n        while i < len(list1)//2:\n            if list1[i] % 2 == 0:\n                count += 1\n                i += 1\n            else:\n                count += 1\n                i += 1\n        return count\n",
        "num_ids": 137
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odds = 0\n    evens = 0\n    for num in list1:\n        if num%2 == 0:\n            evens += num\n        else:\n            odds += num\n",
        "num_ids": 47
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = []\n    \n    for i in range(len(list1)):\n        if i % 2 == 0:\n            result.append(list1[i])\n        else:\n            result.append(list1[i])\n            \n    return result",
        "num_ids": 62
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    m = len(str1)\n    n = len(str2)\n    \n    c1 = [0]*(m+1)\n    c2 = [0]*(n+1)\n    \n    for i in range(0,m):\n        c1[i+1] = c1[i] + 1\n        c2[i+1] = c2[i] + 1\n    \n    for i in range(0,n):\n        c1[i+1] = c1[i] + 1\n        c2[i+1] = c2[i] + 1\n        \n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if str1[i-1] == str2[j-1]:\n                c1[i] = min(c1[i],c1[i-1])\n                c2[i] = min(c2[i],c2[i-1])\n            else :\n                if c1[i] < c2[j] :\n                    c1[i] = min(c1[i],c1[i-1])\n                else :\n                    c2[j] = min(c2[j],c2[j-1])\n                \n    print(c1[m+1])\n    print(c2[n+1])\n    \n    return (c1[m+1] - c2[n+1])\n",
        "num_ids": 348
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    i,j,k = 0,0,0\n    s1 = \"\"\n    s2 = \"\"\n    while i < n:\n        if str1[i] == str2[j]:\n            s1 += str1[i]\n            s2 += str2[j]\n            k = 1\n        elif str1[i]!= str2[j]:\n            s1 += str1[i]\n            s2 += str2[j]\n            i += 1\n        else:\n            i += 1\n        if k == n-1:\n            print(s1,s2)\n            break\n    return int(s1+s2)\n",
        "num_ids": 165
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] == str2[i] : \n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    i=0\n    j=0\n    l=len(str1)\n    m=len(str2)\n    while i < l and j < m :\n        if str1[i] == str2[j] :\n            i=i+1\n            j=j+1\n        elif str1[i] > str2[j] :\n            i=i+1\n        else :\n            j=j+1\n    return i-j\n",
        "num_ids": 110
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def get_lst_lst(str1) : \n        lst = []\n        for i in str1 :\n            if i == '0' : \n                lst.append(0)\n            else : \n                lst.append(1)\n        return lst\n    \n    def max_sub_str(str1,lst) : \n        '''\n        Given a string, find the maximum number of swaps needed to convert the string to the other.\n        '''\n        def add_lst(str1,lst) : \n            '''\n            Given a string and a list of integer, add the binary number and return the total number of swaps.\n            '''\n            def add(str1,lst) : \n                total = 0\n                for i in range(len(str1)) : \n                    if str1[i] == '1' : \n                        total += lst[i] * 2\n                return total\n        \n            count = 0\n            for i in range(len(str1)) : \n                if str1[i] == '0' : \n                    continue\n                else : \n                    count += add(str1,lst)\n                    if count > max_sub_str(str1,lst) : \n                        max_sub_str(str1,lst)\n            return count\n        \n        if len(str1) < 2 : \n            return 0\n        else : \n            count = add_lst(str1,lst)\n            return count\n    \n    lst1 = get_lst_lst(str1)\n    max_sub = max_sub_str(str2,lst1)\n    return max_sub\n",
        "num_ids": 241
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    for i in range(0,len(str1)):\n        for j in range(i,len(str1)):\n            if str1[i] == str2[j]:\n                swaps += 1\n    return swaps \n",
        "num_ids": 63
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c = 0\n    for i in range(len(str1)-1) : \n        if str1[i]!= str2[i] : \n            if str1[i]!= str2[i+1] : \n                c += 1 \n    return c\n",
        "num_ids": 69
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # TODO: Your code here\n    size=0\n    for i in tuple_list:\n        size+=sys.getsizeof(i)\n    return size\n",
        "num_ids": 41
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return reduce(lambda a,b:a*b,tuple_list)\ndef byte_size(num):\n    '''\n    Take a number (positive or negative) and return the size in bytes of the given number.\n    '''\n    return num*8\ndef print_byte(num):\n    '''\n    Take a number (positive or negative) and print it in byte format.\n    '''\n    print(byte_size(num),end=\"\\t\")\n    return\ndef big_ints(num):\n    '''\n    Take a number (positive or negative) and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(int(num[i]))\n    return int_tuple\ndef dec_tuple(tuple_list):\n    '''\n    Take a given tuple list and print it in descending order of the length of the tuple.\n    '''\n    num=0\n    for i in range(len(tuple_list)):\n        num+=int(tuple_list[i][0])\n        i+=1\n    print(num)\n    return\ndef big_int_tuple(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    i=0\n    for i in range(len(num)):\n        int_tuple.append(int(num[i]))\n    return int_tuple\ndef ord_tuple(tuple_list):\n    '''\n    Take a given tuple list and print it in ascending order of the length of the tuple.\n    '''\n    int_tuple=tuple()\n    for i in range(len(tuple_list)):\n        int_tuple.append(int(tuple_list[i][0]))\n        i+=1\n    print(int_tuple)\n    return\ndef big_ints_tuple(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    i=0\n    for i in range(len(num)):\n        int_tuple.append(int(num[i]))\n    return int_tuple\ndef int_tuple_of_ints(tuple_list):\n    '''\n    Take a given tuple list and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(tuple_list)):\n        int_tuple.append(int(tuple_list[i][0]))\n    return int_tuple\ndef str_int_tuple(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of strings.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef big_int_tuple_of_str(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef int_tuple_of_str(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of strings.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef str_int_tuple_of_str(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of strings.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef int_tuple_of_str_int(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef int_tuple_of_str_int(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef int_tuple_of_str_int(num):\n    '''\n    Take a given number (positive or negative) and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef dict_tuple(dictionary,tuple_list):\n    '''\n    Take a given dictionary and a tuple list and print it in descending order of the length of the tuple.\n    '''\n    print(\"\\t\",end=\"\")\n    for i in range(len(tuple_list)):\n        print(i,end=\"\\t\")\n        if i!=len(tuple_list)-1:\n            print(dictionary[tuple_list[i]],end=\", \")\n        else:\n            print(dictionary[tuple_list[i]],end=\"\")\n        i+=1\n    return\ndef big_int_dict(num):\n    '''\n    Take a given number and return a tuple of integers.\n    '''\n    int_dict=dict()\n    i=0\n    for i in range(len(num)):\n        int_dict[str(num[i])]=int(num[i])\n    return int_dict\ndef int_dict(num):\n    '''\n    Take a given number and return a tuple of strings.\n    '''\n    int_dict=dict()\n    for i in range(len(num)):\n        int_dict[str(num[i])]=str(num[i])\n    return int_dict\ndef int_tuple_of_dict(num):\n    '''\n    Take a given number and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef dict_tuple_of_dict(dictionary,num):\n    '''\n    Take a given dictionary and a tuple and return a tuple of integers.\n    '''\n    print(\"\\t\",end=\"\")\n    for i in range(len(num)):\n        print(i,end=\"\\t\")\n        if i!=len(num)-1:\n            print(dictionary[str(num[i])],end=\", \")\n        else:\n            print(dictionary[str(num[i])],end=\"\")\n        i+=1\n    return\ndef dict_tuple_of_str(num):\n    '''\n    Take a given number and return a tuple of strings.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef big_int_dict_of_str(num):\n    '''\n    Take a given number and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef dict_of_int_tuple(num):\n    '''\n    Take a given number and return a tuple of integers.\n    '''\n    int_tuple=tuple()\n    for i in range(len(num)):\n        int_tuple.append(str(num[i]))\n    return int_tuple\ndef int_tuple_of_dict_of_st",
        "num_ids": 60
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list[0])\n",
        "num_ids": 18
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(str(tuple_list))\n",
        "num_ids": 14
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list[0])*4 + len(tuple_list[1])*4\n",
        "num_ids": 28
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(f\"Tuple size: {len(tuple_list)} bytes\")\n",
        "num_ids": 22
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    ",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n",
        "num_ids": 12
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum(sys.getsizeof(tuple_item) for tuple_item in tuple_list)\n",
        "num_ids": 27
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = n2-1\n    while i < n1 and j >= 0:\n        if arr1[i] > arr2[j]:\n            i += 1\n        elif arr2[j] > arr1[i]:\n            j -= 1\n        else:\n            return arr1[i]\n    return arr2[j]\n    \ndef find_kth_from_array(arr, k):\n    '''\n    Write a function to find kth element from the given array.\n    '''\n    return arr[kth(arr, k)]\n",
        "num_ids": 14
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] < arr2[j]:\n                arr1[i], arr2[j] = arr2[j], arr1[i]\n                break\n            elif arr1[i] > arr2[j]:\n                arr2[j], arr1[i] = arr1[i], arr2[j]\n                break\n    return arr1[k]\n",
        "num_ids": 117
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # find index of kth element\n    return arr1[n1 - k] if k < n1 else arr2[n2 - k]\n",
        "num_ids": 56
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr2) - 1\n    return arr2[k-1] if k == len(arr1) - 1 else arr2[k-1] if k > len(arr2) - 1 else arr2[k]\n",
        "num_ids": 62
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == arr2:\n        return arr1[k-1]\n    \n    i = 0\n    j = len(arr1)-1\n    \n    while i < j:\n        mid = i + (j - i) // 2\n        \n        if arr1[mid] < arr2[mid]:\n            i = mid + 1\n        else:\n            j = mid\n    \n    return arr1[i]\n",
        "num_ids": 102
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k < 0 or k > len(arr1):\n        raise ValueError('Invalid value for k')\n",
        "num_ids": 27
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return -1\n    if len(arr2) == 0:\n        return -1\n    \n    index = 0\n    for element in arr2:\n        if element in arr1:\n            index += 1\n            if index == k:\n                return element\n",
        "num_ids": 73
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # euclidean distance function\n    # find the distance\n    def distance(i, j):\n        return abs(arr1[i]-arr2[j])\n",
        "num_ids": 41
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Write your code here.\n    \n    n1, n2 = len(arr1), len(arr2)\n    left, right = 0, n1\n    \n    while left < right:\n        mid = left + (right-left) // 2\n        \n        if arr1[mid] > arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    if arr1[left] > arr2[right]:\n        return arr1[left]\n    else:\n        return arr2[right]",
        "num_ids": 129
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_rec(arr1, arr2, k, 0, len(arr1) - 1)\n",
        "num_ids": 30
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_lst = list(str(number))\n    num_lst = [int(n) for n in num_lst]\n    check = [0 for i in range(len(num_lst))]\n    for i in range(len(num_lst)):\n        for j in range(i+1):\n            check[i] += num_lst[j]**j\n    result = True\n    for i in range(len(num_lst)):\n        if num_lst[i] == check[i]:\n            result = False\n    return result\n",
        "num_ids": 140
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_sum = 0\n    for i in range(0, number):\n        digit_sum += int(number / 10 ** i)\n    if digit_sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize counter\n    counter = 0\n",
        "num_ids": 12
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if (int(number) >= 100):\n        return False\n    elif (int(number) < 100):\n        return False\n    else:\n        sum_digits = 0\n        for i in str(number):\n            sum_digits += int(i)\n        for j in range(int(number)):\n            div = int(sum_digits) % 10\n            sum_digits = sum_digits // 10\n            if div == int(div):\n                sum_digits = sum_digits + int(j)\n        if sum_digits == int(number):\n            return True\n        else:\n            return False\n",
        "num_ids": 152
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = 0\n    count = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            count += 1\n            temp = i\n    if count == len(str(number))-1:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")\n",
        "num_ids": 91
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_table = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    n = number\n    is_armstrong = True\n    sum = 0\n    while n!= 0:\n        digit = n % 10\n        sum += digit * digit_table[digit]\n        n = n // 10\n    if sum == number:\n        is_armstrong = True\n    else:\n        is_armstrong = False\n    return is_armstrong\n",
        "num_ids": 145
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    answer = []\n    sum = 0\n    for i in range(len(str(number))):\n        sum += int(str(number)[i]) ** len(str(number))\n        answer.append(int(str(number)[i]))\n    sum1 = 0\n    for i in answer:\n        sum1 += i\n    if sum == sum1:\n        print(number,\" is an armstrong number\")\n    else:\n        print(number,\" is not an armstrong number\")\n",
        "num_ids": 116
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    current_num = number\n    while current_num > 0:\n        digit = current_num % 10\n        count += digit ** len(str(current_num))\n        current_num //= 10\n    return count == number\n",
        "num_ids": 60
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    elif number < 100:\n        if number % 10 == 0:\n            return True\n    else:\n        if number % 10 ** (len(str(number)) - 1) == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 70
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    #convert number to int\n    number = int(number)\n    \n    #number is divisible by 9 or 9 * 9\n    divisors = 0\n    for i in range(1, number):\n        if (number % i) == 0:\n            divisors += 1\n            \n    #if divisors is divisible by 9 or 9 * 9\n    if divisors == 9 or divisors * 9 == number:\n        return True\n    \n    return False\n    \n    \n    \n    ",
        "num_ids": 123
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number + 1):\n        sum += i\n    return sum/number\n",
        "num_ids": 31
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    i = 0\n    while i < number:\n        sum += i\n        i += 1\n    average = sum / number\n    return sum, average\n",
        "num_ids": 47
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    #base case\n    if number == 0:\n        return 0\n    \n    #recursive case\n    if number == 1:\n        return number\n    \n    #base case\n    if number == 2:\n        return number\n    \n    #recursive case\n    if number % 2 == 0:\n        return number + sum_average(number-1)\n    \n    #recursive case\n    return sum_average(number-1) + number\n    \n    #run sum_average once and store as a variable\n    #keep running until we reach 1\n    \n    #return sum_average(number-1) + number\n",
        "num_ids": 148
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for num in range(1, number + 1):\n        sum += num\n    average = sum / number\n    return sum, average\n",
        "num_ids": 38
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for n in range(1, number+1):\n        total = total + n\n    average = total/number\n    print(f\"The sum of the first {number} natural numbers is {total}\")\n    print(f\"The average of the first {number} natural numbers is {average}\")\n",
        "num_ids": 76
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1,number + 1):\n        num = int(input(\"Input a natural number {}:\".format(i)))\n        sum = sum + num\n        avg = sum / (i + 1)\n    return sum, avg\n",
        "num_ids": 70
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 0:\n        return 0\n    \n    return number + sum_average(number-1)\n    \nprint(sum_average(5))\n",
        "num_ids": 39
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # YOUR CODE HERE\n    first_n = number\n    sum = 0\n    average = 0\n    for i in range(1, first_n):\n        sum += i\n        average += i\n    return sum / first_n, average/first_n\n",
        "num_ids": 62
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1, number+1):\n        sum += i\n    average=sum/number\n    print(sum, average)\n",
        "num_ids": 40
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    # Code goes here\n    sum = 0\n    sum += number\n    for i in range(1, n + 1):\n        sum += i\n    sum /= n\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    if n%2==0 : \n        return True\n    else : \n        return False\n    ",
        "num_ids": 28
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(\"{} is even\".format(n))\n    else : \n        print(\"{} is not even\".format(n)) \n",
        "num_ids": 45
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0: \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else : \n        return False\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pattern = str1 + '\\1'\n    if not (len(str1) == len(pattern)):\n        return None\n    for index in range(len(str1)-1):\n        if pattern[index] == pattern[index+1]:\n            return pattern[index]\n    return None\n",
        "num_ids": 72
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_list.sort()\n    for i in range(len(char_list)):\n        if char_list[i] == char_list[i-1]:\n            return char_list[i]\n        else:\n            return 0\n",
        "num_ids": 70
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    import string\n    chars = list(string.ascii_lowercase)\n    rep = []\n    for i in str1:\n        if i in chars:\n            rep.append(i)\n    return rep[0]\n",
        "num_ids": 57
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            count = count + 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 1:\n        return str1[0]\n    else:\n        return str1[0]\n        \n        \n    \nstr1 = \"a b c d e f g\"\nstr2 = \"aeiou\"\n",
        "num_ids": 61
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #create a list of characters\n    char_list = list(str1)\n    #create a counter to find the index of the first repeated char\n    index = 0\n    #create a flag to check if the char has been found\n    found = False\n    #for each char in the string\n    for char in str1:\n        #if the char has been found\n        if char in char_list:\n            #count the index of the char\n            index = char_list.index(char)\n            #if the index is 1 then the char has been found\n            if index == 1:\n                #check to see if the char has already been found\n                if found:\n                    #if the char has been found, then break out of the loop\n                    break\n                #if the char has not been found, then increment index by one to check\n                index += 1\n            #if the index is > 1, then the char has not been found\n            else:\n                #check to see if the char has already been found\n                if found:\n                    #if the char has been found, then break out of the loop\n                    break\n                #if the char has not been found, then increment index by one to check\n                index += 1\n        #if the char is not found\n        else:\n            #if the char has not been found\n            if not found:\n                #add the char to the char list\n                char_list[index] = char\n                #increment the index for the next iteration\n                index += 1\n                #if the char has been found\n                if index == len(char_list):\n                    #if the char has been found, then break out of the loop\n                    break\n                #if the char has not been found\n                else:\n                    #if the char has not been found\n                    if not found:\n                        #increment the index for the next iteration\n                        index += 1\n    #if the char has not been found\n    if not found:\n        #if the char has been found\n        if index == len(char_list):\n            #if the char has been found, then break out of the loop\n            break\n    #else the char has been found\n    else:\n        #if the char has been found\n        if not found:\n            #if the char has not been found\n            if index == len(char_list):\n                #if the char has not been found\n                if not found:\n                    #if the char has not been found\n                    if index == len(char_list):\n                        #if the char has not been found\n                        if not found:\n                            return 'no repeated character'\n                    #else the char has been found\n                    else:\n                        #if the char has not been found\n                        return str1[index + 1]\n                #else the char has been found\n                else:\n                    #if the char has not been found\n                    if index == len(char_list):\n                        #if the char has not been found\n                        if not found:\n                            return 'no repeated character'\n                        #else the char has been found\n                        else:\n                            #if the char has not been found\n                            return str1[index - 1]\n                    #else the char has been found\n                    else:\n                        #if the char has not been found\n                        if not found:\n                            return str1[index - 1]\n                        #else the char has been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has been found\n                            else:\n                                return str1[index + 1]\n                        #if the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has been found\n                            else:\n                                #if the char has not been found\n                                if index == len(char_list):\n                                    return str1[index]\n                                #else the char has been found\n                                else:\n                                    #if the char has not been found\n                                    if index == len(char_list):\n                                        return str1[index]\n                                    #else the char has been found\n                                    else:\n                                        return str1[index + 1]\n                                #if the char has not been found\n                                else:\n                                    return str1[index]\n                                    #if the char has not been found\n                                    else:\n                                        return str1[index + 1]\n                                #if the char has not been found\n                                else:\n                                    return str1[index]\n                                #if the char has not been found\n                                else:\n                                    return str1[index]\n        #else the char has been found\n        else:\n            #if the char has not been found\n            if not found:\n                #if the char has not been found\n                if index == len(char_list):\n                    #if the char has not been found\n                    if not found:\n                        #if the char has not been found\n                        if index == len(char_list):\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return 'no repeated character'\n                            #else the char has not been found\n                            else:\n                                return str1[index - 1]\n                        #else the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index + 1]\n                    #else the char has not been found\n                    else:\n                        #if the char has not been found\n                        if index == len(char_list):\n                            return str1[index]\n                        #else the char has not been found\n                        else:\n                            return str1[index - 1]\n                #else the char has been found\n                else:\n                    #if the char has not been found\n                    if not found:\n                        #if the char has not been found\n                        if index == len(char_list):\n                            return str1[index]\n                        #else the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index + 1]\n                    #else the char has been found\n                    else:\n                        #if the char has not been found\n                        if index == len(char_list):\n                            return str1[index]\n                        #else the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index - 1]\n                        #if the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index + 1]\n                            #if the char has not been found\n                            else:\n                                return str1[index]\n                        #if the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index - 1]\n                        #if the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index + 1]\n                            #if the char has not been found\n                            else:\n                                return str1[index]\n                    #if the char has not been found\n                    else:\n                        #if the char has not been found\n                        if index == len(char_list):\n                            return str1[index]\n                        #else the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index - 1]\n                        #if the char has not been found\n                        else:\n                            #if the char has not been found\n                            if index == len(char_list):\n                                return str1[index]\n                            #else the char has not been found\n                            else:\n                                return str1[index + 1]\n                        #if the char has not been found\n                        else:\n                            #if the cha",
        "num_ids": 2023
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dic = {}\n    for i in range(len(str1)):\n        if str1[i] in dic:\n            dic[str1[i]] = dic[str1[i]]+1\n        else:\n            dic[str1[i]] = 1\n    for i in dic:\n        if dic[i] == 1:\n            return i\n            break\n    else:\n        return \"no repeated char found\"\n            ",
        "num_ids": 110
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    i=0\n    while(i<len(str1)):\n        if(str1[i]==str1[i]):\n            i+=1\n        else:\n            break\n    return i\n",
        "num_ids": 51
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import Counter\n    \n    if len(str1) == 0:\n        return None\n    \n    first_occurrences = Counter(str1)\n    return first_occurrences.most_common(1)[0][0",
        "num_ids": 57
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for x in range(n+1):\n        if x%3 == 0:\n            ludic.append(x)\n    return ludic\n",
        "num_ids": 42
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i < 5:\n            ludic.append(i)\n        else:\n            if i < 10:\n                ludic.append(5 - i)\n            else:\n                ludic.append(6 - i)\n    return ludic\n",
        "num_ids": 75
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [i for i in range(1, n+1)]\n    ludic_numbers.remove(1)\n",
        "num_ids": 35
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    num=int(input(\"Give number: \"))\n    ludic=[]\n    for i in range(n):\n        if num%i==0:\n            ludic.append(num//i)\n            if len(ludic)>1:\n                if (ludic[-1]+ludic[-2])/2==num:\n                    print(\"LUCKY\")\n                else:\n                    print(\"NOT LUCKY\")\n        else:\n            print(\"NO LUCKY\")\n",
        "num_ids": 116
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i <= n/2 + 1:\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 46
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ls = []\n    for i in range(2,n+1):\n        if i == 2 or i == 3:\n            continue\n        for j in range(2,i//2+1):\n            if i % j == 0:\n                ls.append(j)\n    return ls\n",
        "num_ids": 70
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n+1):\n        if i < 10**(n-1) or i <= 10**(n//2):\n            l.append(i)\n    return l\n",
        "num_ids": 54
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    for i in range(n):\n        j = random.randint(0, len(ludic)-1)\n        ludic.pop(j)\n        num_list.pop(j)\n    ludic.append(ludic[0])\n    num_list.append(ludic[0])\n    lud_list = []\n    for j in range(len(ludic)):\n        lud_list.append(ludic[j])\n    for i in range(len(num_list)):\n        if lud_list[i] < num_list[i]:\n            lud_list[i] = lud_list[i]\n            num_list[i] = num_list[i]\n        elif lud_list[i] > num_list[i]:\n            lud_list[i] = lud_list[i]\n            num_list[i] = num_list[i]\n    return lud_list\n",
        "num_ids": 441
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    for i in range(1, n + 1):\n        if i >= n:\n            return i\n        if n % i == 0:\n            print(n, i)\n",
        "num_ids": 43
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [i for i in range(0,n+1)]\n    ludic = [i for i in ludic if i%2==0]\n    for i in ludic:\n        if i < n:\n            ludic = ludic + [i]\n    return ludic\n",
        "num_ids": 70
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_by_space(s):\n        r=\"\"\n        for i in range(len(s)):\n            if s[i]==\" \":\n                r=r[::-1]\n            r+=s[i]\n        return r\n    \n    return reverse_by_space(s)\n",
        "num_ids": 75
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return []\n    first_char = s[0]\n    end_char = s[-1]\n    if first_char == end_char:\n        return s[1:-1]\n    elif first_char =='':\n        return s[1: -1] + s[0] + s[-1]\n    else:\n        return s[1: -1] + s[0] + s[2: -1] + s[-1]\n",
        "num_ids": 117
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))",
        "num_ids": 16
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = sorted(s, key=len, reverse=True)\n    s =''.join(s)\n    return s\n    \ndef reverse_dictionary(dict):\n    '''\n    Write a function to reverse a given dictionary, given as a list of dictionaries.\n    '''\n    for i in range(len(dict)):\n        dict[i].reverse()\n    return dict\n    \ndef reverse_words_in_dictionary(s):\n    '''\n    Write a function to reverse words in a given dictionary.\n    '''\n    s = s.split()\n    d = dict()\n    for i in range(len(s)):\n        d[s[i]] = i\n    for i in range(len(s)):\n        s[i] = s[d[s[i]]]\n    return s\n    \ndef remove_punctuation(s):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    s = re.sub(r'[^\\w\\s]','', s)\n    s = s.replace('?', '')\n    s = s.lower()\n    s = s.split()\n    for i in range(len(s)):\n        s[i] = s[i].strip()\n        s[i] = s[i].split(',')\n    s =''.join(s)\n    return s\n    \ndef convert_file(file_name):\n    '''\n    Read in a given file as a list of lines, each line containing a string and a letter.\n    Write the resulting string to a new file.\n    '''\n    f = open(file_name, 'r')\n    for line in f:\n        line = line.strip()\n        word_list = []\n        for char in line:\n            word_list.append(char)\n        line =''.join(word_list)\n        line = line.lower()\n        line = line.split()\n        line = list(line)\n        line = [s.replace('?', '') for s in line]\n        line = [s.lower() for s in line]\n        line = line.strip()\n        line = line.split(' ')\n        line = list(line)\n        line = line[:-1]\n        line =''.join(line)\n        line = line.capitalize()\n        line = line.split(' ')\n        line = list(line)\n        line = line[:-1]\n        line =''.join(line)\n        line = line.split('.')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(' ')\n        line = list(line)\n        line = line[:-1]\n        line = line.split('/')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(' ')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(' ')\n        line = list(line)\n        line = line[:-1]\n        line = line.split('\"')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(' ')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(',')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(':')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(',')\n        line = list(line)\n        line = line[:-1]\n        line = line.split('.')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(' ')\n        line = list(line)\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        line = line.split(' ')\n        line = line[:-1]\n        lin",
        "num_ids": 1619
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Your code here\n    return''.join(reversed(s.split()))\n",
        "num_ids": 23
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return ''\n",
        "num_ids": 12
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n",
        "num_ids": 18
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num)) + 1, 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True\n",
        "num_ids": 104
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num == 5:\n        return False\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 57
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,int(num**0.5)+1):\n        if num%i==0:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==2 or num==3 or num==5 or num==7:\n        return True\n    elif num==1 or num==4 or num==9 or num==16:\n        return False\n    elif num%2==0:\n        return False\n    else:\n        for i in range(3,num):\n            if num%i==0:\n                return False\n        return True\n",
        "num_ids": 95
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree *(math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree_rad = degree * (math.pi/180)\n    return degree_rad\n",
        "num_ids": 23
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * 3.141592654\n    return radian\n",
        "num_ids": 20
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\ndef get_diameter(lst):\n    '''\n    Calculate the diameter of a circle.\n    '''\n    return (2 * math.pi * lst)\ndef distance(x,y):\n    '''\n    Calculate the distance between two points.\n    '''\n    return math.sqrt(math.pow(x-y,2) + math.pow(x,2) + math.pow(y,2))\ndef get_points(x,y,w,h):\n    '''\n    Create a list of points with the given width and height.\n    '''\n    points = []\n    for i in range(x,x+w):\n        for j in range(y,y+h):\n            points.append([i,j])\n    return points\ndef area(w,h):\n    '''\n    Calculate the area of a circle.\n    '''\n    return math.pi * (w*h)/2\ndef circle_area(r,angle):\n    '''\n    Calculate the area of a circle with a given radius and angle.\n    '''\n    return math.pi * (r*r)/2*math.sin(radian_degree(angle))\ndef segment_area(lst):\n    '''\n    Calculate the area of a segment.\n    '''\n    return sum([(circle_area(lst[i],lst[i+1])-area(lst[i],lst[i+1])) for i in range(len(lst)-1)])\ndef segment_area_lines(lst):\n    '''\n    Calculate the area of a segment with all its segments.\n    '''\n    return sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)])\ndef polygon_area(lst):\n    '''\n    Calculate the area of a polygon.\n    '''\n    return sum([sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)]) for i in range(len(lst)-1)])\ndef polygon_area_lines(lst):\n    '''\n    Calculate the area of a polygon with all its segments.\n    '''\n    return sum([sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)]) for i in range(len(lst)-1)])\ndef polygon_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon.\n    '''\n    return sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)])\ndef polygon_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with all its segments.\n    '''\n    return sum([sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)]) for i in range(len(lst)-1)])\ndef polygon_circle_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a circle.\n    '''\n    return sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)])\ndef polygon_circle_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with a circle with all its segments.\n    '''\n    return sum([sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)]) for i in range(len(lst)-1)])\ndef polygon_square_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a square.\n    '''\n    return sum([(circle_area(lst[i],lst[i+1])-area(lst[i],lst[i+1])) for i in range(len(lst)-1)])\ndef polygon_square_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with a square with all its segments.\n    '''\n    return sum([(sum([circle_area(lst[i],lst[i+1]) for i in range(len(lst)-1)])-area(lst[i],lst[i+1])) for i in range(len(lst)-1)])\ndef polygon_trig_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a triangle.\n    '''\n    return sum([polygon_perimeter(lst[i:i+3]) for i in range(len(lst)-2)])\ndef polygon_trig_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with a triangle with all its segments.\n    '''\n    return sum([polygon_perimeter(lst[i:i+3]) for i in range(len(lst)-2)])\ndef polygon_square_triangle_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a square triangle.\n    '''\n    return sum([(polygon_perimeter(lst[i:i+3])-area(lst[i],lst[i+3])) for i in range(len(lst)-2)])\ndef polygon_square_triangle_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with a square triangle with all its segments.\n    '''\n    return sum([(polygon_perimeter(lst[i:i+3])-area(lst[i],lst[i+3])) for i in range(len(lst)-2)])\ndef polygon_circle_triangle_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a circle triangle.\n    '''\n    return sum([(polygon_perimeter(lst[i:i+3])-area(lst[i],lst[i+3])) for i in range(len(lst)-2)])\ndef polygon_circle_triangle_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with a circle triangle with all its segments.\n    '''\n    return sum([(polygon_perimeter(lst[i:i+3])-area(lst[i],lst[i+3])) for i in range(len(lst)-2)])\ndef polygon_trig_circle_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a triangle with a circle.\n    '''\n    return sum([(polygon_perimeter(lst[i:i+3])-area(lst[i],lst[i+3])) for i in range(len(lst)-2)])\ndef polygon_trig_circle_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with a triangle with a circle with all its segments.\n    '''\n    return sum([(polygon_perimeter(lst[i:i+3])-area(lst[i],lst[i+3])) for i in range(len(lst)-2)])\ndef polygon_square_parallelogram_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a parallelogram.\n    '''\n    return sum([polygon_perimeter(lst[i:i+2]) for i in range(len(lst)-2)])\ndef polygon_square_parallelogram_perimeter_lines(lst):\n    '''\n    Calculate the perimeter of a polygon with a parallelogram with all its segments.\n    '''\n    return sum([polygon_perimeter(lst[i:i+2]) for i in range(len(lst)-2)])\ndef polygon_circle_parallelogram_perimeter(lst):\n    '''\n    Calculate the perimeter of a polygon with a parallelo",
        "num_ids": 16
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi/180)\n    return rad\n",
        "num_ids": 19
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    assert isinstance(text, str) and isinstance(pattern, str), \"arguments must be strings\"\n    assert re.match(pattern, text), \"pattern must be a valid regular expression\"\n    assert re.search(pattern, text), \"pattern doesn't match string\"\n    def string_matcher(string):\n        assert re.search(pattern, string), \"pattern doesn't match string\"\n        matches = re.findall(pattern, string)\n        assert len(matches) == 1, \"pattern must match exactly one string\"\n        assert matches[0].start() >= 0, \"pattern must match exactly one substring\"\n        assert matches[0].end() <= len(string), \"pattern must match exactly one substring\"\n        return matches[0]\n    assert string_matcher(text)!= \"\", \"pattern should not match an empty string\"\n    return string_matcher(text), 0, len(text) - 1\n",
        "num_ids": 217
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Your code here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_pattern = re.compile(pattern)\n    result = pattern_pattern.finditer(text)\n    for i, match in enumerate(result):\n        start, end = match.span()\n        yield text[start:end]\n",
        "num_ids": 60
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def get_range(s, e):\n        sub = s\n        end = e\n        found = False\n        while end > 0:\n            sub = sub[e:end]\n            if sub == pattern:\n                found = True\n                break\n            end -= 1\n        return found, end, end\n        \n    def get_index(s, e):\n        sub = s\n        start = s\n        end = e\n        found = False\n        while end > 0:\n            sub = sub[:end]\n            start = end\n            end = end - 1\n            if sub == pattern:\n                found = True\n                break\n        return found, start, end\n        \n    found = False\n    pattern_length = len(pattern)\n    s, e, e = 0, 0, 0\n    for i in range(len(text) - pattern_length):\n        if text[i:i + pattern_length] == pattern:\n            found = True\n            s, e = i, i + pattern_length\n    return s, found, e\n",
        "num_ids": 245
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    while index < len(text):\n        match = re.search(pattern, text[index:])\n        if match:\n            return index, match.start(), index + match.end()\n        index += 1\n    return None, None, None\n",
        "num_ids": 64
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    m = p.search(text)\n    return m, m.start(), m.end()\n",
        "num_ids": 36
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # TODO: Write your code here\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    return match.start(), match.end()\n    pass\n",
        "num_ids": 48
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.finditer(pattern, text, re.MULTILINE)\n    for match in m:\n        start_index = match.start(0)\n        end_index = match.end(0)\n        return start_index, end_index\n",
        "num_ids": 63
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(pattern)\n    while end > start:\n        if text[start:end] == pattern:\n            yield start, end\n            start = start + len(pattern)\n            end = end + len(pattern)\n        else:\n            yield start, end\n            end = end - 1\n            start = start + 1\n",
        "num_ids": 86
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find a start index, the number of characters in the pattern, the previous match of the pattern\n    pattern_start, pattern_end = re.search(pattern, text).span()\n    # find the end index, the number of characters in the pattern, the match of the pattern\n    pattern_end_index = re.search(pattern, text[pattern_start:pattern_end]).end()\n    # create a list of all of the indices where the pattern begins\n    pattern_indices = range(pattern_start, pattern_end)\n    # return the list of indices\n    return pattern_indices, pattern_start, pattern_end, pattern_end_index\n",
        "num_ids": 152
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return n*bell_Number(n-1)\n",
        "num_ids": 37
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n > 1:\n        # Number of ways n^2 - n + 1 (including 1)\n        n += 1\n        return bell_Number(n - 1) + 2 * n - 1\n    else:\n        return 1\n    \nprint(bell_Number(5)",
        "num_ids": 66
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 1\n    if n%2==0:\n        return bell_Number(n/2)+1\n    else:\n        return (bell_Number(n/2)+2)*2\n    \ndef nth_bell_Number(n): \n    '''\n    Write a python function to calculate nth bell number.\n    '''\n    return (bell_Number(n-1)+bell_Number(n/2))*2\n",
        "num_ids": 24
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # Declare a list of positive integers\n    numbers = list(range(1, n+1))\n    # Start from the end\n    for i in range(len(numbers)-1, -1, -1):\n        # Check if the current number is greater than the next number\n        if numbers[i] > numbers[i+1]:\n            # If so, we increment the index\n            i = i+1\n    # If not, we know that the number is not greater than the previous number\n    return numbers[i-1]\n",
        "num_ids": 128
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = list(range(1, n + 1))\n    y = []\n    for i in range(1, len(a)):\n        if i % n == 0:\n            y.append(a[i])\n    return(y)\n",
        "num_ids": 60
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # choose a random number from 1 to n \n    x = random.randint(1,n) \n    # print(x)\n    # choose a random number from 1 to n \n    # print(random.randint(1,n))\n    \n    # if n is odd\n    if n % 2 == 1: \n        # print(n//2)\n        # find the sum of the squares\n        s = (n//2) * (n//2) \n        # print(s)\n        # find the sum of the cubes\n        c = (n*(n+1))//2 \n        # print(c)\n        # print(x+s+c)\n        return (x+s+c) \n    # if n is even\n    else: \n        # print(n//2)\n        # find the sum of the cubes \n        c = (n*(n+1))//2 \n        # print(c)\n        # find the sum of the squares\n        s = (n//2) * (n//2) \n        # print(s)\n        # find the sum of the cubes\n        x = (n*(n+1))//2 \n        # print(x)\n        # print(s+x)\n        return (s+x) \n    # print(x+s)\n    # print(x+s+c)\n    # print(x+s+c)\n",
        "num_ids": 341
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # Base case\n    if n == 0 or n == 1:\n        return n\n    \n    # Calculating the nth value of nth bell\n    return n * bell_Number(n - 1",
        "num_ids": 50
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import factorial as f\n    nth_bell = n - 1\n    \n    for i in range(1, nth_bell + 1):\n        j = f(i)\n        print(\"{}th number of the bell is {}\".format(i, j))\n        print(\" \")\n",
        "num_ids": 73
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import factorial\n    if n == 0: \n        return 1\n    elif n == 1: \n        return factorial(n)\n    else: \n        return n * bell_Number(n-1",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = len(L) - L[0]\n    return remove_kth_element(L[k:], L[:k])\n    ",
        "num_ids": 36
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the k'th element in the list\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        list1.remove(new_list[i])\n    return new_list\n",
        "num_ids": 66
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None or len(L) == 0:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = list()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                break\n            else:\n                result.append(list1[i])\n        \n    return result\n",
        "num_ids": 76
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == L:\n        return list1\n    else:\n        return remove_kth_element(list1, L-1) + [list1.pop(L-1)] + remove_kth_element(list1, L-2)\n",
        "num_ids": 65
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    kth = L[-1]\n    L = L[:-1]\n    if len(L) < 1:\n        return []\n    else:\n        return remove_kth_element(list1, L)\n",
        "num_ids": 54
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == None:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    lst = []\n    for i in range(L):\n        lst.append(list1[i])\n    print(lst)\n",
        "num_ids": 36
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]\n",
        "num_ids": 11
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [list1.pop(L)] + remove_kth_element(list1, L+1)\n",
        "num_ids": 28
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Note: the length of the list must be at least 1\n    if len(test_list) < 1:\n        return 0\n    if len(test_list) == 1:\n        return test_list[0]\n    \n    # Write your code here\n    return max(test_list[0:N])",
        "num_ids": 75
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return None\n    if N == 1:\n        return test_list[0][0]\n",
        "num_ids": 31
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Write your code here\n    n = len(test_list)\n    temp = test_list[0]\n    # reverse_temp = temp.copy()\n    # reverse_temp.reverse()\n    temp.reverse()\n    temp.reverse()\n    i = 0\n    while i < N:\n        # print(len(test_list))\n        # print(i)\n        if i < N and test_list[i] == temp[i]:\n            i += 1\n            continue\n        if len(temp) <= i:\n            break\n        temp.append(test_list[i][i])\n        temp.pop(i)\n        i += 1\n    return temp[0]\n",
        "num_ids": 164
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_col = test_list[0][N-1]\n    for i in range(1, N):\n        if test_list[i][N-1] > max_col:\n            max_col = test_list[i][N-1]\n    return max_col\n",
        "num_ids": 69
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    row = 0\n    column = 0\n    temp = []\n    temp.append(test_list[row][column])\n    \n    for i in range(1, len(test_list)):\n        if i == N:\n            break\n        \n        if test_list[i][column] > temp[0]:\n            temp = []\n            temp.append(test_list[i][column])\n            row += 1\n            column += 1\n            \n        else:\n            column += 1\n            \n    return temp[0]\n",
        "num_ids": 126
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    assert N > 0\n    return max(test_list[i] for i in range(len(test_list)))\n",
        "num_ids": 30
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == len(test_list):\n        return test_list[N-1][0]\n    elif N == 0:\n        return None\n    else:\n        return max(test_list[N-1], max_of_nth(test_list, N-1))\n",
        "num_ids": 70
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N <= 0 or test_list is None:\n        raise ValueError(\"Invalid Input\")\n    else:\n        return test_list[0][N-1]\n",
        "num_ids": 41
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # your code goes here\n    return test_list[N - 1][N-1]\n",
        "num_ids": 26
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return lst\n        #TODO:\n        #1. If there are no sublists, return the original list.\n        #2. If there is one sublist, the function returns the result of the original sublist and adds that sublist to the result list.\n        #3. If there are two sublists, the function returns the result of the sublist and adds it to the result list.\n",
        "num_ids": 111
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # define two lists\n    first = []\n    second = []\n    \n    # traverse through the list and append each element to the first list\n    for i in lst:\n        first.append(i[0])\n    \n    # traverse through the list and append each element to the second list\n    for j in lst:\n        second.append(j[1])\n    \n    # concatenate the first list and second list into a single list\n    final = [first, second]\n    \n    return final\n",
        "num_ids": 121
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # copy the list to a new one\n    return lst[:2] + [[lst[0][0] + lst[1][0]] + lst[0][1:], lst[1][1:]]\n",
        "num_ids": 55
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in lst:\n        for j in i:\n            j.append(i[0][0])\n            j.append(i[0][1])\n        i.append([i[0][0],i[0][1]])\n    return lst\n",
        "num_ids": 65
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0][0], lst[1][1]]\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    if lst is None or len(lst) == 0: return None\n",
        "num_ids": 22
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    for l in lst:\n        lst1.append(l[0])\n    lst2 = []\n    for l in lst:\n        lst2.append(l[1])\n    return [lst1, lst2]\n",
        "num_ids": 68
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return lst\n    else:\n        return merge(lst[1:]) + lst[0]\n",
        "num_ids": 39
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        if i not in lst1:\n            lst1.append(i)\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    return lst1, lst2\n",
        "num_ids": 82
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # TODO: Write your code here\n    return sum(list(map(lambda x: x[1], test_list)))\n",
        "num_ids": 32
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum += item\n    return sum\n    \nprint(cummulative_sum((0,1,2,3,4,5)))\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9)))\n",
        "num_ids": 75
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = 0\n    for item in test_list:\n        cummulative += item\n    return cummulative\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n",
        "num_ids": 41
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # TODO: your code here\n    cummulative = 0\n    for x in test_list:\n        cummulative += x\n",
        "num_ids": 34
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for element in test_list:\n        cummulative_sum += element\n    return cummulative_sum\n",
        "num_ids": 37
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][1])\n    return new_list\n",
        "num_ids": 45
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for value in test_list:\n        sum = sum + value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    res = 0\n    for i in range(len(test_list)):\n        res += test_list[i]\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    a = []\n    for x in range(len(nums)):\n        for y in nums[x]:\n            a.append(y)\n    return tuple(a)\n",
        "num_ids": 45
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def average(num1, num2):\n        num1 = sum(num1)\n        num2 = sum(num2)\n        return (num1/num2)\n    average_tuple = [(average(num1, num2), num1) for num1 in nums for num2 in nums]\n    return average_tuple\n",
        "num_ids": 82
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in nums:\n        total.append(sum(i))\n    return total\n    # total = []\n    # for i in nums:\n    #     total.append(sum(i) / len(i))\n    # return total\n",
        "num_ids": 66
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            average.append(nums[i][j])\n    return average\n",
        "num_ids": 52
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(x) for x in [sum(num)/len(num) for num in nums]]\n",
        "num_ids": 28
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Code here\n    # print(nums)\n    # print(len(nums))\n    return [sum(nums[i])/len(nums[i]) for i in range(len(nums))]\n",
        "num_ids": 55
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    average = []\n    for num in nums:\n        total.append(sum(num))\n    for i in total:\n        average.append(i/len(nums))\n    return average\n",
        "num_ids": 54
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #init empty list\n    avg_list = []\n    # for tuple in nums:\n    #     for item in tuple:\n    #         avg_list.append(item)\n",
        "num_ids": 47
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if type(nums) is tuple:\n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return list(nums[0])\n        total = []\n        for num in nums:\n            for i in num:\n                total.append(i)\n        return total/len(nums)\n    else:\n        return \"Enter the correct data type\"\n",
        "num_ids": 101
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    numbers = []\n    for number in nums:\n        numbers.append(sum(number)/len(number))\n    return numbers\n",
        "num_ids": 35
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] % test_tup2[i]))\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tup1 = []\n    mod_tup2 = []\n    mod_tup1.extend(test_tup1)\n    mod_tup2.extend(test_tup2)\n",
        "num_ids": 54
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return test_tup1[0] % test_tup2[0] == test_tup1[1] % test_tup2[1]\n",
        "num_ids": 40
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = []\n    for i in test_tup1:\n        mod.append(i % test_tup2[0])\n    return mod\n",
        "num_ids": 38
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Write your code here\n    # print(tuple_modulo(test_tup1, test_tup2))\n    pass\n",
        "num_ids": 35
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return (test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1])\n    ",
        "num_ids": 41
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Check if the length of the tuple is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError(\"tuples must be of the same length\")\n    #get the modulo of each tuple\n    modulo = 0\n    for i in range(len(test_tup1)):\n        modulo = modulo + test_tup1[i] * test_tup2[i]\n    return modulo\n",
        "num_ids": 112
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i])\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # declaring variables\n    x = 0\n    y = 0\n",
        "num_ids": 17
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Find the value for the minimum number of jumps required\n    for i in range(steps + 1):\n        if i > d:\n            return i\n    # If no jumps are required, return zero\n    return 0\n",
        "num_ids": 52
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 1\n    elif d == 1:\n        if steps == 2:\n            return 1\n        elif steps > 2:\n            return min_Jumps(steps - 2, d - 1)\n    elif d == 2:\n        if steps == 3:\n            return 1\n        elif steps > 3:\n            return min_Jumps(steps - 3, d - 1)\n",
        "num_ids": 99
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    for step in range(steps):\n        d = d + 1\n        if d == 2*d:\n            break\n    return d\n",
        "num_ids": 34
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    '''\n    This function should take as input as a list of lists (d, step) of length d and as an integer as a parameter:\n    if the length of the list (d, step) is less than or equal to the length of the origin in 2d plane, then the function should return the number of jumps required.\n    '''\n    def is_in_convex_polygon(l, r, p):\n        '''\n        Check if a point is inside the convex polygon.\n        '''\n        # TODO: INSERT YOUR CODE HERE\n        if l[0]!= p[0]:\n            return False\n        if l[1]!= p[1]:\n            return False\n        return True\n    \n    # TODO: INSERT YOUR CODE HERE\n",
        "num_ids": 64
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or d == 2:\n        return -1\n    if steps == -1:\n        return 0\n    if steps == 0:\n        return 1\n    if steps % 2 == 0:\n        return min_Jumps(steps-1, d/2)\n    else:\n        return min_Jumps(steps-1, d*2)\n",
        "num_ids": 86
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    def minJumps(steps, d): \n        \n        ''' \n        Set up a table to store jump lengths in a new column \n        '''\n        \n        jump_lengths = {}\n        \n        for step in range(steps + 1): \n            \n            if step in jump_lengths: \n                jump_lengths[step] += 1\n            else: \n                jump_lengths[step] = 1\n        \n        ''' \n        Set up a table to store the shortest distance from any point \n        '''\n        \n        distance = {}\n        \n        for step in range(steps + 1): \n            \n            distance[step] = math.inf\n        \n        ''' \n        Set up a table to store the shortest distance from any point \n        '''\n        \n        shortest_distance = {}\n        \n        for step in range(steps + 1): \n            \n            shortest_distance[step] = math.inf\n        \n        ''' \n        Set up the jump lengths and distances \n        '''\n        \n        jumps = {}\n        \n        for step in range(steps + 1): \n            \n            distance[step] = 0\n            jumps[step] = 0\n            \n            for step2 in range(step + 1): \n            \n                if step2 in distance: \n                    distance[step] += distance[step2] \n                \n                if step2 in jumps: \n                    jumps[step2] += 1\n        \n        return distance, jumps\n    \n    ''' \n    Run a minimax algorithm on a given sequence of steps \n    '''\n    \n    # Set up the board\n    board = [[-math.inf, 0, 0, math.inf, 0], [0, math.inf, 0, math.inf, math.inf], [0, 0, math.inf, math.inf, 0], [0, 0, 0, math.inf, math.inf], [0, 0, 0, 0, math.inf]] \n    \n    # Set up the list of steps \n    steps = [] \n    \n    steps.append(0) \n    \n    # Set up the cost matrix \n    cost = {}\n    \n    cost[steps[0]] = 0\n    cost[steps[1]] = 1\n    cost[steps[2]] = 2\n    cost[steps[3]] = 3\n    cost[steps[4]] = 4\n    \n    # Set up the jumps matrix \n    jumps = {}\n    \n    jumps[steps[0]] = 0\n    jumps[steps[1]] = 1\n    jumps[steps[2]] = 2\n    jumps[steps[3]] = 3\n    jumps[steps[4]] = 4\n    \n    # Set up the distance matrix \n    distance = {}\n    \n    distance[steps[0]] = 0\n    distance[steps[1]] = 1\n    distance[steps[2]] = 2\n    distance[steps[3]] = 3\n    distance[steps[4]] = 4\n    \n    # Set up the shortest distance matrix \n    shortest_distance = {}\n    \n    shortest_distance[steps[0]] = 0\n    shortest_distance[steps[1]] = 1\n    shortest_distance[steps[2]] = 2\n    shortest_distance[steps[3]] = 3\n    shortest_distance[steps[4]] = 4\n    \n    # Set up the next step \n    next_step = [0, 1, 2, 3, 4]\n    \n    # Set up the last step \n    last_step = [5, 6, 7, 8, 9]\n    \n    ''' \n    Loop through the list of steps \n    '''\n    \n    for step in range(len(steps) - 1): \n        \n        # Reset the current distance matrix \n        current_distance = {}\n        \n        current_distance[steps[step]] = 0\n        current_distance[steps[step + 1]] = 1\n        \n        # Reset the current jumps matrix \n        current_jumps = {}\n        \n        current_jumps[steps[step]] = 0\n        current_jumps[steps[step + 1]] = 1\n        \n        # Reset the current cost matrix \n        current_cost = {}\n        \n        current_cost[steps[step]] = 0\n        current_cost[steps[step + 1]] = 1\n        \n        # Set the next step \n        next_step = [steps[step + 1], steps[step + 2], steps[step + 3], steps[step + 4]]\n        \n        # Set the last step \n        last_step = [steps[step + 5], steps[step + 6], steps[step + 7], steps[step + 8]]\n        \n        ''' \n        Loop through the list of steps \n        '''\n        \n        # Set the current steps \n        current_steps = []\n        \n        # Set the current jumps \n        current_jumps_ = []\n        \n        # Set the current cost \n        current_cost_ = []\n        \n        # Set the next steps \n        next_steps = []\n        \n        # Set the last steps \n        last_steps = []\n        \n        ''' \n        Run the minimax algorithm \n        '''\n        \n        # Set the current distance matrix \n        current_distance = {}\n        \n        # Set the current jumps matrix \n        current_jumps = {}\n        \n        # Set the current cost matrix \n        current_cost = {}\n        \n        # Set the next step \n        next_step = [0, 1, 2, 3, 4]\n        \n        # Set the last step \n        last_step = [5, 6, 7, 8, 9]\n        \n        # Set the current steps \n        current_steps = []\n        \n        # Set the current jumps \n        current_jumps_ = []\n        \n        # Set the current cost \n        current_cost_ = []\n        \n        # Set the next steps \n        next_steps = []\n        \n        # Set the last steps \n        last_steps = []\n        \n        # Set the current cost matrix \n        current_cost = {}\n        \n        # Set the next step \n        next_step = [0, 1, 2, 3, 4]\n        \n        # Set the last step \n        last_step = [5, 6, 7, 8, 9]\n        \n        ''' \n        Run the minimax algorithm \n        '''\n        \n        # Set the current distance matrix \n        current_distance = {}\n        \n        # Set the current jumps matrix \n        current_jumps = {}\n        \n        # Set the current cost matrix \n        current_cost = {}\n        \n        # Set the next step \n        next_step = [0, 1, 2, 3, 4]\n        \n        # Set the last step \n        last_step = [5, 6, 7, 8, 9]\n        \n        # Set the current steps \n        current_steps = []\n        \n        # Set the current jumps \n        current_jumps_ = []\n        \n        # Set the current cost \n        current_cost_ = []\n        \n        # Set the next steps \n        next_steps = []\n        \n        # Set the last steps \n        last_steps = []\n        \n        # Set the current cost matrix \n        current_cost = {}\n        \n        # Set the next step \n        next_step = [0, 1, 2, 3, 4]\n        \n        # Set the last step \n        last_step = [5, 6, 7, 8, 9]\n        \n        # Set the current cost matrix \n        current_cost = {}\n        \n        # Set the next step \n        next_step = [0, 1, 2, 3, 4]\n        \n        # Set the last step \n        last_step = [5, 6, 7, 8, 9]\n        \n        ''' \n        Run the minimax algorithm \n        '''\n        \n        # Set the current distance matrix \n        current_distance = {}\n        \n        # Set the current jumps matrix \n        current_jumps = {}\n        \n        # Set the current cost matrix \n        current_cost = {}\n        \n        # Set the next step \n        next_step = [0, 1, 2, 3, 4]\n        \n        # Set the last step \n        last_step = [5, 6, ",
        "num_ids": 105
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    f = 1\n    while(f*f < steps):\n        f *= d\n    return f*f\n",
        "num_ids": 29
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Write your code here\n    if steps == 0:\n        return 1\n    \n    if (steps > d):\n        return 0\n    if (steps == d):\n        return 1\n        \n    # left\n    jumps = min_Jumps(steps - 1, d)\n    # right\n    jumps = min(jumps, min_Jumps(steps - d, d))\n    # up\n    jumps = min(jumps, min_Jumps(steps - d, d - 1))\n    # down\n    jumps = min(jumps, min_Jumps(steps - d - 1, d))\n    return jumps\n",
        "num_ids": 151
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def min_Jumps(steps, d):\n        grid = [\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]\n        ]\n        visited = [\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]\n        ]\n        for step in steps:\n            current_d = d\n            visited[current_d][current_d] = 1\n            while current_d!= 0:\n                current_d = (current_d - 1) % 4\n                visited[current_d][current_d] = 1\n",
        "num_ids": 230
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1/nums2\n",
        "num_ids": 12
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(0,len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\ndef average(nums):\n    '''\n    Write a function to compute the average of a list.\n    '''\n    new_list = []\n    for i in range(0,len(nums)):\n        new_list.append(nums[i]/len(nums))\n    return new_list\ndef unique(nums):\n    '''\n    Write a function to determine whether an element is unique or not.\n    '''\n    new_list = []\n    for i in range(0,len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    return new_list\ndef count_sort(arr):\n    '''\n    Write a function that takes an unsorted array as its only argument and rearranges it into a\n    sorted, max-oriented array. You can assume the values in the array will always be in ascending order.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        j = 0\n        while j <= i:\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n            j+=1\n    return arr\ndef selection_sort(arr):\n    '''\n    Write a function that takes an unsorted array as its only argument and rearranges it into a sorted,\n    max-oriented array. You can assume the values in the array will always be in ascending order.\n    '''\n    for i in range(len(arr)):\n        # find the minimum element in remaining unsorted array\n        min_val = i\n        for j in range(i+1,len(arr)):\n            if arr[j] < arr[min_val]:\n                min_val = j\n        # swap the found minimum element with the first element\n        arr[i],arr[min_val] = arr[min_val],arr[i]\n    return arr\ndef selection_sort_alternative(arr):\n    '''\n    Write a function that takes an unsorted array as its only argument and rearranges it into a sorted,\n    max-oriented array. You can assume the values in the array will always be in ascending order.\n    '''\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1,len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i],arr[min_idx] = arr[min_idx],arr[i]\n    return arr\ndef merge(left,right):\n    '''\n    Write a function that merges the two sorted arrays, and returns the new sorted array.\n    '''\n    new_list = []\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            new_list.append(left[i])\n            i+=1\n        else:\n            new_list.append(right[j])\n            j+=1\n    new_list += left[i:]\n    new_list += right[j:]\n    return new_list\ndef merge_sort(arr):\n    '''\n    Write a function that sorts an unsorted array using the merge sort algorithm.\n    '''\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left,right)\ndef merge_sort_alternative(arr):\n    '''\n    Write a function that sorts an unsorted array using the merge sort algorithm.\n    '''\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort_alternative(left)\n    right = merge_sort_alternative(right)\n    return merge(left,right)\ndef quick_sort(arr):\n    '''\n    Write a function that takes an unsorted array as its only argument and rearranges it into a sorted,\n    max-oriented array. You can assume the values in the array will always be in ascending order.\n    '''\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = [x for x in arr[1:] if x <= pivot]\n    right = [x for x in arr[1:] if x > pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\ndef quick_sort_alternative(arr):\n    '''\n    Write a function that takes an unsorted array as its only argument and rearranges it into a sorted,\n    max-oriented array. You can assume the values in the array will always be in ascending order.\n    '''\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = [x for x in arr[1:] if x <= pivot]\n    right = [x for x in arr[1:] if x > pivot]\n    return quick_sort_alternative(left) + [pivot] + quick_sort_alternative(right)\ndef radix_sort(arr):\n    '''\n    Write a function that sorts an array using the radix sort algorithm.\n    '''\n    max_num = max(arr)\n    arr = [int(x/max_num*10) for x in arr]\n    return arr\ndef insertion_sort(arr):\n    '''\n    Write a function that sorts an unsorted array using the insertion sort algorithm.\n    '''\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j] :\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\ndef insertion_sort_alternative(arr):\n    '''\n    Write a function that sorts an unsorted array using the insertion sort algorithm.\n    '''\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j] :\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\ndef count_sort(arr):\n    '''\n    Write a function that sorts an unsorted array using the count sort algorithm.\n    '''\n    for i in range(0,len(arr)):\n        j = 0\n        while j <= i:\n            if arr[j] < arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n            j+=1\n    return arr\ndef selection_sort(arr):\n    '''\n    Write a function that sorts an unsorted array using the selection sort algorithm.\n    '''\n    for i in range(0,len(arr)):\n        min_idx = i\n        for j in range(i+1,len(arr)):\n            if arr[min_idx] < arr[j]:\n                min_idx = j\n        arr[i],arr[min_idx] = arr[min_idx],arr[i]\n    return arr\ndef selection_sort_alternative(arr):\n    '''\n    Write a function that sorts an unsorted array using the selection sort algorithm.\n    '''\n    for i in range(0,len(arr)):\n        min_idx = i\n        for j in range(i+1,len(arr)):\n            if arr[min_idx] < arr[j]:\n                min_idx = j\n        arr[i],arr[min_idx] = arr[min_idx],arr[i]\n    return arr\ndef heapify(arr,n,i):\n    '''\n    Write a function that sorts an unsorted array using the heapify algorithm.\n    '''\n    l = 2*i + 1\n    r = 2*i + 2\n    i",
        "num_ids": 22
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # get the length of two lists\n    len1 = len(nums1)\n    len2 = len(nums2)\n    \n    # use stack to keep track of the number of elements in each list.\n    stack = []\n    \n    # initialize the stack to contain the top element of each list\n    # make sure each stack has length 1.\n    # when stack is empty, return (None,None)\n    while stack or len(nums1):\n        while len(stack)>0 and nums1[stack[-1]]<nums2[stack[-1]]:\n            top = stack.pop()\n            nums1[top] = nums1[top]//nums2[stack[-1]]\n        stack.append(nums1.pop(0))\n    return (nums1,nums2)\n",
        "num_ids": 198
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print(nums1)\n    print(nums2)\n    count=0\n    new_list=[]\n    for x in range(len(nums1)):\n        for y in range(len(nums2)):\n            if nums1[x]==nums2[y]:\n                count=count+1\n            else:\n                new_list.append(nums1[x])\n                new_list.append(nums2[y])\n    print(count,count/len(nums1))\n    print(new_list)\n    # return new_list\n",
        "num_ids": 142
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)<len(nums2):\n        nums1,nums2=nums2,nums1\n    nums1=sorted(nums1)\n    nums2=sorted(nums2)\n    index=0\n    total=0\n    index2=0\n    while index<len(nums1):\n        if nums1[index]==nums2[index2]:\n            total+=1\n        index+=1\n    return total\ndef main():\n    nums1=[]\n    nums2=[]\n    nums1=input(\"Enter your numbers separated by a comma: \").split(',')\n    nums2=input(\"Enter your numbers separated by a comma: \").split(',')\n    if len(nums1)<len(nums2):\n        nums1,nums2=nums2,nums1\n    print(div_list(nums1,nums2))\nmain(",
        "num_ids": 232
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!=len(nums2):\n        print(\"Please enter the same number of elements\")\n    else:\n        list1 = []\n        list2 = []\n        for i in range(len(nums1)):\n            list1.append(nums1[i])\n            list2.append(nums2[i])\n        return list1,list2\n",
        "num_ids": 94
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # initialize lists\n    divide = []\n    # iterate over the list\n    for num in nums1:\n        # if the element is divisible by num then add the current element to divide list\n        if num%nums1[0] == 0:\n            divide.append(nums1[0])\n            # print(divide)\n        # if the element is not divisible by num then add the current element to divide list\n        else:\n            divide.append(num)\n            # print(divide)\n    return divide\n",
        "num_ids": 129
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def split(nums,l,r):\n        #we cannot divide the lists into two parts\n        if l+r==nums:\n            return nums[l:r]\n        #we can divide the lists into two parts\n        mid = l + (r-l)//2\n        #we dont use the middle element since it is not used to divide the two lists\n        return split(nums[:mid],l,mid) + split(nums[mid+1:],mid+1,r)\n    #if both are same list then we return empty\n    #we use split function to split the two lists to get the part of a list\n    #then we return it\n    if len(nums1) == len(nums2):\n        return []\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    return split(nums1,0,len(nums1)) + split(nums2,0,len(nums2))\n",
        "num_ids": 243
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!=len(nums2):\n        return None\n    else:\n        i = 0\n        j = 0\n        if len(nums1)%2==0:\n            while i < len(nums1):\n                if nums1[i]<nums2[j]:\n                    temp = nums1[i]\n                    nums1[i] = nums2[j]\n                    nums2[j] = temp\n                    i+=1\n                elif nums1[i]>nums2[j]:\n                    temp = nums1[i]\n                    nums1[i] = nums2[j]\n                    nums2[j] = temp\n                    j+=1\n        else:\n            while i < len(nums1):\n                if nums1[i]<nums2[j]:\n                    temp = nums1[i]\n                    nums1[i] = nums2[j]\n                    nums2[j] = temp\n                    j+=1\n                elif nums1[i]>nums2[j]:\n                    temp = nums1[i]\n                    nums1[i] = nums2[j]\n                    nums2[j] = temp\n                    i+=1\n",
        "num_ids": 302
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    #// get the length of the lists\n    l1 = len(nums1)\n    l2 = len(nums2)\n    \n    #// create the initial answer\n    ans = []\n    \n    #// loop through the lists\n    for i in range(l1):\n        #// get the middle element of the first list\n        if (l2!= 0):\n            #// if the element is not the last element of the second list\n            if (nums2[i]!= nums2[i+l2-1]):\n                #// get the middle element of the first list\n                temp = nums1[i:i+l2]\n                #// get the middle element of the second list\n                temp2 = nums2[0:l2]\n                #// add the middle elements together\n                ans.append(temp + temp2)\n                #// pop the middle element of the first list\n                nums1.pop(i)\n                #// pop the middle element of the second list\n                nums2.pop(0)\n        else:\n            #// if the element is the last element of the second list\n            if (nums2[i] == nums2[i+l2-1]):\n                #// get the middle element of the first list\n                temp = nums1[i:i+l2]\n                #// get the middle element of the second list\n                temp2 = nums2[l2:]\n                #// add the middle elements together\n                ans.append(temp + temp2)\n                #// pop the middle element of the first list\n                nums1.pop(i)\n                #// pop the middle element of the second list\n                nums2.pop(l2)\n    return ans\n",
        "num_ids": 412
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_str = ''\n    for i in range(0, len(test_str)):\n        if test_str[i].isdigit():\n            my_str += test_str[i]\n        else:\n            if my_str!= '':\n                my_str += str(test_str[i])\n            else:\n                my_str = str(test_str[i])\n    return my_str\n",
        "num_ids": 102
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(' ','')\n    test_str_list = list(test_str)\n    for i in range(0,len(test_str_list)-1):\n        if test_str_list[i] == test_str_list[i+1]:\n            test_str_list[i+1] = ''\n            test_str_list[i] = ''\n    test_str = ''.join(test_str_list)\n    return test_str\n",
        "num_ids": 120
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # if empty string, return\n    if test_str.strip() == \"\":\n        return \"empty string\"\n    # if string is not in list, return\n    if not test_str.isnumeric():\n        return \"non-numeric string\"\n    # iterate through string, move all numbers in range\n    for i in range(0, len(test_str)):\n        if test_str[i].isnumeric():\n            continue\n        # if not a number, return\n        elif not test_str[i].isalpha():\n            return \"invalid character\"\n        # if number, move it\n        else:\n            test_str = test_str[:i] + test_str[i+1:]\n    return test_str\n",
        "num_ids": 178
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) == 0:\n        return\n    \n    test_str_list = list(test_str)\n    new_string = ''.join(test_str_list)\n    print(new_string)\n    list(map(lambda x: x+1, list(map(int, new_string.split('-')))))\n    \n    \ndef main():\n    '''\n    Example 1:\n    Input: s = \"3-2\"\n    Output: \"3-2->1->2\"\n    Explanation:\n    s = \"3-2\" --> \"3-2->1->2\"\n    s = \"3-2->1\" --> \"3-2->1->2\"\n    s = \"2-1->1\" --> \"2-1->1->2\"\n    s = \"0-1->1\" --> \"0-1->1->2\"\n    s = \"0-1\" --> \"0-1->1->2\"\n    s = \"0\" --> \"0->1->2\"\n    '''\n    \n    move_num(\"3-2\")\n    move_num(\"3-2->1->2\")\n    move_num(\"2-1->1\")\n    move_num(\"0-1->1->2\")\n    move_num(\"0-1\")\n    move_num(\"0\")\n",
        "num_ids": 72
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Your code here\n    result = 0\n    test_str = test_str.split()\n    for x in test_str:\n        result += int(x)\n    result = str(result)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    count = 0\n    str_list = test_str.split()\n    for i in str_list:\n        count += 1\n        str_list[count] = int(i)\n    return str_list\n",
        "num_ids": 52
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for index in range(len(test_str)):\n        if index % 2 == 0:\n            new_str += test_str[index]\n    return new_str\n",
        "num_ids": 50
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    '''\n    test_str = test_str.replace('0', '1').replace('1', '0').replace('1', '0').replace('1', '0').replace('1', '0').replace('1', '0').replace('0', '1').replace('1', '0').replace('0', '0').replace('1', '0').replace('0', '0')\n    '''\n    test_str = test_str.replace('0', '0').replace('1', '1').replace('1', '1').replace('1', '0').replace('0', '0').replace('1', '1').replace('0', '1').replace('1', '0').replace('0', '0').replace('1', '0').replace('0', '1').replace('0', '0')\n    return test_str\n",
        "num_ids": 102
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\" \", \"\")\n    test_str = test_str.replace(\"\\'\", \"\")\n    test_str = test_str.replace(\"]\", \"]\")\n    test_str = test_str.replace(\"[\", \"]\")\n    test_str = test_str.replace(\",\", \"\")\n    test_str = test_str.replace(\";\", \"\")\n    test_str = test_str.replace(\"'\", \"\")\n    test_str = test_str.replace(\".\", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\"{\", \"\")\n    test_str = test_str.replace(\"}\", \"\")\n    test_str = test_str.replace(\"~\", \"\")\n    test_str = test_str.replace(\"*\", \"\")\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"/\", \"\")\n    test_str = test_str.replace(\"<\", \"\")\n    test_str = test_str.replace(\">\", \"\")\n    test_str = test_str.replace(\"|\", \"\")\n    test_str = test_str.replace(\"~\", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\"{\", \"\")\n    test_str = test_str.replace(\"}\", \"\")\n    test_str = test_str.replace(\"\\'\", \"\")\n    test_str = test_str.replace(\"\\\"\", \"\")\n    return test_str\n",
        "num_ids": 424
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # your code goes here\n    test_str = test_str[::-1]\n    return test_str\n",
        "num_ids": 29
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    m = len(a)\n    if m == 1:\n        return m\n    # TODO: Write your code here\n    max_sum = max(a)\n    l = max_sum % a[0]\n    for i in range(1, len(a)):\n        if a[i] % l == 0:\n            l = a[i] // l\n    #print(l)\n    return max(l, len(a) - 1)\n",
        "num_ids": 110
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    '''\n    #Implement the function.\n    This function takes in an array and returns the size of the largest subset of a.\n    The function should return the sum of the elements in the given array.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    numbers = set(a)\n    s = 1\n    for x in numbers:\n        if len(numbers)%2 == 0:\n            s+=1\n            if s > x:\n                return s\n        else:\n            s+=1\n    return s\n",
        "num_ids": 65
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    answer = 0\n    curr = 1\n    for num in a:\n        while curr % num == 0:\n            curr += 1\n        answer = max(answer, curr)\n    return answer\n",
        "num_ids": 51
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    length = len(a)\n    prev = 0\n    final = 0\n    for i in range(length):\n        for j in range(i+1, length):\n            if a[i] % a[j] == 0:\n                prev = a[i]\n                a[i] = a[j]\n                a[j] = prev\n                final = max(final, a[i])\n    return final + 1\n",
        "num_ids": 102
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    # Base case: If all numbers are divisible by each other, so we can just return the size of the largest subset\n    if all(sum(x) % sum(y) == 0 for x, y in zip(a, a[1:])):\n        return n\n",
        "num_ids": 72
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # we need to look for what we can divide the list into a new one.\n    # if the number is divisible by any number from the list, we say it is divisible. \n    # else, it is not divisible.\n    # the number list needs to be sorted, otherwise it is not divisible.\n    # we need to check all possible numbers from the list as we can divide the list.\n    # each number is used to check if it is divisible by any other number.\n    # if so, return the size of that number.\n    \n    # define the set of possible numbers.\n    possible_numbers = set(range(1, len(a)+1))\n    \n    # define the result.\n    result = []\n    \n    # iterate over the list of numbers.\n    for n in range(len(a)):\n        # check if the number is divisible by any number from the list.\n        # if so, add it to the result list.\n        if n in possible_numbers:\n            result.append(n)\n            possible_numbers.remove(n)\n        \n    return len(result",
        "num_ids": 264
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Write your code here.\n    l = []\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i]%a[j] == 0:\n                l.append(a[i])\n    return len(l",
        "num_ids": 73
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from collections import Counter\n    counter = Counter(a)\n    res = []\n    for i, e in counter.items():\n        if e == 1:\n            res.append(i)\n    return len(res)\n",
        "num_ids": 54
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    subset_size = []\n    temp_size = 0\n    for i in range(len(a)):\n        temp_size = 0\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                temp_size += 1\n        if temp_size > temp_size_size:\n            temp_size_size = temp_size\n            temp_subset = [a[i], a[j]]\n            temp_subset.sort()\n            subset_size = temp_subset\n    return subset_size\n",
        "num_ids": 146
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise TypeError(\"the lists must be same size\")\n    if n % 2 == 0:\n        return (arr1[int(n / 2)] + arr2[int(n / 2)]) / 2\n    else:\n        return arr1[int(n / 2)]\n",
        "num_ids": 80
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr1[0]\n    mid = int(n/2)\n    if arr1[mid] > arr2[mid]:\n        return get_median(arr1, arr2, mid)\n    elif arr1[mid] < arr2[mid]:\n        return get_median(arr1, arr2, mid)\n    else:\n        return get_median(arr1[mid + 1:], arr2[mid:], n - mid)\n    \ndef main():\n    n = int(input())\n    if n < 0:\n        print(\"Negative numbers are not allowed\")\n    elif n > 10**9:\n        print(\"Out of range\")\n    else:\n        arr1 = []\n        arr2 = []\n        for i in range(0, n):\n            arr1.append(int(input()))\n            arr2.append(int(input()))\n        print(get_median(arr1, arr2, n))\n",
        "num_ids": 248
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(float(arr1[i] + arr2[i]))\n    arr.sort()\n    return arr[n//2]\n    \ndef get_mode(arr):\n    '''\n    Write a function that takes an unsorted array as input and returns the maximum element.\n    For example, given the array [3,4,1,6,2,5] return its maximum element.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the maximum key/value pair\n    for key, value in dict.items():\n        if value == max(dict.values()):\n            return key\n        \ndef get_variance(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the variance of the elements.\n    For example, given the array [3,4,1,6,2,5] return its variance.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the variance of the elements\n    summ = 0\n    for key, value in dict.items():\n        summ += (value - 1) * (value - 1)/(len(arr) - 1 - value)\n    return summ**0.5\n    \ndef get_standard_deviation(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the standard deviation of the elements.\n    For example, given the array [3,4,1,6,2,5] return its standard deviation.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the standard deviation of the elements\n    summ = 0\n    for key, value in dict.items():\n        summ += (value - 1)**0.5\n    return summ**0.5\n    \ndef get_quartile(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the 75th, 25th, and median of the elements.\n    For example, given the array [3,4,1,6,2,5] return its median, 75th, 25th and 25th.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the median of the elements\n    return (dict[min(dict)] + dict[max(dict)])/2\n    \ndef get_mode(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the maximum element.\n    For example, given the array [3,4,1,6,2,5] return its maximum element.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the maximum key/value pair\n    return max(dict, key=dict.get)\n    \ndef get_standard_deviation(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the standard deviation of the elements.\n    For example, given the array [3,4,1,6,2,5] return its standard deviation.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the standard deviation of the elements\n    summ = 0\n    for key, value in dict.items():\n        summ += (value - 1)**0.5\n    return summ**0.5\n    \ndef get_variance(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the variance of the elements.\n    For example, given the array [3,4,1,6,2,5] return its variance.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the variance of the elements\n    summ = 0\n    for key, value in dict.items():\n        summ += (value - 1)**2/len(arr)\n    return summ**0.5\n    \ndef get_standard_deviation(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the standard deviation of the elements.\n    For example, given the array [3,4,1,6,2,5] return its standard deviation.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the standard deviation of the elements\n    summ = 0\n    for key, value in dict.items():\n        summ += (value - 1)**0.5\n    return summ**0.5\n    \ndef get_mode(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the maximum element.\n    For example, given the array [3,4,1,6,2,5] return its maximum element.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the maximum key/value pair\n    return max(dict, key=dict.get)\n    \ndef get_median(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the median of the elements.\n    For example, given the array [3,4,1,6,2,5] return its median.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr[i]] += 1\n        else:\n            dict[arr[i]] = 1\n    # Return the median of the elements\n    return (dict[min(dict)] + dict[max(dict)])/2\n    \ndef get_mode(arr):\n    '''\n    Write a function that takes an unsorted array as input\n    and returns the maximum element.\n    For example, given the array [3,4,1,6,2,5] return its maximum element.\n    '''\n    # Initialize an empty dictionary to store the count of the elements\n    dict = {}\n    # Convert the array to dictionary\n    for i in range(len(arr)):\n        if (arr[i] in dict):\n            dict[arr",
        "num_ids": 57
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    if m == n:\n        return (min(arr1), max(arr1))\n    \n    if m > n:\n        left = arr1\n        right = arr2\n        mid = (m + n) // 2\n        left_min, left_max = get_median(left, right, mid)\n        right_min, right_max = get_median(left, right, n - mid)\n        return (left_min + right_min) / 2, (left_max + right_max) / 2\n    else:\n        left = arr2\n        right = arr1\n        mid = (m + n) // 2\n        left_min, left_max = get_median(left, right, mid)\n        right_min, right_max = get_median(left, right, n - mid)\n        return (left_min + right_min) / 2, (left_max + right_max) / 2\n",
        "num_ids": 240
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m1 = len(arr1)\n    m2 = len(arr2)\n    if m1 > m2:\n        return get_median(arr2, arr1, m2)\n    else:\n        return get_median(arr1, arr2, m1)\n",
        "num_ids": 69
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr1[0]\n    if n % 2 == 0:\n        return get_median(arr1[:n//2], arr2[:n//2], n//2)\n    return get_median(arr1[n//2:], arr2[n//2:], n//2)\n    \ndef kth_smallest_value(arr1, arr2, k):\n    '''\n    Write a function to find the kth smallest element in sorted list.\n    '''\n    if not arr1 or not arr2:\n        return None\n    return get_smallest_value(arr1, arr2, k)\n",
        "num_ids": 35
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    if n % 2 == 0:\n        m = (n - 1) / 2\n        return (arr1[int(m)] + arr2[int(m)]) / 2\n    else:\n        m = (n - 1) / 2\n        return arr1[int(m)]\n",
        "num_ids": 122
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr1) < n:\n        arr1, arr2 = arr2, arr1\n    if len(arr2) < n:\n        arr1, arr2 = arr2, arr1\n    \n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    \n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n    \n    \n    ",
        "num_ids": 157
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = arr1.copy()\n    l2 = arr2.copy()\n    l1.sort()\n    l2.sort()\n    if n % 2!= 0:\n        return (l1[(n-1)//2] + l2[(n-1)//2]) / 2.0\n    else:\n        return l1[n//2]\n    \ndef main():\n    '''\n    write your own code here\n    '''\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    print(get_median(arr, arr, n))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 64
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # no need to find the median of two sorted lists\n    if n <= 1:\n        return arr1[n//2]\n",
        "num_ids": 32
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(num):\n        result = 1\n        while num > 0:\n            if num % 10 == num//10:\n                result = result * num\n            else:\n                result = result * num\n            num = num // 10\n        return result\n    return map(power,nums)\n",
        "num_ids": 71
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.sort()\n",
        "num_ids": 9
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def pow(num):\n        '''\n        Create the function that computes the n-th power of each number in a list.\n        '''\n        return num**n\n    return map(pow,nums)\n",
        "num_ids": 19
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(nums[i] ** n)\n    return lst\n",
        "num_ids": 41
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    elif len(nums) <= n:\n        return [nums[0]]\n    else:\n        return [nums[0]**i for i in range(1,len(nums))",
        "num_ids": 60
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == '':\n        return False\n    elif string.upper() == string:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return False\n    if string == string.upper() or string == string.lower():\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    conversion_map = {\"A\": \"a\", \"B\": \"b\", \"C\": \"c\", \"D\": \"d\", \"E\": \"e\", \"F\": \"f\", \"G\": \"g\", \"H\": \"h\", \"I\": \"i\", \"J\": \"j\", \"K\": \"k\", \"L\": \"l\", \"M\": \"m\", \"N\": \"n\", \"O\": \"o\", \"P\": \"p\", \"Q\": \"q\", \"R\": \"r\", \"S\": \"s\", \"T\": \"t\", \"U\": \"u\", \"V\": \"v\", \"W\": \"w\", \"X\": \"x\", \"Y\": \"y\", \"Z\": \"z\", \" \": \" \"}\n    new_str = ''\n    for char in string:\n        new_str += conversion_map.get(char, char) +''\n",
        "num_ids": 203
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[1]\n    newList[1] = newList[0]\n    newList[0] = temp\n    \ndef main():\n    '''\n    Main function for program\n    '''\n    newList = []\n    while(True):\n        print(\"Enter the number of elements in your list.Enter 0 to quit\")\n        userInput = input()\n        if userInput == '0':\n            print(\"Good Bye...\")\n            break\n        if userInput!= \"\":\n            n = int(userInput)\n            for i in range(n):\n                newList.append(int(input()))\n            \n            print(\"The new list is:\")\n            printList(newList)\n            print()\n            \n            selection = input(\"Do you want to perform any other operation? Enter 1 or 0\")\n            if selection == '0':\n                print(\"Good Bye...\")\n                break\n            if selection == '1':\n                swap_List(newList)\n                print(\"The new list is:\")\n                printList(newList)\n                print()\n                \n            if selection == '2':\n                print(\"You have chosen to interchange the first and last element of your list.\")\n                newList.insert(0, newList.pop())\n                newList.insert(len(newList), newList.pop())\n                newList.insert(len(newList), newList.pop())\n                newList.insert(0, newList.pop())\n                newList.insert(len(newList), newList.pop())\n                newList.insert(0, newList.pop())\n                newList.insert(len(newList), newList.pop())\n                printList(newList)\n                print()\n            \n            if selection == '3':\n                print(\"You have chosen to delete an element from your list.\")\n                newList.remove(int(input(\"Enter the element you want to delete from the list: \")))\n                printList(newList)\n                print()\n            \n            if selection == '4':\n                print(\"You have chosen to insert an element from your list.\")\n                newList.append(int(input(\"Enter the element you want to insert: \")))\n                printList(newList)\n                print()\n            \n            if selection == '5':\n                print(\"You have chosen to remove an element from your list.\")\n                newList.remove(int(input(\"Enter the element you want to remove from the list: \")))\n                printList(newList)\n                print()\n            \n            if selection == '6':\n                print(\"You have chosen to insert an element from your list.\")\n                newList.insert(int(input(\"Enter the element you want to insert: \")), int(input(\"Enter the element you want to insert: \")))\n                printList(newList)\n                print()\n            \n            if selection == '7':\n                print(\"You have chosen to delete an element from your list.\")\n                newList.remove(int(input(\"Enter the element you want to delete from the list: \")))\n                printList(newList)\n                print()\n            \n            if selection == '8':\n                print(\"You have chosen to swap the first and last element in your list.\")\n                newList = swap_List(newList)\n                printList(newList)\n                print()\n                \n            if selection == '9':\n                print(\"Good bye...\")\n                break\n            \nif __name__ == '__main__':\n    main()",
        "num_ids": 755
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Your code here\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \n    \ndef remove_duplicates(myList):\n    '''\n    Write a python function to remove duplicate elements from a given list.\n    '''\n    # Your code here\n    newList = []\n    for item in myList:\n        if item not in newList:\n            newList.append(item)\n    return newList\n    \n    \ndef insert_at_start(newList, value):\n    '''\n    Write a python function to insert the value at the start of a given list.\n    '''\n    # Your code here\n    newList.append(value)\n    return newList\n    \n    \ndef insert_at_end(newList, value):\n    '''\n    Write a python function to insert the value at the end of a given list.\n    '''\n    # Your code here\n    newList.append(value)\n    return newList\n    \n    \ndef insert_at_position(newList, position, value):\n    '''\n    Write a python function to insert the value at a given position in a given list.\n    '''\n    # Your code here\n    newList.insert(position, value)\n    return newList\n    \n    \ndef delete_first_occurrence(myList, value):\n    '''\n    Write a python function to remove the first occurrence of a given value from a given list.\n    '''\n    # Your code here\n    myList.remove(value)\n    return myList\n    \n    \ndef delete_last_occurrence(myList, value):\n    '''\n    Write a python function to remove the last occurrence of a given value from a given list.\n    '''\n    # Your code here\n    myList.remove(value)\n    return myList\n    \n    \ndef replace_first_value(myList, oldValue, newValue):\n    '''\n    Write a python function to replace the value of a given value at the start of a given list.\n    '''\n    # Your code here\n    myList[0] = newValue\n    return myList\n    \n    \ndef replace_last_value(myList, oldValue, newValue):\n    '''\n    Write a python function to replace the value of a given value at the end of a given list.\n    '''\n    # Your code here\n    myList[-1] = newValue\n    return myList\n    \n    \ndef remove_first_value(myList, oldValue):\n    '''\n    Write a python function to remove the first occurrence of a given value from a given list.\n    '''\n    # Your code here\n    myList.remove(oldValue)\n    return myList\n    \n    \ndef remove_last_value(myList, oldValue):\n    '''\n    Write a python function to remove the last occurrence of a given value from a given list.\n    '''\n    # Your code here\n    myList.remove(oldValue)\n    return myList\n    \n    \ndef print_List(myList):\n    '''\n    Write a python function to print the contents of a given list.\n    '''\n    # Your code here\n    print(myList)\n    \n    \nif __name__ == '__main__':\n    # Test your code by uncommenting the first line\n    '''\n    # Uncomment this line for the first test case\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list1)\n    list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list2)\n    list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list3)\n    list4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list4)\n    list5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list5)\n    list6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list6)\n    list7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list7)\n    list8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list8)\n    '''\n    # Test your code by uncommenting the second line\n    list7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list7)\n    list8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list8)\n    list9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list9)\n    list10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list10)\n    list11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list11)\n    list12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list12)\n    list13 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list13)\n    list14 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list14)\n    list15 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list15)\n    list16 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list16)\n    list17 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list17)\n    list18 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list18)\n    list19 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list19)\n    list20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list20)\n    list21 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list21)\n    list22 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list22)\n    list23 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list23)\n    list24 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list24)\n    list25 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list25)\n    list26 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list26)\n    list27 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list27)\n    list28 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list28)\n    list29 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list29)\n    list30 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list30)\n    list31 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list31)\n    list32 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list32)\n    list33 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list33)\n    list34 = [1, 2, 3, 4, 5, 6, 7, 8, 9",
        "num_ids": 928
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    j = 0\n    tempList = []\n    tempList = newList[:]\n    # print(tempList)\n    \n    while (i < len(tempList)):\n        j = i\n        if (tempList[i] == 'd'):\n            tempList[i], tempList[j] = tempList[j], tempList[i]\n        i = i + 1\n    \n    # print(tempList)\n    return tempList\n",
        "num_ids": 113
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0: \n        return newList \n    \n    mid = int(len(newList)/2) \n    first = newList[:mid] \n    second = newList[mid:] \n    \n    first = swap_List(first) \n    second = swap_List(second) \n    \n    newList = first + second \n    \n    return newList \n",
        "num_ids": 100
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    newList.append(newList.pop(0))\n    newList.append(newList.pop())\n    newList.reverse()\n    return newList\n",
        "num_ids": 47
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #swap the first and last element\n    print(\"swapping first and last element\")\n    #newList.append(newList.pop(0))\n    print(newList)\n    newList.reverse()\n    #newList.insert(0,newList.pop())\n    print(newList)\n    return newList\n",
        "num_ids": 79
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.insert(0, newList.pop())\n    newList.insert(len(newList), newList.pop())\n",
        "num_ids": 33
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = list(newList) \n    for i in range(0,len(newList)): \n        newList[i], newList[-1] = newList[-1], newList[i] \n    return newList\n ",
        "num_ids": 61
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[1:2] + newList[2:0:-1]\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    #get the radii of the circle\n    c = r * r\n    \n    #check for the maximum area of the triangle\n    area = c * (c - 2 * r)\n    if(area > 4 * (r ** 2)) : \n        print(\"Error : invalid input\")\n    else : \n        print(\"The area of the triangle is {:.2f}\".format(area))\n    ",
        "num_ids": 97
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r<=0:\n        return 0\n    elif r>0:\n        while r>0:\n            if r>=1:\n                print(r,\"=\",triangle_area(r-1))\n            r=r-1\n        print(r,\"=\",triangle_area(r))\n    return 0\ntriangle_area(5",
        "num_ids": 86
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s1 = math.sin(math.radians(angle))\n    s2 = math.sqrt(1-s1*s1)\n    s3 = math.sqrt(1-s2*s2)\n    \n    if r == 1:\n        return (math.pi*(s3*3)/4)\n    elif r == 2:\n        return (math.pi*(s1*3)/4)\n    elif r == 3:\n        return (math.pi*(s2*3)/4)\n    elif r == 4:\n        return (math.pi*(s3*3)/4)\n    \n    #raise NotImplementedError('this is not implemented yet')\n",
        "num_ids": 169
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 : return \"ERROR: Invalid radius\"\n    elif r == 0 : return 0\n    elif r == 1 : return 4/3 * pi\n    elif r == 2 : return 8 * pi * r * r\n    elif r == 3 : return 27 * pi * r * r\n    else : return f\"ERROR: Invalid radius\"\n",
        "num_ids": 84
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #calculate the semi-perpendicular distance between the center and the radius.\n    x = r/2\n    #calculate the length of the semi-perpendicular segment in which the center is located.\n    s = sqrt( (x-0.5)**2 + (x+0.5)**2 )\n    #calculate the semi-perpendicular distance between the center and the radius.\n    d = r/s\n    return (3*d)/2\n",
        "num_ids": 115
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def smallest_triangle(a, b, c):\n        if a**2 + b**2 == c**2:\n            return True\n        return False\n    def smallest_triangle_area(a, b, c):\n        return abs(b*c - a*c*a)\n    if r <= 0:\n        return 0\n    elif smallest_triangle(a, b, c):\n        return smallest_triangle_area(a, b, c)\n    else:\n        return triangle_area(r)\n",
        "num_ids": 125
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return sqrt(r ** 2 - 4 * r * cos(rad(360)))\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        print(\"\\nERROR : Invalid radius\")\n    else : \n        area = (4 * pi) * (r ** 2)\n        print(\"\\nArea of the largest triangle inscribed by a semicircle with a radius of\",r,\"is\",area)\n",
        "num_ids": 68
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (2 * 3.14) * (r**2)\n",
        "num_ids": 18
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r**2 - 6 * r\n    print(a)\n    if a>0:\n        if a%1==0 :\n            return round(a**0.5)\n        else:\n            return round(a**0.5)\n    else:\n        print(\"can't find the area\")\n",
        "num_ids": 75
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    low = start\n    high = end\n    while low<high:\n        mid = (low + high)//2\n        if array[mid] < array[mid+1]:\n            low = mid + 1\n        else:\n            high = mid\n    return array[low]\n",
        "num_ids": 82
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return -1\n    \n    l=0\n    r=len(array)-1\n",
        "num_ids": 47
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n    mid = (start + end) // 2\n    num = array[mid]\n    # If the element is not in the sorted array, then return the element\n    if array[mid]!= num:\n        return find_First_Missing(array,mid+1,end)\n    # If the element is already in the sorted array, then return the element\n    if array[mid] == num:\n        return array[mid]\n    # Otherwise, find the smallest missing number\n    return find_First_Missing(array,start,mid-1)\n",
        "num_ids": 153
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    if start < 0:\n        start = 0\n    \n    if start == end:\n        return array[start]\n    \n    \n    middle = (start + end)//2\n    \n    if array[middle] == middle:\n        return array[middle]\n    \n    if array[middle] < array[start] or array[middle] > array[end]:\n        return find_First_Missing(array, start, middle)\n    \n    if array[start] > array[middle]:\n        return find_First_Missing(array, middle, end)\n    \n    if array[middle] < array[end]:\n        return find_First_Missing(array, start, middle)\n    \n    return find_First_Missing(array, middle + 1, end)\n    \n    \n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    \n    if start < 0:\n        start = 0\n    \n    if start == end:\n        return array[start]\n    \n    if array[start] > array[end]:\n        return find_Second_Missing(array, start, end)\n    \n    if array[start] < array[end]:\n        return find_Second_Missing(array, start, end)\n    \n    \n    return find_Second_Missing(array, start + 1, end)\n    \n    \n    \ndef find_Third_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the third missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    \n    if start < 0:\n        start = 0\n    \n    if start == end:\n        return array[start]\n    \n    if array[start] > array[end]:\n        return find_Third_Missing(array,start,end)\n    \n    if array[start] < array[end]:\n        return find_Third_Missing(array,start,end)\n    \n    return find_Third_Missing(array,start + 1,end)\n    \n    \n    \n    \n    \ndef test_find_Second_Missing():\n    \n    assert find_Second_Missing([2,5,4,3,6,1,7,2,4,5]) == 4\n    assert find_Second_Missing([5,4,3,6,1,7,2,4,5]) == 5\n    assert find_Second_Missing([2,5,4,3,6,1,7,2,4,5]) == None\n    assert find_Second_Missing([2,5,4,3,6,1,7,2,4,5]) == None\n    assert find_Second_Missing([1,2,3,4,5,6,7,8,9,10]) == 10\n    assert find_Second_Missing([]) == None\n    assert find_Second_Missing([1,2,3,4,5,6,7,8,9,10]) == None\n    assert find_Second_Missing([-1]) == None\n    assert find_Second_Missing([-1,-2,-3,-4,-5]) == None\n    assert find_Second_Missing([-1,0,2,3]) == 2\n    assert find_Second_Missing([-1,0,2,3]) == 2\n    assert find_Second_Missing([-1,0,2,3]) == 3\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == None\n    assert find_Second_Missing([-1,0,2,3]) == Non",
        "num_ids": 1579
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i] == 0:\n            return i+1\n    return None\n",
        "num_ids": 48
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start<=end:\n        mid=(start+end)//2\n        if array[mid]==mid:\n            return mid\n        elif array[mid]>mid:\n            return find_First_Missing(array,mid,start)\n        else:\n            return find_First_Missing(array,start,mid)\n    else:\n        return None\n",
        "num_ids": 103
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    p1=start\n    p2=end\n    for i in range(start,end):\n        if array[i]==0:\n            if i>=p1:\n                p1=i\n            elif i<=p2:\n                p2=i\n",
        "num_ids": 83
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    \n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n    \n    left = start\n    right = end\n    \n    while left < right:\n        \n        mid = (left+right)//2\n        \n        if array[mid] < array[right]:\n            left = mid+1\n        else:\n            right = mid\n    \n    return left\n    \n    \narray = [1,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nprint(find_First_Missing(array))\n",
        "num_ids": 159
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    string = string.replace('\\n', '%20')\n    string = string.replace('\\r', '%20')\n    return string\n",
        "num_ids": 49
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Create a function named replace_spaces\n    # It accepts a string as an input.\n    # It returns the modified string.\n    # Input: str\n    # Output: str\n    # Example:\n    # replace_spaces(\"My name is Earl\") returns 'My name is Earl%20'\n    # replace_spaces(\"Hello world\") returns 'Hello world%20'\n    # replace_spaces(\"Hello world and Maria\") returns 'Hello world%20 and Maria%20'\n    \n    # TODO: Write the function\n    # Replace all spaces in a string with '%20'\n    return string.replace(' ','%20')\n    \n    # raise NotImplementedError",
        "num_ids": 161
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20'",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #Variables for the List\n    even_list = []\n    odd_list = []\n    #loop over the list\n    for x in list:\n        if x%2 == 0:\n            even_list.append(x)\n        else:\n            odd_list.append(x)\n    return even_list, odd_list\n",
        "num_ids": 81
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #Your code here\n    even_list = []\n    for i in list:\n        if (i % 2 == 0):\n            even_list.append(i)\n    return even_list\n",
        "num_ids": 48
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even =[]\n    for i in range(len(list)):\n        if list[i]%2 ==0:\n            even.append(list[i])\n    return even\n    \ndef Addition(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    an addition of those numbers.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \n    \ndef Sum_Squares(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    a sum of all the squares of those numbers.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]**2\n    return sum\n    \n    \n    \ndef Mean(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the average of those numbers.\n    '''\n    avg = 0\n    for i in range(len(lst)):\n        avg += lst[i]\n    return avg/len(lst)\n    \ndef Median(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the median of those numbers.\n    '''\n    median = 0\n    for i in range(len(lst)):\n        if lst[i]>=lst[i]:\n            median += lst[i]\n        elif lst[i]<=lst[i]:\n            median -= lst[i]\n        else:\n            median = 0\n    return median/len(lst)\n    \ndef Mode(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the mode of those numbers.\n    '''\n    max = 0\n    mode = 0\n    for i in range(len(lst)):\n        if lst[i]>=max:\n            mode += 1\n            max = lst[i]\n        elif lst[i]==max:\n            mode+=1\n    return mode\n    \n    \ndef Mode_Small(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the mode of those numbers.\n    '''\n    mode = 0\n    for i in range(len(lst)):\n        if lst[i]<mode:\n            mode = lst[i]\n        elif lst[i] == mode:\n            mode += 1\n    return mode\n    \n    \n    \ndef Mode_Big(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the mode of those numbers.\n    '''\n    mode = 0\n    for i in range(len(lst)):\n        if lst[i]>mode:\n            mode = lst[i]\n        elif lst[i]==mode:\n            mode+=1\n    return mode\n    \n    \ndef Sum_Big(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    a sum of all the big numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \ndef Sum_Small(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    a sum of all the small numbers in the list.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return sum\n    \n    \ndef Average(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the average of those numbers.\n    '''\n    avg = 0\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n        avg += sum\n        sum = 0\n    return avg/len(lst)\n    \n    \ndef Standard_Deviation(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    a standard deviation of those numbers.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    avg = sum/len(lst)\n    return ((avg-avg)/len(lst))**(1/2)\n    \n    \n    \n    \ndef Standard_Deviation_Two(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    a standard deviation of those numbers.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    avg = sum/len(lst)\n    return ((avg-avg)/len(lst))**(1/2)\n    \n    \n    \n    \n    \n    \ndef Deviation(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the standard deviation of those numbers.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    return Standard_Deviation(lst)\n    \n    \n    \ndef stdev(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the standard deviation of those numbers.\n    '''\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i]\n    avg = sum/len(lst)\n    return Standard_Deviation(lst)\n    \n    \n    \n    \n    \ndef mode(lst):\n    '''\n    Write a python function that takes a list of numbers and returns\n    the mode of those numbers.\n    '''\n    mode = 0\n    for i in range(len(lst)):\n        if lst[i]%2 ==0:\n            mode += lst[i]\n        elif lst[i]%2 == 1:\n            mode -= lst[i]\n    return mode\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 599
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for item in list:\n        if item % 2 == 0:\n            even.append(item)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n    \n",
        "num_ids": 37
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n    ",
        "num_ids": 36
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Even = []\n    for i in range(len(list)): \n        if (list[i] % 2 == 0): \n            Even.append(list[i]) \n    return Even\n",
        "num_ids": 49
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for number in list:\n        if number % 2 == 0:\n            evens.append(number)\n    return evens\n",
        "num_ids": 38
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub: sub = [ele]\n    else: sub += [ele]\n    return sub\n",
        "num_ids": 26
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    if not sub:\n        sub = (i-1, j-1, i+1, j+1)\n    if i < 0 or i > len(board) - 1 or j < 0 or j > len(board[0]) - 1:\n        return\n    if board[i][j] == \"A\":\n        adjac(sub, (i, j))\n    elif board[i][j] == \"B\":\n        adjac(sub, (i-1, j-1))\n    elif board[i][j] == \"C\":\n        adjac(sub, (i-1, j))\n    elif board[i][j] == \"D\":\n        adjac(sub, (i-1, j+1))\n    elif board[i][j] == \"E\":\n        adjac(sub, (i, j-1))\n    elif board[i][j] == \"F\":\n        adjac(sub, (i, j+1))\n    \ndef step(sub = []):\n    '''\n    Write a function to print the board.\n    '''\n    i, j = sub\n    print(*board[i])\n    print(*board[j])\n    \ndef print_board(board):\n    '''\n    Write a function to print the board.\n    '''\n    for i in board:\n        print(*i)\n",
        "num_ids": 15
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # if the given coordinate is a tuple then recursively call the recursively call for all adjacent coordinates\n    if type(ele) == tuple:\n        for i in ele:\n            sub.append(i)\n            adjac(i, sub)\n        return sub\n    else:\n        return sub\n",
        "num_ids": 72
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = sub + [ele]\n    if ele[0] == '(' and ele[-1] == ')':\n        return\n    adjac(ele[1:-1], sub)\n    adjac(ele[1:-1], sub + [ele[-1]])\n",
        "num_ids": 67
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n",
        "num_ids": 42
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) > 0:\n        for sublist in sub:\n            adjacents = adjac(sublist[0], sub)\n            adjacents.append(sublist[1])\n    else:\n        sub = ele\n    return sub\n",
        "num_ids": 62
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    if (x - 1 >= 0):\n        sub.append([x - 1, y])\n    if (x + 1 < N):\n        sub.append([x + 1, y])\n    if (y - 1 >= 0):\n        sub.append([x, y - 1])\n    if (y + 1 < M):\n        sub.append([x, y + 1])\n    return sub\n",
        "num_ids": 110
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return list(map(lambda x, y: (x[0] + x[1], y[0] + y[1]), ele, sub))\n",
        "num_ids": 37
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        return ele\n    else:\n        return adjac(sub[0], sub + [ele])\n",
        "num_ids": 32
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []: \n        sub.append(ele)\n        return adjac(ele[0], sub)\n    else: \n        return adjac(ele[0], sub) + sub\n    \n",
        "num_ids": 51
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text_list = text.split()\n    text_dict = {}\n    for i in range(len(text_list)):\n        for j in range(len(text_list[i])):\n            if text_list[i][j].isspace():\n                text_list[i][j] = \"_\"\n            elif text_list[i][j].isalpha():\n                text_list[i][j] = \"_\"\n            else:\n                text_list[i][j] = text_list[i][j].upper()\n    \n    for i in range(len(text_list)):\n        text_dict[i] = text_list[i]\n    \n    return \"\".join(text_dict.values())\n",
        "num_ids": 177
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for ch in text:\n        if ch =='':\n            result += '_'\n        elif ch == '\\n':\n            result += '_'\n        else:\n            result += ch\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split()\n    return '_'.join(words)\n    \ndef replace_spaces_2(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split()\n    return''.join(words)\n",
        "num_ids": 18
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # The first item, first element, is a list of strings\n    # The second item, the second element, is a list of whitespaces\n    return''.join(text.split()).replace(' ', '_')\n",
        "num_ids": 51
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n    \ndef word_count(sentence):\n    '''\n    Count the number of words in the given sentence.\n    '''\n    return len(sentence.split())\n    \ndef word_count_list(sentence):\n    '''\n    Count the number of words in a given sentence.\n    '''\n    return [word_count(sentence) for i in range(len(sentence))]\n    \ndef word_count_percentage(sentence):\n    '''\n    Count the percentage of words in a given sentence.\n    '''\n    count = word_count(sentence)\n    total = word_count_list(sentence)\n    return round((count/total)*100,2)\n    \ndef word_count_frequencies(sentence):\n    '''\n    Count the number of times a word appears in the sentence.\n    '''\n    count = word_count(sentence)\n    frequencies = {}\n    for word in sentence.split():\n        if word in frequencies:\n            frequencies[word] += 1\n        else:\n            frequencies[word] = 1\n    return frequencies\n    \ndef most_common_word(sentence):\n    '''\n    Return the most common word in the sentence.\n    '''\n    frequencies = word_count_frequencies(sentence)\n    sorted_freq = sorted(frequencies.items(), key=operator.itemgetter(1), reverse=True)\n    return sorted_freq[0][0]\n    \ndef most_common_words(sentence):\n    '''\n    Return the most common words in the sentence.\n    '''\n    frequencies = word_count_frequencies(sentence)\n    sorted_freq = sorted(frequencies.items(), key=operator.itemgetter(1), reverse=True)\n    return [word for word, count in sorted_freq]\n    \ndef word_frequencies(sentence):\n    '''\n    Count the number of times a word appears in the sentence.\n    '''\n    frequencies = word_count_frequencies(sentence)\n    return frequencies\n    \ndef reverse_words(sentence):\n    '''\n    Return the words that occur before the given sentence.\n    '''\n    return sentence.split()[::-1]\n    \ndef reverse_words_list(sentence):\n    '''\n    Return the words that occur before the given sentence.\n    '''\n    return [word for word in sentence.split()[::-1]]\n    \ndef most_common_word_list(sentence):\n    '''\n    Return the words that occur before the given sentence.\n    '''\n    return reverse_words_list(reverse_words(sentence))\n    \ndef most_common_word_length(sentence):\n    '''\n    Return the number of words that occur before the given sentence.\n    '''\n    return len(most_common_word_list(sentence))\n    \ndef most_common_word_count(sentence):\n    '''\n    Return the number of words that occur before the given sentence.\n    '''\n    count = word_count_list(sentence)\n    return count[0]\n    \ndef most_common_words_length(sentence):\n    '''\n    Return the number of words that occur before the given sentence.\n    '''\n    return len(most_common_word_list(sentence))\n    \ndef most_common_words_count(sentence):\n    '''\n    Return the number of words that occur before the given sentence.\n    '''\n    return len(most_common_word_list(sentence))\n    \ndef lemmatization(sentence):\n    '''\n    Lemmatize the sentence.\n    '''\n    return sentence.split()[::-1]\n    \ndef lemmatization_list(sentence):\n    '''\n    Lemmatize the sentence.\n    '''\n    return [word for word in sentence.split()[::-1]]\n    \ndef most_common_word_lemmatization(sentence):\n    '''\n    Return the words that occur before the given sentence.\n    '''\n    return reverse_words_list(lemmatization(sentence))\n    \ndef most_common_word_lemmatization_list(sentence):\n    '''\n    Return the words that occur before the given sentence.\n    '''\n    return reverse_words_list(lemmatization_list(sentence))\n    \ndef lemmatization_count(sentence):\n    '''\n    Return the number of times a word appears in the sentence.\n    '''\n    frequencies = word_count_frequencies(sentence)\n    return frequencies[0]\n    \ndef lemmatization_count_list(sentence):\n    '''\n    Return the number of times a word appears in the sentence.\n    '''\n    count = lemmatization_count(sentence)\n    frequencies = {}\n    for word in sentence.split():\n        if word in frequencies:\n            frequencies[word] += 1\n        else:\n            frequencies[word] = 1\n    return frequencies\n    \ndef lemmatization_frequency(sentence):\n    '''\n    Return the frequency of the word in the sentence.\n    '''\n    return lemmatization_count_list(sentence)\n    \ndef lemmatization_frequency_list(sentence):\n    '''\n    Return the frequency of the word in the sentence.\n    '''\n    return lemmatization_count_list(sentence)\n    \ndef lemmatization_frequency_percentage(sentence):\n    '''\n    Return the percentage of the word in the sentence.\n    '''\n    count = lemmatization_frequency(sentence)\n    frequencies = {}\n    for word in sentence.split():\n        if word in frequencies:\n            frequencies[word] += 1\n        else:\n            frequencies[word] = 1\n    return round((count/len(sentence))*100,2)\n    \ndef lemmatization_frequency_percentage_list(sentence):\n    '''\n    Return the percentage of the word in the sentence.\n    '''\n    count = lemmatization_frequency(sentence)\n    frequencies = {}\n    for word in sentence.split():\n        if word in frequencies:\n            frequencies[word] += 1\n        else:\n            frequencies[word] = 1\n    return round((count/len(sentence))*100,2)\n    \ndef lemmatization_frequency_frequencies(sentence):\n    '''\n    Return the number of times the given sentence is lemmatized.\n    '''\n    frequencies = lemmatization_frequency(sentence)\n    return frequencies[0]\n    \ndef lemmatization_frequency_frequencies_list(sentence):\n    '''\n    Return the number of times the given sentence is lemmatized.\n    '''\n    return lemmatization_frequency_list(sentence)\n    \ndef lemmatization_frequency_percentage(sentence):\n    '''\n    Return the percentage of the word in the sentence.\n    '''\n    return lemmatization_frequency_percentage_list(sentence)\n    \ndef lemmatization_frequency_percentage_list(sentence):\n    '''\n    Return the percentage of the word in the sentence.\n    '''\n    return lemmatization_frequency_percentage_list(sentence)\n    \ndef lemmatization_frequency_frequencies_percentage(sentence):\n    '''\n    Return the number of times the given sentence is lemmatized and the given percentage of the word is included.\n    '''\n    count = lemmatization_frequency_percentage(sentence)\n    frequencies = {}\n    for word in sentence.split():\n        if word in frequencies:\n            frequencies[word] += 1\n        else:\n            frequencies[word] = 1\n    return round((count/len(sentence))*100,2)\n    \ndef lemmatization_frequency_frequencies_percentage_list(sentence):\n    '''\n    Return the percentage of the word in the sentence.\n    '''\n    count = lemmatization_frequency_percentage(sentence)\n    frequencie",
        "num_ids": 24
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #Use the substitute function to replace the spaces with an underscore\n    return text.replace(\" \", \"_\").replace(\"-\", \"_\").replace(\"\\n\", \"_\")\n    \ndef is_datetime(text):\n    '''\n    Return True if a given string is a datetime.\n    '''\n    try:\n        datetime.strptime(text, \"%Y-%m-%d %H:%M:%S\")\n        return True\n    except:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ', '_')\n    text = text.replace('  ', '_')\n    text = text.replace(' _', '_')\n    return text\n",
        "num_ids": 45
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_replaced = text.replace(' ', '_')\n    text_replaced = text_replaced.replace('\\n', '_')\n    text_replaced = text_replaced.replace('  ', '_')\n    return text_replaced\n",
        "num_ids": 63
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \" \".join(text.replace(\" \",\"_\").split())\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('-','_')\n",
        "num_ids": 19
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_zero(num_list):\n    '''\n    Write a python function to filter all zeroes in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_any(num_list):\n    '''\n    Write a python function to filter all numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_all(num_list):\n    '''\n    Write a python function to filter all numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i > 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_even(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_odd(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_all_even(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef filter_all_odd(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef even_double(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0 and i % 4 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef odd_double(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0 and i % 4!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_double(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0 and i % 4 == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_even(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_odd(num_list):\n    '''\n    Write a python function to filter all odd numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef all_even_odd(num_list):\n    '''\n    Write a python function to filter all even numbers in the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i % 2 == 0 and i % 4!= 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef prime_factor(num_list):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n        elif i % 2 == 0:\n            new_list.append(i)\n        else:\n            pass\n    return new_list\n    \n    \ndef get_number(num_list):\n    '''\n    Write a python function to get the number from the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n    return new_list\n    \n    \ndef prime_factor(num_list):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n        elif i % 2 == 0:\n            new_list.append(i)\n        else:\n            pass\n    return new_list\n    \n    \ndef is_prime(num_list):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    new_list = []\n    for i in num_list:\n        if i == 0:\n            new_list.append(i)\n        elif i % 2 == 0:\n            new_list.append(i)\n        else:\n            pass\n    return new_list\n    \n    \ndef main():\n    num_list = [2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29]\n    print(\"The given list is:\", num_list)\n    print(\"The filter function is:\", filter_zero(num_list))\n    print(\"The filter function is:\", filter_any(num_list))\n    print(\"The filter function is:\", filter_all(num_list))\n    print(\"The filter function is:\", filter_all_even(num_list))\n    print(\"The filter function is:\", filter_all_odd(num_list))\n    print(\"The filter function is:\", filter_all_even_odd(num_list))\n    print(\"The filter function is:\", filter_all_double(num_list))\n    print(\"The filter function is:\", filter_prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", is_prime(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    print(\"The filter function is:\", prime_factor(num_list))\n    prin",
        "num_ids": 602
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_list.append(i)\n    print(zero_list)\n",
        "num_ids": 53
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num == 0:\n            new_list.append(num)\n        else:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 55
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for index, number in enumerate(num_list):\n        if number == 0:\n            num_list.pop(index)\n",
        "num_ids": 33
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.append(0)\n    num_list.pop(0)\n    return num_list\n    \n    #print(num_list)\n    #return num_list\n    \ndef main():\n    print(move_zero([0,1,2,3,4,5,6,7,8,9]))\n    #print(move_zero([0]))\n    #print(move_zero([1]))\n",
        "num_ids": 105
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0,len(num_list)):\n        if num_list[i]!= 0:\n            num_list.append(num_list[i])\n        else:\n            continue\n    return num_list\n",
        "num_ids": 58
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i] = -num_list[i]\n    return num_list\n",
        "num_ids": 51
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_flag = [True for i in range(len(num_list))]\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_flag[i] = False\n    for i in range(len(num_list)):\n        if zero_flag[i]:\n            num_list[i] = num_list[i] + num_list[i+1]\n    return num_list\n",
        "num_ids": 111
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return num_list.reverse()\n    \ndef remove_unnecessary_char(num_list):\n    '''\n    Write a python function to remove all unnecessary characters from the given list.\n    '''\n    return num_list.remove(' ')\n    \ndef remove_repeating_char(num_list):\n    '''\n    Write a python function to remove all repeating characters from the given list.\n    '''\n    return num_list.replace('*', '')\n    \ndef num_is_int(num_list):\n    '''\n    Write a python function to check if the given number is an integer.\n    '''\n    return type(num_list) == int\n    \ndef get_number_of_char(num_list):\n    '''\n    Write a python function to count the number of characters.\n    '''\n    return len(num_list)\n    \ndef compare_strings(str_1, str_2):\n    '''\n    Write a python function to compare two strings.\n    '''\n    return str_1 == str_2\n    \ndef compare_int_str(str_1, str_2):\n    '''\n    Write a python function to compare two integers.\n    '''\n    return int(str_1) == int(str_2)\n    \ndef reverse_list(my_list):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    return my_list.reverse()\n    \ndef get_length(num_list):\n    '''\n    Write a python function to get the length of a given list.\n    '''\n    return len(num_list)\n    \ndef sort_list(num_list):\n    '''\n    Write a python function to sort a given list.\n    '''\n    return sorted(num_list)\n    \ndef sort_characters(num_list):\n    '''\n    Write a python function to sort a given list of characters.\n    '''\n    return sorted(num_list, key=str.lower)\n    \ndef remove_duplicates(my_list):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    return list(dict.fromkeys(my_list))\n    \ndef is_palindrome(num_list):\n    '''\n    Write a python function to check if a given list is a palindrome.\n    '''\n    return str(num_list) == str(num_list)[::-1]\n    \ndef multiply_int_str(num_list):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return int(str(num_list)) * int(str(num_list))\n    \ndef multiply_num_list(num_list):\n    '''\n    Write a python function to multiply a given list.\n    '''\n    return [int(num) for num in num_list]\n    \ndef multiply_float_str(num_list):\n    '''\n    Write a python function to multiply two floats.\n    '''\n    return float(num_list[0]) * float(num_list[1])\n    \ndef add_num_list(num_list):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return [int(num) for num in num_list]\n    \ndef add_num_float_str(num_list):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return float(str(num_list[0]) + str(num_list[1]))\n    \ndef sum_int_str(num_list):\n    '''\n    Write a python function to sum two numbers.\n    '''\n    return int(str(num_list[0]) + str(num_list[1]))\n    \ndef sum_num_list(num_list):\n    '''\n    Write a python function to sum a given list.\n    '''\n    return [int(num) for num in num_list]\n    \ndef sum_num_float_str(num_list):\n    '''\n    Write a python function to sum two numbers.\n    '''\n    return float(str(num_list[0]) + str(num_list[1]))\n    \ndef find_first_index(num_list, element):\n    '''\n    Write a python function to find the index of a given element from a given list.\n    '''\n    index = 0\n    for element_index in range(len(num_list)):\n        if num_list[element_index] == element:\n            return element_index\n    return index\n    \ndef find_last_index(num_list, element):\n    '''\n    Write a python function to find the index of a given element from a given list.\n    '''\n    index = 0\n    for element_index in range(len(num_list) - 1, -1, -1):\n        if num_list[element_index] == element:\n            return element_index\n    return index\n    \ndef get_min_index(num_list):\n    '''\n    Write a python function to get the smallest index of a given list.\n    '''\n    min_index = 0\n    smallest = num_list[0]\n    for num_index in range(1, len(num_list)):\n        if num_list[num_index] < smallest:\n            min_index = num_index\n            smallest = num_list[num_index]\n    return min_index\n    \ndef get_max_index(num_list):\n    '''\n    Write a python function to get the largest index of a given list.\n    '''\n    max_index = 0\n    largest = num_list[0]\n    for num_index in range(1, len(num_list)):\n        if num_list[num_index] > largest:\n            max_index = num_index\n            largest = num_list[num_index]\n    return max_index\n    \ndef is_in_list(num_list, element):\n    '''\n    Write a python function to check if a given element is in a given list.\n    '''\n    return num_list.count(element)!= 0\n    \ndef is_int_list(num_list):\n    '''\n    Write a python function to check if a given list is a list of integers.\n    '''\n    return all(map(num_is_int, num_list))\n    \ndef get_next_to_last_index(num_list, num_index):\n    '''\n    Write a python function to get the next element to the end of a given list.\n    '''\n    next_index = num_index + 1\n    if next_index > len(num_list) - 1:\n        return num_list[num_index]\n    else:\n        return num_list[next_index]\n    \ndef get_last_to_first_index(num_list, num_index):\n    '''\n    Write a python function to get the next element to the beginning of a given list.\n    '''\n    next_index = num_index + 1\n    if next_index > len(num_list) - 1:\n        return num_list[0]\n    else:\n        return num_list[next_index]\n    \ndef is_greater_than_in_list(num_list, num_index):\n    '''\n    Write a python function to check if a given number is greater than any number in a given list.\n    '''\n    return num_list[num_index] > num_list[num_index + 1]\n    \ndef is_in_list_int(num_list, num_index):\n    '''\n    Write a python function to check if a given number is in a given list.\n    '''\n    return num_list[num_index] == num_list[num_index + 1]\n    \ndef is_in_list_float(num_list, num_index):\n    '''\n    Write a python function to check if a given number is in a given list.\n    '''\n    return num_list[num_index] == num_list[num_index + 1]\n    \ndef reverse_list_with_sublist(num_list, sublist):\n    '''\n    Write a python function to reverse a given list with the given sublist.\n    '''\n    return list(dict.fromkeys(num",
        "num_ids": 12
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    for num in num_list:\n        if num == 0:\n            result.append(num)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # total of all xor of all elements in the given list\n    total = 0\n    # for every element\n    for i in arr :\n        # for every pair of xor values\n        for j in arr :\n            # xor the two values and get the sum of xor\n            total = total ^ j ^ i\n    # return sum of xor of all pairs\n    return total\n",
        "num_ids": 91
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(n) : \n        s=s^arr[i]\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Create the dictionary of xor values and pair of xor values\n    xor_dict = {}\n    for i in range(n):\n        xor_dict[arr[i]] = arr[i]\n    # Iterate through the pairs\n    for j in range(n-1):\n        # Find the pair of xor values\n        if arr[j] + arr[j+1] in xor_dict:\n            # Set xor values of pairs to 0\n            xor_dict[arr[j] + arr[j+1]] = 0\n            # Merge the pairs\n            xor_dict[arr[j] + arr[j+1]] = xor_dict[arr[j]]\n    # Return the sum of pairs\n    return xor_dict.sum()\n    \n",
        "num_ids": 185
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_3(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_4(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_5(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_6(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_7(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_8(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_9(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_10(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_11(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    \n    \ndef pair_xor_Sum_12(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Input :\n    -arr : A list of numbers\n    -n : Number of pairs of numbers in the list\n    Output :\n    - Returns the total sum of xor of all pairs of numbers in arr\n    '''\n    '''\n    Constraints\n    1 <= len(arr) <= 100\n    1 <= n <= arr.length\n    '''\n    result = 0\n    for i in range(0,n) : \n        result = result ^ arr[i]\n    return result\n    ",
        "num_ids": 35
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    return sum(arr[i+1]^arr[i] for i in range(len(arr)-1))\n    \n    \n    \ndef bitwise_xor(bit1,bit2) : \n    '''\n    Write a python function to compute the bitwise xor of the two given bit lists.\n    '''\n    return bin(bit1 ^ bit2)[2:].count('1')\n    \n    \n    \ndef bitwise_And(bit1,bit2) : \n    '''\n    Write a python function to compute the bitwise AND of the two given bit lists.\n    '''\n    return bin(bit1 & bit2)[2:].count('1')\n    \n    \n    \ndef bitwise_Xor(bit1,bit2) : \n    '''\n    Write a python function to compute the bitwise XOR of the two given bit lists.\n    '''\n    return bin(bit1 ^ bit2)[2:].count('1')\n    \n    \n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 2 or n == 3: \n        return True \n    if n % 2 == 0 or n % 3 == 0: \n        return False \n    for i in range(5, int(math.sqrt(n))+1, 6): \n        if n % i == 0: \n            return False \n    return True \n    \n    \n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n < 2: \n        return False \n    if n == 2 or n == 3: \n        return True \n    for i in range(5, int(math.sqrt(n))+1, 6): \n        if n % i == 0: \n            return False \n    return True \n    \n    \n    \ndef remove_duplicates(lst) : \n    '''\n    Write a python function to remove duplicate elements from a given list. \n    '''\n    if len(lst) <= 1: \n        return lst \n    lst.sort()\n    last = lst[-1]\n    for i in range(len(lst)-2, -1, -1): \n        if lst[i] == last: \n            lst.pop(i) \n    return lst \n    \n    \ndef fizz_buzz(n) : \n    '''\n    Write a python function to check whether a number is Fizz or not.\n    '''\n    if n % 3 == 0: \n        return \"Fizz\"\n    elif n % 5 == 0: \n        return \"Buzz\"\n    else: \n        return str(n) \n    \n    \n    \ndef main() : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    print(is_Prime(int(input(\"Enter a number: \")))) \n    print(fizz_buzz(int(input(\"Enter a number: \")))) \n    print(bitwise_xor(int(input(\"Enter a number: \")), int(input(\"Enter a number: \"))))\n    print(bitwise_And(int(input(\"Enter a number: \")), int(input(\"Enter a number: \"))))\n    print(bitwise_Xor(int(input(\"Enter a number: \")), int(input(\"Enter a number: \"))))\n    print(remove_duplicates([int(input(\"Enter a number: \"))]))\n    \n    \nif __name__ == \"__main__\" : \n    main() \n    \n",
        "num_ids": 177
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(n-1) : \n        for j in range(i,n) : \n            sum+=arr[i][j]\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    # A\n    s=0\n    for i in range(n):\n        s+=arr[i]\n    # B\n    for i in range(n-1):\n        s-=arr[i]\n    return s\n",
        "num_ids": 62
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans=[]\n    for i in range(0,n-1) :\n        for j in range(0,n-1) :\n            ans.append(arr[i]^arr[j])\n    ans.append(arr[n-1])\n    return sum(ans)\n",
        "num_ids": 69
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum=sum^arr[i]+arr[j]\n    return sum\ndef test_func(n):\n    arr=[]\n    for i in range(n):\n        arr.append(i)\n    print(arr)\n    print(\"The sum of xor of all pairs of numbers is : \",pair_xor_Sum(arr,n))\n",
        "num_ids": 111
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #Code here\n    # idea: reverse, just compute xor of the pair and compare with the summation of the pair\n    sum=0\n    for i in range(0,n-1):\n        sum+=arr[i]\n        sum+=arr[i+1]\n    return sum\n    \n    #Return val\n    #If there are no pair in the list, return 0\n    #If there is only one pair, return 1\n    #Else, return sum of pair\n    #This is your Python code\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2003
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for element in iterable:\n        heapq.heappush(hq, element)\n    \n    return [hq[i] for i in range(len(hq) - 1)]\n    \nif __name__ == \"__main__\":\n    \n    l = [1,2,4,5,6,7,3,1,2]\n    print(l)\n    print(heap_sort(l))\n    l = [1,2,4,5,6,7,3,1,2,1,0,3]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [4,2,6,3,5,1,7,8,9,0]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [4,2,6,3,5,1,7,8,9,0]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [4,2,6,3,5,1,7,8,9,0]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [4,2,6,3,5,1,7,8,9,0]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [2,4,6,8,3,5,7,1,0,9,8,2,1,5,4]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,2,1,0,3,5,6,7]\n    print(l)\n    print(heap_sort(l))\n    print()\n    \n    l = [1,2,4,5,6,7,3,1,",
        "num_ids": 2014
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list()\n    for elt in iterable:\n        if len(heap) < 2:\n            heapq.heappush(heap, elt)\n        else:\n            heapq.heappushpop(heap, elt)\n    return heap\n",
        "num_ids": 70
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    \n    for item in iterable:\n        heapq.heappush(h, item)\n    \n    return [hq.heappop(h) for _ in range(len(h))]\n",
        "num_ids": 56
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable) - 1, -1, -1):\n        hq.heappush(iterable, hq.heappop(iterable) + hq.heappop(iterable))\n    return iterable\n",
        "num_ids": 61
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, key=lambda x: x[0])\n",
        "num_ids": 19
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    while len(iterable) > 1:\n        yield iterable.pop(0)\n        iterable.append(iterable.pop(0))\n",
        "num_ids": 60
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = []\n    size = len(iterable)\n    arr = [iterable.pop(0)]\n    while len(iterable) > 0:\n        curr = arr.pop(0)\n        for i in range(len(arr)):\n            if arr[i][0] < curr[0]:\n                arr.insert(i, curr)\n                break\n    return arr\n",
        "num_ids": 95
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(arr, n, parent):\n        '''\n        Convert the given parent index in a heap.\n        '''\n        index = parent\n        l, r = 2 * index + 1, 2 * index + 2\n        while l < n and arr[index] < arr[l]:\n            index = (index * 2) + 1\n        while r < n and arr[index] < arr[r]:\n            index = (index * 2) + 2\n        if index!= index:\n            arr[index], arr[parent] = arr[parent], arr[index]\n        return arr\n    def heappush(arr, item):\n        '''\n        Insert an item into a heap.\n        '''\n        arr.append(item)\n        hq.heapify(arr)\n    def heappop(arr):\n        '''\n        Pop an item from the heap.\n        '''\n        last = arr[0]\n        hq.heapreplace(arr, last)\n        return arr\n    n = len(iterable)\n    for i in range(n // 2, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        heappush(arr, heapq.heappop(arr))\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\ndef mergesort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    mid = len(iterable) // 2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    left = mergesort(left)\n    right = mergesort(right)\n    return merge(left, right)\ndef merge(left, right):\n    '''\n    Merge the two sorted lists.\n    '''\n    res = []\n    while len(left) > 0 or len(right) > 0:\n        if left and right:\n            if left[-1] <= right[-1]:\n                res.append(left.pop())\n            else:\n                res.append(right.pop())\n        elif left:\n            res.append(left.pop())\n        elif right:\n            res.append(right.pop())\n    return res\ndef binary_search(arr, value):\n    '''\n    Use a binary search algorithm to find the position of value\n    in a sorted array.\n    '''\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == value:\n            return mid\n        elif arr[mid] < value:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\ndef select_sort(iterable):\n    '''\n    Sort a list.\n    '''\n    def select(a, n):\n        '''\n        Return the minimum and maximum values in the sublist, according to the given position, starting from the left.\n        '''\n        x = a[n]\n        for i in range(n + 1, len(a)):\n            if a[i] < x:\n                a[i], a[n] = a[n], a[i]\n            else:\n                break\n    def insertion_sort(a):\n        '''\n        Sort a sublist in ascending order.\n        '''\n        for i in range(1, len(a)):\n            temp = a[i]\n            j = i - 1\n            while j >= 0 and a[j] > temp:\n                a[j + 1] = a[j]\n                j -= 1\n            a[j + 1] = temp\n    def shell_sort(a):\n        '''\n        Sort a sublist in ascending order using the shell sort algorithm.\n        '''\n        h = len(a) // 2\n        while h >= 1:\n            for i in range(h, len(a)):\n                temp = a[i]\n                j = i - h\n                while j >= 0 and a[j] > temp:\n                    a[j + h] = a[j]\n                    j -= h\n                a[j + h] = temp\n            h = (h // 2)\n    def merge_sort(a):\n        '''\n        Sort a sublist in ascending order using the merge sort algorithm.\n        '''\n        def merge(arr, left, mid, right):\n            res = []\n            i, j = 0, 0\n            while i < mid and j < right:\n                if arr[mid + i] < arr[mid + j]:\n                    res.append(arr[mid + i])\n                    i += 1\n                else:\n                    res.append(arr[mid + j])\n                    j += 1\n            if i == mid:\n                while j < right:\n                    res.append(arr[mid + j])\n                    j += 1\n            else:\n                while i < mid:\n                    res.append(arr[mid + i])\n                    i += 1\n            return res\n        if len(a) <= 1:\n            return a\n        mid = len(a) // 2\n        left = merge_sort(a[:mid])\n        right = merge_sort(a[mid:])\n        return merge(left, left, mid, right) + merge(right, mid, right, right) + a[:mid] + a[mid:]\n    def quick_sort(a, start, end):\n        '''\n        Sort a sublist in ascending order, using the quick sort algorithm.\n        '''\n        if start < end:\n            i, j = start, end\n            while i < j:\n                while i < j and a[j] >= a[i]:\n                    j -= 1\n                a[i], a[j] = a[j], a[i]\n                i += 1\n            a[i], a[j] = a[j], a[i]\n            quick_sort(a, start, i-1)\n            quick_sort(a, i+1, end)\n    def quick_sort_2(a):\n        '''\n        Sort a sublist in ascending order, using the quick sort algorithm.\n        '''\n        def swap(arr, a, b):\n            arr[a], arr[b] = arr[b], arr[a]\n        def partition(a, p, r):\n            i = p\n            j = r\n            while i < j:\n                while i < j and a[i] < a[j]:\n                    swap(a, i, j)\n                    i += 1\n                while i < j and a[i] > a[j]:\n                    swap(a, i, j)\n                    j -= 1\n            swap(a, p, r)\n            return j\n        def sort(a, p, r):\n            if p < r:\n                q = partition(a, p, r)\n                sort(a, p, q-1)\n                sort(a, q+1, r)\n        def heapify(a, n, parent):\n            i = parent\n            l, r = 2 * i + 1, 2 * i + 2\n            while l < n and a[i] < a[l]:\n                swap(a, i, l)\n                i = l\n                l = 2 * i + 1\n            while r < n and a[i] > a[r]:\n                swap(a, i, r)\n                i = r\n                r = 2 * i + 1\n            if i!= parent:\n                swap(a, i, parent)\n                swap(a, r, i)\n                heapify(a, n, i)\n            return a\n        def insert(a, b):\n            swap(a, b, 0)\n            heapify(a, len(a), 0)\n            i = 1\n            l, r = 0, len(a) - 1\n            while i < len(a):\n                if a[i] < a[l]:\n                    swap(a, l, i)\n                    l = i\n                    i += 1\n                elif a[i] > a[r]:\n                    swap(a, i, r)\n                    r = i\n                    i += 1\n                else:\n                    l += 1\n            swap(a, ",
        "num_ids": 500
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while iterable:\n        i = hq.heappop(iterable)\n        hq.heappushpop(iterable, i)\n    return iterable\n",
        "num_ids": 54
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [item for value,item in enumerate(heap) if value!= 0]\n",
        "num_ids": 53
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost<sale_amount:\n        return 'no profit'\n    else:\n        return 'no loss'\n        ",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0:\n        print(\"Pay not available.\")\n        return 1\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost-sale_amount\n    noloss = 0\n    for i in range(len(sale_amount)):\n        if profit[i] < 0:\n            profit[i] = 0\n            noloss += 1\n        elif sale_amount[i] < 0:\n            noloss += 1\n        else:\n            continue\n    if noloss > 0:\n        return 'no profit'\n    else:\n        return 'no loss'\n",
        "num_ids": 113
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return \"Price should be greater than 0\"\n    if actual_cost <= 0:\n        return \"Amount should be greater than 0\"\n    if sale_amount == 0 or actual_cost == 0:\n        return \"Amount and Price must be positive\"\n    if sale_amount < actual_cost:\n        return \"Please profit but less than the price\"\n    if sale_amount < actual_cost / 3:\n        return \"Please profit but less than the average price\"\n    if actual_cost / 3 < sale_amount:\n        return \"Please profit but less than the average price\"\n",
        "num_ids": 143
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    def check(sold_price,expected_cost):\n        if sold_price == expected_cost:\n            return True\n        return False\n    sold_price = actual_cost\n    while sold_price >= 0 and check(sold_price,expected_cost):\n        sold_price -= expected_cost\n        \n    #assert False, \"the given amount is not enough to produce the expected amount.\"\n",
        "num_ids": 92
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print('The cost of the sale is',actual_cost)\n    else:\n        print('No profit or loss')\n",
        "num_ids": 41
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_amount = 0\n    loss_amount = 0\n    for a in range(len(actual_cost)):\n        if sale_amount[a] < actual_cost[a]:\n            profit_amount += sale_amount[a]\n        else:\n            loss_amount += actual_cost[a]\n    if profit_amount == 0 and loss_amount == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0: \n        return 0\n    else: \n        profit = actual_cost - sale_amount \n        profit_with_loss = profit * sale_amount \n        return profit_with_loss \n",
        "num_ids": 56
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Write your code here\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    F = 1.8\n    C = 1.5\n    k =.6215\n    p = 101325\n    return ((((v/p)**(1/k)) * (C - F)) + (t * k * (v ** 2)))\n",
        "num_ids": 61
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (v*9/5) + 32\n    if(c > 100):\n        c = 100\n    if(c < 0):\n        c = 0\n    return c\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return v\ndef wind_bearing(v,t):\n    '''\n    Write a function to calculate the wind bearing given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (t*math.pi/180) + math.atan(v/v)\ndef wind_dir(v,t):\n    '''\n    Write a function to calculate the wind direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (t*math.pi/180) - math.atan(v/v)\ndef wind_speed_dir(v,t):\n    '''\n    Write a function to calculate the wind speed and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (v,wind_speed(v,t))\ndef wind_dir_dir(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir_dir2(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir2(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir3(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir4(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir5(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir6(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir7(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir8(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir9(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir10(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir11(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir12(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir13(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir14(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir15(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir16(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir17(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir18(v,t):\n    '''\n    Write a function to calculate the wind direction and direction given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v > 100):\n        v = 100\n    if(v < 0):\n        v = 0\n    return (wind_dir(v,t))\ndef wind_dir19(v,",
        "num_ids": 48
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_temp = (v*9/5) + 32\n    wind_chill_index = round(wind_chill_temp,2)\n    return wind_chill_index\n",
        "num_ids": 49
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    cl = 1.8\n    h = v/6.25\n    c = (1 + (8/cl) * math.log((h/100), (1/cl)))\n    d = -5 + (5/cl) * math.log((h/100), (1/cl))\n    return round(c, 1) + round(d, 1)\n",
        "num_ids": 86
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (v * math.log(v / 1013.25)) + (0.6215 * t + 35.75)\n",
        "num_ids": 32
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def get_chill(v,t):\n        if v < 0:\n            v = -v\n        w = 0.6215 * (10.0 ** (-0.1658 * v * t))\n        return round(w,2)\n    \n    if t <= 0.16 or t >= 6.0:\n        return 0.0\n    if v <= 0.0:\n        return -35.0\n    return get_chill(v,t) + 35.0\n",
        "num_ids": 115
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #error checking\n    if v < 0 or t < 0:\n        return 0\n    #convert to degrees celsius\n    c_d = t * 9/5 + 32\n    #calculate wind chill\n    return round(1 + (v*(9/5))/3 + math.log(1.00 + c_d/400.00) * (1.00 - (0.62 - 0.62*math.exp(-0.1*t))))\n",
        "num_ids": 111
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = (9.0/5.0) + (16.0/5.0) * (v**5) - (7.0/5.0) * (v**4) + (5.0/5.0) * (v**3)\n    C = C + (0.6215 * t**4) - (9.0/5.0) * (t**3) + (0.0465 * t**2)\n    C = math.trunc(C)\n    return C\n",
        "num_ids": 121
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    def calc_chill(v,t):\n        r = 6.0 + (v/10.0)\n        R = 0.6215\n        chill_index = (20 * math.log(r,R)) - 32\n        return round(chill_index,2)\n    \n    def calc_pressure(t):\n        '''\n        Calculates the atmospheric pressure in Pa (air pressure) at given temperature.\n        '''\n        P = 101325\n        return P\n    \n    def calc_wind_direction(t):\n        '''\n        Calculates the wind direction relative to the sun given a temperature.\n        '''\n        wind_dir = (t * math.sin(math.radians(360/t)))/(math.cos(math.radians(360/t)) * math.cos(math.radians(360/t - 360/t)))\n        return round(wind_dir,2)\n",
        "num_ids": 68
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v*(9.0/5.0+9.0/5.0*(t+273.1)),2)\n",
        "num_ids": 35
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for i in sample_names:\n        if i[0].lower() in ['a','A','e','E','i','I','o','O','u','U']:\n            s += len(i)\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_list = []\n    for name in sample_names:\n        sample_list.append(name.replace('c','e').replace('e','c'))\n    #print(sample_list)\n    return len(sample_list)\n    \n    #print(sample_list)\n    \ndef main():\n    '''\n    Main function. The student needs to know the program's name.\n    '''\n    sample_name = input('Please enter the name of the student: ')\n    #print(sample_name)\n    #sample_name = 'Willie'\n    \n    print('Sample nam: ',sample_nam(sample_name))\n    print('Total Samples: ',sample_nam(sample_names))\n    #print(sample_names)\n",
        "num_ids": 85
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_list = []\n    for nam in sample_names:\n        nam_list.append(nam.replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '')",
        "num_ids": 2002
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import string\n    \n    names_list = []\n    for name in sample_names:\n        name_list = name.split(\" \")\n        if len(name_list[0]) <= 2:\n            if not name_list[0].startswith(\"a\"):\n                names_list.append(name_list[0])\n        else:\n            names_list.append(name_list[0])\n    return str(len(names_list))\n",
        "num_ids": 110
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    list_of_names = []\n    \n    for i in range(len(sample_names)):\n        if sample_names[i][0] == 'a':\n            list_of_names.append(sample_names[i][1:])\n        else:\n            list_of_names.append(sample_names[i])\n    \n    return len(list_of_names)",
        "num_ids": 93
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = []\n    for name in sample_names:\n        if name.startswith(\"a\"):\n            s.append(len(name.split(\" \")))\n    return sum(s)\n",
        "num_ids": 49
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    my_list = []\n    for name in sample_names:\n        if name.islower():\n            my_list.append(len(name))\n    \n    sum = 0\n    for i in my_list:\n        sum+=i\n    \n    return sum\n    \n    \n    \n    ",
        "num_ids": 74
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    start_length = 0\n    for name in sample_names:\n        if name[0].lower()!= 'a':\n            start_length += len(name)\n    return start_length\n",
        "num_ids": 48
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name.split(' ')[0]) for name in sample_names if name.split(' ')[0][0].isalpha()])\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if not sample_names:\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for item in items:\n        if item[0] == \"(\" and item[-1] == \")\":\n            res.append(item[1:-1])\n        else:\n            res.append(item)\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # this is a check, see if there are parentheses\n    # if there are them, it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n    # if there are, it's okay, and it's okay\n    #\n",
        "num_ids": 2009
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items_after_parenthesis = []\n    for item in items:\n        if item[-1] == '(':\n            items_after_parenthesis.append(item)\n        elif item[0]!= '(':\n            items_after_parenthesis.append(item)\n    items_after_parenthesis.pop()\n    return items_after_parenthesis\n",
        "num_ids": 88
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    parenthesis = re.compile(\"[([)]\")\n    st = re.sub(parenthesis, \"\", items)\n    st = st.replace(')', \"\")\n    st = st.replace(']', \"\")\n    st = st.replace(']', \"\")\n    st = st.replace('[', \"\")\n    st = st.replace(']', \"\")\n    st = st.replace('(', \"\")\n    st = st.replace(')', \"\")\n    \n    return st\n    \ndef normalize_data(items):\n    '''\n    Write a function to normalize the data after removing the parenthesis.\n    '''\n    \n    normalized_data = re.sub(\"\\([^)]\", \"\", items)\n    normalized_data = re.sub(\"\\)\", \"\", normalized_data)\n    normalized_data = re.sub(\"\\[\", \"\", normalized_data)\n    normalized_data = re.sub(\"\\]\", \"\", normalized_data)\n    \n    return normalized_data\n    \ndef get_data(file_name):\n    '''\n    Get data from the file in the format of the data is given\n    '''\n    \n    \n    with open(file_name) as f:\n        content = f.read()\n        \n    return content\n    \ndef get_data_from_file(file_name):\n    '''\n    Get data from the file in the format of the data is given\n    '''\n    \n    \n    with open(file_name) as f:\n        content = f.read()\n        \n    return content\n    \ndef get_all_data(data):\n    '''\n    Get all data from the file\n    '''\n    \n    \n    data = data.split(',')\n    \n    return data\n    \ndef data_clean(data):\n    '''\n    Clean data after removing the parenthesis and everything before the square brackets.\n    '''\n    \n    \n    data = remove_parenthesis(data)\n    data = normalize_data(data)\n    \n    return data\n    \ndef create_data(data):\n    '''\n    Create data according to the format of the data given.\n    '''\n    \n    data = get_data(data)\n    data = get_data_from_file(data)\n    data = get_all_data(data)\n    \n    return data\n    \ndef group_data(data):\n    '''\n    Group data by the format of the data given.\n    '''\n    \n    data = get_data(data)\n    data = get_data_from_file(data)\n    data = get_all_data(data)\n    \n    return data\n    \ndef normalize_data_groups(data):\n    '''\n    Normalize data by groups.\n    '''\n    \n    groups = ['P', 'M', 'G', 'F', 'N']\n    \n    for group in groups:\n        data = get_data_from_file(data)\n        \n        group_data = []\n        \n        for item in data:\n            if item in groups:\n                group_data.append(item)\n        \n        data = data_clean(group_data)\n        \n    return data\n    \ndef data_group_normalization(data):\n    '''\n    Normalize data by groups.\n    '''\n    \n    groups = ['P', 'M', 'G', 'F', 'N']\n    \n    for group in groups:\n        data = get_data_from_file(data)\n        \n        group_data = []\n        \n        for item in data:\n            if item in groups:\n                group_data.append(item)\n        \n        data = data_clean(group_data)\n        \n    return data\n    \ndef get_group_data(data):\n    '''\n    Get group data according to the format of the data given.\n    '''\n    \n    data = normalize_data_groups(data)\n    \n    return data\n    \ndef group_data_from_file(file_name):\n    '''\n    Get group data according to the format of the data given.\n    '''\n    \n    with open(file_name) as f:\n        content = f.read()\n        \n    return content\n    \ndef data_group_normalization_from_file(file_name):\n    '''\n    Get group data according to the format of the data given.\n    '''\n    \n    with open(file_name) as f:\n        content = f.read()\n        \n    return content\n    \ndef get_group_data_from_file(file_name):\n    '''\n    Get group data according to the format of the data given.\n    '''\n    \n    with open(file_name) as f:\n        content = f.read()\n        \n    return content\n    \ndef data_clean_groups(data):\n    '''\n    Clean data according to the format of the data given.\n    '''\n    \n    groups = ['P', 'M', 'G', 'F', 'N']\n    \n    for group in groups:\n        data = get_group_data(data)\n        \n        group_data = []\n        \n        for item in data:\n            if item in groups:\n                group_data.append(item)\n        \n        data = data_clean(group_data)\n        \n    return data\n    \ndef group_data_clean_normalization(data):\n    '''\n    Clean data according to the format of the data given.\n    '''\n    \n    groups = ['P', 'M', 'G', 'F', 'N']\n    \n    for group in groups:\n        data = get_group_data_from_file(data)\n        \n        group_data = []\n        \n        for item in data:\n            if item in groups:\n                group_data.append(item)\n        \n        data = data_clean(group_data)\n        \n    return data\n    \ndef get_group_data_from_file_groups(file_name):\n    '''\n    Get group data according to the format of the data given.\n    '''\n    \n    with open(file_name) as f:\n        content = f.read()\n        \n    return content\n    \ndef data_group_normalization_from_file_groups(file_name):\n    '''\n    Get group data according to the format of the data given.\n    '''\n    \n    with open(file_name) as f:\n        content = f.read()\n        \n    return content\n    \ndef get_data_normalization(data):\n    '''\n    Get data by group normalization.\n    '''\n    \n    data = data_group_normalization(data)\n    \n    return data\n    \ndef get_data_from_file_groups(data):\n    '''\n    Get data by group normalization.\n    '''\n    \n    data = data_group_normalization_from_file(data)\n    \n    return data\n    \ndef data_clean_groups_from_file(data):\n    '''\n    Clean data according to the format of the data given.\n    '''\n    \n    groups = ['P', 'M', 'G', 'F', 'N']\n    \n    for group in groups:\n        data = get_group_data_from_file(data)\n        \n        group_data = []\n        \n        for item in data:\n            if item in groups:\n                group_data.append(item)\n        \n        data = data_clean(group_data)\n        \n    return data\n    \ndef group_data_clean_normalization(data):\n    '''\n    Clean data according to the format of the data given.\n    '''\n    \n    groups = ['P', 'M', 'G', 'F', 'N']\n    \n    for group in groups:\n        data = get_group_data_from_file_groups(data)\n        \n        group_data = []\n        \n        for item in data:\n            if item in groups:\n                group_data.append(item)\n        \n        data = data_clean(group_data)\n        \n    return data\n    \ndef get_group_data_from_file_groups_normalization(file_name):\n    '''\n    Get group data according to the format of the data given.\n    '''\n    \n    with open(file_name) as f",
        "num_ids": 14
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile('(\\([^)]*?\\)[^)]*?)[,]')\n    return p.sub('', str(items))\n",
        "num_ids": 39
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for item in items:\n        if item[0] == '(' and item[-1] == ')':\n            output.append(item[2:-1])\n        else:\n            output.append(item)\n    return output\n",
        "num_ids": 62
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis3(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis4(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis5(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis6(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis7(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis8(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis9(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis10(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis11(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis12(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis13(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis14(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis15(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis16(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis17(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis18(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis19(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis20(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis21(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis22(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis23(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis24(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis25(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while items[-1] == '(':\n        items = items[:-1]\n    while items[0] == ')':\n        items = items[1:]\n    return items\ndef remove_parenthesis26(items):\n    '''\n    Write a function to remove th",
        "num_ids": 9
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return_list = []\n    for item in items:\n        if item == '(':\n            return_list.append(item)\n        elif item == ')':\n            if return_list:\n                return_list.pop()\n            else:\n                return_list.append(')')\n    return return_list\n",
        "num_ids": 77
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    ans = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            ans.append(items[i])\n        elif items[i] == ')':\n            if len(ans) == 0:\n                ans.append(items[i])\n            elif ans[-1] == '(':\n                ans.pop()\n            else:\n                ans.append(items[i])\n    return ''.join(ans)\n",
        "num_ids": 112
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r\"(\\([^)]*\\))\"\n    #return re.sub(regex, '', items)\n    return re.sub(regex, '', items, 0)\n",
        "num_ids": 48
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = n-1\n    while i > 0: \n        if n%(i+1) == 0: \n            return n%i \n        i -= 1 \n    return 0 \n",
        "num_ids": 49
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return n\n    if n == 1:\n        return 1\n    return is_nonagonal(n - 1) + 1\n",
        "num_ids": 38
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    for i in range(n):\n        if n-i==1:\n            return 2\n        if n-i==2:\n            return 3\n        if n-i==3:\n            return 4\n    if n%2==1:\n        return 3\n    else:\n        return 4\n",
        "num_ids": 93
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n%4\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        if i==0:\n            return n\n        if i==n-1:\n            return i\n        return i\n",
        "num_ids": 39
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 2 * is_nonagonal(n - 1)\n",
        "num_ids": 43
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 4\n    else:\n        return 4 - (n%4)\n",
        "num_ids": 40
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    from itertools import permutations\n    if (n == 0):\n        return 1\n    elif (n == 1):\n        return 1\n    else:\n        return sum(permutations([1,2,3,4,5]))\n",
        "num_ids": 61
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n - 1\n    for i in range(n+1):\n        if (i - (n-i)//2)%2 == 1:\n            return i\n    return -1\n",
        "num_ids": 48
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base case\n    if n == 0 or n == 1: \n        return n \n",
        "num_ids": 24
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(' ', '')\n    text_wordz_middle = re.compile(r'z')\n    text_middle_end = re.compile(r'z\\d*\\d')\n    if text_wordz_middle.search(text):\n        return False\n    if text_middle_end.search(text):\n        return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Create the Regex Expression\n    regex = r\"(z|Z|Zz|Zz|Zzz)\"\n    # Split the text into a list of words\n    words = re.split(regex, text)\n    # Convert to lowercase\n    words = [word.lower() for word in words]\n    # Return true or false\n    return any(word in words for word in ['z','Z','Zz','Zz','Zzz'])\n",
        "num_ids": 108
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # print(text)\n    return re.match('z',text)\n    # print(text)\n    # print(re.match('z',text))\n",
        "num_ids": 40
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz_start_index = 0\n    wordz_middle_index = len(text) - 1\n    \n    for word in text.split(\" \"):\n        wordz_start_index = -1\n        wordz_middle_index = -1\n        if word[0].isalpha():\n            if word[0].isupper():\n                wordz_start_index = text.find(word.upper())\n                if wordz_start_index >= 0:\n                    wordz_middle_index = text.find(word.upper(), wordz_start_index + 1)\n                    if wordz_middle_index >= 0:\n                        pass\n                    else:\n                        return False\n                    pass\n                else:\n                    wordz_start_index = text.find(word.lower())\n                    wordz_middle_index = text.find(word.lower(), wordz_start_index + 1)\n                    if wordz_middle_index >= 0:\n                        pass\n                    else:\n                        return False\n                    pass\n            else:\n                wordz_start_index = text.find(word.lower())\n                wordz_middle_index = text.find(word.lower(), wordz_start_index + 1)\n                if wordz_middle_index >= 0:\n                    pass\n                else:\n                    return False\n                pass\n        else:\n            return False\n        pass\n    pass\n",
        "num_ids": 323
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(\"(z|Z)\", text)!= None\n",
        "num_ids": 18
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'z\\w+'\n    match = re.search(pattern, text)\n    if match!= None:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'z')\n    return pattern.search(text)!= None\n",
        "num_ids": 26
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # return re.match(\"(z)\", text)\n    return re.search(\"z\",text).group()==''\n",
        "num_ids": 30
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    m = re.search(r'[A-Z]+', text)\n    \n    if m!= None:\n        start = m.span()[0]\n        end = start + len(m.group())\n        if start < end:\n            return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return not re.search(r'[z]', text)\n",
        "num_ids": 18
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # input = [1, 2, 3, 4, 5]\n    # k = 3\n    # output = [4, 5, 1, 2, 3]\n    output = []\n    n = len(input)\n    for i in range(0, n - k, 1):\n        output.append(input[i])\n    for j in range(k, 0, -1):\n        output.append(input[n - j])\n    return output\n",
        "num_ids": 108
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # convert the given array into a list of strings\n    output = []\n    for i in range(0, len(input), k):\n        output.append(input[i:i+k])\n    return output\n",
        "num_ids": 52
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    size = len(input)\n    for i in range(size):\n        reverse_array.append(input[size-i-1])\n    for i in range(size//2):\n        reverse_array.insert(0, reverse_array.pop())\n    for i in range(k):\n        reverse_array.append(reverse_array.pop(0))\n    return reverse_array\n",
        "num_ids": 100
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input, k-1) + [input.pop(k)]\n    ",
        "num_ids": 45
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = [None for i in range(0,len(input))]\n    \n    for i in range(0,len(input)):\n        output[i] = input[(len(input)-(i+1))]\n    \n    return output\n",
        "num_ids": 62
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = [] \n    n = len(input) \n    for i in range(n//2): \n        output.append(input[i]) \n        output.append(input[n-i-1]) \n    return output \n     \ndef merge(arr): \n    '''\n    Write a python function to merge two sorted arrays. \n    '''\n    if len(arr) <= 1: \n        return arr \n    elif arr[0] > arr[1]: \n        arr[0], arr[1] = arr[1], arr[0] \n    length = len(arr) \n    i, j = 0, 0\n    while i < length: \n        if arr[i] < arr[j]: \n            arr[i+1] = arr[i] \n            i += 1\n        else: \n            arr[i+1] = arr[j] \n            j += 1\n        i += 1 \n    return arr \n \ndef MergeSort(arr): \n    '''\n    Write a python function to sort an array. \n    '''\n    if len(arr) <= 1: \n        return arr \n    else: \n        mid = len(arr) // 2 \n        L = arr[:mid] \n        R = arr[mid:] \n        L = MergeSort(L) \n        R = MergeSort(R) \n        return merge(L + R) \n \ndef InsertSort(arr): \n    '''\n    Write a python function to sort an array. \n    '''\n    for i in range(1, len(arr)): \n        temp = arr[i] \n        j = i \n        while j > 0 and arr[j - 1] > temp: \n            arr[j] = arr[j - 1] \n            j -= 1\n        arr[j] = temp \n \ndef radixSort(arr, n): \n    '''\n    Write a python function to sort an array using the \n    radix sort algorithm. \n    '''\n    for i in range(n): \n        if arr[i] >= 10: \n            arr[i:n:i] = [arr[i//n]] + [arr[i:n:i][::-1].index(min(arr[i:n:i]))]\n \ndef SelectionSort(arr): \n    '''\n    Write a python function to sort an array using the \n    selection sort algorithm. \n    '''\n    for i in range(len(arr)): \n        for j in range(len(arr) - i - 1): \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n \ndef ShellSort(arr): \n    '''\n    Write a python function to sort an array using the \n    shell sort algorithm. \n    '''\n    for i in range(int(len(arr)/2)): \n        for j in range(len(arr)-i-1): \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \ndef BubbleSort(arr): \n    '''\n    Write a python function to sort an array using the \n    bubble sort algorithm. \n    '''\n    for i in range(len(arr)): \n        for j in range(len(arr)-i-1): \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n \ndef Shell_Sort(arr): \n    '''\n    Write a python function to sort an array using the \n    shell sort algorithm. \n    '''\n    for i in range(int(len(arr)/2)): \n        for j in range(len(arr)-i-1): \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n \ndef InsertSort(arr): \n    '''\n    Write a python function to sort an array using the \n    insertion sort algorithm. \n    '''\n    for i in range(1, len(arr)): \n        for j in range(i): \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n \ndef QuickSort(arr, first, last): \n    '''\n    Write a python function to sort an array using the \n    quick sort algorithm. \n    '''\n    if first < last: \n        pi = Partition(arr, first, last) \n        QuickSort(arr, first, pi - 1) \n        QuickSort(arr, pi + 1, last)\n \ndef Partition(arr, first, last): \n    '''\n    Write a python function to sort an array using the \n    partitioning algorithm. \n    '''\n    i = first - 1\n    pivot = arr[last]\n    for j in range(first, last): \n        if arr[j] <= pivot: \n            i += 1\n            arr[i], arr[j] = arr[j], arr[i] \n    arr[i + 1], arr[last] = arr[last], arr[i + 1] \n    return i + 1\n \ndef SelectionSort(arr): \n    '''\n    Write a python function to sort an array using the \n    selection sort algorithm. \n    '''\n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i + 1, len(arr)): \n            if arr[j] < arr[min_idx]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n \ndef MergeSort(arr): \n    '''\n    Write a python function to sort an array using the \n    merge sort algorithm. \n    '''\n    if len(arr) <= 1: \n        return arr \n    mid = len(arr) // 2\n    L = arr[:mid] \n    R = arr[mid:] \n    L = MergeSort(L) \n    R = MergeSort(R) \n    return merge(L + R) \n \ndef Merge_Sort(arr): \n    '''\n    Write a python function to sort an array using the \n    merge sort algorithm. \n    '''\n    if len(arr) <= 1: \n        return arr \n    mid = len(arr) // 2\n    L = arr[:mid] \n    R = arr[mid:] \n    L = Merge_Sort(L) \n    R = Merge_Sort(R) \n    return merge(L + R) \n \ndef Merge(arr): \n    '''\n    Write a python function to sort an array using the \n    merge sort algorithm. \n    '''\n    if len(arr) <= 1: \n        return arr \n    else: \n        mid = len(arr) // 2\n        L = arr[:mid] \n        R = arr[mid:] \n        L = Merge(L) \n        R = Merge(R) \n        return merge(L + R) \n \ndef Merge_Sort(arr): \n    '''\n    Write a python function to sort an array using the \n    merge sort algorithm. \n    '''\n    if len(arr) <= 1: \n        return arr \n    mid = len(arr) // 2\n    L = arr[:mid] \n    R = arr[mid:] \n    L = Merge_Sort(L) \n    R = Merge_Sort(R) \n    return merge(L + R) \n \ndef Merge(arr): \n    '''\n    Write a python function to sort an array using the \n    merge sort algorithm. \n    '''\n    if len(arr) <= 1: \n        return arr \n    else: \n        mid = len(arr) // 2\n        L = arr[:mid] \n        R = arr[mid:] \n        L = Merge(",
        "num_ids": 57
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # loop through array and reverse\n    for i in range(len(input) - 1, -1, -1):\n        print(i)\n        input[i] = input[i + 1]\n    input[0] = 0\n    return input\n",
        "num_ids": 61
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    for i in range(len(input)): \n        reverse_array.append(input[i][len(input) - k])\n        print(reverse_array)\n    return reverse_array\n    \nif __name__ == \"__main__\": \n    arr = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12] ]\n    print(\"Input :\", arr)\n    print(\"Output :\", reverse_Array_Upto_K(arr, 2))",
        "num_ids": 132
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a = len(input)\n    output = []\n    for i in range(a):\n        output.append(input[(i+k)%a])\n    return output\n",
        "num_ids": 44
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev_num = []\n    for i in range(len(input)-k):\n        rev_num.append(input[i])\n    rev_num.reverse()\n    return rev_num\n",
        "num_ids": 48
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_with_values = tuple(test_dict.values())\n    for value in tuple_with_values:\n        test_tup.append(value)\n    return tuple_with_values\n    \n    ",
        "num_ids": 52
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup += (key, test_dict[key])\n    return test_tup\n",
        "num_ids": 34
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if len(test_tup) < len(test_dict):\n        return\n    if not isinstance(test_dict, tuple):\n        raise TypeError(\"test_dict must be a tuple\")\n    for i in range(len(test_dict)):\n        test_tup.append(test_dict[i])\n",
        "num_ids": 78
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    try:\n        tup = tuple(test_tup)\n        tup += tuple(test_dict.values())\n        return tup\n    except:\n        print(\"Error adding dictionary.\")\n        print(test_dict)\n        print(test_tup)\n        return \"Error\"\n",
        "num_ids": 71
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup\n",
        "num_ids": 21
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1] + test_dict)\n",
        "num_ids": 25
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if len(test_dict) < 1:\n        raise AssertionError('test_dict must be a non-empty dictionary.')\n    if len(test_dict) == 1:\n        return (test_tup[0], test_dict)\n    return tuple(test_tup[0] + [i for i in test_dict.values()])\n",
        "num_ids": 86
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # YOUR CODE HERE\n    print('Test Tuple')\n    print(test_tup)\n    print('Test Dict')\n    print(test_dict)\n    \n    return (test_tup[0] + test_dict[0], test_tup[1] + test_dict[1])\n    \ndef main():\n    '''\n    Test the program.\n    '''\n    print('--- Day 3: Binary Boarding ---')\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add_dict_to_tuple(('[#]', 1), {'[#]': 2})\n    # add",
        "num_ids": 1908
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # creates a list of unique cost values\n    costs = list(set(cost))\n    # initializing a length list\n    lengths = []\n    # for every cost value\n    for cost in costs:\n        # stores the amount of cells visited\n        cells = len(set(cost))\n        # adds it to the list\n        lengths.append(cells)\n    # list of unique lengths\n    lengths.sort()\n    # takes the first element of the list\n    # it will be the length of the list\n    first = lengths[0]\n    # divides the number of cells by the number\n    # of elements in the list\n    # that is, divides by the number of \n    # cells in the list,\n    # then converts it to an integer\n    num = first/len(costs)\n    # calculates the total cost\n    total = sum(costs)\n    # the average of the path\n    average = total/num\n    # returns the average\n    return average\n",
        "num_ids": 230
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # check if input is valid\n    if not cost:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    total = 0\n",
        "num_ids": 15
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    elif N == 1:\n        return cost[0][0]\n    \n    if N == 2:\n        return cost[0][0] + cost[0][1]\n",
        "num_ids": 63
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    return max(cost[i][j] for i in range(len(cost)) for j in range(len(cost[i])))\n",
        "num_ids": 36
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    cost.sort()\n    return sum(cost[0:len(cost)//2])/len(cost)\n",
        "num_ids": 43
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0: return 0\n    dp = [[0 for x in range(N)] for y in range(N)]\n    totalCost = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n",
        "num_ids": 194
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Set up a list of non-negative integers, representing the rows and columns of the matrix\n    rows = len(cost)\n    cols = len(cost[0])\n    # Init the matrix with zero's, that is not represented in the cost\n    mat = [[0 for i in range(rows)] for j in range(cols)]\n    # Init a path with the starting cell and ending cell\n    path = []\n    # Populate a path with the starting cell and ending cell\n    path.append(cost[0][0])\n    # Append the starting cell to the path\n    path.append(cost[0][0])\n    # Append the ending cell to the path\n    path.append(cost[0][cols-1])\n    # Loop over all cells of the path\n    for row in range(1, rows):\n        # Populate the path with the current cell\n        path.append(cost[row][cols-1])\n        # Populate the path with the current cell\n        path.append(cost[row][cols-1])\n    # Return the max value\n    return max(cost[rows-1][cols-1], mat[rows-1][cols-1])/mat[rows-1][cols-1]\n",
        "num_ids": 292
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Save the N x N matrix as a list\n    n = len(cost)\n    # Create a list with all rows\n    r = range(n)\n    # Create a dict to map the index to the row and column\n    r_d = {}\n    for i in r:\n        r_d[i] = [i]\n    # Create a dict to map the index to the matrix element\n    r_d_dict = {}\n    for i in r:\n        r_d_dict[i] = []\n    for i in r:\n        for j in r:\n            r_d_dict[i].append(cost[j][i])\n    # Find the max value in the dict and place it at the top left cell of the matrix.\n    max_val = 0\n    for i in r_d_dict:\n        max_val = max(max_val, max(r_d_dict[i]))\n    # Go through all the columns\n    for i in r:\n        # Find the row with the maximum value\n        max_row = 0\n        for j in r_d_dict[i]:\n            if max_val == j:\n                max_row = i\n        # Find the max column in the row\n        for j in r_d_dict[max_row]:\n            if max_val == j:\n                max_col = i\n    # Return the max value\n    return max_val\n",
        "num_ids": 332
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # we have to use a stack for this\n    # we can do both the is_empty method and the push/pop method\n    if (not cost):\n        return 0\n    # check to see if there is a solution\n    if (not max_heap):\n        # not a solution\n        return 0\n    # get the max-heap and push the node on\n    # the stack\n    max_heap_ = max_heap\n    path = []\n    # push the node and the path on the stack\n    # each node will have a total cost associated with it\n    for node in cost:\n        path.append(node)\n        max_heap_.push(node)\n    # iterate over the stack and get the average cost\n    # when a path has been found, it is returned\n    # the average is the sum of the cells with a total cost of 0\n    # this formula is an O(n)\n    total_cost = 0\n    for i in range(len(max_heap_)):\n        cell_count = 0\n        cell_total_cost = 0\n        if (max_heap_[i].is_empty()):\n            return 0\n        while(cell_count < len(max_heap_[i])):\n            # get the total cell cost of the current cell\n            # (with total cost of the cell) and\n            # pop it and add it on the path\n            cell_total_cost = max_heap_[i].pop(cell_count)\n            path.append(cell_total_cost)\n            cell_count += 1\n            total_cost += cell_total_cost\n    # return the total cost\n    # of the path\n    return total_cost\n",
        "num_ids": 399
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students.values():\n        if i[0] > h and i[1] > w:\n            students.pop(students.keys())\n    return students\n",
        "num_ids": 44
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for student in students:\n        student_height, student_weight = students[student]\n        if student_height >= h and student_weight >= w:\n            filtered_data[student] = students[student]\n    return filtered_data\n",
        "num_ids": 66
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #Create the empty list and initialize it with 0s\n    students_l = []\n    for s in students:\n        if(s['height']>h and s['weight']>w):\n            students_l.append(s)\n    #Sort the list according to the weight and height\n    students_l.sort(key = lambda x: (x['weight'],x['height']))\n    #Check for the minimum height and weight\n    if(len(students_l)>0):\n        if(students_l[0]['height']<h and students_l[0]['weight']<w):\n            return students_l\n    #Return the empty list\n    return students_l\n",
        "num_ids": 168
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for key, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            filtered_data[key] = value\n    return filtered_data\n",
        "num_ids": 55
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    for key in students:\n        if students[key][0] >= h and students[key][1] >= w:\n            return key\n        \n    return None\n",
        "num_ids": 42
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.keys():\n        if students[student][1] < h or students[student][1] < w:\n            students.pop(student)\n    return students\n",
        "num_ids": 45
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_list = []\n    \n    for student in students:\n        if len(student) > h and student[0] >= h:\n            filtered_list.append(student)\n        elif len(student) > w and student[1] >= w:\n            filtered_list.append(student)\n        else:\n            pass\n",
        "num_ids": 83
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students={}\n    for student in students:\n        if all(x>w[0] for x in student[1]):\n            if all(x>h[1] for x in student[1]):\n                new_students[student[0]]=student[1]\n    return new_students\n",
        "num_ids": 78
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students.values():\n        # print(student[1])\n        # print(student[0][0])\n        if student[0][0] >= h and student[0][1] >= w:\n            filtered_students.append(student)\n",
        "num_ids": 73
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if student[1][0] >= h and student[1][1] >= w:\n            filtered_students[student[0]] = student\n    return filtered_students\n",
        "num_ids": 60
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    m = len(nums1)\n    n = len(nums2)\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if nums1[i] == nums2[j]:\n                dp[i][j] = dp[i][j] + 1\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    return dp[m-1][n-1]\n",
        "num_ids": 157
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([1 for x in nums1 if x in nums2])\n",
        "num_ids": 21
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_dict = {}\n    for i, item in enumerate(nums1):\n        if item in count_dict:\n            count_dict[item] = count_dict[item] + 1\n        else:\n            count_dict[item] = 1\n    for i, item in enumerate(nums2):\n        if item in count_dict:\n            count_dict[item] = count_dict[item] + 1\n        else:\n            count_dict[item] = 1\n    for k, v in count_dict.items():\n        if v == 1:\n            return k\n",
        "num_ids": 141
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    l1 = list(nums1)\n    l2 = list(nums2)\n    if len(l1)!= len(l2):\n        return 0\n    \n    n1 = len(l1)\n    n2 = len(l2)\n    dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if l1[i-1] == l2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n1][n2]\n",
        "num_ids": 204
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    nums1_indices = set(nums1)\n    nums2_indices = set(nums2)\n    for i in nums1_indices:\n        if i in nums2_indices:\n            count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums1_count = 0\n    nums2_count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            nums1_count = nums1_count + 1\n        else:\n            nums2_count = nums2_count + 1\n",
        "num_ids": 84
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                counter += 1\n    return counter\n",
        "num_ids": 60
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    nums_list = nums1+nums2\n    count_same_pair_count = 0\n    for i in range(len(nums_list)):\n        for j in range(i, len(nums_list)):\n            if nums_list[i]==nums_list[j]:\n                count_same_pair_count+=1\n    return count_same_pair_count\n",
        "num_ids": 98
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return [num1.count(num2) for num1, num2 in zip(nums1, nums2)]\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_max = int(power)\n    result = 1\n    while base:\n        result *= base\n        base = int(base / 10)\n    return result * result + power_max\n",
        "num_ids": 48
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_str = str(power)\n    if len(base_str) > len(power_str):\n        return 0\n    sum = 0\n    for i in range(len(base_str)):\n        sum = sum + int(base_str[i]) * (10 ** i)\n    return sum\n",
        "num_ids": 85
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    if power == 0:\n        return 1\n    else:\n        return base + power_base_sum(base, power - 1)\n",
        "num_ids": 36
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while base:\n        result += base % 10\n        base = base // 10\n",
        "num_ids": 26
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    power_str = str(power)\n    for digit in power_str:\n        sum += int(digit)\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 1\n    return power_base_sum(base // 10, power) + base % 10\n",
        "num_ids": 32
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(len(base)):\n        sum += int(base[i]) * (power ** i)\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = int(base)\n    power = int(power)\n    base_digits = []\n    power_digits = []\n    base_sum = 0\n    power_sum = 0\n    if base > power:\n        return base_sum\n    else:\n        while base > 0:\n            base_sum = base_sum + base\n            base = base // base\n            base_digits.append(base_sum % 10)\n            base_sum = base_sum // base\n        while power > 0:\n            power_sum = power_sum + power_digits[power]\n            power = power // power\n            power_digits.append(power_sum % 10)\n            power_sum = power_sum // power\n    return base_sum, base_digits, power_sum\n",
        "num_ids": 188
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # DO NOT MODIFY anything in this function\n    return sum([int(i) for i in str(base)])\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 1\n    if power == 0:\n        return 1\n    return base + power_base_sum(base-1, power-1)\n",
        "num_ids": 43
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    return re.findall(r\"\\w{3,}\\s\\w{3,}\", text1)\n",
        "num_ids": 31
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_string = re.findall(r\"\\(\\s*?[^\\s,\\.]*?\\)\",text1)\n    quotation_string = \"\".join(quotation_string)\n    quotation_string = quotation_string.replace(\"'\",'\"')\n    quotation_string = quotation_string.replace('\u2018','\"')\n    quotation_string = quotation_string.replace('\u2019','\"')\n    quotation_string = quotation_string.replace('(','')\n    quotation_string = quotation_string.replace(')','')\n    quotation_string = quotation_string.replace(':','')\n    quotation_string = quotation_string.replace(';','')\n    quotation_string = quotation_string.replace('&','')\n    quotation_string = quotation_string.replace(';','')\n    quotation_string = quotation_string.replace('!','')\n    quotation_string = quotation_string.replace('(','')\n    quotation_string = quotation_string.replace(')','')\n    quotation_string = quotation_string.replace('*','')\n    quotation_string = quotation_string.replace('#','')\n    quotation_string = quotation_string.replace('&','')\n    quotation_string = quotation_string.replace('\"','')\n    quotation_string = quotation_string.replace('\\n','')\n    quotation_string = quotation_string.replace('\\t','')\n    return quotation_string\n",
        "num_ids": 367
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.sub(r'\\s{2,}','', text1)\n    \n    return text1.replace('\"', '').replace(\"'\", \"\").strip().lower()\n",
        "num_ids": 48
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(?<=\\\")(.+?)(?=\\\")\"\n    text = re.sub(pattern, r'\\g<1> \\g<2>', text1)\n    return text\ndef extract_quotation2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(?<=\\\")(.+?)(?=\\\")\"\n    pattern = r\"(?<=\\\")(.*?)\\g<1>\"\n    text = re.sub(pattern, r'\\g<1> \\g<2>', text1)\n    return text\ndef extract_conclusion(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r\"(?<=\\\")(.+?)(?=\\\")\"\n    text = re.sub(pattern, r'\\g<1> \\g<2>', text1)\n    return text\n",
        "num_ids": 53
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.split('\"')\n    text2 = [text2[1]] + text2[2:]\n    return text2\ndef extract_number(text):\n    '''\n    Write a function to extract number from the given string.\n    '''\n    text2 = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            text2.append(text[i])\n        else:\n            pass\n    return \"\".join(text2)\ndef remove_all_quotes(text):\n    '''\n    Write a function to remove all quotes from the given string.\n    '''\n    text2 = []\n    for i in range(len(text)):\n        if text[i] == '\"':\n            text2.append(text[i])\n        else:\n            pass\n    text3 = \"\".join(text2)\n    return text3\ndef remove_all_apostrophes(text):\n    '''\n    Write a function to remove all apostrophes from the given string.\n    '''\n    text2 = []\n    for i in range(len(text)):\n        if text[i] == '\\'':\n            text2.append(text[i])\n        else:\n            pass\n    text3 = \"\".join(text2)\n    return text3\ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from the given string.\n    '''\n    text2 = []\n    for i in range(len(text)):\n        if text[i] =='':\n            text2.append(text[i])\n        else:\n            pass\n    text3 = \"\".join(text2)\n    return text3\ndef remove_double_quote(text):\n    '''\n    Write a function to remove double quotes from the given string.\n    '''\n    text2 = []\n    for i in range(len(text)):\n        if text[i] == '\"':\n            text2.append(text[i])\n        else:\n            pass\n    text3 = \"\".join(text2)\n    return text3\ndef remove_single_quote(text):\n    '''\n    Write a function to remove single quotes from the given string.\n    '''\n    text2 = []\n    for i in range(len(text)):\n        if text[i] == \"'\":\n            text2.append(text[i])\n        else:\n            pass\n    text3 = \"\".join(text2)\n    return text3\ndef remove_conversion(text):\n    '''\n    Write a function to remove conversion from the given string.\n    '''\n    text2 = []\n    for i in range(len(text)):\n        if text[i] == '!':\n            text2.append(text[i])\n        else:\n            pass\n    text3 = \"\".join(text2)\n    return text3\ndef is_int(text):\n    '''\n    Write a function to check whether the given string is an integer or not.\n    '''\n    if text[0] in ['.', ',']:\n        return False\n    elif text[0].isdigit():\n        return True\n    else:\n        return False\ndef is_float(text):\n    '''\n    Write a function to check whether the given string is a float or not.\n    '''\n    if text[0] in ['.', ',']:\n        return False\n    elif text[0].isdigit():\n        return True\n    else:\n        return False\ndef is_int_or_float(text):\n    '''\n    Write a function to check whether the given string is an integer or not.\n    '''\n    if text[0] in ['.', ',']:\n        return False\n    elif text[0].isdigit():\n        return True\n    else:\n        return False\ndef is_whitespace(text):\n    '''\n    Write a function to check whether the given string is whitespace or not.\n    '''\n    if text == '':\n        return True\n    else:\n        return False\ndef is_camel_case(text):\n    '''\n    Write a function to check whether the given string is camel case or not.\n    '''\n    text2 = text.lower()\n    if text2 == text:\n        return True\n    else:\n        return False\ndef is_word(text):\n    '''\n    Write a function to check whether the given string is word or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        return False\ndef is_cap_word(text):\n    '''\n    Write a function to check whether the given string is cap word or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        if text2[0] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\ndef is_cap_sent(text):\n    '''\n    Write a function to check whether the given string is cap sent or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        if text2[0] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\ndef is_cap_sent_start(text):\n    '''\n    Write a function to check whether the given string is cap sent start or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        if text2[0] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\ndef is_cap_sent_end(text):\n    '''\n    Write a function to check whether the given string is cap sent end or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        if text2[-1] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\ndef is_capital(text):\n    '''\n    Write a function to check whether the given string is capital or not.\n    '''\n    text2 = text.lower()\n    if text2[0] in ['a', 'e', 'i', 'o', 'u']:\n        return True\n    else:\n        return False\ndef is_small_caps(text):\n    '''\n    Write a function to check whether the given string is small caps or not.\n    '''\n    text2 = text.lower()\n    if len(text2) == 0:\n        return True\n    else:\n        return False\ndef is_capital_sent(text):\n    '''\n    Write a function to check whether the given string is capital sent or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        if text2[0] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\ndef is_capital_sent_start(text):\n    '''\n    Write a function to check whether the given string is capital sent start or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        if text2[0] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\ndef is_capital_sent_end(text):\n    '''\n    Write a function to check whether the given string is capital sent end or not.\n    '''\n    text2 = text.split(\" \")\n    if len(text2) == 0:\n        return True\n    else:\n        if text2[-1] in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\ndef is_apostrophes(text):\n    '''\n    Write a function to check whether the give",
        "num_ids": 11
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\s(?:[^\\s]+?)\\s',text1)\n",
        "num_ids": 28
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\"','')\n    return text1.replace('\"','')\n",
        "num_ids": 28
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r\"[^\\\"']([^\\\"']+)[\\\"'](.+)\", text1)\n",
        "num_ids": 31
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(?:\\s*[^\"]*\"|\\s*[^\"]*).*?\"', re.DOTALL)\n    text2 = pattern.sub(r'\"', text1)\n    pattern = re.compile(r\"'(?:\\s*[^']*\"|\\s*[^']*).*?\"\", re.DOTALL)\n    text3 = pattern.sub(r\"'\", text2)\n    pattern = re.compile(r\"'(?:\\s*[^']*\"|\\s*[^']*).*?\"\", re.DOTALL)\n    text4 = pattern.sub(r\"'\", text3)\n    return text4\n",
        "num_ids": 169
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = ''\n    while text1:\n        if text1[0] in ['\u201c', '\u201d', '\u201c', '\u201d']:\n            text = text + text1[0]\n            text1 = text1[1:]\n        elif text1[0] == '\u201c' or text1[0] == '\u201d':\n            if text1[0] == '\u201c':\n                text = text + text1[1]\n                text1 = text1[2:]\n            elif text1[0] == '\u201d':\n                text = text + text1[1]\n                text1 = text1[2:]\n            else:\n                raise TypeError(\"The given string does not contain valid characters.\")\n        else:\n            raise TypeError(\"The given string does not contain valid characters.\")\n    return text\ndef extract_numbers(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\[\\]!](\\d+)(\\d+)([\\]\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_decimal(text):\n    '''\n    Write a function to extract decimal values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\[\\]!](\\d+)(\\d+)([\\]\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_phone_number(text):\n    '''\n    Write a function to extract phone numbers between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_email(text):\n    '''\n    Write a function to extract email addresses between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_phone_and_addresses(text):\n    '''\n    Write a function to extract phone numbers and addresses between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_surnames(text):\n    '''\n    Write a function to extract surnames between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_names(text):\n    '''\n    Write a function to extract names between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_numbers_and_addresses(text):\n    '''\n    Write a function to extract numbers and addresses between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_gender(text):\n    '''\n    Write a function to extract gender between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_address(text):\n    '''\n    Write a function to extract address between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_dates(text):\n    '''\n    Write a function to extract dates between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_time(text):\n    '''\n    Write a function to extract time between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_email(text):\n    '''\n    Write a function to extract email addresses between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_passwords(text):\n    '''\n    Write a function to extract passwords between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_decimals(text):\n    '''\n    Write a function to extract decimals between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_numbers(text):\n    '''\n    Write a function to extract numbers between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_phone_number(text):\n    '''\n    Write a function to extract phone numbers between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_addresses(text):\n    '''\n    Write a function to extract addresses between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_addresses_and_dates(text):\n    '''\n    Write a function to extract addresses and dates between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_names(text):\n    '''\n    Write a function to extract names between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_gender(text):\n    '''\n    Write a function to extract gender between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_address(text):\n    '''\n    Write a function to extract address between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_numbers_and_addresses(text):\n    '''\n    Write a function to extract numbers and addresses between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"[\\(\\)!](\\d+)(\\d+)([\\)]\", r\"\\1 \\2 \\3\", text)\n    return text\ndef extract_time(text):\n    '''\n    Write a function to extract time between quotation marks \" \" of the given string",
        "num_ids": 18
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # write your code here\n    return tuple(i*j for i,j in test_tup)\n",
        "num_ids": 27
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(0, len(test_tup)):\n        new_tup = new_tup + (test_tup[i] * test_tup[i+1])\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    result = ()\n    for i in range(len(test_tup) - 1):\n        result = result + (test_tup[i] * test_tup[i + 1])\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*y for x,y in zip(test_tup[0],test_tup[1:])])\n",
        "num_ids": 33
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1,t_2,t_3,t_4,t_5,t_6,t_7,t_8,t_9,t_10 = test_tup\n    return tuple(map(lambda x: x*x,t_1+t_2+t_3+t_4+t_5+t_6+t_7+t_8+t_9+t_10))\n",
        "num_ids": 102
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tuple = []\n    for i in test_tup:\n        new_tuple.append(i*test_tup[i+1])\n    return new_tuple\n",
        "num_ids": 47
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * y for x,y in zip(*test_tup)])\n",
        "num_ids": 23
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # WRITE YOUR CODE HERE\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n    \n    \ndef divide_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to (t_i / t_{i+1}) * t_{i+2}.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n-2):\n        result.append((test_tup[i]/test_tup[i+2]) * test_tup[i+1])\n    return tuple(result)\n    \n    \ndef validate_solution(test_tup, solution):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and the expected answer and returns a boolean which should be True if the tuple of numbers is correct. If not, then it should return False.\n    '''\n    result = True\n    for i in range(len(test_tup)):\n        if test_tup[i]!= solution[i]:\n            result = False\n    return result\n    \n    \ndef main():\n    # Part 1\n    # Test tuple\n    t_1 = (5, 2, 8, 9, 7, 11, 9)\n    # Expected tuple\n    # 5/2 = (5/2 + 1) = 9\n    # 8/9 = (8/9 + 1) = 9\n    # 7/11 = (7/11 + 1) = 9\n    # 9/11 = (9/11 + 1) = 9\n    # 7/9 = (7/9 + 1) = 9\n    # 11/9 = (11/9 + 1) = 9\n    # 11/7 = (11/7 + 1) = 9\n    # 9/7 = (9/7 + 1) = 9\n    # 11/11 = (11/11 + 1) = 9\n    # 9/11 = (9/11 + 1) = 9\n    \n    # Part 2\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 8\n    # 6/9 = (6/9 + 1) = 7\n    # 8/9 = (8/9 + 1) = 9\n    # 9/9 = (9/9 + 1) = 9\n    # 8/11 = (8/11 + 1) = 9\n    # 9/11 = (9/11 + 1) = 9\n    # 8/7 = (8/7 + 1) = 9\n    # 9/7 = (9/7 + 1) = 9\n    # 7/11 = (7/11 + 1) = 9\n    # 9/11 = (9/11 + 1) = 9\n    \n    # Part 3\n    # Test tuple\n    # 5/2 = (5/2 + 1) = 4\n    # 8/9 = (8/9 + 1) = 6\n    # 9/9 = (9/9 + 1) = 10\n    # 8/11 = (8/11 + 1) = 11\n    # 9/11 = (9/11 + 1) = 12\n    # 9/7 = (9/7 + 1) = 13\n    # 9/11 = (9/11 + 1) = 13\n    # 9/11 = (9/11 + 1) = 13\n    \n    # Part 4\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 3\n    # 11/9 = (11/9 + 1) = 4\n    \n    # Part 5\n    # Test tuple\n    # 5/2 = (5/2 + 1) = 4\n    # 8/9 = (8/9 + 1) = 7\n    # 9/9 = (9/9 + 1) = 10\n    # 8/11 = (8/11 + 1) = 12\n    # 9/11 = (9/11 + 1) = 13\n    # 7/11 = (7/11 + 1) = 13\n    \n    # Part 6\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 11/9 = (11/9 + 1) = 7\n    \n    # Part 7\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 11/9 = (11/9 + 1) = 7\n    \n    # Part 8\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 11/9 = (11/9 + 1) = 7\n    \n    # Part 9\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 7/9 = (7/9 + 1) = 7\n    # 11/9 = (11/9 + 1) = 9\n    \n    # Part 10\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 11/9 = (11/9 + 1) = 7\n    \n    # Part 11\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 7/9 = (7/9 + 1) = 7\n    # 11/9 = (11/9 + 1) = 9\n    \n    # Part 12\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 7/9 = (7/9 + 1) = 7\n    # 11/9 = (11/9 + 1) = 9\n    \n    # Part 13\n    # Test tuple\n    # 4/4 = (4/4 + 1) = 3\n    # 5/6 = (5/6 + 1) = 1\n    # 6/9 = (6/9 + 1) = 3\n    # 8/9 = (8/9 + 1) = 2\n    # 9/9 = (9/9 + 1) = 4\n    # 7/9 = (7/9 ",
        "num_ids": 1687
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = 0\n    for i in range(len(test_tup)):\n        a += test_tup[i] * (10 ** i)\n    return (a, a % 10)\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s = 0\n    for i in range(len(lst1)):\n        s+=lst1[i]\n    for i in range(len(lst2)):\n        s+=lst2[i]\n    return s\n",
        "num_ids": 59
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum([i+j for i,j in zip(lst1,lst2)])\n",
        "num_ids": 26
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            result.append(lst1[i])\n            for j in range(i,len(lst1)):\n                if lst2[j] not in result:\n                    result.append(lst2[j])\n        else:\n            result.append(lst1[i])\n    return result\n",
        "num_ids": 108
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # h(n) = f(n) + g(n)\n    # h(n) = f(n) + g(n) + h(n-1)\n    # f(n) = g(n) + h(n)\n    # g(n) = h(n)\n    \n    # input: a list of numbers [1,2,3,4,5,6,7,8,9]\n    #       a list of numbers [1,2,3,4,5,6,7,8,9]\n    \n    # output: [1,2,3,4,5,6,7,8,9]\n    #       [1,2,3,4,5,6,7,8,9]\n    \n    # get initial values\n    for n in lst1:\n        if type(n)!= int:\n            return \"Invalid Input\"\n        elif n < 0:\n            return \"Invalid Input\"\n    \n    for n in lst2:\n        if type(n)!= int:\n            return \"Invalid Input\"\n        elif n < 0:\n            return \"Invalid Input\"\n    \n    # get correct answer\n    return [i + j for i,j in zip(lst1,lst2)]\n",
        "num_ids": 300
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        return [lst1[i]+lst2[i] for i in range(len(lst1))]\n    else:\n        return \"Error: Numbers of elements in the arrays do not match. Please try again.\"\n",
        "num_ids": 70
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n    \n",
        "num_ids": 45
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #I did this to avoid the need to implement mathmatical functions\n    lst1 = sorted(lst1, reverse=True)\n    lst2 = sorted(lst2, reverse=True)\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = 0\n    for i in range(len(lst1)):\n        sum += lst1[i] + lst2[i]\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1=list(lst1)\n    lst2=list(lst2)\n    sum=0\n    for i in range(len(lst1)):\n        sum=sum+lst1[i]\n    for i in range(len(lst2)):\n        sum=sum+lst2[i]\n    return sum\n",
        "num_ids": 87
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #create a new list, where the items are elements of the both lists.\n    lst3 = []\n    for i in range(len(lst2)):\n        lst3.append(lst2[i])\n    \n    #create a list, where the items are the sum of the elements of the first list.\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst3[i])\n    return sum_lst\n",
        "num_ids": 128
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consecutive_duplicates = []\n    for i in range(len(nums)):\n        if nums[i] not in consecutive_duplicates:\n            consecutive_duplicates.append(nums[i])\n            return consecutive_duplicates\n    return consecutive_duplicates\n",
        "num_ids": 75
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Hashmap for current position of an element\n    n = len(nums)\n    hashmap = {}\n    for i in range(n):\n        if hashmap.get(nums[i],None) == None:\n            hashmap[nums[i]] = i\n    hashmap_len = len(hashmap)\n    \n    #Loop for each element. If the element is in the hashmap, that element must be removed. \n    for i in range(hashmap_len):\n        if hashmap.get(nums[i],None)!= None:\n            j = hashmap.get(nums[i],None)\n            nums[i] = nums[j]\n            nums[j] = None\n    \n    #For the rest of the elements, we have to find the position of the last element\n    for i in range(n-1,-1,-1):\n        if hashmap.get(nums[i],None)!= None:\n            j = hashmap.get(nums[i],None)\n            nums[i] = nums[j]\n            nums[j] = None\n    return nums\n",
        "num_ids": 271
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for idx, group in enumerate(groupby(nums)):\n        if idx!= 0:\n            first_item = group.popitem()[0]\n            if first_item!= group.popitem()[0]:\n                nums[first_item] = True\n        else:\n            return group.popitem()[0]\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # This is a recursive function\n    def remove_duplicates(nums):\n        # Check for a single element\n        if len(nums) == 1:\n            return nums\n        # If the element is greater than the last one, then we need to move it to the end of the list and remove from it\n        elif nums[-1] == nums[-2]:\n            nums = nums[:-2]\n        # Otherwise we remove the last element and add it to the end of the list\n        else:\n            nums = nums[:-1]\n            nums.append(nums[-1])\n        # Return the list\n        return nums\n    # Create a separate function to iterate over the list\n    # The idea is to use a counter, and create a counter to get the next value in the list\n    # Append the previous value to the next value\n    # Iterate through the list again\n    # If we see the previous value, then remove it from the list and add it to the next value\n    # If the current value is the last value then just return the value\n    return remove_duplicates(nums) + consecutive_duplicates(nums[1:])\n",
        "num_ids": 281
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # TODO: write your own code\n    _list = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i]!= nums[i-1]:\n            _list.append(nums[i])\n",
        "num_ids": 64
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Write your code here\n    # For example, given the list\n    # 1,1,2,2,3,3,3,4,4,4,4,5,5,5,5\n    # your function should return [1,1,2,2,3,3,3,4,4,4,4,5,5,5,5]\n    # in order to remove duplicate values, you need to convert the list\n    # into a set and then make sure that it has the same value as in the\n    # list.\n    # For example, given the list\n    # 1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5\n    # you might want to remove consecutive duplicates and return\n    # [1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5]\n    # in order to remove duplicate values, you need to convert the list\n    # into a set and then make sure that it has the same value as in the\n    # list.\n    # For example, given the list\n    # 1,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5\n    # you might want to remove consecutive duplicates and return\n    # [1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5]\n    # in order to remove duplicate values, you need to convert the list\n    # into a set and then make sure that it has the same value as in the\n    # list.\n    # For example, given the list\n    # 1,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5\n    # you might want to remove consecutive duplicates and return\n    # [1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5]\n    # In this case, if you remove the last 2 values, you get a list of length 4,\n    # which is not the order of the original list.\n    # You should not need to return the original list, since the function\n    # does it for you.\n    # Write a function that takes a list as an argument, removes consecutive\n    # duplicate items from it, and then returns the new list.\n    # Example:\n    # nums = [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remove_duplicates(nums)\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # Remove duplicate values\n    # [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n    # remov",
        "num_ids": 2009
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Your code here\n    \n    def remove(s):\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1] and s[i]!= s[i-1]:\n                return s[i]\n    \n    nums = list(nums)\n    for i in range(len(nums)):\n        nums[i] = remove(nums[i])\n    \n    return nums\n    \n    \ndef remove_duplicates(nums):\n    '''\n    Write a function to remove all duplicates of a given list.\n    '''\n    # Your code here\n    \n    def remove(s):\n        for i in range(len(s)):\n            if s[i] == s[i-1]:\n                s[i] = None\n    \n    nums = list(nums)\n    for i in range(len(nums)):\n        nums[i] = remove(nums[i])\n    \n    return nums\n    \n    \ndef get_longest_repeating_element(arr):\n    '''\n    Write a function to return the element that appears most often in the given array.\n    '''\n    # Your code here\n    \n    def get_longest_repeating(arr):\n        dict_of_values = {}\n        for i in range(len(arr)):\n            if arr[i] in dict_of_values:\n                dict_of_values[arr[i]] += 1\n            else:\n                dict_of_values[arr[i]] = 1\n        \n        max_value = 0\n        max_value_key = 0\n        for key, value in dict_of_values.items():\n            if value > max_value:\n                max_value = value\n                max_value_key = key\n        \n        return max_value_key\n    \n    longest_value = 0\n    for i in range(len(arr)):\n        longest_value = max(longest_value, arr[i])\n        \n    return longest_value\n    \n    \ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Write a function that merges two sorted arrays.\n    '''\n    # Your code here\n    \n    def merge_arrays(arr):\n        i = 0\n        j = 0\n        res = []\n        while i < len(arr) and j < len(arr):\n            if arr[i] < arr[j]:\n                res.append(arr[i])\n                i += 1\n            else:\n                res.append(arr[j])\n                j += 1\n        \n        while i < len(arr):\n            res.append(arr[i])\n            i += 1\n        \n        while j < len(arr):\n            res.append(arr[j])\n            j += 1\n        \n        return res\n    \n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    arr1.extend(arr2)\n    \n    return merge_arrays(arr1)\n    \n    \ndef merge_sort(arr):\n    '''\n    Write a function that sorts a list of integers.\n    '''\n    # Your code here\n    \n    def sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left_arr = sort(arr[:mid])\n        right_arr = sort(arr[mid:])\n        return merge(left_arr, right_arr)\n        \n        \n    def merge(left_arr, right_arr):\n        result = []\n        l = 0\n        r = 0\n        i = 0\n        j = 0\n        \n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] < right_arr[j]:\n                result.append(left_arr[i])\n                i += 1\n            else:\n                result.append(right_arr[j])\n                j += 1\n        \n        while i < len(left_arr):\n            result.append(left_arr[i])\n            i += 1\n        \n        while j < len(right_arr):\n            result.append(right_arr[j])\n            j += 1\n        \n        return result\n    \n    arr = sorted(arr)\n    \n    return sort(arr)\n    \n    \ndef quick_sort(arr):\n    '''\n    Write a function that sorts a list of integers.\n    '''\n    # Your code here\n    \n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i+1\n    \n    def sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        low, high = 0, len(arr) - 1\n        while low < high:\n            mid = partition(arr, low, high)\n            if mid - low > 1:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return sort(arr[:mid]) + [arr[mid]] + sort(arr[mid:])\n    \n    arr = sorted(arr)\n    return sort(arr)\n    \n    \ndef quick_sort_2(arr):\n    '''\n    Write a function that sorts a list of integers.\n    '''\n    # Your code here\n    \n    def sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        pivot = arr[len(arr) // 2]\n        less = [i for i in arr if i < pivot]\n        more = [i for i in arr if i >= pivot]\n        \n        return quick_sort_2(less) + [pivot] + quick_sort_2(more)\n    \n    return sort(arr)\n    \n    \ndef test_quick_sort():\n    '''\n    Test the quick_sort function.\n    '''\n    # Your code here\n    \n    def test():\n        arr = [17, 4, 2, 6, 18, 3, 1, 8, 0, 9, 19, 10, 13, 14, 15, 16, 17, 18]\n        arr = [17, 4, 2, 6, 18, 3, 1, 8, 0, 9, 19, 10, 13, 14, 15, 16, 17, 18]\n        \n        arr = []\n        \n        print(quick_sort_2(arr))\n        print(quick_sort(arr))\n        \n    test()\n    \n    print()\n    \n    arr = [17, 4, 2, 6, 18, 3, 1, 8, 0, 9, 19, 10, 13, 14, 15, 16, 17, 18]\n    print(quick_sort_2(arr))\n    print(quick_sort(arr))\n    \n    \ndef test_remove_duplicates():\n    '''\n    Test the remove_duplicates function.\n    '''\n    # Your code here\n    \n    def test():\n        arr = [17, 4, 2, 6, 18, 3, 1, 8, 0, 9, 19, 10, 13, 14, 15, 16, 17, 18]\n        \n        print(remove_duplicates(arr))\n        print(arr)\n        \n    test()\n    \n    arr = [17, 4, 2, 6, 18, 3, 1, 8, 0, 9, 19, 10, 13, 14, 15, 16, 17, 18]\n    print(remove_duplicates(arr))\n    print(arr)\n    \n    \ndef test_get_longest_repeating_element():\n    '''\n    Test the get_longest_repeating_element function.\n    '''\n    # Your code here\n    \n    def test():\n        arr = [17, 4, 2, 6, 18, 3, 1, 8, 0, 9, 19, 10, 13, 14, 15, 16, 17, 18]\n        \n        print(get_longest_repeating_element(arr))\n        print(arr)\n        \n    test()\n    \n    arr = [17, 4, 2, 6, 18, 3, ",
        "num_ids": 105
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    prev = None\n    for i in range(len(nums)):\n        if nums[i]!= prev:\n            yield nums[i]\n        prev = nums[i]\n    yield prev\n",
        "num_ids": 55
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dict = {}\n    for num in nums:\n        if num in dict:\n            dict[num] += 1\n        else:\n            dict[num] = 1\n",
        "num_ids": 42
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Insert all values of the input list into a hash table and check if duplicate values exist in the input list\n    # If duplicate values exist, then remove them from the output list.\n    # For the same data structure, if duplicate values exist, then return the value of that duplicate from the hash table\n    # Otherwise return the input list\n    \n    # for each element in input list\n    for value in nums:\n        # hash table\n        hash_table = {}\n        # copy of input list\n        input_list = nums.copy()\n        \n        # for each element in the input list\n        for item in input_list:\n            # if there is an element with the same value and the same position,\n            # then increment the hash table by the index of the element to be deleted\n            if item in hash_table and hash_table[item] == hash_table[item - 1]:\n                hash_table[item] += 1\n            else:\n                hash_table[item] = 1\n                \n        # if the value is a duplicate, then remove it from the hash table\n        if hash_table.values() == hash_table.values():\n            return nums.remove(value)\n    \n    return nums\n",
        "num_ids": 279
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=r*h\n    b=2*h*r\n    c=math.sqrt(a**2+b**2)\n    return c\n",
        "num_ids": 39
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return h*math.pi*math.pow(r,2)\n",
        "num_ids": 20
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #calculate the area of the cone\n    area = math.pi*(r**2)*h\n    #calculate the area of the surface\n    s = math.pi*r**2*h\n    return s,area\n",
        "num_ids": 57
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print 'Geometric Calculation\\n'\n    print 'Input: '\n    print 'r = ',r,'mm'\n    print 'h = ',h,'mm'\n    #print 'Pi = ',math.pi\n    #print '3/4 = ',(1/math.sqrt(3))\n    print 'Is the r square? '\n    if r**2 < 1:\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r**2\n        print 'Is the r square? '\n        print 'r**2 = ',r*",
        "num_ids": 2004
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5 * (4/3 * math.pi * r * h)\n",
        "num_ids": 22
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    a = pi*(r**2)/4\n    return a*h\n",
        "num_ids": 27
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2) * h\n    print (area)\n    return area\ndef surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2) * h\n    return area\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_cone_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_cone_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_cone_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef cone_surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_cone_surface_cone_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * h\n    return area\ndef surface_cone_surface_surface_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * (r ** 2) * ",
        "num_ids": 18
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h == 0:\n        return 0\n    return 2 * math.pi * r * h / (math.pi * math.pow(r,2))\n",
        "num_ids": 40
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * math.pow(math.cos(math.radians(h)),2) * (math.pow(math.cos(math.radians(r)),2) - 2 * math.pow(math.sin(math.radians(r)),2) + math.pow(math.cos(math.radians(h)),2))\n",
        "num_ids": 89
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #set the default values for surface area\n    S = 0.0\n    #calculate the lateral surface area of a cone given radius r and the height h\n    S = math.pi*(math.pow(r,2)+h**2)\n    #return the result\n    return S\n",
        "num_ids": 71
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[a-zA-Z0-9_]*'\n    text = re.sub(pattern, r':', text)\n    return text\n",
        "num_ids": 41
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(r'\\s+', ':', text)\n    result = re.sub(r'\\,', ':', result)\n    result = re.sub(r'\\.', ':', result)\n    result = re.sub(r'\\;', ':', result)\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_replace = text.replace('.',':')\n    text_replace = text_replace.replace(',',':')\n    text_replace = text_replace.replace(' ',':')\n    text_replace = text_replace.replace(';',':')\n    text_replace = text_replace.replace('\"',':')\n    text_replace = text_replace.replace('-',':')\n    text_replace = text_replace.replace('/',':')\n    text_replace = text_replace.replace('.',':')\n    text_replace = text_replace.replace(' ',':')\n    text_replace = text_replace.replace('!','!')\n    text_replace = text_replace.replace('$',':')\n    text_replace = text_replace.replace('&',':')\n    text_replace = text_replace.replace('*',':')\n    text_replace = text_replace.replace('%',':')\n    text_replace = text_replace.replace('(',':')\n    text_replace = text_replace.replace(')',':')\n    text_replace = text_replace.replace('=',':')\n    text_replace = text_replace.replace('_','')\n    return text_replace\n",
        "num_ids": 294
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\s]', r':', text)\n    text = re.sub(r'\\s+', r':', text)\n    text = re.sub(r'(\\.{3})', r':\\1', text)\n    text = re.sub(r'(\\.{2,})', r':\\1', text)\n    text = re.sub(r'([,]{2,})', r':\\1', text)\n    text = re.sub(r'([^\\s]|[^,])+', r':', text)\n    return text\n",
        "num_ids": 145
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('?', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replac",
        "num_ids": 2010
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':\\n').replace('\\n',':').replace('\\n',':').replace('\\r',':').replace('\\t',':')\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':\\'\\'').replace('.',':\\'\\'').replace('@','::').replace('#','\\'').replace('$',':')\n    return text\n",
        "num_ids": 49
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # simple regex example:\n
        "num_ids": 2008
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\";\", \":\")\n    return text\n",
        "num_ids": 82
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'(?:\\s|,|\\.|\\:|\\;|\\?|!|\\?)')\n    text = pattern.sub(':',text)\n    text = pattern.sub('',text)\n    text = pattern.sub(' ',text)\n    return text\n",
        "num_ids": 74
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # since each index value is unique, find the start index,\n    # return the index, and find the end index,\n    # and return the index\n    # [ex: if 0 <= i < len(A) and A[i] < x: return i]\n    # [ex: if i > 0 and A[i] > x: return i - 1]\n    # [ex: if i < len(A) and A[i] > x: return i]\n    # [ex: if i > 0 and A[i] < x: return i - 1]\n    # [ex: if i < len(A) and A[i] < x: return i - 1]\n    # [ex: if i > 0 and A[i] < x: return i]\n    def first_occurrence(A, x):\n        i = 0\n        while i < len(A) and A[i] < x:\n            i += 1\n        return i\n    return first_occurrence(A, x)\n",
        "num_ids": 235
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_index = 0\n    last_index = len(A)-1\n    while first_index <= last_index:\n        midpoint = (first_index+last_index)//2\n        if A[midpoint] == x:\n            return midpoint\n        elif A[midpoint] > x:\n            last_index = midpoint-1\n        else:\n            first_index = midpoint+1\n    return -1\n",
        "num_ids": 104
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while (i <= j):\n        m = (i + j) // 2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            i = m + 1\n        else:\n            j = m - 1\n    return -1\n",
        "num_ids": 84
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i <= j:\n        m = (i+j)//2\n        if A[m] == x:\n            return m\n        if A[m] < x:\n            i = m+1\n        else:\n            j = m-1\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    length = len(A)\n    for i in range(length):\n        if A[i] == x:\n            index = i\n            break\n",
        "num_ids": 42
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n",
        "num_ids": 16
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    i = 0\n    while A[i] < x:\n        i += 1\n    return i\n",
        "num_ids": 34
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n    \ndef find_min_element_index(A):\n    '''\n    Write a function to find the index of the smallest element in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    if A[0] < A[1]:\n        l = 0\n        r = len(A) - 1\n    elif A[0] >= A[1]:\n        l = 0\n        r = 0\n    elif A[0] == A[1]:\n        l = 0\n        r = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] < A[mid + 1]:\n            l = mid + 1\n        elif A[mid] > A[mid + 1]:\n            r = mid\n        else:\n            r = mid - 1\n    return l\n    \ndef find_max_element_index(A):\n    '''\n    Write a function to find the index of the largest element in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    if A[0] > A[1]:\n        l = 0\n        r = len(A) - 1\n    elif A[0] == A[1]:\n        l = 0\n        r = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] > A[mid + 1]:\n            r = mid - 1\n        elif A[mid] < A[mid + 1]:\n            l = mid + 1\n        else:\n            l = mid - 1\n    return l\n    \ndef remove_min_and_max(A):\n    '''\n    Write a function to remove the minimum and maximum elements of an unsorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    if A[0] < A[1]:\n        l = 0\n        r = len(A) - 1\n    elif A[0] >= A[1]:\n        l = 0\n        r = 0\n    elif A[0] == A[1]:\n        l = 0\n        r = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] > A[mid + 1]:\n            l = mid + 1\n        elif A[mid] < A[mid + 1]:\n            r = mid\n        else:\n            r = mid - 1\n    return A[:l] + A[r + 1:]\n    \ndef partition_list(A, pivot, left, right):\n    '''\n    Write a function to split a sorted array in two.\n    '''\n    x = A[left]\n    i = left\n    j = right\n    while i < j:\n        while A[j] < pivot:\n            j -= 1\n        if A[i] > pivot:\n            A[i], A[j] = A[j], A[i]\n            i += 1\n        while A[i] <= pivot:\n            i += 1\n    if i < j:\n        A[i], A[j] = A[j], A[i]\n    return A\n    \ndef quicksort(A, left, right):\n    '''\n    Write a function to sort a sorted array in place.\n    '''\n    if left < right:\n        p = partition_list(A, A[left], left, right)\n        quicksort(A, left, p - 1)\n        quicksort(A, p + 1, right)\n        \ndef sort_array(A, func):\n    '''\n    Write a function to sort a sorted array.\n    '''\n    if len(A) == 0:\n        return []\n    left = 0\n    right = len(A) - 1\n    while left < right:\n        pivot = A[left]\n        i = left\n        j = right\n        while i < j:\n            while A[i] <= pivot:\n                i += 1\n            while A[j] > pivot:\n                j -= 1\n            if i < j:\n                A[i], A[j] = A[j], A[i]\n                i += 1\n                j -= 1\n        if A[i] < pivot:\n            A[i], A[j] = A[j], A[i]\n            i += 1\n        if A[i] > pivot:\n            A[i], A[j] = A[j], A[i]\n            j -= 1\n        A[left], A[right] = A[right], A[left]\n        left = i - 1\n        right = j + 1\n    return func(A)\n",
        "num_ids": 238
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[0] == x:\n        return 0\n    \n    start = 0\n    end = len(A) - 1\n    while start + 1 < end:\n        mid = (start + end) // 2\n        \n        if A[mid] == x:\n            return mid\n        \n        elif A[mid] > x:\n            end = mid\n        \n        elif A[mid] < x:\n            start = mid + 1\n            \n    return -1\n",
        "num_ids": 114
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subArray = []\n    sum_Of_Subarray_Prod = 0\n    for i in arr:\n        for j in range(i, len(arr)):\n            subArray.append(arr[j])\n        sum_Of_Subarray_Prod += sum(subArray)\n        subArray.clear()\n    return sum_Of_Subarray_Prod\n    \nprint(sum_Of_Subarray_Prod(arr)",
        "num_ids": 105
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(1,len(arr)):\n        sum += arr[i] * arr[i-1]\n    \n    return sum\n",
        "num_ids": 61
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    sum_of_prod=0\n    for i in range(0,n):\n        for j in range(i,n):\n            sum_of_prod+=arr[j]*arr[i]\n    return sum_of_prod\n",
        "num_ids": 69
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s=0\n    prod=1\n    for i in range(len(arr)):\n        s=s+arr[i]*prod\n        prod=prod*arr[i]\n    return s\nprint(sum_Of_Subarray_Prod([-1,2,-3,4,-6,5,6]))",
        "num_ids": 82
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    total = 0\n    for i in range(len(arr)):\n        total += sum(arr[i:len(arr)])\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                max_sum += arr[i]\n    return max_sum\n",
        "num_ids": 72
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = []\n    for i in range(len(arr)):\n        temp = []\n        for j in range(i, len(arr)):\n            temp.append(arr[j]*arr[i])\n        res.append(sum(temp))\n",
        "num_ids": 63
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # your code goes here\n    sum = 0\n    prod = 1\n    if not arr:\n        return sum\n    # iterating over arr\n    for i in range(len(arr)):\n        # substracting the product of all possible subarrays of arr[i]\n        sum = sum + prod*arr[i]\n        # updating the product\n        prod = prod*arr[i]\n    # returning the sum of the product\n    return sum\n",
        "num_ids": 110
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) < 1:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    i = 0\n    sum = 0\n    j = 0\n    while j < len(arr) - 1:\n        while i < len(arr) - 1 and arr[i] * arr[i + 1] < 0:\n            i += 1\n        while j < len(arr) - 1 and arr[j] * arr[j + 1] > 0:\n            j += 1\n        if i < j:\n            sum += arr[j] * arr[i]\n            i += 1\n        else:\n            sum += arr[i] * arr[j]\n            j += 1\n    sum += arr[j] * arr[i]\n    return sum\n",
        "num_ids": 186
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            result.append(arr[i] * arr[j])\n    return sum(result)\n    \ndef sort_Subarrays(arr, n):\n    '''\n    Given array arr, sort all the subarrays such that the sum of subarrays is equal to the sum of products of all subarrays.\n    '''\n    for i in range(n):\n        left, right = arr[i], 0\n        curr_sum = 0\n        while right < n:\n            curr_sum += arr[right]\n            right += 1\n            if curr_sum > left:\n                break\n        if curr_sum == left:\n            left, right = arr[i], right\n            arr[i], arr[right] = arr[right], arr[i]\n    return arr\n",
        "num_ids": 110
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    b=bin(n).replace('0b','')\n    b=b[2:len(b)-1]\n    b=int(b,2)\n    if n&1:\n        b=int(b,2)&1\n        b=str(b)\n    else:\n        b=int(b,2)&1\n        b=str(b)\n    print(b)\n    \ndef get_mask_bits(mask):\n    '''\n    Write a python function to get the number of bits in a mask.\n    '''\n    b=bin(mask).replace('0b','')\n    b=b[2:len(b)-1]\n    b=int(b,2)\n    return b\n",
        "num_ids": 45
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(n)\n    n = (n + 1) & 255\n    print(n)\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return -1\n    else:\n        return (n & 0xFF) + ((n & 0xFF)<<8)\n",
        "num_ids": 39
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    def toggle_bits(n, index):\n        '''\n        (int) -> (int)\n        '''\n        return n & ~(1 << index)\n",
        "num_ids": 13
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    bin_n = bin(n).replace('0b', '')\n    n_bits = len(bin_n)\n    n_first_bit = bin_n[1:n_bits]\n    n_last_bit = bin_n[n_bits - 1:len(bin_n)]\n    \n    n_last_bit = n_last_bit[::-1]\n    \n    return n_first_bit + n_last_bit\n",
        "num_ids": 111
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    original_value = n\n    val = 0\n    if n < 0:\n        n = -n\n    for i in range(len(n)):\n        if n[i] == 0:\n            val = val ^ (1<<(i+1))\n        else:\n            val = val ^ (1<<(i+1))\n    original_value = val\n    return original_value\n",
        "num_ids": 94
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b1111111111\n    for i in range(n):\n        if i == 0:\n            mask = mask ^ mask >> 1\n        elif i == n-1:\n            mask = mask ^ mask >> 8\n        else:\n            mask = mask ^ mask << 1\n    return mask\n",
        "num_ids": 72
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    '''\n    time complexity = O(1)\n    space complexity = O(1)\n",
        "num_ids": 20
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = bin(n)\n    a = a[2:]\n",
        "num_ids": 18
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    temp_string = str(bin(n)[2:])\n    temp_string = temp_string[3:len(temp_string)]\n    temp_string = temp_string + '1'\n    temp_string = temp_string[::-1]\n    return int(temp_string, 2)\n",
        "num_ids": 73
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a):\n        if a[i] > x:\n            break\n        i += 1\n    if i == len(a):\n        return -1\n    else:\n        return i\n",
        "num_ids": 56
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index - 1\n",
        "num_ids": 24
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left_i = bisect.bisect_left(a, x, lo = 0, hi = len(a))\n    if left_i == 0:\n        left_i = len(a)\n    return left_i\n",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] > x:\n        return 0\n    if a[0] == x:\n        return 0\n    \n    i = bisect.bisect_left(a, x)\n    return i\n",
        "num_ids": 52
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i if a[i] == x else -1\n",
        "num_ids": 32
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #check if the value is in the left side of the array\n    pos = bisect.bisect_left(a, x)\n    if pos > len(a):\n        return None\n    #return the position\n    return pos\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #check if the value is in the right side of the array\n    pos = bisect.bisect_right(a, x)\n    if pos < len(a):\n        return None\n    #return the position\n    return pos\ndef find_smallest_value(a, x):\n    '''\n    Write a function to find the smallest value in the sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #check if the value is in the right side of the array\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a):\n        return None\n    #return the position\n    return a[pos]\ndef find_largest_value(a, x):\n    '''\n    Write a function to find the largest value in the sorted array.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #check if the value is in the right side of the array\n    pos = bisect.bisect_right(a, x)\n    if pos == len(a):\n        return None\n    #return the position\n    return a[pos]\ndef merge_two_sorted_lists(a, b):\n    '''\n    Write a function to merge the two sorted lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #check if the lists are not empty\n    if a == []:\n        return b\n    if b == []:\n        return a\n    #make sure we have a, b\n    if a[0] > b[0]:\n        a = a[1:]\n    elif a[0] < b[0]:\n        b = b[1:]\n    #make sure we have a, b\n    if a[-1] > b[-1]:\n        a = a[:-1]\n    elif a[-1] < b[-1]:\n        b = b[:-1]\n    #make sure we have a, b\n    a.extend(b)\n    return a\ndef merge_two_sorted_arrays(arrA, arrB):\n    '''\n    Write a function to merge the two sorted arrays.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #check if the arrays are not empty\n    if len(arrA) == 0 or len(arrB) == 0:\n        return arrA\n    if arrA[-1] > arrB[-1]:\n        arrA = arrA[:-1]\n    elif arrA[-1] < arrB[-1]:\n        arrB = arrB[:-1]\n    arrA.extend(arrB)\n    return arrA\ndef merge_sorted_lists(a, b):\n    '''\n    Write a function to merge the two sorted lists.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #check if the lists are not empty\n    if len(a) == 0 or len(b) == 0:\n        return a\n    if a[-1] > b[-1]:\n        a = a[:-1]\n    elif a[-1] < b[-1]:\n        b = b[:-1]\n    a.extend(b)\n    return a\n",
        "num_ids": 93
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    s = bisect.bisect_left(a, x)\n    if s == 0:\n        return 0\n    return s - 1\n",
        "num_ids": 35
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "num_ids": 66
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # use bisect for this one\n    # this version returns the index of the \"leftmost\" value after the insertion point, or -1 if there is no such value\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return -1\n    else:\n        return i\n",
        "num_ids": 78
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Implement the code to locate the left insertion point for a given value.\n    if len(a) == 0:\n        a.append(x)\n        return 0\n    else:\n        if x > a[0]:\n            return 1 + left_insertion(a[1:], x)\n        else:\n            return left_insertion(a, x) + 1\n    \n",
        "num_ids": 94
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string.lower()):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # check if string is starting with a vowel\n    if re.search(regex, string):\n        print(\"string\", string)\n        print(\"regex\", regex)\n        print(\"Vowel\")\n    # check if string is starting with consonant\n    elif re.search(regex, string[:-1]):\n        print(\"string\", string)\n        print(\"regex\", regex)\n        print(\"Consonant\")\n    else:\n        print(\"string\", string)\n        print(\"regex\", regex)\n        print(\"Vowel\")\n    return string\n",
        "num_ids": 136
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)!= None\n",
        "num_ids": 16
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None\n",
        "num_ids": 17
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels_list = [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]\n    if re.search(regex,string):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 59
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = re.match(regex, string)\n    if result == None: \n        return \"NO\"\n    else:\n        return \"YES\"\n    ",
        "num_ids": 61
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'aeiouAEIOU': \n        return True\n    else: \n        return False\ndef check_str_vow(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'AEIOU': \n        return True\n    else: \n        return False\ndef check_str_vow_vow(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'AEIOUaeiou': \n        return True\n    else: \n        return False\n",
        "num_ids": 32
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    check = re.findall(regex, string)\n    if len(check) == 0: \n        return True\n    else: \n        return False\n    \ndef check_int(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    check = re.findall(regex, string)\n    if len(check) == 0: \n        return True\n    else: \n        return False\n    \ndef is_digit(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    check = re.findall(regex, string)\n    if len(check) == 0: \n        return True\n    else: \n        return False\n    \ndef is_word(string):\n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    check = re.findall(regex, string)\n    if len(check) == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 61
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    return n*geometric_sum(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n+1)/2\n",
        "num_ids": 13
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)",
        "num_ids": 42
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    assert type(n) == int\n    if n <= 0:\n        return 0\n    return n * geometric_sum(n - 1)\n",
        "num_ids": 35
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Process\n    sum = 0\n    if n == 1:\n        return 1\n    # Recursive call\n    sum = n * geometric_sum(n-1)\n    # Return\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 2:\n        return n\n    return (n * geometric_sum(n-1))\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return ((2 * n) + (n * (n + 1))) / 6",
        "num_ids": 20
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n    \ndef group_concat(groups):\n    '''\n    Write a function to concatenate all the elements of a list into a single list.\n    '''\n    if len(groups) == 0:\n        return []\n    if len(groups) == 1:\n        return groups[0]\n",
        "num_ids": 33
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    x = math.floor(math.sqrt(n))\n    for i in range(1,x+1):\n        if(n%i==0):\n            return -1\n        elif(n%i==0):\n            return i\n    \n    return -1\n",
        "num_ids": 69
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n % i == 0:\n                return False\n        return True\n    \n    def is_perfect_square(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3,int(math.sqrt(n)+1),2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 174
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n+1):\n        if i > 1 and i % 10 == 0:\n            index = (n - i) // 10\n            if i % 10!= 0:\n                index += 1\n            print(index, i)\n        if i % 2 == 0:\n            index = (n - i) // 2\n            print(index, i)\n        if i == 1:\n            index = 0\n            print(index, i)\n        if i == 10:\n            index = 9\n            print(index, i)\n    print(index)\n    return index\n",
        "num_ids": 140
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n):\n        if (n % 10) == 0:\n            print(i + 1)\n            print(n)\n    print(\"Loop terminated.\")\n    return\n",
        "num_ids": 46
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest = n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n == i * i:\n                return -1\n            else:\n                return i\n    return -1\ndef main():\n    '''\n    Takes as command line argument number of digits in the smallest triangular number \n    and the number of digits to be printed.\n    '''\n    n = int(input())\n    print(\"The index of smallest triangular number with\", n, \"digits is\", find_Index(n))\nif __name__ == \"__main__\":\n    main()",
        "num_ids": 49
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range (1,n):\n        if(i%3==0):\n            if (n%i==0):\n                return n//i\n        if(i%3==1):\n            if(n%i==i):\n                return n//i\n",
        "num_ids": 65
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest_index = 0\n    for i in range(1,n+1):\n        if (i**3)%10!= 0:\n            return i-1\n        else:\n            if i<(n/2) and (i**2)%10 ==0:\n                smallest_index += 1\n    return smallest_index",
        "num_ids": 81
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = n\n    b = 0\n    sum = 0\n    while a!= 0:\n        b += 1\n        sum += a%10\n        a //= 10\n    if sum > n:\n        a = 1\n    else:\n        a = 0\n    if a == 0:\n        return b\n    else:\n        return b + find_Index(a)\n",
        "num_ids": 90
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 2 == 0:\n        return find_Index(n-1) + 1\n    else:\n        return find_Index(n//2)\n",
        "num_ids": 72
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find smallest triangular number and its index\n    smallest = min(n)\n    smallest_ind = n.index(smallest)\n    # print(smallest, smallest_ind)\n    return smallest_ind \n",
        "num_ids": 54
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {'x':test_tup[0],'y':test_tup[1]}\n",
        "num_ids": 26
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup)",
        "num_ids": 18
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) == 1:\n        return {test_tup[0]:test_tup[0]}\n    else:\n        return {key:test_tup[0] for key in test_tup[0].keys()}\n",
        "num_ids": 63
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_list = []\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    # print(test_list)\n    return dict(zip(test_list, test_tup[1:]))\n    \ndef reverse_string(string):\n    '''\n    Write a function to return a string in reverse order,\n    which is easier to read than to find a given word.\n    '''\n    new_list = []\n    # print(string)\n    for i in range(len(string)):\n        new_list.append(string[i])\n    # print(new_list)\n    return \"\".join(new_list)\n",
        "num_ids": 60
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_t = dict()\n    for i in test_tup:\n        dict_t[i] = test_tup.index(i)\n    return dict_t\n",
        "num_ids": 44
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup)):\n        d[test_tup[i][0]] = test_tup[i][1]\n    return d\n",
        "num_ids": 51
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    adjacents = []\n    for i in test_tup:\n        if i not in adjacents:\n            adjacents.append(i)\n    \n    return dict(zip(adjacents, test_tup))\n",
        "num_ids": 57
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup)-1):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup = []\n    for i in range(0, len(test_tup)):\n        tup.append(test_tup[i][0])\n    \n    return tup\n",
        "num_ids": 48
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in range(len(s)) :\n        count += s[i] == s[i+1]\n    return count == len(s)\n",
        "num_ids": 43
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    res = True\n    for i in s :\n        if i.isalpha() :\n            if i.isalpha() :\n                if i.isalpha() :\n                    if i.isalpha() :\n                        if i.isalpha() :\n                            if i.isalpha() :\n                                res = False\n                                break\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    characters = list(s)\n    for i in range(len(characters)):\n        if characters[i]!= characters[i+1]:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for c in chars:\n        if c in s :\n            return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s))==len(s)\n",
        "num_ids": 16
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s :\n        if s[i] == s[i-1] :\n            count += 1\n        else :\n            return False\n    return count == 1\n",
        "num_ids": 48
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # create a dictionary to store the characters\n    a = {}\n    # iterate over all the string\n    for i in s :\n        # add the characters to the dictionary\n        a[i] = 0\n    # iterate over all the characters in the dictionary\n    for j in a :\n        # if the characters are same\n        if a[j] == 0 :\n            # then the characters are not same\n            return False\n    # return True\n    return True\n",
        "num_ids": 109
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    print(s.count(\"a\"))\n    print(s.count(\"z\"))\n    print(s.count(\"z\"))\n    print(s.count(\"Z\"))\n    print(s.count(\"z\"))\n    print(s.count(\"Z\"))\n    print(s.count(\"a\"))\n    print(\"\\n\")\n    return\n",
        "num_ids": 82
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count=0\n    for i in range(0,len(s)) :\n        if(s[i]!=s[i].upper()) :\n            count=count+1\n    if(count==len(s)) :\n        return True\n    else :\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if (s[i]!= s[i]) :\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        print('Please input a value greater than 0')\n        return\n    elif side == 1:\n        print('Please input a value greater than 1')\n        return\n    elif side == 2:\n        print('Please input a value greater than 2')\n        return\n    elif side == 3:\n        print('Please input a value greater than 3')\n        return\n    elif side == 4:\n        print('Please input a value greater than 4')\n        return\n    elif side == 5:\n        print('Please input a value greater than 5')\n        return\n    elif side == 6:\n        print('Please input a value greater than 6')\n        return\n    elif side == 7:\n        print('Please input a value greater than 7')\n        return\n    elif side == 8:\n        print('Please input a value greater than 8')\n        return\n    elif side == 9:\n        print('Please input a value greater than 9')\n        return\n    elif side == 10:\n        print('Please input a value greater than 10')\n        return\n    elif side == 11:\n        print('Please input a value greater than 11')\n        return\n    elif side == 12:\n        print('Please input a value greater than 12')\n        return\n    elif side == 13:\n        print('Please input a value greater than 13')\n        return\n    elif side == 14:\n        print('Please input a value greater than 14')\n        return\n    elif side == 15:\n        print('Please input a value greater than 15')\n        return\n    elif side == 16:\n        print('Please input a value greater than 16')\n        return\n    elif side == 17:\n        print('Please input a value greater than 17')\n        return\n    elif side == 18:\n        print('Please input a value greater than 18')\n        return\n    elif side == 19:\n        print('Please input a value greater than 19')\n        return\n    elif side == 20:\n        print('Please input a value greater than 20')\n        return\n    elif side == 21:\n        print('Please input a value greater than 21')\n        return\n    elif side == 22:\n        print('Please input a value greater than 22')\n        return\n    elif side == 23:\n        print('Please input a value greater than 23')\n        return\n    elif side == 24:\n        print('Please input a value greater than 24')\n        return\n    elif side == 25:\n        print('Please input a value greater than 25')\n        return\n    elif side == 26:\n        print('Please input a value greater than 26')\n        return\n    elif side == 27:\n        print('Please input a value greater than 27')\n        return\n    elif side == 28:\n        print('Please input a value greater than 28')\n        return\n    elif side == 29:\n        print('Please input a value greater than 29')\n        return\n    elif side == 30:\n        print('Please input a value greater than 30')\n        return\n    elif side == 31:\n        print('Please input a value greater than 31')\n        return\n    elif side == 32:\n        print('Please input a value greater than 32')\n        return\n    elif side == 33:\n        print('Please input a value greater than 33')\n        return\n    elif side == 34:\n        print('Please input a value greater than 34')\n        return\n    elif side == 35:\n        print('Please input a value greater than 35')\n        return\n    elif side == 36:\n        print('Please input a value greater than 36')\n        return\n    elif side == 37:\n        print('Please input a value greater than 37')\n        return\n    elif side == 38:\n        print('Please input a value greater than 38')\n        return\n    elif side == 39:\n        print('Please input a value greater than 39')\n        return\n    elif side == 40:\n        print('Please input a value greater than 40')\n        return\n    elif side == 41:\n        print('Please input a value greater than 41')\n        return\n    elif side == 42:\n        print('Please input a value greater than 42')\n        return\n    elif side == 43:\n        print('Please input a value greater than 43')\n        return\n    elif side == 44:\n        print('Please input a value greater than 44')\n        return\n    elif side == 45:\n        print('Please input a value greater than 45')\n        return\n    elif side == 46:\n        print('Please input a value greater than 46')\n        return\n    elif side == 47:\n        print('Please input a value greater than 47')\n        return\n    elif side == 48:\n        print('Please input a value greater than 48')\n        return\n    elif side == 49:\n        print('Please input a value greater than 49')\n        return\n    elif side == 50:\n        print('Please input a value greater than 50')\n        return\n    elif side == 51:\n        print('Please input a value greater than 51')\n        return\n    elif side == 52:\n        print('Please input a value greater than 52')\n        return\n    elif side == 53:\n        print('Please input a value greater than 53')\n        return\n    elif side == 54:\n        print('Please input a value greater than 54')\n        return\n    elif side == 55:\n        print('Please input a value greater than 55')\n        return\n    elif side == 56:\n        print('Please input a value greater than 56')\n        return\n    elif side == 57:\n        print('Please input a value greater than 57')\n        return\n    elif side == 58:\n        print('Please input a value greater than 58')\n        return\n    elif side == 59:\n        print('Please input a value greater than 59')\n        return\n    elif side == 60:\n        print('Please input a value greater than 60')\n        return\n    elif side == 61:\n        print('Please input a value greater than 61')\n        return\n    elif side == 62:\n        print('Please input a value greater than 62')\n        return\n    elif side == 63:\n        print('Please input a value greater than 63')\n        return\n    elif side == 64:\n        print('Please input a value greater than 64')\n        return\n    elif side == 65:\n        print('Please input a value greater than 65')\n        return\n    elif side == 66:\n        print('Please input a value greater than 66')\n        return\n    elif side == 67:\n        print('Please input a value greater than 67')\n        return\n    elif side == 68:\n        print('Please input a value greater than 68')\n        return\n    elif side == 69:\n        print('Please input a value greater than 69')\n        return\n    elif side == 70:\n        print('Please input a value greater than 70')\n        return\n    elif side == 71:\n        print('Please input a value greater than 71')\n        return\n    elif side == 72:\n        print('Please input a value greater than 72')\n        return\n    elif side == 73:\n        print('Please input a value greater than 73')\n        return\n    elif side == 74:\n        print('Please input a value greater than 74')\n        return\n    elif side == 75:\n        print('Please input a value greater than 75')\n        return\n    elif side == 76:\n        print('Please input a value greater than 76')\n        return\n    elif side == 77:\n        print('Please input a value greater than 77')\n        return\n    elif side == 78:\n        print('Please input a value greater than 78')\n        return\n    elif side == 79:\n        print('Please input a value greater than 79')\n        return\n    elif side == 80:\n        print('Please input a value greater than 80')\n        return\n    elif side == 81:\n        print('Please input a value greater than 81')\n        return\n    elif side == 82:\n        print('Please input a value greater than 82')\n        return\n    elif side == 83:\n        print('Please input a value greater than 83')\n        return\n    elif side == 84:\n        print('Please input a value greater than 84')\n        return\n    elif side == 85:\n        print('Please input a value greater than 85')\n        return\n    elif side == 86:\n        print('Please input a value greater than 86')\n        return\n    elif side == 87",
        "num_ids": 2008
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'a':\n        return 0.5*3.14*(3**2)\n    if side == 'b':\n        return 0.25*3.14*(3**2)\n    if side == 'c':\n        return 0.5*3.14*(3**2)\n",
        "num_ids": 74
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Python and OpenCV are imported, we will call them from here\n    import cv2 as cv\n    import numpy as np\n    # import matplotlib.pyplot as plt\n    def draw_circles(img, circles, color = (0,255,0), thickness = 2):\n        '''\n        Draws circles of a given type of size on the img\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the circles.\n            circles (numpy.ndarray):\n                The circles to draw. The circles should be organized as\n                cx, cy, radius.\n            color (tuple, optional):\n                The color of the circles. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the circles. Default is 2.\n        '''\n        # print(circles)\n        for i in range(len(circles)):\n            # Calculate the x,y and z coordinates of the current circle\n            cx = circles[i][0]\n            cy = circles[i][1]\n            cz = circles[i][2]\n            # Create the circle with the given parameters\n            cv.circle(img, (cx, cy), cz, color, thickness)\n    # define a function that draws a circle.\n    def draw_circle(img, cx, cy, cz, radius, color=(255, 0, 0), thickness=2):\n        '''\n        Draws circles of a given type of size on the img\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the circles.\n            cx (int):\n                The x coordinate of the center of the circle.\n            cy (int):\n                The y coordinate of the center of the circle.\n            cz (int):\n                The z coordinate of the center of the circle.\n            radius (int):\n                The radius of the circle.\n            color (tuple, optional):\n                The color of the circles. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the circles. Default is 2.\n        '''\n        # print(cx, cy, cz, radius)\n        cv.circle(img, (cx, cy), cz, color, thickness)\n    # Define a function to draw a line.\n    def draw_line(img, x1, y1, x2, y2, color=(255, 0, 0)):\n        '''\n        Draw a line on an image.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the line.\n            x1 (int):\n                The x coordinate of the first point.\n            y1 (int):\n                The y coordinate of the first point.\n            x2 (int):\n                The x coordinate of the second point.\n            y2 (int):\n                The y coordinate of the second point.\n            color (tuple, optional):\n                The color of the line. Default is (255, 0, 0).\n        '''\n        cv.line(img, (x1, y1), (x2, y2), color, 2)\n    # Define a function to draw an ellipse.\n    def draw_ellipse(img, cx, cy, cz, rx, ry, color=(255, 0, 0), thickness=2):\n        '''\n        Draw an ellipse.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the ellipse.\n            cx (int):\n                The x coordinate of the center of the ellipse.\n            cy (int):\n                The y coordinate of the center of the ellipse.\n            cz (int):\n                The z coordinate of the center of the ellipse.\n            rx (int):\n                The radius of the ellipse.\n            ry (int):\n                The radius of the ellipse.\n            color (tuple, optional):\n                The color of the ellipse. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the ellipse. Default is 2.\n        '''\n        cv.ellipse(img, (cx, cy), (cz, rz), rx, ry, 0, 90, color, thickness)\n    # Define a function to draw a triangle.\n    def draw_triangle(img, x1, y1, x2, y2, x3, y3, color=(255, 0, 0), thickness=2):\n        '''\n        Draw a triangle.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the triangle.\n            x1 (int):\n                The x coordinate of the first point.\n            y1 (int):\n                The y coordinate of the first point.\n            x2 (int):\n                The x coordinate of the second point.\n            y2 (int):\n                The y coordinate of the second point.\n            x3 (int):\n                The x coordinate of the third point.\n            y3 (int):\n                The y coordinate of the third point.\n            color (tuple, optional):\n                The color of the triangle. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the triangle. Default is 2.\n        '''\n        cv.line(img, (x1, y1), (x2, y2), color, thickness)\n        cv.line(img, (x2, y2), (x3, y3), color, thickness)\n        cv.line(img, (x3, y3), (x1, y1), color, thickness)\n    # define a function to draw a polygon.\n    def draw_polygon(img, x, y, color=(255, 0, 0)):\n        '''\n        Draw a polygon.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the polygon.\n            x (int):\n                The x coordinate of the point.\n            y (int):\n                The y coordinate of the point.\n            color (tuple, optional):\n                The color of the polygon. Default is (255, 0, 0).\n        '''\n        # print(x, y)\n        for i in range(len(x)):\n            cv.circle(img, (x[i], y[i]), 2, color, -1)\n    # define a function to draw a quadrilateral.\n    def draw_quad(img, x1, y1, x2, y2, x3, y3, x4, y4, color=(255, 0, 0), thickness=2):\n        '''\n        Draw a quadrilateral.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the quadrilateral.\n            x1 (int):\n                The x coordinate of the first point.\n            y1 (int):\n                The y coordinate of the first point.\n            x2 (int):\n                The x coordinate of the second point.\n            y2 (int):\n                The y coordinate of the second point.\n            x3 (int):\n                The x coordinate of the third point.\n            y3 (int):\n                The y coordinate of the third point.\n            x4 (int):\n                The x coordinate of the fourth point.\n            y4 (int):\n                The y coordinate of the fourth point.\n            color (tuple, optional):\n                The color of the quadrilateral. Default is (255, 0, 0).\n            thickness (int, optional):\n                The thickness of the quadrilateral. Default is 2.\n        '''\n        cv.line(img, (x1, y1), (x2, y2), color, thickness)\n        cv.line(img, (x2, y2), (x3, y3), color, thickness)\n        cv.line(img, (x3, y3), (x4, y4), color, thickness)\n        cv.line(img, (x4, y4), (x1, y1), color, thickness)\n    # Define a function to draw a circle.\n    def draw_circle(img, cx, cy, cz, radius, color=(255, 0, 0), thickness=2):\n        '''\n        Draw a circle.\n        \n        Parameters:\n            img (numpy.ndarray):\n                The image to draw the circle.\n            cx (int):\n                The x coordinate of the center of the circle.\n            cy (int):\n            ",
        "num_ids": 59
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * (side ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 4*side\n    elif side == 1:\n        return 4*side + 1\n    elif side == 2:\n        return 4*side + 2\n    elif side == 3:\n        return 4*side + 3\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron(side):\n    '''\n    Write a function to caluclate the area of a hexahedron.\n    '''\n    if side == 0:\n        return 6\n    elif side == 1:\n        return 6*side\n    elif side == 2:\n        return 6*side + 1\n    elif side == 3:\n        return 6*side + 2\n    elif side == 4:\n        return 6*side + 3\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    if side == 0:\n        return 8\n    elif side == 1:\n        return 8*side\n    elif side == 2:\n        return 8*side + 1\n    elif side == 3:\n        return 8*side + 2\n    elif side == 4:\n        return 8*side + 3\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    if side == 0:\n        return 16\n    elif side == 1:\n        return 16*side\n    elif side == 2:\n        return 16*side + 1\n    elif side == 3:\n        return 16*side + 2\n    elif side == 4:\n        return 16*side + 3\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_mod(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with modulus side.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_tetrahedron_mod(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron with modulus side.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 2\n    elif side == 3:\n        return 4\n    elif side == 4:\n        return 8\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with modulus side.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 2\n    elif side == 3:\n        return 4\n    elif side == 4:\n        return 8\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_octahedron_mod(side):\n    '''\n    Write a function to caluclate the area of a octahedron with modulus side.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with modulus side.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_side(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with side modulus.\n    '''\n    if side == 0:\n        return 1\n    elif side == 1:\n        return 4\n    elif side == 2:\n        return 8\n    elif side == 3:\n        return 16\n    elif side == 4:\n        return 32\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_tetrahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron with modulus side.\n    '''\n    if side == 0:\n        return 1\n    elif side == 1:\n        return 2\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with side modulus.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_octahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a octahedron with modulus side.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with side modulus.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_side(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with side modulus.\n    '''\n    if side == 0:\n        return 1\n    elif side == 1:\n        return 4\n    elif side == 2:\n        return 8\n    elif side == 3:\n        return 16\n    elif side == 4:\n        return 32\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_tetrahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron with modulus side.\n    '''\n    if side == 0:\n        return 1\n    elif side == 1:\n        return 2\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else:\n        print(\"Invalid side number\")\n        return -1\ndef area_hexahedron_mod_side(side):\n    '''\n    Write a function to caluclate the area of a hexahedron with modulus side.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 1\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 8\n    elif side == 4:\n        return 16\n    else",
        "num_ids": 63
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_a = side[0]\n    side_b = side[1]\n    side_c = side[2]\n    side_d = side[3]\n    side_e = side[4]\n",
        "num_ids": 52
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a-side**2))\n    return a+b\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(3.0*side**2)))\n    return a+b\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(6.0*side**2)))\n    return a+b\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(12.0*side**2)))\n    return a+b\ndef area_fibra(side):\n    '''\n    Write a function to caluclate the area of a fibra.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(24.0*side**2)))\n    return a+b\ndef area_hexahedron(side):\n    '''\n    Write a function to caluclate the area of a hexahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(32.0*side**2)))\n    return a+b\ndef area_parabola(side):\n    '''\n    Write a function to caluclate the area of a parabola.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(16.0*side**2)))\n    return a+b\ndef area_tetrahedron_nondim(side):\n    '''\n    Write a function to caluclate the area of a non-dimensional tetrahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_tetrahedron_dim(side):\n    '''\n    Write a function to caluclate the area of a dimensioned tetrahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_tetrahedron_pythag(side):\n    '''\n    Write a function to caluclate the area of a pythagorean tetrahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_triangle_nondim(side):\n    '''\n    Write a function to caluclate the area of a non-dimensional triangle.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_triangle_dim(side):\n    '''\n    Write a function to caluclate the area of a dimensioned triangle.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_triangle_pythag(side):\n    '''\n    Write a function to caluclate the area of a pythagorean triangle.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_tetrahedron_dim(side):\n    '''\n    Write a function to caluclate the area of a dimensioned tetrahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_tetrahedron_pythag(side):\n    '''\n    Write a function to caluclate the area of a pythagorean tetrahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_nondim(side):\n    '''\n    Write a function to caluclate the area of a non-dimensional cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(3.0*side**2)))\n    return a+b\ndef area_cube_dim(side):\n    '''\n    Write a function to caluclate the area of a dimensioned cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_pythag(side):\n    '''\n    Write a function to caluclate the area of a pythagorean cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_nondim_pythag(side):\n    '''\n    Write a function to caluclate the area of a non-dimensional cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_dim_pythag(side):\n    '''\n    Write a function to caluclate the area of a dimensioned cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_pythag_nondim(side):\n    '''\n    Write a function to caluclate the area of a pythagorean cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_pythag_dim(side):\n    '''\n    Write a function to caluclate the area of a dimensioned cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_nondim_pythag(side):\n    '''\n    Write a function to caluclate the area of a non-dimensional cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_cube_pythag_dim(side):\n    '''\n    Write a function to caluclate the area of a dimensioned cube.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_icosahedron_nondim(side):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(side**2)))\n    return a+b\ndef area_icosahedron_dim(side):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    a = side*side\n    b = math.sqrt(a*(a*(a+side**2)+(sid",
        "num_ids": 31
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #raise NotImplementedError\n    return 0\n",
        "num_ids": 15
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'L':\n        return 0.5*3.14159*(6.0/5.0)\n    elif side == 'S':\n        return 0.5*3.14159*(6.0/5.0)\n    elif side == 'D':\n        return 0.5*3.14159*(6.0/5.0)\n    elif side == 'H':\n        return 0.5*3.14159*(6.0/5.0)\n    elif side == 'V':\n        return 0.5*3.14159*(6.0/5.0)\n    else:\n        print(\"side not valid\")\n",
        "num_ids": 163
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    pi = math.pi\n    a = (side ** 2) * math.cos(pi / 2)\n    b = (side ** 2) * math.sin(pi / 2)\n    c = side\n    d = side\n    e = side\n    return (a + b + c + d + e)\n",
        "num_ids": 74
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_copy = list.copy()\n    for i in range(m):\n        list_copy.append(list_copy[len(list_copy)-1])\n    return list_copy\n",
        "num_ids": 47
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialize temp variable\n    temp = []\n    # create temp variable for every item in the given list\n    for i in list:\n        temp.append(i)\n",
        "num_ids": 41
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n//2):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    print(list)\n",
        "num_ids": 54
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp=list[0]\n    for i in range(len(list)):\n        temp=list[i]\n        list[i]=list[len(list)-1]\n        list[len(list)-1]=temp\n    return list\ndef reverse_string(list, k):\n    '''\n    Write a function that reverses the first k elements of a given list.\n    '''\n    if k > len(list):\n        return \"\"\n    temp=list[0]\n    for i in range(len(list)):\n        temp=list[i]\n        list[i]=list[len(list)-1]\n        list[len(list)-1]=temp\n    return list\ndef rotate_left(list, k):\n    '''\n    Write a function that rotates a given list by specified number of items to the left direction.\n    '''\n    if k > len(list):\n        return \"\"\n    temp=list[0]\n    for i in range(len(list)):\n        temp=list[i]\n        list[i]=list[len(list)-1]\n        list[len(list)-1]=temp\n    return list\ndef reverse_string_2(list, k):\n    '''\n    Write a function that reverses the first k elements of a given list.\n    '''\n    if k > len(list):\n        return \"\"\n    temp=list[0]\n    for i in range(len(list)):\n        temp=list[i]\n        list[i]=list[len(list)-1]\n        list[len(list)-1]=temp\n    return list\n",
        "num_ids": 72
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n    ",
        "num_ids": 16
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_1 = list\n    for i in range(m,len(list_1)):\n        #print(list_1[i], end=',')\n        list_1.insert(i,list_1.pop(i-m))\n    #print(list_1)\n    return list_1\ndef main():\n    #ask the user for input\n    m = int(input(\"Enter the number of elements to be used in the list:\"))\n    l = list(map(int, input(\"Enter the list to be rotated in the form of a list in order:\").strip().split()))\n    #print(l)\n    #rotate\n    #print(rotate_right(l, m))\n    #rotate\n    #print(rotate_left(l, m))\n    #rotate\n    #print(rotate_right(l, m))\n    #rotate\n    print(rotate_left(l, m))\n",
        "num_ids": 223
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Write your code here\n    if m % 2 == 0:\n        list.reverse()\n        print(list)\n        list.reverse()\n        print(list)\n    else:\n        list.reverse()\n        print(list)\n        list.reverse()\n        print(list)\n",
        "num_ids": 70
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(f\"rotate right {list}\")\n    print(f\"rotate right {m}\")\n    print(f\"rotate right {list[::-1]}\")\n    print(f\"rotate right {list[::-1]}\")\n",
        "num_ids": 62
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # get length of the list\n    l = len(list)\n    # get length of a negative index\n    m = abs(m)\n",
        "num_ids": 35
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    list_copy = list[:]\n    for i in range(0, m):\n        for j in range(n-i-1, n):\n            list_copy[j], list_copy[j+i] = list_copy[j+i], list_copy[j]\n    return list_copy\n",
        "num_ids": 82
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is not None:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # your code here\n    return None in test_tup\n",
        "num_ids": 17
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n        else:\n            return False\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return False\n    else:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        n = i\n        while n % 10!= 0:\n            n = n // 10\n        if n == 1:\n            return \"This is a prime number\"\n        else:\n            return \"This is not a prime number\"\n",
        "num_ids": 71
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def test(x):\n        return x % 10 == 0\n    \n    def divisible_by_digits(startnum, endnum):\n        for i in range(10):\n            print(f\"{startnum} {startnum + 1} {startnum + 2}\")\n            if test(startnum + i):\n                print(f\"{startnum + i} {startnum + i + 1} {startnum + i + 2}\")\n                if test(startnum + i + 1):\n                    print(f\"{startnum + i + 1} {startnum + i + 2} {startnum + i + 3}\")\n                    if test(startnum + i + 2):\n                        print(f\"{startnum + i + 2} {startnum + i + 3} {startnum + i + 4}\")\n                        if test(startnum + i + 3):\n                            print(f\"{startnum + i + 3} {startnum + i + 4} {startnum + i + 5}\")\n                            if test(startnum + i + 4):\n                                print(f\"{startnum + i + 4} {startnum + i + 5} {startnum + i + 6}\")\n                                if test(startnum + i + 5):\n                                    print(f\"{startnum + i + 5} {startnum + i + 6} {startnum + i + 7}\")\n                                    if test(startnum + i + 6):\n                                        print(f\"{startnum + i + 6} {startnum + i + 7} {startnum + i + 8}\")\n                                        if test(startnum + i + 7):\n                                            print(f\"{startnum + i + 7} {startnum + i + 8} {startnum + i + 9}\")\n                                            if test(startnum + i + 8):\n                                                print(f\"{startnum + i + 8} {startnum + i + 9} {startnum + i + 10}\")\n                                                if test(startnum + i + 9):\n                                                    print(f\"{startnum + i + 9} {startnum + i + 10} {startnum + i + 11}\")\n                                                    if test(startnum + i + 10):\n                                                        print(f\"{startnum + i + 10} {startnum + i + 11} {startnum + i + 12}\")\n                                                        if test(startnum + i + 11):\n                                                            print(f\"{startnum + i + 11} {startnum + i + 12} {startnum + i + 13}\")\n                                                            if test(startnum + i + 12):\n                                                                        print(f\"{startnum + i + 12} {startnum + i + 13} {startnum + i + 14}\")\n                                                                if test(startnum + i + 13):\n                                                                        print(f\"{startnum + i + 13} {startnum + i + 14} {startnum + i + 15}\")\n                                                                if test(startnum + i + 14):\n                                                                        print(f\"{startnum + i + 14} {startnum + i + 15} {startnum + i + 16}\")\n                                                                if test(startnum + i + 15):\n                                                                        print(f\"{startnum + i + 15} {startnum + i + 16} {startnum + i + 17}\")\n                                                                        if test(startnum + i + 16):\n                                                                            print(f\"{startnum + i + 16} {startnum + i + 17} {startnum + i + 18}\")\n                                                                            if test(startnum + i + 17):\n                                                                                print(f\"{startnum + i + 17} {startnum + i + 18} {startnum + i + 19}\")\n                                                                                if test(startnum + i + 18):\n                                                                                    print(f\"{startnum + i + 18} {startnum + i + 19} {startnum + i + 20}\")\n                                                                                    if test(startnum + i + 19):\n                                                                                        print(f\"{startnum + i + 19} {startnum + i + 20} {startnum + i + 21}\")\n                                                                                        if test(startnum + i + 20):\n                                                                                            print(f\"{startnum + i + 20} {startnum + i + 21} {startnum + i + 22}\")\n                                                                                            if test(startnum + i + 21):\n                                                                                                print(f\"{startnum + i + 21} {startnum + i + 22} {startnum + i + 23}\")\n                                                                                            if test(startnum + i + 22):\n                                                                                                print(f\"{startnum + i + 22} {startnum + i + 23} {startnum + i + 24}\")\n                                                                                            if test(startnum + i + 23):\n                                                                                                print(f\"{startnum + i + 23} {startnum + i + 24} {startnum + i + 25}\")\n                                                                                            if test(startnum + i + 24):\n                                                                                                print(f\"{startnum + i + 24} {startnum + i + 25} {startnum + i + 26}\")\n                                                                                            if test(startnum + i + 25):\n                                                                                                print(f\"{startnum + i + 25} {startnum + i + 26} {startnum + i + 27}\")\n                                                                                            if test(startnum + i + 26):\n                                                                                                print(f\"{startnum + i + 26} {startnum + i + 27} {startnum + i + 28}\")\n                                                                                            if test(startnum + i + 27):\n                                                                                                print(f\"{startnum + i + 27} {startnum + i + 28} {startnum + i + 29}\")\n                                                                                            if test(startnum + i + 28):\n                                                                                                print(f\"{startnum + i + 28} {startnum + i + 29} {startnum + i + 30}\")\n                                                                                            if test(startnum + i + 29):\n                                                                                                print(f\"{startnum + i + 29} {startnum + i + 30} {startnum + i + 31}\")\n                                                                                            if test(startnum + i + 30):\n                                                                                                print(f\"{startnum + i + 30} {startnum + i + 31} {startnum + i + 32}\")\n                                                                                            if test(startnum + i + 31):\n                                                                                                print(f\"{startnum + i + 31} {startnum + i + 32} {startnum + i + 33}\")\n                                                                                            if test(startnum + i + 32):\n                                                                                                print(f\"{startnum + i + 32} {startnum + i + 33} {startnum + i + 34}\")\n                                                                                            if test(startnum + i + 33):\n                                                                                                print(f\"{startnum + i + 33} {startnum + i + 34} {startnum + i + 35}\")\n                                                                                            if test(startnum + i + 34):\n                                                                                                print(f\"{startnum + i + 34} {startnum + i + 35} {startnum + i + 36}\")\n                                                                                            if test(startnum + i + 35):\n                                                                                                print(f\"{startnum + i + 35} {startnum + i + 36} {startnum + i + 37}\")\n                                                                                            if test(startnum + i + 36):\n                                                                                                print(f\"{startnum + i + 36} {startnum + i + 37} {startnum + i + 38}\")\n                                                                                            if test(startnum + i + 37):\n                                                                                                print(f\"{startnum + i + 37} {startnum + i + 38} {startnum + i + 39}\")\n                                                                                            if test(startnum + i + 38):\n                                                                                                print(f\"{startnum + i + 38} {startnum + i + 39} {startnum + i + 40}\")\n                                                                                            if test(startnum + i + 39):\n                                                                                                print(f\"{startnum + i + 39} {startnum + i + 40} {startnum + i + 41}\")\n                                                                                            if test(startnu",
        "num_ids": 1937
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    range_start = [i for i in range(startnum, endnum)]\n    result = []\n    for i in range(len(range_start)):\n        if range_start[i]%10 == 0:\n            result.append(range_start[i])\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    '''\n    def is_divisible_by(n, d):\n        '''Return True if n is divisible by d.\n        Assume startnum <= endnum'''\n        if n % d == 0:\n            return True\n        else:\n            return False\n    '''\n    d = 10\n    num = startnum\n    for _ in range(1, 10):\n        num = num * 10 + _\n        if is_divisible_by(num, d):\n            d += 1\n    return d",
        "num_ids": 55
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divide_by_digits(number):\n        return sum(int(x) for x in str(number).split('0') if x!= '0')\n    \n    startnum = int(startnum)\n    endnum = int(endnum)\n    \n    for number in range(startnum, endnum + 1):\n        for digit in range(10):\n            if (divide_by_digits(number) % digit == 0):\n                print(number)\n                return True\n        else:\n            print(number)\n    else:\n        print('Please input a number between startnum and endnum')\n        return False\n",
        "num_ids": 151
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum + 1):\n        if (int(i / 10) % int(10 ** (len(str(i)))) == 0):\n            result.append(str(i))\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # write your code here\n    digits = 0\n    i = 0\n    while i < endnum:\n        if (i%startnum)==0:\n            digits += 1\n        i+=1\n    return digits\n",
        "num_ids": 55
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            numbers.append(i)\n        elif i % 3 == 0:\n            numbers.append(i)\n    return numbers\n    #print(numbers)\n",
        "num_ids": 72
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def stringToList(s):\n        return list(map(int, s.split()))\n    def getPrime(x):\n        if x>0:\n            return x-1\n        return x\n    prime = []\n    for i in range(2,1001):\n        if isprime(i)==True:\n            prime.append(i)\n    l = []\n    for j in range(startnum,endnum+1):\n        l.append(j)\n    for i in prime:\n        for j in l:\n            if j%i==0:\n                l.remove(j)\n    l = sorted(l)\n    l = list(map(str,l))\n    l = ''.join(l)\n    return l\n",
        "num_ids": 178
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = [i for i in range(startnum, endnum+1) if all([int(str(i)) % x == 0 for x in range(10)])]\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle should be less than 360 degrees\")\n        return None\n    elif a >= 0 and a < 360:\n        return round((3.14*r*math.cos(math.radians(a)))**2,3)\n    elif a < 0:\n        return round((3.14*r*math.cos(math.radians(360+a)))**2,3)\n",
        "num_ids": 102
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        if r == 0:\n            return 0\n        elif r == 0.5:\n            return a\n        elif r > 0.5:\n            return math.tan(math.radians(a/2))*r\n    elif a < 180:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return math.tan(math.radians(a/2))*r\n    elif a < 90:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return math.tan(math.radians(a/2))*r\n    elif a < 180:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return 0\n    elif a < 180:\n        if r == 0:\n            return math.tan(math.radians(a/2))*r\n        elif r > 0:\n            return 0\n",
        "num_ids": 270
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>math.pi:\n        return None\n    if a<0:\n        return None\n    return r*math.cos(a)+math.pi*r*math.sin(a)\n",
        "num_ids": 49
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    if r>180:\n        return None\n    if r<0:\n        return None\n    return math.pi*(r**2)*a\n",
        "num_ids": 41
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    elif r <= 0:\n        return None\n    elif r>=100:\n        return a*math.pi*r**2\n    else:\n        area = r**2*math.pi\n        if r <= 25:\n            return area\n        elif r >25 and r <= 50:\n            return (area*0.5)\n        else:\n            return (area*0.7)\n",
        "num_ids": 108
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == 0:\n        if a > 180:\n            a = 180\n        elif a < 180:\n            a = 180 - a\n        return None\n    else:\n        return (r**2) * math.acos(a/180) * math.pi\n",
        "num_ids": 66
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #raise NotImplementedError(\"Insert your code here to implement this function\")\n    if r >= a:\n        return None\n    elif a == 360:\n        return ((math.pi*r)**2)\n    elif a >= math.pi/2 and a < math.pi:\n        return ((math.pi*r)**2)\n    elif a >= math.pi and a < math.pi*(2/3):\n        return ((math.pi*r)**2)\n    elif a >= math.pi and a < math.pi*(3/4):\n        return ((math.pi*r)**2)\n    else:\n        return ((math.pi*r)**2)\n",
        "num_ids": 169
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>math.pi/2:\n        print(\"angle should be less than pi/2\")\n        return None\n    if r > math.sqrt(2) or r<0:\n        print(\"Radius should be a positive or a negative number\")\n        return None\n    if math.isclose(r,math.sqrt(2)) or math.isclose(r,0) or math.isclose(r,1):\n        print(\"Radius should be a positive or a negative number\")\n        return None\n    if r>math.pi:\n        print(\"Radius should be in the range of (0,pi)\")\n        return None\n    sector_area_pi = (math.pi*r)\n    return sector_area_pi\n",
        "num_ids": 176
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    r = float(r)\n    a = float(a)\n    try:\n        if r > 0:\n            sector = math.pi*r*a\n            print('Sector area is', sector)\n        else:\n            return None\n    except Exception:\n        return None\n",
        "num_ids": 68
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return r**2 * math.acos(a**2 / r**2)\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return r * math.cos(a * math.pi / 180)\ndef sector_surface(r,a):\n    '''\n    Write a function to find surface of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return r * math.sin(a * math.pi / 180)\ndef sphere_volume(r,a):\n    '''\n    Write a function to find volume of a sphere. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (r**3) * math.pi * math.sin(a * math.pi / 180)\ndef sphere_surface(r,a):\n    '''\n    Write a function to find surface of a sphere. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return r * math.cos(a * math.pi / 180)\ndef volume(r,a):\n    '''\n    Write a function to find volume of a sphere. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return r * math.pi * math.cos(a * math.pi / 180)\ndef surface(r,a):\n    '''\n    Write a function to find surface of a sphere. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return r * math.sin(a * math.pi / 180)\ndef volume_cylinder(r,a,n):\n    '''\n    Write a function to find volume of a cylinder. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_cylinder(r,a,n):\n    '''\n    Write a function to find surface of cylinder. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.cos(a * math.pi / 180)\ndef volume_sphere(r,a,n):\n    '''\n    Write a function to find volume of a sphere. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_sphere(r,a,n):\n    '''\n    Write a function to find surface of sphere. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_cone(r,a,n):\n    '''\n    Write a function to find volume of cone. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_cone(r,a,n):\n    '''\n    Write a function to find surface of cone. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_tetra(r,a,n):\n    '''\n    Write a function to find volume of tetrahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_tetra(r,a,n):\n    '''\n    Write a function to find surface of tetrahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_trapezoid(r,a,n):\n    '''\n    Write a function to find volume of trapezoid. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_trapezoid(r,a,n):\n    '''\n    Write a function to find surface of trapezoid. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_parallelepiped(r,a,n):\n    '''\n    Write a function to find volume of parallelepiped. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_parallelepiped(r,a,n):\n    '''\n    Write a function to find surface of parallelepiped. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_octahedron(r,a,n):\n    '''\n    Write a function to find volume of octahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_octahedron(r,a,n):\n    '''\n    Write a function to find surface of octahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_tetrahedron(r,a,n):\n    '''\n    Write a function to find volume of tetrahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_tetrahedron(r,a,n):\n    '''\n    Write a function to find surface of tetrahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_hexahedron(r,a,n):\n    '''\n    Write a function to find volume of hexahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef surface_hexahedron(r,a,n):\n    '''\n    Write a function to find surface of hexahedron. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return (n**3) * r * math.cos(a * math.pi / 180)\ndef volume_cylinder_cone(r,a,n):\n    '''\n    Write a function to find volume of cylinder cone. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return n * r * math.pi * math.sin(a * math.pi / 180)\ndef volume",
        "num_ids": 27
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    lcs = [ 0 for i in range(n + 1) ]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(l + 1):\n                if(i == 0 or j == 0 or k == 0):\n                    lcs[k] = 0\n                elif(X[i - 1] == Y[j - 1] == Z[k - 1]):\n                    lcs[k] = lcs[k - 1] + 1\n                else:\n                    lcs[k] = max(lcs[k - 1], lcs[k])\n    return lcs[-1]\n",
        "num_ids": 179
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = sorted(X)\n    Y = sorted(Y)\n    Z = sorted(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z):\n        return -1\n    else:\n        return find_lcs(X, Y, Z)\n",
        "num_ids": 47
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create the length array\n    length = [0 for i in range(len(X)+1)]\n    for i in range(len(X)):\n        for j in range(i, len(X)):\n            if X[i] == X[j] and j > i:\n                length[i+1] = max(length[i+1], length[j]+1)\n    # Initialize the first row\n    firstRow = [0 for i in range(len(Z)+1)]\n    for i in range(len(Z)):\n        firstRow[i+1] = -1\n",
        "num_ids": 142
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #initialize \n    LCS = []\n    max_length_LCS = 0\n",
        "num_ids": 22
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = [0] * (len(X)+1)\n    M = [0] * (len(Y)+1)\n    R = [0] * (len(Z)+1)\n    \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i] = max(L[i], 1+L[j] + L[k])\n                elif X[i-1] == Z[k-1] and X[i-1] == Y[j-1]:\n                    M[i] = max(M[i], 1+M[j] + M[k])\n                elif X[i-1] == Y[j-1] and X[i-1]!= Z[k-1]:\n                    R[i] = max(R[i], 1+R[j] + 1)\n    return L[len(X)], M[len(Y)], R[len(Z)]\n",
        "num_ids": 280
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0 for i in range(len(X)+1)] for j in range(len(Y)+1)] \n    dp[0][0] = 0\n    for i in range(1,len(X)+1):\n        for j in range(1,len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n",
        "num_ids": 153
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # write your code here\n    a = len(X)\n    b = len(Y)\n    c = len(Z)\n    \n    lcs_of_sub = [[0 for i in range(b+1)] for j in range(c+1)]\n    \n    # getting the longest common subsequence\n    for i in range(1,c+1):\n        for j in range(1,b+1):\n            if X[j-1] == Y[i-1]:\n                lcs_of_sub[i][j] = lcs_of_sub[i-1][j-1] + 1\n            else:\n                lcs_of_sub[i][j] = max(lcs_of_sub[i-1][j], lcs_of_sub[i][j-1])\n    \n    # printing the longest common subsequence\n    for i in range(1,c+1):\n        print(lcs_of_sub[i][b])\n        ",
        "num_ids": 234
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Write your code here.\n    # print('\\n',X,Y,Z)\n    m = len(X)\n    n = len(Y)\n    m_X = len(X)\n    n_Y = len(Y)\n    m_Z = len(Z)\n    n_Z = len(Z)\n",
        "num_ids": 80
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if not len(X) or not len(Y) or not len(Z): raise ValueError('Empty String')\n",
        "num_ids": 29
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.upper().replace(\" \",\"_\").replace(\"-\",\"_\").replace(\".\",\"_\").replace(\",\",\"_\").replace(\"_\",\" \").replace(\"_\",\"_\")\n",
        "num_ids": 45
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i.isupper():\n            str2 += i.upper()\n        else:\n            str2 += i.lower()\n    return str2\n",
        "num_ids": 51
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #store each word in a list\n    word_list = []\n    #split the string by spaces\n    str_list = str1.split()\n    #copy the string to list\n    str_list_copy = str_list.copy()\n    #set the index\n    index = 0\n    #loop through the list\n    for x in str_list_copy:\n        #if the word starts with a capital letter\n        if x[0] >= 'A' and x[0] <= 'Z':\n            #add the word to word_list\n            word_list.append(x)\n            #increase index\n            index = index+1\n    #return word_list\n    return word_list, index\n",
        "num_ids": 167
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.split(r'(^| )(\\w+)', str1.strip())\n    return words\n",
        "num_ids": 29
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = []\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            word_list.append(str1[i].upper())\n        else:\n            word_list.append(str1[i])\n    return''.join(word_list)\n",
        "num_ids": 75
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    lst = list(str1.split())\n    for i in lst:\n        if i[0] == 'a':\n            i ='' + i\n        else:\n            i = i +''\n    return \" \".join(lst)\n",
        "num_ids": 61
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip() # The whitespace is removed\n    str1 = str1.split() # Splits the string into a list\n    for i in range(len(str1)):\n        str1[i] = str1[i].strip(',.!?')\n        str1[i] = str1[i].split(',')\n        for j in range(len(str1[i])):\n            str1[i][j] = str1[i][j].strip(',.!?')\n            str1[i][j] = str1[i][j].split(',')\n    str1 =''.join(str1)\n    return str1\n    \ndef capital_words_cap_space(str1):\n    '''\n    Write a function to capitalize words starting with capital letters.\n    '''\n    str1 = str1.strip() # The whitespace is removed\n    str1 = str1.split() # Splits the string into a list\n    for i in range(len(str1)):\n        str1[i] = str1[i].strip(',.!?')\n        str1[i] = str1[i].split(',')\n        for j in range(len(str1[i])):\n            str1[i][j] = str1[i][j].capitalize()\n    str1 =''.join(str1)\n    return str1\n",
        "num_ids": 137
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    for word in str1.split():\n        if word[0] in 'abcdefghijklmnopqrstuvwxyz' and word[1] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            word = word.capitalize()\n        if re.match(\"^[A-Z]\", word) or re.match(\"^[a-z]\", word) or re.match(\"^[0-9]\", word):\n            word = word.upper()\n    return str1.title()\n",
        "num_ids": 128
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i].isupper():\n            str1 = str1.replace(str1[i],\" \")\n    return str1\n",
        "num_ids": 50
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    for i in str1:\n        i=i.capitalize()\n        if i[0].isupper():\n            i=i.title()\n        else:\n            i=i.upper()\n        i=i.strip()\n        str1.remove(i)\n    return''.join(str1)\n    \ndef capital_words_spaces2(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    for i in str1:\n        i=i.capitalize()\n        if i[0].isupper():\n            i=i.title()\n        else:\n            i=i.upper()\n        str1.remove(i)\n    return''.join(str1)\n    \ndef capital_words_spaces3(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    for i in str1:\n        i=i.capitalize()\n        if i[0].isupper():\n            i=i.title()\n        else:\n            i=i.upper()\n        str1.remove(i)\n    return''.join(str1)\n    \ndef remove_spaces(str1):\n    '''\n    Remove all spaces from a given string.\n    '''\n    str1=str1.replace(' ','')\n    return str1\n    \ndef capitalize_words(str1):\n    '''\n    Capitalize all the words in a given string.\n    '''\n    str1=str1.split()\n    for i in str1:\n        i=i.capitalize()\n        str1.remove(i)\n    return''.join(str1)\n    \ndef capitalize_words2(str1):\n    '''\n    Capitalize all the words in a given string.\n    '''\n    str1=str1.split()\n    for i in str1:\n        i=i.capitalize()\n        i=i.title()\n        str1.remove(i)\n    return''.join(str1)\n    \ndef remove_spaces3(str1):\n    '''\n    Remove all spaces from a given string.\n    '''\n    str1=str1.replace(' ','')\n    return str1\n    \ndef remove_spaces4(str1):\n    '''\n    Remove all spaces from a given string.\n    '''\n    str1=str1.replace(' ','')\n    return str1\n    \ndef special_characters(str1):\n    '''\n    Remove all special characters from a given string.\n    '''\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','.')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ;')\n    str1=str1.replace(':',' :')\n    str1=str1.replace(')',' ) ')\n    str1=str1.replace('*',' * ')\n    str1=str1.replace('+',' + ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace('*',' * ')\n    str1=str1.replace('+',' + ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace(\"'\",\". \")\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', ')\n    str1=str1.replace(';',' ; ')\n    str1=str1.replace('<',' < ')\n    str1=str1.replace('>',' > ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('\"','. ')\n    str1=str1.replace('!','! ')\n    str1=str1.replace('?','? ')\n    str1=str1.replace('.','. ')\n    str1=str1.replace(':',' : ')\n    str1=str1.replace(',',', '",
        "num_ids": 1347
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str)\n",
        "num_ids": 12
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # define a function to sort the list of numbers, based on their order of magnitude\n    # return the sorted list of numbers\n    \n    nums_str.sort()\n    \n    # define a variable to hold the index of the first element in the list to be sorted\n    # return the index of the first element in the sorted list\n    \n    index = 0\n    \n    # define a function to sort the list of numbers, based on their order of magnitude\n    # return the sorted list of numbers\n    \n    for i in range(len(nums_str)):\n        if nums_str[i] > nums_str[index]:\n            index = i\n    \n    # return the index of the first element in the sorted list\n    return index\n",
        "num_ids": 176
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = []\n    for element in nums_str:\n        sorted_nums.append(float(element))\n    return sorted_nums\n",
        "num_ids": 42
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def compare(x,y):\n        if int(x) > int(y):\n            return 1\n        elif int(x) == int(y):\n            return 0\n        else:\n            return -1\n    # Sort the list in place\n    def sort_list_numeric(nums_str):\n        nums_str.sort(key=lambda x:compare(x,nums_str[0]))\n",
        "num_ids": 103
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: x.isdigit())\n    return nums_str\n",
        "num_ids": 29
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from itertools import groupby\n    from operator import itemgetter\n    sorted_list = sorted(nums_str, key=itemgetter(0))\n    sorted_list = sorted(sorted_list, key=itemgetter(1))\n    sorted_list = sorted(sorted_list, key=itemgetter(2))\n    return sorted_list\n",
        "num_ids": 91
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #this is a dummy variable\n    dummy_var = list()\n",
        "num_ids": 19
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: x.strip().split()[0])\n    return nums_str\n",
        "num_ids": 32
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_num(a):\n        '''\n        First method\n        '''\n        a = [int(i) for i in a if i.isdigit()]\n        a.sort()\n        return a\n",
        "num_ids": 33
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #Splitting the list into an array\n    #Sort each element of the array\n    def array_sort(arr):\n        for i in range(len(arr)):\n            for j in range(len(arr)-1):\n                if arr[j]>arr[j+1]:\n                    arr[j],arr[j+1]=arr[j+1],arr[j]\n",
        "num_ids": 91
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    print(test_list)\n",
        "num_ids": 26
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n",
        "num_ids": 22
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_tup[i]\n    return test_list\n",
        "num_ids": 38
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    tuple_list = []\n    if len(test_list) >= 3:\n        for i in range(len(test_list)):\n            tuple_list.append(test_list[i])\n            tuple_list.append(test_tup[i])\n    return tuple_list\n",
        "num_ids": 73
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if isinstance(test_tup, tuple):\n        test_list.extend(test_tup)\n    else:\n        raise TypeError(\"bad tuple: \" + repr(test_tup))\n",
        "num_ids": 51
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i-1] < arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    if arr[i][0] < arr[i+1][0]:\n        return False\n    return check_min_heap_helper(arr, i+1)\n",
        "num_ids": 59
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n",
        "num_ids": 56
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i//2] < arr[i] and arr[i//2] < arr[i] and arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n",
        "num_ids": 74
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] == -1:\n        return False\n    if arr[i] > arr[(i-1)//2] or arr[(i+1)//2] > arr[(i-1)//2] or arr[(i+1)//2] > arr[(i+1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i//2)) or check_min_heap_helper(arr, (i+1)//2)\n",
        "num_ids": 141
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    return arr[i] < arr[2 * i + 1]\n    \ndef check_min_heap(arr, n, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/check-min-heap-1-given-array-2-arrays-for-small-heaps-in-python/\n    '''\n    if i >= n:\n        return True\n    return arr[i] < arr[2 * i + 1]\n    \ndef find_smallest(arr):\n    '''\n    Find the smallest element of the given array. \n    '''\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val\n",
        "num_ids": 54
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2] and arr[i] > arr[i//2 - 1] and arr[i] < arr[(i//2) * 2 + 1] and arr[(i//2) * 2 + 1] < arr[i]:\n        return True\n    else:\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) and arr[i] >= arr[0]:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return False\n    \n    if arr[i] > arr[i//2] and i % 2 == 0:\n        return check_min_heap_helper(arr, i//2)\n    else:\n        return check_min_heap_helper(arr, i)\n",
        "num_ids": 81
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    elif n == 101:\n        return 100\n    elif n == 102:\n        return 101\n    elif n == 103:\n        return 102\n    elif n == 104:\n        return 103\n    elif n == 105:\n        return 104\n    elif n == 106:\n        return 105\n    elif n == 107:\n        return 106\n    elif n == 108:\n        return 107\n    elif n == 109:\n        return 108\n    elif n == 110:\n        return 109\n    elif n == 111:\n        return 110\n    elif n == 112:\n        return 111\n    elif n == 113:\n        return 112\n    elif n == 114:\n        return 113\n    elif n == 115:\n        return 114\n    elif n == 116:\n        return 115\n    elif n == 117:\n        return 116\n    elif n == 118:\n        return 117\n    elif n == 119:\n        return 118\n    elif n == 120:\n        return 119\n    elif n == 121:\n        return 120\n    elif n == 122:\n        return 121\n    elif n == 123:\n        return 122\n    elif n == 124:\n        return 123\n    elif n == 125:\n        return 124\n    elif n == 126:\n        return 125\n    elif n == 127:\n        return 126\n    elif n == 128:\n        return 127\n    elif n == 129:\n        return 128\n    elif n == 130:\n        return 129\n    elif n == 131:\n        return 130\n    elif n == 132:\n        return 131\n    elif n == 133:\n        return 132\n    elif n == 134:\n        return 133\n    elif n == 135:\n        return 134\n    elif n == 136:\n        return 135\n    elif n == 137:\n        return 136\n    elif n == 138:\n        return 137\n    elif n == 139:\n        return 138\n    elif n == 140:\n        return 139\n    elif n == 141:\n        return 140\n    elif n == 142:\n        return 141\n    elif n == 143:\n        return 142\n    elif n == 144:\n        return 143\n    elif n == 145:\n        return 144\n    elif n == 146:\n        return 145\n    elif n == 147:\n        return 146\n    elif n == 148:\n        return 147\n    elif n == 149:\n        return 148\n    elif n == 150:\n        return 149\n    elif n == 151:\n        return 150\n    elif n == 152:\n        return 151\n    elif n == 153:\n        return 152\n    elif n == 154:\n        return 153\n    elif n == 155:\n        return 154\n    elif n == 156:\n        return 155\n    elif n == 157:\n        return 156\n    elif n == 158:\n        return 157\n    elif n == 159:\n        return 158\n    elif n == 160:\n        return 159\n    elif n == 161:\n        return 160\n    eli",
        "num_ids": 1949
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0: return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 4\n    elif n == 4: \n        return 6\n    elif n == 5: \n        return 8\n    elif n == 6: \n        return 10\n    elif n == 7: \n        return 12\n    elif n == 8: \n        return 14\n    elif n == 9: \n        return 16\n    elif n == 10: \n        return 18\n    elif n == 11: \n        return 20\n    elif n == 12: \n        return 22\n    elif n == 13: \n        return 24\n    elif n == 14: \n        return 26\n    elif n == 15: \n        return 28\n    elif n == 16: \n        return 30\n    elif n == 17: \n        return 32\n    elif n == 18: \n        return 34\n    elif n == 19: \n        return 36\n    elif n == 20: \n        return 38\n    elif n == 21: \n        return 40\n    elif n == 22: \n        return 42\n    elif n == 23: \n        return 44\n    elif n == 24: \n        return 46\n    elif n == 25: \n        return 48\n    elif n == 26: \n        return 50\n    elif n == 27: \n        return 52\n    elif n == 28: \n        return 54\n    elif n == 29: \n        return 56\n    elif n == 30: \n        return 58\n    elif n == 31: \n        return 60\n    elif n == 32: \n        return 62\n    elif n == 33: \n        return 64\n    elif n == 34: \n        return 66\n    elif n == 35: \n        return 68\n    elif n == 36: \n        return 70\n    elif n == 37: \n        return 72\n    elif n == 38: \n        return 74\n    elif n == 39: \n        return 76\n    elif n == 40: \n        return 78\n    elif n == 41: \n        return 80\n    elif n == 42: \n        return 82\n    elif n == 43: \n        return 84\n    elif n == 44: \n        return 86\n    elif n == 45: \n        return 88\n    elif n == 46: \n        return 90\n    elif n == 47: \n        return 92\n    elif n == 48: \n        return 94\n    elif n == 49: \n        return 96\n    elif n == 50: \n        return 98\n    elif n == 51: \n        return 100\n    elif n == 52: \n        return 102\n    elif n == 53: \n        return 104\n    elif n == 54: \n        return 106\n    elif n == 55: \n        return 108\n    elif n == 56: \n        return 110\n    elif n == 57: \n        return 112\n    elif n == 58: \n        return 114\n    elif n == 59: \n        return 116\n    elif n == 60: \n        return 118\n    elif n == 61: \n        return 120\n    elif n == 62: \n        return 122\n    elif n == 63: \n        return 124\n    elif n == 64: \n        return 126\n    elif n == 65: \n        return 128\n    elif n == 66: \n        return 130\n    elif n == 67: \n        return 132\n    elif n == 68: \n        return 134\n    elif n == 69: \n        return 136\n    elif n == 70: \n        return 138\n    elif n == 71: \n        return 140\n    elif n == 72: \n        return 142\n    elif n == 73: \n        return 144\n    elif n == 74: \n        return 146\n    elif n == 75: \n        return 148\n    elif n == 76: \n        return 150\n    elif n == 77: \n        return 152\n    elif n == 78: \n        return 154\n    elif n == 79: \n        return 156\n    elif n == 80: \n        return 158\n    elif n == 81: \n        return 160\n    elif n == 82: \n        return 162\n    elif n == 83: \n        return 164\n    elif n == 84: \n        return 166\n    elif n == 85: \n        return 168\n    elif n == 86: \n        return 170\n    elif n == 87: \n        return 172\n    elif n == 88: \n        return 173\n    elif n == 89: \n        return 174\n    elif n == 90: \n        return 176\n    elif n == 91: \n        return 178\n    elif n == 92: \n        return 180\n    elif n == 93: \n        return 182\n    elif n == 94: \n        return 184\n    elif n == 95: \n        return 186\n    elif n == 96: \n        return 188\n    elif n == 97: \n        return 190\n    elif n == 98: \n        return 192\n    elif n == 99: \n        return 194\n    elif n == 100: \n        return 196\n    elif n == 101: \n        return 198\n    elif n == 102: \n        return 200\n    elif n == 103: \n        return 202\n    elif n == 104: \n        return 204\n    elif n == 105: \n        return 206\n    elif n == 106: \n        return 208\n    elif n == 107: \n        return 210\n    elif n == 108: \n        return 212\n    elif n == 109: \n        return 214\n    elif n == 110: \n        return 216\n    elif n == 111: \n        return 218\n    elif n == 112: \n        return 220\n    elif n == 113: \n        return 222\n    elif n == 114: \n        return 224\n    elif n == 115: \n        return 226\n    elif n == 116: \n        return 228\n    elif n == 117: \n        return 230\n    elif n == 118: \n        return 232\n    elif n == 119: \n        return 234\n    elif n == 120: \n        return 236\n    elif n == 121: \n        return 238\n    elif n == 122: \n        return 240\n    elif n == 123: \n        return 242\n    elif n == 124: \n        return 244\n    elif n == 125: \n        return 246\n    elif n == 126: \n        return 248\n    elif n == 127: \n        return 250\n    elif n == 128: \n        return 252\n    elif n == 129: \n        return 254\n    elif n == 130: \n        return 256\n    elif n == 131: \n        return 258\n    elif n == 132: \n        return 260\n    elif n == 133: \n        return 262\n    elif n == 134: \n        return 264\n    elif n == 135: \n        return 266\n    elif n == 136: \n        return 268\n    elif n == 137: \n        return 270\n    elif n == 138: \n        return 272\n    elif n == 139: \n        return 274\n    elif n == 140: \n        return 276\n    elif n == 141: \n        return 278\n    elif n == 142: \n        return 280\n    elif n == 143: \n        return 282\n    elif n == 144: \n        return 284\n    elif n == 145: \n        return 286\n    elif n == 146: \n        return 288\n    elif n == 147: \n        return 290\n    elif n == 148: \n        return 292\n    elif n == 149: \n        return 294\n    e",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 2\n    if n == 4: return 3\n    if n == 5: return 4\n    if n == 6: return 5\n    if n == 7: return 6\n    if n == 8: return 7\n    if n == 9: return 8\n    if n == 10: return 9\n    if n == 11: return 10\n    if n == 12: return 11\n    if n == 13: return 12\n    if n == 14: return 13\n    if n == 15: return 14\n    if n == 16: return 15\n    if n == 17: return 16\n    if n == 18: return 17\n    if n == 19: return 18\n    if n == 20: return 19\n    if n == 21: return 20\n    if n == 22: return 21\n    if n == 23: return 22\n    if n == 24: return 23\n    if n == 25: return 24\n    if n == 26: return 25\n    if n == 27: return 26\n    if n == 28: return 27\n    if n == 29: return 28\n    if n == 30: return 29\n    if n == 31: return 30\n    if n == 32: return 31\n    if n == 33: return 32\n    if n == 34: return 33\n    if n == 35: return 34\n    if n == 36: return 35\n    if n == 37: return 36\n    if n == 38: return 37\n    if n == 39: return 38\n    if n == 40: return 39\n    if n == 41: return 40\n    if n == 42: return 41\n    if n == 43: return 42\n    if n == 44: return 43\n    if n == 45: return 44\n    if n == 46: return 45\n    if n == 47: return 46\n    if n == 48: return 47\n    if n == 49: return 48\n    if n == 50: return 49\n    if n == 51: return 50\n    if n == 52: return 51\n    if n == 53: return 52\n    if n == 54: return 53\n    if n == 55: return 54\n    if n == 56: return 55\n    if n == 57: return 56\n    if n == 58: return 57\n    if n == 59: return 58\n    if n == 60: return 59\n    if n == 61: return 60\n    if n == 62: return 61\n    if n == 63: return 62\n    if n == 64: return 63\n    if n == 65: return 64\n    if n == 66: return 65\n    if n == 67: return 66\n    if n == 68: return 67\n    if n == 69: return 68\n    if n == 70: return 69\n    if n == 71: return 70\n    if n == 72: return 71\n    if n == 73: return 72\n    if n == 74: return 73\n    if n == 75: return 74\n    if n == 76: return 75\n    if n == 77: return 76\n    if n == 78: return 77\n    if n == 79: return 78\n    if n == 80: return 79\n    if n == 81: return 80\n    if n == 82: return 81\n    if n == 83: return 82\n    if n == 84: return 83\n    if n == 85: return 84\n    if n == 86: return 85\n    if n == 87: return 86\n    if n == 88: return 87\n    if n == 89: return 88\n    if n == 90: return 89\n    if n == 91: return 90\n    if n == 92: return 91\n    if n == 93: return 92\n    if n == 94: return 93\n    if n == 95: return 94\n    if n == 96: return 95\n    if n == 97: return 96\n    if n == 98: return 97\n    if n == 99: return 98\n    if n == 100: return 99\n    if n == 101: return 100\n    if n == 102: return 101\n    if n == 103: return 102\n    if n == 104: return 103\n    if n == 105: return 104\n    if n == 106: return 105\n    if n == 107: return 106\n    if n == 108: return 107\n    if n == 109: return 108\n    if n == 110: return 109\n    if n == 111: return 110\n    if n == 112: return 111\n    if n == 113: return 112\n    if n == 114: return 113\n    if n == 115: return 114\n    if n == 116: return 115\n    if n == 117: return 116\n    if n == 118: return 117\n    if n == 119: return 118\n    if n == 120: return 119\n    if n == 121: return 120\n    if n == 122: return 121\n    if n == 123: return 122\n    if n == 124: return 123\n    if n == 125: return 124\n    if n == 126: return 125\n    if n == 127: return 126\n    if n == 128: return 127\n    if n == 129: return 128\n    if n == 130: return 129\n    if n == 131: return 130\n    if n == 132: return 131\n    if n == 133: return 132\n    if n == 134: return 133\n    if n == 135: return 134\n    if n == 136: return 135\n    if n == 137: return 136\n    if n == 138: return 137\n    if n == 139: return 138\n    if n == 140: return 139\n    if n == 141: return 140\n    if n == 142: return 141\n    if n == 143: return 142\n    if n == 144: return 143\n    if n == 145: return 144\n    if n == 146: return 145\n    if n == 147: return 146\n    if n == 148: return 147\n    if n == 149: return 148\n    if n == 150: return 149\n    if n == 151: return 150\n    if n == 152: return 151\n    if n == 153: return 152\n    if n == 154: return 153\n    if n == 155: return 154\n    if n == 156: return 155\n    if n == 157: return 156\n    if n == 158: return 157\n    if n == 159: return 158\n    if n == 160: return 159\n    if n == 161: return 160\n    if n == 162: return 161\n    if n == 163: return 162\n    if n == 164: return 163\n    if n == 165: return 164\n    if n == 166: return 165\n    if n == 167: return 166\n    if n == 168: return 167\n    if n == 169: return 168\n    if n == 170: return 169\n    if n == 171: return 170\n    if n == 172: return 171\n    if n == 173: return 172\n    if n == 174: return 173\n    if n == 175: return 174\n    if n == 176: return 175\n    if n == 177: return 176\n    if n == 178: return 177\n    if n == 179: return 178\n    if n == 180: return 179\n    if n == 181: return 180\n    if n == 182: return 181\n    if n == 183: return 182\n    if n == 184: return 183\n    if n == 185: return 184\n    if n == 186: return 185\n    if n == 187: return 186\n    if n == 188: return 187\n    if n == 189: return 188\n    if n == 190: return 189\n    if n == 191: return 190\n    if n == 192: return 191\n    if n == 193: return 192\n    if n == 194: return 193\n    if n == 195: return 194\n    if n == 196: return 195\n    if n == 197: return 196\n    if n == 198: return 197\n    if n == 199: return 198\n    if n == 200: return 199\n    if n == 201: return 200\n    if n == 202: return 201\n    if n == 203: return 202\n    if n == 204: return 203\n    if n == 205: return 204\n    if n == 206: return 205\n    if n == 207: return 206\n    if n == 208: return 207\n    if n == 209: return 208\n    if n == 210: return 209\n    if n == 211: return 210\n    if n == 212: return 211\n    if n == 213: return 212\n    if n == 214: return 213\n    if n == 215: return 214\n    i",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # your code\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    else:\n        return None\n",
        "num_ids": 173
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    numbers = []\n    for i in range(n):\n        number = int(input(f\"JACOBSTHA-{i+1} n: \"))\n        if number not in numbers:\n            numbers.append(number)\n",
        "num_ids": 61
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        raise ValueError(\"The number must be non-negative.\")\n",
        "num_ids": 23
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    elif n==5:\n        return 4\n    elif n==6:\n        return 5\n    elif n==7:\n        return 6\n    elif n==8:\n        return 7\n    elif n==9:\n        return 8\n    elif n==10:\n        return 9\n    elif n==11:\n        return 10\n    elif n==12:\n        return 11\n    elif n==13:\n        return 12\n    elif n==14:\n        return 13\n    elif n==15:\n        return 14\n    elif n==16:\n        return 15\n    elif n==17:\n        return 16\n    elif n==18:\n        return 17\n    elif n==19:\n        return 18\n    elif n==20:\n        return 19\n    elif n==21:\n        return 20\n    elif n==22:\n        return 21\n    elif n==23:\n        return 22\n    elif n==24:\n        return 23\n    elif n==25:\n        return 24\n    elif n==26:\n        return 25\n    elif n==27:\n        return 26\n    elif n==28:\n        return 27\n    elif n==29:\n        return 28\n    elif n==30:\n        return 29\n    elif n==31:\n        return 30\n    elif n==32:\n        return 31\n    elif n==33:\n        return 32\n    elif n==34:\n        return 33\n    elif n==35:\n        return 34\n    elif n==36:\n        return 35\n    elif n==37:\n        return 36\n    elif n==38:\n        return 37\n    elif n==39:\n        return 38\n    elif n==40:\n        return 39\n    elif n==41:\n        return 40\n    elif n==42:\n        return 41\n    elif n==43:\n        return 42\n    elif n==44:\n        return 43\n    elif n==45:\n        return 44\n    elif n==46:\n        return 45\n    elif n==47:\n        return 46\n    elif n==48:\n        return 47\n    elif n==49:\n        return 48\n    elif n==50:\n        return 49\n    elif n==51:\n        return 50\n    elif n==52:\n        return 51\n    elif n==53:\n        return 52\n    elif n==54:\n        return 53\n    elif n==55:\n        return 54\n    elif n==56:\n        return 55\n    elif n==57:\n        return 56\n    elif n==58:\n        return 57\n    elif n==59:\n        return 58\n    elif n==60:\n        return 59\n    elif n==61:\n        return 60\n    elif n==62:\n        return 61\n    elif n==63:\n        return 62\n    elif n==64:\n        return 63\n    elif n==65:\n        return 64\n    elif n==66:\n        return 65\n    elif n==67:\n        return 66\n    elif n==68:\n        return 67\n    elif n==69:\n        return 68\n    elif n==70:\n        return 69\n    elif n==71:\n        return 70\n    elif n==72:\n        return 71\n    elif n==73:\n        return 72\n    elif n==74:\n        return 73\n    elif n==75:\n        return 74\n    elif n==76:\n        return 75\n    elif n==77:\n        return 76\n    elif n==78:\n        return 77\n    elif n==79:\n        return 78\n    elif n==80:\n        return 79\n    elif n==81:\n        return 80\n    elif n==82:\n        return 81\n    elif n==83:\n        return 82\n    elif n==84:\n        return 83\n    elif n==85:\n        return 84\n    elif n==86:\n        return 85\n    elif n==87:\n        return 86\n    elif n==88:\n        return 87\n    elif n==89:\n        return 88\n    elif n==90:\n        return 89\n    elif n==91:\n        return 90\n    elif n==92:\n        return 91\n    elif n==93:\n        return 92\n    elif n==94:\n        return 93\n    elif n==95:\n        return 94\n    elif n==96:\n        return 95\n    elif n==97:\n        return 96\n    elif n==98:\n        return 97\n    elif n==99:\n        return 98\n    elif n==100:\n        return 99\n    elif n==101:\n        return 100\n    elif n==102:\n        return 101\n    elif n==103:\n        return 102\n    elif n==104:\n        return 103\n    elif n==105:\n        return 104\n    elif n==106:\n        return 105\n    elif n==107:\n        return 106\n    elif n==108:\n        return 107\n    elif n==109:\n        return 108\n    elif n==110:\n        return 109\n    elif n==111:\n        return 110\n    elif n==112:\n        return 111\n    elif n==113:\n        return 112\n    elif n==114:\n        return 113\n    elif n==115:\n        return 114\n    elif n==116:\n        return 115\n    elif n==117:\n        return 116\n    elif n==118:\n        return 117\n    elif n==119:\n        return 118\n    elif n==120:\n        return 119\n    elif n==121:\n        return 120\n    elif n==122:\n        return 121\n    elif n==123:\n        return 122\n    elif n==124:\n        return 123\n    elif n==125:\n        return 124\n    elif n==126:\n        return 125\n    elif n==127:\n        return 126\n    elif n==128:\n        return 127\n    elif n==129:\n        return 128\n    elif n==130:\n        return 129\n    elif n==131:\n        return 130\n    elif n==132:\n        return 131\n    elif n==133:\n        return 132\n    elif n==134:\n        return 133\n    elif n==135:\n        return 134\n    elif n==136:\n        return 135\n    elif n==137:\n        return 136\n    elif n==138:\n        return 137\n    elif n==139:\n        return 138\n    elif n==140:\n        return 139\n    elif n==141:\n        return 140\n    elif n==142:\n        return 141\n    elif n==143:\n        return 142\n    elif n==144:\n        return 143\n    elif n==145:\n        return 144\n    elif n==146:\n        return 145\n    elif n==147:\n        return 146\n    elif n==148:\n        return 147\n    elif n==149:\n        return 148\n    elif n==150:\n        return 149\n    elif n==151:\n        return 150\n    elif n==152:\n        return 151\n    elif n==153:\n        return 152\n    elif n==154:\n        return 153\n    elif n==155:\n        return 154\n    elif n==156:\n        return 155\n    elif n==157:\n        return 156\n    elif n==158:\n        return 157\n    elif n==159:\n        return 158\n    elif n==160:\n        return 159\n    elif n==161:\n        return 160\n    elif n=",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n > 0:\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            return 22\n        if n == 24:\n            return 23\n        if n == 25:\n            return 24\n        if n == 26:\n            return 25\n        if n == 27:\n            return 26\n        if n == 28:\n            return 27\n        if n == 29:\n            return 28\n        if n == 30:\n            return 29\n        if n == 31:\n            return 30\n        if n == 32:\n            return 31\n        if n == 33:\n            return 32\n        if n == 34:\n            return 33\n        if n == 35:\n            return 34\n        if n == 36:\n            return 35\n        if n == 37:\n            return 36\n        if n == 38:\n            return 37\n        if n == 39:\n            return 38\n        if n == 40:\n            return 39\n        if n == 41:\n            return 40\n        if n == 42:\n            return 41\n        if n == 43:\n            return 42\n        if n == 44:\n            return 43\n        if n == 45:\n            return 44\n        if n == 46:\n            return 45\n        if n == 47:\n            return 46\n        if n == 48:\n            return 47\n        if n == 49:\n            return 48\n        if n == 50:\n            return 49\n        if n == 51:\n            return 50\n        if n == 52:\n            return 51\n        if n == 53:\n            return 52\n        if n == 54:\n            return 53\n        if n == 55:\n            return 54\n        if n == 56:\n            return 55\n        if n == 57:\n            return 56\n        if n == 58:\n            return 57\n        if n == 59:\n            return 58\n        if n == 60:\n            return 59\n        if n == 61:\n            return 60\n        if n == 62:\n            return 61\n        if n == 63:\n            return 62\n        if n == 64:\n            return 63\n        if n == 65:\n            return 64\n        if n == 66:\n            return 65\n        if n == 67:\n            return 66\n        if n == 68:\n            return 67\n        if n == 69:\n            return 68\n        if n == 70:\n            return 69\n        if n == 71:\n            return 70\n        if n == 72:\n            return 71\n        if n == 73:\n            return 72\n        if n == 74:\n            return 73\n        if n == 75:\n            return 74\n        if n == 76:\n            return 75\n        if n == 77:\n            return 76\n        if n == 78:\n            return 77\n        if n == 79:\n            return 78\n        if n == 80:\n            return 79\n        if n == 81:\n            return 80\n        if n == 82:\n            return 81\n        if n == 83:\n            return 82\n        if n == 84:\n            return 83\n        if n == 85:\n            return 84\n        if n == 86:\n            return 85\n        if n == 87:\n            return 86\n        if n == 88:\n            return 87\n        if n == 89:\n            return 88\n        if n == 90:\n            return 89\n        if n == 91:\n            return 90\n        if n == 92:\n            return 91\n        if n == 93:\n            return 92\n        if n == 94:\n            return 93\n        if n == 95:\n            return 94\n        if n == 96:\n            return 95\n        if n == 97:\n            return 96\n        if n == 98:\n            return 97\n        if n == 99:\n            return 98\n        if n == 100:\n            return 99\n        if n == 101:\n            return 100\n        if n == 102:\n            return 101\n        if n == 103:\n            return 102\n        if n == 104:\n            return 103\n        if n == 105:\n            return 104\n        if n == 106:\n            return 105\n        if n == 107:\n            return 106\n        if n == 108:\n            return 107\n        if n == 109:\n            return 108\n        if n == 110:\n            return 109\n        if n == 111:\n            return 110\n        if n == 112:\n            return 111\n        if n == 113:\n            return 112\n        if n == 114:\n            return 113\n        if n == 115:\n            return 114\n        if n == 116:\n            return 115\n        if n == 117:\n            return 116\n        if n == 118:\n            return 117\n        if n == 119:\n            return 118\n        if n == 120:\n            return 119\n        if n == 121:\n            return 120\n        if n == 122:\n            return 121\n        if n == 123:\n            return 122\n        if n == 124:\n            return 123\n        if n == 125:\n            return 124\n        if n == 126:\n            return 125\n        if n == 127:\n            return 126\n        if n == 128:\n            return 127\n        if n == 129:\n            return 128\n        if n == 130:\n            return 129\n        if n == 131:\n            return 130\n        if n == 132:\n            return 131\n        if n == 133:\n            return 132\n        if n == 134:\n            return 133\n        if n == 135:\n            return 134\n        if n == 136:\n            return 135\n        if n == 137:\n            return 136\n        if n == 138:\n            return 137\n        if n == 139:\n            return 138\n        if n == 140:\n            return 139\n        if n == 141:\n            return 140\n        if n == 142:\n            return 141\n        if n == 143:\n            return 142\n        if n == 144:\n            return 143\n        if n == 145:\n            return 144\n        if n == 146:\n            return 145\n        if n == 147:\n            return 146\n        if n == 148:\n            return 147\n        if n == 149:\n            return 148\n        if n == 150:\n            return 149\n        if n == 151:\n            return 150\n        if n == 152:\n            return 151\n        if n == 153:\n            return 152\n        if n == 154:\n            return 153\n        if n == 155:\n            return 154\n        if n == 156:\n            return 155\n        if n == 157:\n            return 156\n        if n == 158:\n            return 157\n        if n == 159:\n            return 158\n        if n == 160:\n            return 159\n        if n == 161:\n            return 160\n        if n == 162:\n            return 161\n        if n == 163:\n            return 162\n        if n == 164:\n            return 163\n        if n == 165:\n            return 164\n        if n == 166:\n            return 165\n        if n == 167:\n            return 166\n        if n == 168:\n            return 167\n        if n == 169:\n            return 168\n        if n == 170:\n            return 169\n        if n == 171:\n            return 170\n        if n == 172:\n            return 171\n        if n == 173:\n            return 172\n        if n == 174:\n            return 173\n        if n == 175:\n            return 174\n        if n == 176:\n            return 175\n        if n == 17",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 2\n    j = 1\n    while i < n:\n        if (n % i == 0):\n            j += 1\n        i += 1\n    return j\n",
        "num_ids": 43
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # use recursion\n    if n < 1: \n        return\n    else: \n        return n*(n-1)//2 + jacobsthal_num(n-1)\n",
        "num_ids": 49
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = 0\n    for i in range(0,len(test_list)):\n        if test_list[i][0] > K:\n            k += 1\n    return k\n",
        "num_ids": 46
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #function to find minimum k records from tuple list\n    def find_k(tuple_list, K):\n        '''\n        K is the number of records\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        return k\n    #Function to find the minimum k records from tuple list\n    def find_min_k(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #loop through list\n        for i in range(len(tuple_list)):\n            #if min_k is greater than K, return\n            if find_k(tuple_list, K) > K:\n                #print(tuple_list[i], \"is greater than K\")\n                return tuple_list[i]\n            #else, if min_k is less than K, remove that record and repeat for another record\n            else:\n                tuple_list[i] = tuple_list[i][:find_k(tuple_list, K)] + tuple_list[i][find_k(tuple_list, K)+1:]\n        #print(\"All records for min_k\")\n        #print(tuple_list)\n        return \"None\"\n    #Function to find minimum k records from tuple list\n    def find_min_k_records(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #loop through list\n        for i in range(len(tuple_list)):\n            #if min_k is greater than K, return\n            if find_min_k(tuple_list, K) > K:\n                #print(tuple_list[i], \"is greater than K\")\n                return tuple_list[i]\n            #else, if min_k is less than K, remove that record and repeat for another record\n            else:\n                tuple_list[i] = tuple_list[i][:find_min_k(tuple_list, K)] + tuple_list[i][find_min_k(tuple_list, K)+1:]\n        #print(\"All records for min_k\")\n        #print(tuple_list)\n        return \"None\"\n    #Function to find minimum k records from tuple list\n    def find_min_k_records_rec(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k\")\n        #print(k_list)\n        #print(\"find_min_k_records\")\n        #print(find_min_k_records(tuple_list, K))\n        #print(\"find_min_k_records_rec\")\n        #print(find_min_k_records_rec(tuple_list, K))\n        return find_min_k_records(tuple_list, K)\n    #Function to find the minimum k records from tuple list\n    def find_min_k_records_rec_with_rec(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k_records\")\n        #print(k_list)\n        #print(\"find_min_k_records_rec\")\n        #print(find_min_k_records(tuple_list, K))\n        return find_min_k_records_rec(tuple_list, K)\n    #Function to find the minimum k records from tuple list\n    def find_min_k_records_rec_with_k(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k_records_with_k\")\n        #print(k_list)\n        #print(\"find_min_k_records_rec_with_k\")\n        #print(find_min_k_records_rec_with_k(tuple_list, K))\n        return find_min_k_records_rec_with_k(tuple_list, K)\n    #Function to find the minimum k records from tuple list\n    def find_min_k_records_rec_with_k_rec(test_list, K):\n        '''\n        tuple_list is a list of tuples (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        '''\n        #initialize k with first 10 records\n        k_list = []\n        for i in range(K):\n            k_list.append(tuple_list[i])\n        #keep track of the minimum number of records that can be found\n        k = 0\n        #Loop through the k list\n        for i in range(K):\n            #Check if current record is less than the previous k record\n            if k_list[i] < k_list[i-1]:\n                #print(tuple_list[i], \"is less than k_list[\", i-1, \"]\")\n                k = i\n        #print(\"find_min_k_records_with_k_rec\")\n        #print(k_list)\n        #print(\"find_min_k_records_rec_with_k_rec\")\n        #print(find_min_k_records_rec_with_k_rec(tuple_list, K))",
        "num_ids": 224
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store keys and values of the tuple\n    dictionary = {}\n    for i in test_list:\n        dictionary[i[0]] = i[1]\n    \n    # Create an empty list to store result\n    min_k = []\n    # Loop through the keys\n    for i in dictionary:\n        # Compare keys\n        if len(dictionary) > 1 and i < K:\n            # Create a list to hold all values\n            final_list = []\n            # Loop through the keys\n            for j in dictionary:\n                # Compare keys\n                if dictionary[j] < i:\n                    # Remove from list\n                    final_list.append(dictionary[j])\n                    # Update the dictionary\n                    del dictionary[j]\n            # Add all the values into the list\n            final_list += i\n            # Add the values back into the dictionary\n            dictionary[i] = final_list\n        # Loop through the keys\n        elif len(dictionary) == 1 and dictionary[i] == i:\n            # Append the values to the list\n            min_k.append(dictionary[i])\n    \n    # Create a list to store result\n    k_list = []\n    # Loop through the keys\n    for i in dictionary:\n        # Compare keys\n        if dictionary[i] in k_list:\n            # Remove from list\n            k_list.remove(dictionary[i])\n        # Append the values to the list\n        else:\n            # Append the values to the list\n            k_list.append(dictionary[i])\n    \n    # Return the list of the minimum k\n    return min_k\n",
        "num_ids": 386
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list)[-K:]\n",
        "num_ids": 14
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # remove duplicates\n    list_ = [val for val in test_list]\n    for i in range(len(test_list)):\n        list_.remove(test_list[i])\n",
        "num_ids": 48
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = len(test_list)\n    return min(k, (k-1)//K)*K\n",
        "num_ids": 28
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = len(test_list)\n    if k == 0:\n        return []\n    else:\n        min_k = [0]*k\n        for i in range(k):\n            min_k[i] = test_list[i][1]\n    for i in range(k, 0, -1):\n        for j in range(0, i):\n            if min_k[j] > min_k[i] and test_list[j][1] < min_k[j]:\n                min_k[j], min_k[i] = min_k[i], min_k[j]\n    return min_k[:K]\n    \nprint(min_k([(5, 'a'), (1, 'd'), (2, 'a'), (4, 'd'), (3, 'd'), (3, 'b'), (3, 'd'), (1, 'c'), (1, 'c'), (2, 'c'), (2, 'd')], 4))\n",
        "num_ids": 236
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < 1 or K < 1:\n        return None\n",
        "num_ids": 22
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # print(test_list)\n",
        "num_ids": 11
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n        elif l2[i] in l3:\n            common.append(l2[i])\n    return common\n",
        "num_ids": 71
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n                    index_list.append(j)\n                    index_list.append(k)\n    return index_list\n",
        "num_ids": 104
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # We define a list of indices that we have to check \n    # If list 1 is the same as list 2, we have to check list 1, otherwise we have to check list 2\n    # We also have to check list 3, otherwise it is not common. \n    # The idea is that if we have 3 lists under the same index, we are only checking lists 1 and 2\n    # If we check only one list, that means that the list is already common\n    # In other words, the other lists are not common, so we have to check the list itself\n    # And so on.\n    # We use the same function for each index, to check the list at the same time\n    # We use two loops to perform this function, one for list 1, one for list 2, one for list 3.\n    # If list 3 is common, we return it. Otherwise, we return -1, which indicates that list 3 doesn't appear in the common element of lists 1 and 2\n    # If list 3 is not common, we return the other list, which is common to list 1 and 2\n    # We return the list we have checked, which is common to list 1 and 2\n    # If we don't have any common element, we return -1.\n    # We return the list we have checked, which is common to list 1 and 2\n    \n    # So we can create a new list that contains all the elements from lists 1 and 2.\n    # We also create a new list that contains the ones already in the list we have checked\n    \n    indices = []\n    for i in range(len(l1)):\n        if l2[i] not in indices:\n            indices.append(l2[i])\n        if l3[i] not in indices:\n            indices.append(l3[i])\n    \n    # We return the list we have checked\n    return indices\n    \n    ",
        "num_ids": 428
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    index_list = [i for i in range(0, len(l1))]\n    for i in index_list:\n        if l1[i] in l2 and l3[i] in l1 and l2[l3[i]] in l1:\n            common.append(l1[l2[l3[i]]])\n        elif l1[i] in l2 and l3[i] in l1 and l2[l3[i]] not in l1:\n            common.append(l1[l3[i]])\n        elif l1[i] in l2 and l3[i] in l1 and l3[l2[l1[i]]] in l1:\n            common.append(l1[l2[l3[i]]])\n    return common\n",
        "num_ids": 198
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Returns list of elements in common.\n    common_elements = []\n",
        "num_ids": 20
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[i] for i in l3 if l1[i] in l2] + [l2[i] for i in l1 if l2[i] in l3] + [l3[i] for i in l1 if i in l2] + [l1[i] for i in l2 if i in l3]\n",
        "num_ids": 84
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j:\n                    if i == k:\n                        common_list.append(i)\n    return common_list\n",
        "num_ids": 63
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    ans = []\n    for i in range(0, len(l1)):\n        if l1[i] in l2[i]:\n            if l2[i] not in ans:\n                ans.append(l2[i])\n    for i in range(0, len(l2)):\n        if l2[i] in ans:\n            ans.remove(l2[i])\n    for i in range(0, len(l2)):\n        if l3[i] not in ans:\n            ans.append(l3[i])\n    return ans\n",
        "num_ids": 138
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # your code goes here\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n",
        "num_ids": 91
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = 0\n    common_list = []\n    for element in l1:\n        if element in l2 and element in l3:\n            common_list.append(element)\n    return common_list\n",
        "num_ids": 51
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Write your code here.\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n",
        "num_ids": 30
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    second_smallest_num = numbers[1]\n    return second_smallest_num\n",
        "num_ids": 31
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        raise ValueError(\"numbers list is empty\")\n",
        "num_ids": 20
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Your code here\n    \n    return numbers[1]",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "num_ids": 12
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[len(numbers)//2]\n",
        "num_ids": 22
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n",
        "num_ids": 10
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lowest = numbers[0]\n    second_lowest = numbers[1]\n    for i in numbers[1:]:\n        if i < lowest:\n            lowest = i\n    return lowest\n",
        "num_ids": 49
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_list = re.findall('\\d', text) # grab all digits from the 'a' to the end of the string\n    text_list = re.findall('\\d', text) # grab all digits from the 'b'\n    if len(text_list) == 0: # check to see if the string is empty\n        return None\n    else:\n        a = text_list[0] # grab the first digit\n        if len(a) == 0: # check to see if there's any digits left\n            return None\n        else:\n            return a\n",
        "num_ids": 134
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'(a)b'\n    regex2 = r'\\b(a|b)b'\n    if text.lower().count(regex) == 0 or text.lower().count(regex2) == 0:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 71
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    string = re.search(r'a\\b\\w+',text)\n    match = re.search(r'a\\b\\w+',text)\n    print(string.group())\n    print(match.group())\n    \ndef check_punctuation(text):\n    '''\n    Write a function that checks for punctuation marks within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No punctuation marks\")\n    else:\n        print('No punctuation marks')\n        \ndef check_periods(text):\n    '''\n    Write a function that checks for periods within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    text = re.sub('[^a-zA-Z\\s]','',text)\n    if '.' in text:\n        print(\"No periods\")\n    else:\n        print('No periods')\n        \ndef check_in_spaces(text):\n    '''\n    Write a function that checks for spaces within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    text = re.sub('[^a-zA-Z\\s]','',text)\n    if'' in text:\n        print(\"No spaces\")\n    else:\n        print('No spaces')\n        \ndef remove_chars(text):\n    '''\n    Write a function that removes any characters that are in the \u201c '\u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No characters\")\n    else:\n        print('No characters')\n        \ndef remove_stopwords(text):\n    '''\n    Write a function that removes any stopwords that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords\")\n    else:\n        print('No stopwords')\n        \ndef remove_repeating_words(text):\n    '''\n    Write a function that removes any repeating words that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No repeating words\")\n    else:\n        print('No repeating words')\n        \ndef remove_dashes(text):\n    '''\n    Write a function that removes any dashes that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No dashes\")\n    else:\n        print('No dashes')\n        \ndef remove_stop_words(text):\n    '''\n    Write a function that removes any stop words that are in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords\")\n    else:\n        print('No stopwords')\n        \ndef remove_punctuation(text):\n    '''\n    Write a function that removes any punctuation marks within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    '''\n    text = re.sub('[^a-zA-Z\\s]','',text)\n    if'' in text:\n        print(\"No punctuation marks\")\n    else:\n        print('No punctuation marks')\n        \ndef remove_periods(text):\n    '''\n    Write a function that removes any periods within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if '.' in text:\n        print(\"No periods\")\n    else:\n        print('No periods')\n        \ndef remove_in_spaces(text):\n    '''\n    Write a function that removes any spaces within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No spaces\")\n    else:\n        print('No spaces')\n        \ndef remove_chars_to_ignore(text):\n    '''\n    Write a function that removes any characters that are not in the \u201c '\u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No characters to ignore\")\n    else:\n        print('No characters to ignore')\n        \ndef remove_stopwords_to_ignore(text):\n    '''\n    Write a function that removes any stopwords that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords to ignore\")\n    else:\n        print('No stopwords to ignore')\n        \ndef remove_repeating_words_to_ignore(text):\n    '''\n    Write a function that removes any repeating words that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No repeating words to ignore\")\n    else:\n        print('No repeating words to ignore')\n        \ndef remove_dashes_to_ignore(text):\n    '''\n    Write a function that removes any dashes that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No dashes to ignore\")\n    else:\n        print('No dashes to ignore')\n        \ndef remove_stop_words_to_ignore(text):\n    '''\n    Write a function that removes any stop words that are not in the \u201c \u201d character. https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    '''\n    text = re.sub('[^\\w\\s]','',text)\n    if'' in text:\n        print(\"No stopwords to ignore\")\n    else:\n        print('No stopwords to ignore')\n        \ndef remove_punctuation_to_ignore(text):\n    '''\n    Write a function that removes any punctuation marks within a text. https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    '''\n    text = re",
        "num_ids": 6
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'(?<=a)[b](?=\\w)',text)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regrex_zero_one = re.compile(r'a(?:b)?\\s*(\\d+)')\n    result = regrex_zero_one.search(text)\n    return result.group(1)\n",
        "num_ids": 54
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern_zero = r'a(b)?\\s\\s\\w'\n    pattern_one = r'a(b)?\\s\\s\\w'\n    match_zero = re.match(pattern_zero,text)\n    match_one = re.match(pattern_one,text)\n    \n    if match_zero:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "num_ids": 97
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\"_\", \" \")\n    pattern = re.compile(r'a\\s+b')\n    match = pattern.search(text)\n    if match!= None:\n        result = \"a b\"\n    else:\n        result = \"a\"\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if re.search('a', text) is not None else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if text.startswith('a') and re.search('b', text) is not None else False)\n    # return (True if re.search('a', text) is not None else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    return (True if len(re.findall('b', text))!= 0 else False)\n    # return (True if re.search('a', text) is not None else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if text.startswith('a') and re.search('b', text) is not None else False)\n    # return (True if text.startswith('a') else False)\n    # return (True if re.search('a', text) is not None else False)\n    # return (True if re.search('b', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if re.search('b', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if len(re.findall('b', text))!= 0 else False)\n    # return (True if re.search('b', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if text.startswith('b') and re.search('b', text) is not None else False)\n    # return (True if re.search('a', text) is not None else False)\n    # return (True if re.findall('a', text) is not None else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if len(re.findall('b', text))!= 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if text.startswith('b') and re.search('b', text) is not None else False)\n    # return (True if text.startswith('b') else False)\n    # return (True if text.startswith('a') and re.search('a', text) is not None else False)\n    # return (True if text.startswith('a') else False)\n    # return (True if re.findall('a', text) is not None else False)\n    # return (True if re.findall('a', text) is not None else False)\n    # return (True if re.search('a', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if re.findall('a', text) is not None else False)\n    # return (True if re.findall('a', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if re.search('a', text) is not None else False)\n    # return (True if re.findall('a', text) is not None else False)\n    # return (True if re.findall('a', text) is not None else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('a', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if len(re.findall('b', text))!= 0 else False)\n    # return (True if re.findall('b', text) is not None else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b', text)) == 0 else False)\n    # return (True if len(re.findall('b'",
        "num_ids": 1979
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_list = text.split(' ')\n    text_list_nums = []\n    for word in text_list:\n        if re.match(\"[a-zA-Z]\", word):\n            text_list_nums.append(word)\n",
        "num_ids": 64
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # Your code goes here\n    return re.findall('a[0-9]+', text)!= [] or re.findall('b[0-9]+', text)!= []\n    #return re.findall('\\w+\\d+', text)!= []\n",
        "num_ids": 65
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l=len(test_list)\n    answer = 0\n    for i in range(0,l):\n        for j in range(i,l):\n            if test_list[i]==test_list[j] and j-i<10:\n                answer+=1\n    return answer\n    \n    \ndef count_matrix(test_list):\n    '''\n    Write a function to count the number of non-adjacent matches in a matrix. https://www.geeksforgeeks.org/python-program-to-count-number-of-non-adjacent-matches-in-a-matrix/\n    '''\n    m=len(test_list)\n    answer = 0\n    for i in range(0,m):\n        for j in range(i,m):\n            if test_list[i][j]==test_list[j][i]:\n                answer+=1\n    return answer\n    \n    \ndef count_sorted(test_list):\n    '''\n    Write a function to count the number of elements in a sorted list. https://www.geeksforgeeks.org/python-program-to-count-the-number-of-elements-in-a-sorted-list/\n    '''\n    answer = 0\n    l=len(test_list)\n    for i in range(0,l):\n        for j in range(i,l):\n            if test_list[i][j]>test_list[j][i]:\n                answer+=1\n    return answer\n    \n    \ndef count_backwards(test_list):\n    '''\n    Write a function to count the number of elements in a sorted list. https://www.geeksforgeeks.org/python-program-to-count-the-number-of-elements-in-a-sorted-list-backwards/\n    '''\n    answer = 0\n    l=len(test_list)\n    for i in range(0,l-1,-1):\n        for j in range(i,l):\n            if test_list[j][i]>test_list[i][j]:\n                answer+=1\n    return answer\n    \n    \ndef count_double_count(test_list):\n    '''\n    Write a function to count the number of elements in a sorted list. https://www.geeksforgeeks.org/python-program-to-count-the-number-of-elements-in-a-sorted-list-backwards/\n    '''\n    answer = 0\n    l=len(test_list)\n    for i in range(0,l-1,-1):\n        for j in range(i,l):\n            if test_list[j][i]==test_list[j][i+1]:\n                answer+=1\n    return answer\n    \n    \ndef count_triple_count(test_list):\n    '''\n    Write a function to count the number of elements in a sorted list. https://www.geeksforgeeks.org/python-program-to-count-the-number-of-elements-in-a-sorted-list-backwards/\n    '''\n    answer = 0\n    l=len(test_list)\n    for i in range(0,l-2,-2):\n        for j in range(i,l-1,-2):\n            if test_list[j][i]==test_list[j+1][i]==test_list[j+2][i]:\n                answer+=1\n    return answer\n    \n    \ndef test(test_list):\n    print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches(test_list)))\n    print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_reverse(test_list)))\n    print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_matrix(test_list)))\n    print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_sorted(test_list)))\n    print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_backwards(test_list)))\n    print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_double_count(test_list)))\n    print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_triple_count(test_list)))\n    \n    \nif __name__ == \"__main__\":\n    test_list = [[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]\n    test(test_list)\n    \n    \n    #print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches(test_list)))\n    #print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_reverse(test_list)))\n    #print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_matrix(test_list)))\n    #print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_sorted(test_list)))\n    #print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_backwards(test_list)))\n    #print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_double_count(test_list)))\n    #print(\"The number of non-adjacent matches: \" + str(count_non_adjacent_matches_triple_count(test_list)))\n",
        "num_ids": 688
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total = 0\n    index = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            total += 1\n        else:\n            total += 1\n            index = i + 1\n    return total, index\n",
        "num_ids": 72
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # traverse in reverse\n    for i in range(len(test_list)-1, -1, -1):\n        # check if the characters match, if not, go to the next index\n        if test_list[i] == test_list[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create a count variable\n    count = 0\n    # loop through all the strings\n    for i in range(len(test_list) - 1):\n        # check if it is a palindrome\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    counter = {} # dictionary to store count of pairs\n    \n    for string in test_list:\n        key = string[::-1]\n        if key in counter:\n            counter[key] += 1\n        else:\n            counter[key] = 1\n    \n    return counter\n    \n    \n    ",
        "num_ids": 75
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = sorted(test_list)\n    length = len(test_list)\n    count = 0\n    for i in range(length):\n        if test_list[i][::-1] == test_list[i+1]:\n            count+=1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    i = 0\n    j = 0\n    k = len(test_list) - 1\n    reverse_dict = {}\n    while i < k:\n        if test_list[i]!= test_list[j]:\n            if test_list[i] not in reverse_dict:\n                reverse_dict[test_list[i]] = 1\n            else:\n                reverse_dict[test_list[i]] += 1\n            i += 1\n        else:\n            i += 1\n            j += 1\n    return reverse_dict\n",
        "num_ids": 127
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dict = {}\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n    dict[test_list[i]] = count\n    for i in range(len(test_list) - 1):\n        if test_list[i]!= test_list[i + 1]:\n            dict[test_list[i]] = 0\n    return dict",
        "num_ids": 113
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Write your code here\n    n = len(test_list)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # I will use two dic to store count and value\n    dic = {}\n    # I will use a set to store the reverse strings in the dictionary\n    set_dic = set()\n    # I will iterate through the list to find the count of the count of each string\n    for i in test_list:\n        count = test_list.count(i)\n        dic[i] = count\n        set_dic.add(i)\n    # I will iterate through the list and find the value of each string\n    for i in set_dic:\n        count = dic[i]\n        dic[i] = count - 1\n    return dic\n",
        "num_ids": 160
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] not in d:\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n",
        "num_ids": 62
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        tup = tuple(item)\n        count[tup] = count.get(tup, 0) + 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    d2 = {}\n    l = []\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for key in d:\n        l.append((key,d[key]))\n    for key, value in l:\n        if value in d2:\n            d2[value] += 1\n        else:\n            d2[value] = 1\n    d3 = {}\n    for key, value in d2:\n        d3[value] = (key, d2[value])\n    return d3",
        "num_ids": 148
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 0\n        dict1[i] += 1\n    return dict1\n",
        "num_ids": 50
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {}\n    for i in list1:\n        if i not in counter:\n            counter[i] = 1\n        else:\n            counter[i] += 1\n    return counter\n",
        "num_ids": 47
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dict = {}\n    for list1_t in list1:\n        my_dict[tuple(list1_t)] = my_dict.get(tuple(list1_t),0)+1\n    return my_dict\n",
        "num_ids": 58
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for x in list1:\n        list2.append(tuple(x))\n    return list2",
        "num_ids": 32
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    list2 = []\n    for i in list1:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    for key, value in dict.items():\n        list2.append((key, value))\n    return list2\n",
        "num_ids": 76
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if list1 == []:\n        return {}\n    else:\n        count = 0\n        for index in range(len(list1)):\n            count += 1\n            if index == 0:\n                tup = (list1[index], count)\n            elif list1[index]!= list1[index - 1]:\n                tup = (list1[index], count)\n                count = 0\n        tup = (list1[index], count)\n        return tup\n",
        "num_ids": 115
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO:  Add the main function of the program to your script\n    #     Run the main function of the program\n    #     For each list in the list1, the main function must return the number of tuples for each element of list1\n    #     Return the dictionary with key tuples and the number of tuples.\n    #     Use a list comprehension\n    #     for each element in the list1:\n    #         if element is in a list:\n    #             count += 1\n    #     return count\n    #\n    #     return count.count((list1,))\n",
        "num_ids": 136
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n    except ValueError:\n        return False\n    else:\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if num.strip().endswith('.'):\n        return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for i in num:\n        if i.isdigit():\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    try:\n        int(num)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if len(num) == 0:\n        return False\n    num_list = list(map(int, num))\n    for i in range(len(num_list)):\n        if num_list[i] >= 9:\n            num_list[i] = num_list[i] - 9\n        if num_list[i] >= 0 and num_list[i] <= 9:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 117
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    split_num = num.split('.')\n    try:\n        int(split_num[1])\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 54
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return type(num) is float or type(num) is int and (num).is_integer()\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if type(num) == float:\n            return False\n        if type(num) == str:\n            if (num[0] == '-' or num[0] == '+') and len(num) >= 3:\n                if num[1:].isnumeric():\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    new_list = []\n    for i in arr:\n        if len(set(i)) == 1:\n            new_list.append(set(i))\n        else:\n            return \"Nie istnieje liczba!\"\n    return new_list\n",
        "num_ids": 64
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Write your code here\n    for x in range(len(arr)):\n        if(arr[x]!= arr[x+1]):\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count=0\n    for i in range(len(arr)):\n        if arr[i]!=arr[count]:\n            count=count+1\n    return count==1\n",
        "num_ids": 45
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = set(arr) #set is a collection which is unordered, unindexed and allows duplicate\n    return len(arr)==1\n    #return arr.issubset(set(arr))\n",
        "num_ids": 49
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    unique_set = len(set_arr)\n    return unique_set == 1\n",
        "num_ids": 32
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Your code here\n    return arr.count(arr[0])==1\n",
        "num_ids": 21
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # initialize array of duplicates\n    arr_duplicate = []\n    # initialize hash map\n    d = dict()\n    # loop through array and check if duplicate elements\n    for i in arr:\n        if i in d:\n            arr_duplicate.append(i)\n            d[i] += 1\n        else:\n            d[i] = 1\n    return len(arr_duplicate) == 0\n",
        "num_ids": 101
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    if arr==[]:\n        return None\n    else:\n        ans = True\n        for i in arr:\n            if i not in ans:\n                ans = False\n        return ans\n",
        "num_ids": 48
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) <= 2:\n        return arr\n    res = []\n    for num in arr:\n        if num in res:\n            return False\n        else:\n            res.append(num)\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return False\n    return True\n    ",
        "num_ids": 38
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1:\n        if monthnum3 == 1:\n            return False\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 2:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 3:\n        if monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 4:\n        if monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 5:\n        if monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 6:\n        if monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 7:\n        if monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 8:\n        if monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 9:\n        if monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 10:\n        if monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 11:\n        if monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return False\n    elif monthnum3 == 12:\n        return False\n",
        "num_ids": 1212
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 > 12:\n        return False\n    elif monthnum3 < 10:\n        return True\n    else:\n        return (monthnum3%10) == 0\n",
        "num_ids": 51
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    else:\n        for i in range(1,13):\n            if monthnum3 == i:\n                if monthnum3 >= 31 or monthnum3 <= 28:\n                    return True\n            else:\n                return False\n    \n    \ndef check_days_of_month(days):\n    '''\n    Write a function that checks whether the given number of days in a given month has 31 days or not.\n    '''\n    if days < 1 or days > 31:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 0<=monthnum3<13:\n        return True\n    else:\n        return False\ndef check_year(year):\n    '''\n    Write a function to check whether the given year is between 1975 and 2100 or not.\n    '''\n    if year>1975 and year<=2100:\n        return True\n    else:\n        return False\ndef check_number_from_user(user_input):\n    '''\n    Write a function that takes a user input and checks whether it's a correct format or not.\n    '''\n    if user_input.isnumeric() and len(user_input)==4:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12:\n        print(\"Error: Invalid input!\")\n        return False\n    if monthnum3 <= 0 or monthnum3 > 12:\n        print(\"Error: Invalid input!\")\n        return False\n    if monthnum3 == 1:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 2:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 31 Days\")\n        else:\n            print(\"In This Month: 30 Days\")\n    if monthnum3 == 4:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 5:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 6:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 7:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 8:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 9:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 10:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 11:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n    if monthnum3 == 12:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 12:\n            print(\"In This Month: 30 Days\")\n        else:\n            print(\"In This Month: 31 Days\")\n",
        "num_ids": 916
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    try:\n        int(monthnum3)\n    except:\n        return False\n    else:\n        if monthnum3 < 1 or monthnum3 > 12:\n            return False\n        else:\n            return True\n",
        "num_ids": 53
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 31 or monthnum3 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 > 12) or (monthnum3 < 1):\n        return False\n    else:\n        return True\n",
        "num_ids": 32
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = monthnum3\n    monthnum3 = int(monthnum3)\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    if monthnum3 == 1:\n        if monthnum3 == 1:\n            return True\n        else:\n            return False\n    else:\n        for i in range(1, monthnum3 + 1):\n            if i!= monthnum3:\n                if i == 1:\n                    return False\n                else:\n                    return True\n    return False\n",
        "num_ids": 124
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >=1 and monthnum3 <=12:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff_arr = []\n    for i in range(n):\n        diff_arr.append(abs(arr[i]-arr[i+1]))\n    min_diff = diff_arr[0]\n    for i in range(1,n-1):\n        if diff_arr[i] < min_diff:\n            min_diff = diff_arr[i]\n    return min_diff\n",
        "num_ids": 96
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return -1\n    \n    arr.sort()\n    result = arr[n-1] - arr[n-2]\n    \n    return result\n",
        "num_ids": 45
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    temp=[]\n    for i in range(n):\n        temp.append(arr[i])\n        temp.append(arr[i+1])\n    for i in range(n):\n        temp[i]=abs(arr[i]-arr[i+1])\n    return min(temp)\n    ",
        "num_ids": 73
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    left_start = 0\n    left_end = 0\n    right_start = 0\n    right_end = 0\n    \n    for i in range(n):\n        if arr[i] < arr[i-1]:\n            left_start = arr[i]\n        elif arr[i] > arr[i-1]:\n            left_end = arr[i]\n        \n        if arr[i] < arr[i+1]:\n            right_start = arr[i]\n        elif arr[i] > arr[i+1]:\n            right_end = arr[i]\n    \n    #print(left_start)\n    #print(left_end)\n    #print(right_start)\n    #print(right_end)\n    \n    if left_start > right_start:\n        return left_start\n    if right_start > left_start:\n        return right_start\n    if left_end > right_end:\n        return left_end\n    if right_end > left_end:\n        return right_end\n    if left_start > right_end:\n        return right_start\n    \n    return -1\n",
        "num_ids": 273
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    max_diff = 0\n    min_diff = float('inf')\n    min_idx = -1\n",
        "num_ids": 28
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # A function that finds the minimum difference between any two elements of an array \n    # Input : an array of integers \n    # Output : an integer\n    minimum = float(\"inf\")\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff<minimum:\n                minimum = diff\n    return minimum\n",
        "num_ids": 101
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    minimum_diff=9999999999\n    current_min_diff=9999999999\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]>arr[j]):\n                if(arr[i]-arr[j]<minimum_diff):\n                    minimum_diff=arr[i]-arr[j]\n                    current_min_diff=arr[i]\n    return current_min_diff\n",
        "num_ids": 111
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    min_diff = n\n    for i in range(n): \n        for j in range(i+1, n): \n            diff = arr[i] - arr[j] \n            if diff < min_diff: \n                min_diff = diff \n    \n    return min_diff\n",
        "num_ids": 75
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = sys.maxsize\n    for i in range(n-1):\n        min_diff = min(min_diff, abs(arr[i] - arr[i+1]))\n    return min_diff\n",
        "num_ids": 55
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i = 0\n    j = n-1\n",
        "num_ids": 14
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number_of_digits = 0\n    for char in str:\n        if char.isdigit():\n            number_of_digits += 1\n    return number_of_digits\n",
        "num_ids": 47
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for c in str:\n        if c.isdigit():\n            digit_count += 1\n    print(digit_count)\nnumber_ctr('aabccbb'",
        "num_ids": 49
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # return the count of digits in the string\n    count = 0\n    for x in str:\n        if x.isdigit():\n            count += 1\n    return count\n    \ndef rotate(str):\n    '''\n    Write a python function to rotate a given string.\n    '''\n    # return a new string\n    result = \"\"\n    for i in range(len(str)-1, -1, -1):\n        result += str[i]\n    return result\n    \ndef reverse(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    # return the reversed string\n    result = \"\"\n    for i in range(len(str)-1, -1, -1):\n        result += str[i]\n    return result\n    \ndef main():\n    # test the rotate function\n    # assert(rotate(\"ABCD\") == \"ABCD\"), \"The function rotate() should return 'ABCD'!\"\n    # assert(rotate(\"XYZ\") == \"XYZYXZ\"), \"The function rotate() should return 'XYZYXZ'!\"\n    # assert(rotate(\"ABAB\") == \"ABABAB\"), \"The function rotate() should return 'ABAB'!\"\n    # assert(rotate(\"ABBABCCDD\") == \"ABBABCCDD\"), \"The function rotate() should return 'ABBABCCDD'!\"\n    # assert(rotate(\"KLMNOPQR\") == \"KLMNOPQR\"), \"The function rotate() should return 'KLMNOPQR'!\"\n    # assert(rotate(\"ZWXYZ\") == \"ZWXYZYZZWXYZZZWXYZZ\"), \"The function rotate() should return 'ZWXYZYZWXYZZZWXYZZ'!\"\n    # assert(rotate(\"XYXWYY\") == \"XYXWYYYXWYYYXWYYYXWYYYXWYYY\"), \"The function rotate() should return 'XYXWYYYXWYYYXWYYYXWYYYXWYYY'!\"\n    # assert(rotate(\"JKLHN\") == \"JKLHNKEKLHNKEKLHNKEKLHNKEKLHNKEKL\"), \"The function rotate() should return 'JKLHNKEKLHNKEKLHNKEKLHNKEKLHNKEKL'!\"\n    # assert(rotate(\"ABABCD\") == \"ABABCDAABABCDAABCDAABCDAABCDAABCDAABCDAABCD\"), \"The function rotate() should return 'ABABCDAABABCDAABCDAABCDAABCDAABCDAABCDAABCD'!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotate(\"\") == \"\"), \"The function rotate() should return an empty string!\"\n    # assert(rotat",
        "num_ids": 1873
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    if len(str) == 1:\n        return 0\n    for c in str:\n        if c.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    d=0\n    for i in str:\n        if i=='0' or i=='1':\n            d+=1\n    return d\n    ",
        "num_ids": 38
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    n = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            continue\n        else:\n            n += 1\n    return n\n",
        "num_ids": 52
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = 0\n    for i in str:\n        if i.isdigit():\n            n += 1\n    return n\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return False\n    else:\n        return True\n",
        "num_ids": 43
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def polite(n): \n        return int(math.sqrt(n)) + 1\n    if n > 10: \n        return False\n    if n % 2 == 0: \n        return polite(n / 2) == n + 1\n    else: \n        return polite(n + 1) == n + 2\n",
        "num_ids": 77
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    print(\"*** nth polite number ***\")\n    \n    if n==0 or n==1: \n        print(\"Holy smokes, this is nth polite number.\")\n    else: \n        print(\"This is not nth polite number.\")\n",
        "num_ids": 58
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return True\n    if n==2: \n        return True if n==3 else False\n    if n==3: \n        return True if n==4 else False\n    if n==4: \n        return True if n==5 else False\n    if n==5: \n        return True if n==6 else False\n    if n==6: \n        return True if n==7 else False\n    if n==7: \n        return True if n==8 else False\n    if n==8: \n        return True if n==9 else False\n    if n==9: \n        return True if n==10 else False\n    if n==10: \n        return True if n==11 else False\n    if n==11: \n        return True if n==12 else False\n    if n==12: \n        return True if n==13 else False\n    if n==13: \n        return True if n==14 else False\n    if n==14: \n        return True if n==15 else False\n    if n==15: \n        return True if n==16 else False\n    if n==16: \n        return True if n==17 else False\n    if n==17: \n        return True if n==18 else False\n    if n==18: \n        return True if n==19 else False\n    if n==19: \n        return True if n==20 else False\n    if n==20: \n        return True if n==21 else False\n    if n==21: \n        return True if n==22 else False\n    if n==22: \n        return True if n==23 else False\n    if n==23: \n        return True if n==24 else False\n    if n==24: \n        return True if n==25 else False\n    if n==25: \n        return True if n==26 else False\n    if n==26: \n        return True if n==27 else False\n    if n==27: \n        return True if n==28 else False\n    if n==28: \n        return True if n==29 else False\n    if n==29: \n        return True if n==30 else False\n    if n==30: \n        return True if n==31 else False\n    if n==31: \n        return True if n==32 else False\n    if n==32: \n        return True if n==33 else False\n    if n==33: \n        return True if n==34 else False\n    if n==34: \n        return True if n==35 else False\n    if n==35: \n        return True if n==36 else False\n    if n==36: \n        return True if n==37 else False\n    if n==37: \n        return True if n==38 else False\n    if n==38: \n        return True if n==39 else False\n    if n==39: \n        return True if n==40 else False\n    if n==40: \n        return True if n==41 else False\n    if n==41: \n        return True if n==42 else False\n    if n==42: \n        return True if n==43 else False\n    if n==43: \n        return True if n==44 else False\n    if n==44: \n        return True if n==45 else False\n    if n==45: \n        return True if n==46 else False\n    if n==46: \n        return True if n==47 else False\n    if n==47: \n        return True if n==48 else False\n    if n==48: \n        return True if n==49 else False\n    if n==49: \n        return True if n==50 else False\n    if n==50: \n        return True if n==51 else False\n    if n==51: \n        return True if n==52 else False\n    if n==52: \n        return True if n==53 else False\n    if n==53: \n        return True if n==54 else False\n    if n==54: \n        return True if n==55 else False\n    if n==55: \n        return True if n==56 else False\n    if n==56: \n        return True if n==57 else False\n    if n==57: \n        return True if n==58 else False\n    if n==58: \n        return True if n==59 else False\n    if n==59: \n        return True if n==60 else False\n    if n==60: \n        return True if n==61 else False\n    if n==61: \n        return True if n==62 else False\n    if n==62: \n        return True if n==63 else False\n    if n==63: \n        return True if n==64 else False\n    if n==64: \n        return True if n==65 else False\n    if n==65: \n        return True if n==66 else False\n    if n==66: \n        return True if n==67 else False\n    if n==67: \n        return True if n==68 else False\n    if n==68: \n        return True if n==69 else False\n    if n==69: \n        return True if n==70 else False\n    if n==70: \n        return True if n==71 else False\n    if n==71: \n        return True if n==72 else False\n    if n==72: \n        return True if n==73 else False\n    if n==73: \n        return True if n==74 else False\n    if n==74: \n        return True if n==75 else False\n    if n==75: \n        return True if n==76 else False\n    if n==76: \n        return True if n==77 else False\n    if n==77: \n        return True if n==78 else False\n    if n==78: \n        return True if n==79 else False\n    if n==79: \n        return True if n==80 else False\n    if n==80: \n        return True if n==81 else False\n    if n==81: \n        return True if n==82 else False\n    if n==82: \n        return True if n==83 else False\n    if n==83: \n        return True if n==84 else False\n    if n==84: \n        return True if n==85 else False\n    if n==85: \n        return True if n==86 else False\n    if n==86: \n        return True if n==87 else False\n    if n==87: \n        return True if n==88 else False\n    if n==88: \n        return True if n==89 else False\n    if n==89: \n        return True if n==90 else False\n    if n==90: \n        return True if n==91 else False\n    if n==91: \n        return True if n==92 else False\n    if n==92: \n        return True if n==93 else False\n    if n==93: \n        return True if n==94 else False\n    if n==94: \n        return True if n==95 else False\n    if n==95: \n        return True if n==96 else False\n    if n==96: \n        return True if n==97 else False\n    if n==97: \n        return True if n==98 else False\n    if n==98: \n        return True if n==99 else False\n    if n==99: \n        return True if n==100 else False\n    if n==100: \n        return True if n==101 else False\n    if n==101: \n        return True if n==102 else False\n    if n==102: \n        return True if n==103 else False\n    if n==103: \n        return True if n==104 else False\n    if n==104: \n        return True if n==105 else False\n    if n==105: \n        return True if n==106 else False\n    if n==106: \n        return True if n==107 else False\n    if n==107: \n        return True if n==108 else False\n    if n==108: \n        return True if n==109 else False\n    if n==109: \n        return True if n==110 else False\n    if n==110: \n        return True if n==111 else False\n    if n==111: \n        return True if n==112 else False\n    if n==112",
        "num_ids": 1999
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n%i == 0:\n            return n//i\n    return None\n",
        "num_ids": 64
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 0\n    # if n == 0:\n    #     print(num)\n    for i in range(1, n+1):\n        num += math.factorial(n)\n        # if n == 0:\n        #     print(num)\n        # else:\n        #     num = num * i\n        #     # print(num)\n    # return num\n    return num * (n*n)\n",
        "num_ids": 101
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n % 2 == 0: \n        return n // 2 + 1\n    else: \n        return n // 2 - 1 \n         \ndef is_prime(n): \n    '''\n    Write a function that returns True if n is prime \n    or False if it is not prime.\n    '''\n    if n == 1: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2): \n        if n % i == 0: \n            return False\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    '''\n    Tip: Write a function that takes a positive integer n and returns the number of the nth polite number\n    '''\n    #hint: 1.We need to create a variable that keeps track of number of polite numbers.\n    #2.Write a function to return the value of the nth polite number.\n    #3.Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #4.Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #4.2. Write a function that takes an integer n and returns the nth polite number.\n    #4.3. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #4.4. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #5. Write a function that takes an integer n and returns the nth polite number.\n    #6. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #7. Write a function that takes an integer n and returns the nth polite number.\n    #8. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #9. Write a function that takes an integer n and returns the nth polite number.\n    #10. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #11. Write a function that takes an integer n and returns the nth polite number.\n    #12. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #13. Write a function that takes an integer n and returns the nth polite number.\n    #14. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #15. Write a function that takes an integer n and returns the nth polite number.\n    #16. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #17. Write a function that takes an integer n and returns the nth polite number.\n    #18. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #19. Write a function that takes an integer n and returns the nth polite number.\n    #20. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #21. Write a function that takes an integer n and returns the nth polite number.\n    #22. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #23. Write a function that takes an integer n and returns the nth polite number.\n    #24. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #25. Write a function that takes an integer n and returns the nth polite number.\n    #26. Write a loop that has 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50\n    #27. Write a function that takes an integer n and returns the nth polite number.\n    #28. Write a loop that has 1",
        "num_ids": 1968
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    if n == 1: \n        return False\n    a = n % 10\n    b = math.ceil(n/10)\n    return a + b == n \ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime or not. geeksforgeeks.org/is-prime/\n    '''\n    if n==0 or n==1: \n        return False\n    if n==2 or n==3: \n        return True\n    if n==4: \n        return False\n    if n%2==0: \n        return False\n    for i in range(3,int(math.sqrt(n))+1,2): \n        if n%i==0: \n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Return a list of prime factors of a number. geeksforgeeks.org/prime-factorization/\n    '''\n    if n==2: \n        return []\n    if n==1: \n        return []\n    if n==0: \n        return []\n    if n<=2: \n        return []\n    prime_factors = []\n    for i in range(3,int(math.sqrt(n))+1,2): \n        if n%i==0: \n            if not is_prime(i): \n                prime_factors.append(i)\n                if is_prime(n-i):\n                    prime_factors.append(n-i)\n    return prime_factors\ndef prime_factors_with_two(n):\n    '''\n    Return a list of prime factors of a number. geeksforgeeks.org/prime-factorization/\n    '''\n    if n==2: \n        return []\n    if n==1: \n        return []\n    if n==0: \n        return []\n    if n<=2: \n        return []\n    prime_factors = []\n    for i in range(3,int(math.sqrt(n))+1,2): \n        if n%i==0: \n            if not is_prime(i): \n                prime_factors.append(i)\n                if is_prime(n-i):\n                    prime_factors.append(n-i)\n    return prime_factors\ndef sqrt(n):\n    '''\n    Return a square root of a number. geeksforgeeks.org/square-root/\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n==2: \n        return 1\n    if n%2==0: \n        return 1\n    r = n%2\n    if not r: \n        return n**(1/2)+1\n    else: \n        return (n**0.5+1)/2\ndef mod_sqrt(n,r): \n    '''\n    Return the square root of a number. geeksforgeeks.org/mod-square-root/\n    '''\n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n==2: \n        return 1\n    if n%2==0: \n        return 1\n    r = n%2\n    if not r: \n        return (n**(r+1))/2\n    else: \n        return (n**r+1)/2\ndef odd_factors(n):\n    '''\n    Return a list of odd factors of a number. geeksforgeeks.org/odd-factors/\n    '''\n    if n==0: \n        return []\n    if n==1: \n        return []\n    if n==2: \n        return []\n    if n==3: \n        return []\n    if n==4: \n        return []\n    if n==5: \n        return []\n    if n==6: \n        return []\n    if n==7: \n        return []\n    if n==8: \n        return []\n    if n==9: \n        return []\n    if n==10: \n        return []\n    if n==11: \n        return []\n    if n==12: \n        return []\n    if n==13: \n        return []\n    if n==14: \n        return []\n    if n==15: \n        return []\n    if n==16: \n        return []\n    if n==17: \n        return []\n    if n==18: \n        return []\n    if n==19: \n        return []\n    if n==20: \n        return []\n    if n==21: \n        return []\n    if n==22: \n        return []\n    if n==23: \n        return []\n    if n==24: \n        return []\n    if n==25: \n        return []\n    if n==26: \n        return []\n    if n==27: \n        return []\n    if n==28: \n        return []\n    if n==29: \n        return []\n    if n==30: \n        return []\n    if n==31: \n        return []\n    if n==32: \n        return []\n    if n==33: \n        return []\n    if n==34: \n        return []\n    if n==35: \n        return []\n    if n==36: \n        return []\n    if n==37: \n        return []\n    if n==38: \n        return []\n    if n==39: \n        return []\n    if n==40: \n        return []\n    if n==41: \n        return []\n    if n==42: \n        return []\n    if n==43: \n        return []\n    if n==44: \n        return []\n    if n==45: \n        return []\n    if n==46: \n        return []\n    if n==47: \n        return []\n    if n==48: \n        return []\n    if n==49: \n        return []\n    if n==50: \n        return []\n    if n==51: \n        return []\n    if n==52: \n        return []\n    if n==53: \n        return []\n    if n==54: \n        return []\n    if n==55: \n        return []\n    if n==56: \n        return []\n    if n==57: \n        return []\n    if n==58: \n        return []\n    if n==59: \n        return []\n    if n==60: \n        return []\n    if n==61: \n        return []\n    if n==62: \n        return []\n    if n==63: \n        return []\n    if n==64: \n        return []\n    if n==65: \n        return []\n    if n==66: \n        return []\n    if n==67: \n        return []\n    if n==68: \n        return []\n    if n==69: \n        return []\n    if n==70: \n        return []\n    if n==71: \n        return []\n    if n==72: \n        return []\n    if n==73: \n        return []\n    if n==74: \n        return []\n    if n==75: \n        return []\n    if n==76: \n        return []\n    if n==77: \n        return []\n    if n==78: \n        return []\n    if n==79: \n        return []\n    if n==80: \n        return []\n    if n==81: \n        return []\n    if n==82: \n        return []\n    if n==83: \n        return []\n    if n==84: \n        return []\n    if n==85: \n        return []\n    if n==86: \n        return []\n    if n==87: \n        return []\n    if n==88: \n        return []\n    if n==89: \n        return []\n    if n==90: \n        return []\n    if n==91: \n        return []\n    if n==92: \n        return []\n    if n==93",
        "num_ids": 1123
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = n%10\n    if n == 1 or n == 3 or n == 5 or n == 7:\n        return s\n    if (n % 5) == 0 and (n%3) == 0:\n        return 5\n    if (n % 5) == 1 and (n%3) == 0:\n        return 3\n    if (n % 5) == 2 and (n%3) == 0:\n        return 5\n    if (n % 5) == 0 and (n%3) == 1:\n        return 3\n    if (n % 5) == 1 and (n%3) == 1:\n        return 5\n    if (n % 5) == 2 and (n%3) == 1:\n        return 3\n    if (n % 5) == 0 and (n%3) == 2:\n        return 5\n    if (n % 5) == 1 and (n%3) == 2:\n        return 3\n    if (n % 5) == 2 and (n%3) == 2:\n        return 5\n    if n == 0:\n        return 0\n    return 1\n",
        "num_ids": 254
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    output = []\n    for i in range(len(l1)):\n        output.append([l1[i], l1[i+1]])\n    return output\n",
        "num_ids": 43
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    li = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            li.append((l1[i], l1[i+1]))\n    return li\n",
        "num_ids": 60
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    # get the length of the list\n    length = len(l1)\n    \n    # create a list of empty lists\n    result = []\n    \n    # check if the list contains only 1 item\n    if length == 1:\n        return []\n    \n    # iterate through each element of the list\n    for i in range(0, length):\n        # if element is not the first element\n        if i!= 0:\n            # add the previous element to the result list\n            if l1[i-1]!= l1[i]:\n                result.append([l1[i-1], l1[i]])\n    return result\n    ",
        "num_ids": 156
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1,l1[1:]))\n",
        "num_ids": 18
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    a = []\n    for i in range(len(l1) - 1):\n        if l1[i]!= l1[i+1]:\n            a.append([l1[i], l1[i+1]])\n    return a\n",
        "num_ids": 62
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [tuple(x) for x in zip(*l1)]\n",
        "num_ids": 19
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1.sort()\n    pairs = []\n    for i in range(len(l1)-1):\n        if l1[i]!= l1[i+1]:\n            pairs.append((l1[i],l1[i+1]))\n    return pairs\n",
        "num_ids": 70
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = [item for item, count in Counter(l1).items() if count > 1]\n    return l1\n",
        "num_ids": 31
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # create empty list to be filled\n    l2 = []\n    \n    for i in l1:\n        for j in l1:\n            if i == j:\n                l2.append([i,i])\n    return l2\n",
        "num_ids": 58
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # TODO\n    l2 = []\n    for i in l1:\n        if l1.index(i) < len(l1) - 2:\n            if l1[l1.index(i)+1] > l1[l1.index(i)+2]:\n                l2.append([l1[l1.index(i)+1],l1[l1.index(i)+2]])\n            else:\n                l2.append([l1[l1.index(i)+1],l1[l1.index(i)+2]])\n        else:\n            l2.append([l1[l1.index(i)+1],l1[l1.index(i)+2]])\n",
        "num_ids": 172
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    sum = 0\n    while sum!= sum:\n        if arr[a] == arr[b] == arr[c] == arr[d]:\n            a += 1\n            sum += arr[a]\n            b += 1\n            c += 1\n            d += 1\n        elif arr[a] < arr[b] < arr[c] < arr[d]:\n            sum += arr[a]\n            a += 1\n        else:\n            sum += arr[b]\n            b += 1\n    return (a, b, c, d)\n",
        "num_ids": 150
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    total_numbers = 0\n    for num in arr:\n        if sum == num:\n            total_numbers += 1\n    return total_numbers\n",
        "num_ids": 39
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        if arr[i]!=sum:\n            count=count+1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    answer = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i]+arr[j]:\n                answer += 1\n    return answer\n",
        "num_ids": 58
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n    pass\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @param int sum\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @return an integer\n    # pass\n    # # DONE\n    # # write a python function to get the number of pairs whose sum is equal to'sum' and return the number of pairs.\n    # # @param [int[] arr] A list of numbers\n    # # @retur",
        "num_ids": 1993
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    if len(arr) < 2:\n        return 0\n",
        "num_ids": 22
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n=len(arr)\n    c=0\n    for i in range(1,n):\n        if arr[i]==arr[i-1]:\n            c+=1\n    return n-c\n",
        "num_ids": 51
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in arr:\n        if i == sum:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 71
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    pairs = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs",
        "num_ids": 68
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    '''\n    Code:\n    Given two lists, find the difference between them.\n    i.e. list1[x] - list2[x] = list1[x] - list2[x]\n    '''\n    '''\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    '''\n    # For each element in the first list\n    # Assign the list to a new list\n    # For each element in the second list\n    # Add the element's value to the new list\n    # Return the new list\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    # Runtime: 100n\n    # Space: O(n)\n    def getDiff(li1,li2):\n        # Initialize new list\n        newList = []\n        # Loop through the lists\n        for x in range(0,len(li1)):\n            # Add the element's value to the new list\n            newList.append(li1[x] - li2[x])\n        # Return new list\n        return newList\n    # Return the list\n    return getDiff(li1,li2)\n",
        "num_ids": 196
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li2[:len(li1)] - li1\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=list(set(li1).difference(set(li2)))\n    return(diff)\n",
        "num_ids": 27
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for i in li1:\n        if i not in li2:\n            res.append(i)\n        else:\n            res.append(i)\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    #defining the difference function \n    def diff(li1,li2):\n        '''\n        Function to find the difference between two lists.\n        '''\n        #concatenating the two lists\n        li1 = li1 + li2\n        #declaring the new list and setting to equal to zero\n        new_li = []\n        #loop through all the values in the lists\n        for i in li1:\n            #appending the values to the new list\n            new_li.append(i)\n        #returning the new list\n        return new_li\n    #calculating the differences\n    diff_list = diff(li1,li2)\n    #printing the differences\n    print(diff_list)\n    #returning the differences\n    return diff_list\n",
        "num_ids": 147
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    i=0\n    while i<len(li1):\n        if li1[i]!=li2[i]:\n            li3.append(li1[i])\n        i+=1\n    return li3\n",
        "num_ids": 60
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!=len(li2):\n        return None\n",
        "num_ids": 20
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1)-len(li2)\n",
        "num_ids": 15
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for x in li1:\n        if x not in li2:\n            diff.append(x)\n    return diff\n",
        "num_ids": 36
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 or n == 1 :\n        return n\n    else : \n        return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3) + odd_num_sum(n-4) + odd_num_sum(n-5)\n    \n",
        "num_ids": 81
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    a = 0\n    for i in range(0,n) :\n        a = a + (a**2)\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        print(\"Please enter a positive integer\") \n    elif n == 0 : \n        return 0 \n    elif n == 1 : \n        return 1 \n    elif n == 2 : \n        return 4 \n    elif n % 2 == 0 : \n        return n * odd_num_sum(n-1) \n    else : \n        return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3) \n",
        "num_ids": 131
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1) :\n        if i%2 == 0 :\n            sum += i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return n*n*n*n*n*n\n",
        "num_ids": 16
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    result = 0\n    for i in range(n) : \n        result += (4 ** i) * ((2 ** i) - 1) / 2\n    \n    return result \n",
        "num_ids": 47
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 1\n    else : \n        return (n * odd_num_sum(n-1)) \n",
        "num_ids": 62
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    power = 0\n    while n > 0 :\n        power += (n & 1)\n        n >>= 1\n    return power\n",
        "num_ids": 33
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n >= 0 :\n        result = n * (3*n + 1) / 2\n        return int(result)\n    else :\n        print(\"Input error! Try again.\")\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_numbers = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_of_numbers += i ** 3\n    return sum_of_numbers\n",
        "num_ids": 55
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 65
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp.count('(') == exp.count(')'):\n        return check_expression(exp.replace('()', ''))\n    else:\n        return False\ndef is_balanced(exp):\n    '''\n    Given a binary expression, check if the given expression is balanced. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    result = check_expression(exp)\n    if result == False:\n        return False\n    else:\n        stack = deque([(])\n        visited = set()\n        for c in exp:\n            if c in visited:\n                stack.append(c)\n            else:\n                if c == '(':\n                    if len(stack) > 0:\n                        stack.popleft()\n                    else:\n                        return False\n                elif c == ')':\n                    if len(stack) > 0:\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        return True\n",
        "num_ids": 147
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for x in exp:\n        if x == \"(\":\n            stack.append(\"(\")\n        elif x == \")\":\n            while stack and stack[-1]!= \"(\":\n                stack.pop()\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            return False\n    return stack == []\n",
        "num_ids": 88
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    queue = deque()\n    stack = list()\n    for el in exp:\n        if el in ('(', ')', '{', '}'):\n            stack.append(el)\n        elif el in ('[', ']', '{', '}'):\n            if not stack:\n                return False\n            if el in stack[-1]:\n                stack.pop()\n            else:\n                return False\n    return stack == []\n",
        "num_ids": 107
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    previous_opening_bracket = '('\n",
        "num_ids": 21
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = '({[{('\n    stack = deque()\n    i = 0\n    for ch in exp:\n        if ch.isdigit():\n            stack.append(ch)\n        elif ch == '}' or ch == ']' or ch == ')':\n            if stack and stack[-1] == '}':\n                stack.pop()\n            else:\n                return False\n        elif ch =='':\n            i += 1\n        else:\n            return False\n    return not stack and i == len(exp)\n",
        "num_ids": 128
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in '({[':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char!= top_char:\n                return False\n",
        "num_ids": 71
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=[]\n    char=['(','{','[','}']\n    for i in exp:\n        if i in char:\n            stack.append(i)\n        elif i==' ':\n            continue\n        else:\n            if not stack:\n                return 'NO'\n            if i==')':\n                if len(stack)==0:\n                    return 'NO'\n                stack.pop()\n            elif i=='}':\n                if len(stack)==0:\n                    return 'NO'\n                stack.pop()\n            elif i==']':\n                if len(stack)==0:\n                    return 'NO'\n                stack.pop()\n            else:\n                return 'NO'\n    if len(stack)>0:\n        return 'NO'\n    return 'YES'\n",
        "num_ids": 192
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open = []\n    close = []\n",
        "num_ids": 12
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # validating input\n    if type(exp) is not tuple:\n        raise TypeError(\"Invalid input type. Type must be a tuple.\")\n    \n    # getting parentheses\n    exp = exp[0]\n    if type(exp) is str:\n        raise TypeError(\"Expression can not be empty or string.\")\n    \n    # checking brackets\n    if len(exp) > 2 or len(exp) < 1:\n        raise ValueError(\"Invalid input. Brackets are not allowed.\")\n    \n    # checking parentheses\n    if exp[0]!= '(':\n        raise ValueError(\"Invalid input. Parentheses must be '('.\")\n    if exp[-1]!= ')':\n        raise ValueError(\"Invalid input. Parentheses must be ')'.\")\n    \n    # checking parenthesis\n    for el in exp:\n        if el in {'(', '[', '{'} or el in {'(', '{'} or el in {'(', '{'} or el in {'[', '['} or el in {'[', '['} or el in {')', ')']}\n    \n    # validating function\n    if not exp:\n        raise ValueError(\"Invalid expression. Function must not be empty or empty.\")\n    if not all(e in {'+', '-', '*', '/'} for e in exp):\n        raise ValueError(\"Invalid expression. Function must not contain any operators.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] in {'(', '{'} or exp[i] in {'(', '{'} or exp[i] in {'[', '['} or exp[i] in {')', ')'] or exp[i] in {'+', '-', '*', '/'} or exp[i] in {'('} or exp[i] in {')'} or exp[i] in {'}'} or exp[i] in {']', '}'} or exp[i] in {'+', '-', '*', '/', '(', ')', '%'} or exp[i] in {'{', '}', ')', '}'} or exp[i] in {'('} or exp[i] in {'{'} or exp[i] in {'[', '['} or exp[i] in {')'}:\n            raise ValueError(\"Invalid function. Function must not contain any brackets.\")\n        if exp[i] in {'+', '-', '*', '/'} and exp[i+1] in {'+', '-', '*', '/'}:\n            raise ValueError(\"Invalid function. Function must not contain any operators.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] in {'+', '-', '*', '/'} and exp[i+1] in {'+', '-', '*', '/'}:\n            raise ValueError(\"Invalid function. Function must not contain any operators.\")\n    \n    # validating function parenthesis\n    for i in range(len(exp)):\n        if exp[i] == ')' or exp[i] == '}' or exp[i] == ']':\n            raise ValueError(\"Invalid function. Parentheses must not be empty.\")\n    \n    # validating function parenthesis\n    for i in range(len(exp)):\n        if exp[i] == ')' or exp[i] == '}' or exp[i] == ']':\n            raise ValueError(\"Invalid function. Parentheses must not be empty.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] == '(' or exp[i] == '{' or exp[i] == '[':\n            raise ValueError(\"Invalid function. Brackets must not be empty.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] == ')' or exp[i] == '}' or exp[i] == ']':\n            raise ValueError(\"Invalid function. Brackets must not be empty.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] == '+' or exp[i] == '-' or exp[i] == '*' or exp[i] == '/' or exp[i] in {'+', '-', '*', '/'}:\n            raise ValueError(\"Invalid function. Brackets must not contain any operators.\")\n    \n    # validating function brackets\n    for i in range(len(exp)):\n        if exp[i] == '+' or exp[i] == '-' or exp[i] == '*' or exp[i] == '/' or exp[i] in {'+', '-', '*', '/'}:\n            raise ValueError(\"Invalid function. Brackets must not contain any operators.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] == '(' or exp[i] == '{' or exp[i] == '[':\n            raise ValueError(\"Invalid function. Brackets must not be empty.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] == ')':\n            raise ValueError(\"Invalid function. Brackets must not be empty.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] == '{' or exp[i] == '[':\n            raise ValueError(\"Invalid function. Brackets must not be empty.\")\n    \n    # validating function brackets\n    for i in range(1,len(exp)-1):\n        if exp[i] == ')':\n            raise ValueError(\"Invalid function. Brackets must not be empty.\")\n    \n    # validating function brackets\n    for i in range(len(exp)):\n        if exp[i] in {'+', '-', '*', '/'} or exp[i] in {'+', '-', '*', '/'}:\n            raise ValueError(\"Invalid function. Brackets must not contain any operators.\")\n    \n    # validating function brackets\n    for i in range(len(exp)):\n        if exp[i] in {'(', '{'} or exp[i] in {'[', '['} or exp[i] in {')', ')'] or exp[i] in {'+', '-', '*', '/'} or exp[i] in {'('} or exp[i] in {'{'} or exp[i] in {'[', '['} or exp[i] in {')', ')'] or exp[i] in {'/'} or exp[i] in {'/'} or exp[i] in {'('} or exp[i] in {')'} or exp[i] in {'}'} or exp[i] in {'}'} or exp[i] in {'('} or exp[i] in {')'}:\n            raise ValueError(\"Invalid function. Brackets must not contain any operators.\")\n    \n    # validating function brackets\n    for i in range(len(exp)):\n        if exp[i] in {'+', '-'} or exp[i] in {'*', '/'} or exp[i] in {'+', '-'} or exp[i] in {'('} or exp[i] in {')'} or exp[i] in {'{'} or exp[i] in {'['} or exp[i] in {'('} or exp[i] in {')'} or exp[i] in {'}'} or exp[i] in {'}'} or exp[i] in {'}'} or exp[i] in {'('} or exp[i] in {')'}:\n            raise ValueError(\"Invalid function. Brackets must not contain any operators.\")\n    \n    # validating function brackets\n    for i in range(len(exp)):\n        if exp[i] in {'+', '-', '*', '/'} or exp[i] in {'+', '-', '*', '/'} or exp[i] in {'('} or exp[i",
        "num_ids": 1976
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if not test_str:\n        return ''\n    \n    result = []\n    \n    for word in test_str.split():\n        for idx in range(0,len(word)-K+1):\n            result.append(word[idx:idx+K])\n    \n    return''.join(result)\n",
        "num_ids": 78
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_length = len(test_str)\n    \n    if str_length <= K:\n        return str(test_str)\n    \n    k_length = K/str_length\n    \n    result = []\n    for i in range(0,str_length):\n        if i%k_length==0:\n            result.append(test_str[i])\n            result.append(test_str[i+1])\n            \n    return \"\".join(result)\n",
        "num_ids": 115
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    temp_str = test_str.split()\n    ans = []\n    for word in temp_str:\n        if len(word) < K:\n            ans.append(word)\n    return ans\n",
        "num_ids": 50
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # your code here\n    return test_str.replace(test_str[:K],'')\n",
        "num_ids": 26
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    final_str = \"\"\n",
        "num_ids": 19
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    temp_list = list()\n    string = test_str.lower()\n    for i in string:\n        if len(i) == K:\n            temp_list.append(i)\n    return ''.join(temp_list)\n",
        "num_ids": 58
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K < 1:\n        raise ValueError\n    \n    def remove_word(s, word):\n        i = 0\n        for char in word:\n            i += s.count(char)\n        return i\n    \n    return [remove_word(s, word) for word in test_str.split() if len(word) == K]\n",
        "num_ids": 84
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    import re\n    list1 = re.split(' ', test_str)\n    for i in list1:\n        while len(i) < K:\n            i ='' + i +''\n        list1.remove(i)\n    return''.join(list1)\n",
        "num_ids": 65
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_string = ''\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            new_string += test_str[i]\n    return new_string\n    \ndef is_valid_word(word, hand):\n    \"\"\"\n    Returns True if word is in the set of word lists, and False otherwise.\n    \"\"\"\n    if word in hand:\n        return True\n    else:\n        return False\n    \ndef update_hand(word,hand):\n    \"\"\"\n    Does not assume that hand contains every word in wordlist - \n    includes words that don't match the letter B wordlist\n    \"\"\"\n    for i in word:\n        if i not in hand:\n            return False\n    return True\n    \ndef calculate_handlen(hand):\n    \"\"\" \n    Returns the length (number of letters) in the word given as input.\n    \"\"\"\n    hand_len = 0\n    for i in range(len(hand)):\n        hand_len += len(hand[i])\n    return hand_len\n",
        "num_ids": 253
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    removed = ''\n    for i in test_str:\n        if len(i) == K:\n            removed = removed + i\n    return removed\n",
        "num_ids": 51
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern, text):\n        sub_start = re.search(pattern, text).start()\n        sub_end = re.search(pattern, text).end()\n        return (sub_start,sub_end)\n",
        "num_ids": 57
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return re.findall(pattern,text,flags=re.I)\n    \nprint(occurance_substring('Geeks for Geeks','[a-z]?'))\nprint(occurance_substring('geeksforgeeks','[a-z]?'))\nprint(occurance_substring('geeks','a[ae]'))\nprint(occurance_substring('geeks',''))\n",
        "num_ids": 96
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    text = re.sub(pattern, \"\", text)\n    i = 0\n    while(True):\n        if pattern.search(text[i:i+len(pattern)]) == None:\n            break\n        i += len(pattern)\n    if pattern.search(text) == None:\n        print(\"{} at {}\".format(text,i))\n        return None\n    else:\n        print(\"{} at {}\".format(text[i:i+len(pattern)], i))\n        return i\n",
        "num_ids": 133
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match == None:\n        return None\n    else:\n        return match.start()+match.end()\n",
        "num_ids": 41
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.search(pattern,text):\n        return 1\n    else:\n        return None\n",
        "num_ids": 25
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern:\n        return None\n    regex = re.compile(pattern)\n    pos=0\n    len_text=len(text)\n    for i in range(len_text):\n        if regex.search(text[i:i+len_text]):\n            pos=i\n            break\n    return pos\n",
        "num_ids": 80
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occurrence_array = []\n    substring_array = []\n    pattern_array = []\n    pattern_array.append(pattern)\n    pattern_array.append(pattern[::-1])\n    print(pattern_array)\n    for i in range(len(pattern_array)-1):\n        for j in range(i,len(pattern_array)):\n            print(pattern_array[i:j+1])\n            if pattern_array[i:j+1] == pattern:\n                occurrence_array.append(i)\n                occurrence_array.append(j)\n    print(occurrence_array)\n    print(occurrence_array[0])\n    print(occurrence_array[-1])\n    return occurrence_array\n",
        "num_ids": 178
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if len(matches)>0:\n        return matches\n    else:\n        return None\ndef find_pattern(text,pattern):\n    '''\n    Write a function to find the pattern and it's occurrence of substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if len(matches)>0:\n        return matches\n    else:\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #if pattern is empty string return the matching string itself\n    if pattern == '':\n        return text\n    #if pattern is not empty string find all occurence of the pattern in text\n    #if pattern is not empty string return None\n    if pattern == '' or pattern =='':\n        return None\n    #if pattern is empty string, return the whole text\n    if pattern == '':\n        return text\n",
        "num_ids": 95
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # The pattern is a regular expression\n    # The regular expression contains a group of the form (a, b, c) where a and b and c are non-negative integers.\n    # The first group contains the start character, the second group contains the end character.\n    # The substrings of the pattern can be concatenated together.\n    # If a substring is present, it must be a substring of the original string.\n",
        "num_ids": 98
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    even = True\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 == 0:\n            even = False\n            break\n        i = i + 1\n    return even\n",
        "num_ids": 56
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return True if 0 not in nums and len(nums) % 2!= 0 else False\n",
        "num_ids": 25
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    even = []\n    odd = []\n    for index, num in enumerate(nums):\n        if index % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return odd, even\n",
        "num_ids": 60
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 1:\n            odd_indices.append(i)\n    return odd_indices\n",
        "num_ids": 56
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return True if(len(nums)%2==1) else False\n",
        "num_ids": 20
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums=[]\n    for i in nums:\n        if i%2!=0:\n            odd_nums.append(i)\n    return odd_nums\nprint(odd_position([1, 2, 3, 4, 5]))\n",
        "num_ids": 64
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return len([i for i in range(len(nums)) if not i & 1]) % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return any(nums[i%2] % 2 == 0 for i in range(len(nums)))\n",
        "num_ids": 28
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums)==0:\n        return False\n    elif len(nums)==1:\n        return True\n    else:\n        if nums[0]%2==1:\n            return False\n        else:\n            return True\n",
        "num_ids": 62
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)-1, 0, -2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    vowels = 0\n    for ch in test_str:\n        if 'a' <= ch <= 'z':\n            vowels += 1\n        elif 'A' <= ch <= 'Z':\n            vowels += 1\n        else:\n            pass\n    return vowels\n",
        "num_ids": 81
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    test_str = test_str.lower()\n    count = 0\n    for i in test_str:\n        for j in range(0,len(vowels)):\n            if i == vowels[j]:\n                count += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            vowels_count += 1\n    return vowels_count\n    \ndef main():\n    '''\n    Test your function. You can use your test string to validate your solution.\n    '''\n    print(\"How many vowels are in your test string?\")\n    # Test your function here\n    print(count_vowels(\"The quick brown fox jumps over the lazy dog.\"))\n",
        "num_ids": 45
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a','e','i','o','u']\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += 1\n    \n    return count\n",
        "num_ids": 54
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            if char in vowels:\n                count += 1\n    return count\n    ",
        "num_ids": 53
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # this creates a map of a dictionary\n    vowels = {\n        'a': '1',\n        'e': '1',\n        'i': '1',\n        'o': '1',\n        'u': '1'\n    }\n    # counts the number of vowels\n    vowels_count = 0\n    for letter in test_str:\n        if letter in vowels:\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 113
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    char_count = {}\n    vowels_in_str = ''\n    for c in test_str:\n        if c.lower() in vowels:\n            vowels_in_str += c\n    # print(vowels_in_str)\n    for char in vowels_in_str:\n        char_count[char] = test_str.count(char)\n    \n    print(char_count)\n",
        "num_ids": 114
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Implement the function\n    def count_vowels(test_str):\n        vowels = set('aeiouAEIOU')\n        vowels_count = 0\n        for char in test_str:\n            if char in vowels:\n                vowels_count += 1\n        return vowels_count\n",
        "num_ids": 78
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Let us create a dictionary\n    # {4: \"greater\", 5: \"greater\", 6: \"greater\", 7: \"greater\", 8: \"greater\"}\n    # Given an array of non-negative integers, write a function that returns the sum of the values in the array.\n",
        "num_ids": 70
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for i in arr: \n        if i == i: \n            continue\n        else: \n            s += i \n    return s \nprint(find_sum([1, 2, 3, 4, 4, 5]))",
        "num_ids": 61
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i]:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "num_ids": 11
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if (i not in arr):\n            sum = sum + i\n    return sum\n",
        "num_ids": 34
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Your code here\n    pass\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if (arr.count(i)==1):\n            sum+=i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # if a list is empty then return 0 \n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_ = 0\n    for i in arr:\n        if i!= '.' and i!= '-':\n            sum_ += int(i)\n    return sum_\n    \ndef check_sum(arr,t):\n    '''\n    Write a python function to check whether a given list contains sum of the first n elements in given list.\n    '''\n    sum = find_sum(arr)\n    if sum!= t:\n        print(\"not match\")\n        return\n    if len(arr) > 0:\n        i = 0\n        while i < len(arr):\n            if arr[i] == '.' or arr[i] == '-':\n                i += 1\n            else:\n                break\n        sum = find_sum(arr[:i])\n    return sum\n",
        "num_ids": 102
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    new_list_2 = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n            new_list_2.append(list1.count(i))\n    return new_list, new_list_2\n",
        "num_ids": 75
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for element in list1:\n        if element not in list2:\n            list2.append(element)\n    return list2\n",
        "num_ids": 39
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_lists = groupby(list1, key=len) # groups list elements by length\n    \n    # create a new list to store duplicates\n    new_list = []\n    \n    # iterate over the group\n    for group in grouped_lists:\n        # check if the current group contains a duplicate element\n        if len(list(group)) > 1:\n            # group by length and create a new list for each duplicate\n            for sub_list in zip(*group):\n                new_list.append(list(sub_list))\n    \n    # return list\n    return new_list\n",
        "num_ids": 140
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    a = []\n    for i in range(len(list1)):\n        if list1[i]!= list1[i-1] and list1[i]!= list1[i-2]:\n            a.append([list1[i], list1[i-1]])\n    return a\n",
        "num_ids": 77
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def dups(l):\n        \"\"\"\n        compute the dups in a list\n        \"\"\"\n        dups = set()\n        for i in l:\n            if i not in dups:\n                dups.add(i)\n                yield i\n        return dups\n",
        "num_ids": 68
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    if len(list1) == 1:\n        return [list1]\n    \n    if len(list1) == 2:\n        return [[list1[0]], [list1[0]], [list1[0]]]\n    \n    if len(list1) == 3:\n        return [\n            [list1[0]], [list1[0]], [list1[1]], [list1[0]], [list1[1]], [list1[2]],\n            [list1[0]], [list1[1]], [list1[2]]\n        ]\n    \n    if len(list1) == 4:\n        return [\n            [list1[0]], [list1[0]], [list1[1]], [list1[0]], [list1[1]], [list1[2]],\n            [list1[3]], [list1[0]], [list1[1]], [list1[2]]\n        ]\n    \n    \ndef get_possib_combinations(a, b, n):\n    '''\n    Write a function to get all possible combinations of n elements of n elements from a.\n    '''\n    \n    result = []\n    \n    if n == 1:\n        if a == b:\n            result = [a]\n        elif a == 1:\n            result = [a, 1]\n        elif a == 2:\n            result = [a, 2]\n        else:\n            result = []\n        \n    elif n == 2:\n        if a == b:\n            result = [a, a]\n        elif a == 1:\n            result = [a, 1]\n        elif a == 2:\n            result = [a, 2]\n        else:\n            result = []\n        \n    elif n == 3:\n        if a == b:\n            result = [a, a, 1]\n        elif a == 1:\n            result = [a, 1, 1]\n        elif a == 2:\n            result = [a, 2]\n        else:\n            result = []\n    \n    elif n == 4:\n        if a == b:\n            result = [a, 1, 2, 1]\n        elif a == 1:\n            result = [a, 1, 1, 2]\n        elif a == 2:\n            result = [a, 2]\n        else:\n            result = []\n        \n    else:\n        if a == b:\n            result = []\n        elif a == 1:\n            result = [1, 1]\n        elif a == 2:\n            result = [2, 2]\n        else:\n            result = []\n            \n    if len(result) == 0:\n        return result\n    elif len(result) == 1:\n        return [result[0]]\n    elif len(result) == 2:\n        return [result[0], result[1]]\n    else:\n        possibs = []\n        for i in range(n):\n            for j in range(i+1, n):\n                combination = [result[i], result[j]]\n                possibs.append(combination)\n        return possibs\n",
        "num_ids": 479
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    output = []\n    list1_sorted = sorted(list1)\n    \n    for i in range(len(list1)):\n        if i!= len(list1)-1:\n            if list1[i] == list1[i+1] and list1[i]!= list1[i+1]:\n                list1[i+1] = list1[i]\n                list1[i] = list1[i+1]\n                list1[i+1] = list1[i]\n                output.append(list1)\n        elif list1[i] == list1[i+1] and list1[i]!= list1[i+1]:\n            list1[i] = list1[i+1]\n            output.append(list1)\n        else:\n            output.append(list1)\n    return output\n",
        "num_ids": 206
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack_count = 0\n    grouped_lists = groupby(list1, key=lambda x: x)\n    for group in grouped_lists:\n        counts = {}\n        for _, group_elements in group:\n            for element in group_elements:\n                if element not in counts:\n                    counts[element] = 0\n                counts[element] += 1\n        for element in sorted(counts, key=counts.get, reverse=True):\n            if counts[element] == 1:\n                pack_count += 1\n                for _, group_elements in group:\n                    if element in group_elements:\n                        group_elements.remove(element)\n                        group_elements.append(element)\n    return pack_count\n",
        "num_ids": 180
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # list1 is a list\n    if len(list1) <= 2:\n        return list1\n    else:\n        list1_sorted = sorted(list1)\n        n = len(list1_sorted)\n        i = 0\n        j = 1\n        m = 1\n        while m <= n-2:\n            if list1_sorted[m+1] == list1_sorted[m] and list1_sorted[m]!= list1_sorted[m+1]:\n                # if the second element is not the second last element, append it to sublist\n                if j < n-1:\n                    list1.append(list1_sorted[j])\n                    list1.append(list1_sorted[m])\n                    m += 1\n                    j += 1\n                # otherwise, append the last element of the sublist\n                else:\n                    list1.append(list1_sorted[j])\n                    j += 1\n            else:\n                m += 1\n        return list1\n",
        "num_ids": 241
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [frozenset(g) for k, g in groupby(list1)]\n",
        "num_ids": 24
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Use a dictionary to store the unique values within the tuple\n    #initialize an empty dictionary\n    unique_dict = {}\n",
        "num_ids": 31
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    a=[]\n    d={}\n    for i in range(len(list1)):\n        a.append(list1[i])\n        a.append(tuple(a))\n        d[tuple(a)]=d.get(tuple(a),0)+1\n    return d\n",
        "num_ids": 73
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if list1 == []:\n        return {}\n    d = {}\n    if list1[0] not in d.keys():\n        d[list1[0]] = 1\n    for i in range(1,len(list1)):\n        d[list1[i]] += 1\n        if list1[i] not in d.keys():\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n    \nprint(unique_sublists([1,1,1])",
        "num_ids": 129
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n",
        "num_ids": 49
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        tuple = list1[i]\n        if tuple not in dict1:\n            dict1[tuple] = 0\n        dict1[tuple] = dict1[tuple] + 1\n    return dict1\n",
        "num_ids": 72
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # FIRST: CREATE A DICTIONARY FOR THE LIST OF VARIATIONS.\n    # THIS IS WHAT IT GOES IN THE PROGRAM\n    # LISTS_DICTIONARY = {}\n    # # GOES THROUGH THE LIST OF VARIATIONS\n    # for element in list1:\n    #     # GOES THROUGH THE VARIATIONS IN THE LIST OF VARIATIONS\n    #     for element2 in element:\n    #         # IF THIS TUPLE IS FOUND, THEN APPEND THE NUMBER OF THE VARIATION TO LISTS_DICTIONARY\n    #         if element2 in LISTS_DICTIONARY:\n    #             LISTS_DICTIONARY[element2] += 1\n    #         else:\n    #             LISTS_DICTIONARY[element2] = 1\n    #     # GOES TO THE NEXT VARIATION\n    #     element2 = element\n    # # GOES TO THE LAST VARIATION\n    # element2 = element\n    # LISTS_DICTIONARY_LIST = list(LISTS_DICTIONARY.values())\n    # # THAT NOW WE JUST GET THE INDEX OF THE VALUES IN LISTS_DICTIONARY_LIST\n    # # YOU CAN NOW SUM THEM TO THE NUMBER OF VARIABLES IN THIS LIST\n    # # (UNIT)\n    # LISTS_DICTIONARY_LIST = [value for value in LISTS_DICTIONARY_LIST for key, value in LISTS_DICTIONARY.items()]\n    # LISTS_DICTIONARY_LIST = list(LISTS_DICTIONARY_LIST)\n    # LISTS_DICTIONARY_LIST.sort()\n    # # SORTED THE DICTIONARY\n    # LISTS_DICTIONARY_LIST = dict(sorted(LISTS_DICTIONARY_LIST.items(), key = lambda item : item[1]))\n",
        "num_ids": 460
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for each in list1:\n        if each in count_dict.keys():\n            count_dict[each] += 1\n        else:\n            count_dict[each] = 1\n    return count_dict\n",
        "num_ids": 58
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary\n    d = {}\n    # build a list of tuples\n    l = []\n    # traverse through the list\n    for i in list1:\n        # append each element to the list\n        l.append(i)\n    # traverse through the list\n    for i in range(len(l)):\n        # check if the tuple has already been seen\n        if l[i] not in d.keys():\n            d[l[i]] = 1\n        else:\n            d[l[i]] += 1\n    # return the dictionary\n    return d\n",
        "num_ids": 136
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n    counter = {tuple(l): 0 for l in list1}\n    for e in list1:\n        counter[tuple(e)] += 1\n    return counter\n",
        "num_ids": 48
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # check is the length of list1 is the same\n    if len(list1) < 2:\n        return {}\n",
        "num_ids": 32
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.append(test_list[i] + test_list[j])\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    answer = []\n    for x in test_list:\n        for y in combinations(x, 2):\n            answer.append(y)\n    return answer\n",
        "num_ids": 39
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #use itertools package and nested loop\n    tup_list = tuple(test_list)\n    comb_list = list(combinations(tup_list, 2))\n    return comb_list\n",
        "num_ids": 50
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list=test_list[1]\n    for i in test_list:\n        for j in range(len(test_list)):\n            if i+j in test_list:\n                test_list.append(i+j)\n    return test_list\n",
        "num_ids": 66
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #Define function to find all combinations of a number \n    def combination(n, r):\n        # create an array to store combinations\n        comb_arr = []\n        # if n is even\n        if (n % 2 == 0):\n            # for every number in range of [0, r)\n            for i in range(0, r, 2):\n                # append all combinations from 0 to n\n                comb_arr.append([i,i+1])\n        # if n is odd\n        else:\n            # for every number in range of [0, r)\n            for i in range(0, r, 2):\n                # append all combinations from 0 to n\n                comb_arr.append([i,i+1])\n            # append last one (r - 1) to all combinations\n            comb_arr.append([r-1,r])\n        return comb_arr\n    \n    # Create the resulting combination list\n    result = []\n    # Append the test list to the result list\n    result.append(test_list)\n    # Create an array of numbers to store the combinations\n    arr = [x for x in range(1, len(test_list)+1)]\n    # Iterate through all possible combinations\n    for i in range(len(test_list)):\n        # Iterate through all possible combinations\n        for combination in combination(arr[i], len(test_list)):\n            # Append all the combinations to result\n            result.append(combination)\n    # Return the resulting list\n    return result\n",
        "num_ids": 355
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_tuples = []\n    for i in test_list:\n        for j in combinations(i, 2):\n            comb_tuples.append(j)\n    return comb_tuples\n",
        "num_ids": 48
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, len(test_list)))\n",
        "num_ids": 20
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return ()\n    else:\n        temp = test_list.copy()\n        test_list.remove(0)\n        temp_sums = tuple(test_list)\n        return (tuple(combinations(temp, i)) for i in range(len(test_list)+1))\n",
        "num_ids": 82
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations_list.append(test_list[i]+test_list[j])\n    return combinations_list\n",
        "num_ids": 81
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    print(\"Combinations of sums: \")\n    \n    def get_combinations(lst, m):\n        if len(lst) == m:\n            print(lst)\n            return \n        for i in range(len(lst)):\n            get_combinations(lst[i+1:], m-1)\n    \n    if len(test_list) > len(set(test_list)):\n        return \"No combination exists\"\n        \n    get_combinations(test_list, len(test_list))\n        \ndef find_combinations_2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    print(\"Combinations of sums: \")\n    \n    def get_combinations(lst, m):\n        if len(lst) == m:\n            print(lst)\n            return \n        for i in range(len(lst)):\n            for j in combinations(lst, i):\n                get_combinations(j, m-1)\n    \n    if len(test_list) > len(set(test_list)):\n        return \"No combination exists\"\n        \n    get_combinations(test_list, len(test_list))\n",
        "num_ids": 136
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 1\n    while i*i <= n :\n        if n % i == 0 :\n            divisors.append(i)\n            divisors.append(n//i)\n        i += 1\n    return divisors\ndef reverse_mult(n) : \n    '''\n    Write a python function to reverse the given integer.\n    '''\n    rev = n\n    while rev > 0 : \n        temp = rev % 10 \n        rev = rev // 10 \n        rev = rev // 10 * 10\n        temp = temp*10 + temp \n    return temp\ndef find_next_even_divisors(n) : \n    '''\n    Find next even numbers divisors of the given integer.\n    '''\n    next_divisors = []\n    i = 2\n    while i*i <= n :\n        if n % i == 0 :\n            next_divisors.append(i)\n            if i < math.sqrt(n) and i * i!= n : \n                next_divisors.append(i * i)\n        i += 1\n    return next_divisors\ndef simple_iterative_solver(n):\n    '''\n    This simple iterative solution is O(n).\n    '''\n    if n < 1:\n        return 0\n    i = 2\n    n = 1\n    while n < int(math.sqrt(n)):\n        n += 1\n        i += 1\n    return i\ndef divisors(n): \n    '''\n    This function counts the divisors of the given integer. \n    '''\n    divisors = count_divisors(n)\n    print(divisors)\ndef reverse_mult(n): \n    '''\n    This function reverses the given integer.\n    '''\n    rev = reverse_mult(n)\n    print(rev)\ndef next_even_divisors(n):\n    '''\n    This function finds the next even numbers divisors of the given integer. \n    '''\n    divisors = find_next_even_divisors(n)\n    print(divisors)\ndef factorial(n) : \n    '''\n    This function returns the factorial of the given integer.\n    '''\n    result = 1\n    for i in range(1,n+1) : \n        result *= i\n    return result \ndef is_prime(n) : \n    '''\n    This function returns whether the given integer is a prime number or not.\n    '''\n    for i in range(2,n//2 + 1) : \n        if n % i == 0 : \n            return False\n    return True\ndef is_prime_2(n) : \n    '''\n    This function returns whether the given integer is prime or not.\n    '''\n    for i in range(2,n//2+1) : \n        if n%i == 0 : \n            return False\n    return True \ndef prime_factors(n) : \n    '''\n    This function returns the prime factors of the given integer.\n    '''\n    factors = []\n    for i in range(1,int(math.sqrt(n))+1) : \n        if is_prime(i) : \n            factors.append(i)\n    return factors\ndef divisible_by_two(n) : \n    '''\n    This function checks whether the given integer is divisible by 2.\n    '''\n    divisors = count_divisors(n)\n    if len(divisors) == 2 : \n        for divisor in divisors : \n            if (divisor*2) % n == 0 : \n                return True\n    return False\ndef is_an_integer_primality_root(n) : \n    '''\n    This function checks whether the given integer is a primitive root.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef prime_factors_2(n) : \n    '''\n    This function returns the prime factors of the given integer.\n    '''\n    factors = []\n    for i in range(1,int(math.sqrt(n))+1) : \n        if is_an_integer_primality_root(i) : \n            factors.append(i)\n    return factors\ndef prime_factors_3(n) : \n    '''\n    This function returns the prime factors of the given integer.\n    '''\n    factors = []\n    for i in range(1,int(math.sqrt(n))+1) : \n        for j in range(2,i) : \n            if n%j == 0 : \n                break\n        else : \n            factors.append(i)\n    return factors\ndef is_prime_3(n) : \n    '''\n    This function checks whether the given integer is a prime number or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef prime_factors_4(n) : \n    '''\n    This function returns the prime factors of the given integer.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1) : \n        if is_prime_3(i) : \n            factors.append(i)\n    return factors\ndef is_prime_4(n) : \n    '''\n    This function checks whether the given integer is a prime number or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef prime_factors_5(n) : \n    '''\n    This function returns the prime factors of the given integer.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1) : \n        if is_prime_4(i) : \n            factors.append(i)\n    return factors\ndef is_prime_5(n) : \n    '''\n    This function checks whether the given integer is a prime number or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef prime_factors_6(n) : \n    '''\n    This function returns the prime factors of the given integer.\n    '''\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            for j in range(2,i) : \n                if i%j == 0 : \n                    break\n            else : \n                factors.append(i)\n    return factors\ndef is_prime_6(n) : \n    '''\n    This function checks whether the given integer is a prime number or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            for j in range(2,i) : \n                if i%j == 0 : \n                    break\n            else : \n                return False\n    return True\ndef is_prime_7(n) : \n    '''\n    This function checks whether the given integer is a prime number or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef is_prime_8(n) : \n    '''\n    This function checks whether the given integer is a prime number or not.\n    '''\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            return False\n    return True\ndef is_prime_",
        "num_ids": 48
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i=2\n    while i*i<=n :\n        if n % i == 0 :\n            return False\n        i += 2\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    if n % 2 == 0 : \n        return (n / 2)\n    else: \n        return (n * 3)\n",
        "num_ids": 35
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0 \n    for i in range(1, n+1) : \n        if n % i == 0 : \n            count_divisors += 1\n    if count_divisors % 2 == 0 : \n        return \"divisible by 2\"\n    else : \n        return \"not divisible by 2\"\nprint(count_divisors(10))\n",
        "num_ids": 95
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : return False\n    if n == 2 : return True\n",
        "num_ids": 20
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if n / i == i:\n                count -= 1\n                if count < 0 :\n                    return False\n            if count < 2:\n                return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    divisors = 0\n    for n in range(1,int(math.sqrt(n) + 1)) : \n        if n % 2 == 0 : \n            divisors += 1\n    return divisors\n",
        "num_ids": 57
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #'https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php'\n    divisors = []\n    i = 1\n    while i < n :\n        if n % i == 0:\n            divisors.append(i)\n        i = i + 1\n    if len(divisors) == 2 :\n        return 'even'\n    else :\n        return 'odd'\n",
        "num_ids": 110
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for x in range(len(arr)):\n        if x % 2 == 0:\n            sum += arr[x]\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 26
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    odd_len = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 1):\n            odd_len += 1\n        if(odd_len == 2):\n            odd_sum += arr[i]\n        if(odd_len == 3):\n            odd_sum += arr[i]\n        if(odd_len == 4):\n            odd_sum += arr[i]\n    return odd_sum\n",
        "num_ids": 114
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) <= 1:\n        return 0\n    mid = len(arr) // 2\n    s = 0\n    for i in range(mid,len(arr)):\n        s += arr[i]\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    if n%2!= 0:\n        return 0\n    i = 0\n    j = 0\n    while j < n:\n        if arr[j]%2 == 1:\n            sum = sum + arr[i]\n            i += 1\n        j += 1\n    return sum\n        \ndef even_length_sum(arr):\n    '''\n    Write a python function to find the sum of all even length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    if n%2!= 0:\n        return 0\n    i = 0\n    j = 0\n    while j < n:\n        if arr[j]%2 == 0:\n            sum = sum + arr[i]\n            i += 1\n        j += 1\n    return sum\n",
        "num_ids": 82
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    #  print(sum)\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    # print(sum)\n    return sum",
        "num_ids": 59
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            sum = sum + arr[i]\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)==1:\n        return arr[0]\n",
        "num_ids": 19
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sums = []\n    odd_length = []\n    for i in range(0, len(arr)):\n        if arr[i] % 2!= 0:\n            odd_sums.append(arr[i])\n",
        "num_ids": 57
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # store the input values in an array\n    r, g, b = map(int, [r, g, b])\n    # define the colorspace\n    hsv_colorspace = [[r, g, b], [0, 0, 0]]\n    # convert the color_space to hsv\n    hsv = colorsys.rgb_to_hsv(r, g, b)\n    # assign the color_space to a list\n    hsv_colorspace = [[hsv[0], hsv[1], hsv[2]], [0, 0, 0]]\n    # convert the color_space to hsv\n    hsv = colorsys.hsv_to_rgb(hsv[0], hsv[1], hsv[2])\n    # convert the color_space to RGB\n    r, g, b = colorsys.hsv_to_rgb(hsv[0], hsv[1], hsv[2])\n    return [r, g, b]\n",
        "num_ids": 234
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = max(r, g, b)\n    min_r = min(r, g, b)\n    max_r = max_r - min_r\n    value = (max_r/255)/(max_r+min_r+1)\n    if value < 0.0:\n        value = 0.0\n    if value > 1.0:\n        value = 1.0\n    h = max_r\n    s = value\n    v = value\n    \n    return h,s,v\n",
        "num_ids": 124
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    x1 = 0.003922*r + 0.60196*g + 0.16881*b\n    x2 = 0.003636*r - 0.12012*g + 0.id931*b\n    x3 = 0.002892*r - 0.43952*g - 0.67272*b\n    x4 = 0.002436*r - 0.18184*g - 0.50588*b\n    x = (1-x1-x2-x3-x4) * 1.0\n    y = (x1 * x) * 1.0\n    z = x * x * 1.0\n    hsv = np.array((x, y, z))\n    hue = np.array((np.average(hsv[0]), np.average(hsv[1]), np.average(hsv[2])))\n    delta_h = hsv[0] - hue[0]\n    delta_s = hsv[1] - hue[1]\n    delta_v = hsv[2] - hue[2]\n    if delta_h < 0:\n        delta_h = 360 + delta_h\n    if delta_s < 0:\n        delta_s = 360 + delta_s\n    if delta_v < 0:\n        delta_v = 360 + delta_v\n    delta = np.arctan2(delta_v, delta_h)\n    if delta < 0:\n        delta += 360\n    if delta > 360:\n        delta -= 360\n    hue = np.clip(hue, 0, 360)\n    return hsv_to_rgb(hue, delta, x)\n",
        "num_ids": 430
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert RGB to hsv\n    r, g, b = int(r), int(g), int(b)\n    h, s, v = 0.0, 0.0, 0.0\n    #\n    if r > g:\n        # if red < green\n        if r < g:\n            # blue is 0, so divide by 255.0\n            h = (g - r) / 255.0\n            # blue = 255 - green\n            v = 255 - h\n        else:\n            # green is 0, so divide by 255.0\n            h = (r - g) / 255.0\n            # blue = green\n            v = 255 - h\n    elif g > r:\n        # green is 0, so divide by 255.0\n        h = (r - g) / 255.0\n        # blue = 255 - red\n        v = 255 - h\n    else:\n        # red is 0, so divide by 255.0\n        h = (g - r) / 255.0\n        # blue = 0 - green\n        v = 255 - h\n    #\n    if b > g:\n        # if blue < green\n        if b < g:\n            # blue is 0, so divide by 255.0\n            h = (b - g) / 255.0\n            # green is 0, so divide by 255.0\n            v = 255 - h\n        else:\n            # green is 0, so divide by 255.0\n            h = (b - g) / 255.0\n            # blue is 0, so divide by 255.0\n            v = 255 - h\n    elif b < r:\n        # blue is 0, so divide by 255.0\n        h = (b - g) / 255.0\n        # green is 0, so divide by 255.0\n        v = 255 - h\n    else:\n        # red is 0, so divide by 255.0\n        h = (b - g) / 255.0\n        # green is 0, so divide by 255.0\n        v = 255 - h\n    #\n    h += 0.055\n    #\n    r = (h / 2.4)\n    g = (h / 2.4)\n    b = (h / 2.4)\n    #\n    if v < 0.0:\n        v = 0.0\n        h = 0.0\n    #\n    if v > 1.0:\n        v = 1.0\n        h = 0.0\n    #\n    if h > 1.0:\n        h = 1.0\n        v = 0.0\n    #\n    if h < 0.0:\n        h = 0.0\n        v = 0.0\n    #\n    return [r, g, b, v]\n",
        "num_ids": 640
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    from math import log, atan2, cos, sin, sqrt\n    from numpy import array, uint8\n    #print(r,g,b)\n    max_v = max(r, g, b)\n    #print(max_v)\n    min_v = min(r, g, b)\n    #print(min_v)\n    #print(max_v)\n    if max_v < 1:\n        max_v = 1\n    if min_v < 1:\n        min_v = 1\n    #print(max_v, min_v)\n    numerator = max_v - min_v\n    #print(numerator)\n    denominator = max_v - 1 - min_v\n    #print(denominator)\n    v = numerator / denominator\n    #print(v)\n    h = (1.0 - v) * 360\n    #print(h)\n",
        "num_ids": 222
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = int(r / 255. * 360)\n    s = int(g / 255. * 100)\n    v = int(b / 255. * 100)\n    if v == 0:\n        v = 100\n    if v == 100:\n        v = 255\n    if v == 100:\n        v = 255\n    if v > 255:\n        v = 255\n    if v < 0:\n        v = 0\n    if h > 255:\n        h = 255\n    if h < 0:\n        h = 0\n    if h > 100:\n        h = 100\n    if h < 0:\n        h = 0\n",
        "num_ids": 149
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #convert to integer\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    #print (r, g, b)\n    #print (type(r))\n    #print (type(g))\n    #print (type(b))\n",
        "num_ids": 71
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = max(r, g, b)\n    m = max(0, min(255, c))\n    d = min(255, c)\n    if c < 0:\n        c = 0\n    if c == 0:\n        h = 0\n        s = d\n        v = d\n    else:\n        delta = c * 6.0 / 255\n        h = delta - (d/c)\n        if h < 0:\n            h = 0\n        if h > 360:\n            h = 360\n        s = delta + (d/c)\n        if s < 0:\n            s = 0\n        v = delta + (d/c)\n",
        "num_ids": 157
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    if r == g == b:\n        return r, g, b\n    elif r < 0.5:\n        h = 60*((r+0.5)/0.5)\n        s = 0\n        v = 0\n    elif r < 0.75:\n        h = 60*((g+0.5)/0.5)\n        s = 60\n        v = 0\n    elif r < 1.0:\n        h = 60*((b+0.5)/0.5)\n        s = 60*((r-0.5)/0.5)\n        v = 0\n    else:\n        h = 60*((g-0.5)/0.5)\n        s = 60*((r-0.5)/0.5)\n        v = 60\n    if v == 0:\n        return h, 0, 0\n    else:\n        return h, s, v\n",
        "num_ids": 233
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # your code goes here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    for i in list1:\n        if i % 2 == 0:\n            list1[list1.index(i)] = 'even'\n        else:\n            list1[list1.index(i)] = 'odd'\n    return list1\n",
        "num_ids": 60
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # find the product of first even number\n    product = 1\n    for number in list1:\n        if number % 2 == 0:\n            product *= number\n",
        "num_ids": 40
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # empty lists\n    even_odd = []\n    odd_even = []\n    \n    # iterate over list\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_even.append(i)\n",
        "num_ids": 71
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            result *= i\n        else:\n            result /= i\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # if list1[0]==list1[1]:\n    #     return list1[0]*list1[0]\n    # if list1[0]%2==0:\n    #     return list1[0]*list1[0]\n    # else:\n    #     return list1[0]*list1[0]*list1[1]\n    return list1[0]*list1[1]\n",
        "num_ids": 104
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n = len(list1)\n    \n    if n % 2 == 0:\n        p = 1\n        for i in range(0, n, 2):\n            p *= list1[i]\n        \n        return p\n    else:\n        p = 1\n        for i in range(0, n, 2):\n            p *= list1[i]\n        \n        return p\n        \ndef binary_search(target, list, start, end):\n    '''\n    Write a function that takes a sorted array of positive numbers and a target number, and returns the index of the target number in the list. If the list is empty, return -1.\n    '''\n    if start > end:\n        return -1\n    \n    mid = (start + end) // 2\n    \n    if list[mid] == target:\n        return mid\n    elif list[mid] < target:\n        return binary_search(target, list, mid + 1, end)\n    elif list[mid] > target:\n        return binary_search(target, list, start, mid - 1)\n    \ndef add_numbers(array1, array2):\n    '''\n    Write a function that takes as input two numbers as arguments and returns the sum of the two numbers.\n    '''\n    sum = 0\n    for i in array1:\n        sum += i\n    for i in array2:\n        sum += i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(\"Even number : \",len(even_list))\n    print(\"Odd number : \",len(odd_list))\n    print(\"Even number : \",len(even_list))\n    print(\"Odd number : \",len(odd_list))\n    return(odd_list,even_list)\n    \n",
        "num_ids": 129
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    \n    for element in list1:\n        if element % 2 == 0:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    \n    return [even_list, odd_list]\n    \n    \ndef mul_even_odd_m(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    \n    for element in list1:\n        if element % 2 == 1:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    \n    return [odd_list, even_list]\n    \n    \ndef mul_even_odd_m_s(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    \n    for element in list1:\n        if element % 2 == 1:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    \n    return [even_list, odd_list]\n    \n    \ndef mul_even_odd_m_s_s(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    \n    for element in list1:\n        if element % 2 == 0:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    \n    return [odd_list, even_list]\n    \n    \ndef sum_divisors(n):\n    '''\n    Write a function that takes a positive integer N and returns the sum of all the divisors of that integer.\n    '''\n    return n - sum([i for i in range(1, int(n**.5) + 1) if n % i == 0])\n    \n    \ndef count_divisors(n):\n    '''\n    Write a function that takes a positive integer N and returns the count of all the divisors of that integer.\n    '''\n    return sum([i for i in range(1, int(n**.5) + 1) if n % i == 0])\n    \n    \ndef sub_digits(number):\n    '''\n    Write a function that takes a positive integer N and returns the sub-digits of number.\n    '''\n    return number // 10**(len(str(number)))\n    \n    \ndef prime_numbers(number):\n    '''\n    Write a function that takes a positive integer N and returns True if it is a prime number and False if not.\n    '''\n    is_prime = True\n    for i in range(2, number):\n        if number % i == 0:\n            is_prime = False\n    return is_prime\n    \n    \ndef common_divisors(number):\n    '''\n    Write a function that takes a positive integer N and returns all the common divisors of number.\n    '''\n    divisors = []\n    for i in range(2, int(number**.5) + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return divisors\n    \n    \ndef prime_factors(number):\n    '''\n    Write a function that takes a positive integer N and returns all the prime factors of number.\n    '''\n    prime_factors = []\n    for i in range(2, int(number**.5) + 1):\n        if number % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n    \n    \ndef perfect_number(number):\n    '''\n    Write a function that takes a positive integer N and returns True if it is a perfect number and False if not.\n    '''\n    for i in range(2, int(number**.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef is_palindrome(number):\n    '''\n    Write a function that takes a positive integer N and returns True if it is a palindrome and False if not.\n    '''\n    if number == number[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_sum_divisible(number):\n    '''\n    Write a function that takes a positive integer N and returns True if it is a sum of divisors and False if not.\n    '''\n    divisors = count_divisors(number)\n    sum_divisors = sum_divisors(number)\n    return sum_divisors == divisors\n    \n    \ndef is_palindrome_or_sum_divisible(number):\n    '''\n    Write a function that takes a positive integer N and returns True if it is a palindrome or sum of divisors and False if not.\n    '''\n    divisors = count_divisors(number)\n    sum_divisors = sum_divisors(number)\n    \n    if divisors == sum_divisors:\n        return True\n    else:\n        return False\n    \n    \ndef perfect_primes(number):\n    '''\n    Write a function that takes a positive integer N and returns True if it is a prime number and False if not.\n    '''\n    prime_factors = prime_factors(number)\n    \n    for i in prime_factors:\n        if number % i == 0:\n            return False\n    return True\n    \n    \ndef prime_factors(number):\n    '''\n    Write a function that takes a positive integer N and returns all the prime factors of number.\n    '''\n    prime_factors = []\n    for i in range(2, int(number**.5) + 1):\n        if number % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n    \n    \ndef primes_from_2_to_n(number):\n    '''\n    Write a function that takes a positive integer N and returns all the primes from 2 to N.\n    '''\n    prime_factors = prime_factors(number)\n    return [i for i in prime_factors if i!= 1]\n    \n    \ndef first_prime(number):\n    '''\n    Write a function that takes a positive integer N and returns the first prime number smaller than it.\n    '''\n    for i in range(2, int(number**.5) + 1):\n        if number % i == 0:\n            return i\n    return False\n    \n    \ndef is_palindrome_or_first_prime(number):\n    '''\n    Write a function that takes a positive integer N and returns True if it is a palindrome or first prime number and False if not.\n    '''\n    divisors = count_divisors(number)\n    \n    if divisors == divisors:\n        return True\n    else:\n        return False\n    \n    \ndef first_prime_primes(number):\n    '''\n    Write a function that takes a positive integer N and returns all the prime numbers from 2 to N, also the prime factors of the number.\n    '''\n    prime_factors = prime_factors(number)\n    prime_factors.sort()\n    \n    return prime_factors\n    \n    \ndef sub_div_primes(number):\n    '''\n    Write a function that takes a positive integer N and returns all the prime numbers smaller than it.\n    '''\n    prime_factors = prime_factors(number)\n    prime_factors.sort()\n    \n    return prime_factors[::-1]\n    \n    \ndef sub_div_primes_primes(number):\n    '''\n    Write a function that takes a positive integer N and returns all the prime numbers smaller than it and also the prime factors of the number.\n    '''\n    prime_factors = prime_factors(number)\n    prime_factors.sort()\n    prime_factors_primes = prime_factors + prime_factors[::-1]\n    \n    return prime_factors_primes\n    \n    \ndef perfect_primes(number):\n    '",
        "num_ids": 76
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        product *= i\n    return product\n",
        "num_ids": 25
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    prod = 1\n    \n    for i in range(len(list1)):\n        if i%2==0:\n            prod *= list1[i]\n        else:\n            prod /= list1[i]\n        \n    return prod\n    \nprint(mul_even_odd([1,2,3,4,5])",
        "num_ids": 87
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    return tuple(map(lambda x: int(x), test_list))\n",
        "num_ids": 34
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_int = tuple(map(int, test_str))\n    return tuple_int\n",
        "num_ids": 25
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(',')\n    return tuple([int(x) for x in tuple_str])\n",
        "num_ids": 33
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    return float(test_str)\n    \ndef tuple_str_bool(test_str):\n    '''\n    Write a function to convert tuple string to boolean tuple.\n    '''\n    return bool(test_str)\n    \ndef tuple_str_str(test_str):\n    '''\n    Write a function to convert tuple string to string tuple.\n    '''\n    return str(test_str)\n    \ndef tuple_str_len(test_tuple):\n    '''\n    Write a function to convert tuple string to len tuple.\n    '''\n    return len(test_tuple)\n    \ndef tuple_str_tuple(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_list(test_tuple):\n    '''\n    Write a function to convert tuple string to list tuple.\n    '''\n    return list(test_tuple)\n    \ndef tuple_str_set(test_tuple):\n    '''\n    Write a function to convert tuple string to set tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_dict(test_tuple):\n    '''\n    Write a function to convert tuple string to dict tuple.\n    '''\n    return dict(test_tuple)\n    \ndef tuple_str_tuple_float(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple float tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_tuple_list(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple list tuple.\n    '''\n    return list(test_tuple)\n    \ndef tuple_str_tuple_set(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_tuple_int(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple int tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_tuple_tuple(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple tuple tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_tuple_set_int(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set set set int tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_str_int(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str int tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_str_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str bool tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_str_list_int(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str list int tuple.\n    '''\n    return list(test_tuple)\n    \ndef tuple_str_str_tuple_int_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple int bool tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_str_tuple_list_int(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple int list int tuple.\n    '''\n    return list(test_tuple)\n    \ndef tuple_str_str_set_int_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int bool tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_tuple_set_int_list_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list bool tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_str_set_list_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list bool tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_tuple_set_list_bool_int(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list bool tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_int_tuple(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int tuple set int tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_int_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int bool tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_list_int_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int list bool tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_str_set_int_float(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list float tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_int_float_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int list float tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_float_int(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int list float tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_float_int_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int list float tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_float_int_list(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int list float tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_set_float_int_list_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int list float tuple.\n    '''\n    return set(test_tuple)\n    \ndef tuple_str_tuple_str_set_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list float tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_tuple_str_set_bool_list(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list float tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_tuple_set_bool_list_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list float tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_str_tuple_str_set_bool_list_bool(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple str tuple set int list int list float tuple.\n    '''\n    return tuple(test_tuple)\n    \ndef tuple_str_set_bool_tuple(test_tuple):\n    '''\n    Write a function to convert tuple string to tuple set int list int list float tuple.\n    '''\n    return tuple",
        "num_ids": 5
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = [str_tuple(t) for t in test_str]\n    return tuple(map(tuple_str_int,test_list))\n",
        "num_ids": 41
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_int = tuple(test_str)\n    return tuple_int\n",
        "num_ids": 21
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    l = list(test_str)\n    return tuple(int(i) for i in l)\n",
        "num_ids": 26
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    my_list = test_str.split(',')\n    int_my_list = list(map(int, my_list))\n    return int_my_list\n",
        "num_ids": 42
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    \n    # create a tuple from string\n    tuple_str = tuple(test_str)\n    \n    # convert tuple to integer\n    return int(tuple_str)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2016
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def convert(s):\n        try:\n            if len(s) % 3!= 0:\n                return 0\n            lst = []\n            for i in range(0, len(s), 3):\n                lst.append(s[i:i+3])\n            return tuple(lst)\n        except:\n            return 0\n    test_str_int = convert(test_str)\n    return test_str_int\n",
        "num_ids": 104
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n",
        "num_ids": 24
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    else:\n        return i - 1\n",
        "num_ids": 41
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n    while(l <= r):\n        mid = (l+r)//2\n        if a[mid] <= x:\n            l = mid+1\n        else:\n            r = mid-1\n    return l\n",
        "num_ids": 67
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # define the length of the sorted array\n    l = len(a)\n    # find the length of the unsorted array\n    r = bisect.bisect_right(a, x)\n    # add the x into the sorted array\n    a.insert(r, x)\n    # update the length of the unsorted array\n    l += 1\n    # return the index of the right insertion point\n    return l - 1\n",
        "num_ids": 100
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    p = bisect.bisect_left(a, x)\n    if p!= len(a):\n        return p + 1\n    else:\n        return len(a)\n",
        "num_ids": 45
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find index where x is in a.\n    idx = bisect.bisect_right(a, x)\n    # insert x at right of index idx\n    return idx\n",
        "num_ids": 46
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # initialize the search window.\n    start = 0\n    end = len(a) - 1\n",
        "num_ids": 25
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i, value in enumerate(a):\n        if value > x:\n            return i\n    return len(a)\n",
        "num_ids": 32
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid\n    return l - 1\n",
        "num_ids": 67
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub('^\\s*|\\s+$', '', text)\n    \n    # replace any digits with space\n    text = re.sub('\\d+','', text)\n    \n    # split the text into words\n    text = text.split()\n    \n    # find the number of words in the text\n    count = len(text)\n    \n    # find the longest word and remove it from the list\n    max_length = len(max(text, key=len))\n    count -= max_length\n    \n    # filter out words that are too short\n    if len(text) >= count:\n        text = [t for t in text if len(t) > 0 and t.islower()]\n    \n    # remove empty words from the text\n    if len(text) == 0:\n        text = []\n    \n    return text\n    ",
        "num_ids": 205
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3', text)\n    return text\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 \\2 \\3 \\4', text)\n    return text\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'([a-zA-Z])(\\s)([a-zA-Z])', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)', r'\\1 \\2', text)\n    text = re.sub(r'([a-zA-Z])(\\s)(\\d)(\\d)', r'\\1 ",
        "num_ids": 139
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # find all matches\n    matches = re.findall(r'[a-z][A-Z]*b',text)\n    # print the matches\n    print(matches)\n    # if there are any matches\n    if len(matches) > 0:\n        print('You are matching three letters...')\n        # get the first match\n        firstmatch = matches[0]\n        # get the second match\n        secondmatch = matches[1]\n        # get the third match\n        thirdmatch = matches[2]\n        # compare the first match to the second and third matches\n        print('The match is: ',firstmatch)\n        print('The match is: ',secondmatch)\n        print('The match is: ',thirdmatch)\n        # if the first match is equal to the second match\n        if firstmatch == secondmatch:\n            # print the result\n            print('The match is: ',firstmatch)\n        # if the second match is equal to the third match\n        elif secondmatch == thirdmatch:\n            # print the result\n            print('The match is: ',secondmatch)\n        # if the third match is equal to the first match\n        else:\n            # print the result\n            print('The match is: ',thirdmatch)\n    else:\n        print('There are no matches. Nothing matched...')\n        # if there are no matches\n        if len(matches) == 0:\n            print('No matches found...')\n    # return the matches\n    return matches\n",
        "num_ids": 345
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a, b, c = '', '', ''\n    for char in text:\n        if char.isdigit():\n            a += char\n        elif char == '-':\n            b += char\n        elif char =='':\n            c += char\n    return a+b+c\n",
        "num_ids": 71
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(r'\\s', '', text.strip())\n    text = re.sub(r'^\\s', '', text.strip())\n    text = re.sub(r'\\s+$', '', text.strip())\n    text = re.sub(r'\\s+$', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'^\\s', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub(r'\\s+', '', text.strip())\n    text = re.sub",
        "num_ids": 2009
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #regex_sub_reg = '(?:(?:[\\w\\s]*\\.)*' + regex_sub + ')(?:[a-zA-Z\\d]*?[\\w\\s]*)'\n    #text = ''.join([re.escape(x) for x in text])\n    #p = re.compile(regex_sub_reg, re.MULTILINE)\n    #print(p.search(text))\n    #text = p.sub(r'\\g<1> \\g<2>', text)\n    text = re.sub('(?:[\\w\\s]*\\.)*', '\\\\g<1> \\\\g<2>', text)\n    text = re.sub('[\\s]',' ',text)\n    text = text.lower()\n    text = text.replace('.',' ')\n    text = text.replace('&','')\n    text = text.replace('&#','')\n    text = text.replace(',',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace(':',' ')\n    text = text.replace('$',' ')\n    text = text.replace('(','')\n    text = text.replace(')',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('[',' ')\n    text = text.replace(']',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(','')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('<',' ')\n    text = text.replace('>',' ')\n    text = text.replace('\\'',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('  ',' ')\n    text = text.replace('\\n',' ')\n    text = text.replace(' ',' ')\n    text = text.replace('$',' ')\n    text = text.replace(';',' ')\n    text = text.replace('[',' ')\n    text = text.replace(']',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('+',' ')\n    text = text.replace('.',' ')\n    text = text.replace('&',' ')\n    text = text.replace('&#',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('+',' ')\n    text = text.replace('.',' ')\n    text = text.replace('&',' ')\n    text = text.replace('&#',' ')\n    text = text.replace(',',' ')\n    text = text.replace('.',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('+',' ')\n    text = text.replace('.',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('+',' ')\n    text = text.replace('.',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('+',' ')\n    text = text.replace('.',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('+',' ')\n    text = text.replace('.',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('*',' ')\n    text = text.replace('{',' ')\n    text = text.replace('}',' ')\n    text = text.replace('&',' ')\n    text = text.replace('\"',' ')\n    text = text.replace('!',' ')\n    text = text.replace('(',' ')\n    text = text.replace(')',' ')\n    text = text.replace('+',' ')\n    text = text.replace('.',' ')\n    text = text.replace('&',' ')\n",
        "num_ids": 2009
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.lower() in [\"an a\", \"a an\", \"a aan\", \"a aan aan\", \"a an aan\"]\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # pattern\n    pattern = r'[a-zA-z0-9_\\-\\.]*'\n    # regex\n    regex = re.compile(pattern, re.IGNORECASE)\n    # test\n    if regex.match(text) == None:\n        return False\n    return True\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a letter followed by\n    one of two letters.\n    '''\n    # pattern\n    pattern = r'[a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_]*'\n    # regex\n    regex = re.compile(pattern, re.IGNORECASE)\n    # test\n    if regex.match(text) == None:\n        return False\n    return True\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five letters followed by\n    one of three letters.\n    '''\n    # pattern\n    pattern = r'[a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][a-zA-Z_][",
        "num_ids": 1764
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub(r'\\w+a\\b', 'ab', text)\n    text = re.sub(r'\\w+b\\b', 'ab', text)\n    return text\n",
        "num_ids": 50
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('[a-b]',text) is not None\n",
        "num_ids": 20
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    t = tuple(test_list)\n    test_tuple = tuple(test_str)\n    return t, test_tuple\n",
        "num_ids": 34
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_list)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tuple(test_tuple)\n    test_tuple = tupl",
        "num_ids": 2011
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(int, test_str.split()))\n",
        "num_ids": 18
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tup = test_list\n    tup.append(test_str)\n    return tup\n",
        "num_ids": 26
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create new tuples\n    new_tuple = tuple(test_list)\n    # concatenate new tuples\n    return tuple(new_tuple + test_str)\n",
        "num_ids": 45
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    output_tuple = ()\n    for i in range(len(test_str)):\n        output_tuple += (test_str[i],)\n    return output_tuple\n",
        "num_ids": 46
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split(' ')\n    # We have to make a new tuple, because the index is always the last number\n    result_tuple = tuple(test_list[:-1]) + (test_list[-1],)\n    return result_tuple\n",
        "num_ids": 68
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list)!= len(test_str):\n        raise Exception(\"The length of test_str and test_list are not the same.\")\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_str[i])\n    return new_list\n",
        "num_ids": 79
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    t = test_list + test_str\n    return t\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    count = 0\n    for i in test_list:\n        if count == len(test_list):\n            break\n        new_list.append(i)\n        count += 1\n    if count == len(test_list):\n        count = 0\n    new_tuple = tuple(new_list[count:])\n    return new_tuple\n",
        "num_ids": 91
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(0,len(nums)-1,2):\n        if nums[i]%2 == 0:\n            even_index.append(i)\n    return even_index\n",
        "num_ids": 56
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums) - 1, 2):\n        if nums[i] % 2 == 0:\n            print(nums[i])\n            print(nums[i + 1])\n            \n    return print(nums[len(nums) - 1])\n    \n",
        "num_ids": 74
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = [i for i in nums if i%2==0]\n    return len(evens)==0\n",
        "num_ids": 31
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index, i in enumerate(nums):\n        if i % 2 == 0:\n            if index % 2 == 0:\n                return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0 and nums[i]>0:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    l = []\n    for i in nums:\n        if i % 2 == 0:\n            l.append(i)\n    if len(l) == len(set(l)):\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            even_index.append(i)\n    if len(even_index) == 0:\n        return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position_list = []\n    for i in nums:\n        if i % 2 == 0:\n            even_position_list.append(i)\n    return even_position_list\n",
        "num_ids": 48
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return nums[::2] == [i for i in nums if i % 2 == 0]\n",
        "num_ids": 26
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if i % 2 == 0:\n                return False\n    return True\n    \n",
        "num_ids": 47
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for i in range(0,len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                test_tup = test_tup[:i]+test_tup[i+1:j]+test_tup[j+1:]\n                break\n    return test_tup\n",
        "num_ids": 115
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_list = []\n    for i,tup in enumerate(test_tup):\n        if type(tup) is tuple:\n            tup_list.append(tup)\n        else:\n            tup_list.append(tup)\n    test_tup = tuple(tup_list)\n    return test_tup\n",
        "num_ids": 86
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp_list = []\n    for i in test_tup:\n        if i not in temp_list:\n            temp_list.append(i)\n    return tuple(temp_list)\n",
        "num_ids": 48
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        return None\n    else:\n        index = 0\n        index2 = len(test_tup) - 1\n        while index < index2:\n            if test_tup[index] == test_tup[index2]:\n                test_tup.pop(index)\n                index2 -= 1\n            index += 1\n    return test_tup\n",
        "num_ids": 98
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(f'The original tuple is {test_tup}')\n    nested_tup = []\n    print(f'Nested tuple is {nested_tup}')\n    for x, y in test_tup:\n        nested_tup.append((x, y))\n    print(f'The nested tuple is {nested_tup}')\n",
        "num_ids": 90
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    \n    for i in range(len(test_tup)):\n        if type(test_tup[i]) == list:\n            for j in range(len(test_tup[i])):\n                if type(test_tup[i][j]) == tuple:\n                    result.append(test_tup[i][j])\n        else:\n            if test_tup[i]!= None:\n                result.append(test_tup[i])\n    \n    return result\n        \n",
        "num_ids": 127
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    # Test cases\n    if len(test_tup) == 1:\n        return test_tup\n",
        "num_ids": 29
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([item for item in test_tup if item[0]!=item[-1]])\n",
        "num_ids": 28
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create a tuple from the given tuple\n    tuple_to_remove = tuple(test_tup)\n",
        "num_ids": 28
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([a for a,b in test_tup if not (b in test_tup)])\n",
        "num_ids": 28
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0\n    for lst in input_list:\n        output += len(lst)\n    return output\n",
        "num_ids": 30
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list)): \n        count += len(input_list[i]) \n    return count\n",
        "num_ids": 41
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    # Input to count\n    num_list = input_list\n    \n    # Initialize count\n    count = 0\n    \n    # Loop through each list\n    for i in num_list:\n        if type(i) == list:\n            count += 1\n    \n    return count\n",
        "num_ids": 71
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i)!= list:\n            print('Input must be a list!')\n            exit()\n        count += 1\n    print('The number of lists in the list is:', count)\n",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list1 = input_list[0]\n    list2 = input_list[1]\n    len_1 = len(list1)\n    len_2 = len(list2)\n    count = 0\n    for i in range(len_1):\n        count += list1[i].count(list2[i])\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # if there are no lists, return 0\n    if len(input_list) < 1: \n        return 0\n",
        "num_ids": 30
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # count number of sublists\n    count = 0\n    for i in range(1, len(input_list)):\n        if type(input_list[i]) is list:\n            count = count + 1\n    print(count)\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for l in input_list: \n        if isinstance(l, list): \n            count += len(l)\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = len(input_list)\n    return result\n",
        "num_ids": 16
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for x in input_list:\n        if isinstance(x, list):\n            counter += 1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0 or arr[0]==x:\n        return 0\n    if arr[-1]<x:\n        return len(arr)\n    else:\n        return last(arr[:-1],x)\ndef mid(arr,x):\n    '''\n    Write a python function to find the middle position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return 0\n    mid=len(arr)//2\n    if arr[mid]<x:\n        return mid\n    else:\n        return last(arr[mid+1:],x)\n",
        "num_ids": 58
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the position of the element x at the end\n    #i = arr.size - 1\n    #j = arr[i]\n    #print (arr)\n    #print ('J: ',j)\n    #while (i > 0 and arr[i-1] > arr[i]):\n        #i -= 1\n    #return i\n    #return arr[i]\n    return arr.index(x)\n",
        "num_ids": 100
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    \n    mid = n//2\n    if arr[mid] == x:\n        return mid\n    if arr[mid] > x:\n        return last(arr,x)\n    return last(arr[mid+1:],x)\n",
        "num_ids": 89
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    if length == 0:\n        return -1\n    \n    if arr[length-1] >= x:\n        return length-1\n    else:\n        return length-1-1\n",
        "num_ids": 54
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    count = 0\n    n = len(arr)\n",
        "num_ids": 15
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0 or len(arr)==1:\n        return -1\n    \n    mid=len(arr)//2\n    if arr[mid]==x:\n        return mid\n    elif arr[mid]>x:\n        return last(arr[:mid],x)\n    else:\n        return last(arr[mid+1:],x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    length = len(arr)\n    if length == 0:\n        return -1\n    if arr[0] > x:\n        return 0\n    \n    if arr[length-1] < x:\n        return length - 1\n    \n    if arr[length-1] == x:\n        return length - 1\n    \n    start = length - 2\n    if start < 0:\n        return -1\n    \n    while start >= 0 and arr[start] > x:\n        start -= 1\n    \n    return start\n",
        "num_ids": 126
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return arr.index(x)+1\n",
        "num_ids": 12
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] == x:\n        return 0\n    if arr[0] < x:\n        return last(arr[1:],x)\n    return last(arr[1:],x) + 1\n",
        "num_ids": 69
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.replace(' ', '')\n    text = text.replace('-', '')\n    text = text.replace('.', '')\n    text = text.replace('. ', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('?', '')\n    text = text.replace(',', '')\n    text = text.replace('+', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('.', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('?', '')\n    text = text.replace(',', '')\n    text = text.replace('+', '')\n    text = text.replace('\"', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    return text\n",
        "num_ids": 365
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'[a-zA-Z]\\s*\\b([A-Z][a-zA-Z]*)\\b', text)\n    if result!= None:\n        return result.group(1) +'' + result.group(2)\n    else:\n        return text\n",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start = 0\n    end = 0\n    output = ''\n    for i in range(len(text)):\n        if text[i] == 'a':\n            start = i\n            break\n    for i in range(len(text) - 1, -1, -1):\n        if text[i] == 'b':\n            end = i\n            break\n    if start == 0:\n        return start, end\n    else:\n        output = text[start:end]\n    return output\n",
        "num_ids": 118
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    flag = 0\n    for i in text:\n        if i == 'a':\n            flag = 1\n            break\n    if flag == 0:\n        return False\n    \n    for i in text:\n        if i == 'b':\n            flag = 1\n            break\n    if flag == 0:\n        return False\n    \n    for i in text:\n        if i == 'b':\n            flag = 1\n            break\n    if flag == 0:\n        return False\n",
        "num_ids": 113
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = \"\"\n    re_pattern = r'a\\b'\n    for char in re.split(re_pattern, text):\n        result += char\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'b':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'c'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'c':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'd'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'd':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'e'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'e':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'f'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'f':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'g'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'g':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'h'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'h':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'i'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'i':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'j'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'j':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endk(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'k'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'k':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'l'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'l':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in'm'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() =='m':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endn(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'n'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'n':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endo(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'o'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'o':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endp(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'p'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'p':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endq(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'q'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'q':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endr(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'r'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'r':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_ends(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in's'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() =='s':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_ends(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'es'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'es':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endt(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 't'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 't':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endu(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'u'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'u':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endv(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'v'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() == 'v':\n        return text[6:]\n    else:\n        return 'Not a valid string'\ndef text_starta_endw(text):\n    '''\n    Write a function that matches a string that has a 'a' followed by anything, ending in 'w'.\n    '''\n    if text[:6].lower() == 'a' and text[6:].lower() =",
        "num_ids": 24
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #variables\n    match = re.findall(r'\\b\\w+\\b', text)\n    for m in match:\n        print(m)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    a_pat = r'(?P<a>^[A-Z][a-z]+)'\n    endb_pat = r'(?P<endb>[A-Z][a-z]+)'\n    \n    # 'text' should always be the beginning of a string.\n    # 'endb' is the end of a string.\n    # print(a_pat.search(text))\n    \n    return re.search(a_pat, text)\n",
        "num_ids": 115
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    beginning_a = 'a'\n    end_a = 'b'\n    text = re.sub(end_a + beginning_a, '', text)\n    beginning_b = 'b'\n    end_b = 'a'\n    text = re.sub(end_b + beginning_b, '', text)\n    return text\n",
        "num_ids": 84
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # loop through all characters, if it is a letter, then add it to the end of the string\n    a = 0\n    while a < len(text):\n        if text[a] == 'a':\n            text = text[:a]+text[a+1]+text[a:]\n        a += 1\n    # loop through the rest of the string, if it is a letter, then add it to the end of the string\n    b = 0\n    while b < len(text):\n        if text[b] == 'b':\n            text = text[:b]+text[b+1]+text[b:]\n        b += 1\n    return text\n    \ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'b' followed by anything, starting with 'a'.\n    '''\n    # loop through all characters, if it is a letter, then add it to the start of the string\n    a = 0\n    while a < len(text):\n        if text[a] == 'b':\n            text = text[:a]+text[a+1:]\n        a += 1\n    # loop through the rest of the string, if it is a letter, then add it to the end of the string\n    b = 0\n    while b < len(text):\n        if text[b] == 'a':\n            text = text[:b]+text[b+1:]\n        b += 1\n    return text\n",
        "num_ids": 145
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for key in dict.keys():\n        result += dict[key]\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_all_items = 0\n    for k, v in dict.items():\n        sum_of_all_items += v\n    return sum_of_all_items\n",
        "num_ids": 45
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    # pass the dictionary to the function\n    return sum(dict.values())\n",
        "num_ids": 22
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key,value in dict.items():\n        sum += value\n    print(sum)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for key in dict:\n        sum = 0\n        for item in dict[key]:\n            sum += item[1]\n        dict[key] = sum\n        return dict\n    \n    \ndef get_number_of_items(dict):\n    '''\n    Write function to get the number of items in the given dictionary.\n    '''\n    return len(dict)\n",
        "num_ids": 9
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    print(\"\\n*******************************\")\n    for key, value in dict.items():\n        print(key, value)\n    print(\"\\n*******************************\")\n    return sum(dict.values())\n",
        "num_ids": 50
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n, n + 2):\n        if i % 2 == 0:\n            sum += i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n_list = list(range(l, r + 1))\n    sum = 0\n    for i in n_list:\n        if i % 2!= 0:\n            sum += i\n    return sum\nprint(sum_odd(5)",
        "num_ids": 59
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0: \n        return None\n",
        "num_ids": 14
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum_odd += i\n    return sum_odd\n    # Time Complexity = O(n)\n",
        "num_ids": 53
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1): \n        if i % 2 == 1: \n            sum += i \n    print(sum)\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    even_count = 0\n    odd_count = 0\n",
        "num_ids": 16
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd=0\n    for i in range(l,r+1): \n        if (i % 2)!= 0: \n            sum_odd+=i \n    return sum_odd \n",
        "num_ids": 50
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+sum_odd(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Note: We only need to add each digit of the number to be between 0 and 9\n    # Return the sum of all odd numbers in l and r.\n    #\n    # HINT: If you want a simple method, try a different solution.\n    #\n    # EXAMPLE:\n    # Input : l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], r = [1, 3, 5, 7, 9]\n    # Output : 25\n    # Note: If you only want to find the sum of all odd numbers, you could just\n    # write an alternative method, which is more efficient by not running a for loop.\n    #\n    # The Time complexity is O(n) or O(n^2). The Space complexity is O(n).\n    #\n    # So let's test it and print the sum of all odd numbers:\n    #\n    # Please note that even numbers are counted as odd numbers.\n",
        "num_ids": 222
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s=s+i\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _max(arr):  \n    '''\n    Write a python function to find the maximum value in an array.\n    '''\n    return max(arr)\n    \ndef _min(arr):  \n    '''\n    Write a python function to find the minimum value in an array.\n    '''\n    return min(arr)\n    \ndef _sorted(arr):  \n    '''\n    Write a python function to sort an array.\n    '''\n    arr.sort()\n    \n    \ndef main():\n    '''\n    Run all the tests.\n    '''\n    #test_array_zero()\n    #test_array_one()\n    #test_array_two()\n    #test_array_three()\n    #test_array_four()\n    #test_array_five()\n    #test_array_six()\n    #test_array_seven()\n    #test_array_eight()\n    #test_array_nine()\n    #test_array_ten()\n    #test_array_one_to_ten()\n    #test_array_one_to_twenty()\n    #test_array_one_to_thirty()\n    #test_array_one_to_forty()\n    #test_array_one_to_fifty()\n    #test_array_one_to_sixty()\n    #test_array_one_to_seventy()\n    #test_array_one_to_sixty_and_hundred()\n    #test_array_one_to_forty_and_twenty()\n    #test_array_one_to_twenty_and_twenty()\n    #test_array_two_to_twenty()\n    #test_array_two_to_twenty_and_twenty()\n    #test_array_two_to_twenty_and_twenty_and_twenty()\n    #test_array_two_to_twenty_and_thirty()\n    #test_array_two_to_thirty_and_twenty()\n    #test_array_two_to_twenty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty_and_thirty_and_thirty_and_thirty()\n    #test_array_two_to_thirty_and_thirty_and_thirty",
        "num_ids": 1873
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\n",
        "num_ids": 54
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    return sum(arr)\n",
        "num_ids": 11
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a=''\n    for i in range(d):\n        a+=str(n&1)\n        n>>=1\n    return int(a,2)\n        \ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    a=''\n    for i in range(d):\n        a+=str(n&1)\n        n>>=1\n    return int(a,2)\n",
        "num_ids": 41
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%32\n    x=n&(n-1)\n    n=n>>d\n    return n|x\n    \n    \ndef main():\n    n = int(input('Enter an integer number: '))\n    d = int(input('Enter the rotation degree: '))\n    a = bin(n)[2:]\n    b = a[::-1]\n    c = list(b)\n    d=d%32\n    \n    for i in range(len(c)):\n        if c[i]=='1':\n            c[i]='0'\n            c[i-1]='1'\n        else:\n            c[i]='1'\n            c[i-1]='0'\n            \n    a = ''.join(c)\n    n = int(a,2)\n    \n    print('The rotated number is: ', n)\n    \n    print('It will take a long time to complete...')\n    for i in range(d):\n        print('Rotating left by',i,'...')\n        print('left_rotate(n,d) = ', left_rotate(n,d))\n    print('The rotated number is: ', n)\n    \nif __name__=='__main__':\n    main()\n",
        "num_ids": 302
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code here\n    if n >= (2**32):\n        return 0\n    n = (n+d)\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif d == 0:\n        return 2\n    elif d == 1:\n        return 3\n    elif d == 2:\n        return 4\n    elif d == 3:\n        return 5\n    elif d == 4:\n        return 6\n    elif d == 5:\n        return 7\n    elif d == 6:\n        return 8\n    elif d == 7:\n        return 9\n    elif d == 8:\n        return 10\n    elif d == 9:\n        return 11\n    elif d == 10:\n        return 12\n    elif d == 11:\n        return 13\n    elif d == 12:\n        return 14\n    elif d == 13:\n        return 15\n    else:\n        return n%32\n",
        "num_ids": 203
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return((n&1)<<d)+(n&2)>>1\n",
        "num_ids": 20
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def twos(x,y):\n        return (x << (y//2)) | (x >> (y//2))\n",
        "num_ids": 32
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code here\n    temp=n\n    n=temp>>d\n    n=(n<<(32-d))&0xffffffff\n    temp=n\n    n=temp&0xffffffff\n    temp=n>>d\n    n=(n<<(32-d))&0xffffffff\n    return n\n",
        "num_ids": 78
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n >> d            # roll to the left\n    left = n & 0xFFFFFF        # take n & 0xFFFF\n    l = left << d            # and shift left by d bits\n    return l | (n << d)    # and concat and return \n",
        "num_ids": 66
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%32\n    return (n<<d)|(n>>(32-d))\n    \n    \ndef left_rotate_32(n):\n    '''\n    Write a function that does the 32 bit rotation of a 32 bit number n.\n    '''\n    n=n|(n>>(32-32))\n    n=n<<(32-32)\n    return n\n    \n    \ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d=d%32\n    return (n>>d)&((2**32)-1)-n\n    \n    \ndef right_rotate_32(n):\n    '''\n    Write a function that does the 32 bit rotation of a 32 bit number n.\n    '''\n    n=n&((2**32)-1)\n    n=n|((2**32)-1)\n    return n\n    \n    \ndef combine(d,c):\n    '''\n    Write a function to combine a 32 bit number with a 16 bit number.\n    '''\n    return (d<<16)+c\n    \n    \ndef combine_32(d,c):\n    '''\n    Write a function to combine a 32 bit number with a 16 bit number.\n    '''\n    return (d<<8)+c+d\n    \n    \ndef inverse(d):\n    '''\n    Write a function to do an inverse of a 32 bit number.\n    '''\n    return ((2**32)-1)\n    \n    \ndef inverse_32(d):\n    '''\n    Write a function to do an inverse of a 32 bit number.\n    '''\n    return (d*(2**32)-1)\n    \n    \ndef xor(a,b):\n    '''\n    Write a function to do an xor of a 32 bit number with a 16 bit number.\n    '''\n    return a^b\n    \n    \ndef xor_32(a,b):\n    '''\n    Write a function to do an xor of a 32 bit number with a 16 bit number.\n    '''\n    return a^b&((2**32)-1)\n    \n    \ndef from_bits(d,c):\n    '''\n    Write a function that converts a 32 bit number with a 16 bit number into a 64 bit number.\n    '''\n    d=d%(2**64)\n    return d\n    \n    \ndef from_bits_32(d,c):\n    '''\n    Write a function that converts a 32 bit number with a 16 bit number into a 64 bit number.\n    '''\n    d=d%(2**32)\n    return d\n    \n    \ndef add(a,b):\n    '''\n    Write a function to add two 32 bit numbers.\n    '''\n    return a+b\n    \n    \ndef add_32(a,b):\n    '''\n    Write a function to add two 32 bit numbers.\n    '''\n    return a+b\n    \n    \ndef sub(a,b):\n    '''\n    Write a function to subtract two 32 bit numbers.\n    '''\n    return a-b\n    \n    \ndef sub_32(a,b):\n    '''\n    Write a function to subtract two 32 bit numbers.\n    '''\n    return a-b\n    \n    \ndef mul(a,b):\n    '''\n    Write a function to multiply two 32 bit numbers.\n    '''\n    return a*b\n    \n    \ndef mul_32(a,b):\n    '''\n    Write a function to multiply two 32 bit numbers.\n    '''\n    return a*b\n    \n    \ndef div(a,b):\n    '''\n    Write a function to divide two 32 bit numbers.\n    '''\n    return a//b\n    \n    \ndef div_32(a,b):\n    '''\n    Write a function to divide two 32 bit numbers.\n    '''\n    return a//b\n    \n    \ndef mod(a,b):\n    '''\n    Write a function to modulo two 32 bit numbers.\n    '''\n    return a%b\n    \n    \ndef mod_32(a,b):\n    '''\n    Write a function to modulo two 32 bit numbers.\n    '''\n    return a%b\n    \n    \ndef xor(a,b):\n    '''\n    Write a function to do an xor of two 32 bit numbers.\n    '''\n    return a^b\n    \n    \ndef xor_32(a,b):\n    '''\n    Write a function to do an xor of two 32 bit numbers.\n    '''\n    return a^b\n    \n    \ndef sign(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a>0 else -1\n    \n    \ndef sign_32(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a>0 else -1\n    \n    \ndef abs(a):\n    '''\n    Write a function to determine the absolute value of a number.\n    '''\n    return a if (a>0) else -a\n    \n    \ndef abs_32(a):\n    '''\n    Write a function to determine the absolute value of a number.\n    '''\n    return a if (a>0) else -a\n    \n    \ndef sign_64(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef sign_32_64(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef abs_64(a):\n    '''\n    Write a function to determine the absolute value of a number.\n    '''\n    return a if (a<0) else -a\n    \n    \ndef sign_128(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef sign_32_128(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef abs_128(a):\n    '''\n    Write a function to determine the absolute value of a number.\n    '''\n    return a if (a<0) else -a\n    \n    \ndef sign_256(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef sign_32_256(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef abs_256(a):\n    '''\n    Write a function to determine the absolute value of a number.\n    '''\n    return a if (a<0) else -a\n    \n    \ndef sign_512(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef sign_32_512(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef abs_512(a):\n    '''\n    Write a function to determine the absolute value of a number.\n    '''\n    return a if (a<0) else -a\n    \n    \ndef sign_1024(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef sign_32_1024(a):\n    '''\n    Write a function to determine the sign of a number.\n    '''\n    return 1 if a<0 else -1\n    \n    \ndef abs_1024(a):\n    '''\n    Write a function to determine the absolute value of a number.\n    '''\n    return a if (a<0) else -a\n    \n    \ndef sign_51",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = bin(n)[2:]\n    remainder = len(temp)%4\n    if remainder == 0:\n        temp = '0'+temp\n    else:\n        temp = temp[:-remainder]\n    n = int(n,2)\n    return temp[::-1]+temp[:len(temp)]\n",
        "num_ids": 81
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    for char in range(len(text)):\n        if text[char]!= \" \":\n            text = text[:char] + text[char+1:]\n    return text\ndef remove_quotes(text):\n    '''\n    Write a function to remove all quotes from a string.\n    '''\n    for char in range(len(text)):\n        if text[char] == '\"':\n            if text[char + 1:].count(\"'\") % 2 == 0:\n                text = text[:char] + text[char + 2:]\n            else:\n                text = text[:char] + text[char + 1:]\n    return text\ndef remove_multiple_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\ndef remove_brackets(text):\n    '''\n    Write a function to remove all brackets from a string.\n    '''\n    text = text.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"'\", \"\").replace('(', \"\").replace(')', \"\")\n    return text\ndef remove_quotes_with_spaces(text):\n    '''\n    Write a function to remove all quotes from a string.\n    '''\n    text = text.strip()\n    return text\ndef remove_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    pattern = re.compile(r'\\d')\n    text = pattern.sub('', text)\n    return text\ndef remove_symbols(text):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    pattern = re.compile(r'[!\\\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~]')\n    text = pattern.sub('', text)\n    return text\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.strip()\n    return text\ndef remove_noise(text):\n    '''\n    Write a function to remove all noise from a string.\n    '''\n    text = remove_all_spaces(text)\n    text = remove_quotes(text)\n    text = remove_multiple_spaces(text)\n    text = remove_brackets(text)\n    text = remove_quotes_with_spaces(text)\n    text = remove_numbers(text)\n    text = remove_symbols(text)\n    return text\ndef remove_tables(text):\n    '''\n    Write a function to remove all tables from a string.\n    '''\n    pattern = re.compile(r'^\\s*\\|\\s*')\n    text = pattern.sub(' ', text)\n    return text\ndef remove_numbers_from_text(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    pattern = re.compile(r'\\d')\n    text = pattern.sub('', text)\n    return text\ndef remove_words(text):\n    '''\n    Write a function to remove all words from a string.\n    '''\n    pattern = re.compile(r'\\w')\n    text = pattern.sub('', text)\n    return text\ndef remove_stop_words(text):\n    '''\n    Write a function to remove all stop words from a string.\n    '''\n    pattern = re.compile(r'\\w')\n    text = pattern.sub('', text)\n    return text\ndef remove_low_case(text):\n    '''\n    Write a function to remove all low-case letters from a string.\n    '''\n    pattern = re.compile(r'[A-Z]')\n    text = pattern.sub('', text)\n    return text\ndef remove_upper_case(text):\n    '''\n    Write a function to remove all uppercase letters from a string.\n    '''\n    pattern = re.compile(r'[a-z]')\n    text = pattern.sub('', text)\n    return text\ndef remove_consonant(text):\n    '''\n    Write a function to remove all consonant from a string.\n    '''\n    pattern = re.compile(r'^[a-z]')\n    text = pattern.sub('', text)\n    return text\ndef remove_verbs(text):\n    '''\n    Write a function to remove all verbs from a string.\n    '''\n    pattern = re.compile(r'^\\s*\\*\\s*')\n    text = pattern.sub(' ', text)\n    return text\ndef remove_special_char(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    pattern = re.compile(r'[!#$%&()*+,-./:;<=>?@[\\]^_`{|}~]')\n    text = pattern.sub('', text)\n    return text\ndef remove_emojis(text):\n    '''\n    Write a function to remove all emoji from a string.\n    '''\n    pattern = re.compile(r'(:[a-zA-Z0-9\\-\\n]+)')\n    text = pattern.sub('', text)\n    return text\ndef remove_url(text):\n    '''\n    Write a function to remove all links from a string.\n    '''\n    pattern = re.compile(r'(https?:\\/\\/)?\\S+')\n    text = pattern.sub('', text)\n    return text\ndef remove_hashtag(text):\n    '''\n    Write a function to remove all hashtags from a string.\n    '''\n    pattern = re.compile(r'#\\S+')\n    text = pattern.sub('', text)\n    return text\ndef remove_hashtag_numbers(text):\n    '''\n    Write a function to remove all hashtags from a string.\n    '''\n    pattern = re.compile(r'#[0-9]+')\n    text = pattern.sub('', text)\n    return text\ndef remove_html_tags(text):\n    '''\n    Write a function to remove all HTML tags from a string.\n    '''\n    pattern = re.compile(r'<[^<>]+>')\n    text = pattern.sub('', text)\n    return text\ndef remove_japanese_characters(text):\n    '''\n    Write a function to remove all Japanese characters from a string.\n    '''\n    pattern = re.compile(r'[\\u262E]')\n    text = pattern.sub('', text)\n    return text\ndef remove_non_alphanumeric(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    pattern = re.compile(r'[^\\w]')\n    text = pattern.sub(' ', text)\n    return text\ndef remove_number(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    pattern = re.compile(r'\\d')\n    text = pattern.sub('', text)\n    return text\ndef remove_symbols(text):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    pattern = re.compile(r'\\w')\n    text = pattern.sub('', text)\n    return text\ndef remove_numbers_and_symbols(text):\n    '''\n    Write a function to remove all numbers and symbols from a string.\n    '''\n    pattern = re.compile(r'\\d+')\n    text = pattern.sub(' ', text)\n    return text\ndef remove_all_digit_numbers(text):\n    '''\n    Write a function to remove all digit numbers from a string.\n    '''\n    pattern = re.compile(r'\\d')\n    text = pattern.sub(' ', text)\n    return text\ndef remove_emails(text):\n    '''\n    Write a function to remove all email addresses from a string.\n    '''\n    pattern = re.compile(r'^[a-z0-9\\.\\-+_]",
        "num_ids": 25
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" +\", \" \", text)\n",
        "num_ids": 15
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern,'', text)\n",
        "num_ids": 24
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', str(text))\n    return text\n",
        "num_ids": 23
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)\n",
        "num_ids": 25
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ','').replace('\\n','')\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '').replace('\\n', '').replace('\\t', '').replace('\\r', '').replace('\\xa0', '').strip()\n",
        "num_ids": 43
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # regular expression to search for whitespace \n    pattern = r'\\s+'\n    # compile the regular expression with some additional arguments\n    compiled_re = re.compile(pattern, re.UNICODE)\n    # loop through each character in the string\n    for char in text:\n        # if a space character is found, remove it\n        if char =='':\n            text = text.replace(char, '')\n    return text\n",
        "num_ids": 106
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert type(x) == int\n    assert type(y) == int\n    assert type(z) == int\n    assert x == y\n    assert x == z\n    assert x!= y\n    assert x!= z\n    assert x + y == z\n    assert x + y!= z\n    assert x - y == z\n    assert x - y!= z\n    assert x * y == z\n    assert x * y!= z\n    assert x / y == z\n    assert x / y!= z\n    assert x - z == z\n    assert x - z!= z\n    assert x - y == z\n    assert x - y!= z\n    assert z - x == z\n    assert z - x!= z\n    assert z - y == z\n    assert z - y!= z\n    assert z - z == z\n    assert z - y == z\n    assert z + y == z\n    assert z + y!= z\n    assert z - y == z\n    assert z * y == z\n    assert z * y!= z\n    assert z / y == z\n    assert z / y!= z\n    assert z - y == z\n    assert z - y!= z\n    assert z / z == z\n    assert z - y == z\n    assert z / z!= z\n    assert z - y == z\n    assert z + y == z\n    assert z - z == z\n    assert z + y == z\n    assert z * z == z\n    assert z / z == z\n    assert z - z == z\n    assert z / z!= z\n    assert z + y == z\n    assert z * y!= z\n    assert z - y == z\n    assert z + y == z\n    assert z / z!= z\n    assert z + y == z\n    assert z - y == z\n    assert z + y == z\n    assert z / y == z\n    assert z - y == z\n    assert z * y == z\n    assert z / y!= z\n    assert z + y == z\n    assert z - y == z\n    assert z * y == z\n    assert z / y!= z\n    assert z + y == z\n    assert z - y == z\n    assert z * y == z\n    assert z / y!= z\n    assert z * y!= z\n    assert z / z == z\n    assert z + y == z\n    assert z - y == z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y == z\n    assert z - y == z\n    assert z * y!= z\n    assert z / y!= z\n    assert z * y!= z\n    assert z / z == z\n    assert z * y!= z\n    assert z - y == z\n    assert z * y!= z\n    assert z / z == z\n    assert z + y!= z\n    assert z - y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z / z == z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + y!= z\n    assert z - y!= z\n    assert z * y!= z\n    assert z / y!= z\n    assert z + ",
        "num_ids": 2208
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    for i in range(3):\n        if x[i] == y[i] and z[i] == 1:\n            result += 1\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    z=0\n    for i in range(0,len(x)):\n        for j in range(0,len(y)):\n            for k in range(0,len(z)):\n                if x[i] == y[j] and z[k] == 0:\n                    z[k] = 1\n                elif x[i] == y[j] and z[k] == 1:\n                    z[k] = 0\n                elif x[i] == y[j] and z[k] == 2:\n                    z[k] = 1\n    return z\n    \n",
        "num_ids": 141
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y,z, use the type of x and y to check the type of x,y",
        "num_ids": 2009
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # You can write any python code you want to do\n    # TODO: write the code\n    pass",
        "num_ids": 26
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    try:\n        x=int(x)\n        y=int(y)\n        z=int(z)\n        if x>y and x>z:\n            count=x-y-z\n        elif y>z:\n            count=y-z\n        else:\n            count=z-y+x\n        return count\n    except Exception as e:\n        print(e)\n        return 0\n",
        "num_ids": 99
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(set(x)) == len(x), \"x should be a non-empty collection\"\n    assert len(set(y)) == len(y), \"y should be a non-empty collection\"\n    assert len(set(z)) == len(z), \"z should be a non-empty collection\"\n    assert len(set(x).intersection(y)) == 0, \"there should be no elements in the result\"\n    assert len(set(x).intersection(z)) == 0, \"there should be no elements in the result\"\n    assert len(set(y).intersection(z)) == 0, \"there should be no elements in the result\"\n",
        "num_ids": 155
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x.count(y) == y.count(z)\n    assert x.count(z) == z.count(y)\n    assert x.count(x) == 0\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    if(x==y and y==z):\n        return 0\n    elif(x==y or y==z):\n        return 1\n    else:\n        return 2\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #pass\n    # Test Case\n    # 1st\n    if x==y==z:\n        #print(\"2 equal\",x,y,z)\n        return x\n    # 2nd\n    elif x==z==y:\n        #print(\"2 equal\",x,y,z)\n        return z\n    # 3rd\n    elif x==y==z:\n        #print(\"3 equal\",x,y,z)\n        return x+y+z\n    # 4th\n    elif x==y==z:\n        #print(\"4 equal\",x,y,z)\n        return x+y+z\n    # 5th\n    elif x==z==y:\n        #print(\"5 equal\",x,y,z)\n        return x+y+z\n    # 6th\n    elif x==y==z:\n        #print(\"6 equal\",x,y,z)\n        return x+y+z\n    # 7th\n    elif x==z==y:\n        #print(\"7 equal\",x,y,z)\n        return x+y+z\n    # 8th\n    elif x==y==z:\n        #print(\"8 equal\",x,y,z)\n        return x+y+z\n    # 9th\n    elif x==y==z:\n        #print(\"9 equal\",x,y,z)\n        return x+y+z\n    # 10th\n    elif x==z==y:\n        #print(\"10 equal\",x,y,z)\n        return x+y+z\n    # 11th\n    elif x==y==z:\n        #print(\"11 equal\",x,y,z)\n        return x+y+z\n    # 12th\n    elif x==z==y:\n        #print(\"12 equal\",x,y,z)\n        return x+y+z\n    # 13th\n    elif x==y==z:\n        #print(\"13 equal\",x,y,z)\n        return x+y+z\n    # 14th\n    elif x==y==z:\n        #print(\"14 equal\",x,y,z)\n        return x+y+z\n    # 15th\n    elif x==z==y:\n        #print(\"15 equal\",x,y,z)\n        return x+y+z\n    # 16th\n    elif x==y==z:\n        #print(\"16 equal\",x,y,z)\n        return x+y+z\n    # 17th\n    elif x==z==y:\n        #print(\"17 equal\",x,y,z)\n        return x+y+z\n    # 18th\n    elif x==y==z:\n        #print(\"18 equal\",x,y,z)\n        return x+y+z\n    # 19th\n    elif x==z==y:\n        #print(\"19 equal\",x,y,z)\n        return x+y+z\n    # 20th\n    elif x==y==z:\n        #print(\"20 equal\",x,y,z)\n        return x+y+z\n    # 21th\n    elif x==y==z:\n        #print(\"21 equal\",x,y,z)\n        return x+y+z\n    # 22th\n    elif x==z==y:\n        #print(\"22 equal\",x,y,z)\n        return x+y+z\n    # 23th\n    elif x==y==z:\n        #print(\"23 equal\",x,y,z)\n        return x+y+z\n    # 24th\n    elif x==z==y:\n        #print(\"24 equal\",x,y,z)\n        return x+y+z\n    # 25th\n    elif x==y==z:\n        #print(\"25 equal\",x,y,z)\n        return x+y+z\n    # 26th\n    elif x==z==y:\n        #print(\"26 equal\",x,y,z)\n        return x+y+z\n    # 27th\n    elif x==y==z:\n        #print(\"27 equal\",x,y,z)\n        return x+y+z\n    # 28th\n    elif x==z==y:\n        #print(\"28 equal\",x,y,z)\n        return x+y+z\n    # 29th\n    elif x==y==z:\n        #print(\"29 equal\",x,y,z)\n        return x+y+z\n    # 30th\n    elif x==z==y:\n        #print(\"30 equal\",x,y,z)\n        return x+y+z\n    # 31th\n    elif x==y==z:\n        #print(\"31 equal\",x,y,z)\n        return x+y+z\n    # 32th\n    elif x==z==y:\n        #print(\"32 equal\",x,y,z)\n        return x+y+z\n    # 33th\n    elif x==y==z:\n        #print(\"33 equal\",x,y,z)\n        return x+y+z\n    # 34th\n    elif x==z==y:\n        #print(\"34 equal\",x,y,z)\n        return x+y+z\n    # 35th\n    elif x==y==z:\n        #print(\"35 equal\",x,y,z)\n        return x+y+z\n    # 36th\n    elif x==z==y:\n        #print(\"36 equal\",x,y,z)\n        return x+y+z\n    # 37th\n    elif x==y==z:\n        #print(\"37 equal\",x,y,z)\n        return x+y+z\n    # 38th\n    elif x==z==y:\n        #print(\"38 equal\",x,y,z)\n        return x+y+z\n    # 39th\n    elif x==y==z:\n        #print(\"39 equal\",x,y,z)\n        return x+y+z\n    # 40th\n    elif x==z==y:\n        #print(\"40 equal\",x,y,z)\n        return x+y+z\n    # 41th\n    elif x==y==z:\n        #print(\"41 equal\",x,y,z)\n        return x+y+z\n    # 42th\n    elif x==z==y:\n        #print(\"42 equal\",x,y,z)\n        return x+y+z\n    # 43th\n    elif x==y==z:\n        #print(\"43 equal\",x,y,z)\n        return x+y+z\n    # 44th\n    elif x==z==y:\n        #print(\"44 equal\",x,y,z)\n        return x+y+z\n    # 45th\n    elif x==y==z:\n        #print(\"45 equal\",x,y,z)\n        return x+y+z\n    # 46th\n    elif x==z==y:\n        #print(\"46 equal\",x,y,z)\n        return x+y+z\n    # 47th\n    elif x==y==z:\n        #print(\"47 equal\",x,y,z)\n        return x+y+z\n    # 48th\n    elif x==z==y:\n        #print(\"48 equal\",x,y,z)\n        return x+y+z\n    # 49th\n    elif x==y==z:\n        #print(\"49 equal\",x,y,z)\n        return x+y+z\n    # 50th\n    elif x==z==y:\n        #print(\"50 equal\",x,y,z)\n        return x+y+z\n    # 51th\n    elif x==y==z:\n        #print(\"51 equal\",x,y,z)\n        return x+y+z\n    # 52th\n    elif x==z==y:\n        #print(\"52 equal\",x,y,z)\n        return x+y+z\n    # 53th\n    elif x==y==z:\n        #print(\"53 equal\",x,y,z)\n        return x+y+z\n    # 54th\n    elif x==z==y:\n        #print(\"54 equal\",x,y,z)\n        return x+y+z\n    # 55th\n    elif x=",
        "num_ids": 2010
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] < arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    d=len(arr)\n    x=1\n    y=1\n    for i in range(d-1):\n        x=x+1\n        y=y+1\n        for j in range(d-1):\n            if arr[i]<arr[j] and arr[i]<=arr[j+1]:\n                break\n        if y==d:\n            x=x-1\n        else:\n            y=y-1\n        d=d-1\n    if x==1:\n        return y\n    else:\n        return x\n",
        "num_ids": 135
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n-1):\n        if (arr[i] > arr[i+1]):\n            count += 1\n    return count\n    \ndef print_arr(arr):\n    n = len(arr)\n    for i in range(n):\n        print(arr[i], end=\" \")\n    print()\n    \ndef main():\n    arr = [1, 4, 8, 7, 9, 2, 5, 6, 3]\n    print(\"Unsorted Array:\")\n    print_arr(arr)\n    \n    print(\"\\nSorted Array:\")\n    count_rotation(arr)\n    print(\"\\nRotation count: \" + str(count_rotation(arr)))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 202
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return sum([arr.count(x) for x in arr])\n",
        "num_ids": 18
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    if l < 2:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    i = 0\n    count = 0\n    for j in range(len(arr)):\n        if arr[j] == arr[i]:\n            count = count + 1\n            i = i + 1\n    return count\n    # def count_rotation(arr):\n    #     # Write your code here.\n    #     if len(arr) == 1:\n    #         return 0\n    #     if arr[len(arr) - 1] == arr[0]:\n    #         return 0\n    #     if arr[len(arr) - 1] == arr[len(arr) - 2]:\n    #         return 0\n    #     if arr[0] == arr[len(arr) - 1]:\n    #         return 0\n    #     for i in range(len(arr) - 1):\n    #         if arr[i] < arr[i + 1]:\n    #             return 0\n    #     return 1\n    # return count_rotation(arr)\n",
        "num_ids": 228
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    \n    while n > 0:\n        n -= 1\n        start = n\n        end = n\n        while start > 0:\n            if arr[start] > arr[n]:\n                end += 1\n                arr[start], arr[n] = arr[n], arr[start]\n            start -= 1\n        \n        while end > 0:\n            if arr[end] > arr[n]:\n                rotations += end - n\n                arr[end], arr[n] = arr[n], arr[end]\n                end -= 1\n            end -= 1\n        \n        n -= 1\n    return rotations\n    \n",
        "num_ids": 160
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n    if size == 1:\n        return 1\n    else:\n        # build array of all possible elements\n        arr_list = [0] * (size * 2)\n        for i in range(size):\n            arr_list[i] = arr[i]\n",
        "num_ids": 71
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    left = 0\n    right = len(arr) - 1\n    res = 0\n    while left < right:\n        if arr[left] > arr[right]:\n            res += 1\n            right -= 1\n        elif arr[left] < arr[right]:\n            left += 1\n        else:\n            break\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 1\n    rotations = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n    return rotations\n",
        "num_ids": 63
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    else :\n        if n % 2 == 0 :\n            return False\n        elif n == 3 or n == 5 :\n            return True\n        else :\n            return False\n",
        "num_ids": 58
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<=3 : return True\n    if n%2==0 : return False\n    sqrt = int(n**0.5)\n    for i in range(3,sqrt+1):\n        if n%i==0: return False\n    return True\n    #return n % 2 == 0 or n%3==0 or n%5==0\n",
        "num_ids": 86
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 :\n        return True\n    if n == 1 :\n        return False\n    if n == 2 :\n        return True\n    if n == 3 :\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = str(n)\n    if s.isdigit():\n        if len(s)%2 == 0:\n            for i in range(len(s)//2):\n                if (int(s[i]) * int(s[i+1])) == int(s[i]):\n                    return False\n            return True\n    return False\n",
        "num_ids": 85
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = str(n)\n    if int(s[0])**0.5 == int(s[1]**0.5):\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    if n == 0 :\n        return True\n    if n == 1 :\n        return False\n    if n == 2 :\n        return True\n    if n == 3 :\n        return False\n    \n    for i in range(4, n, 2) :\n        if n % i == 0 :\n            return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    for i in range(1,n//2+1):\n        if (n % i == 0) :\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i*i <= n :\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    elif n == 2 :\n        return n == int(math.sqrt(n))**2\n    elif n % 2 == 0 :\n        return False\n    elif n % 3 == 0 :\n        return True\n    else :\n        return False\n    \n",
        "num_ids": 79
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    is_perfect_square = True\n    if n == 0 :\n        is_perfect_square = False\n        return is_perfect_square\n    if n % 2 == 0 :\n        is_perfect_square = is_perfect_square and n / 2 == n\n    if n % 3 == 0 :\n        is_perfect_square = is_perfect_square and n / 3 == n\n    if n % 4 == 0 :\n        is_perfect_square = is_perfect_square and n / 4 == n\n    return is_perfect_square\n",
        "num_ids": 127
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even = True\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even = False\n    return even\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return arr[0] == 1\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Traverse through all the numbers in the list\n    for num in arr:\n        # If the number is even\n        if num%2 == 0:\n            return False\n    # If the product is even\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # define a function that checks if the product of a list is even\n    # if it's even, the function should return True\n    # if the product is odd, the function should return False\n    # and the function should return the function\n    for i in arr:\n        if (i % 2!= 0):\n            return True\n        else:\n            return False\n",
        "num_ids": 85
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    #Code here\n    if len(arr) % 2 == 0:\n        return arr[0] == arr[1]\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 2:\n        return arr[0] * arr[1] == arr[1] * arr[0]\n    else:\n        if arr[0] * arr[1] == arr[1] * arr[0] * arr[0] * arr[0]:\n            return True\n        else:\n            return False\n",
        "num_ids": 82
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if(len(arr) == 1):\n        return True\n    if(len(arr) % 2!= 0):\n        return False\n    if(arr[0] == 0):\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # 2D Array\n    row = len(arr)\n    for i in range(row):\n        for j in range(0,row):\n            # check if the given number is divisible by both itself and other numbers from 2 to the row. \n            if arr[i][j] % 2 == 0 and arr[j][i] % 2 == 0:\n                return False\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (sum(arr) % 2 == 0)\n",
        "num_ids": 15
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    largest_sum = []\n    for element in lists:\n        if not element in largest_sum:\n            largest_sum.append(element)\n    return largest_sum\n",
        "num_ids": 42
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum_list = []\n    for i in lists:\n        if sum(i) > max(i):\n            highest_sum_list = i\n    return highest_sum_list\n",
        "num_ids": 47
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    # create a list of lists to store the highest value \n    highest_list = []\n    \n    for item in lists:\n        for number in item:\n            # check if the value is greater or equal to the highest value stored\n            if number >= highest_list[-1]:\n                # if so, append it to highest_list\n                highest_list.append(number)\n            else:\n                # if not, store the highest value\n                highest_list.append(number)\n    # find the highest value\n    highest_value = highest_list[0]\n    \n    # loop through the highest values\n    for i in range(1, len(highest_list)):\n        if highest_value == highest_list[i]:\n            # if it equals the highest value, append it to the max_sum_list\n            max_sum_list.append(highest_list[i])\n        elif highest_value < highest_list[i]:\n            # if it's less than the highest value, do the following\n            max_sum_list.append(highest_list[i])\n            highest_value = highest_list[i]\n            \n    return max_sum_list\n",
        "num_ids": 282
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # you can iterate through the list, and if the element is greater than any other element in the list then keep it in a variable and add it to the max_sum_list\n    # find the index of the greater element\n    # remove the element at that index\n    # return the list with the updated max_sum_list\n    # go through the whole list again and look for the maximum sum of elements\n    # if there is a larger sum then update the max_sum_list with that sum\n    # return the updated list\n    pass\n",
        "num_ids": 122
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    high_sums = []\n    for lst in lists:\n        for i in lst:\n            high_sums.append(sum(lst))\n    return high_sums\n",
        "num_ids": 49
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    def count_highest(lst):\n        lst.sort()\n        for i in range(len(lst)):\n            if(lst[i]>lst[i+1]):\n                return i+1\n        return -1\n    \n    return count_highest(lists)\n    \nlist1=[[1,2,3],[4,5,6],[7,8,9]]\nlist2=[[1,2,3],[4,5,6],[7,8,9]]\nprint(\"list1: \",list1)\nprint(\"list2: \",list2)\nprint(\"Highest sum of lists: \",max_sum_list(list1))\nprint(\"Highest sum of lists: \",max_sum_list(list2)",
        "num_ids": 179
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_num = []\n    for i in lists:\n        if max(i) > max(max_num):\n            max_num = max(i)\n    return max_num\n",
        "num_ids": 46
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # TODO: Write your code here\n    result = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            temp = lists[i][j]\n            if temp > max(result):\n                result = temp\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if(lists[i][j] > max_sum):\n                max_sum = lists[i][j]\n    return max_sum\n",
        "num_ids": 70
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n    for item in lists:\n        for item2 in item:\n            if highest == []:\n                highest.append(item2)\n            elif item2 > highest[-1]:\n                highest = [item2]\n            else:\n                highest.append(item2)\n    return highest\n",
        "num_ids": 75
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = []\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            result.append(test_str[i])\n    return max(result)\n",
        "num_ids": 52
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # To store the values in a dictionary\n    values = {}\n",
        "num_ids": 17
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    total = 0\n    for i in range(0,len(test_str)):\n        if(ord(test_str[i]) >= 65 and ord(test_str[i]) <= 90):\n            total = total + 1\n",
        "num_ids": 58
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upper = 0\n    for i in test_str:\n        if i.isupper():\n            if i > max_upper:\n                max_upper = i\n        else:\n            continue\n    return max_upper\n",
        "num_ids": 55
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase = 0\n",
        "num_ids": 11
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def get_num_uppercase(string):\n        '''\n        Return number of uppercase characters in the string.\n        '''\n        return string.count('u')\n",
        "num_ids": 11
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l_alphabet = list(set(test_str))\n    for i in range(len(l_alphabet)):\n        l_alphabet[i] = l_alphabet[i].upper()\n    l_alphabet = list(set(l_alphabet))\n    l_alphabet = sorted(l_alphabet)\n    max_c_len = 0\n    max_alphabet = set()\n    for i in l_alphabet:\n        if i.isupper():\n            max_c_len = i\n            max_alphabet.add(i)\n    return max_c_len, max_alphabet\n",
        "num_ids": 150
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if (test_str.find(' ')!= -1):\n        return 'No run'\n    else:\n        char_num = len(test_str)\n        upp_num = 0\n        for i in range(char_num):\n            if test_str[i].isupper():\n                upp_num += 1\n        return upp_num\n",
        "num_ids": 85
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    letters = []\n    for i in range(len(test_str)):\n        if test_str[i].isalpha():\n            letters.append(test_str[i].lower())\n    if len(letters) == 0:\n        return 0\n    else:\n        return max(letters)\n",
        "num_ids": 72
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = ''\n    for i in test_str:\n        if i.isupper():\n            max_run_uppercase = max_run_uppercase + i\n    return len(max_run_uppercase)\n",
        "num_ids": 62
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    n = len(nums)\n    if n % 2 == 1:\n        return None\n",
        "num_ids": 39
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # check if number is even\n    if(nums[0] % 2 == 1):\n        return nums[0]\n    else:\n        return None\n",
        "num_ids": 40
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return nums[i]\n",
        "num_ids": 40
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return sorted(nums)[1] if nums else 0\n",
        "num_ids": 17
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums[0]\n    \n",
        "num_ids": 50
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return list(filter(lambda x: not x % 2, nums))[0]\n",
        "num_ids": 23
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    even = nums[0]\n    for i in nums:\n        if i % 2 == 1:\n            even = i\n            break\n    return even\n    ",
        "num_ids": 41
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        nums.sort()\n        for i in range(0, len(nums), 2):\n            if nums[i] % 2!= 0:\n                return nums[i]\n",
        "num_ids": 66
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    '''\n    First solution\n    def first_odd(nums):\n        s = 0\n        for i in range(len(nums)):\n            if nums[i] % 2!= 0:\n                s = nums[i]\n        return s\n",
        "num_ids": 61
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return None\n    first_num = nums[0]\n    for num in nums[1:]:\n        if num % 2!= 0:\n            return first_num\n        first_num = num\n",
        "num_ids": 58
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i not in K:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)-1):\n        if test_tup[i][0]!= test_tup[i+1][0]:\n            return False\n        if test_tup[i][1]!= test_tup[i+1][1]:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    def check_K_rec(tup):\n        return len(set(tup)) <= K\n",
        "num_ids": 26
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if type(test_tup)!= tuple:\n        return False\n    elif type(K)!= int:\n        return False\n    elif K <= 0:\n        return False\n    elif not all(i in test_tup for i in range(K+1)):\n        return False\n    elif len(set(test_tup))!= len(test_tup):\n        return False\n    else:\n        return True\n",
        "num_ids": 109
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if type(K) == tuple:\n        if len(K) == 2:\n            if type(K[0]) == tuple and type(K[1]) == tuple and len(K[0]) == len(K[1]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) > K:\n        return False\n    for i in range(0, len(test_tup)):\n        if test_tup[i] == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == test_tup[1]:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 36
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) % 2!= 0:\n        return False\n    if K == 2:\n        return all(x in test_tup for x in [0, 1])\n    elif K == 3:\n        return all(x in test_tup for x in [1, 2])\n    elif K == 4:\n        return all(x in test_tup for x in [2, 3])\n    elif K == 5:\n        return all(x in test_tup for x in [3, 4])\n    elif K == 6:\n        return all(x in test_tup for x in [4, 5])\n    elif K == 7:\n        return all(x in test_tup for x in [5, 6])\n    elif K == 8:\n        return all(x in test_tup for x in [6, 7])\n    elif K == 9:\n        return all(x in test_tup for x in [7, 8])\n    elif K == 10:\n        return all(x in test_tup for x in [8, 9])\n    elif K == 11:\n        return all(x in test_tup for x in [9, 10])\n    elif K == 12:\n        return all(x in test_tup for x in [10, 11])\n    elif K == 13:\n        return all(x in test_tup for x in [11, 12])\n    elif K == 14:\n        return all(x in test_tup for x in [12, 13])\n    elif K == 15:\n        return all(x in test_tup for x in [13, 14])\n    elif K == 16:\n        return all(x in test_tup for x in [14, 15])\n    elif K == 17:\n        return all(x in test_tup for x in [15, 16])\n    elif K == 18:\n        return all(x in test_tup for x in [16, 17])\n    elif K == 19:\n        return all(x in test_tup for x in [17, 18])\n    elif K == 20:\n        return all(x in test_tup for x in [18, 19])\n    elif K == 21:\n        return all(x in test_tup for x in [19, 20])\n    elif K == 22:\n        return all(x in test_tup for x in [20, 21])\n    elif K == 23:\n        return all(x in test_tup for x in [21, 22])\n    elif K == 24:\n        return all(x in test_tup for x in [22, 23])\n    elif K == 25:\n        return all(x in test_tup for x in [23, 24])\n    elif K == 26:\n        return all(x in test_tup for x in [24, 25])\n    elif K == 27:\n        return all(x in test_tup for x in [25, 26])\n    elif K == 28:\n        return all(x in test_tup for x in [26, 27])\n    elif K == 29:\n        return all(x in test_tup for x in [27, 28])\n    elif K == 30:\n        return all(x in test_tup for x in [28, 29])\n    elif K == 31:\n        return all(x in test_tup for x in [29, 30])\n    elif K == 32:\n        return all(x in test_tup for x in [30, 31])\n    elif K == 33:\n        return all(x in test_tup for x in [31, 32])\n    elif K == 34:\n        return all(x in test_tup for x in [32, 33])\n    elif K == 35:\n        return all(x in test_tup for x in [33, 34])\n    elif K == 36:\n        return all(x in test_tup for x in [34, 35])\n    elif K == 37:\n        return all(x in test_tup for x in [35, 36])\n    elif K == 38:\n        return all(x in test_tup for x in [36, 37])\n    elif K == 39:\n        return all(x in test_tup for x in [37, 38])\n    elif K == 40:\n        return all(x in test_tup for x in [38, 39])\n    elif K == 41:\n        return all(x in test_tup for x in [39, 40])\n    elif K == 42:\n        return all(x in test_tup for x in [40, 41])\n    elif K == 43:\n        return all(x in test_tup for x in [41, 42])\n    elif K == 44:\n        return all(x in test_tup for x in [42, 43])\n    elif K == 45:\n        return all(x in test_tup for x in [43, 44])\n    elif K == 46:\n        return all(x in test_tup for x in [44, 45])\n    elif K == 47:\n        return all(x in test_tup for x in [45, 46])\n    elif K == 48:\n        return all(x in test_tup for x in [46, 47])\n    elif K == 49:\n        return all(x in test_tup for x in [47, 48])\n    elif K == 50:\n        return all(x in test_tup for x in [48, 49])\n    elif K == 51:\n        return all(x in test_tup for x in [49, 50])\n    elif K == 52:\n        return all(x in test_tup for x in [50, 51])\n    elif K == 53:\n        return all(x in test_tup for x in [51, 52])\n    elif K == 54:\n        return all(x in test_tup for x in [52, 53])\n    elif K == 55:\n        return all(x in test_tup for x in [53, 54])\n    elif K == 56:\n        return all(x in test_tup for x in [54, 55])\n    elif K == 57:\n        return all(x in test_tup for x in [55, 56])\n    elif K == 58:\n        return all(x in test_tup for x in [56, 57])\n    elif K == 59:\n        return all(x in test_tup for x in [57, 58])\n    elif K == 60:\n        return all(x in test_tup for x in [58, 59])\n    elif K == 61:\n        return all(x in test_tup for x in [59, 60])\n    elif K == 62:\n        return all(x in test_tup for x in [60, 61])\n    elif K == 63:\n        return all(x in test_tup for x in [61, 62])\n    elif K == 64:\n        return all(x in test_tup for x in [62, 63])\n    elif K == 65:\n        return all(x in test_tup for x in [63, 64])\n    elif K == 66:\n        return all(x in test_tup for x in [64, 65])\n    elif K == 67:\n        return all(x in test_tup for x in [65, 66])\n    elif K == 68:\n        return all(x in test_tup for x in [66, 67])\n    elif K == 69:\n        return all(x in test_tup for x in [67, 68])\n    elif K == 70:\n        return all(x in test_tup for x in [68, 69])\n    elif K == 71:\n        return all(x in test_tup for x in [69, 70])\n    elif K == 72:\n        return all(x in test_tup for x in [70, 71])\n    elif K == 73:\n        return all(x in test_tup for x in [71, 72])\n    elif K == 74:\n        return all(x in test_tup for x in [72, 73])\n    elif K == 75:\n        return all(x in test_tup for ",
        "num_ids": 2012
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) <= K:\n        return False\n    elif len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup2) < len(test_tup1):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n    \ndef test_sort_list():\n    test_tup1 = [5, 2, 3, 4, 1]\n    test_tup2 = [4, 3, 2, 1, 5]\n    assert check_smaller(test_tup1, test_tup2) == True\n    \n    test_tup1 = [5, 2, 3, 4, 1]\n    test_tup2 = [4, 2, 3, 1, 5]\n    assert check_smaller(test_tup1, test_tup2) == False\n",
        "num_ids": 202
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # return all if smaller than element of first tuple\n    if test_tup1[0] <= test_tup2[0]:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return True\n    elif test_tup1[1] > test_tup2[1]:\n        return True\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[1] < test_tup2[1]:\n        return True\n    elif test_tup1[0] > test_tup2[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 134
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your code here\n    # Validate your code here\n    pass\n",
        "num_ids": 19
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # code goes here\n    if test_tup2[0] < test_tup1[0]:\n        return False\n    if test_tup2[1] < test_tup1[1]:\n        return False\n    if test_tup2[2] < test_tup1[2]:\n        return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    for x in range(len(test_tup1)):\n        if test_tup2[x] < test_tup1[x]:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Replace None with the correct answer\n    if test_tup1[0] == None:\n        return (True, test_tup2[0])\n    elif test_tup2[0] == None:\n        return (True, test_tup1[0])\n",
        "num_ids": 68
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n",
        "num_ids": 34
    }
]