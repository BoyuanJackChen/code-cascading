[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # find the shared elements\n    tup_shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            tup_shared_elements.append(test_tup1[i])\n    return tup_shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize the shared elements list\n    shared_elements = []\n    # For each element in the first list\n    for element in test_tup1:\n        # For each element in the second list\n        for element2 in test_tup2:\n            # If the element is in the shared elements list\n            if element in element2:\n                # Append it to the shared elements list\n                shared_elements.append(element2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    num_elements_test1 = len(test_tup1)\n    num_elements_test2 = len(test_tup2)\n    for i in range(num_elements_test1):\n        for j in range(num_elements_test2):\n            if test_tup1[i] == test_tup2[j]:\n                return test_tup1[i]\n    return 'No elements match'\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    for el in l1:\n        if el in l2:\n            l2.remove(el)\n    return l2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1 == []:\n        return []\n    elif test_tup2 == []:\n        return []\n    elif test_tup1 == test_tup2:\n        return []\n    else:\n        tup_1 = test_tup1.copy()\n        tup_2 = test_tup2.copy()\n        while tup_1!= []:\n            first = tup_1[0]\n            tup_1 = tup_1[1:]\n            if first in tup_2:\n                tup_2.remove(first)\n                tup_2 = [tuple(tup_2)] + tup_2\n                tup_1 = [tuple(tup_1)]\n        return tup_2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # check if both lists have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # get the first list of the shared elements\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    # if no elements in the shared elements\n    if len(shared_elements) == 0:\n        return False\n    \n    # return the first element from the shared elements\n    return shared_elements[0]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1, test_list2 = zip(*test_tup1)\n    \n    common_ele = []\n    \n    for i in test_list1:\n        if i in test_list2:\n            common_ele.append(i)\n    \n    return common_ele\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #\n    # write your code here\n    #\n    shared_elements = 0\n    for index in range(len(test_tup1)):\n        if test_tup1[index] == test_tup2[index]:\n            shared_elements += 1\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    shared_elements = tup1.intersection(tup2)\n    if len(shared_elements) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_sqrt(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_inverse(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_sqrt_inverse(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    if n==2:\n        return True\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return n > 1 and n % 2 == 0\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    if n%2==0:\n        return False\n    if n==3:\n        return True\n    if n==4:\n        return False\n    if n==5:\n        return True\n    if n==6:\n        return False\n    if n==7:\n        return True\n    if n==8:\n        return False\n    if n==9:\n        return True\n    if n==10:\n        return False\n    if n==11:\n        return True\n    if n==12:\n        return False\n    if n==13:\n        return True\n    if n==14:\n        return False\n    if n==15:\n        return True\n    if n==16:\n        return False\n    if n==17:\n        return True\n    if n==18:\n        return False\n    if n==19:\n        return True\n    if n==20:\n        return False\n    if n==21:\n        return True\n    if n==22:\n        return False\n    if n==23:\n        return True\n    if n==24:\n        return False\n    if n==25:\n        return True\n    if n==26:\n        return False\n    if n==27:\n        return True\n    if n==28:\n        return False\n    if n==29:\n        return True\n    if n==30:\n        return False\n    if n==31:\n        return True\n    if n==32:\n        return False\n    if n==33:\n        return True\n    if n==34:\n        return False\n    if n==35:\n        return True\n    if n==36:\n        return False\n    if n==37:\n        return True\n    if n==38:\n        return False\n    if n==39:\n        return True\n    if n==40:\n        return False\n    if n==41:\n        return True\n    if n==42:\n        return False\n    if n==43:\n        return True\n    if n==44:\n        return False\n    if n==45:\n        return True\n    if n==46:\n        return False\n    if n==47:\n        return True\n    if n==48:\n        return False\n    if n==49:\n        return True\n    if n==50:\n        return False\n    if n==51:\n        return True\n    if n==52:\n        return False\n    if n==53:\n        return True\n    if n==54:\n        return False\n    if n==55:\n        return True\n    if n==56:\n        return False\n    if n==57:\n        return True\n    if n==58:\n        return False\n    if n==59:\n        return True\n    if n==60:\n        return False\n    if n==61:\n        return True\n    if n==62:\n        return False\n    if n==63:\n        return True\n    if n==64:\n        return False\n    if n==65:\n        return True\n    if n==66:\n        return False\n    if n==67:\n        return True\n    if n==68:\n        return False\n    if n==69:\n        return True\n    if n==70:\n        return False\n    if n==71:\n        return True\n    if n==72:\n        return False\n    if n==73:\n        return True\n    if n==74:\n        return False\n    if n==75:\n        return True\n    if n==76:\n        return False\n    if n==77:\n        return True\n    if n==78:\n        return False\n    if n==79:\n        return True\n    if n==80:\n        return False\n    if n==81:\n        return True\n    if n==82:\n        return False\n    if n==83:\n        return True\n    if n==84:\n        return False\n    if n==85:\n        return True\n    if n==86:\n        return False\n    if n==87:\n        return True\n    if n==88:\n        return False\n    if n==89:\n        return True\n    if n==90:\n        return False\n    if n==91:\n        return True\n    if n==92:\n        return False\n    if n==93:\n        return True\n    if n==94:\n        return False\n    if n==95:\n        return True\n    if n==96:\n        return False\n    if n==97:\n        return True\n    if n==98:\n        return False\n    if n==99:\n        return True\n    if n==100:\n        return False\n    if n==101:\n        return True\n    if n==102:\n        return False\n    if n==103:\n        return True\n    if n==104:\n        return False\n    if n==105:\n        return True\n    if n==106:\n        return False\n    if n==107:\n        return True\n    if n==108:\n        return False\n    if n==109:\n        return True\n    if n==110:\n        return False\n    if n==111:\n        return True\n    if n==112:\n        return False\n    if n==113:\n        return True\n    if n==114:\n        return False\n    if n==115:\n        return True\n    if n==116:\n        return False\n    if n==117:\n        return True\n    if n==118:\n        return False\n    if n==119:\n        return True\n    if n==120:\n        return False\n    if n==121:\n        return True\n    if n==122:\n        return False\n    if n==123:\n        return True\n    if n==124:\n        return False\n    if n==125:\n        return True\n    if n==126:\n        return False\n    if n==127:\n        return True\n    if n==128:\n        return False\n    if n==129:\n        return True\n    if n==130:\n        return False\n    if n==131:\n        return True\n    if n==132:\n        return False\n    if n==133:\n        return True\n    if n==134:\n        return False\n    if n==135:\n        return True\n    if n==136:\n        return False\n    if n==137:\n        return True\n    if n==138:\n        return False\n    if n==139:\n        return True\n    if n==140:\n        return False\n    if n==141:\n        return True\n    if n==142:\n        return False\n    if n==143:\n        return True\n    if n==144:\n        return False\n    if n==145:\n        return True\n    if n==146:\n        return False\n    if n==147:\n        return True\n    if n==148:\n        return False\n    if n==149:\n        return True\n    if n==150:\n        return False\n    if n==151:\n        return True\n    if n==152:\n        return False\n    if n==153:\n        return True\n    if n==154:\n        return False\n    if n==155:\n        return True\n    if n==156:\n        return False\n    if n==157:\n        return True\n    if n==158:\n        return False\n    if n==159:\n        return True\n    if n==160:\n        return False\n    if n==161:\n        return True\n    if n==162:\n        return False\n    if n==163:\n        return True\n    if n==164:\n        return False\n    if n==165:\n        return True\n    if n==166:\n        return False\n    if n==167:\n        return True\n    if n==168:\n        return False\n    if n==169:\n        return True\n    if n==170:\n        return False\n    if n==171:\n        return True\n    if n==172:\n        return False\n    if n==173:\n        return True\n    if n==174:\n        return False\n    if n==175:\n        return True\n    if n==176:\n        return False\n    if n==177:\n        return True\n    if n==178:\n        return False\n    if n==179:\n        return True\n    if n==180:\n        return False\n    if n==181:\n        return True\n    if n==182:\n        return False\n    if n==183:\n        return Tru"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return True\n    if n % 3 == 0:\n        return True\n    for i in range(5, math.floor(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v1(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v2(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v3(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v4(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v5(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v6(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v7(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v8(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v9(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v10(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v11(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v12(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    i=4\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\ndef is_prime_number_v13(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,-num)\n    return heap[n-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    hq.append((n,nums))\n    while len(hq)>0:\n        print(hq)\n        n=hq[0][1]\n        del hq[0]\n        hq.append((n,nums))\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq=[]\n    hq.append((n,nums))\n    while len(hq)>0:\n        print(hq)\n        n=hq[0][1]\n        del hq[0]\n        hq.append((n,-nums))\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_sorted(nums,n):\n    '''\n    Write a function to get the n largest integers from a given list of numbers, sorted in descending order.\n    '''\n    hq=[]\n    heapq.heapify(hq)\n    for i in nums:\n        heapq.heappush(hq,i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_rank(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers, sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_sorted(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_min(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in descending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_max(nums,n):\n    '''\n    Write a function to get the n largest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_min_first(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_max_first(nums,n):\n    '''\n    Write a function to get the n largest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_nums(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_nums_last(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_nums_first(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_heap_sorted_nums(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_sorted_nums(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_sorted_nums_last(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_sorted_nums_first(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_sorted_nums_first_first(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_sorted_nums_first_last(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    hq=[]\n    for i in nums:\n        heapq.heappush(hq,-i)\n        if len(hq)==n:\n            return heapq.nlargest(n,hq)\n    return []\ndef heap_queue_sorted_nums_first_first_first(nums,n):\n    '''\n    Write a function to get the n smallest integers from a given list of numbers sorted in ascending order.\n    '''\n    h"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    n = len(nums)\n    if n==0:\n        return []\n    if n==1:\n        return nums\n    \n    heap = []\n    heapq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,-num)\n    #k = 0\n    #for k in range(n-1,-1,-1):\n    #    heapq.heappop(heap)\n    heapq.heapify(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    hq=[]\n    hq.append(n)\n    \n    #create heap with a comparator to check if nums[index] is greater than the next element in heap\n    #if so, insert element in heap\n    #heapq.heapify(hq)\n    \n    for i in range(len(nums)):\n        if i+1 < len(nums):\n            if nums[i] > nums[i+1]:\n                heapq.heapify(hq)\n                heapq.heappush(hq,nums[i])\n                #heapq.heappush(hq,nums[i])\n    #print(hq)\n    return hq\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n == 0:\n        return []\n    h = [None]*n\n    hq.heapify(h)\n    k = 0\n    for i in range(n):\n        hq.heappushpop(h,nums[i])\n        k = max(k,nums[i])\n    for i in range(k-1,-1,-1):\n        heapq.heappop(h)\n    ans = []\n    for i in range(n):\n        ans.append(hq.heappop(h))\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,num)\n    for i in range(n-1,0,-1):\n        if heap[0]>heap[i]:\n            heapq.heappop(heap)\n        else:\n            heapq.heappush(heap,heap[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums.sort()\n    \n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    ans = []\n    while heap:\n        ans.append(heapq.heappop(heap))\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    heap=[]\n    for n in nums:\n        heapq.heappush(heap,-n)\n    result = []\n    for i in range(n-1,-1,-1):\n        result.append(heapq.heappop(heap))\n    return result\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    \n    heap=[]\n    for n in nums:\n        heapq.heappush(heap,n)\n    result = []\n    for i in range(n,0,-1):\n        result.append(heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    nums_sorted = sorted(nums, reverse=True)\n    heap = []\n    max_value = 0\n    heapq.heapify(heap)\n    for i in range(0,n):\n        heapq.heappush(heap, nums_sorted[i])\n        if len(heap) > max_value:\n            heapq.heapreplace(heap, nums_sorted[i])\n            max_value = len(heap)\n    return heap\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    nums_sorted = sorted(nums, reverse=True)\n    heap = []\n    min_value = nums_sorted[0]\n    heapq.heapify(heap)\n    for i in range(0,n):\n        heapq.heappush(heap, nums_sorted[i])\n        if len(heap) > min_value:\n            heapq.heappop(heap)\n            min_value = len(heap)\n    return heap\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    i=1\n    if x==0:\n        return True\n    while i<=10:\n        if x%i==0:\n            return False\n        i=i+1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x % 2\n    return not y\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2 : \n        return True\n    if x < 2 : \n        return False\n    for i in range (1, x//2) : \n        if x % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0: \n        return True \n    elif x == 0:\n        return False\n    else:\n        return x % 2 == 0\n    \nprint(is_Power_Of_Two(3)) # True\nprint(is_Power_Of_Two(9)) # False\nprint(is_Power_Of_Two(36)) # True\nprint(is_Power_Of_Two(-2)) # True\nprint(is_Power_Of_Two(1)) # Fals"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        x = -x\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x < 0:\n        x = -x\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        x = x * x\n        if x > 9:\n            x = x % 10\n    return x == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    for i in range(len(text)):\n        if text[i].isalpha() and text[i].isupper() and text[i].islower():\n            if text[i].isupper() == 'X':\n                continue\n            if len(text[i]) < 4:\n                continue\n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # pattern = re.compile(r\"[A-Za-z0-9_]\\w*\")\n    # wordlist = pattern.findall(text)\n    # wordlist = [word for word in wordlist if len(word) >= 4]\n    # return wordlist\n    # pattern = re.compile(r'\\w+')\n    # wordlist = pattern.findall(text)\n    # wordlist = [word for word in wordlist if len(word) >= 4]\n    # return wordlist\n    \n    # pattern = re.compile(r'\\w+')\n    # wordlist = pattern.findall(text)\n    # wordlist = [word for word in wordlist if len(word) >= 4]\n    # return wordlist\n    # wordlist = re.split('\\w+', text)\n    # return wordlist\n    \n    # pattern = re.compile(r'\\w+')\n    # wordlist = pattern.findall(text)\n    # wordlist = [word for word in wordlist if len(word) >= 4]\n    # return wordlist\n    \n    pattern = re.compile(r'\\w+')\n    wordlist = pattern.findall(text)\n    wordlist = [word for word in wordlist if len(word) >= 4]\n    return wordlist\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z]{4,}'\n    match = re.findall(pattern, text)\n    return match\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z0-9]{4,}'\n    match = re.findall(pattern, text)\n    return match\ndef find_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef find_last_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef find_url(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'https?://[a-zA-Z0-9\\-]+\\.?[a-zA-Z0-9]+\\.[a-z]{2,3}'\n    match = re.findall(pattern, text)\n    return match\ndef find_num_word(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef find_other_char(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[^a-zA-Z]*'\n    match = re.findall(pattern, text)\n    return match\ndef remove_stop_char(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_start_char(text):\n    '''\n    Write a function to remove all characters at the start of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_num_word(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_other_char(text):\n    '''\n    Write a function to remove all characters at the start of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_char(text):\n    '''\n    Write a function to extract all characters in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_word(text):\n    '''\n    Write a function to extract all words in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_last_char(text):\n    '''\n    Write a function to extract all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef remove_stop_char(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_start_char(text):\n    '''\n    Write a function to remove all characters at the start of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_num_word(text):\n    '''\n    Write a function to remove all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_other_char(text):\n    '''\n    Write a function to remove all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef remove_url(text):\n    '''\n    Write a function to remove all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9]+'\n    match = re.findall(pattern, text)\n    return match\ndef remove_space_char(text):\n    '''\n    Write a function to remove all characters at the end of a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_word(text):\n    '''\n    Write a function to extract all words in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef is_other_char(text):\n    '''\n    Write a function to extract all words which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_length(text):\n    '''\n    Write a function to extract all words in a string which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!-?\n    '''\n    pattern = r'[^a-zA-Z0-9!\\?]'\n    match = re.findall(pattern, text)\n    return match\ndef get_last_word(text):\n    '''\n    Write a function to extract all words in a string which are at least 4 characters long in a string which are not between a-z A-Z, 0-9 and/or!"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) >= 4:\n            res.append(i)\n    return res\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) <= 3:\n            res.append(i)\n    return res\ndef find_char_palindrome(text):\n    '''\n    Write a function to find all words which are a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1]:\n            res.append(i)\n    return res\ndef find_double_long(text):\n    '''\n    Write a function to find all words which are double the length of a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_double_short(text):\n    '''\n    Write a function to find all words which are double the length of a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_long_long(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) >= 3:\n            res.append(i)\n    return res\ndef find_long_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) >= 3:\n            res.append(i)\n    return res\ndef find_short_long(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) <= 3:\n            res.append(i)\n    return res\ndef find_short_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) <= 3:\n            res.append(i)\n    return res\ndef find_palindrome(text):\n    '''\n    Write a function to find all words which are a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1]:\n            res.append(i)\n    return res\ndef find_double_long_palindrome(text):\n    '''\n    Write a function to find all words which are double the length of a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_double_short_palindrome(text):\n    '''\n    Write a function to find all words which are double the length of a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_long_long_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            res.append(i)\n    return res\ndef find_long_short_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            res.append(i)\n    return res\ndef find_short_long_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            res.append(i)\n    return res\ndef find_short_short_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            res.append(i)\n    return res\ndef find_long_short_palindrome_odd(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            if len(i) % 2 == 1:\n                res.append(i)\n    return res\ndef find_long_short_palindrome_even(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            if len(i) % 2 == 0:\n                res.append(i)\n    return res\ndef find_long_short_palindrome_odd_even(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            if len(i) % 2 == 0 and len(i) % 2 == 1:\n                res.append(i)\n    return res\ndef find_long_long_palindrome_even_odd(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            if len(i) % 2 == 0:\n                res.append(i)\n    return res\ndef find_palindrome_palindrome_palindrome(text):\n    '''\n    Write a function to find all words which are a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1]:\n            res.append(i)\n    return res\ndef find_long_long_palindrome_odd_even(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            if len(i) % 2 == 0:\n                res.append(i)\n    return res\ndef find_long_long_palindrome_even_odd(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            i"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w+\\w+')\n    matched_text = pattern.findall(text)\n    return matched_text\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z]{4,}'\n    text = re.sub(pattern, '', text)\n    res = []\n    for word in text.split():\n        if len(word) < 4:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all possible words\n    all_words = []\n    for x in range(1, len(text) - 1):\n        for y in range(x):\n            for z in range(y + 1, len(text)):\n                for w in range(z + 1, len(text)):\n                    if len(text[x:y]) < 4:\n                        if text[y:z] == text[z:w]:\n                            all_words.append(text[x:y])\n    # remove repeated words\n    all_words = set(all_words)\n    all_words = list(all_words)\n    # remove duplicate words\n    all_words = list(dict.fromkeys(all_words))\n    # if length is not enough, pad it with a dummy word\n    if len(all_words) < 4:\n        for x in range(len(all_words) - len(all_words) % 4):\n            all_words.append('dummy')\n    # sort by length\n    all_words = sorted(all_words, key=len)\n    # return list\n    return all_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r\"(?<=\\w)\\w+\\b\"\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # pattern = r'[^\\w\\s]\\w*'\n    # return re.findall(pattern, text)\n    return re.findall('\\w*\\w', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[a-zA-Z ]{4,}'\n    for word in re.findall(pattern, text):\n        print(word)\n        \ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    pattern = r'[A-Za-z ]{4,}'\n    for word in re.findall(pattern, text):\n        print(word)\n        \ndef find_digit(text):\n    '''\n    Write a function to find all words which are at least 4 digits in a string.\n    '''\n    pattern = r'[0-9]{4,}'\n    for word in re.findall(pattern, text):\n        print(word)\n        \ndef find_words(text):\n    '''\n    Write a function to find all words which start with a word.\n    '''\n    pattern = r'[a-zA-Z ]+'\n    for word in re.findall(pattern, text):\n        print(word)\n        \ndef find_cap_words(text):\n    '''\n    Write a function to find all words which start with a capital letter.\n    '''\n    pattern = r'[A-Za-z ]'\n    for word in re.findall(pattern, text):\n        print(word)\n        \ndef find_cap_long(text):\n    '''\n    Write a function to find all words which start with a capital letter and end with a letter.\n    '''\n    pattern = r'[A-Za-z ]{3,}'\n    for word in re.findall(pattern, text):\n        print(word)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num**2)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for number in nums:\n        squares.append(number**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # write your code here\n    sum=0\n    for i in range(len(nums)):\n        sum+=nums[i]**2\n    return sum\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Base Case\n    if nums == []:\n        return []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    for i in range(0,len(str)-1):\n        if str[i]==str[i+1]:\n            rotations=rotations+1\n        else:\n            return rotations\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = {}\n    for r in range(1, len(str)):\n        if str[r] not in rotations:\n            rotations[str[r]] = 0\n        rotations[str[r]] += 1\n    max_rotations = 0\n    for rotation in rotations:\n        if rotations[rotation] > max_rotations:\n            max_rotations = rotations[rotation]\n    return max_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print(str.count('x'))\n    if str.count('x')>0:\n        rotations=str.count('x')\n    else:\n        rotations=0\n    \n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l=len(str)\n    if l<2:\n        return 0\n    max_rot = 0\n    rotations=0\n    for i in range(1,l):\n        if i%2==0:\n            new_str=str[i-1]+str[i]\n            rotations+=1\n        else:\n            new_str=str[i-1]+str[i+1]\n        max_rot=max(max_rot,rotations)\n    return max_rot\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if (str == None): return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    # Base Cases \n    if n <= 1: \n        return 1\n    # Checks for permutation \n    if n == 2: \n        return 1\n    # Count \n    count = 0\n    # Initialize \n    if n == 3: \n        # Check for left rotations \n        for i in range(n): \n            if str[i]!= str[i + 1]: \n                count += 1\n        # Check for right rotations \n        for i in range(n - 2): \n            if str[i]!= str[i + 2]: \n                count += 1\n        return count \n    # Compute left rotations \n    left = find_Rotations(str[:n//2]) \n    # Compute right rotations \n    right = find_Rotations(str[n//2:]) \n    # Increment count \n    count = left + right \n    return count \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rots = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            rots += 1\n    return rotos\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if str is None or str == '':\n        return -1\n    stack = []\n    rotations = 0\n    for c in str:\n        if c not in stack:\n            stack.append(c)\n        elif stack.pop() == c:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s == None or len(s) == 0:\n        return None\n    # if the character is not in the string and is not there in the string return None\n    elif ch not in s and ch not in s[0]:\n        return None\n    # if the character is in the string or if there is a character in the string\n    elif ch in s[0]:\n        return remove_Occ(s[0],ch)\n    else:\n        return remove_Occ(s[1:],ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch_set = set(s)\n    return ch_set.pop(),ch_set.pop()\n    \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    pass # replace with your code\n    "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #Use O(n) time to do this\n    n=len(s)\n    if n==0:\n        return \"\"\n    if s[0]==ch:\n        s=s[1:]\n    if s[-1]==ch:\n        s=s[:-1]\n    return s\n    \n    "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = ch.lower()\n    if not s:\n        raise ValueError\n    s1 = list(s)\n    s2 = list(s)\n    l = len(s)\n    for i in range(l):\n        if s[i]!= ch:\n            s2[i] = s[i]\n    s1[0] = s1[0].upper()\n    s1[-1] = s1[-1].lower()\n    s = ''.join(s1+s2)\n    if s == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    k = s[0:ch]\n    s = s[ch:]\n    return k,s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    '''\n    Write your code here\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Your code here\n    # if ch not in s:\n    #     return 'Invalid character'\n    # return s.replace(ch,'')\n    return s.replace(ch,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Write your code here\n    \n    ch = ch.lower()\n    \n    if ch=='a':\n        return s[1:len(s)-1]\n    elif ch=='e':\n        return s[0:len(s)-1]\n    elif ch=='i':\n        return s[1:len(s)-1]\n    else:\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    if N == 0:\n        return M\n    ind = 0\n    for i in range(0, N):\n        ind += M[i][0]\n        M[i][0] = ind\n    # sort rows\n    for i in range(0, N):\n        for j in range(1, N):\n            M[i][j] = M[i][j] + M[i][0]\n    # sort columns\n    for i in range(0, N):\n        for j in range(0, N):\n            M[i][j] = M[i][j] + M[0][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    for i in range(0, N):\n        for j in range(0, N-i-1):\n            if M[j][i] > M[j+1][i]:\n                temp = M[j][i]\n                M[j][i] = M[j+1][i]\n                M[j+1][i] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    M=sorted(M, key=lambda x:x[0])\n    M.sort(key=lambda x:x[1])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if M[i][j] == 0:\n                continue\n            if M[i][j] < M[i][j-1]:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n            else:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n    return M\n    \n    \ndef print_matrix(M):\n    '''\n    Write a function that prints a given matrix according to its input.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            print(M[i][j], end=\" \")\n        print()\n    \n    \ndef remove_taken_rows(M):\n    '''\n    Write a function that removes the rows from a given matrix that are taken by the same numbers.\n    '''\n    for i in range(len(M)-1, -1, -1):\n        if M[i][0] == M[i][1] == M[i][2]:\n            M.pop(i)\n            return\n    \n    \ndef inverse(M):\n    '''\n    Write a function that returns the inverse of a given matrix.\n    '''\n    n = len(M)\n    M_inverse = []\n    for i in range(n):\n        M_inverse.append([0]*n)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                M_inverse[i][j] = 1\n            else:\n                M_inverse[i][j] = M[j][i] / M[i][i]\n    return M_inverse\n    \n    \ndef sum_of_numbers(M):\n    '''\n    Write a function that returns the sum of all numbers in a matrix.\n    '''\n    S = 0\n    for i in range(len(M)):\n        S += M[i][i]\n    return S\n    \n    \ndef run(M):\n    M = sort_matrix(M)\n    print_matrix(M)\n    print(f\"The sum of the numbers in the matrix is {sum_of_numbers(M)}\")\n    M = remove_taken_rows(M)\n    print_matrix(M)\n    print(f\"The matrix after removing the numbers which were taken by the same numbers is {inverse(M)}\")\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #create a matrix of the given size.\n    M = Matrix(M)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = [row[:] for row in M]\n    for i in range(len(matrix)):\n        matrix[i][0] = matrix[i][0]/sum(matrix[i][1:])\n    return matrix"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    size = len(M)\n    for row in range(size):\n        for col in range(size-row-1):\n            if M[col][row] > M[col+1][row]:\n                temp = M[col][row]\n                M[col][row] = M[col+1][row]\n                M[col+1][row] = temp\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = list(M)\n    for i in range(len(M)):\n        for j in range(i + 1, len(M)):\n            if M[i][j] > M[i][j-1]:\n                M[i], M[j] = M[j], M[i]\n    M.sort(key = lambda x : sum(x))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    L = len(M)\n    for i in range(L):\n        M[i].sort(reverse = True)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = 0\n    while m < n:\n        if sum(M[m]) >= n:\n            M[m], M[n] = M[n], M[m]\n            n -= 1\n            m += 1\n        else:\n            m += 1\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*h) / 3\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = b**2 - 4*a*b\n    b = 2*a*b\n    c = 2*a*h\n    d = b**2 + 4*c*b\n    print(d)\n    if d == 0:\n        print(\"Triangle with known height\")\n    elif d > 0:\n        print(\"Triangle with known height and volume\")\n    else:\n        print(\"Triangle with known height and volume, but it is negative\")\n    return\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = l + h\n    b = b + h\n    h = (b-l)/2\n    v = (b**2-l**2)**0.5\n    return v*h\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*(b*h)/2)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Verifies that the arguments are valid\n    try:\n        # Three parameters are used to check the validity of the arguments\n        if isinstance(l, (float, int, complex)) == False or isinstance(b, (float, int, complex)) == False or isinstance(h, (float, int, complex)) == False :\n            raise Exception\n        # A valid integer argument is provided\n        else:\n            # Creating a variable that holds the value of the volume of the triangle\n            volume = (l*b)+(h*(l+h))+(h*l)+(l*b)\n            # Returns the value of the volume\n            return volume\n    # An exception is raised if any argument is not a valid integer\n    except Exception:\n        # Prints a message if an exception occurs\n        print(\"Please enter a valid integer for the parameters l,b,h\")\n        # Calls the function again and prints a message\n        return find_Volume(l,b,h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*(l+h))/2\n    print(\"The volume of a triangular prism is : \", volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    v = math.sqrt((l**2+b**2)**2+(h**2+b**2)**2)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return b*b*(2*(l+h)-(l+h+b))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l=l*(1-2*b)\n    h=h*(1-2*b)\n    \n    print('the volume of a triangular prism is',l,'lumen')\n    print('the volume of a triangle prism is',h,'lumen')\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = 0\n    for i in range(b,h) : \n        for j in range(b,i+1) : \n            for k in range(b,j+1) : \n                vol += math.sqrt((k-i)**2 + (j-b)**2 + (k-b)**2)\n    return vol\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.sub(\"[a-zA-Z]\", lambda x: x.group(), text)\n    return s.lower().startswith(\"_\")\ndef is_number(s):\n    '''\n    Write a function to check whether the input string is a valid Roman numeral.\n    '''\n    if s[0] == '0' and len(s) > 1:\n        return False\n    if s[-1]!= '0':\n        return False\n    for i in range(len(s)-1, -1, -1):\n        if s[i] in '0123456789':\n            return False\n    return True\ndef is_valid(text):\n    '''\n    Write a function to check whether the input string is a valid Roman numeral.\n    '''\n    if text[0] == '0' and len(text) > 1:\n        return False\n    if text[-1]!= '0':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in '0123456789':\n            return False\n    return True\ndef add_code(text):\n    '''\n    Write a function to add a number to every element in the input text.\n    '''\n    for i in range(len(text)):\n        text[i] = text[i] + '9'\ndef is_vowel(s):\n    '''\n    Write a function to check whether the input string is a valid vowel.\n    '''\n    vowels = ['a','e','i','o','u']\n    for i in range(len(s)-1, -1, -1):\n        if s[i] in vowels:\n            return False\n    return True\ndef remove_space(text):\n    '''\n    Write a function to remove the spaces from the input text.\n    '''\n    text = re.sub(r'^\\s+','', text)\n    text = re.sub(r'\\s+$', '', text)\n    return text\ndef is_capitalized(s):\n    '''\n    Write a function to check whether the input string is a valid capitalized string.\n    '''\n    if s[0] =='':\n        return False\n    for i in range(len(s)-1, -1, -1):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\ndef is_latin(text):\n    '''\n    Write a function to check whether the input string is a valid latin string.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\ndef is_alphabet(text):\n    '''\n    Write a function to check whether the input string is a valid alphabet.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\ndef is_valid_hiragana(text):\n    '''\n    Write a function to check whether the input string is a valid Hiragana.\n    '''\n    if not text[0].isupper() or text[-1] not in 'aeiou':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'aeiou':\n            return False\n    return True\ndef is_valid_katakana(text):\n    '''\n    Write a function to check whether the input string is a valid katakana.\n    '''\n    if not text[0].isupper() or text[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\ndef is_valid_cjk(text):\n    '''\n    Write a function to check whether the input string is a valid CJK.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'aeiou':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'aeiou':\n            return False\n    for i in range(len(text)-2, -1, -1):\n        if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    for i in range(len(text)-3, -1, -1):\n        if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\ndef is_valid_ascii(text):\n    '''\n    Write a function to check whether the input string is a valid ASCII.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\ndef is_valid_kana(text):\n    '''\n    Write a function to check whether the input string is a valid kana.\n    '''\n    if not text[0].isupper() or text[-1] not in 'aeiou':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'aeiou':\n            return False\n    return True\ndef is_valid_japanese(text):\n    '''\n    Write a function to check whether the input string is a valid Japanese string.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'abcdefghijklmnopqrstuvwxyz':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\ndef is_valid_motor(text):\n    '''\n    Write a function to check whether the input string is a valid motor.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'aeiou':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'aeiou':\n            return False\n    return True\ndef is_valid_japanese_latin(text):\n    '''\n    Write a function to check whether the input string is a valid Japanese string in Latin.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'aeiou':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'aeiou':\n            return False\n    return True\ndef is_valid_hiragana_latin(text):\n    '''\n    Write a function to check whether the input string is a valid Hiragana in Latin.\n    '''\n    if not text[0].isalpha() or text[-1] not in 'aeiou':\n        return False\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in 'aeiou':\n            return False\n    return True\ndef is_valid_katakana_latin(text):\n    '''\n    Write a function to check whether the input string is a valid katakana in Latin.\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.search('[a-zA-Z0-9_]', text)\n    result = result.group()\n    result = result.lower()\n    result = result.replace(\"_\",\"\")\n    result = result.lower()\n    result = result.replace(\" \",\"\")\n    result = result.lower()\n    result = result.replace(\"'\",\"\")\n    result = result.replace(\" \",\"\")\n    result = result.replace(\"-\",\"\")\n    result = result.replace(\".\", \"\")\n    result = result.replace(\",\", \"\")\n    result = result.replace(\".\", \"\")\n    result = result.replace(\"(\",\"\")\n    result = result.replace(\")\",\"\")\n    result = result.replace(\"&\",\"\")\n    result = result.replace(\"&\",\"\")\n    result = result.replace(\"[\",\"\")\n    result = result.replace(\"]\",\"\")\n    result = result.replace(\"{\",\"\")\n    result = result.replace(\"}\",\"\")\n    result = result.replace(\"\\'\",\"\")\n    result = result.replace(\"\\\"\",\"\")\n    result = result.replace(\"'\",\"\")\n    result = result.replace(\" \",\"\")\n    result = result.replace(\"_\",\"\")\n    result = result.replace(\" \", \"\")\n    result = result.replace(\"-\",\"\")\n    result = result.replace(\".\",\"\")\n    result = result.replace(\"\\n\",\"\")\n    result = result.replace(\"\\t\",\"\")\n    result = result.replace(\"\\t\",\"\")\n    result = result.replace(\"\\r\",\"\")\n    result = result.replace(\"\\r\",\"\")\n    result = result.replace(\"\\f\",\"\")\n    result = result.replace(\"\\n\",\"\")\n    result = result.replace(\"\\t\",\"\")\n    result = result.replace(\"\\r\",\"\")\n    result = result.replace(\"\\f\",\"\")\n    result = result.replace(\"<\",\"\")\n    result = result.replace(\">\",\"\")\n    return result\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print(text)\n    if text.count(' ')!= 0:\n        print(\"Input is not a string.\")\n        return False\n    else:\n        if not re.search(r'[a-z]+_[a-z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[A-Z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[A-Z]+_[A-Z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[0-9]+', text):\n            print(\"Input is not a string.\")\n            return False\n        else:\n            return True\n    "
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for char in text:\n        if char.isalpha():\n            return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text:\n        return False\n    for i in text.split('_'):\n        if not text_lowercase_underscore(i):\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # for word in text.lower().split():\n    #     if not(word.startswith('@') or word.startswith('_') or word.startswith('-') or word.startswith('+') or word.startswith('~') or word.startswith('!') or word.startswith('.') or word.isalpha() or word == '_') :\n    #         return False\n    # return True\n    return any(c.isalpha() or c == '_' for c in text) or any(c.isalpha() or c == '_' for c in text.lower())\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #You may assume that all characters in the input string are lowercase letters.\n    \n    #Remove spaces from both ends.\n    text = re.sub(\" +\", \" \", text)\n    \n    #Check if it's lowercase or uppercase.\n    if text.isalpha():\n        return True\n    else:\n        return False\n    \n    \ndef is_vowel(word):\n    '''\n    Returns true if the word is a vowel.\n    '''\n    \n    return word.isalpha() and word.lower() in \"aeiou\"\n    \n    \ndef letters_in_string(text):\n    '''\n    Returns a list of letters in a string.\n    '''\n    \n    result = []\n    for letter in text:\n        if letter.isalpha():\n            result.append(letter)\n    \n    return result\n    \n    \ndef is_anagram(a, b):\n    '''\n    Returns true if the two strings are anagrams.\n    '''\n    \n    a = letters_in_string(a)\n    b = letters_in_string(b)\n    \n    if len(a)!= len(b):\n        return False\n    \n    for letter in a:\n        if letter not in b:\n            return False\n        \n    for letter in b:\n        if letter not in a:\n            return False\n        \n    return True\n    \n    \ndef is_anagrams(a, b):\n    '''\n    Returns a list of anagrams.\n    '''\n    \n    anagrams = []\n    \n    a = letters_in_string(a)\n    b = letters_in_string(b)\n    \n    for i in a:\n        if i not in b:\n            anagrams.append(i)\n    \n    for j in b:\n        if j not in a:\n            anagrams.append(j)\n    \n    return anagrams\n    \n    \ndef is_valid_password(password):\n    '''\n    Returns true if the given password is a valid password, false otherwise.\n    '''\n    \n    return is_valid_lowercase(password) and is_valid_uppercase(password) and is_valid_num(password) and is_valid_vowel(password)\n    \n    \ndef is_valid_lowercase(password):\n    '''\n    Returns true if the password is lowercase and contains only letters.\n    '''\n    \n    if not is_vowel(password):\n        return False\n    \n    if not text_lowercase_underscore(password):\n        return False\n    \n    return True\n    \n    \ndef is_valid_uppercase(password):\n    '''\n    Returns true if the password is uppercase and contains only letters.\n    '''\n    \n    if not is_vowel(password):\n        return False\n    \n    if not text_lowercase_underscore(password):\n        return False\n    \n    return True\n    \n    \ndef is_valid_num(password):\n    '''\n    Returns true if the password is a number and contains only numbers.\n    '''\n    \n    if not is_vowel(password):\n        return False\n    \n    if not text_lowercase_underscore(password):\n        return False\n    \n    return True\n    \n    \ndef is_valid_vowel(password):\n    '''\n    Returns true if the password contains a vowel.\n    '''\n    \n    if not is_vowel(password):\n        return False\n    \n    if not text_lowercase_underscore(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_valid(password):\n    '''\n    Returns true if the given password is valid.\n    '''\n    \n    return is_valid_password(password) and is_valid_lowercase(password) and is_valid_uppercase(password) and is_valid_num(password) and is_valid_vowel(password)\n    \n    \ndef is_password_invalid(password):\n    '''\n    Returns true if the given password is invalid.\n    '''\n    \n    return is_password_invalid_vowel(password) and is_password_invalid_num(password) and is_password_invalid_num(password) and is_password_invalid_uppercase(password) and is_password_invalid_lowercase(password) and is_password_invalid_vowel(password)\n    \n    \ndef is_password_invalid_lowercase(password):\n    '''\n    Returns true if the given password is invalid lowercase.\n    '''\n    \n    return is_password_invalid_num(password) and is_password_invalid_lowercase_num(password)\n    \n    \ndef is_password_invalid_num(password):\n    '''\n    Returns true if the given password is invalid num.\n    '''\n    \n    return is_password_invalid_num_vowel(password) and is_password_invalid_num_lowercase(password) and is_password_invalid_num_uppercase(password)\n    \n    \ndef is_password_invalid_num_vowel(password):\n    '''\n    Returns true if the given password is invalid num vowel.\n    '''\n    \n    if not is_vowel(password):\n        return False\n    \n    if not text_lowercase_underscore(password):\n        return False\n    \n    if not is_password_invalid_num_upper(password):\n        return False\n    \n    if not is_password_invalid_num_lower(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_invalid_num_upper(password):\n    '''\n    Returns true if the given password is invalid num upper.\n    '''\n    \n    if not is_password_invalid_num_lower(password):\n        return False\n    \n    if not is_password_invalid_num_num(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_invalid_num_lower(password):\n    '''\n    Returns true if the given password is invalid num lower.\n    '''\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    if not is_password_invalid_num_num(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_invalid_num_num(password):\n    '''\n    Returns true if the given password is invalid num num.\n    '''\n    \n    if not is_password_invalid_num_upper(password):\n        return False\n    \n    if not is_password_invalid_num_num_lower(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_invalid_num_upper(password):\n    '''\n    Returns true if the given password is invalid num upper.\n    '''\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_invalid_num_lower(password):\n    '''\n    Returns true if the given password is invalid num lower.\n    '''\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_invalid_num_vowel(password):\n    '''\n    Returns true if the given password is invalid num vowel.\n    '''\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    return True\n    \n    \ndef is_password_invalid_num_upper(password):\n    '''\n    Returns true if the given password is invalid num upper.\n    '''\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    if not is_password_invalid_num(password):\n        return False\n    \n    return True\n    \n    \nde"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    regex_lst = re.findall(\"[a-z]\", text)\n    regex_lst_2 = re.findall(\"[A-Z]\", text)\n    regex_lst_3 = re.findall(\"[0-9]\", text)\n    regex_lst_4 = re.findall(\"[A-Z]\", text)\n    regex_lst_5 = re.findall(\"[a-z]\", text)\n    regex_lst_6 = re.findall(\"[A-Z]\", text)\n    regex_lst_7 = re.findall(\"[0-9]\", text)\n    regex_lst_8 = re.findall(\"[A-Z]\", text)\n    regex_lst_9 = re.findall(\"[a-z]\", text)\n    regex_lst_10 = re.findall(\"[0-9]\", text)\n    regex_lst_11 = re.findall(\"[A-Z]\", text)\n    regex_lst_12 = re.findall(\"[a-z]\", text)\n    regex_lst_13 = re.findall(\"[A-Z]\", text)\n    regex_lst_14 = re.findall(\"[0-9]\", text)\n    regex_lst_15 = re.findall(\"[A-Z]\", text)\n    regex_lst_16 = re.findall(\"[a-z]\", text)\n    regex_lst_17 = re.findall(\"[0-9]\", text)\n    regex_lst_18 = re.findall(\"[A-Z]\", text)\n    regex_lst_19 = re.findall(\"[a-z]\", text)\n    regex_lst_20 = re.findall(\"[0-9]\", text)\n    regex_lst_21 = re.findall(\"[A-Z]\", text)\n    regex_lst_22 = re.findall(\"[a-z]\", text)\n    regex_lst_23 = re.findall(\"[0-9]\", text)\n    regex_lst_24 = re.findall(\"[A-Z]\", text)\n    regex_lst_25 = re.findall(\"[a-z]\", text)\n    regex_lst_26 = re.findall(\"[0-9]\", text)\n    regex_lst_27 = re.findall(\"[A-Z]\", text)\n    regex_lst_28 = re.findall(\"[a-z]\", text)\n    regex_lst_29 = re.findall(\"[0-9]\", text)\n    regex_lst_30 = re.findall(\"[A-Z]\", text)\n    regex_lst_31 = re.findall(\"[0-9]\", text)\n    regex_lst_32 = re.findall(\"[A-Z]\", text)\n    regex_lst_33 = re.findall(\"[0-9]\", text)\n    regex_lst_34 = re.findall(\"[A-Z]\", text)\n    regex_lst_35 = re.findall(\"[a-z]\", text)\n    regex_lst_36 = re.findall(\"[0-9]\", text)\n    regex_lst_37 = re.findall(\"[A-Z]\", text)\n    regex_lst_38 = re.findall(\"[a-z]\", text)\n    regex_lst_39 = re.findall(\"[0-9]\", text)\n    regex_lst_40 = re.findall(\"[A-Z]\", text)\n    regex_lst_41 = re.findall(\"[0-9]\", text)\n    regex_lst_42 = re.findall(\"[A-Z]\", text)\n    regex_lst_43 = re.findall(\"[a-z]\", text)\n    regex_lst_44 = re.findall(\"[0-9]\", text)\n    regex_lst_45 = re.findall(\"[A-Z]\", text)\n    regex_lst_46 = re.findall(\"[a-z]\", text)\n    regex_lst_47 = re.findall(\"[0-9]\", text)\n    regex_lst_48 = re.findall(\"[A-Z]\", text)\n    regex_lst_49 = re.findall(\"[a-z]\", text)\n    regex_lst_50 = re.findall(\"[0-9]\", text)\n    regex_lst_51 = re.findall(\"[A-Z]\", text)\n    regex_lst_52 = re.findall(\"[0-9]\", text)\n    regex_lst_53 = re.findall(\"[A-Z]\", text)\n    regex_lst_54 = re.findall(\"[a-z]\", text)\n    regex_lst_55 = re.findall(\"[0-9]\", text)\n    regex_lst_56 = re.findall(\"[A-Z]\", text)\n    regex_lst_57 = re.findall(\"[0-9]\", text)\n    regex_lst_58 = re.findall(\"[A-Z]\", text)\n    regex_lst_59 = re.findall(\"[a-z]\", text)\n    regex_lst_60 = re.findall(\"[0-9]\", text)\n    regex_lst_61 = re.findall(\"[A-Z]\", text)\n    regex_lst_62 = re.findall(\"[0-9]\", text)\n    regex_lst_63 = re.findall(\"[A-Z]\", text)\n    regex_lst_64 = re.findall(\"[a-z]\", text)\n    regex_lst_65 = re.findall(\"[0-9]\", text)\n    regex_lst_66 = re.findall(\"[A-Z]\", text)\n    regex_lst_67 = re.findall(\"[0-9]\", text)\n    regex_lst_68 = re.findall(\"[A-Z]\", text)\n    regex_lst_69 = re.findall(\"[a-z]\", text)\n    regex_lst_70 = re.findall(\"[0-9]\", text)\n    regex_lst_71 = re.findall(\"[A-Z]\", text)\n    regex_lst_72 = re.findall(\"[0-9]\", text)\n    regex_lst_73 = re.findall(\"[A-Z]\", text)\n    regex_lst_74 = re.findall(\"[a-z]\", text)\n    regex_lst_75 = re.findall(\"[0-9]\", text)\n    regex_lst_76 = re.findall(\"[A-Z]\", text)\n    regex_lst_77 = re.findall(\"[a-z]\", text)\n    regex_lst_78 = re.findall(\"[0-9]\", text)\n    regex_lst_79 = re.findall(\"[A-Z]\", text)\n    regex_lst_80 = re.findall(\"[0-9]\", text)\n    regex_lst_81 = re.findall(\"[A-Z]\", text)\n    regex_lst_82 = re.findall(\"[a-z]\", text)\n    regex_lst_83 = re.findall(\"[0-9]\", text)\n    regex_lst_84 = re.findall(\"[A-Z]\", text)\n    regex_lst_85 = re.findall(\"[0-9]\", text)\n    regex_lst_86 = re.findall(\"[A-Z]\", text)\n    regex_lst_87 = re.findall(\"[a-z]\""
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    output = re.search('[a-zA-Z][A-Z][a-zA-Z_][A-Za-z_][A-Z0-9_]*', text)\n    return output!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Initialize an empty list to be used to check the string for uppercase letters\n    lowercase_letters_list = []\n    # Iterate through the characters of the string\n    for char in text:\n        if char.isalpha():\n            lowercase_letters_list.append(char)\n    # Check if the lowercase letters list is empty\n    if lowercase_letters_list == []:\n        return False\n    # Check if the list is not empty\n    if lowercase_letters_list == []:\n        return False\n    # Check if the list is still not empty\n    if lowercase_letters_list == []:\n        return False\n    # Create a new list of the lowercase letters that appear in the string\n    lowercase_letters_list = list(lowercase_letters_list)\n    # Remove all lowercase letters from the list\n    lowercase_letters_list = lowercase_letters_list[1:]\n    # Iterate through the list and check the list for the same characters\n    for char in lowercase_letters_list:\n        if lowercase_letters_list.count(char) > 1:\n            return False\n    # Check if the string contains all of the uppercase letters and if not return false\n    for char in lowercase_letters_list:\n        if lowercase_letters_list.count(char) == len(lowercase_letters_list):\n            return False\n    # Check if the string contains all of the lowercase letters and if not return false\n    for char in lowercase_letters_list:\n        if lowercase_letters_list.count(char) == len(lowercase_letters_list):\n            return False\n    # Create a new list of the lowercase letters that are not in the string\n    for char in lowercase_letters_list:\n        lowercase_letters_list.remove(char)\n    # Check if the list contains all of the uppercase letters and if not return false\n    for char in lowercase_letters_list:\n        if lowercase_letters_list.count(char) == len(lowercase_letters_list):\n            return False\n    # Check if the string contains all of the lowercase letters and if not return false\n    for char in lowercase_letters_list:\n        if lowercase_letters_list.count(char) == len(lowercase_letters_list):\n            return False\n    # Create a new list of the lowercase letters that are not in the string\n    for char in lowercase_letters_list:\n        lowercase_letters_list.remove(char)\n    # Check if the string contains all of the uppercase letters and if not return false\n    for char in lowercase_letters_list:\n        if lowercase_letters_list.count(char) == len(lowercase_letters_list):\n            return False\n    # Return true if there are no lowercase letters in the string\n    if lowercase_letters_list == []:\n        return True\n    # Return false otherwise\n    return False\ndef text_lowercase_digits(text):\n    '''\n    Write a function that returns true if the input string contains sequences of digits.\n    '''\n    # Initialize an empty list to be used to check the string for digits\n    digits_list = []\n    # Iterate through the characters of the string\n    for char in text:\n        if char.isdigit():\n            digits_list.append(char)\n    # Check if the list is empty\n    if digits_list == []:\n        return False\n    # Check if the list is not empty\n    if digits_list == []:\n        return False\n    # Check if the list is not empty\n    if digits_list == []:\n        return False\n    # Check if the list contains only digits\n    if digits_list == []:\n        return False\n    # Check if the list contains all digits\n    if digits_list == []:\n        return False\n    # Create a new list of the digits that appear in the string\n    digits_list = list(digits_list)\n    # Remove all digits from the list\n    digits_list = digits_list[1:]\n    # Iterate through the list and check the list for digits\n    for char in digits_list:\n        if digits_list.count(char) > 1:\n            return False\n    # Check if the string contains all digits\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Check if the string contains all digits and if not return false\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Check if the string contains all digits and if not return false\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Create a new list of the digits that appear in the string\n    for char in digits_list:\n        digits_list.remove(char)\n    # Check if the list contains all digits\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Check if the string contains all digits and if not return false\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Create a new list of the digits that are not in the string\n    for char in digits_list:\n        digits_list.remove(char)\n    # Check if the list contains all digits and if not return false\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Check if the string contains all digits and if not return false\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Create a new list of the digits that are not in the string\n    for char in digits_list:\n        digits_list.remove(char)\n    # Check if the string contains all digits and if not return false\n    for char in digits_list:\n        if digits_list.count(char) == len(digits_list):\n            return False\n    # Return true if there are no digits in the string\n    if digits_list == []:\n        return True\n    # Return false otherwise\n    return False\ndef text_lowercase_forsubstitution(text):\n    '''\n    Write a function that returns true if the input string contains sequences of forsubstitution letters.\n    '''\n    # Initialize an empty list to be used to check the string for forsubstitution letters\n    forsubstitution_letters_list = []\n    # Iterate through the characters of the string\n    for char in text:\n        if char.isalpha():\n            forsubstitution_letters_list.append(char)\n    # Check if the list is empty\n    if frosubstitution_letters_list == []:\n        return False\n    # Check if the list is not empty\n    if frosubstitution_letters_list == []:\n        return False\n    # Check if the list is not empty\n    if frosubstitution_letters_list == []:\n        return False\n    # Check if the list contains only forsubstitution letters and if not return false\n    if frosubstitution_letters_list == []:\n        return False\n    # Check if the list contains all forsubstitution letters and if not return false\n    for char in frosubstitution_letters_list:\n        if frosubstitution_letters_list.count(char) > 1:\n            return False\n    # Check if the string contains all of the forsubstition letters and if not return false\n    for char in frosubstitution_letters_list:\n        if frosubstitution_letters_list.count(char) == len(forsubstitution_letters_list):\n            return False\n    # Check if the string contains all of the forsubstition letters and if not return false\n    for char in frosubstitution_letters_list:\n        if frosubstitution_letters_list.count(char) == len(forsubstitution_letters_list):\n            return False\n    # Create a new list of the forsubstition letters that are not in the string\n    for char in frosubstitution_letters_list:\n        forsubstitution_letters_list.remove(char)\n    # Check if the lis"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    #the main idea is to use a math.sqrt function to calculate the square of a.\n    #Note that math.sqrt(6) is also called the square root\n    result = a**2 + 4 * a * a - 2\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    #test case:\n    #input: \n    #a: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 30, 32, 40, 45, 50, 55, 60, 65, 70, 80, 90, 100, 110, 120, 130, 150, 160, 170, 180, 190, 200]\n    #output:\n    #14\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        return \"Please input a positive number!\"\n    \n    elif a == 0:\n        return 0\n    else:\n        return a**2 + square_perimeter(a-1)\n        \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a) + (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    if a >= 0:\n        result = 3 * a\n    else:\n        result = -1\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4/3) * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    sides=int(input(f'What is the side of your square? '))\n    if sides>0:\n        return 4*sides\n    else:\n        print('You should enter a positive value')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a ** 2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for char in string: \n        if char in char_list: \n            continue\n        char_list.append(char)\n    return char_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    characters = [i for i in string.lower() if i in string.lower()[:i]]\n    return ''.join(characters)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char in string[:len(string)]]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    result.extend(string)\n    for i in range(len(string)):\n        if string[i] in string:\n            result.remove(string[i])\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string)!= len(string):\n        raise Exception('The lengths of the two strings should be equal.')\n    list_1 = []\n    list_2 = []\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_1.append(string[i].lower())\n        else:\n            list_1.append(string[i])\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_2.append(string[i].lower())\n        else:\n            list_2.append(string[i])\n    list_3 = []\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            list_3.append(list_1[i])\n        else:\n            list_3.append(list_2[i])\n    list_3 = list(dict.fromkeys(list_3))\n    return list_3\ndef remove_extra_chars(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string)!= len(string):\n        raise Exception('The lengths of the two strings should be equal.')\n    list_1 = []\n    list_2 = []\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_1.append(string[i].lower())\n        else:\n            list_1.append(string[i])\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_2.append(string[i].lower())\n        else:\n            list_2.append(string[i])\n    list_3 = []\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            list_3.append(list_1[i])\n        else:\n            list_3.append(list_2[i])\n    list_3 = list(dict.fromkeys(list_3))\n    return list_3\ndef find_the_most_common_char(string):\n    '''\n    Write a function to find the most common character in the first string which appears in the second string.\n    '''\n    if len(string)!= len(string):\n        raise Exception('The lengths of the two strings should be equal.')\n    list_1 = []\n    list_2 = []\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_1.append(string[i].lower())\n        else:\n            list_1.append(string[i])\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_2.append(string[i].lower())\n        else:\n            list_2.append(string[i])\n    list_3 = []\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            list_3.append(list_1[i])\n        else:\n            list_3.append(list_2[i])\n    list_3 = list(dict.fromkeys(list_3))\n    if len(list_3)!= 0:\n        list_3 = list(dict.fromkeys(list_3))\n        return list_3[0]\n    else:\n        return 'None'\ndef remove_multiple_chars(string):\n    '''\n    Write a function to remove multiple characters from the first string which appear in the second string.\n    '''\n    if len(string)!= len(string):\n        raise Exception('The lengths of the two strings should be equal.')\n    list_1 = []\n    list_2 = []\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_1.append(string[i].lower())\n        else:\n            list_1.append(string[i])\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_2.append(string[i].lower())\n        else:\n            list_2.append(string[i])\n    list_3 = []\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            list_3.append(list_1[i])\n        else:\n            list_3.append(list_2[i])\n    list_3 = list(dict.fromkeys(list_3))\n    return list_3\ndef remove_multiple_chars_in_case(string):\n    '''\n    Write a function to remove multiple characters from the first string which appear in the second string.\n    '''\n    if len(string)!= len(string):\n        raise Exception('The lengths of the two strings should be equal.')\n    list_1 = []\n    list_2 = []\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_1.append(string[i].lower())\n        else:\n            list_1.append(string[i])\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_2.append(string[i].lower())\n        else:\n            list_2.append(string[i])\n    list_3 = []\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            list_3.append(list_1[i])\n        else:\n            list_3.append(list_2[i])\n    list_3 = list(dict.fromkeys(list_3))\n    return list_3\ndef remove_duplicates(string):\n    '''\n    Write a function to remove multiple characters from the first string which appears in the second string.\n    '''\n    if len(string)!= len(string):\n        raise Exception('The lengths of the two strings should be equal.')\n    list_1 = []\n    list_2 = []\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_1.append(string[i].lower())\n        else:\n            list_1.append(string[i])\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_2.append(string[i].lower())\n        else:\n            list_2.append(string[i])\n    list_3 = []\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            list_3.append(list_1[i])\n        else:\n            list_3.append(list_2[i])\n    list_3 = list(dict.fromkeys(list_3))\n    return list_3\ndef remove_one_element(string):\n    '''\n    Write a function to remove one element from the first string which appears in the second string.\n    '''\n    if len(string)!= len(string):\n        raise Exception('The lengths of the two strings should be equal.')\n    list_1 = []\n    list_2 = []\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_1.append(string[i].lower())\n        else:\n            list_1.append(string[i])\n    for i in range(0, len(string)):\n        if string[i].isalpha():\n            list_2.append(string[i].lower())\n        else:\n            list_2.append(string[i])\n    list_3 = []\n    for i in range(0, len(list_1)):\n        if list_1[i] in list_2:\n            list_3.append(list_1[i])\n        else:\n            list_3.append(list_2[i])\n    list_3 = list(dict.fromkeys(list_3))\n    return list_3\ndef remove_one_element_in_case(string):\n    '''\n    Write a function t"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = list()\n    for char in string:\n        if char in list(string):\n            result.append(char)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [c for c in string if c in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # https://www.geeksforgeeks.org/remove-occurrence-from-first-string-in-second-string/\n    output = []\n    for i in string:\n        if i in output:\n            output.remove(i)\n    return output\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string)\n    l.pop(0)\n    return ''.join(l)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [i for i in string.lower().split() if i in string.lower().split(string.lower().split(string.lower()[0]))]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Function to find whether a given array of integers contains any duplicate element.\n    # time complexity: O(n)\n    # space complexity: O(1)\n    duplicate = set(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = []\n    for num in arraynums:\n        if num in duplicate:\n            return True\n        else:\n            duplicate.append(num)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if i not in arraynums:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # def test(arraynums):\n    #     for i in range(len(arraynums)-1):\n    #         # print(arraynums[i], '-->', arraynums[i+1])\n    #         if arraynums[i]!= arraynums[i+1]:\n    #             print('error')\n    #             return False\n    #         return True\n    #     return True\n    # return test(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert is_duplicated_array([1,2,3,3,3,3,4,4,5,5,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9])==True\n    assert is_duplicated_array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    l=list(arraynums)\n    return len(set(l)) >1\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # pass\n    duplicate_indexes = []\n    for index in range(len(arraynums)):\n        for duplicate_index in range(len(arraynums)):\n            if arraynums[index] == arraynums[duplicate_index]:\n                duplicate_indexes.append(duplicate_index)\n    print(duplicate_indexes)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for array in arraynums:\n        array.sort()\n        print(array)\n        print(array[0], array[-1])\n        for i in range(1, len(array)):\n            if array[i] == array[i-1]:\n                print(\"FOUND DUPLICATE\")\n                break\n        else:\n            print(\"NO DUPLICATES\")\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    dup_list = []\n    for x in arraynums:\n        if x in dup_list:\n            return True\n        else:\n            dup_list.append(x)\n    print(dup_list)\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 0:\n        return \"no\"\n    else:\n        return \"woodball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x >= 0 and x <= 3 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1000: \n        return True\n    elif x >= 100: \n        return False\n    elif x >= 50: \n        return True\n    elif x >= 20: \n        return False\n    elif x >= 10: \n        return True\n    elif x >= 5: \n        return False\n    elif x >= 1: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return False\n    elif x%5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 5:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [5, 5.5, 5.75, 6, 6.25, 6.5, 6.75, 7, 7.25, 7.5, 7.75, 8, 8.25, 8.5, 8.75, 9]:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = -num\n    if num <= 0:\n        return 0\n    else:\n        num1 = abs(num)\n        num2 = abs(num1-2)\n        rev2 = abs(num2-1)\n        rev = rev2\n        print(rev)\n    return rev\ndef rev_odd(num):    \n    '''\n    Write a python function to check if a given number is odd.\n    '''\n    if num < 0:\n        num = -num\n    if num <= 0:\n        return 0\n    else:\n        num1 = abs(num)\n        num2 = abs(num1-2)\n        rev2 = abs(num2-1)\n        rev = rev2\n        print(rev)\n    return rev\ndef main():\n    print(\"Do you want to check reverse of a number?\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Odd = 2 - Odd\")\n    print(\"Reverse = 1 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Odd = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Odd\")\n    print(\"Odd = 2 - Odd\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Odd\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Odd = 2 - Odd\")\n    print(\"Reverse = 1 - Odd\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Odd = 2 - Odd\")\n    print(\"Reverse = 1 - Odd\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Odd\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n    print(\"Reverse = 2 - Odd\")\n    print(\"Reverse = 1 - Even\")\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    return int(num[::-1]) < int(num[::-2])\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(num)\n    rev_num_reverse = rev_num * 2\n    rev_num_reverse = rev_num_reverse - rev_num\n    if rev_num_reverse > 0:\n        return rev_num_reverse\n    else:\n        return 0\nprint(rev(14))"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return False\n    else:\n        rev_num = num//2\n        if num == 1:\n            return rev_num == 0\n        else:\n            return rev_num == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        print('Please enter a positive number')\n    elif num == 0:\n        print('The number is 0')\n    elif num > 0:\n        num2 = num * 2\n        if num2 < 0:\n            print('The number is less than 0')\n        else:\n            print('The number is greater than 0')\n            rev(num2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    while num > 0:\n        num = num // 2\n        num *= 2\n    return num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = \"\"\n    if num == 0:\n        return \"0\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    if num > 0:\n        rev_num = 0\n        while(num > 0):\n            rev_num = num%10\n            num = num//10\n        return rev_num\n    else:\n        return None\n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if num<2:\n        return False\n    \n    if num%2 ==0:\n        return False\n        \n    if num == 2 or num == 3 or num ==5:\n        return True\n        \n    for i in range(3,num//2,2):\n        if num%i == 0:\n            return False\n    return True\n    \n    \ndef main():\n    num = int(input())\n    \n    if rev(num) == num:\n        print(\"Prime\")\n        \n    else:\n        print(\"Not Prime\")\n        \n    if not is_prime(num):\n        print(\"Not Prime\")\n        \n    else:\n        print(\"Prime\")\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = num\n    if num == 1:\n        return 0\n    elif num % 2 == 0:\n        return rev + rev\n    else:\n        return rev - rev\n    return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = num * 2\n    i = 0\n    while i <= num:\n        if num % 2 == 0:\n            if num < 0:\n                num = -num\n            else:\n                num = num * 2\n        else:\n            if num < 0:\n                num = -num\n            else:\n                break\n        i += 1\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(set(map(str,arr)))\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # declare the list of digits\n    digits = list(map(int, arr))\n    # find the max number \n    max = digits[0]\n    for i in range(len(digits)) :\n        if digits[i] > max :\n            max = digits[i]\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) : \n        if arr[i] > max_num : \n            max_num = arr[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0 \n    if len(arr) == 1 : \n        return arr[0] \n    if arr[0] > arr[1] : \n        return find_Max_Num(arr[1:]) \n    return arr[0] + find_Max_Num(arr[1:]) \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : return -1\n    if len(arr) == 1 : return arr[0]\n    if len(arr) == 2 : return max(arr)\n    if arr[0] == arr[1] : return find_Max_Num(arr[1:])\n    if arr[0] < arr[1] : return find_Max_Num(arr[1:])\n    if arr[0] > arr[1] : return find_Max_Num(arr[1:])\n    if arr[0] > arr[1] : return find_Max_Num(arr[1:])\n    if arr[0] > arr[1] : return find_Max_Num(arr[1:])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr :\n        if i > max : \n            max = i \n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = len(arr)\n    num_list = []\n    if l == 0:\n        return 0\n    for i in range(l):\n        num = arr[i]\n        if num not in num_list:\n            num_list.append(num)\n        if num > num_list[-1]:\n            num_list[-1] = num\n    num_list.sort()\n    return num_list[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    num_list = []\n    for item in arr:\n        if item!= 0:\n            num_list.append(item)\n    num_list.sort()\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            if num_list[i] > max_num:\n                max_num = num_list[i]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    max_num = arr[0]\n    for num in arr[1:] : \n        if num > max_num :\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # find the first index that is not equal to the last index and then find the last index\n    n = len(arr)\n    i = n - 1\n    while (i >= 0):\n        if (arr[i] == arr[-1]):\n            i -= 1\n        else:\n            break\n    print(i)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    a = x < y \n    b = x > y \n    return a or b\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<y: \n        return 'I have a negative'\n    elif y<x: \n        return 'I have a positive'\n    else: \n        return 'I have no opposite sign'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x > y or x < y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < y: \n        return (x,y)\n    else: \n        return (y,x)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -x if x>y else y \ndef opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return -y if x>y else x\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>y: \n        return x<y or y<x \n    else: \n        return x>y or x<y \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    elif x < y: \n        return False\n    else: \n        return False\n    "
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    a=str(x)\n    b=str(y)\n    if a[0]=='-':\n        return True\n    elif b[0]=='-':\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n < 1: \n        raise ValueError('n must be >= 1') \n    \n    return n * (n + 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    start = int(n*1.0/3)\n    if start == 0:\n        print(0)\n        return\n    elif n == 1:\n        print(start)\n        return start\n    elif n == 2:\n        print(start*2)\n        return start*2\n    else:\n        print(start*3)\n        return start*3\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    x = n\n    num = 0\n    while x > 0:\n        if(x % 10) == 5:\n            num = num + 1\n        elif x % 10 == 4:\n            num = num + 2\n        else:\n            num = num + 3\n        x = x // 10\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n+1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n < 0):\n        return None\n    elif (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return n*n + is_octagonal(n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    return (is_octagonal(n-1) + is_octagonal(n-2)) % 10"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1: \n        return None\n    if n == 1: \n        return 1\n    else: \n        return is_octagonal(n - 1) + is_octagonal(n - 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    #Your code here\n    n = n+1\n    x = 0\n    y = n\n    \n    while y > 0:\n        x = y % 10\n        y = y//10\n        print(x, end='')\n    print()\n    print(y)\n    \n    \n    "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sq_n = int(n**0.5)\n    if n == 1: \n        return sq_n\n    return (is_octagonal(n//2) + is_octagonal(3*sq_n + n//4))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    \n    if (n % 3 == 0):\n        return n / 3\n    else:\n        return n + n / 3\n    \n    \nn = int(input(\"Enter the number: \"))\nprint(is_octagonal(n)"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    s = list(s)\n    for i in range(len(s)):\n        temp = \"\"\n        for j in range(len(s)):\n            temp += str(s[j])\n        if sum(map(int,temp))==s[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    count=len(s)\n    for i in range(len(s)):\n        if s[i]==s[i].upper():\n            count=count+1\n    return count\ndef count_Substrings_using_set(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    count=len(s)\n    for i in range(len(s)):\n        if s[i] in set(s):\n            count=count+1\n    return count\ndef check_integer(s):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    for i in range(len(s)):\n        if s[i]!=s[-1-i]:\n            return False\n    return True\ndef count_Substrings_using_Dict(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    count=len(s)\n    dic={}\n    for i in range(len(s)):\n        if s[i] not in dic:\n            if s[i].isdigit():\n                count=count+1\n                dic[s[i]]=s[i]\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # TODO:\n    # define the dictionary to count\n    # count the value in the dictionary\n    # return the value\n    return\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs = []\n    def calculate(s):\n        count = 0\n        for i in s:\n            count += 1\n            if i == '0':\n                break\n        return count\n    for i in range(len(s)):\n        count = calculate(s[i:i+len(s)])\n        if count == len(s) and i!=0:\n            subs.append(len(s))\n        elif i==len(s)-1:\n            subs.append(1)\n        elif count < len(s):\n            subs.append(1)\n            continue\n        else:\n            break\n    return subs\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    d = dict()\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    for i in range(len(s)):\n        dic[s[i]] += 1\n    count = 0\n    for i in dic.values():\n        count += i * (i + 1) // 2\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    return len([i for i in range(len(s)) if s[i] == s[i+1]])\ndef count_sum_of_digits(s):\n    '''\n    Write a python function to count the sum of digits of a string.\n    '''\n    return sum(int(i) for i in s if i.isdigit())\ndef start(s):\n    '''\n    Write a python function to get the start index of the first occurrence of a substring.\n    '''\n    return s.find(s[0])\ndef end(s):\n    '''\n    Write a python function to get the end index of the first occurrence of a substring.\n    '''\n    return s.rfind(s[-1])\ndef check_for_substring(s, substring):\n    '''\n    Write a python function to check if a substring is a valid substring in a given string.\n    '''\n    return s[start(substring):end(substring)] == substring\ndef count_substring_length(s, substring):\n    '''\n    Write a python function to count the length of a substring in a given string.\n    '''\n    return len(s.replace(substring, '').strip())\ndef count_substring_index(s, substring):\n    '''\n    Write a python function to count the index of a substring in a given string.\n    '''\n    return s.find(substring)\ndef get_all_substrings(s):\n    '''\n    Write a python function to get all the substrings of a given string.\n    '''\n    return ''.join(s[i:i+4] for i in range(len(s)-3))\ndef get_all_string_numbers(s):\n    '''\n    Write a python function to get all the number of the given string.\n    '''\n    return len(s)\ndef get_all_substrings_length(s):\n    '''\n    Write a python function to count all the length of all the substring in a given string.\n    '''\n    return sum(count_substring_length(s, substring) for substring in get_all_substrings(s))\ndef get_all_substrings_index(s):\n    '''\n    Write a python function to count all the index of all the substring in a given string.\n    '''\n    return sum(count_substring_index(s, substring) for substring in get_all_substrings(s))\ndef compare_strings(s1, s2):\n    '''\n    Write a python function to check if two strings are equal.\n    '''\n    if s1 == s2:\n        return True\n    return False\ndef count_distinct_substrings(s):\n    '''\n    Write a python function to count the number of distinct characters in a string.\n    '''\n    return len(set(s))\ndef count_substrings_that_are_distinct(s):\n    '''\n    Write a python function to count the number of distinct substrings in a string.\n    '''\n    return len(list(set(s)))\ndef get_all_distinct_substrings(s):\n    '''\n    Write a python function to get all the distinct substrings in a given string.\n    '''\n    return ''.join(sorted(s))\ndef get_all_substrings_distinct_length(s):\n    '''\n    Write a python function to count the number of distinct substrings in a given string.\n    '''\n    return len(list(set(s)))\ndef get_all_substrings_distinct_index(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return len(list(set(s)))\ndef get_substrings_that_are_distinct(s):\n    '''\n    Write a python function to get all the distinct substrings in a given string.\n    '''\n    return ''.join(sorted(s))\ndef count_substrings_distinct(s):\n    '''\n    Write a python function to count the number of distinct substrings in a string.\n    '''\n    return sum(count_distinct_substrings(s))\ndef count_substrings_distinct_length(s):\n    '''\n    Write a python function to count the number of distinct substrings in a string.\n    '''\n    return sum(count_distinct_substrings_length(s))\ndef count_substrings_distinct_index(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(count_distinct_substrings_index(s))\ndef count_substrings_that_are_distinct_length(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(list(map(count_distinct_substrings_length, s)))\ndef count_substrings_that_are_distinct_index(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(list(map(count_distinct_substrings_index, s)))\ndef count_substrings_distinct_and_length(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(map(count_substrings_distinct_length, s))\ndef count_substrings_distinct_and_index(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(map(count_substrings_distinct_index, s))\ndef count_substrings_that_are_distinct_and_length(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(list(map(count_substrings_distinct_and_length, s)))\ndef count_substrings_that_are_distinct_and_index(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(list(map(count_substrings_distinct_and_index, s)))\ndef count_substrings_that_are_distinct_and_distinct_length(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(list(map(count_substrings_distinct_and_length, s)))\ndef get_all_distinct_substrings_length(s):\n    '''\n    Write a python function to get all the distinct substrings in a given string.\n    '''\n    return len(list(set(s)))\ndef get_all_distinct_substrings_index(s):\n    '''\n    Write a python function to get all the distinct substrings in a given string.\n    '''\n    return len(list(set(s)))\ndef get_substrings_that_are_distinct_length(s):\n    '''\n    Write a python function to get all the distinct substrings in a given string.\n    '''\n    return sum(list(map(get_all_distinct_substrings_length, s)))\ndef get_all_distinct_substrings_index(s):\n    '''\n    Write a python function to get all the distinct substrings in a given string.\n    '''\n    return sum(list(map(get_all_distinct_substrings_index, s)))\ndef get_substrings_that_are_distinct_index(s):\n    '''\n    Write a python function to get all the distinct substrings in a given string.\n    '''\n    return sum(list(map(get_all_distinct_substrings_index, s)))\ndef count_substrings_distinct_and_length(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(map(count_substrings_distinct_length, s))\ndef count_substrings_distinct_and_index(s):\n    '''\n    Write a python function to count all the distinct substrings in a given string.\n    '''\n    return sum(ma"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        dig = s[i]\n        j = i+1\n        while j < len(s) and s[j] == dig:\n            j += 1\n        if j - i == 2*len(s) - 2:\n            result += 1\n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # variable to store the frequency of each character\n    freq = defaultdict(int)\n    # loop over the string and count each character\n    for i in s:\n        freq[i] += 1\n    # loop over the characters and count their substring length\n    count = 0\n    for i in freq:\n        if freq[i] > 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substring_map = {}\n    for i in range(len(s)):\n        substring = s[i:i+3]\n        if substring not in substring_map:\n            substring_map[substring] = [s.count(substring)]\n        else:\n            substring_map[substring].append(s.count(substring))\n    return substring_map\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # change the code to your solution\n    # comment for python 3\n    smallest_num = min(xs)\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    smallest_num = 0\n    for x in xs:\n        if x < smallest and x!= smallest:\n            smallest = x\n            smallest_num = x\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return -1\n    else:\n        return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = sorted(xs)[-1]\n    xs.remove(x)\n    return x\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    smallest_index = 0\n    for i in range(len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n            smallest_index = i\n    return smallest, smallest_index\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = 0\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n    \ndef second_smallest_num(xs):\n    '''\n    Write a python function to find second smallest number in a list.\n    '''\n    second_min_num = 0\n    for x in xs:\n        if x < second_min_num:\n            second_min_num = x\n    return second_min_num\n    \ndef third_smallest_num(xs):\n    '''\n    Write a python function to find third smallest number in a list.\n    '''\n    third_min_num = 0\n    for x in xs:\n        if x < third_min_num:\n            third_min_num = x\n    return third_min_num\n    \ndef fourth_smallest_num(xs):\n    '''\n    Write a python function to find fourth smallest number in a list.\n    '''\n    fourth_min_num = 0\n    for x in xs:\n        if x < fourth_min_num:\n            fourth_min_num = x\n    return fourth_min_num\n    \ndef fifth_smallest_num(xs):\n    '''\n    Write a python function to find fifth smallest number in a list.\n    '''\n    fifth_min_num = 0\n    for x in xs:\n        if x < fifth_min_num:\n            fifth_min_num = x\n    return fifth_min_num\n    \ndef get_answer(sum_of_numbers, count_of_numbers, max_of_numbers, min_of_numbers):\n    '''\n    Write a python function to get the answer of the program.\n    '''\n    if count_of_numbers == 0:\n        answer = sum_of_numbers + second_smallest_num(xs) + third_smallest_num(xs) + fourth_smallest_num(xs) + fifth_smallest_num(xs)\n        return answer\n    else:\n        answer = second_smallest_num(xs) + third_smallest_num(xs) + fourth_smallest_num(xs) + fifth_smallest_num(xs)\n        return answer\n    \nxs = [3, 5, 8, 1, 2, 4]\nprint(get_answer(0, 0, 0, 0))\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # create an empty set\n    max_difference = set()\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] - test_list[j] > 0:\n                return max(abs(test_list[i] - test_list[j]), abs(test_list[i] - test_list[j]))\n    return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a tuple of all the available pairs\n    pairs = set(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = test_list[0] - test_list[1]\n    for i in range(2,len(test_list)):\n        max_difference = max(max_difference,test_list[i]-test_list[i-1])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list_1 = test_list[:int(len(test_list)/2)]\n    test_list_2 = test_list[int(len(test_list)/2):]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    l=len(test_list)\n    for i in range(l):\n        for j in range(i+1,l):\n            d1=abs(test_list[i][0]-test_list[j][0])\n            d2=abs(test_list[i][1]-test_list[j][1])\n            if(d1<d2):\n                return max(d1,d2)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list == []:\n        return 0\n    if test_list[0][0] == test_list[1][0]:\n        return test_list[0][1] - test_list[1][1]\n    else:\n        return test_list[0][1] - test_list[1][1] - test_list[0][0] + test_list[1][0]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(list(map(lambda x: x[1] - x[0], test_list)))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in test_list:\n        for j in test_list:\n            if i < j:\n                difference = abs(i - j)\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    newlist = []\n    for item in subjectmarks:\n        newlist.append(item[1])\n    return sorted(newlist)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(\"\\n\\nSorting by the second value of each tuple: \")\n    print(\"\\n\")\n    # list of tuples\n    subjectmarks = sorted(subjectmarks)\n    # new list with sorted subjects\n    subjects = []\n    # for each tuple in the list, append to new list\n    for i in subjectmarks:\n        subjects.append(i[0])\n    # return new list\n    return subjects\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks = []\n    for i in range(len(subjectmarks)):\n        marks.append(subjectmarks[i][1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key= lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Your code here\n    return sorted(subjectmarks, key = lambda x: x[1])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Declare variables\n    subject_marks_list = []\n    # Start writing your code here\n    for i in range(0, len(subjectmarks)):\n        subject_marks_list.append(subjectmarks[i][1])\n    subject_marks_list.sort()\n    # End writing your code here\n    return subject_marks_list\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    def sort(item):\n        if item[1] < item[0]:\n            return item[0]\n        else:\n            return item[1]\n    return sorted(subjectmarks, key=sort)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def _sum(l):\n        if not l:\n            return 0\n        else:\n            return _sum(l[0]) + _sum(l[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    for i in data_list:\n        recursive_list_sum(i)\n        i = i + 1\n    return data_list + data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write your function here...\n    return sum([el.value for el in data_list]"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for el in data_list:\n        sum += el\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) < 2:\n        return data_list\n    if data_list[0] == None:\n        return data_list\n    elif data_list[1] == None:\n        return data_list\n    elif data_list[0] < data_list[1]:\n        data_list[0] = data_list[0] + data_list[1]\n        return recursive_list_sum(data_list[2:])\n    else:\n        data_list[1] = data_list[1] + data_list[0]\n        return recursive_list_sum(data_list[2:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == None:\n        return 0\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        result_list = []\n        for element in data_list:\n            result_list.extend(recursive_list_sum(element))\n        return result_list"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def list_sum(element_list):\n        total = 0\n        for element in element_list:\n            total += element\n        return total\n    return sum(data_list, [])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for element in data_list:\n        if isinstance(element, list):\n            flattened_list.extend(element)\n        else:\n            flattened_list.append(element)\n    total = 0\n    for element in flattened_list:\n        total += element\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def recursive_list_sum(data_list):\n        if data_list is None or len(data_list) < 1:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    return recursive_list_sum(data_list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(1)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for x in list:\n        if x > 0:\n            positive += 1\n    print(positive)\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for value in list:\n        if value >= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count=0\n    for number in list:\n        if number>0:\n            pos_count+=1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Take the length of the list as input and print the count\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for value in list:\n        if value > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = len(n)\n    ways = 0\n    for i in range(n):\n        for j in range(i,n):\n            # if (n == 2 or n == 3):\n            #     print(i,j)\n            #     continue\n            if (n - j) <= i:\n                continue\n            ways += (j - i) * (n - j)\n    return way"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 4\n    if n==4:\n        return 8\n    if n==5:\n        return 16\n    if n==6:\n        return 32\n    if n==7:\n        return 64\n    if n==8:\n        return 128\n    if n==9:\n        return 256\n    if n==10:\n        return 512\n    if n==11:\n        return 1024\n    if n==12:\n        return 2048\n    if n==13:\n        return 4096\n    if n==14:\n        return 8192\n    if n==15:\n        return 16384\n    if n==16:\n        return 32768\n    if n==17:\n        return 65536\n    if n==18:\n        return 131072\n    if n==19:\n        return 262144\n    if n==20:\n        return 524288\n    if n==21:\n        return 1048576\n    if n==22:\n        return 2097152\n    if n==23:\n        return 4194304\n    if n==24:\n        return 8388608\n    if n==25:\n        return 16777216\n    if n==26:\n        return 33554432\n    if n==27:\n        return 67108864\n    if n==28:\n        return 134217728\n    if n==29:\n        return 262144\n    if n==30:\n        return 524288\n    if n==31:\n        return 1048576\n    if n==32:\n        return 2097152\n    if n==33:\n        return 4194304\n    if n==34:\n        return 8388608\n    if n==35:\n        return 16777216\n    if n==36:\n        return 33554432\n    if n==37:\n        return 67108864\n    if n==38:\n        return 134217728\n    if n==39:\n        return 262144\n    if n==40:\n        return 524288\n    if n==41:\n        return 1048576\n    if n==42:\n        return 2097152\n    if n==43:\n        return 4194304\n    if n==44:\n        return 8388608\n    if n==45:\n        return 16777216\n    if n==46:\n        return 33554432\n    if n==47:\n        return 67108864\n    if n==48:\n        return 134217728\n    if n==49:\n        return 262144\n    if n==50:\n        return 524288\n    if n==51:\n        return 1048576\n    if n==52:\n        return 2097152\n    if n==53:\n        return 4194304\n    if n==54:\n        return 8388608\n    if n==55:\n        return 16777216\n    if n==56:\n        return 33554432\n    if n==57:\n        return 67108864\n    if n==58:\n        return 134217728\n    if n==59:\n        return 262144\n    if n==60:\n        return 524288\n    if n==61:\n        return 1048576\n    if n==62:\n        return 2097152\n    if n==63:\n        return 4194304\n    if n==64:\n        return 8388608\n    if n==65:\n        return 16777216\n    if n==66:\n        return 33554432\n    if n==67:\n        return 67108864\n    if n==68:\n        return 134217728\n    if n==69:\n        return 262144\n    if n==70:\n        return 524288\n    if n==71:\n        return 1048576\n    if n==72:\n        return 2097152\n    if n==73:\n        return 4194304\n    if n==74:\n        return 8388608\n    if n==75:\n        return 16777216\n    if n==76:\n        return 33554432\n    if n==77:\n        return 67108864\n    if n==78:\n        return 134217728\n    if n==79:\n        return 262144\n    if n==80:\n        return 524288\n    if n==81:\n        return 1048576\n    if n==82:\n        return 2097152\n    if n==83:\n        return 4194304\n    if n==84:\n        return 8388608\n    if n==85:\n        return 16777216\n    if n==86:\n        return 33554432\n    if n==87:\n        return 67108864\n    if n==88:\n        return 134217728\n    if n==89:\n        return 262144\n    if n==90:\n        return 524288\n    if n==91:\n        return 1048576\n    if n==92:\n        return 2097152\n    if n==93:\n        return 4194304\n    if n==94:\n        return 8388608\n    if n==95:\n        return 16777216\n    if n==96:\n        return 33554432\n    if n==97:\n        return 67108864\n    if n==98:\n        return 134217728\n    if n==99:\n        return 262144\n    if n==100:\n        return 524288\n    if n==101:\n        return 1048576\n    if n==102:\n        return 2097152\n    if n==103:\n        return 4194304\n    if n==104:\n        return 8388608\n    if n==105:\n        return 16777216\n    if n==106:\n        return 33554432\n    if n==107:\n        return 67108864\n    if n==108:\n        return 134217728\n    if n==109:\n        return 262144\n    if n==110:\n        return 524288\n    if n==111:\n        return 1048576\n    if n==112:\n        return 2097152\n    if n==113:\n        return 4194304\n    if n==114:\n        return 8388608\n    if n==115:\n        return 16777216\n    if n==116:\n        return 33554432\n    if n==117:\n        return 67108864\n    if n==118:\n        return 134217728\n    if n==119:\n        return 262144\n    if n==120:\n        return 524288\n    if n==121:\n        return 1048576\n    if n==122:\n        return 2097152\n    if n==123:\n        return 4194304\n    if n==124:\n        return 8388608\n    if n==125:\n        return 16777216\n    if n==126:\n        return 33554432\n    if n==127:\n        return 67108864\n    if n==128:\n        return 134217728\n    if n==129:\n        return 262144\n    if n==130:\n        return 524288\n    if n==131:\n        return 1048576\n    if n==132:\n        return 2097152\n    if n==133:\n        return 4194304\n    if n==134:\n        return 8388608\n    if n==135:\n        return 16777216\n    if n==136:\n        return 33554432\n    if n==137:\n        return 67108864\n    if n==138:\n        return 134217728\n    if n==139:\n        return 262144\n    if n==140:\n        return 524288\n    if n==141:\n        return 1048576\n    if n==142:\n        return 2097152\n    if n==143:\n        return 4194304\n    if n==144:\n        return 8388608\n    if n==145:\n        return 16777216\n    if n==146:\n        return 33554432\n    if n==147:\n        return 67108864\n    if n==148:\n        return 134217728\n    if n==149:\n        return 262144\n    if n==150:\n        return 524288\n    if n==151:\n        return 1048576\n    if n==152:\n        return 2097152\n    if n==153:\n        return 4194304\n    if n==154:\n        return 8388608\n    i"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return n\n    else:\n        return bell_number(n-2) + bell_number(n-1)\n        \n    \n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n + bell_number(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # if the number of subset is less than or equal to the limit\n    if (n <= 1):\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # sort the set\n    b = sorted(list(n))\n    n = len(b)\n    # if n is 1, set the result to 1\n    if n == 1:\n        return 1\n    # if n is 0, return the value of the number of ways\n    # of the set of numbers\n    if n == 0:\n        return n\n    # if n is positive, use the recursive formula for the number of ways\n    # of the set of numbers\n    if n > 0:\n        return bell_number(b[:-1]) + bell_number(b[1:])\n    return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    if n in [0, 1, 2]:\n        return 1\n    if n == 3:\n        return 2\n    return bell_number(n-3)+bell_number(n-2)+bell_number(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    count = [0] * (n+1)\n    count[0] = 1\n    for i in range(2, n+1):\n        count[i] = count[i-1] + count[i-2]\n    return count[n]"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(0, len(A)-1): \n        if A[i+1] - A[i] > 1e-6:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0]<A[1]:\n        if A[0]<A[1] and A[0]<A[2]:\n            print(\"yes\")\n        else:\n            print(\"no\")\n    else:\n        if A[1]<A[2]:\n            print(\"yes\")\n        else:\n            print(\"no\")\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            is_monotonic = False\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Write your code here.\n    #print(\"A is \",A)\n    is_sorted = True\n    i = 0\n    j = len(A)-1\n    while i < j:\n        if A[i] < A[i+1]:\n            #print(\"A[i] < A[i+1]\")\n            is_sorted = False\n        if A[j] < A[j-1]:\n            #print(\"A[j] < A[j-1]\")\n            is_sorted = False\n        i += 1\n        j -= 1\n    #print(\"is_sorted:\",is_sorted)\n    if not is_sorted:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Implement here\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)>1:\n        for i in range(len(A)-1):\n            if A[i]>A[i+1]:\n                return False\n        return True\n    else:\n        return A[0]>A[1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)): \n        if A[i] < A[i - 1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n<=2:\n        return False\n    s = [A[0],A[0],A[-1],A[-1]]\n    for i in range(1,n):\n        if s[i] > s[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i=0\n    j=0\n    while i < len(l):\n        if l[i] == s[j]:\n            i+=1\n            j+=1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    if l[0] not in s:\n        return False\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    for i in range(len(l)-len(s)+1):\n        if s in l[i:i+len(s)]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for e in s:\n        if l.count(e) > 0:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_list = []\n    for item in l:\n        if item in s:\n            sub_list.append(item)\n    return sub_list\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n        if l[i:i+len(s)]!= s:\n            return False\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Idea:\n    # 1. check if a element is a sublist of another\n    # 2. recursively check if current sublist contains the given sublist\n    # 3. if current sublist is a sublist of a certain element, then return true\n    # 4. if current sublist is not a sublist of a certain element, then return false\n    \n    # Idea:\n    # 1. use stack to track the index of the elements in the stack to keep track of previous index\n    # 2. if the given element is in the stack, then return true\n    # 3. if the given element is not in the stack, then return false\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # l = [1, 2, 3, 4, 5, 6]\n    # s = [1, 2, 3, 4, 5, 6]\n    \n    # for i in range(len(l)):\n    #     for j in range(i+1, len(l)):\n    #         if l[i] in s[j]:\n    #             return True\n    #     return False\n    \n    # Return False if l or s is empty.\n    # l_len = len(l)\n    # s_len = len(s)\n    \n    # if l_len!= s_len:\n    #     return False\n    \n    # # Go through list and check all it's sublist\n    # for i in range(l_len):\n    #     for j in range(s_len):\n    #         if l[i] in s[j]:\n    #             return True\n    #     return False\n    \n    # return False\n    \n    # When we go to the end, check if the list is empty or not.\n    \n    # if l == []:\n    #     return False\n    \n    # if s == []:\n    #     return False\n    \n    # return l in "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    if len(l) == 0:\n        return False\n    else:\n        return s in l[0]\n        \n    \ndef iter_over_str(l):\n    '''\n    Write a function that iterates through a list and prints it using a for loop.\n    '''\n    for i in range(0, len(l)):\n        print(l[i])\n        \n        \ndef is_duplicate(l):\n    '''\n    Write a function that checks if a list is duplicate or not.\n    '''\n    if len(l) == 1:\n        return False\n    \n    if l[0] == l[-1]:\n        return True\n    \n    for i in range(0, len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n        \n    return False\n        \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Method 1:\n    '''\n    output = []\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            output.append(False)\n        else:\n            output.append(True)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    \n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    len1, len2 = len(Input), len(Input[0])\n    for i in range(len1):\n        if Input[0][i]!= Input[1][i]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = []\n    tuple_list.extend(Input)\n    for i in range(len(tuple_list)-1):\n        if len(tuple_list[i])!= len(tuple_list[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(Input)!= 2:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(Input) % 2 == 1:\n        return False\n    if len(Input) < 3:\n        return True\n    \n    for i in range(len(Input)):\n        if i >= len(Input)/2:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)-1):\n            if not Input[i][0] == Input[j][0]:\n                return False\n    return True\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    #Find length of all the tuples in the given list.\n    for i in range(length):\n        for j in range(length):\n            if not Input[i] == Input[j]:\n                return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Length of the array\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            for j in range(len(nums)-i-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums):\n        '''\n        Sort the list.\n        '''\n        def swap(a, b):\n            '''\n            Swap the values at indices a and b.\n            '''\n            temp = a\n            a = b\n            b = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length - 1):\n        for j in range(length - 1 - i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    for i in range(len(nums)):\n        j = len(nums) - 1 - i\n        key = nums[j]\n        while j >= 0 and nums[j] > key:\n            nums[j + 1] = nums[j]\n            j = j - 1\n        nums[j + 1] = key\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    for i in range(l-1):\n        for j in range(l-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    for i in range(size-1):\n        for j in range(size-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if n < 0:\n        print(\"Please enter a positive integer\")\n        return \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Initializing the variable\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    print(\"The sum of numbers less than or equal to \",n,\"is equal to \",sum)\n    #Checking if the difference between the squares is equal to the sum of the squares\n    if sum==n**2:\n        print(\"The square is square.\")\n    else:\n        print(\"The square is not square.\")\n    #Checking if the difference between the squares is greater than or equal to zero\n    if sum>0 and n>0:\n        print(\"The difference between squares is greater than or equal to zero.\")\n    else:\n        print(\"The difference between squares is less than or equal to zero.\")\n    #Checking if the squares is smaller than or equal to zero\n    if n<0:\n        print(\"The square is not square.\")\n    else:\n        print(\"The square is square.\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1:\n        return n == 0\n    else:\n        return abs(n-((n**2)%1))%1"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    while (n > 0): \n        if n%100 == 0: \n            print(\"Square can be represented by \", n, \"squares\")\n            print(\"Note that square have only 2 squares in total\")\n            print(\"Example: 6 = square of 5\")\n        n = n - 1\n    return n\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1 or n==2:\n        return True\n    elif n==3 or n==4:\n        return False\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def sq_diff(a, b):\n        return a - b\n    def sq_eq(a, b):\n        return a == b\n    def is_square(a):\n        '''\n        Output: True or False\n        '''\n        return a == a and a!= 0\n    for i in range(1, n+1):\n        if is_square(i):\n            for j in range(1, i):\n                if is_square(j) or is_square(j-i) or is_square(j+i):\n                    return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return True\n    if n%2 == 0:\n        return (dif_Square(n//2) and not dif_Square(n//2)) or n%2!= 0\n    if n % 2 == 1:\n        return not dif_Square(n//2)\n    \n    \n    \ndef dif_Triangle(a,b,c):\n    '''\n    Write a python function to check whether a triangle is valid or not.\n    '''\n    if a == b or b == c or c == a:\n        return True\n    if a == b or b == c:\n        return False\n    if a == b or b == c or c == a:\n        return False\n    return dif_Triangle(a,b,c-a) or dif_Triangle(a,b-1,c) or dif_Triangle(a-1,b,c) or dif_Triangle(a-1,b-1,c)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return dif_Square(n-1) + dif_Square(n-2)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        return False\n    else:\n        if n%2==0:\n            return True\n        else:\n            return False\nn=int(input('Enter an integer: '))\nprint(dif_Square(n))"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    if n < 10:\n        return False\n    if n == 10:\n        return True\n    if n % 10 == 0 and n!= 10:\n        return False\n    if n % 10 == 0:\n        return dif_Square(int(n / 10))\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = patterns.copy()\n    difference = colors - patterns\n    # print(difference)\n    for key, value in difference.items():\n        if value == []:\n            return True\n        else:\n            for i in range(len(value)):\n                if value[i]!='':\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(pattern in colors for pattern in patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a variable called colors_list to hold the list of colors.\n    colors_list = []\n    \n    # Iterate over the patterns array.\n    for pattern in patterns:\n        colors_list.append(pattern[0])\n    \n    # Use the same code from the first pattern to compare it to the second.\n    # For example, if we have a tuple of (r, g, b) and a tuple of (r, g, b)\n    # we should compare it to (r, g, b) using the is_samepatterns function.\n    for color in colors:\n        if not (color in colors_list):\n            return False\n    \n    # Return True if it follows the sequence given in the patterns array.\n    return True\n    \n    \ndef unique_colors(colors):\n    '''\n    Write a function that, given a list of colors, returns a list of all unique\n    colors.\n    '''\n    # Create a list of all unique colors.\n    unique_colors = []\n    \n    # Iterate over the colors array.\n    for color in colors:\n        # Check if the color is not in the unique_colors list.\n        if color not in unique_colors:\n            # Add the color to the unique_colors list.\n            unique_colors.append(color)\n    \n    # Return the unique_colors list.\n    return unique_colors\n    \n    \ndef sort_colors(colors):\n    '''\n    Write a function that, given a list of colors, sorts the colors by the\n    color name.\n    '''\n    # Create a list of sorted colors.\n    sorted_colors = []\n    \n    # Iterate over the colors array.\n    for color in colors:\n        # Check if the color is not in the sorted_colors list.\n        if color not in sorted_colors:\n            # Add the color to the sorted_colors list.\n            sorted_colors.append(color)\n    \n    # Return the sorted_colors list.\n    return sorted_colors\n    \n    \ndef remove_color(colors, color):\n    '''\n    Write a function that, given a list of colors and a color, deletes the color\n    from the list.\n    '''\n    # Create a list of all unique colors.\n    unique_colors = unique_colors(colors)\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color:\n            # Remove the color from the unique_colors list.\n            colors.remove(color)\n    \n    # Return the unique_colors list.\n    return unique_colors\n    \n    \ndef get_color_name(colors):\n    '''\n    Write a function that, given a list of colors, returns the name of the\n    color with the highest number of occurence.\n    '''\n    # Create a list of all unique colors.\n    unique_colors = unique_colors(colors)\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color:\n            # Return the color with the highest number of occurences.\n            return color\n    \n    # Return the color that has no occurances in the list.\n    return unique_colors[0]\n    \n    \ndef get_color_popularity(colors):\n    '''\n    Write a function that, given a list of colors, returns the number of times\n    the color appears in the list.\n    '''\n    # Create a list of all unique colors.\n    unique_colors = unique_colors(colors)\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color:\n            # Return the number of times the color appears in the list.\n            return unique_colors.count(color)\n    \n    # Return the number of colors with no appearances in the list.\n    return unique_colors[0]\n    \n    \ndef most_popular(colors):\n    '''\n    Write a function that, given a list of colors, returns the most common\n    color.\n    '''\n    # Create a list of unique colors.\n    unique_colors = unique_colors(colors)\n    \n    # Create a list of the frequencies.\n    frequencies = []\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color:\n            # Add the color to the frequencies list.\n            frequencies.append(unique_colors.count(color))\n    \n    # Return the color with the most occurrences.\n    return unique_colors[frequencies.index(max(frequencies))]\n    \n    \ndef generate_color_palette(colors):\n    '''\n    Write a function that, given a list of colors, returns a list of color\n    names that appear most frequently in the list.\n    '''\n    # Create a list of the frequencies.\n    frequencies = []\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color:\n            # Add the color to the frequencies list.\n            frequencies.append(unique_colors.count(color))\n    \n    # Return the color names that appear most frequently.\n    return unique_colors[frequencies.index(max(frequencies))]\n    \n    \ndef get_color_popularity_ratio(colors):\n    '''\n    Write a function that, given a list of colors, returns the ratio of the\n    number of unique colors to the number of unique colors in the list.\n    '''\n    # Create a list of unique colors.\n    unique_colors = unique_colors(colors)\n    \n    # Create a list of the frequencies.\n    frequencies = []\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color:\n            # Add the color to the frequencies list.\n            frequencies.append(unique_colors.count(color))\n    \n    # Return the ratio of the unique_colors count to the number of unique colors\n    # in the list.\n    return len(unique_colors) / len(colors)\n    \n    \ndef get_color_popularity_ratio_prime(colors):\n    '''\n    Write a function that, given a list of colors, returns the ratio of the\n    number of unique colors to the number of unique colors in the list.\n    '''\n    # Create a list of unique colors.\n    unique_colors = unique_colors(colors)\n    \n    # Create a list of the frequencies.\n    frequencies = []\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color:\n            # Add the color to the frequencies list.\n            frequencies.append(unique_colors.count(color))\n    \n    # Return the ratio of the unique_colors count to the number of unique colors\n    # in the list.\n    return len(unique_colors) / len(colors)\n    \n    \ndef get_color_popularity_ratio_prime_prime(colors):\n    '''\n    Write a function that, given a list of colors, returns the ratio of the\n    number of unique colors to the number of unique colors in the list.\n    '''\n    # Create a list of unique colors.\n    unique_colors = unique_colors(colors)\n    \n    # Create a list of the frequencies.\n    frequencies = []\n    \n    # Iterate over the unique_colors list.\n    for color in unique_colors:\n        # Check if the color is equal to the color we're trying to remove.\n        if color == color"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Write your code here.\n    patterns.sort()\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_list = []\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern:\n                color_list.append(color)\n    return color_list == patterns\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_len = len(patterns[0])\n    \n    if len(patterns[0])!= pattern_len or pattern_len!= len(colors):\n        return False\n    \n    # by checking values for each color, it's impossible to get a pattern with same color\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i][0]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # TODO: Write your solution here\n    seq = []\n    for color in colors:\n        seq.append(color)\n    for pattern in patterns:\n        if len(set(pattern) & set(seq)) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #Write your code here\n    result = True\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_count = len(patterns)\n    for i in range(patterns_count):\n        pattern = patterns[i]\n        for j in range(len(colors)):\n            color = colors[j]\n            pattern = pattern.replace('{}'.format(color),'')\n        pattern = pattern.replace(' ','')\n        pattern = pattern.replace('{}'.format(colors[0]),'')\n        pattern = pattern.replace('{}'.format(colors[1]),'')\n        pattern = pattern.replace('{}'.format(colors[2]),'')\n        pattern = pattern.replace('{}'.format(colors[3]),'')\n        pattern = pattern.replace('{}'.format(colors[4]),'')\n        pattern = pattern.replace('{}'.format(colors[5]),'')\n        pattern = pattern.replace('{}'.format(colors[6]),'')\n        pattern = pattern.replace('{}'.format(colors[7]),'')\n        pattern = pattern.replace('{}'.format(colors[8]),'')\n        pattern = pattern.replace('{}'.format(colors[9]),'')\n        pattern = pattern.replace('{}'.format(colors[10]),'')\n        pattern = pattern.replace('{}'.format(colors[11]),'')\n        pattern = pattern.replace('{}'.format(colors[12]),'')\n        pattern = pattern.replace('{}'.format(colors[13]),'')\n        pattern = pattern.replace('{}'.format(colors[14]),'')\n        pattern = pattern.replace('{}'.format(colors[15]),'')\n        pattern = pattern.replace('{}'.format(colors[16]),'')\n        pattern = pattern.replace('{}'.format(colors[17]),'')\n        pattern = pattern.replace('{}'.format(colors[18]),'')\n        pattern = pattern.replace('{}'.format(colors[19]),'')\n        pattern = pattern.replace('{}'.format(colors[20]),'')\n        pattern = pattern.replace('{}'.format(colors[21]),'')\n        pattern = pattern.replace('{}'.format(colors[22]),'')\n        pattern = pattern.replace('{}'.format(colors[23]),'')\n        pattern = pattern.replace('{}'.format(colors[24]),'')\n        pattern = pattern.replace('{}'.format(colors[25]),'')\n        pattern = pattern.replace('{}'.format(colors[26]),'')\n        pattern = pattern.replace('{}'.format(colors[27]),'')\n        pattern = pattern.replace('{}'.format(colors[28]),'')\n        pattern = pattern.replace('{}'.format(colors[29]),'')\n        pattern = pattern.replace('{}'.format(colors[30]),'')\n        pattern = pattern.replace('{}'.format(colors[31]),'')\n        pattern = pattern.replace('{}'.format(colors[32]),'')\n        pattern = pattern.replace('{}'.format(colors[33]),'')\n        pattern = pattern.replace('{}'.format(colors[34]),'')\n        pattern = pattern.replace('{}'.format(colors[35]),'')\n        pattern = pattern.replace('{}'.format(colors[36]),'')\n        pattern = pattern.replace('{}'.format(colors[37]),'')\n        pattern = pattern.replace('{}'.format(colors[38]),'')\n        pattern = pattern.replace('{}'.format(colors[39]),'')\n        pattern = pattern.replace('{}'.format(colors[40]),'')\n        pattern = pattern.replace('{}'.format(colors[41]),'')\n        pattern = pattern.replace('{}'.format(colors[42]),'')\n        pattern = pattern.replace('{}'.format(colors[43]),'')\n        pattern = pattern.replace('{}'.format(colors[44]),'')\n        pattern = pattern.replace('{}'.format(colors[45]),'')\n        pattern = pattern.replace('{}'.format(colors[46]),'')\n        pattern = pattern.replace('{}'.format(colors[47]),'')\n        pattern = pattern.replace('{}'.format(colors[48]),'')\n        pattern = pattern.replace('{}'.format(colors[49]),'')\n        pattern = pattern.replace('{}'.format(colors[50]),'')\n        pattern = pattern.replace('{}'.format(colors[51]),'')\n        pattern = pattern.replace('{}'.format(colors[52]),'')\n        pattern = pattern.replace('{}'.format(colors[53]),'')\n        pattern = pattern.replace('{}'.format(colors[54]),'')\n        pattern = pattern.replace('{}'.format(colors[55]),'')\n        pattern = pattern.replace('{}'.format(colors[56]),'')\n        pattern = pattern.replace('{}'.format(colors[57]),'')\n        pattern = pattern.replace('{}'.format(colors[58]),'')\n        pattern = pattern.replace('{}'.format(colors[59]),'')\n        pattern = pattern.replace('{}'.format(colors[60]),'')\n        pattern = pattern.replace('{}'.format(colors[61]),'')\n        pattern = pattern.replace('{}'.format(colors[62]),'')\n        pattern = pattern.replace('{}'.format(colors[63]),'')\n        pattern = pattern.replace('{}'.format(colors[64]),'')\n        pattern = pattern.replace('{}'.format(colors[65]),'')\n        pattern = pattern.replace('{}'.format(colors[66]),'')\n        pattern = pattern.replace('{}'.format(colors[67]),'')\n        pattern = pattern.replace('{}'.format(colors[68]),'')\n        pattern = pattern.replace('{}'.format(colors[69]),'')\n        pattern = pattern.replace('{}'.format(colors[70]),'')\n        pattern = pattern.replace('{}'.format(colors[71]),'')\n        pattern = pattern.replace('{}'.format(colors[72]),'')\n        pattern = pattern.replace('{}'.format(colors[73]),'')\n        pattern = pattern.replace('{}'.format(colors[74]),'')\n        pattern = pattern.replace('{}'.format(colors[75]),'')\n        pattern = pattern.replace('{}'.format(colors[76]),'')\n        pattern = pattern.replace('{}'.format(colors[77]),'')\n        pattern = pattern.replace('{}'.format(colors[78]),'')\n        pattern = pattern.replace('{}'.format(colors[79]),'')\n        pattern = pattern.replace('{}'.format(colors[80]),'')\n        pattern = pattern.replace('{}'.format(colors[81]),'')\n        pattern = pattern.replace('{}'.format(colors[82]),'')\n        pattern = pattern.replace('{}'.format(colors[83]),'')\n        pattern = pattern.replace('{}'.format(colors[84]),'')\n        pattern = pattern.replace('{}'.format(colors[85]),'')\n        pattern = pattern.replace('{}'.format(colors[86]),'')\n        pattern = pattern.replace('{}'.format(colors[87]),'')\n        pattern = pattern.replace('{}'.format(colors[88]),'')\n        pattern = pattern.replace('{}'.format(colors[89]),'')\n        pattern = pattern.replace('{}'.format(colors[90]),'')\n        pattern = pattern.replace('{}'.format(color"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #Sort the given list of tuples according to the order of the elements in the list\n    sorted_tuples = sorted(test_list, key = lambda tup: tup[0])\n    #Check if the elements of the given list are all divisible by k\n    if all(ele % K == 0 for ele in sorted_tuples):\n        return sorted_tuples\n    #If no element of the list is divisible by k, return the list with only one element\n    else:\n        return [tup for tup in sorted_tuples if len(tup) == 1]\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    '''\n    This function takes a list of tuples and a k and returns a list of tuples where the elements\n    divisible by k are all the elements of the tuples.\n    '''\n    '''\n    You can use an anonymous function to return a list of tuples that have all elements divisible by k.\n    '''\n    '''\n    Example:\n    >>> find_tuples([(1, 2), (2, 4), (3, 2), (4, 3), (5, 6)], 2)\n    [[(1, 2), (3, 2)], [(4, 3), (5, 6)]]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    \n    for item in test_list:\n        if len(item) % K == 0:\n            tuples.append(item)\n    \n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for item in test_list:\n        if all(item % k == 0 for k in range(K)):\n            count += 1\n    return count\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                if test_list[i][1] % test_list[j][1] == 0:\n                    return test_list[i], test_list[j]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tup_list = []\n    for i in test_list:\n        if i[0]%K == 0:\n            tup_list.append(i)\n    return tup_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        x = i[0] % K\n        if x == 0:\n            pass\n        else:\n            print(i, x)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) > 0:\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                if test_list[i][0] % test_list[j][0] == 0:\n                    return test_list\n    else:\n        return []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            #print(test_list[i], \"^\", test_list[j])\n            if test_list[i][1] % test_list[j][1] == 0:\n                #print(test_list[i], \"==\", test_list[j], \"!=\", test_list[j][0])\n                result.append(test_list[i] + test_list[j])\n    print(result)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1, n + 1):\n        if i % 11 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        print('True')\n        return True\n    else: \n        print('False')\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # formula = ((n + 1) % 11) * (n % 11)\n    # return formula == n\n    # return n % 11 == 0\n    \n    if n % 11 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    div_11 = 0\n    if n % 11 == 0:\n        div_11 = n//11\n        return div_11\n    else:\n        return False\n    "
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code here\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s) % 2 == 1): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Method 1: loop through all characters\n    # for word in s:\n    #     if word.isalnum():\n    #         pass\n    #     else:\n    #         return False\n    # return True\n    \n    # Method 2: return a boolean value\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else: \n        return False\n    \ndef word_count(s): \n    '''\n    Write a python function to count the number of words in a string. \n    '''\n    return len(s.split(' '))\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) <= 1:\n        return True\n    elif len(s) == 2:\n        if s[0]!= s[1]:\n            return True\n        else:\n            return False\n    else:\n        return word_len(s[1:]) and word_len(s[:2])\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"The word is Even\")\n    else:\n        print(\"The word is Odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for i in s:\n        if i =='' or i == '\\t':\n            continue\n        count = count + 1\n    if count%2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        return False\n    else: \n        return True\n        #pass\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    n_a = 4\n    n_b = 5\n    n_c = 6\n    n_d = 7\n    n_e = 8\n    n_f = 9\n    n_g = 10\n    n_h = 11\n    n_i = 12\n    n_j = 13\n    n_k = 14\n    n_l = 15\n    n_m = 16\n    n_n = 17\n    n_o = 18\n    n_p = 19\n    n_q = 20\n    n_r = 21\n    n_s = 22\n    n_t = 23\n    n_u = 24\n    n_v = 25\n    n_w = 26\n    n_x = 27\n    n_y = 28\n    n_z = 29\n    n = n - 1\n    if n <= 0:\n        return n\n    if n % 2 == 0:\n        return n_b\n    else:\n        return n_a\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 5\n    elif n == 3: \n        return 11\n    elif n == 4: \n        return 13\n    elif n == 5: \n        return 17\n    elif n == 6: \n        return 19\n    elif n == 7: \n        return 23\n    elif n == 8: \n        return 29\n    elif n == 9: \n        return 31\n    elif n == 10: \n        return 37\n    elif n == 11: \n        return 41\n    elif n == 12: \n        return 47\n    elif n == 13: \n        return 53\n    elif n == 14: \n        return 59\n    elif n == 15: \n        return 61\n    elif n == 16: \n        return 67\n    elif n == 17: \n        return 73\n    elif n == 18: \n        return 79\n    elif n == 19: \n        return 81\n    elif n == 20: \n        return 87\n    elif n == 21: \n        return 93\n    elif n == 22: \n        return 99\n    elif n == 23: \n        return 103\n    elif n == 24: \n        return 107\n    elif n == 25: \n        return 109\n    elif n == 26: \n        return 113\n    elif n == 27: \n        return 119\n    elif n == 28: \n        return 123\n    elif n == 29: \n        return 131\n    elif n == 30: \n        return 137\n    elif n == 31: \n        return 139\n    elif n == 32: \n        return 143\n    elif n == 33: \n        return 149\n    elif n == 34: \n        return 153\n    elif n == 35: \n        return 157\n    elif n == 36: \n        return 163\n    elif n == 37: \n        return 167\n    elif n == 38: \n        return 173\n    elif n == 39: \n        return 179\n    elif n == 40: \n        return 181\n    elif n == 41: \n        return 187\n    elif n == 42: \n        return 193\n    elif n == 43: \n        return 197\n    elif n == 44: \n        return 203\n    elif n == 45: \n        return 209\n    elif n == 46: \n        return 211\n    elif n == 47: \n        return 217\n    elif n == 48: \n        return 223\n    elif n == 49: \n        return 239\n    elif n == 50: \n        return 241\n    elif n == 51: \n        return 247\n    elif n == 52: \n        return 253\n    elif n == 53: \n        return 261\n    elif n == 54: \n        return 277\n    elif n == 55: \n        return 283\n    elif n == 56: \n        return 293\n    elif n == 57: \n        return 299\n    elif n == 58: \n        return 311\n    elif n == 59: \n        return 317\n    elif n == 60: \n        return 331\n    elif n == 61: \n        return 347\n    elif n == 62: \n        return 353\n    elif n == 63: \n        return 359\n    elif n == 64: \n        return 367\n    elif n == 65: \n        return 373\n    elif n == 66: \n        return 379\n    elif n == 67: \n        return 421\n    elif n == 68: \n        return 427\n    elif n == 69: \n        return 431\n    elif n == 70: \n        return 437\n    elif n == 71: \n        return 443\n    elif n == 72: \n        return 449\n    elif n == 73: \n        return 461\n    elif n == 74: \n        return 467\n    elif n == 75: \n        return 473\n    elif n == 76: \n        return 481\n    elif n == 77: \n        return 489\n    elif n == 78: \n        return 491\n    elif n == 79: \n        return 499\n    elif n == 80: \n        return 503\n    elif n == 81: \n        return 501\n    elif n == 82: \n        return 507\n    elif n == 83: \n        return 509\n    elif n == 84: \n        return 511\n    elif n == 85: \n        return 517\n    elif n == 86: \n        return 523\n    elif n == 87: \n        return 539\n    elif n == 88: \n        return 547\n    elif n == 89: \n        return 553\n    elif n == 90: \n        return 559\n    elif n == 91: \n        return 571\n    elif n == 92: \n        return 577\n    elif n == 93: \n        return 583\n    elif n == 94: \n        return 589\n    elif n == 95: \n        return 601\n    elif n == 96: \n        return 607\n    elif n == 97: \n        return 613\n    elif n == 98: \n        return 619\n    elif n == 99: \n        return 631\n    elif n == 100: \n        return 637\n    elif n == 101: \n        return 641\n    elif n == 102: \n        return 647\n    elif n == 103: \n        return 653\n    elif n == 104: \n        return 659\n    elif n == 105: \n        return 661\n    elif n == 106: \n        return 677\n    elif n == 107: \n        return 683\n    elif n == 108: \n        return 691\n    elif n == 109: \n        return 697\n    elif n == 110: \n        return 703\n    elif n == 111: \n        return 709\n    elif n == 112: \n        return 711\n    elif n == 113: \n        return 717\n    elif n == 114: \n        return 723\n    elif n == 115: \n        return 739\n    elif n == 116: \n        return 751\n    elif n == 117: \n        return 757\n    elif n == 118: \n        return 763\n    elif n == 119: \n        return 769\n    elif n == 120: \n        return 771\n    elif n == 121: \n        return 777\n    elif n == 122: \n        return 801\n    elif n == 123: \n        return 809\n    elif n == 124: \n        return 811\n    elif n == 125: \n        return 817\n    elif n == 126: \n        return 823\n    elif n == 127: \n        return 839\n    elif n == 128: \n        return 851\n    elif n == 129: \n        return 857\n    elif n == 130: \n        return 863\n    elif n == 131: \n        return 879\n    elif n == 132: \n        return 881\n    elif n == 133: \n        return 897\n    elif n == 134: \n        return 901\n    elif n == 135: \n        return 909\n    elif n == 136: \n        return 911\n    elif n == 137: \n        return 917\n    elif n == 138: \n        return 923\n    elif n == 139: \n        return 939\n    elif n == 140: \n        return 941\n    elif n == 141: \n        return 947\n    elif n == 142: \n        return 953\n    elif n == 143: \n        return 959\n    elif n == 144: \n        return 971\n    elif n == 145: \n        return 977\n    elif n == 146: \n        return 983\n    elif n == 147: \n        return 999\n    elif n == 148: \n        return 1001\n    elif n ="
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # For this question we will find n such that n is a quadrilateral\n    # hypercube with sides a, b, c, and d.\n    # You will get a triangle as an example below.\n    #\n    # n = 5    (a, b, c, d)\n    #\n    # Please note that n will be an integer value, not a string.\n    #\n    # If you have a positive integer, then you may want to use\n    # the square root. This could help you get a more precise answer\n    # than just getting the square root.\n    #\n    # HINT: You will probably want to check if you have a single entry in\n    # n for n > 1, and then return a string with the answer. If you\n    # get a single entry, it is easy to determine a valid input.\n    #\n    # EXAMPLES:\n    #\n    # tetrahedral_number(5)    # Should be 5\n    # tetrahedral_number(4)    # Should be 3\n    # tetrahedral_number(3)    # Should be 2\n    # tetrahedral_number(2)    # Should be 1\n    # tetrahedral_number(1)    # Should be 0\n    #\n    # n = 2    (a, b)\n    # n = 3    (c, d)\n    # n = 4    (a, b, c, d)\n    # n = 5    (a, b, c, d, e)\n    # n = 6    (a, b, c, d, e, f)\n    # n = 7    (a, b, c, d, e, f, g)\n    # n = 8    (a, b, c, d, e, f, g, h)\n    # n = 9    (a, b, c, d, e, f, g, h, i)\n    # n = 10    (a, b, c, d, e, f, g, h, i, j)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # define the factorial \n    factorial = (n+1) * (n+2) * (n+3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        elif n == 4:\n            return 3\n        else:\n            return tetrahedral(n-1) + tetrahedral(n-2) + tetrahedral(n-3) + tetrahedral(n-4)\n    return tetrahedral(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Write your code here\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(j, end ='')\n        print()\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Write your code here\n    return n * (n+1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            if i % 2 == 0:\n                if i % 2 == 1:\n                    return i + 1\n            else:\n                return i + 1\n        \n        if i % 2 == 0:\n            if i % 2 == 1:\n                return i + 1\n            else:\n                return i + 1\n        \n        if i % 2 == 1:\n            if i % 2 == 2:\n                return i + 1\n            else:\n                return i + 1\n        \n    return n + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # if n is less than 1 then there is nothing to search \n    if n < 0: \n        return 0\n    else: \n        # we have to use factorials to get \n        # the factorial of a number \n        factorial = 1 \n        for i in range(1, n + 1): \n            factorial *= i \n        # now we have to get the sum of all \n        # the factorials of the previous numbers \n        s = 0 \n        for i in range(1, n + 1): \n            s += factorial \n        return s \n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Your code goes here\n    volume = 3.14*(r*r)*(r**2)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    print(f\"The volume of a sphere is {math.pi*(r**3)}\" )\n    return\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0 * math.pi * r * r\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4 * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 3.14*(r**2)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return pi * r * r\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    mod_strr = ''\n    strr_mod_26 = ''\n    for char in strr:\n        mod_strr += str(ord(char) % 26)\n    strr_mod_26 = ''\n    for i in mod_strr:\n        strr_mod_26 += chr(int(i) % 26)\n    print(f'{strr_mod_26}')\n    print(f'{mod_strr}')\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for x in strr:\n        c = ord(x)\n        if c%26==0:\n            return x\n    return '?"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = list(strr)\n    for i in range(len(char_list)):\n        char = ord(char_list[i])\n        char = char - ord('A')\n        char = char + ord('a')\n        char_list[i] = chr(char)\n    result = ''.join(char_list)\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars = []\n    for i in strr:\n        chars.append(ord(i))\n    res = []\n    for j in range(len(chars)):\n        res.append(chars[j] % 26)\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_freq = {}\n    res = []\n    if len(strr) == 0:\n        return res\n    for c in range(len(strr)):\n        char = strr[c]\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for key, value in char_freq.items():\n        res.append((key, value))\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ''.join(c for c in strr if c.isalpha())\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_dict = {\n    'A': '2', 'B': '3', 'C': '4', 'D': '5', 'E': '6', 'F': '7', 'G': '8', 'H': '9', 'I': '10', 'J': '11', 'K': '12', 'L': '13', 'M': '14', 'N': '15', 'O': '16', 'P': '17', 'Q': '18', 'R': '19', 'S': '20', 'T': '21', 'U': '22', 'V': '23', 'W': '24', 'X': '25', 'Y': '26', 'Z': '27',\n    'a': '2', 'b': '3', 'c': '4', 'd': '5', 'e': '6', 'f': '7', 'g': '8', 'h': '9', 'i': '10', 'j': '11', 'k': '12', 'l': '13','m': '14', 'n': '15', 'o': '16', 'p': '17', 'q': '18', 'r': '19','s': '20', 't': '21', 'u': '22', 'v': '23', 'w': '24', 'x': '25', 'y': '26', 'z': '27',\n    ' ': '<space>', '!': '<exclamation>', '?': '<question>', '@': '<at>', '#': '<hashtag>', '$': '<dollar>', '%': '<percent>', '&': '<ampersand>', \"'\": '<apostrophe>', '*': '<asterisk>', '(': '<paren>', ')': '<bracket>', '-': '<minus>', '=': '<equal>', '+': '<plus>', '\\'': '<quotation>', '\"': '<quoted-quote>', '?': '<question>', '.': '<period>', '/': '<slash>'\n}\n    string = strr\n    if len(string) == 1:\n        return string[0]\n    for char in string:\n        if char in char_dict.keys():\n            char = char_dict[char]\n        return char\n    return '<no_space>'"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    try:\n        if int(strr) % 26 == 0:\n            return ord(strr)\n        else:\n            raise ValueError\n    except ValueError:\n        raise TypeError\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    new_strr = \"\"\n    for char in strr:\n        if char in alpha:\n            new_strr += char\n    return int(new_strr, 36) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    try:\n        r = 0\n        for i in strr:\n            r = r + ord(i)\n        r = r % 256\n    except Exception as e:\n        print(e)\n    return r\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    # base case 1. if there is only one number in the sequence, it returns 1\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0 or n == 1:\n        return n \n    # n! = 2n-1! = n-1^2\n    # n! = (n-1)(n-2)! = (n-1)(n-3)!\n    # we need n!(n-1)!\n    # n! = 2n-1n-1!\n    # n! = n-2n-2!\n    # n! = 2n-3n-3!\n    # n! = 2n-4n-4!\n    # n! = 2n-5n-5!\n    #...\n    # n! = 2n-6n-6!\n    # so we calculate the nth number \n    # n! = 2n-7n-7!\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 8\n    else:\n        pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    # recursive call\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n > len(numbers):\n        return None\n    else:\n        return numbers[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # define sequence\n    seq = [1, 2, 3, 4, 5, 6]\n    # check if sequence is valid\n    if n > len(seq):\n        return -1\n    # if sequence is empty, return -1\n    elif n == 1:\n        return 1\n    # if sequence is one, return 0\n    else:\n        return 0\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = []\n    while len(seq) <= n:\n        seq.append(0)\n    while n!= 0:\n        seq[n-1] = (n%10)\n        n = n//10\n    return seq\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = [1,2,3,4,5,6,7,8,9]\n    count = 0\n    for i in range(1, n+1):\n        count += 1\n        if count % 2 == 0:\n            numbers[i] = numbers[i-1]\n        else:\n            numbers[i] = numbers[i+1]\n    return numbers[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    list = []\n    if n <= len(numbers):\n        for i in range(0, n):\n            list.append(numbers[i])\n        list.sort()\n        return list\n    else:\n        print(\"No n is more than the total numbers\")\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n-1 if n%2 == 1 else (n+1)//2"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = (4/3)*math.pi*(r**3)\n    return A\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return 0.5*(math.pi*r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (r**3)*math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return(3.14*r*r)*(4*math.pi*(math.pow(r, 2)))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return r**2 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return 2*(math.pi*(r**3))\ndef surfacearea_cuboid(x1, y1, z1, x2, y2, z2):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    # your code goes here\n    return 6*(math.sqrt(math.pow(x1,2) + math.pow(y1,2) + math.pow(z1,2) - math.pow(x2,2) - math.pow(y2,2) - math.pow(z2,2)))\ndef surfacearea_ellipsoid(p):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    # your code goes here\n    return (2*math.pi*math.pow(p[0],2) + math.pow(p[1],2) + math.pow(p[2],2))\ndef surfacearea_quadrilateral(a, b, c):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    # your code goes here\n    return (2*a*b + c*b*c)\ndef surfacearea_triangle(a,b):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    # your code goes here\n    return (b*b)\ndef surfacearea_heptagon(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a heptagon.\n    '''\n    # your code goes here\n    return 2*(r1**2 + r2**2 + r3**2)\ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    # your code goes here\n    return a*b\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    # your code goes here\n    return 2*math.pi*r**2\ndef area(a, b, c, d, e, f):\n    '''\n    Write a function to find the area of three rectangle.\n    '''\n    # your code goes here\n    return a*e + b*f + c*d\ndef perimeter(a, b, c):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    # your code goes here\n    return (a+b+c)\ndef volume(a, b, c, d, e, f, g):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    # your code goes here\n    return a*f*g\ndef rectangle(a, b, c, d):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    # your code goes here\n    return (a*b) + (c*d)\ndef triangle(a, b, c):\n    '''\n    Write a function to find the area and perimeter of a triangle.\n    '''\n    # your code goes here\n    return (a*b*c)\ndef heptagon(r1, r2, r3):\n    '''\n    Write a function to find the area and perimeter of a heptagon.\n    '''\n    # your code goes here\n    return (2*r1*r2 + r3*r2)\ndef circle(r):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    # your code goes here\n    return (math.pi*r**2)\ndef rectangle(a, b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    # your code goes here\n    return a*b\ndef square(r):\n    '''\n    Write a function to find the area and perimeter of a square.\n    '''\n    # your code goes here\n    return a*a\ndef triangle(a, b, c):\n    '''\n    Write a function to find the area and perimeter of a triangle.\n    '''\n    # your code goes here\n    return a*b*c\ndef sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return (4*math.pi*r**3)\ndef cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_1(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_2(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_3(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_4(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_5(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_6(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_7(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_8(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_9(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_10(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_11(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_12(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_13(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_14(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_15(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_16(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_17(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_18(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_19(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_20(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return r**3\ndef sphere_21(r):\n    '''\n    Write a function to find the surface area of a sphere.\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4/3 * (r ** 3)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    PI = math.pi\n    S = PI * (r ** 2)\n    return S\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    ans = 0\n    n = n - 1\n    while n > 0:\n        ans = ans + n * (6 * (n-1))\n        n = n - 1\n    return ans\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n+1) * (n+3) // 6\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    while i <= n:\n        x = n - (i - 1)\n        if x % 4 == 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    ans = 0\n    for i in range(0, n+1):\n        if i == 0 or i == n:\n            ans += 2\n        elif i % 2 == 0:\n            ans += 1\n        else:\n            ans += 3\n    return ans\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    count = 0\n    while count <= n:\n        count = count + 1\n        print('nth centered hexagonal number: {}'.format(count))\n        print('{:>2d}'.format(n-1))\n        print('{:>2d}'.format(n-2))\n        print('{:>2d}'.format(n-3))\n        print('{:>2d}'.format(n-4))\n        print('{:>2d}'.format(n-5))\n        print('{:>2d}'.format(n-6))\n        print('{:>2d}'.format(n-7))\n        print('{:>2d}'.format(n-8))\n        print('{:>2d}'.format(n-9))\n        print('{:>2d}'.format(n-10))\n        print('{:>2d}'.format(n-11))\n        print('{:>2d}'.format(n-12))\n        print('{:>2d}'.format(n-13))\n        print('{:>2d}'.format(n-14))\n        print('{:>2d}'.format(n-15))\n        print('{:>2d}'.format(n-16))\n        print('{:>2d}'.format(n-17))\n        print('{:>2d}'.format(n-18))\n        print('{:>2d}'.format(n-19))\n        print('{:>2d}'.format(n-20))\n        print('{:>2d}'.format(n-21))\n        print('{:>2d}'.format(n-22))\n        print('{:>2d}'.format(n-23))\n        print('{:>2d}'.format(n-24))\n        print('{:>2d}'.format(n-25))\n        print('{:>2d}'.format(n-26))\n        print('{:>2d}'.format(n-27))\n        print('{:>2d}'.format(n-28))\n        print('{:>2d}'.format(n-29))\n        print('{:>2d}'.format(n-30))\n        print('{:>2d}'.format(n-31))\n        print('{:>2d}'.format(n-32))\n        print('{:>2d}'.format(n-33))\n        print('{:>2d}'.format(n-34))\n        print('{:>2d}'.format(n-35))\n        print('{:>2d}'.format(n-36))\n        print('{:>2d}'.format(n-37))\n        print('{:>2d}'.format(n-38))\n        print('{:>2d}'.format(n-39))\n        print('{:>2d}'.format(n-40))\n        print('{:>2d}'.format(n-41))\n        print('{:>2d}'.format(n-42))\n        print('{:>2d}'.format(n-43))\n        print('{:>2d}'.format(n-44))\n        print('{:>2d}'.format(n-45))\n        print('{:>2d}'.format(n-46))\n        print('{:>2d}'.format(n-47))\n        print('{:>2d}'.format(n-48))\n        print('{:>2d}'.format(n-49))\n        print('{:>2d}'.format(n-50))\n        print('{:>2d}'.format(n-51))\n        print('{:>2d}'.format(n-52))\n        print('{:>2d}'.format(n-53))\n        print('{:>2d}'.format(n-54))\n        print('{:>2d}'.format(n-55))\n        print('{:>2d}'.format(n-56))\n        print('{:>2d}'.format(n-57))\n        print('{:>2d}'.format(n-58))\n        print('{:>2d}'.format(n-59))\n        print('{:>2d}'.format(n-60))\n        print('{:>2d}'.format(n-61))\n        print('{:>2d}'.format(n-62))\n        print('{:>2d}'.format(n-63))\n        print('{:>2d}'.format(n-64))\n        print('{:>2d}'.format(n-65))\n        print('{:>2d}'.format(n-66))\n        print('{:>2d}'.format(n-67))\n        print('{:>2d}'.format(n-68))\n        print('{:>2d}'.format(n-69))\n        print('{:>2d}'.format(n-70))\n        print('{:>2d}'.format(n-71))\n        print('{:>2d}'.format(n-72))\n        print('{:>2d}'.format(n-73))\n        print('{:>2d}'.format(n-74))\n        print('{:>2d}'.format(n-75))\n        print('{:>2d}'.format(n-76))\n        print('{:>2d}'.format(n-77))\n        print('{:>2d}'.format(n-78))\n        print('{:>2d}'.format(n-79))\n        print('{:>2d}'.format(n-80))\n        print('{:>2d}'.format(n-81))\n        print('{:>2d}'.format(n-82))\n        print('{:>2d}'.format(n-83))\n        print('{:>2d}'.format(n-84))\n        print('{:>2d}'.format(n-85))\n        print('{:>2d}'.format(n-86))\n        print('{:>2d}'.format(n-87))\n        print('{:>2d}'.format(n-88))\n        print('{:>2d}'.format(n-89))\n        print('{:>2d}'.format(n-90))\n        print('{:>2d}'.format(n-91))\n        print('{:>2d}'.format(n-92))\n        print('{:>2d}'.format(n-93))\n        print('{:>2d}'.format(n-94))\n        print('{:>2d}'.format(n-95))\n        print('{:>2d}'.format(n-96))\n        print('{:>2d}'.format(n-97))\n        print('{:>2d}'.format(n-98))\n        print('{:>2d}'.format(n-99))\n        print('{:>2d}'.format(n-100))\n        print('{:>2d}'.format(n-101))\n        print('{:>2d}'.format(n-102))\n        print('{:>2d}'.format(n-103))\n        print('{:>2d}'.format(n-104))\n        print('{:>2d}'.format(n-105))\n        print('{:>2d}'.format(n-106))\n        print('{:>2d}'.format(n-107))\n        print('{:>2d}'.format(n-108))\n        print('{:>2d}'.format(n-109))\n        print('{:>2d}'.format(n-110))\n        print('{:>2d}'.format(n-111))\n        print('{:>2d}'.format(n-112))\n        print('{:>2d}'.format(n-113))\n        print('{:>2d}'.format(n-114))\n        print('{:>2d}'.format(n-115))\n        print('{:>2d}'.format(n-116))\n        print('{:>"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n > 0 and n <= 9:\n        return n\n    else:\n        return n - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n//2\n    if n < 4:\n        return n*n\n    elif n == 4:\n        return n\n    elif n == 2:\n        return n*(n+1)//2\n    else:\n        return n*(n+2)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    result = []\n    for i in range(4, n, 6):\n        result.append(i)\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base Cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 12\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 18\n    elif n == 8:\n        return 21\n    elif n == 9:\n        return 24\n    elif n == 10:\n        return 27\n    elif n == 11:\n        return 30\n    elif n == 12:\n        return 33\n    elif n == 13:\n        return 36\n    elif n == 14:\n        return 39\n    elif n == 15:\n        return 42\n    elif n == 16:\n        return 46\n    elif n == 17:\n        return 49\n    elif n == 18:\n        return 52\n    elif n == 19:\n        return 56\n    elif n == 20:\n        return 59\n    elif n == 21:\n        return 62\n    elif n == 22:\n        return 66\n    elif n == 23:\n        return 69\n    elif n == 24:\n        return 72\n    elif n == 25:\n        return 74\n    elif n == 26:\n        return 77\n    elif n == 27:\n        return 80\n    elif n == 28:\n        return 83\n    elif n == 29:\n        return 86\n    elif n == 30:\n        return 89\n    elif n == 31:\n        return 92\n    elif n == 32:\n        return 96\n    elif n == 33:\n        return 99\n    elif n == 34:\n        return 102\n    elif n == 35:\n        return 106\n    elif n == 36:\n        return 109\n    elif n == 37:\n        return 112\n    elif n == 38:\n        return 115\n    elif n == 39:\n        return 118\n    elif n == 40:\n        return 121\n    elif n == 41:\n        return 122\n    elif n == 42:\n        return 126\n    elif n == 43:\n        return 129\n    elif n == 44:\n        return 132\n    elif n == 45:\n        return 135\n    elif n == 46:\n        return 138\n    elif n == 47:\n        return 141\n    elif n == 48:\n        return 144\n    elif n == 49:\n        return 147\n    elif n == 50:\n        return 150\n    elif n == 51:\n        return 153\n    elif n == 52:\n        return 156\n    elif n == 53:\n        return 159\n    elif n == 54:\n        return 162\n    elif n == 55:\n        return 165\n    elif n == 56:\n        return 168\n    elif n == 57:\n        return 171\n    elif n == 58:\n        return 174\n    elif n == 59:\n        return 177\n    elif n == 60:\n        return 180\n    elif n == 61:\n        return 183\n    elif n == 62:\n        return 186\n    elif n == 63:\n        return 189\n    elif n == 64:\n        return 192\n    elif n == 65:\n        return 195\n    elif n == 66:\n        return 198\n    elif n == 67:\n        return 201\n    elif n == 68:\n        return 204\n    elif n == 69:\n        return 207\n    elif n == 70:\n        return 210\n    elif n == 71:\n        return 215\n    elif n == 72:\n        return 208\n    elif n == 73:\n        return 211\n    elif n == 74:\n        return 214\n    elif n == 75:\n        return 217\n    elif n == 76:\n        return 220\n    elif n == 77:\n        return 225\n    elif n == 78:\n        return 228\n    elif n == 79:\n        return 231\n    elif n == 80:\n        return 234\n    elif n == 81:\n        return 237\n    elif n == 82:\n        return 240\n    elif n == 83:\n        return 245\n    elif n == 84:\n        return 248\n    elif n == 85:\n        return 251\n    elif n == 86:\n        return 254\n    elif n == 87:\n        return 255\n    elif n == 88:\n        return 256\n    elif n == 89:\n        return 259\n    elif n == 90:\n        return 262\n    elif n == 91:\n        return 265\n    elif n == 92:\n        return 268\n    elif n == 93:\n        return 271\n    elif n == 94:\n        return 274\n    elif n == 95:\n        return 277\n    elif n == 96:\n        return 280\n    elif n == 97:\n        return 285\n    elif n == 98:\n        return 288\n    elif n == 99:\n        return 291\n    elif n == 100:\n        return 294\n    elif n == 101:\n        return 297\n    elif n == 102:\n        return 300\n    elif n == 103:\n        return 305\n    elif n == 104:\n        return 308\n    elif n == 105:\n        return 311\n    elif n == 106:\n        return 314\n    elif n == 107:\n        return 317\n    elif n == 108:\n        return 320\n    elif n == 109:\n        return 323\n    elif n == 110:\n        return 326\n    elif n == 111:\n        return 329\n    elif n == 112:\n        return 332\n    elif n == 113:\n        return 335\n    elif n == 114:\n        return 338\n    elif n == 115:\n        return 351\n    elif n == 116:\n        return 354\n    elif n == 117:\n        return 357\n    elif n == 118:\n        return 360\n    elif n == 119:\n        return 365\n    elif n == 120:\n        return 368\n    elif n == 121:\n        return 361\n    elif n == 122:\n        return 362\n    elif n == 123:\n        return 365\n    elif n == 124:\n        return 366\n    elif n == 125:\n        return 369\n    elif n == 126:\n        return 372\n    elif n == 127:\n        return 375\n    elif n == 128:\n        return 378\n    elif n == 129:\n        return381\n    elif n == 130:\n        return 386\n    elif n == 131:\n        return 389\n    elif n == 132:\n        return 392\n    elif n == 133:\n        return 395\n    elif n == 134:\n        return 398\n    elif n == 135:\n        return 441\n    elif n == 136:\n        return 442\n    elif n == 137:\n        return 446\n    elif n == 138:\n        return 449\n    elif n == 139:\n        return 452\n    elif n == 140:\n        return 455\n    elif n == 141:\n        return 458\n    elif n == 142:\n        return 451\n    elif n == 143:\n        return 454\n    elif n == 144:\n        return 457\n    elif n == 145:\n        return 460\n    elif n == 146:\n        return 461\n    elif n == 147:\n        return 462\n    elif n == 148:\n        return 465\n    elif n == 149:\n        return 467\n    elif n == 150:\n        return 468\n    elif n == 151:\n        return 471\n    elif n == 152:\n        return 472\n    elif n == 153:\n        return 475\n    elif n == 154:\n        return 478\n    elif n == 155:\n        return 481\n    elif n == 156:\n        return 484\n    elif n == 157:\n        return 491\n    elif n == 158:\n        return 495\n    elif n == 159:\n        return 499\n    elif n == 160:\n        return 500\n    elif n == 161:\n        return 505\n    elif n == 162:\n        return 508\n    elif n == 163:\n        return 511\n    elif n == 164:\n        return 514\n    elif n == 165:\n    "
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1 = dict(dict1)\n    dict2 = dict(dict2)\n    dict3 = dict(dict3)\n    list1 = dict1.items()\n    list2 = dict2.items()\n    list3 = dict3.items()\n    sorted_list1 = sorted(list1)\n    sorted_list2 = sorted(list2)\n    sorted_list3 = sorted(list3)\n    merged_dict = dict()\n    for key1,value1 in sorted_list1:\n        if key1 in dict3:\n            if value1 in dict3[key1]:\n                pass\n            else:\n                dict3[key1] = value1\n        else:\n            if value1 in dict2:\n                dict3[key1] = value1\n            else:\n                dict2[key1] = value1\n    for key2,value2 in sorted_list2:\n        if key2 in dict3:\n            if value2 in dict3[key2]:\n                pass\n            else:\n                dict3[key2] = value2\n        else:\n            if value2 in dict1:\n                dict3[key2] = value2\n            else:\n                dict1[key2] = value2\n    for key3,value3 in sorted_list3:\n        if key3 in dict2:\n            if value3 in dict2[key3]:\n                pass\n            else:\n                dict2[key3] = value3\n        else:\n            if value3 in dict1:\n                dict2[key3] = value3\n            else:\n                dict1[key3] = value3\n    return merged_dict\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1) == 0:\n        return dict2\n    elif len(dict2) == 0:\n        return dict3\n    elif len(dict1) == 0 or len(dict2) == 0:\n        return dict1\n    elif dict1[0]['key'] > dict2[0]['key']:\n        return merge_dictionaries_three(dict1[1:],dict2[1:], dict3[1:])\n    else:\n        return merge_dictionaries_three(dict1[1:],dict2[1:],dict3[1:])\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2:\n            merged_dict[key] = dict1[key]\n            merged_dict.update(dict2[key])\n        else:\n            merged_dict.update({key:dict1[key]})\n    for key in dict3:\n        if key in merged_dict:\n            if isinstance(dict3[key], dict):\n                merged_dict[key].update(dict3[key])\n            else:\n                merged_dict[key] = dict3[key]\n        else:\n            if isinstance(dict3[key], dict):\n                merged_dict.update({key:dict3[key]})\n            else:\n                merged_dict.update({key:dict3[key]})\n    return merged_dict\n    \ndef merge_dictionaries_three_sorted(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2:\n            merged_dict[key] = dict1[key]\n            merged_dict.update(dict2[key])\n        else:\n            merged_dict.update({key:dict1[key]})\n    for key in dict3:\n        if key in merged_dict:\n            if isinstance(dict3[key], dict):\n                merged_dict[key].update(dict3[key])\n            else:\n                merged_dict[key] = dict3[key]\n        else:\n            if isinstance(dict3[key], dict):\n                merged_dict.update({key:dict3[key]})\n            else:\n                merged_dict.update({key:dict3[key]})\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_to_merge = dict1.copy()\n    dict_to_merge.update(dict2.copy())\n    dict_to_merge.update(dict3.copy())\n    return dict_to_merge\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    new_dict.update(dict1)\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict2)\n    dict3.update(dict1)\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict1.keys():\n        dict1[key].update(dict2[key])\n    for key in dict2.keys():\n        dict2[key].update(dict3[key])\n    return dict1\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    for key in dict1.keys():\n        dict1[key].update(dict2[key])\n    for key in dict2.keys():\n        dict2[key].update(dict3[key])\n    for key in dict3.keys():\n        dict3[key].update(dict4[key])\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict()\n    for key, value in dict1.items():\n        res[key] = value\n    for key, value in dict2.items():\n        res[key] = value\n    for key, value in dict3.items():\n        res[key] = value\n    return res\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\ndef freq_sum(list2):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a dictionary.\n    '''\n    sum = collections.Counter(list2)\n    return sum\ndef print_freq(freq):\n    '''\n    Write a function that prints the frequency of elements in a dictionary.\n    '''\n    for key, val in freq.items():\n        print(f'{key}:\\t{val}')\ndef sorted_list(list1):\n    '''\n    Write a function that sorts a list and returns a new list sorted in ascending order.\n    '''\n    new_list = sorted(list1, reverse = True)\n    return new_list\ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list in ascending order.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\ndef longest_word(list1):\n    '''\n    Write a function that returns the longest word in a list of words.\n    '''\n    words = list1\n    print(len(words[0]))\n    return words[0]\ndef most_common_word(list2):\n    '''\n    Write a function that returns the most common word in a list of words.\n    '''\n    counts = collections.Counter(list2)\n    return counts.most_common(1)[0][0]\ndef most_common_word_longest(list1):\n    '''\n    Write a function that returns the word with the most common meaning.\n    '''\n    words = list1\n    for word in words:\n        print(f'{word}:\\t{most_common_word(word)}')\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\ndef ispalindrome(string):\n    '''\n    Write a function to check if a string is a palindrome. A palindrome is a word, phrase, or sentence that reads the same backward as forward.\n    '''\n    #replace this line\n    return string[::-1].lower() == string.lower()\ndef remove_punctuation(list1):\n    '''\n    Write a function to remove punctuation from a list of strings.\n    '''\n    #replace this line\n    return \"\".join([i for i in list1 if i not in ['!', '?', '.', ',', ':', ';', ')', ')', '(', '-', '_', '+', '=', ':', ';', ')', ')', ',', '-', '_', '+', '=', ':', ';', ')', ')', ',', '-', '_', '+', '=', ':', ';', ')', ')', ','])\ndef delete_punctuation(list1):\n    '''\n    Write a function to delete punctuation from a list of strings.\n    '''\n    #replace this line\n    return \"\".join([i for i in list1 if i not in ['!', '?', '.', ',', ':', ';', ')', ')', '(', '-', '_', '+', '=', ':', ';', ')', ')', ',', '-', '_', '+', '=', ':', ';', ')', ')', ','])\ndef normalize(list1):\n    '''\n    Write a function to normalize all the elements in a list.\n    '''\n    #replace this line\n    return \"\".join([i.lower() if isinstance(i, str) else i for i in list1])\ndef remove_stopwords(list1):\n    '''\n    Write a function to remove stopwords from a list of strings.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in stopwords])\ndef tokenize(list1):\n    '''\n    Write a function to tokenize a list of strings.\n    '''\n    #replace this line\n    return list1\ndef tokenize_shingle(list1):\n    '''\n    Write a function to tokenize a list of strings.\n    '''\n    #replace this line\n    return list1\ndef remove_single_char(list1):\n    '''\n    Write a function to remove single characters from a list of strings.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if len(i) == 1])\ndef normalize_word(list1):\n    '''\n    Write a function to normalize all the words in a list of strings.\n    '''\n    #replace this line\n    return \" \".join([i.lower() if isinstance(i, str) else i for i in list1])\ndef normalize_shingle(list1):\n    '''\n    Write a function to normalize all the words in a list of strings.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if len(i) > 1])\ndef get_stop_words(list1):\n    '''\n    Write a function to get the stop words list from a list of strings.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in stopwords])\ndef lemmatize(list1):\n    '''\n    Write a function to lemmatize a list of strings.\n    '''\n    #replace this line\n    return \" \".join([i.lower() if isinstance(i, str) else i for i in list1])\ndef get_word_list(list1):\n    '''\n    Write a function to get the word list from a list of strings.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if not isinstance(i, str)])\ndef remove_list_key(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_key_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingle(list1, list2):\n    '''\n    Write a function to remove all the elements from a list of strings that are in the list.\n    '''\n    #replace this line\n    return \" \".join([i for i in list1 if i not in list2])\ndef remove_list_value_shingle_shingle_shingl"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    print(d)\n    return d\n    # d = {}\n    # for i in list1:\n    #     if i not in d:\n    #         d[i] = 1\n    #     else:\n    #         d[i] += 1\n    # return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create a new dictionary to have the frequency of each element\n    d = {}\n    # Iterate over the list\n    for element in list1:\n        # if the element is in the dictionary, then add its frequency value to the count\n        if element in d:\n            d[element] += 1\n        # else, add the element to the dictionary\n        else:\n            d[element] = 1\n    # Return the dictionary\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_d = collections.Counter(list1)\n    freq_d = dict(freq_d)\n    return freq_d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d=collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = collections.Counter(list1)\n    dic.pop()\n    print(dic)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # list of unique elements\n    unique_elements = []\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    return d\ndef merge_freq(list1):\n    '''\n    Write a function to merge two frequency dictionary into one.\n    '''\n    d1 = freq_count(list1)\n    d2 = freq_count(dict_to_list(list2))\n    new_d = dict()\n    for key in d1:\n        if key in d2:\n            new_d[key] = d1[key] + d2[key]\n    return new_d\ndef merge_freq_two(list1,list2):\n    '''\n    Write a function to merge two frequency dictionary into one.\n    '''\n    d1 = freq_count(list1)\n    d2 = freq_count(list2)\n    new_d = {}\n    for key in d1:\n        if key in d2:\n            new_d[key] = d1[key] + d2[key]\n    return new_d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # creating an empty dictionary\n    freq_dict = collections.Counter(list1)\n    # returning the dictionary\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N < 2 or N == 1:\n        return 1\n    \n    smallest = N\n    for i in range(2, N):\n        if N % i == 0:\n            smallest = i\n            break\n    \n    return smallest\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    if N == 2:\n        return 3\n    if N == 3:\n        return 4\n    if N == 4:\n        return 5\n    return closest_num(N - 1) + closest_num(N - 2) + closest_num(N - 3) + closest_num(N - 4) + closest_num(N - 5)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    c = 0\n    smallest = float('inf')\n    for i in range(N+1):\n        c += abs(i-N)\n        if c < smallest:\n            smallest = c\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    l = [int(N)]\n    for i in range(1, N):\n        if (l[i-1] < l[i]):\n            l.append(l[i])\n    l.sort()\n    return l[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    \n    if N == 1:\n        return 1\n    \n    if N % 2 == 0:\n        return closest_num(N // 2) + 1\n    else:\n        return closest_num(N // 2)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 1:\n        return -1\n    \n    smallest = 1\n    closest = 1\n    for i in range(2, N + 1):\n        if smallest > i:\n            smallest = i\n    \n    for i in range(N + 1):\n        if smallest == i:\n            closest = i\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N == 1:\n        return 1\n    \n    if N % 2 == 0:\n        return closest_num(N//2)\n    else:\n        return N//2\n    \n    \ndef largest_num(N):\n    '''\n    Write a function to find the largest number from a list of numbers.\n    '''\n    \n    if N == 1:\n        return 1\n    \n    if N % 2 == 0:\n        return largest_num(N//2)\n    else:\n        return N//2\n    \n    \ndef smallest_num(N):\n    '''\n    Write a function to find the smallest number from a list of numbers.\n    '''\n    \n    if N == 1:\n        return 1\n    \n    if N % 2 == 0:\n        return smallest_num(N//2)\n    else:\n        return N//2\n    \n    \nN = int(input())\nprint(closest_num(N))\nprint(largest_num(N))\nprint(smallest_num(N))"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_l = []\n    num_r = []\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        raise ValueError(\"Negative numbers are not allowed\")\n    elif N == 0:\n        return 0\n    else:\n        return closest_num(N-1) + 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    i=0\n    while i < len(list1):\n        if len(list1[i])>len(list1[i+1]):\n            i=i+1\n        elif len(list1[i])>len(list1[i+1]):\n            i=i+1\n    return i\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if list1 == []:\n        return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = []\n    for word in list1:\n        if len(word) == 1:\n            length.append(1)\n        elif len(word) == 2:\n            length.append(1)\n            length.append(1)\n        elif len(word) == 3:\n            length.append(2)\n            length.append(1)\n            length.append(1)\n        elif len(word) == 4:\n            length.append(3)\n            length.append(1)\n            length.append(1)\n            length.append(1)\n        else:\n            length.append(4)\n            length.append(1)\n            length.append(1)\n            length.append(1)\n            length.append(1)\n            length.append(1)\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return max(list1)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(len(max(list1, key=len)))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_list = []\n    for word in list1:\n        if word!= \" \":\n            word_list.append(word)\n    max_length = len(max(word_list, key = len))\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    my_list=[]\n    for item in list1:\n        if item not in my_list:\n            my_list.append(item)\n    print(len(max(my_list, key=len)))\n    return len(max(my_list, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1, key = len)))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1.lower()\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            print(i)\n            return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 == '':\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    start = 0\n    end = -1\n    \n    for i in range(len(str1)):\n        if str1[i] in sub_str:\n            end = i-1\n            \n            if end!= -1:\n                break\n    \n    if end == -1:\n        return False\n    \n    for j in range(start, end+1):\n        if sub_str[j] in str1:\n            return True\n    \n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i=0\n    j=0\n    \n    if len(sub_str)<len(str1):\n        return False\n    elif len(sub_str)==len(str1):\n        while j<len(str1):\n            if str1[i:i+len(sub_str)]==sub_str:\n                if j+len(sub_str)>i+len(str1):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        return True\n    else:\n        while j<len(str1):\n            if str1[i:i+len(sub_str)]==sub_str:\n                if i+len(sub_str)>j+len(str1):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        return True\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i, j = 0, len(str1) - 1\n    j = j % len(sub_str)\n    while i < j:\n        if str1[i] == sub_str[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_index = -1\n    for i in range(len(sub_str)):\n        if sub_str[i] in str1:\n            sub_str_index = i\n            break\n    return sub_str_index == -1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1) - len(sub_str) + 1):\n        for j in range(0, len(str1)):\n            if str1[i + j]!= sub_str[0]:\n                break\n        else:\n            if i == len(str1) - len(sub_str):\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1=str1.lower()\n    str2=sub_str.lower()\n    sub_str=str(sub_str)\n    return str1.find(str2)>=0\n    \n    "
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str not in str1:\n        return False\n    else:\n        if str1.find(sub_str)!= -1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n    \nprint(is_undulating(5))\nprint(is_undulating(10)"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 2:\n        return False\n    elif n % 3!= 0 and n % 5!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n<=1):\n        return False\n    if(n>=2 and n%2==0):\n        return True\n    return False\ndef make_key(n, d, ind): \n    '''\n    Given a number and its proper divisors, return the key corresponding to that number.\n    '''\n    if d>n:\n        return -1\n    if n == d:\n        return ind\n    ind += 1\n    return make_key(n//d, d, ind)\ndef is_prime(n): \n    '''\n    Given a number, return true if it is prime, otherwise return false.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_it_prime(n): \n    '''\n    Given a number, return True if it is a prime number, otherwise return False.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef is_it_prime_factor(n): \n    '''\n    Given a number, return True if it is a prime number factor, otherwise return False.\n    '''\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\ndef count_prime_factors(n): \n    '''\n    Given a number, return the count of prime factors.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n%2==0:\n        return 0\n    count=0\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            count+=1\n    return count\ndef fibonacci_iterative(n): \n    '''\n    Given a number n, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=1\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            s+=1\n            f+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=1\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_1(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_2(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_3(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_4(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_5(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_6(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_7(n): \n    '''\n    Given a number, return the number of prime factors.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n<2:\n        return 0\n    if n<3:\n        return 1\n    f=0\n    s=1\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            f+=1\n            s+=1\n            if s>f:\n                return f\n    return 0\ndef fibonacci_recursive_8(n): \n    '''\n    Given a number, retur"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not (n == 1 or (n % 2 == 1 and n % 5 == 0))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n in (1, 3, 5, 7, 9): return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0: return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: \n        raise ValueError(\"Undulating is not allowed.\")\n    elif n == 0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # ===Modify codes below=============\n    # Instructions\n    # Create a variable, 'undulating', to hold true or false.\n    # Do not indent this variable, but feel free to use it to check\n    # the status of the function.\n    # Write the return statement to 'undulating'\n    # return 'undulating'\n    # OR\n    # Your code here\n    # ===Modify codes above=============\n    # The code below is just for illustrating\n    # what happens in the code\n    if n > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    return (n % 2 == 0 and n == 3) or (n % 2 == 1 and n == 5)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def check_undulating(n, k): \n        k = k - 1\n        if n == 0: \n            return False\n        if n % 2 == 1: \n            return check_undulating(n / 2, k) \n        else: \n            return check_undulating(n * 3 + 1, k) \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n        \ndef main():\n    '''\n    Test your function by first printing your result on the screen. Then, use the function\n    power() to compute the result and then call the function again.\n    '''\n    print(power(2,3))\n    print(power(2,0))\n    \nmain()\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a**b)\n    print('a squared is : ', a**2)\n    print('a cubed is : ', a**3)\n    print('a squared is : ', a**2**2)\n    print('a cubed is : ', a**3**3)\n    print('a squared is : ', a**2*a)\n    print('a cubed is : ', a**3*a)\n    print('a squared is : ', a**2**2)\n    print('a cubed is : ', a**3**3)\n    print('a squared is : ', a**2*a)\n    print('a cubed is : ', a**3*a)\n    print('a squared is : ', a**2**2)\n    print('a cubed is : ', a**3**3)\n    print('a squared is : ', a**2*a)\n    print('a cubed is : ', a**3**3)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(2,3))\nprint(power(2,4))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #create a loop that calculates the power of a to the power b\n    power = 1\n    if b == 0:\n        return 1\n    else:\n        while a!= 0:\n            a = a%b\n            a = a//b\n            power = power + 1\n        return power\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_second = sorted(test_list, key = itemgetter(1))\n    return min_second[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if test_list == []:\n        return None\n    min_val = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val[1]:\n            min_val = test_list[i]\n    return (min_val[0],min_val[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    def get_min_second(tup):\n        if tup[0] > tup[1]:\n            return tup[0]\n        else:\n            return tup[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return (min_index)\n    "
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code goes here\n    minimum = test_list[0]\n    second = minimum[1]\n    for i in test_list:\n        if i[1] < second:\n            second = i[1]\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return max(test_list, key=itemgetter(1))\n    \ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the middle value of the tuple.\n    '''\n    return (sum(sorted(test_list))+sum(test_list))/2\n    \ndef index_mode(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the \n    first element of the tuple, the second element of the tuple, and the third element of the tuple.\n    '''\n    return test_list[0], test_list[1], test_list[2]\n    \ndef index_index(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the \n    first element of the tuple.\n    '''\n    return test_list[0].index(test_list[1][0])\n    \ndef index_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the tuple with the first \n    element of the tuple.\n    '''\n    return sum([int(i[0]) for i in test_list])\n    \ndef index_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the minimum value of the tuple.\n    '''\n    return min(test_list, key=itemgetter(1))\n    \ndef index_max(test_list):\n    '''\n    Given a list of tuples, write a function that returns the maximum value of the tuple.\n    '''\n    return max(test_list, key=itemgetter(1))\n    \ndef index_first_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first five elements of the tuple.\n    '''\n    return test_list[:5]\n    \ndef index_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the last five elements of the tuple.\n    '''\n    return test_list[-5:]\n    \ndef index_count(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of occurrences of the tuple with the first element of the tuple.\n    '''\n    return len(list(filter(itemgetter(0), test_list)))\n    \ndef index_mode(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return test_list[0], test_list[1][0]\n    \ndef index_mode_count(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return test_list[0], test_list[1][0][1]\n    \ndef index_mode_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return sum([int(i[0]) for i in test_list])\n    \ndef index_mode_first_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first five elements of the tuple.\n    '''\n    return test_list[:5]\n    \ndef index_mode_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the last five elements of the tuple.\n    '''\n    return test_list[-5:]\n    \ndef index_mode_count_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return test_list[0], test_list[1][0][1]\n    \ndef index_mode_count_first_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first five elements of the tuple.\n    '''\n    return test_list[:5]\n    \ndef index_mode_sum_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return sum([int(i[0]) for i in test_list])\n    \ndef index_mode_count_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return test_list[0], test_list[1][0][1]\n    \ndef index_mode_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the minimum value of the tuple with the second element of the tuple.\n    '''\n    return min(test_list, key=itemgetter(1))\n    \ndef index_mode_max(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the maximum value of the tuple with the second element of the tuple.\n    '''\n    return max(test_list, key=itemgetter(1))\n    \ndef index_mode_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the tuple with the second element of the tuple.\n    '''\n    return sum([int(i[0]) for i in test_list])\n    \ndef index_mode_first_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first five elements of the tuple.\n    '''\n    return test_list[:5]\n    \ndef index_mode_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the last five elements of the tuple.\n    '''\n    return test_list[-5:]\n    \ndef index_mode_count_first_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return test_list[0], test_list[1][0][1]\n    \ndef index_mode_count_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return test_list[:5]\n    \ndef index_mode_sum_first_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return sum([int(i[0]) for i in test_list])\n    \ndef index_mode_count_last_five(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the first element of the tuple with the smallest second element.\n    '''\n    return test_list[0], test_list[1][0][1]\n    \ndef index_mode_min_count(test_list):\n    '''\n    Given a list of tuples, write a function that returns the tuple with the minimum number of occurrences of the tuple with the second element of the tuple.\n    '''\n    return min([itemgetter(1) for item in test_list], key=itemgetter(1))\n    \ndef index_mode_max_count(test_list):\n    '''\n    Given a list of t"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_tuples = []\n    for tuples in test_list:\n        list_of_tuples.append(tuples)\n    return list_of_tuples[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    for i in test_list:\n        for j in test_list:\n            if index == 0:\n                if i[2] < j[2]:\n                    index = index\n            else:\n                if index == 0:\n                    if i[2] < j[2]:\n                        index = index\n                else:\n                    if index == 0:\n                        if i[2] < j[2]:\n                            index = index\n                    else:\n                        if index == 0:\n                            if i[2] < j[2]:\n                                index = index\n                        else:\n                            if index == 0:\n                                if i[2] < j[2]:\n                                    index = index\n    return test_list[index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #return min(itemgetter(1)(test_list))\n    min_vals=[]\n    for i in test_list:\n        if i not in min_vals:\n            min_vals.append(i)\n    return min_vals[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = len(lst[0])\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if len(lst[i][j]) < minLen:\n                minLen = len(lst[i][j])\n    return minLen"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(len(lst)):\n        if lst[i][0] < min_length:\n            min_length = lst[i][0]\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = []\n    for i in lst:\n        if len(i) > len(min_length):\n            min_length = i\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return 0\n    lst_length = len(lst)\n    for i in range(lst_length):\n        for j in range(i + 1, lst_length):\n            if lst[i] < lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return len(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == None or len(lst) == 0:\n        return 0\n    else:\n        return min([Find_Min_Length(lst[i]) for i in range(len(lst))])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    if l == 0:\n        return 0\n    min = lst[0]\n    for i in range(l):\n        if min > lst[i]:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] < lst[i][min_len]:\n                min_len = j\n    return min_len\n    \ndef Sort_List(lst):\n    '''\n    Write a python function to sort the list of lists using Bubble Sort.\n    '''\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst)):\n            if lst[i][j] > lst[i][min_len]:\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n    return lst\n    \ndef Count_Matching_Words(lst, word):\n    '''\n    Write a python function to count the number of times the word occurs in a list of lists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i][word] == 1:\n            count += 1\n    return count\n    \ndef Calculate_Fitness(lst):\n    '''\n    Write a python function to calculate the fitness of a list of lists.\n    '''\n    fitness = 0\n    for i in range(len(lst)):\n        fitness += Count_Matching_Words(lst, lst[i][0])\n    return fitness\n    \ndef Find_Best_Index(lst):\n    '''\n    Write a python function to find the index of the greatest fitness word in a list of lists.\n    '''\n    max_fitness = 0\n    max_index = 0\n    for i in range(len(lst)):\n        if Count_Matching_Words(lst, lst[i][0]) > max_fitness:\n            max_fitness = Count_Matching_Words(lst, lst[i][0])\n            max_index = i\n    return max_index\n    \ndef Evaluate_Mutation(lst, ind):\n    '''\n    Write a python function to perform mutation on a list of lists using crossover.\n    '''\n    fitness = Count_Matching_Words(lst, lst[ind])\n    return fitness\n    \ndef Mutate_List(lst):\n    '''\n    Write a python function to mutate a list of lists.\n    '''\n    index = Find_Best_Index(lst)\n    if index == 0:\n        lst = Sort_List(lst)\n    else:\n        for i in range(index):\n            lst[i][0] = lst[i+1][0]\n            lst[i+1][0] = lst[i][0]\n    return lst\n    \ndef Select_Parent(lst):\n    '''\n    Write a python function to select the next parent from the current parent.\n    '''\n    ind = 0\n    for i in range(len(lst)):\n        if lst[i][1] < lst[ind][1]:\n            ind = i\n    return ind\n    \ndef Apply_Mutation(lst):\n    '''\n    Write a python function to apply mutation on a list of lists.\n    '''\n    lst = Mutate_List(lst)\n    lst = Sort_List(lst)\n    return lst\n    \ndef Set_Best_Index(lst):\n    '''\n    Write a python function to set the index of the best word from a list of lists.\n    '''\n    best_index = 0\n    for i in range(len(lst)):\n        if Count_Matching_Words(lst, lst[i][0]) > Count_Matching_Words(lst, lst[best_index][0]):\n            best_index = i\n    return best_index\n    \ndef Set_Max_Fitness(lst):\n    '''\n    Write a python function to set the maximum fitness word from a list of lists.\n    '''\n    max_fitness = 0\n    for i in range(len(lst)):\n        if Count_Matching_Words(lst, lst[i][0]) > max_fitness:\n            max_fitness = Count_Matching_Words(lst, lst[i][0])\n            \n    return max_fitness\n    \ndef Fitness_Function(lst):\n    '''\n    Write a python function to return the fitness of a list of lists.\n    '''\n    fitness = 0\n    for i in range(len(lst)):\n        fitness += Count_Matching_Words(lst, lst[i][0])\n    return fitness\n    \ndef Game(lst):\n    '''\n    Write a function to generate a list of lists, where each list represents a word.\n    '''\n    lst_size = len(lst)\n    lst_best = []\n    for i in range(lst_size):\n        lst_best.append([])\n    \n    for i in range(lst_size):\n        lst_best[i] = lst[i][0]\n        \n    while True:\n        ind = Select_Parent(lst)\n        \n        for i in range(lst_size):\n            if ind == i:\n                fitness = Fitness_Function(lst)\n                lst_best[ind] = lst_best[ind] + (lst[ind][0] - lst_best[ind])\n                lst[ind] = [lst_best[ind] + (lst[ind][0] - lst_best[ind]), lst[ind]]\n                break\n        \n        for i in range(lst_size):\n            if ind == i:\n                lst_best[i] = lst[i][0]\n                \n        if lst_best == lst_best[0]:\n            break\n            \n        for i in range(lst_size):\n            lst[i] = lst_best[i]\n        \n        for i in range(lst_size):\n            lst_best[i] = lst[i][0]\n            \n    return lst\n    \ndef main():\n    '''\n    Write a python function to play a game of bird-wing.\n    '''\n    lst = [ [3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if lst == []:\n        return None\n    elif lst == [lst[0]]:\n        return len(lst[0])\n    elif lst == [lst[0]]:\n        return len(lst)\n    elif len(lst) == 1:\n        return 1\n    else:\n        length = len(lst)\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                length = min(length, Find_Min_Length(lst[i:j]))\n        return length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=0\n    min_idx=0\n    for i in range(len(lst)):\n        if len(lst[i])<min:\n            min=len(lst[i])\n            min_idx=i\n    return min,min_idx\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #check if input is a positive number\n    if n>0:\n        divisor_list = [1]\n        divisor_list = [n//i for i in divisor_list]\n        for i in range(1,n):\n            if (i+1)%2 == 0:\n                divisor_list.append(i+1)\n                \n        return divisor_list\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 0\n    while i < n:\n        if n % i == 0:\n            print(i, end ='')\n        i += 1\n    print('\\n')\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    if n == 1:\n        divisors.append(1)\n    else:\n        for i in range(1,n+1):\n            if n%i==0:\n                divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    if n <= 1:\n        return 1\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                divisors += 1\n        return divisors\n        \ndef main():\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    number = int(input('Enter a number: '))\n    result = divisor(number)\n    print(result)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n // 1 + divisor(n % 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return 1 + divisor(n//2)\n    return divisor(n//2) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if(n==1):\n        return 1\n    if(n%2==0):\n        return 2\n    else:\n        return 3+divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return \"Invalid number\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return n // 1 + divisor(n//2)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in dic:\n                dic[list1[i][j]] += 1\n            else:\n                dic[list1[i][j]] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # sort the list\n    list1.sort()\n    # build a dictionary\n    d = {}\n    # iterate through the list\n    for item in list1:\n        # count number of occurrences\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    # return the dictionary\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element not in frequency_dict:\n            frequency_dict[element] = 1\n        else:\n            frequency_dict[element] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        d[list1[i]] = 0\n        for j in range(len(list1)):\n            if list1[i][j]!= 0:\n                d[list1[i][j]] += 1\n    return d\n    \ndef recursive_tree(tree, l, r):\n    '''\n    Write a function that returns the node at the index l within the tree.\n    '''\n    if l > r:\n        return None\n    mid = int((l+r)/2)\n    if tree[l][mid]!= 0:\n        return tree[l][mid]\n    if l == r:\n        return tree[l][mid]\n    if tree[l][mid]!= tree[mid][r]:\n        tree[l][mid] = recursive_tree(tree, l, mid-1)\n    else:\n        tree[l][mid] = recursive_tree(tree, mid+1, r)\n    return tree[l][mid]\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freqDict = dict()\n    for sublist in list1:\n        for x in sublist:\n            if x in freqDict.keys():\n                freqDict[x] += 1\n            else:\n                freqDict[x] = 1\n    return freqDict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for element in list1:\n        if element not in counts:\n            counts[element] = 1\n        else:\n            counts[element] += 1\n    return counts\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in range(len(list1)):\n        if type(list1[i][0]) == list:\n            for j in range(len(list1[i])):\n                frequency_dict[list1[i][j]] = list1[i][j]\n        elif type(list1[i]) == list:\n            frequency_dict[list1[i]] = list1[i]\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i][j] == 1:\n                if list1[i][j] in frequency:\n                    frequency[list1[i][j]] += 1\n                else:\n                    frequency[list1[i][j]] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return {val: list1.count(val) for val in list1}\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    m=0\n    for i in range(len(numbers)):\n        m=m+numbers[i]\n    return m\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Let's use the fact that the list is a list of lists with each sub-list having a single element\n    # But we'll iterate over the sub-lists and multiply all the numbers\n    # Time complexity: O(n*l)\n    # Space Complexity: O(n)\n    \n    # Create an empty list for the result\n    result = []\n    \n    # For each sub-list, multiply the number in it and add to the result\n    for sublist in numbers:\n        new_list = []\n        for item in sublist:\n            new_list.append(item * sublist.pop())\n        result.append(new_list)\n    return result\n    \n    \n    \n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in range(len(numbers)):\n        result = result * numbers[i]\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result=[]\n    for i in numbers:\n        result.append(i*(len(numbers)))\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Creating an empty list and initialize with 0\n    list = []\n    # Appending 0's to the list to get the final value\n    for i in range(len(numbers)):\n        list.append(0)\n    # Convert the number in the list to an int\n    # and store it in a variable\n    for num in numbers:\n        list[num] = int(num)\n    # Get the length of the list\n    length = len(list)\n    # Iterate over the list\n    for i in range(length):\n        # If the first number is the same as the second number\n        # Add the result to the current number\n        if list[i] == list[i+1]:\n            list[i] = list[i] * list[i+1]\n    # Return the result\n    return list\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result = result * number\n    print(result)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for n in numbers:\n        numbers[n] = n * len(numbers)\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult_nums = []\n    for num in numbers:\n        mult_nums.append(num*len(numbers))\n    return mult_nums\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Your code here\n    if len(numbers) < 2:\n        return numbers\n    new = [0] * len(numbers)\n    i = 0\n    while i < len(numbers):\n        new[i] = numbers[i]\n        i += 1\n    \n    for i in range(len(numbers)):\n        new[i] = numbers[i] * len(numbers)\n    return new\n    \ndef main():\n    '''\n    Test your function by calling it with different values\n    '''\n    # numbers = [1, 2, 3]\n    # print(multiply_num(numbers))\n    # numbers = [2, 5, 6, 9]\n    # print(multiply_num(numbers))\n    # numbers = [10, 20, 10, 40]\n    # print(multiply_num(numbers))\n    # numbers = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return \"0\"\n    else: return f\"{decimal_to_binary(n // 2)}{n % 2}\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = \"\"\n    while n!= 0:\n        res = str(n % 2) + res\n        n = n // 2\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    digits = []\n    while n: \n        digits.append(str(n%2)) \n        n //= 2\n    return ''.join(digits[::-1]) \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def decimal_to_binary_string(num):\n        if num == 0:\n            return '0'\n        \n        res = []\n        while num:\n            res.append(str(num % 2))\n            num //= 2\n        return \"\".join(res[::-1])\n    \n    def binary_to_decimal(n):\n        if n == 0:\n            return 0\n        \n        res = 0\n        while n:\n            res += (n%2) * (2**-1)\n            n //= 2\n        return res\n    \n    return decimal_to_binary_string(binary_to_decimal(n))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert type(n) is int, \"Invalid type\"\n    assert n >= 0, \"Invalid number\"\n    \n    binary = bin(n)\n    assert len(binary) == n, \"Invalid number\"\n    return binary[2:len(binary)]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return ('{0:b}'.format(n))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    else:\n        return str(bin(n))[2:]\n    \ndef decimal_to_binary_repr(n): \n    '''\n    Write a function to return a representation of the given decimal number. The returned representation is a string of zeros, and positive numbers are represented by a single zero in their binary representation.\n    '''\n    return \"0\"+str(decimal_to_binary(n))\n    \ndef binary_to_decimal(s): \n    '''\n    Write a function to convert a binary string to a decimal number.\n    '''\n    return int(s, 2)\n    \ndef binary_to_decimal_repr(s): \n    '''\n    Write a function to return a representation of the given binary string. The returned representation is a string of zeros, and positive numbers are represented by a single zero in their binary representation.\n    '''\n    return \"0\"+str(s)\n    \ndef decimal_to_binary_repr_repr(n): \n    '''\n    Write a function to return a representation of the given decimal number.\n    '''\n    return \"0\"+str(binary_to_decimal(n))\n    \ndef binary_to_decimal_repr_repr_repr(s): \n    '''\n    Write a function to return a representation of the given binary string.\n    '''\n    return \"0\"+str(binary_to_decimal_repr(s))\n    \ndef base_from_binary(n): \n    '''\n    Write a function to convert a binary number to its base as a string of digits.\n    '''\n    return str(n)[2:]\n    \ndef decimal_to_base(n): \n    '''\n    Write a function to convert a decimal number to its base as a string of digits.\n    '''\n    return str(n)[2:]\n    \ndef base_to_decimal(n): \n    '''\n    Write a function to convert a base number to its decimal number.\n    '''\n    return int(n, 2)\n    \ndef decimal_to_base_repr(n): \n    '''\n    Write a function to return a representation of the given base number.\n    '''\n    return str(n)[2:]\n    \ndef base_to_binary(n): \n    '''\n    Write a function to convert a base number to its binary representation as a string of digits.\n    '''\n    return str(bin(n))[2:]\n    \ndef binary_to_base(s): \n    '''\n    Write a function to convert a binary number to its base as a string of digits.\n    '''\n    return str(s)[2:]\n    \ndef base_to_binary_repr(n): \n    '''\n    Write a function to return a representation of the given base number.\n    '''\n    return str(n)[2:]\n    \ndef decode(s): \n    '''\n    Given a string, return a string of hexadecimal digits.\n    '''\n    if len(s)==0:\n        return \"0\"\n    \n    s = s.split(\".\")\n    s = \"0\"+s[0]+s[1]\n    \n    return s\n    \ndef encode(s): \n    '''\n    Given a string, return a string of hexadecimal digits.\n    '''\n    if len(s)==0:\n        return \"0\"\n    \n    s = s.split(\",\")\n    s = \"0\"+s[0]+s[1]\n    \n    return s\n    \ndef string_to_base(s): \n    '''\n    Write a function to convert a string to its base as a string of digits.\n    '''\n    return str(s)[2:]\n    \ndef string_to_base_repr(s): \n    '''\n    Write a function to return a representation of the given base number.\n    '''\n    return str(s)[2:]\n    \ndef base_to_string(n): \n    '''\n    Write a function to convert a base number to its base as a string of digits.\n    '''\n    return str(n)[2:]\n    \ndef base_to_string_repr(n): \n    '''\n    Write a function to return a representation of the given base number.\n    '''\n    return str(n)[2:]\n    \ndef num_to_base(n): \n    '''\n    Write a function to convert a number to its base as a string of digits.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = str(bin(n)[2:])\n    if len(s)>3:\n        s = s[2:]\n        \n    return \"0\"+s\n    \ndef num_to_base_repr(n): \n    '''\n    Write a function to return a representation of the given number.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = \"0\"+str(n)[2:]\n    if len(s)>3:\n        s = s[2:]\n        \n    return s\n    \ndef base_to_num(n): \n    '''\n    Write a function to convert a base number to its number of digits as a string of digits.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = str(bin(n)[2:])\n    if len(s)>3:\n        s = s[2:]\n        \n    return \"0\"+s\n    \ndef base_to_num_repr(n): \n    '''\n    Write a function to return a representation of the given base number.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = \"0\"+str(n)[2:]\n    if len(s)>3:\n        s = s[2:]\n        \n    return s\n    \ndef inverse_of_base(n): \n    '''\n    Write a function to convert a given base number to its inverse as a string of digits.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = str(bin(n)[2:])\n    if len(s)>3:\n        s = s[2:]\n        \n    return \"0\"+s\n    \ndef inverse_of_base_repr(n): \n    '''\n    Write a function to return a representation of the given number.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = \"0\"+str(n)[2:]\n    if len(s)>3:\n        s = s[2:]\n        \n    return s\n    \ndef factorial(n): \n    '''\n    Write a function to compute the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \ndef factorial_repr(n): \n    '''\n    Write a function to return a representation of the factorial of a given number.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = str(n)\n    if len(s)>3:\n        s = s[2:]\n        \n    return s\n    \ndef prime_factor(n): \n    '''\n    Write a function to compute the prime factors of a given number.\n    '''\n    if n==0:\n        return False\n    if n==1:\n        return True\n    if n==2:\n        return False\n    if n==3:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n    \ndef prime_factor_repr(n): \n    '''\n    Write a function to return a representation of the prime factors of a given number.\n    '''\n    if n==0:\n        return \"0\"\n    \n    s = \"0\"\n    if n==1:\n        return \"1\"\n    if n==2:\n        return \"2\"\n    \n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i="
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return \" \".join(map(str, format(n, 'b')))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    num = n \n    if n > 0:\n        while num > 0:\n            n,r = divmod(num,2)\n            if r:\n                print (f'{n}',end=\" \")\n            else:\n                print (f'0',end=\" \")\n            num = n\n        return ''.join(['1' for _ in range(num)])\n    else:\n        print(f'{num}',end=\" \")\n        return ''.join(['0' for _ in range(num)])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def next_smallest_palindrome(num):\n        if num < 10:\n            return num\n        if num % 10 == 0:\n            return num / 10\n        while num > 1:\n            if (num % 10 == 0) or (num % 10 == 1) or (num % 10 == 9):\n                return num / 10\n            return (num % 10)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 0\n    for i in range(1, num+1):\n        for j in range(i, num+1):\n            if j%i == 0:\n                count = i\n                break\n    return count\ndef reverse(num):\n    '''\n    Write a function to reverse the digits of a specified integer, returned as an integer.\n    '''\n    result = 0\n    while num > 0:\n        result = result*10 + num%10\n        num //= 10\n    return result\ndef is_palindrome(num):\n    '''\n    Write a function to check whether an integer is palindrome or not.\n    '''\n    return num == reverse(num)\ndef next_smallest_palindrome2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef sum_of_factors(num):\n    '''\n    Write a function to compute the sum of all the factors of a specified integer, returned as an integer.\n    '''\n    sum = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            sum += i\n    return sum\ndef next_smallest_palindrome2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef is_palindrome2(num):\n    '''\n    Write a function to check whether an integer is palindrome or not.\n    '''\n    return num == reverse(num)\ndef next_smallest_palindrome2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef sum_of_factors2(num):\n    '''\n    Write a function to compute the sum of all the factors of a specified integer, returned as an integer.\n    '''\n    sum = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            sum += i\n    return sum\ndef next_smallest_palindrome2(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef is_palindrome3(num):\n    '''\n    Write a function to check whether an integer is palindrome or not.\n    '''\n    return num == reverse(num)\ndef next_smallest_palindrome3(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef sum_of_factors3(num):\n    '''\n    Write a function to compute the sum of all the factors of a specified integer, returned as an integer.\n    '''\n    sum = 0\n    for i in range(0, int(num**0.5)+1):\n        if num % i == 0:\n            sum += i\n    return sum\ndef next_smallest_palindrome3(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef is_palindrome4(num):\n    '''\n    Write a function to check whether an integer is palindrome or not.\n    '''\n    return num == reverse(num)\ndef next_smallest_palindrome4(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef is_palindrome5(num):\n    '''\n    Write a function to check whether an integer is palindrome or not.\n    '''\n    return num == reverse(num)\ndef next_smallest_palindrome5(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef sum_of_factors5(num):\n    '''\n    Write a function to compute the sum of all the factors of a specified integer, returned as an integer.\n    '''\n    sum = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            sum += i\n    return sum\ndef next_smallest_palindrome5(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef is_palindrome6(num):\n    '''\n    Write a function to check whether an integer is palindrome or not.\n    '''\n    return num == reverse(num)\ndef next_smallest_palindrome6(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef sum_of_factors6(num):\n    '''\n    Write a function to compute the sum of all the factors of a specified integer, returned as an integer.\n    '''\n    sum = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            sum += i\n    return sum\ndef next_smallest_palindrome6(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    for i in range(0, len(num)):\n        if is_palindrome(int(num[i])):\n            count += 1\n        if count > 1:\n            break\n    return count\ndef is_palindrome7(num):\n    '"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    if num == 3:\n        return 4\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    i = 0\n    while i < num:\n        j = 0\n        count = 1\n        while j < (len(str(i))):\n            if i % 10 == int(str(i)[j]):\n                count += 1\n            j += 1\n        if count > 1:\n            if (i % 10) == int(str(i)[j]):\n                return i\n            elif (i % 10) == int(str(i)[j - 1]):\n                return i\n            else:\n                if i < 10000:\n                    return i + 1\n                i += 10\n        i += 1\n    return num\ndef next_palindrome(num):\n    '''\n    Return the next palindrome from the number passed as an integer, where palindrome numbers are from 10-999.\n    '''\n    i = 0\n    while i < (len(str(num))):\n        j = 0\n        count = 1\n        while j < (len(str(num))):\n            if i % 10 == int(str(num)[j]):\n                count += 1\n            j += 1\n        if count > 1:\n            if i % 10 == int(str(num)[j]):\n                return i\n            else:\n                if num < 10000:\n                    return num + 1\n                else:\n                    i += 10\n        i += 1\n    return num\ndef is_palindrome(num):\n    '''\n    Return True if the number passed as an integer is a palindrome, False otherwise.\n    '''\n    num = str(num)\n    return num == num[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def find_next_palindrome(pal, i):\n        \"\"\"\n        Find the next palindrome in the given list that can be created by applying\n        the previous one by reversing the order of elements in pal.\n        \"\"\"\n        if pal[i] == pal[i + 1]:\n            return i + 1\n        \n        j = len(pal) - 1\n        while j >= i:\n            if pal[i] == pal[j] and j >= i:\n                return j\n            \n            if pal[i] < pal[j]:\n                j -= 1\n            else:\n                j += 1\n        \n        return -1\n    \n    if not num:\n        return 0\n    \n    l = 1\n    r = len(num)\n    while l < r:\n        mid = int((l + r) / 2)\n        \n        pal = num[mid]\n        if pal > num[r - 1]:\n            r = mid\n            continue\n        \n        if pal > num[l]:\n            l = mid + 1\n        elif pal > num[r]:\n            r = mid - 1\n        \n        if l < r:\n            next_pal = find_next_palindrome(pal, l)\n            if next_pal < r:\n                return l + 1\n            \n            if next_pal < l:\n                return l + 1\n            \n            if next_pal < r:\n                return r + 1\n    \n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    while num!= 0:\n        if num % 10 > 0:\n            num = num / 10\n        else:\n            num = num / 10 + 1\n    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num < 0:\n        return -1\n    if num < 2:\n        return 1\n    \n    left, right = 1, num\n    while right % 2 == 0:\n        left = left * 3 + 1\n        right = right / 2\n        if num == left:\n            return left\n        if num == right:\n            return right\n    return right\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    def is_palindrome(n):\n        \"\"\"A palindrome is a string that is the same for every integer in the string.\"\"\"\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    # if num is even, get the one that is greater than its product\n    if num % 2 == 0:\n        return next_smallest_palindrome(num//2)\n    # if num is odd, find the next palindrome that is 3 times greater than num\n    else:\n        return num * next_smallest_palindrome(num//2)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 1:\n        return 1\n    \n    prev = num - 1\n    \n    while prev > 0 and num % prev == 0:\n        prev -= 1\n    \n    return num * prev\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k==0:\n        return arr[0]\n    if k>len(arr)-1:\n        return None\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if l <= 0:\n        return -1\n    i = 1\n    j = 0\n    while i < l:\n        j = j+1\n        if arr[i] == k:\n            return arr[i], j\n        elif arr[i] > k:\n            i = i+1\n        elif arr[i] < k:\n            arr[i], j = arr[i], j+1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    elif l == 1:\n        return arr[0]\n    else:\n        arr.sort()\n        return arr[l - k - 1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = word.lower()\n    lst = []\n    for c in s:\n        if c.isalnum():\n            lst.append(c.upper())\n    return \"\".join(lst)\n    \n    \ndef build_tuple(name):\n    '''\n    Write a function that takes a string as an input and returns a list with every letter converted to uppercase.\n    '''\n    lst = []\n    for c in name:\n        if c.isalpha():\n            lst.append(c.upper())\n    return tuple(lst)\n    \ndef main():\n    '''\n    Write a function that takes a string as an input and returns a list with every letter converted to uppercase.\n    '''\n    user_input = input(\"What is the name of your file?\\n\")\n    if os.path.exists(user_input):\n        print(\"\\n***File already exists***\")\n    else:\n        with open(user_input, 'w+') as f:\n            f.write(build_tuple(user_input))\n        print(f\"\\nFile added to directory: \\\"{user_input}\\\"\\n\")\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join(w.title() for w in words)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([i.capitalize() for i in word.split('_')])\n    \nprint(snake_to_camel('apple'))\nprint(snake_to_camel('A_String'))"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    def ConvertToCamelCase(string):\n        result = ''\n        for i in range(0, len(string)):\n            if string[i].isupper():\n                result += string[i].lower()\n            else:\n                result += string[i].upper()\n        return result\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    upper_camel = \"\"\n    for i in range(len(word)):\n        if word[i].islower():\n            upper_camel += word[i].upper()\n        else:\n            upper_camel += word[i].lower()\n    return upper_camel\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    #Example:\n    #snake_case_convert(\"helloWorld\") => \"helloWorld\"\n    #snake_case_convert(\"HELLO WORLD\") => \"helloWorld\"\n    #snake_case_convert(\"TU YZF\") => \"tUZF\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    punc = '_!#$%^&*()=+{}:?></|>\\|<'\n    return word.replace('-','')\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num = []\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    sieve = [True for i in range(n+1)] \n    sieve[0] = False\n    for i in range(2, n+1):\n        if sieve[i]:\n            for j in range(i+i, n+1, i):\n                sieve[j] = False\n    p = 1\n    q = 1\n    r = n\n    while p < n and q < n: \n        x = p*q \n        if sieve[x] == True: \n            p += 1\n            q += 1\n            r -= 1\n        else: \n            q += 1\n    if r < 0:\n        return 0\n    else: \n        return q + m\ndef solution(n, edges):\n    answer = 0\n    visited = [False] * (n + 1)\n    for e in edges:\n        if e[0] > e[1]:\n            e[0], e[1] = e[1], e[0]\n            answer += 1\n        if not visited[e[0]]:\n            visited[e[0]] = True\n            answer += 1\n        if not visited[e[1]]:\n            visited[e[1]] = True\n            answer += 1\n        \n    return answer + 1\nn = int(input())\nedges = []\nfor _ in range(n-1):\n    edges.append(list(map(int, input().split())))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    num_list = [i for i in range(1, n + 1)]\n    loop_len = n - 1\n    max_num = -1\n    max_num_index = 0\n    for i in range(loop_len):\n        count = 0\n        for j in range(i, loop_len):\n            if num_list[j] == num_list[i]:\n                count += 1\n        if max_num < count:\n            max_num = count\n            max_num_index = i\n    return max_num\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    a = n\n    for i in range(n-1):\n        a = a*m + 1\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    d = {}\n    for i in range(0,n): \n        d[i] = []\n    for i in range(0,m): \n        d[i].append(i)\n    for i in range(1,m): \n        d[0].append(i)\n    for i in range(1,n): \n        d[i].append(0) \n    for i in range(1,n): \n        d[i].append(i) \n    count = 1\n    n_eul = []\n    for i in range(0, n): \n        count = count*2\n        for j in range(0, n-i): \n            count = count*2\n        n_eul.append(count)\n        count = 1\n    i = 1\n    for i in range(0,n): \n        i = i*2\n        for j in range(0,n-i): \n            if i==j:\n                i = i*2\n            else:\n                i = i*2\n        n_eul.append(i)\n    return n_eul \n \nprint(eulerian_num(3,4))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    elif m == n:\n        return m\n    elif n < m:\n        return n + eulerian_num(n, m - 1)\n    elif n > m:\n        return eulerian_num(n - 1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    set = set([])\n    for i in range(m):\n        if n == m:\n            return True\n        for j in range(i,m):\n            for k in range(j+1, m):\n                if n!= m and n % k == 0:\n                    if n in set:\n                        return False\n                    else:\n                        set.add(n)\n        if n == m:\n            return False\n        for j in range(i,m):\n            for k in range(j+1, m):\n                if n!= m and n % k == 0:\n                    if n in set:\n                        return False\n                    else:\n                        set.add(n)\n    return True\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    list_n = [n]\n    list_m = [m]\n    while (m in list_n and n in list_m):\n        list_m.append(m - n)\n        list_n.append(n + m)\n        m = n\n        n = list_m.pop()\n    return m - n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    table = {}\n    for i in range(0,n+1):\n        table[i] = 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    if n > m:\n        n, m = m, n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 2, m)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = input_list[i][j].lower()\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if input_list == []:\n        return\n    \n    temp_list = []\n    for i in range(len(input_list)):\n        temp_list.append(input_list[i][:])\n        \n        for j in range(len(input_list[i])):\n            if input_list[i][j] == '*':\n                temp_list[i].append('*')\n            else:\n                temp_list[i].append(input_list[i][j])\n        \n        input_list[i] = temp_list[i]\n        \n    return input_lis"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = sorted(input_list, key=lambda x: len(x[0]))\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for list_item in input_list:\n        output_list.append(list_item[0])\n        for i in range(len(list_item)):\n            output_list.append(list_item[i])\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sub_list in input_list:\n        sorted_list.append(sorted(sub_list))\n    return sorted_list\n    \ndef print_list(input_list):\n    '''\n    Write a function to print a given list.\n    '''\n    for item in input_list:\n        print(item)\n        \ndef list_division(divisor, dividend):\n    '''\n    Write a function to get a list after dividing one number by another number.\n    '''\n    try:\n        result = [item/divisor for item in dividend]\n    except TypeError:\n        print(\"What is the type of dividend?\")\n        \ndef test_division(divisor, dividend):\n    '''\n    Write a function to get a list after dividing one number by another number.\n    '''\n    print_list(list_division(divisor, dividend))\n    \ndef list_remainder(divisor, dividend):\n    '''\n    Write a function to get a list after dividing one number by another number.\n    '''\n    result = [item%divisor for item in dividend]\n    print_list(result)\n    \ndef test_remainder(divisor, dividend):\n    '''\n    Write a function to get a list after dividing one number by another number.\n    '''\n    print_list(list_remainder(divisor, dividend))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda sublist: sublist[0])\n    # return sorted(input_list, key=lambda sublist: sublist[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        for index, item in enumerate(sublist):\n            if type(item) is not str:\n                sublist[index] = item.lower()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = len(input_list)\n    input_list.sort()\n    for i in range(l-1):\n        for j in range(i+1, l):\n            if input_list[i] > input_list[j]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    #Create a list for sublists\n    sublists = []\n    \n    #Create a list to hold the items\n    temp_list = []\n    \n    #Create a temp list to hold each item\n    for i in input_list:\n        temp_list.append(i)\n    \n    #Sort the temp list by decreasing order\n    temp_list.sort(reverse=True)\n    \n    #Create a sublist\n    for i in temp_list:\n        sublists.append(i)\n    \n    #Create a list to hold the sublists\n    sublists_list = []\n    \n    #Create a temp list to hold each sublist\n    for i in sublists:\n        sublists_list.append(i)\n        \n    #Return the list\n    return sublists_list"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        result.append(sublist)\n        result.sort(key=lambda x: len(x))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count=0\n    for x in lst:\n        if x==True:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for value in lst:\n        if value == True:\n            count += 1\n    return count\n    # Your code here\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0 \n    for element in lst:\n        if element == True:\n            count += 1\n    return count \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    ans = 0\n    for i in lst:\n        if i == True:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # Create a dictionary for the count of the true boolean values\n    count = dict()\n    \n    # Loop through the elements in the list\n    for element in lst:\n        \n        # If the element is in the dictionary, increment the value\n        if element in count:\n            count[element] += 1\n        else:\n            # If the element isn't in the dictionary, set the value to one\n            count[element] = 1\n            \n    # Return the count\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst.sort()\n    temp = 0\n    for i in lst:\n        if i == 1:\n            temp += 1\n    print(temp)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list[0]\n    test_tup = test_tup[0]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list\n    for index in range(len(test_tup)):\n        new_list.append(test_tup[index])\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i, l in enumerate(test_list):\n        test_tup[i] = l\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_tup) == 1:\n        test_tup.append(test_list)\n    else:\n        test_tup.extend(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list1, list2 = test_list, test_tup\n    for i in range(len(list1)):\n        list1[i] = [list1[i], list2[i]]\n    return list1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp = []\n    temp2 = []\n    result = []\n    \n    if len(num1) >= len(num2) and len(num1) >= len(num3):\n        for i in range(len(num1)):\n            heapq.heappush(temp,(num1[i] + num2[i]))\n        \n        for i in range(len(temp)):\n            heapq.heappop(temp2)\n            heapq.heappush(temp2,(num1[i] + num2[i]))\n    elif len(num2) >= len(num3):\n        for i in range(len(num3)):\n            heapq.heappush(temp,(num3[i] + num2[i]))\n        \n        for i in range(len(temp)):\n            heapq.heappop(temp2)\n            heapq.heappush(temp2,(num3[i] + num2[i]))\n    else:\n        for i in range(len(num2)):\n            heapq.heappush(temp,(num2[i] + num1[i]))\n        \n        for i in range(len(temp)):\n            heapq.heappop(temp2)\n            heapq.heappush(temp2,(num2[i] + num1[i]))\n    \n    for i in range(len(temp2)):\n        heapq.heappush(result,temp2[i])\n        \n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1!= []:\n        merged_list.append(num1.pop(0))\n    while num2!= []:\n        merged_list.append(num2.pop(0))\n    while num3!= []:\n        merged_list.append(num3.pop(0))\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap=[]\n    merged=[]\n    if num1==0:\n        if num2==0:\n            if num3==0:\n                return merged\n            else:\n                return None\n        else:\n            return None\n    elif num2==0:\n        if num3==0:\n            return merged\n        else:\n            return None\n    elif num1<=num2:\n        merged.append(num1)\n        heapq.heappush(heap,[num1,0])\n        while heap:\n            num_to_pop=heapq.heappop(heap)\n            if num_to_pop[1]<num3:\n                return None\n            else:\n                merged.append(num_to_pop[0])\n                heapq.heappush(heap,[num_to_pop[0],num_to_pop[1]+1])\n    else:\n        merged.append(num2)\n        heapq.heappush(heap,[num2,0])\n        while heap:\n            num_to_pop=heapq.heappop(heap)\n            if num_to_pop[1]<num3:\n                return None\n            else:\n                merged.append(num_to_pop[0])\n                heapq.heappush(heap,[num_to_pop[0],num_to_pop[1]+1])\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==None and num2==None and num3==None:\n        return None\n    elif num1==None or num2==None:\n        return num3\n    elif num3==None or num1==None:\n        return num2\n    elif num1<num2:\n        heapq.heappush(num3,num2)\n        heapq.heappush(num3,num1)\n        heapq.heappush(num1,num3)\n    else:\n        heapq.heappush(num2,num1)\n        heapq.heappush(num2,num3)\n        heapq.heappush(num3,num2)\n    return heapq.nlargest(3,num3)\ndef heap_sort(num_list):\n    '''\n    You have a heap. Take the smallest value from the heap and put it into a variable, sort the list as well.\n    '''\n    heap=[]\n    for num in num_list:\n        heapq.heappush(heap,num)\n    return heap\ndef heap_sort2(num_list):\n    '''\n    You have a heap. Take the smallest value from the heap and put it into a variable, sort the list as well.\n    '''\n    heap=[]\n    for num in num_list:\n        heapq.heappush(heap,num)\n    while heap:\n        x=heapq.heappop(heap)\n        heapq.heappush(heap,x)\n        #print(x)\n        #print(heap)\n    return heap\ndef heappush(heap,x):\n    '''\n    You have a heap. Take the smallest value from the heap and put it into a variable, sort the list as well.\n    '''\n    heapq.heappush(heap,x)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(merged_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    i,j,k = 0,0,0\n    n1,n2,n3 = len(num1),len(num2),len(num3)\n    \n    while(i<n1 and j<n2 and k<n3):\n        if num1[i]<num2[j] and num2[j]<num3[k]:\n            res = num1[i]\n            i+=1\n        elif num1[i]>num2[j] and num2[j]>num3[k]:\n            res = num1[i]\n            i+=1\n        else:\n            res = num2[j]\n            j+=1\n        k+=1\n        \n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    for i in range(len(num1)):\n        if num1[i] <= num2[i] and num2[i] <= num3[i]:\n            res.append(num2[i])\n        elif num1[i] <= num3[i] and num3[i] <= num2[i]:\n            res.append(num3[i])\n        else:\n            res.append(num1[i])\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge_list(arr, num, i, j, k):\n        '''\n        Recursive function that merges two sorted arrays.\n        '''\n        if i>j:\n            return\n        if i==j:\n            #print(arr)\n            if arr[i]>arr[j]:\n                num[k]=arr[j]\n                j+=1\n            else:\n                num[k]=arr[i]\n                i+=1\n        else:\n            num[k]=arr[i]\n            num[k+1] = arr[j]\n            i+=1\n            j+=1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_a = num1[:len(num1)-1]\n    list_b = num2[len(num2)-1:len(num2)]\n    list_c = num3[len(num3)-1:len(num3)]\n    list_final = list_a + list_b + list_c\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            num1 = num1[1:]\n        elif num2[0] < num3[0] and num2[0] < num1[0]:\n            merged_list.append(num2[0])\n            num2 = num2[1:]\n        else:\n            merged_list.append(num3[0])\n            num3 = num3[1:]\n    if num1:\n        merged_list += num1\n    if num2:\n        merged_list += num2\n    if num3:\n        merged_list += num3\n    return merged_list\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    answer = 0\n    temp = s.count('0')\n    if temp > n:\n        return answer\n    else:\n        for i in range(n):\n            if (i % 2) == 0:\n                s = s + '1'\n                temp = s.count('0')\n                if temp > n:\n                    return answer\n        answer = n - temp\n        return answer"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    # 0th index will be 0, 1st index will be 1\n    for i in range(0, n, 2):\n        # odd index will be 1, even index will be 0\n        count += 1\n        # count increased by 1\n        \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    try:\n        for i in range(n):\n            num = int(s,2)\n            odd = False\n            for j in range(2):\n                num = (num*2)%10\n                if num == 0:\n                    odd = True\n            if odd == True:\n                return n\n    except ValueError:\n        return 'ValueError'\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c = len(s)\n    ans = 0\n    i = 0\n    while(i<=c):\n        c = c//2\n        if (s[i]%2 == 0):\n            ans += 1\n            i += 1\n        else:\n            ans -= 1\n            i += 1\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([x for x in [bin(int(i)).replace('0b','') for i in s] if int(x,2)%2 == 1])\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    return len([x for x in [bin(int(i)).replace('0b','') for i in s] if int(x,2)%2 == 0])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num_of_deltas = (s[::-1].count('1')- s[::-1].count('0'))%n\n    return num_of_deltas\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    for i in range(n): \n        s[i] = (s[i] + s[i+1]) & 0xffffffff \n    for i in range(n): \n        if s[i] == 0: \n            return 0 \n        else: \n            return (i+1) % 2\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    number=0\n    for i in range(n):\n        number+= (s[i]==\"0\")\n    if(number%2==0):\n        return n\n    else:\n        return n-1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum([1 if (s[i]=='1' and n%2==1) else 0 for i in range(len(s)-n+1)])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import math\n    odd = 1\n    num = 0\n    for i in range(n):\n        if s[i]%2==1:\n            num = num + (odd*math.pow(2,num))\n            odd = odd*2\n    return num\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # TODO: Write your code here\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if(nestedlist[i][j] == '_'):\n                continue\n            else:\n                if(nestedlist[i][j] not in common):\n                    common.append(nestedlist[i][j])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #Implementation of common elements in a nested list.\n    from collections import Counter\n    unique_list = []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    for nested_list in nestedlist:\n        if len(nested_list) > len(nestedlist):\n            nested_list = nested_list[0]\n        for i in range(len(nested_list)):\n            if not nested_list[i] in unique_list:\n                unique_list.append(nested_list[i])\n        if len(unique_list) > 1:\n            break\n    return unique_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if isinstance(nestedlist,list):\n        common_list = []\n        for i in range(len(nestedlist)):\n            if isinstance(nestedlist[i],list):\n                common_list.append(nestedlist[i])\n            else:\n                common_list.append(nestedlist[i])\n        return common_list\n    else:\n        raise TypeError(\"Input must be of type list.\")\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [item for sublist in nestedlist for item in sublist]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for el in nestedlist:\n        if el not in result:\n            result.append(el)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    i = 0\n    common_elements = []\n    for nestedlist_i in nestedlist:\n        if i % 2 == 0:\n            common_elements.append(nestedlist_i)\n        else:\n            common_elements.append(nestedlist_i[0])\n        i = i + 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for list in nestedlist:\n        for el in list:\n            if el not in common:\n                common.append(el)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j] and i!= j:\n                common.add(nestedlist[i])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested_list in nestedlist:\n        if isinstance(nested_list,list):\n            common_elements.extend(common_in_nested_lists(nested_list))\n        else:\n            common_elements.append(nested_list)\n    return common_elements\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        raise TypeError(\"Only integers are allowed\")\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if type(text) == int:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text, int):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    # Initialize an empty list\n    list2 = []\n    \n    # Iterate through the list and check if the length is equal to zero\n    for element in list1:\n        if len(list1) == 0:\n            return True\n        \n        # Add the element to the empty list\n        list2.append(element)\n    \n    # Check whether the list is empty\n    if list2 == []:\n        return True\n    else:\n        return False\n    \n    \n    \ndef main():\n    '''\n    Create a nested list containing all the following numbers:\n    1 - 100\n    2 - 200\n    3 - 300\n    4 - 400\n    5 - 500\n    '''\n    \n    # Create a list with the following elements\n    numbers = [1, 100, 200, 300, 400, 500]\n    \n    # Check whether all elements in the list are empty\n    if empty_dit(numbers):\n        print(\"List is empty.\")\n    else:\n        print(\"List is not empty.\")\n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_dit = True\n    for key in list1:\n        if len(list1[key]) > 0:\n            empty_dit = False\n    return empty_dit\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i is not None:\n            return False\n    return True\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)!= 0:\n        for i in list1:\n            if i == {}:\n                return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        for key in dict1:\n            if dict1[key]!= \"\":\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            j = j.keys()\n            if len(j) == 0:\n                return \"Dictionary is empty\"\n    return None\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > 0:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    print(\"Checking whether all dictionaries in a list are empty or not: \")\n    for i in list1:\n        if i!= {}:\n            print(i)\n        else:\n            print(\"The dictionary is empty.\")\n            return False\n    print(\"The dictionary is not empty.\")\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = [int(i) for i in nums]\n    return int_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    #Initialise\n    num_sum = 0\n    \n    #Iterate through each element in the tuple\n    for num in nums:\n        \n        #Convert the element to an integer\n        num = int(num)\n        \n        #Add the element to the sum\n        num_sum += num\n        \n    #Return the sum\n    return num_sum\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if len(nums) == 0 else tuple(map(lambda x: tuple(map(int, x)), nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return tuple(map(int, nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert to a single integer\n    return reduce(lambda x,y: x*10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res = res * 10 + i\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_nums = []\n    for num in nums:\n        int_nums.append(int(num))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def convert_list(l):\n        result = []\n        for el in l:\n            for el_2 in el:\n                result.append(float(el_2))\n        return result\n    return convert_list(test_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            element = float(element)\n            sublist[sublist.index(element)] = element\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_to_float = []\n    for item in test_list:\n        for item in item:\n            list_to_float.append(float(item))\n    return list_to_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [str(e) for e in test_list]\n    test_list = [\" \".join(e) for e in test_list]\n    test_list = [float(e) for e in test_list]\n    test_list = [int(e) for e in test_list]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            result.append(float(item))\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = test_list + [['C', 'S']]\n    return float(test_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    # Declare variables\n    test_list = []\n    test_list_float = []\n    test_list_reverse = []\n    \n    # Split the string into elements in the list\n    for char in test_list:\n        if char.isalpha() and char.isupper():\n            test_list_string = list(char)\n            test_list_string = \"\".join(test_list_string)\n            test_list.append(test_list_string)\n    \n    # Replace all keys with the lists\n    for char in test_list:\n        if char in test_list_string:\n            test_list_float.append(float(char))\n            test_list.remove(char)\n    \n    # Reverse the string and remove the whitespace\n    for char in test_list:\n        if char.isalpha():\n            test_list_reverse.append(char)\n            test_list_reverse.remove(char)\n    \n    return test_list, test_list_float, test_list_reverse\n        \n    \ndef write_to_file(test_list, file_name):\n    '''\n    Write the elements of a list to a file.\n    '''\n    with open(file_name, 'w') as file:\n        for elem in test_list:\n            file.write(f'{elem}\\n')\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    assert len(test_list) > 0, \"test_list can't be empty\"\n    #int_list = []\n    #for item in test_list:\n        #int_list.append(float(item))\n    return [float(item) for item in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list = string.split()\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == \"\": \n        return []\n    return string.split() \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    strings = string.split(' ')\n    return strings\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.replace(' ', '')\n    return string.split(' ')\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a single string.\n    '''\n    return''.join(list)\n    \ndef create_random_list(n): \n    '''\n    Write a function to generate a random list.\n    '''\n    # your code here\n    random_list = []\n    for i in range(n): \n        random_list.append(random.randint(1, 10)) \n    return random_list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    myList = string.split(\" \")\n    return myList\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.strip()\n    list = string.split(\" \")\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.strip().split(\" \")\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    start, end = 0, len(arr)-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid + 1]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # O(n) time\n    # O(1) space\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def count_once(arr, target):\n        count = 0\n        for num in arr:\n            if num == target:\n                count += 1\n        return count\n    \n    return count_once(arr, arr[0])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    n = len(arr)\n    h = 0\n    l = 0\n    r = n - 1\n    \n    while h <= r:\n        if arr[h] == arr[h + 1]:\n            h += 1\n            continue\n        elif arr[h] > arr[h + 1]:\n            r -= 1\n            continue\n        elif arr[h] < arr[h + 1]:\n            l += 1\n            continue\n    \n    return arr[h + 1]\n    \narr = [8,5,2,6,3,4,9,7]\nprint(search(arr)"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # n is the length of the array\n    n = len(arr)\n    # if the array is empty, return -1\n    if n == 0:\n        return -1\n    # else, we initialize a hash table for elements\n    # and loop through all the elements\n    # in the array\n    hash_table = {}\n    for i in range(n):\n        if arr[i] in hash_table:\n            # if there is a key with this element\n            # in the hash table, update the count\n            hash_table[arr[i]] += 1\n        else:\n            # if there is no key with this element\n            # then add the element to the hash table\n            # and count one\n            hash_table[arr[i]] = 1\n    # we iterate through all the keys and the values\n    # in the hash table and determine if\n    # any element has a duplicate key\n    for key, value in hash_table.items():\n        # if there is no duplicate key\n        if value == 1:\n            # if there is no duplicate key, return the\n            # key\n            return key\n        # if there is a duplicate key, we loop through\n        # the keys of the hash table and update the\n        # count for that key\n        else:\n            # if there is a duplicate key, return\n            # the key with the most repeated value\n            for j in range(key, n):\n                if hash_table[arr[j]] == 1:\n                    return arr[j]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 0\n    for i in dic:\n        if dic[i] == 1:\n            return i\n    \n    return False\n    \nif __name__ == \"__main__\":\n    a = [1,1,1,2,3,3,4]\n    print(search(a))\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Your code here\n    res = []\n    for i in arr:\n        if i not in res:\n            if arr.count(i)==1:\n                res.append(i)\n    return res[0]\n    \nif __name__ == \"__main__\":\n    print(search([1,1,1,2,2,3,3,4,5,6,6]))\n    #print(search([1,1,2,2,3,3,4,4,5,5,6]))\n    #print(search([1,2,3,4,5,6,6,7,8,9,10]))"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    max_p=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product=list1[i][0]*list1[j][0]\n            max_p=max(max_p,product)\n    print(max_p)\n    return max_p\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<=2:\n        return list1[0][0] * list1[0][1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if list1==[]:\n        return 0\n    if len(list1)==1:\n        return 1\n    if len(list1)==2:\n        return list1[0]*list1[1]\n    mid_index=len(list1)//2\n    if mid_index==0:\n        mid=list1[mid_index]\n    else:\n        mid=list1[mid_index]\n    for i in range(mid_index,len(list1)):\n        if list1[i]<mid:\n            break\n        mid=list1[i]\n    if list1[mid_index]<list1[mid_index-1]:\n        mid_index=mid_index-1\n    list2=list1[mid_index+1:len(list1)]\n    return max(list1[mid_index],list2[mid_index])*max_product_tuple(list2)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max_product = max(list1[i][1] * list1[j][1], max_product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple1 = tuple(list1)\n    if len(tuple1) <= 1:\n        return -1\n    if len(tuple1) == 2:\n        return tuple1[0] * tuple1[1]\n    max1 = 0\n    for i in range(len(tuple1) - 1):\n        for j in range(i + 1, len(tuple1)):\n            temp = tuple1[i] * tuple1[j]\n            if temp > max1:\n                max1 = temp\n    return max1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > max:\n                max = list1[i][0] * list1[j][0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product=list1[i][1]*list1[j][0]\n            if product>max_product:\n                max_product=product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max = max(list1[i][0] * list1[j][0], max)\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for num1 in list1:\n        for num2 in list1:\n            if num1 > num2:\n                if max_product < num1 * num2:\n                    max_product = num1 * num2\n    return max_product\n    \n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if sum(range(i, i+2)) == i:\n            amicable_numbers.add(i)\n    return len(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers=[]\n    num=1\n    while num<limit:\n        sum=0\n        for i in range(1,num):\n            if num%i==0:\n                sum+=i\n        if sum==num:\n            amicable_numbers.append(num)\n        num+=1\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    i = 1\n    while i * i <= limit:\n        if limit % i == 0:\n            amicable_numbers.append(i)\n            if i!= limit:\n                amicable_numbers.append(i * i)\n            i = i * i\n        i += 1\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for x in range(1,limit+1):\n        if is_amicable(x):\n            sum_ += x\n            if is_amicable(x) == True:\n                for y in range(x,limit+1,x):\n                    if is_amicable(y) == True:\n                        sum_ += y\n    return sum_\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_dict = {}\n    for i in range(1, limit+1):\n        if i in amicable_numbers_dict:\n            continue\n        if i == 2:\n            continue\n        if i % 2 == 0:\n            continue\n        for num in range(1, int(i/2) + 1):\n            if i % num == 0:\n                break\n            if i == num:\n                continue\n            if i % num == 0:\n                break\n        amicable_numbers_dict[i] = 1\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    \n    for num in range(1, limit + 1):\n        if sum % num == 0:\n            sum += num\n            if sum % num == 0:\n                sum += num\n            if num % 2 == 0:\n                sum += num\n    \n    return sum\n    \n    \n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sums = 0\n    sorted_numbers = list(range(1, limit))\n    sorted_numbers.sort()\n    for i in range(len(sorted_numbers)):\n        if sorted_numbers[i] % 2 == 0:\n            continue\n        if sorted_numbers[i] % 3 == 0 and sorted_numbers[i]!= sorted_numbers[i-1]:\n            amicable_numbers.append(sorted_numbers[i])\n    for i in range(len(amicable_numbers)):\n        for j in range(i+1, len(amicable_numbers)):\n            if amicable_numbers[i] + amicable_numbers[j] == limit:\n                amicable_numbers_sums += amicable_numbers[i] + amicable_numbers[j]\n    return amicable_numbers_sums"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    i = 1\n    j = 1\n    while j <= limit:\n        if (i % 2 == 0):\n            while (j % 2 == 0):\n                j = j / 2\n            if j % 2 == 0:\n                amicable_numbers.append(i)\n        else:\n            while (j % 2 == 0):\n                j = j / 2\n            if j % 2 == 0:\n                amicable_numbers.append(i)\n        i = i + 1\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    phi = cmath.phase(a)\n    return(phi)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(cmath.complex(a,b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #check the type of a and b\n    if type(a)!= complex:\n        raise ValueError('a must be a complex number')\n    if type(b)!= complex:\n        raise ValueError('b must be a complex number')\n    #get the real and imaginary part of a and b\n    #real = a.real; imaginary = a.imag\n    real,imag = a.real,a.imag\n    #get the real part of b\n    #real = b.real; imaginary = b.imag\n    real,imag = b.real,b.imag\n    #get the angle in radians\n    angle = cmath.phase(complex(real,imag))\n    if math.isnan(angle):\n        return 0\n    #return the angle in degrees\n    return angle * 180/math.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return a.real*b.real + a.imag*b.imag\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if type(a) is complex:\n        return cmath.acos(a.imag/(cmath.sqrt(a.real**2+b.real**2)*cmath.sqrt(b.imag**2+a.imag**2)))\n    else:\n        return cmath.acos(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (complex(b,a) * math.pi) / 2.0\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if type(a)==complex:\n        a = complex(a.real,a.imag)\n    if type(b)==complex:\n        b = complex(b.real,b.imag)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # get the real part of the complex number\n    r = cmath.sqrt(a.real**2 + b.real**2 + b.imag**2)\n    # get the imaginary part of the complex number\n    i = cmath.sqrt(a.imag**2 + b.imag**2)\n    return(cmath.acos(r/i))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*a*cmath.sqrt(b**2-4*"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = (b**2 - a**2)**0.5;\n    # if c is a complex number then the angle is given by the arccos of\n    # the real part, the imaginary part and the angle of the imaginary part\n    # divided by 2pi\n    angle = acos(complex(0,c))*2*pi;\n    if angle < 0:\n        angle = angle + 2*pi\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    if string == \"\":\n        return 0\n    else:\n        return len(string)-len(string.count('0'))-len(string.count('1'))\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zero = 0\n    count_one = 0\n    count_zero_count = 0\n    count_one_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n            count_zero_count += 1\n        elif string[i] == '1':\n            count_one += 1\n            count_one_count += 1\n    return max(count_zero - count_one, count_zero - count_one"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    print('@' * 50)\n    print(f'{string}' * 50)\n    print('@' * 50)\n    print('|', end='')\n    answer = 0\n    for i in range(len(string) - 1):\n        if string[i]!= string[i + 1]:\n            answer += 1\n        elif string[i] == string[i + 1]:\n            answer += 2\n    return answer\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length=0\n    for i in range(len(string)):\n        if string[i]==\"0\":\n            length+=1\n        else:\n            length-=1\n        if length == 0:\n            break\n    return length\n    \n    \ndef find_zeros(binary_string):\n    '''\n    Write a function that takes the given binary string as an argument and returns an array containing the number of 0s and number of 1s in the given string.\n    '''\n    number_of_zeros=0\n    for i in range(len(binary_string)):\n        if binary_string[i]==\"0\":\n            number_of_zeros+=1\n        else:\n            number_of_zeros-=1\n    return number_of_zeros\n    \n    \ndef find_ones(binary_string):\n    '''\n    Write a function that takes the given binary string as an argument and returns an array containing the number of 1s in the given string.\n    '''\n    number_of_ones=0\n    for i in range(len(binary_string)):\n        if binary_string[i]==\"1\":\n            number_of_ones+=1\n        else:\n            number_of_ones-=1\n    return number_of_ones\n    \n    \ndef reverse(string):\n    '''\n    Write a function that takes a given binary string as an argument and returns a reversed binary string.\n    '''\n    reversed_string=''\n    for i in range(len(string)):\n        if string[i]==\"0\":\n            reversed_string+=\"1\"\n        else:\n            reversed_string+=\"0\"\n    return reversed_string\n    \n    \ndef count_bits(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the number of bits of the given string.\n    '''\n    length=0\n    for i in range(len(binary_string)):\n        length+=int(binary_string[i])\n    return length\n    \n    \ndef count_digits(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the number of digits in the given string.\n    '''\n    count=0\n    for i in range(len(binary_string)):\n        count+=int(binary_string[i])\n    return count\n    \n    \ndef complement(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the complement of the binary string.\n    '''\n    complement=''\n    for i in range(len(binary_string)):\n        if binary_string[i]==\"1\":\n            complement+=1\n        else:\n            complement-=1\n    return complement\n    \n    \ndef count_elements(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the count of elements in the given string.\n    '''\n    length=0\n    for i in range(len(binary_string)):\n        length+=binary_string.count(\"1\")\n    return length\n    \n    \ndef count_flips(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the count of flips of the given string.\n    '''\n    flips=0\n    for i in range(len(binary_string)):\n        flips+=binary_string.count(\"1\")\n    return flips\n    \n    \ndef count_swaps(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the count of swaps of the given string.\n    '''\n    swaps=0\n    for i in range(len(binary_string)):\n        if binary_string[i]==\"0\":\n            swaps+=1\n        else:\n            swaps-=1\n    return swaps\n    \n    \ndef count_bits_from_string(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the count of bits in the given string.\n    '''\n    return binary_string.count(\"1\")\n    \n    \ndef find_palindrome(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the palindrome of the given string.\n    '''\n    palindrome=''\n    for i in range(len(binary_string)):\n        palindrome+=binary_string[i]\n    return palindrome\n    \n    \ndef find_binary_string(number):\n    '''\n    Write a function that takes a given number as an argument and returns the binary string of the given number.\n    '''\n    return bin(number)\n    \n    \ndef find_redundancy(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the redundancy of the given binary string.\n    '''\n    redundancy=0\n    for i in range(len(binary_string)):\n        if binary_string[i]==\"1\":\n            redundancy+=1\n        else:\n            redundancy-=1\n    return redundancy\n    \n    \ndef find_digit_length(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the length of the given string.\n    '''\n    length=0\n    for i in range(len(binary_string)):\n        length+=1\n    return length\n    \n    \ndef find_number_of_zeros(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the number of zeroes in the given string.\n    '''\n    zeros=0\n    for i in range(len(binary_string)):\n        if binary_string[i]==\"0\":\n            zeros+=1\n        else:\n            zeros-=1\n    return zeros\n    \n    \ndef find_number_of_ones(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the number of ones in the given string.\n    '''\n    ones=0\n    for i in range(len(binary_string)):\n        if binary_string[i]==\"1\":\n            ones+=1\n        else:\n            ones-=1\n    return ones\n    \n    \ndef is_binary(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns True if the given binary string is a binary string, and False otherwise.\n    '''\n    if len(binary_string)%2==0:\n        return True\n    else:\n        return False\n    \n    \ndef get_binary_string(number):\n    '''\n    Write a function that takes a given number as an argument and returns the binary string of the given number.\n    '''\n    return bin(number)\n    \n    \ndef find_substring_and_distance(string,binary_string):\n    '''\n    Write a function that takes a given string as an argument and returns the substring and its length within the given binary string.\n    '''\n    start=0\n    end=len(binary_string)\n    for i in range(len(string)):\n        if binary_string[i]==\"0\":\n            start+=1\n        else:\n            start-=1\n        if start==0:\n            end=end-len(binary_string[i])\n            break\n    if end>len(string):\n        end=len(string)\n    return string[start:end],end-start\n    \n    \ndef find_number_of_ones_in_binary_string(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns the number of ones in the given binary string.\n    '''\n    return binary_string.count(\"1\")\n    \n    \ndef is_palindrome(binary_string):\n    '''\n    Write a function that takes a given binary string as an argument and returns True if the given binary string is a palindrome, and False otherwise.\n    '''\n    return binary_string==binary_string[::-1]\n    \n    \ndef is_palindrome_reverse(binary_string):\n    '''\n    Write a function that takes a given binary string a"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    n = len(string)\n    # print(string)\n    for i in range(n):\n        # print(i)\n        if string[i] == '0':\n            max = max - i\n        else:\n            max = max\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return find_length_recursive(string,0)\n    \n    \ndef find_length_recursive(string,pointer):\n    if string[pointer] == \"0\":\n        return 1\n    else:\n        return 0\n        \n        \ndef find_length_str(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any string.\n    \"\"\"\n    length = 0\n    for char in string:\n        if char == \"0\":\n            length += 1\n        else:\n            length = 0\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if (string[i:j].count('0') + string[j:i].count('1')) == len(string[i:j]):\n                return j - i - 1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diff = 0\n    for i in range(len(string) - 1): \n        if string[i] == '0': \n            diff += 1\n        else: \n            diff -= 1\n    return diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == \"\":\n        return 0\n    if string[0] == '0':\n        return 1\n    else:\n        return 0\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(0,len(string)):\n        if string[i] == \"0\":\n            length += 1\n    return length\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize the sum as 0\n    s = 0\n    # Iterate from 1 to input numbers\n    for i in range(1,b+1): \n        # Check if the ith number is divisible by any number in input list. \n        if i in a: \n            # If so, add the number to the sum and increment the count. \n            s = s + i \n            a.remove(i)\n            # Return the sum. \n            return s \n    # If none of the numbers in the input list are divisible by any number in the input list, \n    # then return 0. \n    return s \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        temp=b\n        b=a\n        a=temp\n    a=a//2\n    sum=0\n    while(a<b):\n        if a%2==1:\n            sum+=a\n        if b%2==1:\n            sum+=b\n        a+=1\n        b-=1\n    return sum\ndef subtract(a,b): \n    '''\n    Write a python function to find the difference of two numbers.\n    '''\n    a=a%10\n    b=b%10\n    return sum(a,b)-sum(a+b)\ndef mod_add(a,b):\n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    a=a%10\n    b=b%10\n    return sum(a,b)-sum(a+b)\ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\ndef mod_factorial(n): \n    '''\n    Write a python function to find the product of two numbers.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n%10*mod_factorial(n-1)\ndef factorial_multi(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial_multi(n-1)\ndef prime(n): \n    '''\n    Return a list of primes for the given number n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n%2==0:\n        return [2]\n    if n==3:\n        return [3]\n    if n>3:\n        k=0\n        for i in range(2,n//2):\n            if n%i==0:\n                break\n            else:\n                k+=1\n        if k==2:\n            return [n]\n        else:\n            return [n,n+k]\ndef prime_multi(n): \n    '''\n    Return a list of primes for the given number n.\n    '''\n    if n==1:\n        return [1]\n    if n==2:\n        return [2]\n    if n%2==0:\n        return [2]\n    if n==3:\n        return [3]\n    if n>3:\n        k=0\n        for i in range(2,n//2):\n            if n%i==0:\n                break\n            else:\n                k+=1\n        if k==2:\n            return [n]\n        else:\n            return [n,n+k]"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b: \n        return sum(b,a%b)\n    else:\n        return sum(a,b%a)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return sum(a,b/2)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #print(a,b)\n    \n    # try:\n    #     a = int(a)\n    #     b = int(b)\n    # except:\n    #     print(\"ERROR: input not number\")\n    #     exit(1)\n    \n    # if(a==0):\n    #     if(b==0):\n    #         print(\"ERROR: b cannot be 0\")\n    #     else:\n    #         print(\"ERROR: b cannot be 0\")\n    #     exit(1)\n    \n    # if(a<0):\n    #     print(\"ERROR: a cannot be negative\")\n    #     exit(1)\n    \n    # if(b<0):\n    #     print(\"ERROR: b cannot be negative\")\n    #     exit(1)\n    \n    \n    # if(b!=0):\n    #     #print(\"b is not 0\")\n    #     #print(b)\n    #     if(a<0):\n    #         a=abs(a)\n    #         print(\"Error: a cannot be negative\")\n    #     if(a<0):\n    #         #print(\"Error: a cannot be negative\")\n    #         exit(1)\n    #     \n    #     #print(\"a is negative\")\n    #     if(a>=b):\n    #         #print(\"Error: a cannot be larger than b\")\n    #         exit(1)\n    #     #print(a//b)\n    #     if(a%b):\n    #         #print(\"Error: a cannot be divided by b\")\n    #         exit(1)\n    #     #print(\"a is a valid number\")\n    #     \n    #     result=a//b\n    #     if(result==0):\n    #         result=b\n    #     print(result)\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"/\",b,\"=\",(a/b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     print(a,\"//\",b,\"=\",(a//b))\n    #     #print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"+\",b,\"=\",(a+b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"-\",b,\"=\",(a-b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"*\",b,\"=\",(a*b))\n    #     print(a,\"/\",b,\"=\","
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0:\n        return b\n    if b==0:\n        return a\n    return a+b+sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = abs(a) \n    b = abs(b) \n    count = 0 \n    for i in range(a,b+1): \n        if a%i==0 and b%i==0: \n            count += 1 \n    return count \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #To calculate the common divisors we use the O(n) method.\n    #For our case we have a base case and if the given number is 2 then we return the common divisors of that number.\n    #If the number is greater then 2 then we have to return the whole number.\n    if a<b:\n        return int(a/b)\n    else:\n        return int(a/b) + 1\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if(x == 0):\n        return 0\n    else:\n        return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0:\n        return y\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    result = x*y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # TODO: Modify this function so that it multiplies the result of y with x.\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not (isinstance(x, (int, long)) and isinstance(y, (int, long))):\n        return None\n    else:\n        return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    with open(f\"{n}_words.txt\", 'r') as words_file:\n        words = words_file.read().split('\\n')\n    words_count = 0\n    for word in words:\n        if len(word) > n:\n            words_count += 1\n    return words_count\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = list(str.split(' '))\n    words.sort(key=len, reverse=True)\n    return [word for word in words if len(word)>=n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    if n == 1:\n        return str.split()\n    else:\n        if str == \"\":\n            return []\n        \n        long_words = []\n        word = \"\"\n        for i in range(len(str)):\n            word += str[i]\n            \n            if len(word) > n:\n                long_words.append(word)\n                word = \"\"\n                \n        long_words.append(word)\n        return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Your code here\n    word_list = []\n    num_list = []\n    for word in str:\n        word_list.append(word)\n        num_list.append(len(word))\n    index_list = list(enumerate(word_list))\n    max_list = []\n    max_value = -1\n    for index in index_list:\n        if index[1] > max_value:\n            max_value = index[1]\n            max_list = index[0]\n    if max_value == -1:\n        return 'No long words'\n    else:\n        return''.join(max_list)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    return [w for w in str.split() if len(w)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # filter out words that are longer than n characters\n    long_words = [word for word in str.split() if len(word)>n]\n    return''.join(long_words)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    words.append(str[0])\n    for char in str[1:]:\n        if len(char) > n:\n            words.append(char)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import string\n    longer = []\n    for word in str:\n        if len(word) > n:\n            longer.append(word)\n    return''.join(longer)"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str_list = []\n    for word in str.split():\n        if len(word) > n:\n            str_list.append(word)\n    return str_list\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0,len(my_matrix)):\n        for j in range(0,len(my_matrix[i])):\n            if my_matrix[i][j] > 0:\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Step 1: Check each entry in the matrix\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            if (my_matrix[i][j] == 0):\n                # Step 2: Check if diagonal lines are equal to each other\n                # Check 1:\n                # Check 2:\n                # Check 3:\n                # Check 4:\n                # Check 5:\n                if (my_matrix[i][j] == my_matrix[j][i]):\n                    print(\"Row {} is equal to {}\".format(i, j))\n                else:\n                    print(\"Row {} is not equal to {}\".format(i, j))\n                # Step 3:\n                # Check 6:\n                # Check 7:\n                # Check 8:\n                if (my_matrix[i][j] == my_matrix[j][j]):\n                    print(\"Column {} is equal to {}\".format(j, j))\n                else:\n                    print(\"Column {} is not equal to {}\".format(j, j))\n    # Step 4:\n    # Check 9:\n    # Check 10:\n    # Check 11:\n    # Check 12:\n    # Check 13:\n    # Check 14:\n    # Check 15:\n    if (len(my_matrix) == len(my_matrix[0])):\n        # Step 4:\n        # Check 17:\n        # Check 18:\n        # Check 19:\n        # Check 20:\n        if (my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2]):\n            print(\"Matrix is a magic square!\")\n        else:\n            print(\"Matrix is not a magic square!\")\n    else:\n        print(\"Matrix is not a magic square!\")\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = my_matrix.shape[0]\n    cols = my_matrix.shape[1]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix.sort(key=lambda x: x[0] * x[1])\n    for i in range(len(my_matrix) - 1):\n        for j in range(len(my_matrix) - 1):\n            if my_matrix[i][j] * my_matrix[j][-1] == 1:\n                print(\"It is a magic square: {}\".format(my_matrix[i][j]))\n                return True\n    print(\"It is not a magic square\")\n    return False\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Set up a 2D list of \"illegal\" values\n    illegal_values = [None] * 9\n    # Initialize the result\n    result = 0\n    # Loop through each value in the matrix and test it against each\n    # adjacent value\n    for x in range(len(my_matrix)):\n        for y in range(len(my_matrix[0])):\n            if my_matrix[x][y] in illegal_values:\n                illegal_values[my_matrix[x][y]] = 1\n            else:\n                illegal_values[my_matrix[x][y]] = 0\n            if my_matrix[x][y] == my_matrix[x][y + 1] == my_matrix[x][y + 2] == my_matrix[x][y + 3] == my_matrix[x][y + 4] == my_matrix[x][y + 5] == my_matrix[x][y + 6] == my_matrix[x][y + 7] == my_matrix[x][y + 8]:\n                result = result + 1\n                # Use the sum of the values in the square to check if it is the edge\n                # of the square\n                for i in range(8):\n                    if illegal_values[my_matrix[x][i]] == 1:\n                        illegal_values[my_matrix[x][i]] = 0\n                    else:\n                        illegal_values[my_matrix[x][i]] = 1\n            else:\n                illegal_values[my_matrix[x][y]] = 1\n    # If there is an illegal value, return false\n    return result == 4\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sudoku_matrix = []\n    for i in my_matrix:\n        sudoku_matrix.append(list(i))\n    \n    # Fill out the blanks\n    sudoku_matrix = fill_in_blanks(my_matrix, sudoku_matrix)\n    \n    # Check the matrix\n    is_magic = check_magic_square(sudoku_matrix)\n    if is_magic:\n        print('Yes! Matrix is a magic square.')\n    else:\n        print('No! Matrix is not a magic square.')\n        \ndef magic_square_test_2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sudoku_matrix = []\n    for i in my_matrix:\n        sudoku_matrix.append(list(i))\n    \n    # Fill out the blanks\n    sudoku_matrix = fill_in_blanks(my_matrix, sudoku_matrix)\n    \n    # Check the matrix\n    is_magic = check_magic_square(sudoku_matrix)\n    if is_magic:\n        print('Yes! Matrix is a magic square.')\n    else:\n        print('No! Matrix is not a magic square.')\n        \ndef fill_in_blanks(my_matrix, my_matrix_to_fill):\n    '''\n    Fill the blanks with numbers from a 2d list.\n    '''\n    \n    # Fill in the blanks\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[i])):\n            if is_valid_square(my_matrix, i, j):\n                my_matrix_to_fill[i][j] = random.randint(0, 9)\n                \n    return my_matrix_to_fill\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (is_magic(my_matrix)):\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    check_row = check_column = False\n    check_diagonal = check_anti_diagonal = False\n    for x in range(len(my_matrix)):\n        if(my_matrix[x][x]!= 0):\n            check_row = True\n        if(my_matrix[0][x]!= 0):\n            check_column = True\n        if(my_matrix[x][0]!= 0):\n            check_diagonal = True\n        if(my_matrix[x][len(my_matrix)-1]!= 0):\n            check_anti_diagonal = True\n    if(not (check_row or check_column or check_diagonal or check_anti_diagonal)):\n        print('The matrix is not a magic square!')\n    else:\n        print('The matrix is a magic square!')\n    \nif __name__ == '__main__':\n    my_matrix = [\n        [1, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 1]\n    ]\n    magic_square_test(my_matrix)"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 3 and len(my_matrix[0]) == 3:\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix[0])):\n                if my_matrix[i][j]!= 0:\n                    return False\n        return True\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for n in nums:\n        frequency[n] += 1\n    \n    max_freq = 0\n    for i in frequency.values():\n        if i > max_freq:\n            max_freq = i\n    \n    return max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n    \n    max_freq = 0\n    max_num = 0\n    \n    for num in freq_map:\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = max(frequency.values())\n    for num in frequency:\n        if frequency[num] == max_freq:\n            return num\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occur = 0\n    for num in nums:\n        if num > max_occur:\n            max_occur = num\n    return max_occur\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence = {}\n    for num in nums:\n        if num not in max_occurrence:\n            max_occurrence[num] = 1\n        else:\n            max_occurrence[num] += 1\n    for num, occurence in max_occurrence.items():\n        if occurence == max(max_occurrence.values()):\n            return num\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_table = defaultdict(lambda: 0)\n    for num in nums:\n        hash_table[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    # create a hash table for the frequencies\n    # store the frequencies\n    freq_table = {}\n    for num in nums:\n        if num in freq_table:\n            freq_table[num] += 1\n        else:\n            freq_table[num] = 1\n    \n    # find the highest frequency item\n    # look for the key in the hash table\n    for key in freq_table:\n        if freq_table[key] > max_freq:\n            max_freq = freq_table[key]\n    return max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    f = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = {}\n    for num in nums:\n        if num in max_freq:\n            max_freq[num] += 1\n        else:\n            max_freq[num] = 1\n    max_freq = dict(sorted(max_freq.items(), key=lambda item: item[1]))\n    return max_freq.keys()[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return\n    maxfreq = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > maxfreq:\n            maxfreq = nums[i]\n    return maxfreq\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1 = str1[:i] + str1[i + 1:]\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reversed_string = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i].lower() in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):\n            reversed_string += str1[i].lower()\n        else:\n            reversed_string += str1[i]\n    return reversed_string\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'AEIOUaeiou'\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    s = list(str1)\n    l = []\n    for i in s:\n        if i in vowels:\n            l.append(i)\n    return ''.join(l)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # take in an input string\n    # reverse the input string\n    # return the reversed string\n    # if input string is empty return None\n    # else if input string is a vowel return the input string\n    # else return None\n    \n    vowels = 'aeiouAEIOU'\n    vowels_list = list(vowels)\n    vowels_string = ''\n    \n    if len(str1) == 0:\n        return None\n    else:\n        for i in range(len(str1)):\n            if str1[i].lower() not in vowels:\n                vowels_string += str1[i].lower()\n        return vowels_string\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_lst = ['a', 'e', 'i', 'o', 'u']\n    str1_lst = []\n    for i in str1:\n        if i in vowels_lst:\n            str1_lst.append(i)\n        else:\n            str1_lst.append(i.lower())\n    str1_lst.reverse()\n    str1_lst.reverse()\n    str1_str = ''.join(str1_lst)\n    return str1_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if str1=='':\n        return ''\n    else:\n        vowels_list = ['a','e','i','o','u']\n        str_list = [char for char in str1]\n        for char in vowels_list:\n            str_list.append(char)\n        str_list.reverse()\n        str_list.reverse()\n        return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel = vowels[0]\n    if vowel in str1:\n        str1 = str1.replace(vowel,'')\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    rev = ''\n    for char in str1:\n        if char in 'aeiou':\n            rev += char\n    return rev\n    # return str1[::-1].replace('e', 'a').replace('i', 'u').replace('o', 'o').replace('y', '')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels = list(vowels)\n    for i in str1:\n        if i in vowels:\n            if i in vowels[::-1]:\n                vowels.pop(vowels.index(i))\n                str1 = str1.replace(i,'',1)\n    return ''.join(vowels)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = \"(\"\n    for item in tup1:\n        string_tup += str(item) + \",\"\n    string_tup = string_tup[:-1]\n    string_tup += \")\"\n    return string_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for i in tup1:\n        result = result + str(i)\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=''\n    for i in tup1:\n        s+=str(i)\n        s+='\\t'\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str = ''\n    for i in tup1:\n        str = str + str(i) + ', '\n    return str\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s1=''\n    for i in tup1:\n        s1+=str(i)\n    return s1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join([str(elem) for elem in tup1]) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = '({}'.format(', '.join(map(str, tup1)))\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '('+','.join(tup1)+')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"({},{})\".format(tup1[0],tup1[1])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += -num\n        else:\n            s += num\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n        else:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    n=len(nums)\n    sum=0\n    neg=0\n    for i in range(n):\n        if nums[i]<0:\n            sum+=abs(nums[i])\n            neg+=1\n    return sum+neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += -num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    summ = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            summ -= nums[i]\n    return summ"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_num = 0\n    for i in nums:\n        if i < 0:\n            neg_num += i\n    return neg_num\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def num_generator(n): \n        if n == 0:\n            return 1\n        else:\n            return (num_generator(n - 1) + 2 * num_generator(n - 1) + num_generator(n - 1)) / 6\n    return num_generator(n)"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for x in range(n, 0, -1):\n            for y in range(1, (n+1)):\n                print(x, y)\n                if x + y == n:\n                    print(x, y, \"Found\")\n                    return x * y\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Corner case:\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0: \n        return n - 1\n    else:\n        return n - 3\n "
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = n\n    for i in range(2, n+1, 2): \n        if i == x: \n            break\n        else: \n            x = x + 2 * i \n    print(x)\nn = int(input(\"Enter an integer\"))\nhexagonal_num(n)"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagon = 0\n    while hexagon <= n:\n        if n % 16 == 0:\n            hexagon = hexagon + 1\n        else:\n            hexagon = hexagon + 2\n    return hexagon\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    for i in range(1,n+1): \n        result = (result*3) + ((i-1)**2)\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0:\n        n = n - 1\n        while n > 0:\n            n = n // 6\n            if n == 0:\n                return n\n    else:\n        n = n + 1\n        while n > 0:\n            n = n // 6\n            if n == 2:\n                return n\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    nums_zero = 0\n    for i in arr:\n        if i == 0:\n            nums_zero += 1\n    return nums_zero/len(nums)\ndef print_list(arr):\n    for item in arr:\n        print(item)\ndef main():\n    numbers = [1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    return zeroes/non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # find the count of zeros\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    # calculate the ration\n    zeros_ratio = zeros / len(nums)\n    print(zeros_ratio)\n    # return\n    return zeros_ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    nonzeros = 0\n    for num in nums:\n        if num!= 0:\n            nonzeros += 1\n        else:\n            zeros += 1\n    return nonzeros/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for item in nums:\n        if item == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n    \ndef factors_2(n):\n    '''\n    Find the factors of a given number.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef factors_3(n):\n    '''\n    Find the factors of a given number.\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(i)\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count = count + 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(0,len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # you can write a function to check whether a given number can be represented as sum of non-zero powers of 2.\n    # You can write function to check whether a given number can be represented as sum of powers of 2.\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    else:\n        if is_Sum_Of_Powers_Of_Two(n // 2):\n            return is_Sum_Of_Powers_Of_Two(n // 2)\n        else:\n            return is_Sum_Of_Powers_Of_Two(n - 2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n == 0: \n        return False \n    else: \n        return (n % 2 == 0 and is_Sum_Of_Powers_Of_Two(n//2)) \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i=0\n    while i<n:\n        if n%2==0:\n            n=n/2\n        else:\n            n=3*n+1\n        i+=1\n    if n==1:\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(3,int(math.sqrt(n))+1,2): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_pow_2 = 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    c = 2\n    while(c < n):\n        if(n%c==0):\n            return False\n        else:\n            c+=2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Three(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of three or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 3\n        return is_Sum_Of_Powers_Of_Three(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Four(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of four or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 4\n        return is_Sum_Of_Powers_Of_Four(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Five(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of five or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 5\n        return is_Sum_Of_Powers_Of_Five(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Six(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of six or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 6\n        return is_Sum_Of_Powers_Of_Six(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Seven(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of seven or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 7\n        return is_Sum_Of_Powers_Of_Seven(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Eight(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of eight or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 8\n        return is_Sum_Of_Powers_Of_Eight(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Nine(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of nine or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 9\n        return is_Sum_Of_Powers_Of_Nine(a)\n    \n    \n    \n    \ndef is_Sum_Of_Powers_Of_Ten(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of ten or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Ten(a)\n    \n    \n    \n    \ndef is_Sum_Of_Powers_Of_Eleven(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of eleven or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Eleven(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Twelve(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of twelve or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Twelve(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Thirteen(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of thirteen or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Thirteen(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Fourteen(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of fourteen or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Fourteen(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Fifteen(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of fifteen or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Fifteen(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Sixteen(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of sixteen or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Sixteen(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Seventeen(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of seventeen or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Seventeen(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Eighteen(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of eighteen or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n        return is_Sum_Of_Powers_Of_Eighteen(a)\n    \n    \n    \ndef is_Sum_Of_Powers_Of_Nineteen(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of nineteen or not.\n    '''\n    if n < 0: \n        return False\n    if (n & 1) == 0:\n        return False\n    else:\n        a = n // 10\n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    try:\n        if n <= 2:\n            return True\n        else:\n            if n%2 == 0:\n                return False\n            else:\n                return is_Sum_Of_Powers_Of_Two(n//2)\n    except:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_Sum_Of_Powers_Of_Two(n):\n        '''\n        Checks if the number can be represented as sum of non-zero powers of 2.\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circum_side = 2 * 3.14 * r\n    print(\"Circumference:\", circ_side)\n    \ndef circle_area(r):\n    '''\n    Write a function that finds the area of a circle.\n    '''\n    circ_side = 2 * 3.14 * r\n    print(\"Area:\", circ_side)\n    \ndef circle_perimeter(r):\n    '''\n    Write a function that finds the perimeter of a circle.\n    '''\n    circ_side = 2 * 3.14 * r\n    print(\"Perimeter:\", circ_side)\n    \ndef main():\n    print(\"Circles circumference:\", circle_circumference(1.5))\n    print(\"Area:\", circle_area(1.5))\n    print(\"Perimeter:\", circle_perimeter(1.5))\n    \nmain()"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    print(\"The circumference of a circle is:\", circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.141592 * r\n    print(circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    print(circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    PI = math.pi\n    return 2*(PI*r*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * (r ** 2)\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    circumference = 2 * 3.14 * r\n    print(f'Circumference: {circumference}')\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for item in test_list:\n        if type(item) == list:\n            flatten = flatten + item\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for list in test_list:\n        if isinstance(list, list):\n            flattened.extend(list)\n        else:\n            flattened.append(list)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        for e in i:\n            result.add(e)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x[0] for x in test_list]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for i in test_list:\n        if type(i) == list:\n            flatten.extend(i)\n        else:\n            flatten.append(i)\n    return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for i in test_list:\n        output.extend(i)\n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #check if list is empty\n    if not test_list:\n        return []\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # create a new set of numbers\n    flattened_set = set()\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for lst in test_list:\n        if type(lst) is list:\n            result.extend(lst)\n        else:\n            result.append(lst)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for element in test_list:\n        flatten.extend(element)\n    return flatten\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Create a list of consecutive numbers\n    nums.sort()\n    \n    # Find where the numbers are consecutive\n    # We use a recurive sorting algorithm\n    # which does not use additional space\n    # Assume that the first element is the smallest element\n    return [nums[0]] + nums[1: len(nums)] + [nums[-1]]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length):\n        m = i\n        while m > 0:\n            if nums[m] > nums[m - 1]:\n                nums[m], nums[m - 1] = nums[m - 1], nums[m]\n            m -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # nums.sort(reverse = True)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted = nums.copy()\n    for i in range(len(sorted) - 1, -1, -1):\n        for j in range(len(sorted) - 1, i, -1):\n            if sorted[j] > sorted[j - 1]:\n                sorted[j], sorted[j - 1] = sorted[j - 1], sorted[j]\n    return sorted\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    for i in range(len_nums - 1, -1, -1):\n        min_pos = i\n        for j in range(i, len_nums):\n            if nums[j] < nums[min_pos]:\n                min_pos = j\n        nums[i], nums[min_pos] = nums[min_pos], nums[i]\n    return num"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    x = n - 1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(nums, left, right):\n        if left == right:\n            return\n        mid = nums[right]\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for index in range(1, len(nums)):\n        for position in range(index, 0, -1):\n            if nums[position] > nums[position-1]:\n                nums[position], nums[position-1] = nums[position-1], nums[position]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_index = i\n        for j in range(n-i):\n            if nums[max_index] > nums[j+1]:\n                max_index = j+1\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    c=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                c+=1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_idx = 0\n    list2_idx = 0\n    list3_idx = 0\n    count_samepair_no = 0\n    while list1_idx < len(list1) and list2_idx < len(list2):\n        if list1[list1_idx] == list2[list2_idx]:\n            count_samepair_no += 1\n        if list1[list1_idx]!= list2[list2_idx]:\n            list1_idx += 1\n            list2_idx += 1\n    return count_samepair_no\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i] == list2[j] and list2[j] == list3[i]:\n                same = same + 1\n            else:\n                same = 0\n    return same\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    #Loops through all the lists and counts the number of identical items\n    #Then divides the lists by the number of identical items.\n    #This number will then be a variable.\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num1 = 0\n    num2 = 0\n    num3 = 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # if not len(list1) == len(list2) == len(list3):\n    #     print(\"Invalid lists\")\n    #     return 0\n    c = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                if list1[i] == list2[j] and list2[i] == list3[k]:\n                    c += 1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if (list1[i] == list2[i] and list2[i] == list3[i]):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1_count = 0\n    list2_count = 0\n    list3_count = 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list2[j]==list3[k]:\n                    count = count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    assert len(list1)==len(list2)==len(list3)\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if(list1[i]==list2[j] and list2[j]==list3[k]):\n                    count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(set(Input[0])))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count=0\n    for i in range(len(Input)):\n        if type(Input[i][1])==list:\n            list_count+=1\n    return list_count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    from collections import Counter \n    Counter(Input)\n    return len(Counter(Input).values())\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def countLists(t): \n        n=0\n        for i in t: \n            if isinstance(i,(list, tuple)):\n                n+=1\n        return n\n    count=0\n    for i in Input:\n        if type(i)==type([]):\n            count+=countLists(i)\n        else:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 2: \n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code here\n    # find the length\n    len = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            len += len(Input[i])\n    return len\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    i=0\n    l=[]\n    for i in range(len(Input)):\n        if Input[i][1]==\"1\":\n            l.append(i)\n    return l\ndef count_dict(Input):\n    '''\n    Write a function to count the number of dicts present in the tuple.\n    '''\n    i=0\n    d={}\n    for i in range(len(Input)):\n        if Input[i][1]==\"1\":\n            d[Input[i][0]]=d.get(Input[i][0],0)+1\n    return d\ndef make_dict(d,input):\n    '''\n    Write a function that takes a dict and a tuple as input and\n    returns a dict with keys as tuples and values as integers.\n    '''\n    output={\"\":1}\n    for key in input:\n        if output.get(key,None):\n            output[key]=output.get(key) + 1\n    return output\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in Input:\n        if type(i)!= tuple:\n            lst.append(i)\n        else:\n            lst.append(len(i))\n    return lst\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i][j] == 1:\n                return len(Input)\n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(set([item for sublist in Input for item in sublist])))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    my_list = list(map(abs, arr))\n    return max(my_list)\n    \nif __name__ == '__main__':\n    print(max_Abs_Diff([1,2,3,4,5]))\n    print(max_Abs_Diff([-4,2,3,4,5]))\n    print(max_Abs_Diff([1,2,3,4,5]))\n    print(max_Abs_Diff([6,6,8,8]))\n    print(max_Abs_Diff([6,6,8,8]))\n    print(max_Abs_Diff([6,6,8,8]))\n    print(max_Abs_Diff([-4,2,3,4,5]))\n    print(max_Abs_Diff([6,6,8,8]))\n    print(max_Abs_Diff([-4,2,3,4,5]))\n    print(max_Abs_Diff([6,6,8,8]))\n    print(max_Abs_Diff([6,6,8,8]))\n    print(max_Abs_Diff([-4,2,3,4,5]))\n    print(max_Abs_Diff([2,2,2,2]))\n    print(max_Abs_Diff([3,4,4,4]))\n    print(max_Abs_Diff([2,3,4,5]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([6,2,4,8]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))\n    print(max_Abs_Diff([2,3,3,4]))"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = -1\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if abs(arr[i] - arr[j]) > maxDiff:\n                maxDiff = abs(arr[i] - arr[j])\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    L = len(arr)\n    if L == 1: \n        return 0\n    if L <= 1: \n        return arr[0] - arr[1]\n    max_abs_diff = max_Abs_Diff(arr[1:]) + arr[0] - arr[-1]\n    # Return the maximum absolute difference\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize all the variables\n    a=0\n    b=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            a=a+abs(arr[i]-arr[j])\n            b=b+abs(arr[j]-arr[i])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    m = 0\n    n = 0\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if (arr[i] == arr[j]): \n                if (m < arr[i]): \n                    m = arr[i] \n                if (n < arr[j]): \n                    n = arr[j] \n    return m - n \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    d=0\n    for i in range(0,len(arr)-1): \n        d=abs(arr[i+1]-arr[i])\n        if d>d: \n            d=d\n    return d\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Create an empty list to store all the values of the elements\n    value = []\n    \n    # Get the length of the array\n    length = len(arr)\n    \n    # Check if array is non empty\n    if length > 0:\n        # Loop through the array\n        for i in range(0, length):\n            # Check if array is not empty\n            if arr[i] > 0:\n                # Add the array to the list\n                value.append(arr[i])\n                \n        # Add the first value of the list to the list\n        value.append(arr[0])\n        \n        # Get the maximum value of the list\n        max_value = max(value)\n        \n        # Calculate the difference between the values\n        diff = abs(max_value - arr[0])\n        \n        # Return the difference\n        return diff\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_list = []\n    max_dif = 0\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0] - arr[0]\n    else:\n        max_val = arr[0] - arr[1]\n        for i in range(2, n):\n            max_val = max(max_val, arr[i] - arr[i-1])\n        return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) <= 1:\n        return arr[0] - arr[1]\n    else:\n        return max(arr[1] - arr[0], max_Abs_Diff(arr[1:]), max_Abs_Diff(arr[:1]))\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    import math\n    if n == 0:\n        return None\n    elif n < 0:\n        return None\n    elif n == 1:\n        return a, b\n    elif n % 2 == 0:\n        return (a, b)\n    else:\n        x, y = a, b\n        x = (n - 1) // 2\n        y = (n + 1) // 2\n        while x >= 0 and y >= 0 and x < n and y < n:\n            if x % 2 == 0:\n                x -= 1\n                y -= 1\n            elif y % 2 == 0:\n                y -= 1\n            else:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here. Make sure to write test cases for a range of values\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # TODO: write your code here\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (a, b)\n    else:\n        x, y = find_solution(a, b, n-1)\n        if (x[0]*x[1]) == (b*b-a*a) and x!= None:\n            return (x[0], x[1])\n        else:\n            return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if b == 1:\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    x = n//b\n    y = n%b\n    \n    solution = find_solution(a, b//x, n)\n    if solution:\n        return solution\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # TODO: Complete this function\n    if n == 1:\n        return x, y\n    x, y = x[0], y[0] + a[0] * n\n    if x > n:\n        return None\n    for i in range(1, n):\n        if y + b[i] * i > n:\n            continue\n        if x + a[i] * i < n:\n            x, y = x + a[i] * i, y + b[i] * i\n            continue\n        x, y = x + a[i] * i, y + b[i] * (n - i - 1)\n        return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    if a == 0 and b == 0:\n        return [0,0]\n    if a == 0:\n        return [0,b]\n    if b == 0:\n        return [a,0]\n    \n    if a < n or b < n:\n        return None\n    if a == n and b == n:\n        return [a,b]\n    \n    # Back tracking\n    temp = a + b\n    if temp == n:\n        return [a,b]\n    if temp < n:\n        a = find_solution(a, b + temp // n, n)\n    if temp > n:\n        b = find_solution(a + temp % n, b, n)\n    \n    return a,b\n    \n    \nif __name__ == \"__main__\":\n    print(find_solution(1,1,20))\n    print(find_solution(2,2,20))\n    print(find_solution(1,2,20))\n    print(find_solution(1,4,20))\n    print(find_solution(3,3,20)"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    if len(list1) == 0:\n        return []\n    if len(list2) == 0:\n        return list1\n    for i in list1:\n        if i not in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    return(list1[1:], list2[1:]"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # write your code here\n    pass"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    index = 0\n    while index < len(list1):\n        while index < len(list2):\n            list1.pop(index)\n            index += 1\n        index = 0\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in range(len(list1)):\n        if list2.count(list1[x])!= 1:\n            list1.remove(list1[x])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        list2.remove(element)\n        \n    return list2\n    \ndef add_to_dict(dict1, key, value):\n    '''\n    Write a function to add a key:value pair to a dictionary.\n    '''\n    if value not in dict1.values():\n        dict1[key] = value\n        \n    return dict1\n    \ndef reverse(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        new_key = key[::-1]\n        new_value = value\n        new_dict[new_key] = new_value\n        \n    return new_dict\n    \ndef update_dict(dict1, key, new_value):\n    '''\n    Write a function to update a dictionary, if the key is already present, then its value is updated, otherwise, if it is not present, the key is added.\n    '''\n    if key in dict1.keys():\n        dict1[key] = new_value\n    else:\n        dict1[key] = new_value\n        \n    return dict1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    list1.sort()\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list3.append(list1[i])\n            list3.sort()\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element not in list1:\n            list1.append(element)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Your code here\n    return sum([n - i for i in range(0, n // 2 + 1)])\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n - (n-2)*(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n - 2) + (n - 4))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return n\n    elif n == 3:\n        return 2 * n - 1\n    elif n == 4:\n        return (n - 3) + (n - 2) + (n - 1)\n    else:\n        return sum_series(n-1) + sum_series(n-3) + sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n + 1) + n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum = sum + (n - i) * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2: return n\n    \n    return (sum_series(n-2) + sum_series(n-4))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s=0\n    i=0\n    while(n>i):\n        s+=n-2*i\n        i+=1\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n > 2:\n        return (n-2) + (n-4)\n    \nn = int(input())\nprint(sum_series(n)"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    p = len(l)\n    area = s*p\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for i in range(len(l)):\n        a += (l[i] * s)\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s + l / 2\n    area = (l / 2) * tan(pi / s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*(4/3)*(1/tan(l/2))**3\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    r = 0\n    for k in range(0, len(s)):\n        r += (s[k] + l[k] + l[k]*2 - s[k])*1/2\n    return r\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5*l*(s[0]-s[1])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (2 * i + 1) * tan(pi / (l + i + 1))\n    return area\ndef area_rectangle(x, y):\n    '''\n    Write a function to calculate the area of a rectangle given its height and width.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * (2 * i + 1)\n    return area\ndef area_rectangle_parallelogram(x, y, z):\n    '''\n    Write a function to calculate the area of a parallelogram given its height and width and the location of the rectangle.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * z * (2 * i + 1)\n    return area\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(r):\n        area += r * r\n    return area\ndef area_circle_from_sides(s):\n    '''\n    Write a function to calculate the area of a circle given its radius and its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += s * (2 * i + 1)\n    return area\ndef area_rectangle_from_sides(x, y, z):\n    '''\n    Write a function to calculate the area of a rectangle given its height and width and its location.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * z * (2 * i + 1)\n    return area\ndef area_rectangle_parallelogram_from_sides(x, y, z):\n    '''\n    Write a function to calculate the area of a rectangle given its height and width and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * z * (2 * i + 1) * tan(pi / (x + i + 1))\n    return area\ndef area_circle_from_height(h):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_radius(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(r):\n        area += r * r\n    return area\ndef area_circle_from_height_from_radius(h, r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height.\n    '''\n    area = 0\n    for i in range(h):\n        area += r * r * (2 * i + 1)\n    return area\ndef area_circle_from_height_from_radius_parallelogram(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location of a parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_radius_from_height(r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height.\n    '''\n    area = 0\n    for i in range(r):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_height_from_radius_parallelogram_from_height(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_radius_from_height_from_height(r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height.\n    '''\n    area = 0\n    for i in range(r):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_radius_from_height_from_height_parallelogram(r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(r):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram(r, h):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram_from_height(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram_from_height_from_height(r, h, h_from_height):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_radius_from_height_from_height_from_height_from_height(r, h):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height and its location.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_height_from_radius_from_height_from_height_from_height_from_height(r, h, h_from_height):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_from_height_from_height_from_height(r, h):\n    '''\n    Write a function to calculate the area of a circle given its height and radius.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_from_height_from_height_from_height_from_height(r, h):\n    '''\n    Write a function to calculate the area of a circle given its height and radius.\n    '''"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return pi * s * (l/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Write your code here\n    sum = 0\n    for i in range(len(l)):\n        sum += l[i]*s\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s) > 3:\n        s = [s]\n    \n    a = 0\n    for i in range(len(s)):\n        if i == 0:\n            a += s[i] * ((2 * l) - 2)\n        else:\n            a += s[i] * (l / 2)\n    \n    return a\n    \ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * (r ** 2)\n    \ndef area_rectangle(l1, l2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return l1 * l2\n    \ndef area_parallelogram(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a parallelogram given its length and width.\n    '''\n    return pi * (l1 * l2)\n    \ndef area_triangle(l1, l2):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return l1 * l2\n    \ndef area_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * (l1 * l2)\n    \ndef area_rectangle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return area_rectangle(l1, l2)\n    \ndef area_parallelogram_intersect(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a parallelogram given its base and height.\n    '''\n    return area_parallelogram(l1, l2, l3)\n    \ndef area_triangle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return area_triangle(l1, l2)\n    \ndef area_circle_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * (l1 * l2)\n    \ndef area_circle_circle_intersect_lines(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return pi * l1 * l2\n    \ndef area_triangle_circle_intersect_lines(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return area_triangle(l1, l2)\n    \ndef area_circle_circle_intersect_lines_exact(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l3, l2)\n    \ndef area_triangle_circle_intersect_lines_exact(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a triangle given its base and height.\n    '''\n    return area_triangle(l1, l2) * area_triangle(l3, l2)\n    \ndef area_circle_circle_intersect_lines_exact_intersect(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l3, l2)\n    \ndef area_circle_circle_intersect_lines_exact_intersect_lines(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l3, l2) * area_circle(l3, l1)\n    \ndef area_circle_circle_intersect_lines_exact_intersect_lines_exact(l1, l2, l3):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l3, l2) * area_circle(l3, l1) * area_circle(l3, l1)\n    \ndef area_parallelogram_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a parallelogram given its base and height.\n    '''\n    return area_parallelogram(l1, l2)\n    \ndef area_rectangle_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return area_rectangle(l1, l2)\n    \ndef area_circle_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2)\n    \ndef area_circle_circle_intersect_lines(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l2, l1)\n    \ndef area_circle_circle_intersect_lines_exact(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l1, l2)\n    \ndef area_circle_circle_intersect_lines_exact_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l1, l2) * area_circle(l2, l1)\n    \ndef area_circle_circle_intersect_lines_exact_intersect_lines(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l1, l2) * area_circle(l2, l1) * area_circle(l2, l1)\n    \ndef area_circle_circle_intersect_lines_exact_intersect_lines_exact(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l1, l2) * area_circle(l2, l1) * area_circle(l2, l1)\n    \ndef area_parallelogram_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a parallelogram given its length and width.\n    '''\n    return area_parallelogram(l1, l2)\n    \ndef area_rectangle_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return area_rectangle(l1, l2)\n    \ndef area_circle_circle_intersect(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l1, l2)\n    \ndef area_circle_circle_intersect_lines(l1, l2):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return area_circle(l1, l2) * area_circle(l2, l1)\n    "
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            div_sum += i\n    return div_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    else:\n        #for i in range(1, (n // 2) + 1):\n        for i in range(1, (n//2) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a,b = n % 2,n // 2\n    return a * b == n\ndef list_sum(l): \n    '''\n    This function takes a list and returns the sum of all the numbers in the list.\n    '''\n    return sum(l)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 2\n    while i <= n:\n        if n%i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            s += i \n            if i == n // i: \n                return True \n    return False \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    a,b = n\n    divisors = []\n    for i in range(1,a+1):\n        if(a%i == 0):\n            divisors.append(i)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # your code goes here\n    return n % 2 == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # return True if the sum of the divisors is the same as the number and if it does not return False\n    \n    if n == 0:\n        return False\n    for divisor in range(2, int(math.sqrt(n) + 1)):\n        if n % divisor == 0:\n            return False\n    return True\n    \ndef is_prime(num):\n    '''\n    Test if the number is prime or not.\n    '''\n    \n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    for i in range(3, int(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    elif n % 2 == 0: \n        return True\n    else: \n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if n % i == 0: \n                return False \n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n            divisors.append(i)\n    if sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    print(\"Counting characters in a string that occur at the same position in the alphabet as in the English alphabet.\")\n    char_count = {}\n    for char in alphabet:\n        char_count[char] = char_count.get(char, 0) + 1\n    print(char_count)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # count = {}\n    # for char in str1:\n    #     if char in count:\n    #         count[char] += 1\n    #     else:\n    #         count[char] = 1\n    # return len(count)\n    \n    # count = [0, 0]\n    # for char in str1:\n    #     if char in count:\n    #         count[char] += 1\n    #     else:\n    #         count[char] = 1\n    # return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i.lower() in alphabet:\n            count += 1\n        else:\n            count += 0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # create the variables for the string and the number of characters\n    n = len(str1)\n    count = 0\n    \n    # loop through the string\n    for i in range(n):\n        \n        # if the character in the current position matches the character in the alphabet\n        if str1[i] in alphabet:\n            \n            # increase the count by one\n            count += 1\n        \n        # if the character is not in the alphabet\n        else:\n            # increase the count by one\n            count += 1\n    \n    # return the count\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pos = {}\n    for ch in str1:\n        if ch not in pos:\n            pos[ch] = 1\n        else:\n            pos[ch] = pos[ch] + 1\n    \n    result = len(pos.keys())\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    alphabet = list(string.ascii_lowercase)\n    for index in range(len(str1)):\n        if str1[index] in alphabet:\n            alphabet.remove(str1[index])\n    if alphabet:\n        return len(alphabet)\n    else:\n        return 0\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_positions = []\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            char_positions.append((i, str1[i]))\n    char_positions = sorted(char_positions, key = lambda x : x[1])\n    print(\"The number of characters in the string: \" + str(len(char_positions)))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_letters_position(str1): \n    '''\n    Write a function to count the number of letters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_characters_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_unique_characters_position(str1): \n    '''\n    Write a function to count the number of unique characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_symbols_position(str1): \n    '''\n    Write a function to count the number of symbols in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_alphabet_numbers_position(str1): \n    '''\n    Write a function to count the number of letters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_end_of_string_position(str1): \n    '''\n    Write a function to count the number of symbols in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_letters_end_of_string_position(str1): \n    '''\n    Write a function to count the number of letters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_characters_end_of_string_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_unique_characters_end_of_string_position(str1): \n    '''\n    Write a function to count the number of unique characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_symbols_end_of_string_position(str1): \n    '''\n    Write a function to count the number of symbols in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_alphabet_numbers_end_of_string_position(str1): \n    '''\n    Write a function to count the number of letters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_end_of_string_position_with_remaining(str1): \n    '''\n    Write a function to count the number of symbols in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_letters_end_of_string_position_with_remaining(str1): \n    '''\n    Write a function to count the number of letters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_characters_end_of_string_position_with_remaining(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_unique_characters_end_of_string_position_with_remaining(str1): \n    '''\n    Write a function to count the number of unique characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_symbols_end_of_string_position_with_remaining(str1): \n    '''\n    Write a function to count the number of symbols in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_alphabet_numbers_end_of_string_position_with_remaining(str1): \n    '''\n    Write a function to count the number of letters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_end_of_string_position_with_remaining_and_count_unique_characters_position(str1): \n    '''\n    Write a function to count the number of symbols in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[0]:\n            count += 1\n        if str1[i] == str1[0]:\n            count += 1\n    return count\n    \n    \ndef count_letters_end_of_string_position_with_remaining_and_count_unique_characters_position(str1): \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = dict()\n    for char in str1: \n        if char in char_count:\n            char_count[char] += 1\n        else: \n            char_count[char] = 1\n    return char_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    xor_count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] ^ A[j] == 0:\n                xor_count += 1\n        if xor_count % 2 == 0:\n            even_count += 1\n        xor_count = 0\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for x in A:\n        if x % 2 == 0:\n            even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i] == A[j]:\n                pair_count += 1\n    return pair_count\n    \ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pair_count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if A[i] == A[j]:\n                pair_count += 1\n    return pair_count\n        \ndef find_gcd(A, B):\n    '''\n    Write a function that returns the greatest common divisor (GCD) of A and B.\n    '''\n    gcd = 1\n    for i in range(len(A)):\n        gcd = gcd % A[i]\n    for i in range(len(B)):\n        gcd = gcd % B[i]\n    return gcd\n    \ndef print_ans(A, B):\n    '''\n    Print out the answer from the function find_even_pair(A), find_odd_pair(A), find_gcd(A, B).\n    '''\n    print(find_even_pair(A), find_odd_pair(A), find_gcd(A, B))\n    \ndef main():\n    '''\n    Test the find_gcd function by calling it as follows:\n    >>print(find_gcd(A, B))\n    '''\n    A = [3, 4, 7, 3, 3, 2, 1]\n    B = [5, 4, 8, 6, 3, 3, 2]\n    print_ans(A, B)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #IMPORTANT: You will not be able to complete this challenge if you are using a list comprehension. \n    #You must use iteration over the list to check whether an even number exists.\n    even_pairs = 0\n    for x in A:\n        if x % 2 == 0:\n            even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        if A[i] & A[i+1] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    odd_count = 0\n    \n    for i in A:\n        if (i % 2)!= 0:\n            count += 1\n        else:\n            odd_count += 1\n            \n    if count == 0:\n        return 0\n    \n    else:\n        return odd_coun"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    '''\n    Pairs: [1,1,2,2,3,3,4,4,5,5]\n    '''\n    # find the pair of odd numbers\n    pair_odd_list = []\n    for i in A:\n        for j in A:\n            if i!= j:\n                pair_odd_list.append([i,j])\n    \n    pair_odd_set = set(pair_odd_list) # set of pairs\n    pair_odd_count = 0 # count pair odd numbers\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    odd_count = 0\n    even_count = 0\n    \n    for i in A:\n        if i % 2 == 0:\n            count += 1\n        else:\n            if i % 2 == 1:\n                odd_count += 1\n            else:\n                even_count += 1\n    \n    return [count, odd_count, even_count]\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair_count = 0\n    for index in range(len(A) - 1):\n        if A[index] == A[index + 1]:\n            pair_count += 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        i = 1\n        while i <= n:\n            i = i * 2\n        return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while True:\n        if n % 2 == 1:\n            break\n        n = n // 2\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return n * next_power_of_2(n - 1)"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Initialize the output variable to 0\n    output = 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n_list = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            n_list.append(i)\n    if n_list == []:\n        return 0\n    else:\n        return min(n_list)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    \n    n = int(n)\n    result = 1\n    while n > 0:\n        result *= 2\n        n -= 1\n    return result\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        return -1\n    if n % 2 == 0: \n        return 1\n    else: \n        return next_power_of_2(n - 1) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2 \n    while i <= n: \n        if n%i==0: \n            return (n//i) \n        i += 1 \n    return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return i\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    count = 0\n    while n!= 1:\n        if n & 1 == 0:\n            return count\n        n = n >> 1\n        count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=[]\n    for i in range(len(a)):\n        if a[i]==x:\n            c.append(a[i])\n    return len(c)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if a[i]==x:\n            count=count+1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # your code here\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n    #combination\n    "
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return list.count(a,x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #counts the number of times a number appears in a given list\n    if x in a:\n        a.remove(x)\n    return len(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return(a.count(x))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    print(a.count(x))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = a.count(x)\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    pass\ndef integer_list(a):\n    '''\n    Count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == 1:\n            count += 1\n    return count\n    pass\ndef minimum_index(a):\n    '''\n    Given an integer array, return an index where this integer appears as a \n    minimum in the array. \n    - If the integer does not occur in the array, return the index where it \n    appears. \n    - You may assume that the given integer does not have any order \n    if the array of integers is non-sorted. \n    '''\n    pos = 0\n    for i in range(len(a)):\n        if a[i] < a[pos]:\n            pos = i\n    return pos\n    pass\ndef majority_element(a):\n    '''\n    Given an integer array, return the most common element. \n    Your code should be able to handle the case when the array has one element\n    and the array is non-sorted.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == a[i]:\n            count += 1\n    return a[count//2]\n    pass\ndef array_i_contains_cycle(a):\n    '''\n    Given an array, return True if it has a cycle in it.\n    '''\n    slow = 0\n    fast = 0\n    while fast < len(a):\n        slow = fast\n        fast = (fast + slow)//2\n        for i in range(len(a)):\n            if a[i] == a[fast]:\n                return True\n    return False\n    pass\ndef reverse_array(a):\n    '''\n    Given an array, return that array in its reverse order.\n    '''\n    i = len(a) - 1\n    j = 0\n    while i >= 0:\n        a[i], a[j] = a[j], a[i]\n        i -= 1\n        j += 1\n    return a\n    pass\ndef string_compression(a):\n    '''\n    Given an array of characters and a number n, compress it by replacing \n    the nth character of each string in the array with the character \n    at the nth position after the nth occurrence.\n    '''\n    pass\ndef string_uniqueness(a):\n    '''\n    Given an array of characters and a number n, return the number of \n    unique characters in the array.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] not in a[i+1:len(a)]:\n            count += 1\n    return count\n    pass\ndef string_permutation(a):\n    '''\n    Given an array of characters and a number n, return the string \n    that can be obtained by deleting n letters from the array.\n    '''\n    pass\ndef string_common(a,b):\n    '''\n    Given two strings, a and b, write a function that returns true if one is \n    a permutation of the other and false otherwise.\n    '''\n    pass\ndef array_of_permutations(a):\n    '''\n    Given an array of integers, return all the possible permutations of the \n    array.\n    '''\n    pass\ndef string_arithmetic_progression(a,b,n):\n    '''\n    Given an array of characters and two integers, return the progression \n    of numbers that add up to n.\n    '''\n    pass\ndef find_nth_fibonacci_number(a, n):\n    '''\n    Given an array of integers, return the nth fibonacci number.\n    '''\n    pass\ndef prime_factors(a):\n    '''\n    Given an integer, return the prime factors of that integer.\n    '''\n    pass\ndef factorial(a):\n    '''\n    Given an integer, return the factorial of that integer.\n    '''\n    pass\ndef is_power_of_two(a):\n    '''\n    Given an integer, return True if it is a power of two, and False if it is \n    not.\n    '''\n    pass\ndef is_prime(a):\n    '''\n    Given an integer, return True if it is a prime number, and False if it is not.\n    '''\n    pass\ndef is_prime_number(a):\n    '''\n    Given an integer, return True if it is a prime number and False if it is not.\n    '''\n    pass\ndef digit_sum(a):\n    '''\n    Given an integer, return the sum of all its digits.\n    '''\n    pass\ndef count_n_unique_elements(a, n):\n    '''\n    Given an array and a number n, return the number of unique elements in it.\n    '''\n    pass\ndef sum_digits(a):\n    '''\n    Given an integer, return the sum of its digits.\n    '''\n    pass\ndef concatenate_strings(a, b):\n    '''\n    Given two strings, return the concatenation of the strings.\n    '''\n    pass\ndef make_anagram(a,b):\n    '''\n    Given two strings, return their anagrams.\n    '''\n    pass\ndef add_more_numbers(a,b):\n    '''\n    Given two strings, return the addition of the numbers in the strings.\n    '''\n    pass\ndef roman_to_int(a):\n    '''\n    Given a string, return its decimal equivalent.\n    '''\n    pass\ndef roman_to_int_list(a):\n    '''\n    Given a string, return its list of integers.\n    '''\n    pass\ndef string_to_list(a):\n    '''\n    Given a string, return its list of characters.\n    '''\n    pass\ndef string_to_string(a):\n    '''\n    Given a string, return its list of words.\n    '''\n    pass\ndef remove_punctuation(a):\n    '''\n    Given a string, return the string with all the punctuation removed.\n    '''\n    pass\ndef is_palindrome(a):\n    '''\n    Given a string, return True if it is a palindrome, and False otherwise.\n    '''\n    pass\ndef longest_palindrome(a):\n    '''\n    Given a string, return the length of the longest palindrome in the string.\n    '''\n    pass\ndef longest_palindrome_substring(a):\n    '''\n    Given a string, return the substring which contains the longest palindrome in the string.\n    '''\n    pass\ndef compress_string(a):\n    '''\n    Given a string, return the longest palindrome that can be constructed from \n    that string.\n    '''\n    pass\ndef word_break(a,b):\n    '''\n    Given two strings, return true if one can break the other into the words in \n    both strings, and false otherwise.\n    '''\n    pass\ndef longest_word(a):\n    '''\n    Given a string, return the longest word in the string.\n    '''\n    pass\ndef count_letters(a,b):\n    '''\n    Given two strings, return the number of letters in the first string that are \n    present in the second string.\n    '''\n    pass\ndef count_words(a,b):\n    '''\n    Given two strings, return the number of words in the first string that are \n    present in the second string.\n    '''\n    pass\ndef normalize_words(a):\n    '''\n    Given a string, return a string with all the non-punctuation characters \n    removed.\n    '''\n    pass\ndef is_palindrome_list(a):\n    '''\n    Given a list of numbers, return True if it is a palindrome, and False otherwise.\n    '''\n    pass\ndef remove_symbols(a):\n    '''\n    Given a string, return the string with all the special characters removed.\n    '''\n    pass\ndef find"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if (n < 0):\n        n = n+m\n    if (m == 0):\n        return 0\n    if (n >= m):\n        return 0\n    return sum(list1[0:n]) + sum_range_list(list1[n:], m-1, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    if m < n:\n        return sum_range_list(list1[:m], m, n)\n    return sum_range_list(list1[:m+1], m, n)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # your code goes here\n    sum=0\n    if m<n:\n        if m==0:\n            print('invalid range')\n            return\n        else:\n            print('invalid range')\n            return\n    if m<=len(list1) and n<=len(list1):\n        for i in range(m,len(list1)):\n            sum+=list1[i]\n            \n        for j in range(0,m):\n            sum+=list1[j]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:i + m])\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:                                                                                                                                                                                                                                                                                                                                                    \n        return list1[m] + list1[n]\n    else:\n        return sum_range_list(list1, m, n + 1) + sum_range_list(list1, m, n + 1) + sum_range_list(list1, m, n)"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0                                                                                                                                                                                                    \n    for i in range(m - 1, n + 1):                                                                                                                                                                                                    \n        s += list1[i]                                                                                                                                                                                                                                        \n        print(s)\n    print(\"The sum of the numbers in the list between indexes {} and {} is {}.\".format(m - 1, n, s))    "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    sum=0\n    for i in range(m, n):\n        sum=sum+list1[i]\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here.\n    m = math.sqrt(a)\n    return m*m*6\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * (4 * math.pi)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = 0\n    k = 0\n    for i in range(0,4,1):\n        l = (a**2 * math.sin(math.radians(45-90*i)))\n        k = math.sqrt(l)\n        if k!= 0:\n            if k < l:\n                print(\"not a rectangle\")\n            else:\n                print(\"rectangle\")\n        else:\n            print(\"not a rectangle\")\n    print(l)\n    print(k)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a**3) + 4 * a**2\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2 * a * math.sqrt(3)\ndef circumference_pentagon(a):\n    '''\n    Write a function to find the circumference of a regular pentagon from the length of its sides.\n    '''\n    return 2 * a * (math.sqrt(5))\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3))/4\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 2 * math.sqrt(6)\ndef circumference_hexagon(a):\n    '''\n    Write a function to find the circumference of a regular hexagon from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3)) / 2\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return (a * a * math.sqrt(5))/4\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 2 * math.sqrt(6)\ndef circumference_heptagon(a):\n    '''\n    Write a function to find the circumference of a regular heptagon from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3)) / 2\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return (a * a * math.sqrt(5))/4\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 4 * math.sqrt(7)\ndef circumference_octagon(a):\n    '''\n    Write a function to find the circumference of a regular octagon from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3)) / 4\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return (a * a * math.sqrt(5))/8\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a regular circle from the radius of its sides.\n    '''\n    return a * math.pi\ndef circumference_circle(a):\n    '''\n    Write a function to find the circumference of a regular circle from the radius of its sides.\n    '''\n    return (a * a * math.pi)\ndef area_circle(a):\n    '''\n    Write a function to find the area of a regular circle from the radius of its sides.\n    '''\n    return (a * a * math.pi/2)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    return a * math.sqrt(3)\ndef circumference_square(a):\n    '''\n    Write a function to find the circumference of a regular square from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3))\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its sides.\n    '''\n    return (a * a * math.sqrt(4))\ndef perimeter_rectangle(a):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    return a * math.sqrt(2)\ndef circumference_rectangle(a):\n    '''\n    Write a function to find the circumference of a regular rectangle from the length of its sides.\n    '''\n    return (a * math.sqrt(2))\ndef area_rectangle(a):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3))\ndef perimeter_parallelogram(a):\n    '''\n    Write a function to find the perimeter of a regular parallelogram from the length of its sides.\n    '''\n    return a * 2 * math.sqrt(5)\ndef circumference_parallelogram(a):\n    '''\n    Write a function to find the circumference of a regular parallelogram from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3))\ndef area_parallelogram(a):\n    '''\n    Write a function to find the area of a regular parallelogram from the length of its sides.\n    '''\n    return (a * a * math.sqrt(5))\ndef perimeter_rhombus(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return a * 4 * math.sqrt(2)\ndef circumference_rhombus(a):\n    '''\n    Write a function to find the circumference of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3))\ndef area_rhombus(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(6))\ndef perimeter_rhombus_second(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return a * 4 * math.sqrt(2)\ndef circumference_rhombus_second(a):\n    '''\n    Write a function to find the circumference of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3))\ndef area_rhombus_second(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(5))/2\ndef perimeter_rhombus_third(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return a * 4 * math.sqrt(2)\ndef circumference_rhombus_third(a):\n    '''\n    Write a function to find the circumference of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(3))/2\ndef area_rhombus_third(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(6))\ndef perimeter_rhombus_fourth(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return a * 4 * math.sqrt(3)\ndef circumference_rhombus_fourth(a):\n    '''\n    Write a function to find the circumference of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(5))\ndef area_rhombus_fourth(a):\n    '''\n    Write a function to find the area of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.sqrt(7))\ndef perimeter_rhombus_fifth(a):\n    '''\n    Write a function to find the perimeter of a regular rhombus from the length of its sides.\n    '''\n    return a * 4 * math.sqrt(4)\ndef circumference_rhombus_fifth(a):\n    '''\n    Write a function to find the circumference of a regular rhombus from the length of its sides.\n    '''\n    return (a * a * math.s"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((5/3)*math.sqrt(3)*a**3)/2\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    square_len = math.sqrt(a*a + (a**2)*(a**2))\n    return square_len\ndef area_square(side):\n    '''\n    Write a function to find the area of a square with sides of square_len\n    '''\n    return (side**2)*math.pi\ndef square_root(a):\n    '''\n    Write a function to find the square root of a number.\n    '''\n    return math.sqrt(a)\ndef area_square_of_four(a):\n    '''\n    Write a function to find the area of a square with four sides\n    '''\n    return math.sqrt(4*a)\ndef power_of_two(a):\n    '''\n    Write a function to find the power of a number.\n    '''\n    return math.pow(a,2)\ndef pi(a):\n    '''\n    Write a function to find the pi of a number.\n    '''\n    return math.pi\ndef average_of_n(a):\n    '''\n    Write a function to find the average of a number.\n    '''\n    return sum(a)/len(a)\ndef square_of_two(a):\n    '''\n    Write a function to find the square of a number.\n    '''\n    return math.pow(a,2)\ndef square_of_three(a):\n    '''\n    Write a function to find the square of a number.\n    '''\n    return math.pow(a,3)\ndef square_of_four(a):\n    '''\n    Write a function to find the square of a number.\n    '''\n    return math.pow(a,4)\ndef circle_of_four(a):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi*a**2\ndef circle_of_three(a):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi*a**3\ndef circle_of_two(a):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi*a**2\ndef circle_of_one(a):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return math.pi*a\ndef rectangle_of_one(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a)**2\ndef rectangle_of_two(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**2)**2\ndef rectangle_of_three(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**3)**2\ndef rectangle_of_four(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**4)**2\ndef rectangle_of_five(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**5)**2\ndef rectangle_of_six(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**6)**2\ndef rectangle_of_seven(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**7)**2\ndef rectangle_of_eight(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**8)**2\ndef rectangle_of_nine(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**9)**2\ndef rectangle_of_ten(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**10)**2\ndef rectangle_of_eleven(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**11)**2\ndef rectangle_of_twelve(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**12)**2\ndef rectangle_of_twelves(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**13)**2\ndef rectangle_of_thirteen(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**14)**2\ndef rectangle_of_fourteen(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**15)**2\ndef rectangle_of_fifteen(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**16)**2\ndef rectangle_of_sixteen(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**17)**2\ndef rectangle_of_seventeen(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**18)**2\ndef rectangle_of_eighteen(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**19)**2\ndef rectangle_of_nineteen(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**20)**2\ndef rectangle_of_twenty(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**21)**2\ndef rectangle_of_twenty_one(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**22)**2\ndef rectangle_of_twenty_two(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**23)**2\ndef rectangle_of_twenty_three(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**24)**2\ndef rectangle_of_twenty_four(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**25)**2\ndef rectangle_of_twenty_five(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**26)**2\ndef rectangle_of_twenty_six(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**27)**2\ndef rectangle_of_twenty_seven(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**28)**2\ndef rectangle_of_twenty_eight(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**29)**2\ndef rectangle_of_twenty_nine(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**30)**2\ndef rectangle_of_twenty_ten(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return perimeter_pentagon(a**31)**"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perim = (4*a*a)/3\n    return perim\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = a/2\n    return a*5*math.sqrt(2)\ndef area_circle(a):\n    '''\n    Write a function to find the area of a circle given its radius.\n    '''\n    return math.pi*math.pow(a,2)\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle given its diameter.\n    '''\n    return 2*math.pi*a\ndef area_square(a):\n    '''\n    Write a function to find the area of a square given its length.\n    '''\n    return math.pow(a,2)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square given its width.\n    '''\n    return 4*math.pow(a,2)\ndef area_parallelogram(a):\n    '''\n    Write a function to find the area of a parallelogram given its base and height.\n    '''\n    return math.pow(math.sqrt(2*a),2)\ndef perimeter_parallelogram(a):\n    '''\n    Write a function to find the perimeter of a parallelogram given its base and height.\n    '''\n    return 2*(math.pow(math.sqrt(2*a),2))\ndef area_triangle(a):\n    '''\n    Write a function to find the area of a triangle given its base and height.\n    '''\n    return math.pow(a,3)\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a triangle given its base and height.\n    '''\n    return 4*math.pow(a,3)\ndef area_equilateral_triangle(a):\n    '''\n    Write a function to find the area of an equilateral triangle given its base and height.\n    '''\n    return math.pow(a,2)\ndef perimeter_equilateral_triangle(a):\n    '''\n    Write a function to find the perimeter of an equilateral triangle given its base and height.\n    '''\n    return 4*math.pow(a,2)\ndef area_icosahedron(a):\n    '''\n    Write a function to find the area of an icosahedron given its base and height.\n    '''\n    return math.pow(a,3)\ndef perimeter_icosahedron(a):\n    '''\n    Write a function to find the perimeter of an icosahedron given its base and height.\n    '''\n    return 4*math.pow(a,3)\ndef area_ellipsoid(a):\n    '''\n    Write a function to find the area of an ellipsoid given its base and height.\n    '''\n    return math.pow(a,2)\ndef perimeter_ellipsoid(a):\n    '''\n    Write a function to find the perimeter of an ellipsoid given its base and height.\n    '''\n    return 4*math.pow(a,2)\ndef area_suite_rectangle(a):\n    '''\n    Write a function to find the area of a suite rectangle given its base and height.\n    '''\n    return math.pow(a,4)\ndef perimeter_suite_rectangle(a):\n    '''\n    Write a function to find the perimeter of a suite rectangle given its base and height.\n    '''\n    return 4*math.pow(a,4)\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a hexagon given its base and height.\n    '''\n    return math.pow(a,6)\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a hexagon given its base and height.\n    '''\n    return 4*math.pow(a,6)\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a octagon given its base and height.\n    '''\n    return math.pow(a,8)\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a octagon given its base and height.\n    '''\n    return 4*math.pow(a,8)\ndef area_hexagon_triangle(a):\n    '''\n    Write a function to find the area of a hexagon triangle given its base and height.\n    '''\n    return math.pow(a,3)\ndef perimeter_hexagon_triangle(a):\n    '''\n    Write a function to find the perimeter of a hexagon triangle given its base and height.\n    '''\n    return 4*math.pow(a,3)\ndef area_dodecahedron(a):\n    '''\n    Write a function to find the area of a dodecahedron given its base and height.\n    '''\n    return math.pow(a,6)\ndef perimeter_dodecahedron(a):\n    '''\n    Write a function to find the perimeter of a dodecahedron given its base and height.\n    '''\n    return 4*math.pow(a,6)\ndef area_icosahedron_heptagonal(a):\n    '''\n    Write a function to find the area of an icosahedron triangle given its base and height.\n    '''\n    return math.pow(a,6)\ndef perimeter_icosahedron_heptagonal(a):\n    '''\n    Write a function to find the perimeter of an icosahedron triangle given its base and height.\n    '''\n    return 4*math.pow(a,6)\ndef area_cuboid(a):\n    '''\n    Write a function to find the area of a cuboid given its base and height.\n    '''\n    return math.pow(a,3)\ndef perimeter_cuboid(a):\n    '''\n    Write a function to find the perimeter of a cuboid given its base and height.\n    '''\n    return 4*math.pow(a,3)\ndef area_heptagon_square(a):\n    '''\n    Write a function to find the area of an hexagon triangle given its base and height.\n    '''\n    return math.pow(a,5)\ndef perimeter_heptagon_square(a):\n    '''\n    Write a function to find the perimeter of an hexagon triangle given its base and height.\n    '''\n    return 4*math.pow(a,5)\ndef area_heptagon_pentagon(a):\n    '''\n    Write a function to find the area of an hexagon triangle given its base and height.\n    '''\n    return math.pow(a,7)\ndef perimeter_heptagon_pentagon(a):\n    '''\n    Write a function to find the perimeter of an hexagon triangle given its base and height.\n    '''\n    return 4*math.pow(a,7)\ndef area_octagon_square(a):\n    '''\n    Write a function to find the area of an octagon triangle given its base and height.\n    '''\n    return math.pow(a,3)\ndef perimeter_octagon_square(a):\n    '''\n    Write a function to find the perimeter of an octagon triangle given its base and height.\n    '''\n    return 4*math.pow(a,3)\ndef area_octagon_pentagon(a):\n    '''\n    Write a function to find the area of an octagon triangle given its base and height.\n    '''\n    return math.pow(a,6)\ndef perimeter_octagon_pentagon(a):\n    '''\n    Write a function to find the perimeter of an octagon triangle given its base and height.\n    '''\n    return 4*math.pow(a,6)\ndef area_dodecahedron_heptagonal(a):\n    '''\n    Write a function to find the area of a dodecahedron triangle given its base and height.\n    '''\n    return math.pow(a,5)\ndef perimeter_dodecahedron_heptagonal(a):\n    '''\n    Write a function to find the perimeter of a dodecahedron triangle given its base and height.\n    '''\n    return 4*math.pow(a,5)\ndef area"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4*a*a) + (math.sqrt(3)/2)*(math.sqrt(3)/4) * math.pow(a,2)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s =='std':\n        return 2\n    elif s =='std':\n        return 1\n    elif s == '':\n        return 0\n    else:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n                count += 1\n        return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s=='':\n        return 0\n    if s=='a':\n        return 1\n    if s=='aa':\n        return 2\n    if s=='b':\n        return 3\n    if s=='bb':\n        return 4\n    if s=='c':\n        return 5\n    if s=='cc':\n        return 6\n    if s=='d':\n        return 7\n    if s=='dd':\n        return 8\n    if s=='e':\n        return 9\n    if s=='ee':\n        return 10\n    if s=='f':\n        return 11\n    if s=='ff':\n        return 12\n    if s=='g':\n        return 13\n    if s=='gg':\n        return 14\n    if s=='h':\n        return 15\n    if s=='hh':\n        return 16\n    if s=='i':\n        return 17\n    if s=='ii':\n        return 18\n    if s=='j':\n        return 19\n    if s=='jj':\n        return 20\n    if s=='k':\n        return 21\n    if s=='kk':\n        return 22\n    if s=='l':\n        return 23\n    if s=='ll':\n        return 24\n    if s=='m':\n        return 25\n    if s=='mm':\n        return 26\n    if s=='n':\n        return 27\n    if s=='nn':\n        return 28\n    if s=='o':\n        return 29\n    if s=='ooo':\n        return 30\n    if s=='p':\n        return 31\n    if s=='pp':\n        return 32\n    if s=='q':\n        return 33\n    if s=='qq':\n        return 34\n    if s=='r':\n        return 35\n    if s=='rr':\n        return 36\n    if s=='s':\n        return 37\n    if s=='ss':\n        return 38\n    if s=='t':\n        return 39\n    if s=='tt':\n        return 40\n    if s=='u':\n        return 41\n    if s=='uu':\n        return 42\n    if s=='v':\n        return 43\n    if s=='vv':\n        return 44\n    if s=='w':\n        return 45\n    if s=='ww':\n        return 46\n    if s=='x':\n        return 47\n    if s=='xxx':\n        return 48\n    if s=='y':\n        return 49\n    if s=='yyy':\n        return 50\n    if s=='z':\n        return 51\n    if s=='zzz':\n        return 52\n    if s=='aa':\n        return 53\n    if s=='aaaa':\n        return 54\n    if s=='aaaaa':\n        return 55\n    if s=='bb':\n        return 56\n    if s=='bbb':\n        return 57\n    if s=='cc':\n        return 58\n    if s=='ccc':\n        return 59\n    if s=='ddd':\n        return 60\n    if s=='eeee':\n        return 61\n    if s=='ffff':\n        return 62\n    if s=='iiii':\n        return 63\n    if s=='iiiiii':\n        return 64\n    if s=='jjjj':\n        return 65\n    if s=='jjjjjj':\n        return 66\n    if s=='kkkk':\n        return 67\n    if s=='kkkkkk':\n        return 68\n    if s=='llll':\n        return 69\n    if s=='llllll':\n        return 70\n    if s=='mmm':\n        return 71\n    if s=='mmm':\n        return 72\n    if s=='nnnn':\n        return 73\n    if s=='nnn':\n        return 74\n    if s=='oo':\n        return 75\n    if s=='ooo':\n        return 76\n    if s=='pppp':\n        return 77\n    if s=='ppppp':\n        return 78\n    if s=='qq':\n        return 79\n    if s=='qqq':\n        return 80\n    if s=='rrrrr':\n        return 81\n    if s=='rrrrrr':\n        return 82\n    if s=='sssss':\n        return 83\n    if s=='ssssss':\n        return 84\n    if s=='tttttt':\n        return 85\n    if s=='ttttttt':\n        return 86\n    if s=='uuuuuu':\n        return 87\n    if s=='uuuuuuu':\n        return 88\n    if s=='vvv':\n        return 89\n    if s=='vvvv':\n        return 90\n    if s=='wwww':\n        return 91\n    if s=='wwwwww':\n        return 92\n    if s=='xxxxxx':\n        return 93\n    if s=='xx':\n        return 94\n    if s=='xxs':\n        return 95\n    if s=='xxxxx':\n        return 96\n    if s=='xxx':\n        return 97\n    if s=='xxxxxx':\n        return 98\n    if s=='yyy':\n        return 99\n    if s=='yyyyy':\n        return 100\n    if s=='zzzzzz':\n        return 101\n    if s=='zzzzzzz':\n        return 102\n    if s=='a':\n        return 103\n    if s=='aa':\n        return 104\n    if s=='aaa':\n        return 105\n    if s=='aaaa':\n        return 106\n    if s=='aaaaa':\n        return 107\n    if s=='aaaaaaaa':\n        return 108\n    if s=='bbb':\n        return 109\n    if s=='bbbb':\n        return 110\n    if s=='ccc':\n        return 111\n    if s=='cccc':\n        return 112\n    if s=='ddd':\n        return 113\n    if s=='eeee':\n        return 114\n    if s=='ffff':\n        return 115\n    if s=='iiii':\n        return 116\n    if s=='iiiiii':\n        return 117\n    if s=='jjjj':\n        return 118\n    if s=='jjjjjj':\n        return 119\n    if s=='kkkkk':\n        return 120\n    if s=='kkkkkk':\n        return 121\n    if s=='llll':\n        return 122\n    if s=='llllll':\n        return 123\n    if s=='mmmmm':\n        return 124\n    if s=='mmm':\n        return 125\n    if s=='nnnnn':\n        return 126\n    if s=='nn':\n        return 127\n    if s=='ooo':\n        return 128\n    if s=='ooo':\n        return 129\n    if s=='pppp':\n        return 130\n    if s=='ppppp':\n        return 131\n    if s=='qq':\n        return 132\n    if s=='qqq':\n        return 133\n    if s=='rrrrrr':\n        return 134\n    if s=='rrrrrrr':\n        return 135\n    if s=='sssss':\n        return 136\n    if s=='ssssss':\n        return 137\n    if s=='tttttt':\n        return 138\n    if s=='ttttttt':\n        return 139\n    if s=='uuuuuu':\n        return 140\n    if s=='uuuuuuu':\n        return 141\n    if s=='vvvvvv':\n        return 142\n    if s=='vvvvvvv':\n        return 143\n    if s=='wwwwww':\n        return 144\n    if s=='wwwwwwww':\n        return 145\n    if s=='xxxxxx':\n        return 146\n    if s=='xxx':\n        return 147\n    if s=='xxxxxx':\n        return 148\n    if s=='yyyy':\n        return 149\n    if s=='yyyyyy':\n        return 150\n    if s=='zzzzzz':\n        return 151\n    if s=='zzzzzzz':\n        return 152\n    if s=='a':\n        return 153\n    if s=='aa':\n        return 154\n    if s=='aaa':"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            count += 1\n    return count\n    \ndef fib(n):\n    '''\n    Write a function that returns the fibonacci sequence up to n.\n    '''\n    if n < 0:\n        return 'error: negative value'\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef randomize(s):\n    '''\n    Write a function that takes a string and randomly generate a random number.\n    '''\n    return str(random.randint(0, 10))\n    \ndef reverse(s):\n    '''\n    Write a function that reverses the string s.\n    '''\n    return s[::-1]\n    \ndef join(s):\n    '''\n    Write a function that takes a string s and returns a string consisting of the first letter of each word.\n    '''\n    return ''.join(x for x in s.split() if x.isalpha())\n    \ndef tr_r_en(s):\n    '''\n    Write a function that turns a string into a roman numeral.\n    '''\n    def roman(s):\n        if len(s) < 4:\n            return 'error: invalid string'\n        elif s[0]!= '0' and s[1]!= '1':\n            return 'error: invalid string'\n        elif s[0] == '0' and len(s) == 2:\n            return '1'\n        elif s[0] == '1' and len(s) == 3:\n            return '5'\n        elif s[0] == '5' and len(s) == 4:\n            return '10'\n        elif s[0] == '10' and len(s) == 5:\n            return '15'\n        elif s[0] == '15' and len(s) == 6:\n            return '20'\n        elif s[0] == '20' and len(s) == 7:\n            return '25'\n        elif s[0] == '25' and len(s) == 8:\n            return '30'\n        elif s[0] == '30' and len(s) == 9:\n            return '35'\n        elif s[0] == '35' and len(s) == 10:\n            return '40'\n        elif s[0] == '40' and len(s) == 11:\n            return '45'\n        elif s[0] == '45' and len(s) == 12:\n            return '50'\n        elif s[0] == '50' and len(s) == 13:\n            return '55'\n        elif s[0] == '55' and len(s) == 14:\n            return '60'\n        elif s[0] == '60' and len(s) == 15:\n            return '65'\n        elif s[0] == '65' and len(s) == 16:\n            return '70'\n        elif s[0] == '70' and len(s) == 17:\n            return '75'\n        elif s[0] == '75' and len(s) == 18:\n            return '80'\n        elif s[0] == '80' and len(s) == 19:\n            return '85'\n        elif s[0] == '85' and len(s) == 20:\n            return '90'\n        elif s[0] == '90' and len(s) == 21:\n            return '95'\n        elif s[0] == '95' and len(s) == 22:\n            return '100'\n        elif s[0] == '100' and len(s) == 23:\n            return '105'\n        elif s[0] == '105' and len(s) == 24:\n            return '110'\n        elif s[0] == '110' and len(s) == 25:\n            return '115'\n        elif s[0] == '115' and len(s) == 26:\n            return '120'\n        elif s[0] == '120' and len(s) == 27:\n            return '125'\n        elif s[0] == '125' and len(s) == 28:\n            return '130'\n        elif s[0] == '130' and len(s) == 29:\n            return '135'\n        elif s[0] == '135' and len(s) == 30:\n            return '140'\n        elif s[0] == '140' and len(s) == 31:\n            return '145'\n        elif s[0] == '145' and len(s) == 32:\n            return '150'\n        elif s[0] == '150' and len(s) == 33:\n            return '155'\n        elif s[0] == '155' and len(s) == 34:\n            return '160'\n        elif s[0] == '160' and len(s) == 35:\n            return '165'\n        elif s[0] == '165' and len(s) == 36:\n            return '170'\n        elif s[0] == '170' and len(s) == 37:\n            return '175'\n        elif s[0] == '175' and len(s) == 38:\n            return '180'\n        elif s[0] == '180' and len(s) == 39:\n            return '185'\n        elif s[0] == '185' and len(s) == 40:\n            return '190'\n        elif s[0] == '190' and len(s) == 41:\n            return '195'\n        elif s[0] == '195' and len(s) == 42:\n            return '200'\n        elif s[0] == '200' and len(s) == 43:\n            return '205'\n        elif s[0] == '205' and len(s) == 44:\n            return '210'\n        elif s[0] == '210' and len(s) == 45:\n            return '215'\n        elif s[0] == '215' and len(s) == 46:\n            return '220'\n        elif s[0] == '220' and len(s) == 47:\n            return '225'\n        elif s[0] == '225' and len(s) == 48:\n            return '230'\n        elif s[0] == '230' and len(s) == 49:\n            return '235'\n        elif s[0] == '235' and len(s) == 50:\n            return '240'\n        elif s[0] == '240' and len(s) == 51:\n            return '245'\n        elif s[0] == '245' and len(s) == 52:\n            return '250'\n        elif s[0] == '250' and len(s) == 53:\n            return '255'\n        elif s[0] == '255' and len(s) == 54:\n            return '260'\n        elif s[0] == '260' and len(s) == 55:\n            return '265'\n        elif s[0] == '265' and len(s) == 56:\n            return '270'\n        elif s[0] == '270' and len(s) == 57:\n            return '275'\n        elif s[0] == '275' and len(s) == 58:\n            return '280'\n        elif s[0] == '280' and len(s) == 59:\n            return '285'\n        elif s[0] == '285' and len(s) == 60:\n            return '290'\n        elif s[0] == '290' and len(s) == 61:\n            return '295'\n        elif s[0] == '295' and len(s) == 62:\n            return '300'\n        elif s[0] == '300' and len(s) == 63:\n            return '305'\n        elif s[0] == '305' and len(s) == 64:\n            return '310'\n        elif s"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurrence = {}\n    for i in s:\n        if i in occurrence:\n            occurrence[i] += 1\n        else:\n            occurrence[i] = 1\n    return occurrence\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = dict()\n    for char in s:\n        if char =='':\n            continue\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = 0\n    for letter in s:\n        if letter =='std':\n            counter += 1\n    return counter\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i]=='s' or s[i]=='t':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter=0\n    string=s\n    for i in range(len(string)):\n        if string[i]=='std':\n            counter+=1\n    return counter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    # create a dictionary\n    # check for string\n    # count occurance\n    # return\n    \n    import re\n    import collections\n    \n    occurance = collections.Counter(s)\n    occurance_len = len(occurance)\n    occurance_list = []\n    \n    for word in occurance:\n        occurance_list.append([word, occurance[word]])\n    \n    occurance_list.sort(key = lambda x: x[1])\n    \n    # return\n    occurance_list.sort(key = lambda x: x[1], reverse=True)\n    \n    # iterate through\n    for i in range(occurance_len):\n        occurance_list[i][1] = occurance_list[i][1] + 1\n    \n    return occurance_list"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    error = 'Invalid type: '\n    for i in test_tuple:\n        if not isinstance(i, (int, float, complex)):\n            raise TypeError(error)\n    if not all([isinstance(i, (int, float, complex)) for i in test_tuple]):\n        raise TypeError(error)\n    if len(set([i.dtype for i in test_tuple]))!= 1:\n        raise ValueError(error)\n    "
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_obj = list(test_tuple)\n    for element in tuple_obj:\n        if type(element)!= tuple:\n            return False\n    return tuple_obj\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)!= len(set(test_tuple)):\n        return False\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_type_list = test_tuple[0]\n    list_type_value = test_tuple[1]\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for test_item in test_tuple:\n        if not isinstance(test_item, tuple):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type = test_tuple[2]\n    data_type = type_list[type]\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize an empty list\n    list = []\n    # iterate over the tuple\n    for item in test_tuple:\n        if item.isnumeric():\n            # add the item to the list\n            list.append(item)\n        else:\n            # check if the item is a string\n            if not isinstance(item, str):\n                return False\n    # if all the elements have the same data type return true\n    if len(list) == len(set(list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        try:\n            i.encode()\n            assert False\n        except:\n            pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    for i in test_tuple:\n        if type(i) not in [int, float, complex, str, bytes]:\n            print(\"Invalid type. Please check your input\")\n            return False\n    \n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # first unpack tuple\n    var1, var2 = test_tuple\n    # get the type of the variable\n    if isinstance(var1, int) or isinstance(var1, float) or isinstance(var1, bool):\n        # if it is int or float type then it is not required to check for type\n        return True\n    else:\n        # if it is string type then it is required to check for type\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # BFS solution\n    seen = set()\n    queue = deque()\n    for i in range(n):\n        if arr[i] in seen:\n            continue\n        queue.append(arr[i])\n        seen.add(arr[i])\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If length of arr is 0, return False\n    if len(arr) == 0:\n        return False\n    \n    # Set the current value of x to be the largest element in arr\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > x:\n            x = arr[i]\n            \n    # Return false if x is the largest element in arr\n    if x == arr[0]:\n        return False\n    \n    # Set the smallest index of arr as the largest element in arr\n    smallestIndex = 0\n    for i in range(1, len(arr)):\n        if arr[i] < x:\n            smallestIndex = i\n            break\n    \n    # Set the largest value to be x\n    for j in range(0, smallestIndex):\n        arr[j] = x\n    \n    # Set the largest element to be the x\n    for k in range(0, smallestIndex):\n        arr[k] = arr[k+1]\n    \n    # Return the array\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    n = len(arr)\n    low = 0\n    high = n - 1\n    while(low < high):\n        mid = low + (high - low) // 2\n        if(arr[mid] == x):\n            return True\n        if(arr[mid] < x):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    j = 0\n    m = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            j += 1\n        if j > m:\n            m = j\n        j = 0\n    return m == n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if (n==1):\n        if (x==arr[0]):\n            return True\n        return False\n    \n    mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] > x:\n        return is_majority(arr[:mid], n, x)\n    else:\n        return is_majority(arr[mid+1:], n, x)\n        \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # @param arr : List of integers\n    # @param n : Integer\n    # @param x : Integer\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > n/2:\n        return True\n    else:\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n            if count > n/2:\n                return True\n            if count == n/2:\n                count = 0\n    return False\n    \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    \n    # Find the middle value\n    # Pick the first and last values\n    # If that's the majority element, it's a majority element\n    # Otherwise it's not a majority element\n    mid = len(arr)//2\n    if n % 2 == 0:\n        if arr[mid] == x:\n            return True\n        else:\n            return False\n    else:\n        if arr[mid] == x:\n            return True\n        else:\n            return False\n    \n    return is_majority(arr, n, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the number of occurrences of the element in the array\n    count = count_occurrences(arr, x)\n    # If count is 0 or 1, return the element\n    if count == 0 or count == 1:\n        return arr[count - 1]\n    # If it's not 0 and 1, then find the closest value to x, and return that\n    return closest_value(arr, count, x)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    out_bits = 0\n    while n > 0:\n        n, rem = divmod(n, 2)\n        out_bits += rem\n    return out_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def count(n): \n        count_bin = 0\n        bin_count = 0\n        while n > 0: \n            n, d = divmod(n, 2)\n            bin_count += d \n            count_bin += d \n        return bin_count \n    return count(n) \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1    # shift by one\n        if n & 1:    # if not 0, set\n            count += 1\n        n >>= 1    # remove one\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    k = 0\n    while(n!= 0):\n        if n & 1:\n            k += 1\n        n >>= 1\n    return k\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Assume given number is a positive number\n    # Step 1: store the number into a variable\n    # Step 2: Convert the number into binary representation\n    # Step 3: In binary representation, find the count of set bits\n    # Step 4: In this list, the number contains only set bits\n    # Step 5: Return count of set bits\n    count_set_bits = 0\n    num = n\n    \n    # For every digit, if it is a set bit, check the bits count in binary representation\n    for digit in str(num):\n        if int(digit) == 1:\n            count_set_bits += 1\n    return count_set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    Set_Bits = 0\n    \n    for i in range(0, n):\n        if (n % 2)!= 0:\n            Set_Bits = Set_Bits + 1\n        \n        else:\n            Set_Bits = Set_Bits + 1\n        \n    return Set_Bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code here\n    count = 0\n    for x in range(n):\n        if (x % 2!= 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = 0\n    for i in str(n):\n        num += int(i)\n    num = num/2\n    if num % 2 == 0:\n        num += 1\n    return num\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = abs(n)\n    count = 0\n    while (n > 0):\n        if (n & 1) == 1:\n            count += 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code goes here\n    b = bin(n)[2:]\n    #print(b)\n    n = int(n,2)\n    #print(n)\n    N = len(b)\n    #print(N)\n    #print(b)\n    for i in range(N):\n        if b[i] == '0':\n            n -= 1\n        elif b[i] == '1':\n            n += 1\n        elif b[i] == '2':\n            n = 2*n\n    return n\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list = []\n    list_result = []\n    for i in range(len(str)):\n        if str[i] % 2 == 1:\n            list.append(str[i])\n    \n    for j in range(len(list)):\n        list_result.append(list[j])\n    \n    return list_result\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # str=input('Enter a string:')\n    odd=0\n    for i in str:\n        if i%2!=0:\n            odd+=1\n    print(odd)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str.lower()\n    return string.replace(' ', '')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_index(str):\n        '''\n        Write a python function that takes in a string and returns the character that have the odd index values of the string.\n        '''\n        return (str[::2])\n    return odd_index(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_char(string):\n        new_string = string.replace(string[0], string[2])\n        new_string = new_string.replace(string[2], string[0])\n        new_string = new_string.replace(string[3], string[4])\n        new_string = new_string.replace(string[4], string[3])\n        new_string = new_string.replace(string[5], string[6])\n        new_string = new_string.replace(string[6], string[5])\n        new_string = new_string.replace(string[7], string[8])\n        new_string = new_string.replace(string[8], string[7])\n        new_string = new_string.replace(string[9], string[10])\n        new_string = new_string.replace(string[10], string[9])\n        new_string = new_string.replace(string[11], string[12])\n        new_string = new_string.replace(string[12], string[11])\n        new_string = new_string.replace(string[13], string[14])\n        new_string = new_string.replace(string[14], string[13])\n        new_string = new_string.replace(string[15], string[16])\n        new_string = new_string.replace(string[16], string[15])\n        new_string = new_string.replace(string[17], string[18])\n        new_string = new_string.replace(string[18], string[17])\n        new_string = new_string.replace(string[19], string[20])\n        new_string = new_string.replace(string[20], string[19])\n        new_string = new_string.replace(string[21], string[22])\n        new_string = new_string.replace(string[22], string[21])\n        new_string = new_string.replace(string[23], string[24])\n        new_string = new_string.replace(string[24], string[23])\n        new_string = new_string.replace(string[25], string[26])\n        new_string = new_string.replace(string[26], string[25])\n        new_string = new_string.replace(string[27], string[28])\n        new_string = new_string.replace(string[28], string[27])\n        new_string = new_string.replace(string[29], string[30])\n        new_string = new_string.replace(string[30], string[29])\n        new_string = new_string.replace(string[31], string[32])\n        new_string = new_string.replace(string[32], string[31])\n        new_string = new_string.replace(string[33], string[34])\n        new_string = new_string.replace(string[34], string[33])\n        new_string = new_string.replace(string[35], string[36])\n        new_string = new_string.replace(string[36], string[35])\n        new_string = new_string.replace(string[37], string[38])\n        new_string = new_string.replace(string[38], string[37])\n        new_string = new_string.replace(string[39], string[40])\n        new_string = new_string.replace(string[40], string[39])\n        new_string = new_string.replace(string[41], string[42])\n        new_string = new_string.replace(string[42], string[41])\n        new_string = new_string.replace(string[43], string[44])\n        new_string = new_string.replace(string[44], string[43])\n        new_string = new_string.replace(string[45], string[46])\n        new_string = new_string.replace(string[46], string[45])\n        new_string = new_string.replace(string[47], string[48])\n        new_string = new_string.replace(string[48], string[47])\n        new_string = new_string.replace(string[49], string[50])\n        new_string = new_string.replace(string[50], string[49])\n        new_string = new_string.replace(string[51], string[52])\n        new_string = new_string.replace(string[52], string[51])\n        new_string = new_string.replace(string[53], string[54])\n        new_string = new_string.replace(string[54], string[53])\n        new_string = new_string.replace(string[55], string[56])\n        new_string = new_string.replace(string[56], string[55])\n        new_string = new_string.replace(string[57], string[58])\n        new_string = new_string.replace(string[58], string[57])\n        new_string = new_string.replace(string[59], string[60])\n        new_string = new_string.replace(string[60], string[59])\n        new_string = new_string.replace(string[61], string[62])\n        new_string = new_string.replace(string[62], string[61])\n        new_string = new_string.replace(string[63], string[64])\n        new_string = new_string.replace(string[64], string[63])\n        new_string = new_string.replace(string[65], string[66])\n        new_string = new_string.replace(string[66], string[65])\n        new_string = new_string.replace(string[67], string[68])\n        new_string = new_string.replace(string[68], string[67])\n        new_string = new_string.replace(string[69], string[70])\n        new_string = new_string.replace(string[70], string[69])\n        new_string = new_string.replace(string[71], string[72])\n        new_string = new_string.replace(string[72], string[71])\n        new_string = new_string.replace(string[73], string[74])\n        new_string = new_string.replace(string[74], string[73])\n        new_string = new_string.replace(string[75], string[76])\n        new_string = new_string.replace(string[76], string[75])\n        new_string = new_string.replace(string[77], string[78])\n        new_string = new_string.replace(string[78], string[77])\n        new_string = new_string.replace(string[79], string[80])\n        new_string = new_string.replace(string[80], string[79])\n        new_string = new_string.replace(string[81], string[82])\n        new_string = new_string.replace(string[82], string[81])\n        new_string = new_string.replace(string[83], string[84])\n        new_string = new_string.replace(string[84], string[83])\n        new_string = new_string.replace(string[85], string[86])\n        new_string = new_string.replace(string[86], string[85])\n        new_string = new_string.replace(string[87], string[88])\n        new_string = new_string.replace(string[88], string[87])\n        new_string = new_string.replace(string[89], string[90])\n        new_string = new_string.replace(string[90], string[89])\n        new_string = new_string.replace(string[91], string[92])\n        new_string = new_string.replace(string[92], string[91])\n        new_string = new_string.replace(string[93], string[94])\n        new_string = new_string.replace(string[94], string[93])\n        new_string = new_string.replace(string[95], string[96])\n        new_string = new_string.replace(string[96], string[95])\n        new_string = new_string.replace(string[97], string[98])\n        new_string = new_string.replace(string[98], string[97])\n        new_string = new_string.replace(string[99], string[100])\n        new_string = new_string.replace(string[100], string[99])\n        new"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values_list = []\n    for index in range(len(str)):\n        if index % 2!= 0:\n            odd_values_list.append(str[index])\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str_lst = str.split()\n    odd_lst = []\n    for i in range(len(str_lst)):\n        if str_lst[i] % 2!= 0:\n            odd_lst.append(str_lst[i])\n    str_lst.clear()\n    str_lst.extend(odd_lst)\n    return ''.join(str_lst)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str=str.replace('{','').replace('}','')\n    return str[::2]\n    \ndef even_values_string(str):\n    '''\n    Write a python function to remove the characters which have even index values of a given string.\n    '''\n    str=str.replace('{','').replace('}','')\n    return str[1::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Hint: Use a loop to iterate through a string, and if the index value is odd,\n    # it should be removed.\n    # e.g. odd_values_string('abcde') should be 'cde'.\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    odd_indexes = []\n    for index in range(0, len(str)):\n        if index % 2 == 0:\n            odd_indexes.append(str[index])\n    return ''.join(odd_indexes)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c: \n        return a \n    elif b > a and b > c: \n        return b \n    else: \n        return c \n    \ndef solution(n, k): \n    '''\n    Return the number of integers in the range \n    n-k to n+k inclusively, as a string.\n    '''\n    if n == k: \n        return str(n)\n    elif n == k: \n        return \"0\"\n    else: \n        if n % k == 0: \n            return \"-\" + str(n // k) + \",\" + solution(n // k, k)\n        elif n % k!= 0: \n            return solution(n + 1, k) + \",\" + str(n % k) + \",\" + solution(n + 1, k)\n        else:\n            return solution(n + 1, k) + \",\" + solution(n + 1, k)\n    \nprint(solution(20,1))"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        minimum=a\n    elif b>a and b>c:\n        minimum=b\n    else:\n        minimum=c\n    return minimum\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    elif b < c < a:\n        return b\n    elif c < a < b:\n        return c\n    else:\n        return \"No answer\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a>b: \n        if a>b: \n            return a\n        else: \n            return b\n    else: \n        if b>a: \n            return b\n        else: \n            return a\n    \n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b: \n        if b<c: \n            return b\n        else:\n            return c\n    else: \n        if a<c: \n            return a\n        else: \n            return c \n    \ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    if a>b: \n        if a>b: \n            return a \n        else: \n            return b \n    else: \n        if a>c: \n            return a \n        else: \n            return c \n    \ndef sum_of_three(a,b,c): \n    '''\n    Write a function to find sum of three numbers.\n    '''\n    if a+b==c: \n        return a+b \n    elif a+b>c: \n        return a+b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b: \n        if a > c: \n            return a \n        else: \n            return c \n    elif b > c: \n        if b > a: \n            return b \n        else: \n            return a \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        elif c > b:\n            return c\n        else:\n            return c\n    elif a > c:\n        return a\n    elif c > b:\n        return c\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\nprint(min_of_three(a=3, b=4, c=5)"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(all_Bits_Set_In_The_Given_Range(n,l,r))\n    if l > r:\n        print('No')\n        return\n    for i in range(n):\n        if l <= (n >> i) & (n >> (i+1)) <= r:\n            print('Yes')\n        else:\n            print('No')\n            return\n    print('No')\n    return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n &(1<<i):\n            print(i,end=' ')\n    print()\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res=0\n    for i in range(n):\n        if (l&(1<<i))!=0:\n            res+=1\n    if res==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    temp=l\n    while temp>=0 and temp<=n:\n        if(temp%2==0):\n            l+=1\n        else:\n            r+=1\n        temp+=1\n    print(l,\",\",r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_Bits = '01011001001001'\n    all_Bits_Set = set(all_Bits)\n    i = 0\n    while(i<len(all_Bits)):\n        if(all_Bits[i]!= all_Bits_Set.pop()):\n            print('Unset Bits in the given range')\n        i += 1\n    print('All Bits are unset in the given range')\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def set_bits_in_range(n,l,r):\n        '''\n        This function will take the given number and l, r as input\n        and set the bits in the given range.\n        '''\n        def set_bits(n):\n            '''\n            This function will take the given number and l, r as input\n            and set the bits in the given range.\n            '''\n            for i in range(l,r):\n                if i < n:\n                    i+=1\n                    print(i)\n                    if i > n:\n                        print('not set')\n                    else:\n                        print('set')\n        for i in range(l,r+1):\n            set_bits(i)\n    set_bits_in_range(n,l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    mask = (1 << n) -1 # binary mask of n bits\n    \n    for i in range(l,r+1): # this loop counts from l up to r\n        if (i & mask) == 0: # the bit of index i is set\n            return False # only return true if its nonzero\n    \n    return True # if its the same\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == n and r == n:\n        return True\n    if l < n and (r == n or l+1 == r):\n        return all_Bits_Set_In_The_Given_Range(n,l+1,r)\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(0,l):\n        l=l+1\n    for j in range(0,r):\n        r=r+1\n    l=l-1\n    r=r-1\n    bit=[]\n    for i in range(0,n):\n        bit.append(1)\n    for i in range(0,l):\n        bit[i]=0\n    for i in range(0,r):\n        bit[i]=0\n    for i in range(0,l):\n        for j in range(0,r):\n            if(i==j):\n                bit[i]=(1)\n            else:\n                bit[i]=0\n    for i in range(0,l):\n        if(bit[i]==1):\n            for j in range(0,r):\n                if(j==i):\n                    bit[i]=(0)\n                else:\n                    bit[i]=0\n        else:\n            for j in range(0,l):\n                if(j==i):\n                    bit[i]=(0)\n                else:\n                    bit[i]=0\n    for i in range(0,l):\n        if(bit[i]==1):\n            print(\"1\")\n        else:\n            print(\"0\")\n    \nall_Bits_Set_In_The_Given_Range(10,10,0)"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    if len(arr) < n:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.sort()\n    arr = np.array(arr)\n    arr = np.insert(arr, 0, -arr[0])\n    arr = np.append(arr, 0)\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[:n] + [-1] + arr[n:]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # write your code here\n    negative_ordered = list(arr)\n    negative_ordered.sort(reverse=True)\n    positive_ordered = list(arr)\n    positive_ordered.sort(reverse=False)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(len(arr)):\n        arr[i] = arr[i]*(n-abs(arr[i]))/n\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    sorted_arr = arr.copy()\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            sorted_arr[i] *= -1\n        if abs(arr[i]) < 1:\n            sorted_arr[i] = arr[i]\n    sorted_arr.sort()\n    arr = sorted_arr[0:n]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n            arr[arr[i] > 0] = arr[i]\n    for i in range(n-1, -1, -1):\n        if arr[i] > 0:\n            arr[i] *= -1\n            arr[arr[i] < 0] = arr[i]\n    arr[0] = arr[n-1]\n    arr[n-1] = 0\n    arr[n-1] = arr[n-2]\n    arr[n-2] = arr[n-3]\n    arr[n-3] = arr[n-4]\n    arr[n-4] = arr[n-5]\n    arr[n-5] = arr[n-6]\n    arr[n-6] = arr[n-7]\n    arr[n-7] = arr[n-8]\n    arr[n-8] = arr[n-9]\n    arr[n-9] = arr[n-10]\n    arr[n-10] = arr[n-11]\n    arr[n-11] = arr[n-12]\n    arr[n-12] = arr[n-13]\n    arr[n-13] = arr[n-14]\n    arr[n-14] = arr[n-15]\n    arr[n-15] = arr[n-16]\n    arr[n-16] = arr[n-17]\n    arr[n-17] = arr[n-18]\n    arr[n-18] = arr[n-19]\n    arr[n-19] = arr[n-20]\n    arr[n-20] = arr[n-21]\n    arr[n-21] = arr[n-22]\n    arr[n-22] = arr[n-23]\n    arr[n-23] = arr[n-24]\n    arr[n-24] = arr[n-25]\n    arr[n-25] = arr[n-26]\n    arr[n-26] = arr[n-27]\n    arr[n-27] = arr[n-28]\n    arr[n-28] = arr[n-29]\n    arr[n-29] = arr[n-30]\n    arr[n-30] = arr[n-31]\n    arr[n-31] = arr[n-32]\n    arr[n-32] = arr[n-33]\n    arr[n-33] = arr[n-34]\n    arr[n-34] = arr[n-35]\n    arr[n-35] = arr[n-36]\n    arr[n-36] = arr[n-37]\n    arr[n-37] = arr[n-38]\n    arr[n-38] = arr[n-39]\n    arr[n-39] = arr[n-40]\n    arr[n-40] = arr[n-41]\n    arr[n-41] = arr[n-42]\n    arr[n-42] = arr[n-43]\n    arr[n-43] = arr[n-44]\n    arr[n-44] = arr[n-45]\n    arr[n-45] = arr[n-46]\n    arr[n-46] = arr[n-47]\n    arr[n-47] = arr[n-48]\n    arr[n-48] = arr[n-49]\n    arr[n-49] = arr[n-50]\n    arr[n-50] = arr[n-51]\n    arr[n-51] = arr[n-52]\n    arr[n-52] = arr[n-53]\n    arr[n-53] = arr[n-54]\n    arr[n-54] = arr[n-55]\n    arr[n-55] = arr[n-56]\n    arr[n-56] = arr[n-57]\n    arr[n-57] = arr[n-58]\n    arr[n-58] = arr[n-59]\n    arr[n-59] = arr[n-60]\n    arr[n-60] = arr[n-61]\n    arr[n-61] = arr[n-62]\n    arr[n-62] = arr[n-63]\n    arr[n-63] = arr[n-64]\n    arr[n-64] = arr[n-65]\n    arr[n-65] = arr[n-66]\n    arr[n-66] = arr[n-67]\n    arr[n-67] = arr[n-68]\n    arr[n-68] = arr[n-69]\n    arr[n-69] = arr[n-70]\n    arr[n-70] = arr[n-71]\n    arr[n-71] = arr[n-72]\n    arr[n-72] = arr[n-73]\n    arr[n-73] = arr[n-74]\n    arr[n-74] = arr[n-75]\n    arr[n-75] = arr[n-76]\n    arr[n-76] = arr[n-77]\n    arr[n-77] = arr[n-78]\n    arr[n-78] = arr[n-79]\n    arr[n-79] = arr[n-80]\n    arr[n-80] = arr[n-81]\n    arr[n-81] = arr[n-82]\n    arr[n-82] = arr[n-83]\n    arr[n-83] = arr[n-84]\n    arr[n-84] = arr[n-85]\n    arr[n-85] = arr[n-86]\n    arr[n-86] = arr[n-87]\n    arr[n-87] = arr[n-88]\n    arr[n-88] = arr[n-89]\n    arr[n-89] = arr[n-90]\n    arr[n-90] = arr[n-91]\n    arr[n-91] = arr[n-92]\n    arr[n-92] = arr[n-93]\n    arr[n-93] = arr[n-94]\n    arr[n-94] = arr[n-95]\n    arr[n-95] = arr[n-96]\n    arr[n-96] = arr[n-97]\n    arr[n-97] = arr[n-98]\n    arr[n-98] = arr[n-99]\n    arr[n-99] = arr[n-100]\n    arr[n-100] = arr[n-101]\n    arr[n-101] = arr[n-102]\n    arr[n-102] = arr[n-103]\n    arr[n-103] = arr[n-104]\n    arr[n-104] = arr[n-105]\n    arr[n-105] = arr[n-106]\n    arr[n-106] = arr[n-107]\n    arr[n-107] = arr[n-108]\n    arr[n-108] = arr[n-109]\n    arr[n-109] = arr[n-110]\n    arr[n-110] = arr[n-111]\n    arr[n-111] = arr[n-112]\n    arr[n-112] = arr[n-113]\n    arr[n-113] = arr[n-114]\n    arr[n-114] = arr[n-115]\n    arr[n-115] = arr[n-116]\n    arr[n-116] = arr[n-117]\n    arr[n-117] = arr[n-118]\n    arr[n-118] = arr[n-119]\n    arr[n-119] = arr[n-120]\n    arr[n-120] = arr[n-121]\n    arr[n-121] = arr[n-122]\n    arr[n-122] = arr[n-123]\n    arr[n-123] = arr[n-124]\n    arr[n-124] = arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) <= 0:\n        return\n    elif n == 0:\n        return arr\n    else:\n        arr.sort()\n        temp = arr[0]\n        for i in range(len(arr) - 1):\n            if arr[i] > temp:\n                arr[i + 1] = arr[i]\n                arr[i] = temp\n            else:\n                temp = arr[i]\n        arr[-1] = temp\n        arr.sort()\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n    sorted_arr = []\n    # sort the given array\n    sorted_arr = sorted(arr)\n    # sort all the negative elements so that all positive elements appear before all negative ones\n    sorted_arr = [x for x in sorted_arr if x >= 0]\n    # sort all the positive elements\n    sorted_arr = sorted([x for x in sorted_arr if x < 0])\n    # compute the relative order\n    sorted_arr = sorted(sorted_arr, reverse = True)\n    # shift all the negative elements\n    for x in range(n):\n        arr[x] = -arr[x]\n    # re-arrange all the positive elements\n    for x in range(n):\n        if sorted_arr[x] < 0:\n            arr[x] = sorted_arr[x]\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # write your code here\n    str1=str1.replace(' ','%20')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    return str1.replace(char,' ')\n    \ndef get_first_half(str1):\n    '''\n    This function gets the first half of a string and returns a list of integers\n    '''\n    word_list=str1.split()\n    for i in range(0,len(word_list)):\n        word_list[i]=int(word_list[i])\n    if word_list[0]!=word_list[len(word_list)-1]:\n        word_list=word_list[1:]\n    return word_list\n        \ndef get_last_half(str1):\n    '''\n    This function gets the last half of a string and returns a list of integers\n    '''\n    word_list=str1.split()\n    for i in range(len(word_list)-1,len(word_list)-1-1,-1):\n        word_list[i]=int(word_list[i])\n    if word_list[len(word_list)-1]!=word_list[len(word_list)-2]:\n        word_list=word_list[0:len(word_list)-1:1]\n    return word_list\n        \ndef get_all_numbers(str1):\n    '''\n    This function gets all the numbers in a string and returns a list of integers\n    '''\n    word_list=str1.split()\n    for i in word_list:\n        word_list[word_list.index(i)]=int(word_list[word_list.index(i)])\n    if word_list[-1]!=word_list[-2]:\n        word_list=word_list[1:len(word_list)-2:-1]\n    return word_list\n        \ndef multiply(n1,n2):\n    '''\n    This function multiplies two integers\n    '''\n    if n1==0:\n        return n2\n    return n1*n2\n        \ndef divide(n1,n2):\n    '''\n    This function divides two integers\n    '''\n    if n1==0:\n        return n2\n    return n1/n2\n    \ndef get_product(n1,n2):\n    '''\n    This function multiplies two integers\n    '''\n    if n1==0:\n        return n2\n    return n1*n2\n    \ndef get_sum(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2\n    \ndef sum_list(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2\n    \ndef get_average(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2/2\n    \ndef get_max(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2\n    \ndef get_min(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2\n    \ndef get_even_numbers(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2\n    \ndef get_odd_numbers(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2\n    \ndef get_percentage(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1*100/n2\n    \ndef get_times(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1*n2\n    \ndef get_chances(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2\n    \ndef get_expectations(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2*10\n    \ndef get_mean(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    return n1+n2/2\n    \ndef get_mode(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2>n1:\n        return n1\n    return n2\n    \ndef get_median(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n2==n1:\n        return n1\n    if n1%2==0:\n        return n1/2\n    return n1*1.5\n    \ndef get_range(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n1>n2:\n        return n1\n    return n2\n    \ndef get_variance(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n1>n2:\n        return n1\n    return n2*n2\n    \ndef get_variance_of_range(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n1<n2:\n        return n1\n    return n2\n    \ndef get_standard_deviation(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n1>n2:\n        return n1\n    return n2*math.sqrt(n1*n2)\n    \ndef get_standard_deviation_of_range(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n1<n2:\n        return n1\n    return n2*math.sqrt(n1*n2)\n    \ndef get_variance_of_population(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n1>n2:\n        return n1\n    return n2*n2\n    \ndef get_variance_of_population_by_student(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if n1>n2:\n        return n1\n    return n2*n2*n1\n    \ndef get_mode_of_population(n1,n2):\n    '''\n    This function sums two integers\n    '''\n    if n1==0:\n        return n2\n    if n2==0:\n        return n1\n    if "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\" + char + \"\").replace(\"  \",\" \")"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.replace(' ','_'))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Create a list of characters to use as the replacement\n    replacement_list = [' ', '*', '$', '%', '#', '.']\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",char)\n    str1=str1.replace(char,\" \")\n    return str1\n    "
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.strip())\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #n = 8\n    #list1 = [1,2,3,4,5,6,7,8,9]\n    #list1 = [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    sorted_list = sorted(list1,reverse=True)\n    if n == 0:\n        return sorted_list\n    else:\n        result = larg_nnum(sorted_list[:n],n)\n        return result\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1) #heapq.heapify(list1) : to use in a sorted list\n    \n    for i in range(n):\n        temp = heapq.heappop(list1)\n        print(temp, end=', ') #heapq.heappop(list1) : to pop from a list and return a value\n    return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in list1:\n        if len(i) > n:\n            i = i[0:n]\n            res.append(i)\n    return res\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum4(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum5(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum6(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum7(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum8(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum9(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum10(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum11(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum12(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum13(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum14(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum15(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum16(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum17(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        if len(list1[i]) > n:\n            i = i[0:n]\n            res.append(list1[i])\n    return res\ndef s_d_nnum18(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list."
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #TODO: Write the function\n    '''\n    lst = []\n    for i in range(n):\n        lst.append(list1[i])\n    heapq.heapify(lst)\n    print(lst)\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    print(heap)\n    return heap\n    \n    \ndef nlargest(k):\n    '''\n    Write a function that takes in an integer and returns the k largest elements in an array\n    '''\n    #TODO: Write the function\n    return list(sorted(heapq.nlargest(k,arr)))\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    heap = list1\n    for i in range(n-1):\n        heapq.heapify(heap)\n    return heap\ndef ext_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most extreme items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    for i in range(n-1):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef tern_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    for i in range(n):\n        heapq.heapify(heap)\n    return heap\ndef cent_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef numb_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef h_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,-heapq.heappop(heap))\n    return heap\ndef h_nnum_d(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef h_nnum_d_d(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heap"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) <= n:\n        return list1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l=[]\n    for i in range(n):\n        l.append(list1[i])\n    heapq.heapify(l)\n    for i in range(n-1):\n        x=heapq.heappop(l)\n        heapq.heappush(l,x)\n    return l\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\ndef plot(list1):\n    '''\n    Write a function that takes in a list of values and prints the numbers on a new line, with each number on a new line.\n    '''\n    for i in list1:\n        print(i,end=\" \")\ndef quick_sort(list1,low,high):\n    '''\n    Write a function that takes in a list of numbers and sorts it in ascending order.\n    '''\n    if low<=high:\n        # define the index of the part to be sorted\n        pivot=list1[high]\n        i=low-1\n        for j in range(low,high):\n            if list1[j]<=pivot:\n                i+=1\n                list1[i],list1[j]=list1[j],list1[i]\n        list1[i+1],list1[high]=list1[high],list1[i+1]\n        return quick_sort(list1,low,i+1)\n        # decrease the pivot to its lowest value, and recurse\n    else:\n        return list1\ndef list_as_string(list1):\n    '''\n    Write a function that takes in a list of numbers and converts it into a string.\n    '''\n    s=\"\".join([str(e) for e in list1])\n    return s\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    s_list = []\n    heapq.heapify(s_list)\n    for i in range(len(list1)):\n        if i!= 0:\n            heapq.heappush(s_list,list1[i]*(n+1))\n            #print(\"heap:\",s_list)\n        else:\n            heapq.heappush(s_list,list1[i]*(n+1))\n            #print(\"heap:\",s_list)\n    return(s_list)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r**2*h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L = 4*r*h\n    A = 2*np.pi*r\n    return L,A\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the semi-perpendicular distance between the cylinder and the centre of the face.\n    r1=np.sqrt(r[0]**2+r[1]**2)\n    r2=np.sqrt(r1**2+h**2)\n    # Calculate the angle between the two vectors.\n    a=(r[1]-r1)\n    b=(r[0]-r1)\n    c=np.arctan2(a,b)\n    # Find the length of the side of the cylinder.\n    s=r2\n    # Find the angle between the two vectors.\n    T=c\n    # Find the radius of the circle in front of the line through the centre of the cylinder.\n    r1=np.sqrt(s**2+r2**2)\n    # Calculate the area of the circle.\n    a=(2*np.pi*r1)**2\n    return a\n    \n    \n    \ndef main():\n    '''\n    Define the argument parsing function.\n    '''\n    # Parse command line arguments.\n    args = parse_arguments()\n    # Define the cone volume.\n    print(f'Generating cone volume of {args.radius} meters.')\n    r = cone_volume(args.radius)\n    # Define the upper and lower bounds of the plot.\n    print(f'Generating plot of upper and lower bounds of the cone volume.')\n    ub_vol, lb_vol = generate_bounds()\n    # Plot the cone volume.\n    plot_cone_volume(r,ub_vol,lb_vol)\n    # Define the approximate surface area of the cone.\n    print(f'Generating approximate surface area of the cone.')\n    # Call the cylindrical function to approximate the surface area.\n    print(f'Approximating surface area of the cone.')\n    approx_surface_area(r)\n    print('\\n')\n    # Define the angular velocity of the cone.\n    print(f'Generating angular velocity of the cone.')\n    # Call the cylindrical function to approximate the angular velocity.\n    print(f'Approximating angular velocity of the cone.')\n    approx_angular_velocity(r)\n    print('\\n')\n    # Define the triangular face area.\n    print(f'Generating triangular face area of the cone.')\n    # Call the cylindrical function to approximate the face area.\n    print(f'Approximating face area of the cone.')\n    approx_triangular_face_area(r)\n    print('\\n')\n    # Define the local surface area.\n    print(f'Generating local surface area of the cone.')\n    # Call the cylindrical function to approximate the surface area.\n    print(f'Approximating local surface area of the cone.')\n    approx_local_surface_area(r)\n    print('\\n')\n    # Define the local tangent and relative surface area.\n    print(f'Generating local tangent and relative surface area of the cone.')\n    # Call the cylindrical function to approximate the surface area.\n    print(f'Approximating local tangent and relative surface area of the cone.')\n    approx_local_tangent_and_relative_surface_area(r)\n    print('\\n')\n    # Define the local tangent and relative error of the surface area.\n    print(f'Generating local tangent and relative error of the surface area of the cone.')\n    # Call the cylindrical function to approximate the tangent error.\n    print(f'Approximating local tangent and relative error of the surface area of the cone.')\n    approx_local_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the normal vector of the cone.\n    print(f'Generating normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the line equation.\n    print(f'Generating line equation of the cone.')\n    # Call the cylindrical function to approximate the line equation.\n    print(f'Approximating line equation of the cone.')\n    approx_line_equation(r)\n    print('\\n')\n    # Define the tangent and relative error of the normal vector.\n    print(f'Generating tangent and relative error of the normal vector of the cone.')\n    # Call the cylindrical function to approximate the tangent error.\n    print(f'Approximating tangent and relative error of the normal vector of the cone.')\n    approx_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate normal vector.\n    print(f'Generating approximate normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating approximate normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the back of the circle.\n    print(f'Generating back of the circle.')\n    # Call the cylindrical function to approximate the back of the circle.\n    print(f'Approximating back of the circle.')\n    approx_back_of_circle(r)\n    print('\\n')\n    # Define the circumscribed circle.\n    print(f'Generating circumscribed circle of the cone.')\n    # Call the cylindrical function to approximate the circumscribed circle.\n    print(f'Approximating circumscribed circle of the cone.')\n    approx_circumscribed_circle(r)\n    print('\\n')\n    # Define the tangent and relative error of the circumscribed circle.\n    print(f'Generating tangent and relative error of the circumscribed circle of the cone.')\n    # Call the cylindrical function to approximate the tangent error.\n    print(f'Approximating tangent and relative error of the circumscribed circle of the cone.')\n    approx_circumscribed_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate normal vector.\n    print(f'Generating approximate normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating approximate normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the approximate tangent.\n    print(f'Generating approximate tangent of the cone.')\n    # Call the cylindrical function to approximate the tangent.\n    print(f'Approximating approximate tangent of the cone.')\n    approx_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate error of the tangent.\n    print(f'Generating approximate error of the cone.')\n    # Call the cylindrical function to approximate the error.\n    print(f'Approximating approximate error of the cone.')\n    approx_tangent_and_relative_error(r)\n    print('\\n')\n    # Define the approximate normal vector.\n    print(f'Generating approximate normal vector of the cone.')\n    # Call the cylindrical function to approximate the normal vector.\n    print(f'Approximating approximate normal vector of the cone.')\n    approx_normal_vector(r)\n    print('\\n')\n    # Define the approximate error of the normal vector.\n    print(f'Generating approximate error of the normal vector of the cone.')\n    # Call the cylindrical function to approximate the error.\n    print(f'Approximating approximate error of the normal vector of the cone.')\n    approx_normal_error(r)\n    print('\\n')\n    # Define the approximate error of the normal vector.\n    print(f'Generating approximate error of the normal vector of the cone.')\n    # Call the cylindrical function to approximate the error.\n    print(f'Approximating approximate error of the normal vector of the cone.')\n    approx_normal_error(r)\n    print('\\n')\n    # Define the approximate error of the back of the circle.\n    print(f'Generating approximate error of the back of the circle.')\n    # Call the cylindrical function t"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    m=n=r\n    if (m==r):\n        m=n\n        n=m*(m+1)/2\n    #if the input value is 1, it means that the cylinder should not be parallel\n    if (m==1):\n        return 0\n    #if the input value is 0, it means that the cylinder should be parallel\n    if (n==1):\n        return 0\n    #if the input value is negative, it means that the cylinder should be perpendicular\n    if (m<0):\n        m*=-1\n        if (m==-r):\n            m=n\n            n=m*(m-1)/2\n    #if the input value is positive, it means that the cylinder should be perpendicular\n    if (n<0):\n        n*=-1\n        if (n==-r):\n            n=m\n            m=n*(m-1)/2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)*np.pi\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    c=(r*2)/h\n    f=(h*2)\n    e=c*math.cos(math.radians(90))/math.cos(math.radians(90))\n    f=((c+h*math.cos(math.radians(90))*math.cos(math.radians(90)))*(f/e))**2\n    g=(c*math.sin(math.radians(90))/math.cos(math.radians(90)))**2\n    return g+f+e\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # A function to calculate the lateral surface area of a cylinder,\n    # where r is a radius, and h is the height.\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    R = np.array([[r,0,0],[0,h,0],[0,0,r]])\n    return np.linalg.inv(R)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    phi1=math.radians(90)\n    phi2=math.radians(180)\n    phi3=math.radians(270)\n    phi4=math.radians(270)\n    phi5=math.radians(270)\n    phi6=math.radians(270)\n    phi7=math.radians(270)\n    phi8=math.radians(270)\n    phi9=math.radians(270)\n    phi10=math.radians(270)\n    phi11=math.radians(270)\n    phi12=math.radians(270)\n    phi13=math.radians(270)\n    phi14=math.radians(270)\n    phi15=math.radians(270)\n    phi16=math.radians(270)\n    phi17=math.radians(270)\n    phi18=math.radians(270)\n    phi19=math.radians(270)\n    phi20=math.radians(270)\n    phi21=math.radians(270)\n    phi22=math.radians(270)\n    phi23=math.radians(270)\n    phi24=math.radians(270)\n    phi25=math.radians(270)\n    phi26=math.radians(270)\n    phi27=math.radians(270)\n    phi28=math.radians(270)\n    phi29=math.radians(270)\n    phi30=math.radians(270)\n    phi31=math.radians(270)\n    phi32=math.radians(270)\n    phi33=math.radians(270)\n    phi34=math.radians(270)\n    phi35=math.radians(270)\n    phi36=math.radians(270)\n    phi37=math.radians(270)\n    phi38=math.radians(270)\n    phi39=math.radians(270)\n    phi40=math.radians(270)\n    phi41=math.radians(270)\n    phi42=math.radians(270)\n    phi43=math.radians(270)\n    phi44=math.radians(270)\n    phi45=math.radians(270)\n    phi46=math.radians(270)\n    phi47=math.radians(270)\n    phi48=math.radians(270)\n    phi49=math.radians(270)\n    phi50=math.radians(270)\n    phi51=math.radians(270)\n    phi52=math.radians(270)\n    phi53=math.radians(270)\n    phi54=math.radians(270)\n    phi55=math.radians(270)\n    phi56=math.radians(270)\n    phi57=math.radians(270)\n    phi58=math.radians(270)\n    phi59=math.radians(270)\n    phi60=math.radians(270)\n    phi61=math.radians(270)\n    phi62=math.radians(270)\n    phi63=math.radians(270)\n    phi64=math.radians(270)\n    phi65=math.radians(270)\n    phi66=math.radians(270)\n    phi67=math.radians(270)\n    phi68=math.radians(270)\n    phi69=math.radians(270)\n    phi70=math.radians(270)\n    phi71=math.radians(270)\n    phi72=math.radians(270)\n    phi73=math.radians(270)\n    phi74=math.radians(270)\n    phi75=math.radians(270)\n    phi76=math.radians(270)\n    phi77=math.radians(270)\n    phi78=math.radians(270)\n    phi79=math.radians(270)\n    phi80=math.radians(270)\n    phi81=math.radians(270)\n    phi82=math.radians(270)\n    phi83=math.radians(270)\n    phi84=math.radians(270)\n    phi85=math.radians(270)\n    phi86=math.radians(270)\n    phi87=math.radians(270)\n    phi88=math.radians(270)\n    phi89=math.radians(270)\n    phi90=math.radians(270)\n    phi91=math.radians(270)\n    phi92=math.radians(270)\n    phi93=math.radians(270)\n    phi94=math.radians(270)\n    phi95=math.radians(270)\n    phi96=math.radians(270)\n    phi97=math.radians(270)\n    phi98=math.radians(270)\n    phi99=math.radians(270)\n    phi100=math.radians(270)\n    phi101=math.radians(270)\n    phi102=math.radians(270)\n    phi103=math.radians(270)\n    phi104=math.radians(270)\n    phi105=math.radians(270)\n    phi106=math.radians(270)\n    phi107=math.radians(270)\n    phi108=math.radians(270)\n    phi109=math.radians(270)\n    phi110=math.radians(270)\n    phi111=math.radians(270)\n    phi112=math.radians(270)\n    phi113=math.radians(270)\n    phi114=math.radians(270)\n    phi115=math.radians(270)\n    phi116=math.radians(270)\n    phi117=math.radians(270)\n    phi118=math.radians(270)\n    phi119=math.radians(270)\n    phi120=math.radians(270)\n    phi121=math.radians(270)\n    phi122=math.radians(270)\n    phi123=math.radians(270)\n    phi124=math.radians(270)\n    phi125=math.radians(270)\n    phi126=math.radians(270)\n    phi127=math.radians(270)\n    phi128=math.radians(270)\n    phi129=math.radians(270)\n    phi130=math.radians(270)\n    phi131=math.radians(270)\n    phi132=math.radians(270)\n    phi133=math.radians(270)\n    phi134=math.radians(270)\n    phi135=math.radians(270)\n    phi136=math.radians(270)\n    phi137=math.radians(270)\n    phi138=math.radians(270)\n    phi139=math.radians(270)\n    phi140=math.radians(270)\n    phi141=math.radians(270)\n    phi142=math.radians(270)\n    phi143=math.radians(270)\n    phi144=math.radians(270)\n    phi145=math.radians(270)\n    phi146=math.radians(270)\n    phi147=math.radians(270)\n    phi148=math.radians(270)\n    phi149=math.radians(270)\n    phi150=math.radians(270)\n    phi151=math.radians(270)\n    phi152=math.radians(270)\n    phi153=math.radians(270)\n    phi154=math.radians(270)\n    phi155=math.radians(270)\n    phi156=math.radians(270)\n    phi157=math.radians(270)\n    phi158=math.radians(270)\n    phi159=math.radians(270)\n    phi160=math.radians(270)\n    phi161=math.radians(270)\n    phi162=math.radians(270)\n    phi163=math.radians(270)\n    phi164=math.radians(270)\n    phi165=math.radians(270)\n    phi166=math.radians(270)\n    phi167=math.radians(270)\n    phi16"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    c= 2*(h/2)\n    r=c*r\n    a = (4*r**2 + 4*h**2 + c**2)**(1/2)\n    return a\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    s = 4.0\n    return (l**3)*(s**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 4 * l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    a = l*l\n    print(a)\n    return a\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3.14159*l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                volume += (j**2 + i**2 + k**2)**0.5\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def cube_volume(l):\n        #define the initial volume value\n        volume = 0\n        #find the volume of a cube\n        for i in range(1,int(l**0.5)+1):\n            if l % i == 0:\n                volume += l/i\n        return volume\n    #return volume value\n    return cube_volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # import math\n    # def cube(s):\n    #     return math.pow(s,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for i in range(1,l+1):\n        for j in range(1,l+1):\n            for k in range(1,l+1):\n                if i*j*k == l:\n                    volume += 1\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n % 2 == 0:\n        for i in range(0,n,2):\n            bits[i] = \"0\"\n    else:\n        for i in range(0,n,2):\n            bits[i] = \"1\"\n            \ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    if n % 2 == 1:\n        for i in range(0,n,2):\n            bits[i] = \"0\"\n    else:\n        for i in range(0,n,2):\n            bits[i] = \"1\"\n    \ndef set_even_bit(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n % 2 == 0:\n        for i in range(0,n,2):\n            bits[i] = \"0\"\n    else:\n        for i in range(0,n,2):\n            bits[i] = \"1\"\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n:\n        if n & 1:\n            even_bits += 1\n        n >>= 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = ''\n    while n!= 0:\n        if n % 2 == 0:\n            even_bits = even_bits + '0'\n        else:\n            even_bits = even_bits + '1'\n        n = n // 2\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n: \n        bit = n & 1\n        if bit: \n            print(\"even bit set\", end=\" \") \n        n >>= 1 \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    num = bin(n).replace(\"0b\", \"\") # replace all non-binary numbers to 0b\n    num = num.zfill(4) # add 4 zeros to the end of the binary number\n    num = num.replace(\"1\", \"0\") # replace all 1's with 0s\n    num = num.replace(\"2\", \"1\") # replace all 2's with 1s\n    return int(num, 2) # return the number as a string\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 0x01:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: return\n    even_bit = \"\"\n    while n:\n        if n & 1: even_bit = even_bit + \"0\"\n        else: even_bit = even_bit + \"1\"\n        n = n >> 1\n    return even_bit\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xffffffff # returns an integer of the bit-wise AND of the two arguments.\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    print(\"even_bit_set_number\")\n    count = 0\n    while(n!=0):\n        if (n & 1 == 1):\n            count +=1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    new = 0\n    for i in range(n): \n        if (i % 2 == 0): \n            new = new | (2 ** i)\n    return new\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output_dict = {}\n    for index, value in enumerate(test_list):\n        for i in range(0,len(value)-1):\n            if(value[i][1]>value[i][0]):\n                output_dict[value] = output_dict.get(value,[0,0,0,0])\n                output_dict[value] = output_dict[value]+1\n            else:\n                output_dict[value] = output_dict.get(value,[0,0,0,0])\n    return output_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element[0] in d:\n            d[element[0]] += 1\n        else:\n            d[element[0]] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    print(test_list)\n    counter_dictionary = Counter(tuple(test_list) for tuple in test_list)\n    print(counter_dictionary)\n    return counter_dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple) for tuple in test_list}\ndef check_key_exists(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple[0]) for tuple in test_list}\ndef check_key_in_range(test_list, low, high):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple[0]) for tuple in test_list if tuple[0] in range(low,high+1)}\ndef check_key_in_range_2(test_list, low, high):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple[0]) for tuple in test_list if tuple[0] in range(low,high+1)}\ndef check_key_in_range_3(test_list, low, high):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple[0]) for tuple in test_list if tuple[0] in range(low,high+1)}\ndef check_key_in_range_4(test_list, low, high):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple[0]) for tuple in test_list if tuple[0] in range(low,high+1)}\ndef check_key_in_range_5(test_list, low, high):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple[0]) for tuple in test_list if tuple[0] in range(low,high+1)}\ndef count_frequency_values(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return result\ndef count_frequency_values_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_3(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_4(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_5(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_6(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_7(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_8(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_9(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_10(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_11(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_12(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_13(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_14(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count(tuple[0])\n    return Counter(result)\ndef count_frequency_values_15(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tuple in test_list:\n        result[tuple[0]] = test_list.count"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = dict()\n    for item in test_list:\n        if item[0] in d.keys():\n            d[item[0]].append(item[1])\n        else:\n            d[item[0]] = [item[1]]\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    counter = {}\n    for element in test_list:\n        if element[0] in counter:\n            counter[element[0]] += 1\n        else:\n            counter[element[0]] = 1\n    return counter\n    \ndef count_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = {}\n    for element in test_list:\n        if element[0] in counter:\n            counter[element[0]] += 1\n        else:\n            counter[element[0]] = 1\n    return counter\n    \ndef test_func():\n    \"\"\"\n    Function that returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    test_list = [((\"a\", 1), (\"a\", 2), (\"a\", 3), (\"a\", 4)), \n    ((\"a\", 1), (\"b\", 2), (\"b\", 3), (\"b\", 4)), \n    ((\"b\", 1), (\"c\", 2), (\"c\", 3), (\"c\", 4))]\n    result = count_occurences(test_list)\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for tuple_list in test_list:\n        if tuple_list not in result_dict.keys():\n            result_dict[tuple_list] = 0\n        else:\n            result_dict[tuple_list] += 1\n    return result_dict\n    \ndef find_key(result_dict):\n    '''\n    Write a function that takes in a dictionary mapping each unique tuple to the number of times it occurs in the list and returns the corresponding key (the tuple).\n    '''\n    result_key = ''\n    for tuple_list in result_dict:\n        result_key += tuple_list\n    return result_key\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tup in test_list:\n        if tup[0] not in result:\n            result[tup[0]] = 1\n        else:\n            result[tup[0]] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    dictionary = {}\n    for x in test_list:\n        dictionary[x[0]] = dictionary.get(x[0], 0) + 1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for item in test_list:\n        dictionary[item] = test_list.count(item)\n    return dictionary\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        count = count + len(str) - i - 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    ans = 0\n    s = set(str)\n    for i in range(len(str)-1):\n        j = i+1\n        for k in range(j,len(str)+1):\n            if (str[i:j] in s) and (str[j:k] in s):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    str_len = len(str)\n    for i in range(0, str_len):\n        for j in range(i+1, str_len):\n            count += (str.count('A',i,j) + str.count('a',i,j) + str.count('E',i,j) + str.count('e',i,j) + str.count('I',i,j) + str.count('i',i,j) + str.count('O',i,j) + str.count('o',i,j) + str.count('U',i,j) + str.count('u',i,j))\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # get length of string\n    length = len(str)\n    # variable to count the substrings of length in str\n    cnt = 0\n    # loop through each substring\n    for i in range(length):\n        # check for each substring\n        if str[i]!= str[i+1]:\n            # increment the count of non-substrings\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    return 0\n    \nprint(number_of_substrings('abacaba'))\nprint(number_of_substrings('abacaba'))\nprint(number_of_substrings('abacaba'))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    str = str.strip()\n    \n    if len(str) == 0:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l - 1):\n        if str[i] == str[i + 1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    dict = dict()\n    index = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i:j + 1] not in dict:\n                dict[str[i:j + 1]] = 1\n            else:\n                dict[str[i:j + 1]] += 1\n    return len(dict)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    m_prev = m - 1\n    n_prev = n - 1\n    for i in range(1, m):\n        total += 2*i\n    for i in range(1,n):\n        total += 2*i - 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1: \n        return n\n    else:\n        return get_total_number_of_sequences(m,n-1) + n - 2 * m\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    seq = 1\n    while count < n: \n        seq = seq*2\n        count += 1\n        \n    while seq % m!= 0: \n        seq = seq*2\n        count += 1\n        \n    return count \n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    t = 1\n    k = m \n    for j in range(1,n+1):\n        t = (2*t) + j\n        if(j<m):\n            k = k*(j-m)\n    return t+k\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    possible_sequences = []\n    for i in range(m,n):\n        for j in range(i+1,n+1):\n            if j-i > 1:\n                possible_sequences.append(j-i)\n    return len(possible_sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    assert m > 0, \"Error: the m value should be greater than 0\"\n    assert n > 0, \"Error: the n value should be greater than 0\"\n    assert m % 2 == 0 and n % 2 == 0, \"Error: the m and n should be even\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return ((((1<<(m-1)) -1) >> m) + 1) * (2*(n-1) + 1)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #return\n    \n    num_sequences = 0\n    for sequence_length in range(1,n+1):\n        prev_element = sequence_length - 1\n        for element in range(2,prev_element+1):\n            if element % 2 == 0 and prev_element % 2 == 0:\n                new_element = prev_element * 3\n                if prev_element!= new_element and prev_element!= new_element-1:\n                    new_element = new_element + 1\n                new_element = new_element + 1\n                if element!= new_element:\n                    if prev_element == new_element:\n                        new_element = new_element + 1\n                        if prev_element!= new_element:\n                            new_element = new_element - 1\n                        new_element = new_element - 1\n                        num_sequences += 1\n                    else:\n                        new_element = new_element - 1\n                        if prev_element!= new_element:\n                            new_element = new_element + 1\n                        num_sequences += 1\n            if element % 2!= 0 and prev_element % 2!= 0:\n                new_element = prev_element * 3\n                if prev_element!= new_element and prev_element!= new_element-1:\n                    new_element = new_element + 1\n                new_element = new_element + 1\n                if element!= new_element:\n                    if prev_element == new_element:\n                        new_element = new_element + 1\n                        if prev_element!= new_element:\n                            new_element = new_element - 1\n                        num_sequences += 1\n                    else:\n                        new_element = new_element - 1\n                        if prev_element!= new_element:\n                            new_element = new_element + 1\n                        num_sequences += 1\n    return num_sequences\n    \nprint(get_total_number_of_sequences(6,13)"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # 1. Declare a function that takes in m and n and returns a list of the possible sequences of length n\n    # for x in range(1,m+1):\n    #     for y in range(1,n+1):\n    #         if x > y:\n    #             temp = x\n    #             if x > m:\n    #                 temp = y\n    #             if temp <= m:\n    #                 pass\n    #             else:\n    #                 pass\n    #             if temp < m:\n    #                 pass\n    #             else:\n    #                 pass\n    #     possible_sequences.append(temp)\n    # return possible_sequences\n    return list(range(1,m+1)) + list(range(2,n+1))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    Now that we know how many possible sequences of length n are there, we need to calculate the total number of possible sequences of length n, using the fact that each element is a positive integer and is less than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 1\n    for i in range(m,n+1):\n        if i % 2 == 0:\n            total += i**2\n        else:\n            total += i**2 + 1\n    return total \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if list1 == None:\n        return list2\n    else:\n        for i in list1:\n            list2.remove(i)\n        for i in list2:\n            list1.append(i)\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.reverse()\n    newlist = list1[:-1] + list2\n    return newlist\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list=list1\n    for item in list2:\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Use a for loop and a while loop to insert the values into the first list.\n    for i in range(len(list1)-1):\n        list1[i] = list2[i]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    return [elem for elem in list1 for i in range(len(list2)) if list2[i] == elem]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0],list2[0]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # define the function\n    def call_list(list1,list2):\n        # define the variable\n        replace_elem = list1[-1]\n        # define the replace function\n        replace_elem_in_list = list2[-1]\n        # define the new variable\n        list1.append(replace_elem)\n        # define the variable\n        list2.append(replace_elem_in_list)\n    # call the function\n    call_list(list1,list2)\n    return list1,list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2.pop())\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1 == '':\n        return 0\n    if len(str1) == 1:\n        return 1\n    else:\n        count = 0\n        for c in str1:\n            if c == 'A':\n                count += 1\n            else:\n                break\n        return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c=0\n    for i in str1:\n        if i==\" \":\n            c+=1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i =='' or i == ',' or i == '.' or i == '!' or i == '?' or i == ':':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) <= 0:\n        return 0\n    else:\n        return len(str1) - count_charac(str1[:-1])\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    i = 0\n    count = 0\n    while i < len(str1):\n        char = str1[i]\n        if char in 'aeiouAEIOU':\n            count += 1\n        i += 1\n    print(f'The total number of characters are: {count}')\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            c += 1\n    return c\n    "
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # create an empty list\n    char_list = []\n    \n    # loop over the string\n    for char in str1:\n        # count number of char in string\n        char_list.append(str1.count(char))\n    \n    # return the value\n    return char_list\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # E is the error tard to start. \n    E = 1\n    # Get n as the logarithm of the\n    # sqrt of the number.\n    n = math.log(N, 2) \n    # While n is less than E. \n    while n * n < E: \n        # Get the next power of 2. \n        # e is the logarithm of the sqrt. \n        e = math.log(N, 2) \n        # Assign the next power of 2 as \n        # our new exponent. \n        e = e + 1\n        # If e is odd, we have to divide \n        # n by 2. \n        if e % 2 == 1: \n            n = n / 2 \n        else: \n            n = n * 3 + 1 \n    # if n is less than 1, return N. \n    if n < 1: \n        return N \n    # We return a perfect square. \n    N = n \n    return N \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    a = math.ceil((N+1)/2)\n    b = math.ceil(N**0.5)\n    if (N == a):\n        if(N == b):\n            return N\n    elif(N%2 == 0):\n        if(N%2 == 1):\n            return N+1\n        else:\n            return N-1\n    else:\n        return N\n    #end if"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = N # input number\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0 or N == 1:\n        return N\n    else:\n        # if N is divisible by 4 or 5, find the next perfect square greater than N\n        if N%4 == 0:\n            if N%5 == 0:\n                return N**4 + next_Perfect_Square(N//5)\n            else:\n                return N**4 + next_Perfect_Square(N//5) + 1\n        else:\n            if N%5 == 0:\n                return next_Perfect_Square(N//5) + 1\n            else:\n                return next_Perfect_Square(N//5) + 1 + next_Perfect_Square(N//5)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N): \n        if i * i <= N: \n            for j in range(i + 1, N): \n                if i * i + j * j == N: \n                    return j \n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    elif N % 2 == 0:\n        return N+1\n    elif N == 2:\n        return 3*N\n    else:\n        return (N+1)*N+1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0: \n        return 0 \n    elif N == 1: \n        return 1 \n    else: \n        return (N * (N+1))//2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    '''\n    import math\n    def next_perfect_square(N):\n        '''\n        returns the next perfect square greater than N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    last_square = N \n    for i in range(2, int(math.sqrt(N)) + 1): \n        square = N ** 2\n        if square > last_square: \n            last_square = square\n    return last_square \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = 2 \n    while x < N: \n        y = 2\n        while y <= x: \n            if x * y == N: \n                return x * y \n            y = y + 1 \n        x = x + 1 \n    return -1 \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    \n    # Find the maximum sum of first subarrays\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(arr[i] + max_sum, arr[i] + max_sum)\n    \n    # Find the lowest index where we can find a sequence of the highest sum\n    low = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[low] and arr[i] >= max_sum:\n            low = i + 1\n    \n    # Remove the lowest sequence\n    for i in range(len(arr)):\n        if arr[i] <= max_sum and arr[i]!= arr[low]:\n            arr[i] = arr[low]\n            arr[low] = arr[i]\n            low = i + 1\n    \n    # Add remaining sequences to the end\n    for i in range(low, len(arr)):\n        arr[i] = max(arr[i] + arr[low], arr[i] + max_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # # Initialize the running sum\n    # running_sum = 0\n    # # Initialize the running_sum_mask\n    # running_sum_mask = 0\n    # # Traverse the array, iterating over every element, and updating the running_sum\n    # for i in range(len(arr)):\n    #     running_sum += arr[i]\n    #     running_sum_mask += arr[i] < 0\n    #     # Update running_sum_mask if the element becomes negative\n    #     if arr[i] < 0:\n    #         running_sum_mask = ~running_sum_mask\n    # return running_sum if running_sum_mask else -running_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the current min value of each bitonic subsequence\n    curr_min = min(arr[1:])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_arr = []\n    for i in range(len(arr) - 1): \n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] > arr[j] + arr[i]:\n                temp_arr = [arr[i], arr[j]]\n                max_arr.append(temp_arr)\n    print(max_arr)\n    return max_arr\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: \n        return 0\n    if len(arr) == 1: \n        return arr[0]\n    first_increasing_bitonic = first_increasing_bitonic(arr)\n    for i in range(len(arr) - 1): \n        current_value = arr[i] + arr[i+1] \n        if first_increasing_bitonic < current_value:\n            first_increasing_bitonic = current_value\n    return first_increasing_bitonic\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        length = len(arr)\n        i = 1\n        while i < length:\n            if arr[i] < arr[i-1]:\n                i += 1\n            else:\n                break\n        if i == length:\n            return arr[length-1]\n        else:\n            return max(max_sum(arr[i+1:]), max_sum(arr[:i])) + arr[i]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            res += arr[i+1] - arr[i]\n    return res"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    result = 0\n    seq_count = 1\n    sum_array = arr[0]\n    for i in range(len(arr)):\n        if sum_array < 0:\n            result += seq_count\n            sum_array = 0\n            seq_count = 1\n        elif arr[i] < 0:\n            seq_count += 1\n        elif arr[i] >= 0:\n            seq_count -= 1\n        sum_array += arr[i]\n    result += seq_count\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    l=0\n    r=0\n    max_sum=0\n    sum_array=0\n    for i in range(len(arr)):\n        if(arr[i]=='0'):\n            l=0\n        else:\n            l=1\n        if(arr[i]=='1'):\n            r=1\n        else:\n            r=2\n        sum_array=l+r+arr[i]\n        if(sum_array>max_sum):\n            max_sum=sum_array\n    print(max_sum)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = []\n    def square(x):\n        return x ** 2\n    squareroot = list(map(square, number))\n    numbers = []\n    for i in range(len(squareroot)):\n        numbers.append(squareroot[i])\n    \n    def squareroot_difference(n):\n        square_result = 0\n        for i in range(len(n)):\n            square_result += n[i] ** 2\n        return square_result\n    \n    for i in range(len(squareroot)):\n        if squareroot_difference(numbers[i]) == n[i]:\n            squareroot[i] = squareroot_difference(numbers[i])\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    while number > 0:\n        remainder = number % 2\n        squareroot += remainder\n        number = number // 2\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #set the initial value of the solution\n    answer = 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    for i in range(1, int(number**.5)):\n        squareroot += 1 / number\n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    babylonian = round(1 / (10 ** (-number)) + 0.1, 2)\n    return babylonian\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return(number ** (1 / 2))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    else:\n        return babylonian_squareroot(number - 1) + math.sqrt(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 2\n    \n    # While the squareroot is valid, do the same thing, but put out an attempt to the base case.\n    while number * x > 0:\n        if number * x == 1:\n            return x\n        elif number * x == -1:\n            x += 1\n        elif number * x > -1:\n            return x\n            \n    # Base case. If there are no possible roots, return 0.\n    return 0\n    \ndef squareroot(number):\n    '''\n    Write a function that computes the square root of a number.\n    '''\n    \n    # If the squareroot is not a valid number, return 0.\n    if not isinstance(number, int):\n        return 0\n    \n    # Compute the square root using the babylonian method.\n    return babylonian_squareroot(number"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return round(number**0.5, 5)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Solution 1:\n    def lps(s):\n        if len(s) <= 1:\n            return len(s)\n        # max_lps = 0\n        # current_lps = 0\n        # longest_palindromic_subsequence = 0\n        \n        # for i in range(len(s)):\n        #     # set current palindromic subsequence length\n        #     if s[i] == s[i][::-1]:\n        #         current_lps += 1\n        #     else:\n        #         if current_lps > longest_palindromic_subsequence:\n        #             longest_palindromic_subsequence = current_lps\n        #             current_lps = 0\n        #         else:\n        #             current_lps += 1\n        \n        # return longest_palindromic_subsequence\n    \n    # Solution 2:\n    def lps(s):\n        if len(s) <= 1:\n            return len(s)\n        \n        # find longest palindromic subsequence\n        # for each i, search the longest palindromic subsequence from i+1 to end\n        # by finding the longest palindromic subsequence that ends in that subsequence\n        longest_palindromic_subsequence = 0\n        for i in range(len(s)):\n            palindromic_subsequence = 0\n            # search the longest palindromic subsequence from i+1 to end\n            for j in range(i+1, len(s)+1):\n                # if palindromic subsequence is end, then found longest palindromic subsequence\n                if s[i:j] == s[i:j][::-1]:\n                    palindromic_subsequence += 1\n            if palindromic_subsequence > longest_palindromic_subsequence:\n                longest_palindromic_subsequence = palindromic_subsequence\n            \n        return longest_palindromic_subsequence\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    sub = \"\"\n    longest = 0\n    for i in range(len(str)):\n        if i == len(str)-1: \n            if str[i] == str[i+1]: \n                if len(sub) > len(longest): \n                    longest = len(sub)\n                continue\n            else: \n                if str[i] == str[i+1]: \n                    sub = str[i]\n                    continue\n                else: \n                    sub = str[i] + sub\n        else:\n            if str[i] == str[i+1]: \n                continue\n            else: \n                sub = str[i] + sub\n    return longest \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if str == '': \n        return 0\n    \n    n = len(str) \n    \n    d = [[-1 for j in range(n)] for i in range(n)] \n    \n    ans = 1\n    i, j = 0, 0\n    while i < n: \n        d[i][j] = j\n        j += 1\n        ans = max(ans, j - i)\n        i += 1\n    \n    i, j = 0, 0\n    while j < n: \n        d[i][j] = j\n        j += 1\n        ans = max(ans, j - i)\n        i += 1\n    \n    return ans\n    \n    \nprint(lps('aabb'))\nprint(lps('aab'))\nprint(lps('abc'))\nprint(lps('abcdef'))\nprint(lps('ab'))\nprint(lps('xyz'))\nprint(lps('abacd'))\nprint(lps('abacd'))\nprint(lps('abcdefghijklmnopqrst'))"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    m = dict()\n    def lps_helper(s):\n        if s == \"\":\n            return 0\n        if s in m:\n            return m[s]\n        res = 1\n        for i in range(1,len(s)):\n            if s[:i] == s[i:]:\n                res = max(res,lps_helper(s[:i]+s[i+1:])+1)\n        m[s] = res\n        return res\n    return lps_helper(str)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)==0: return 0\n    if len(str)==1: return 1\n    if str[0]==str[len(str)-1]: return 1+lps(str[1:len(str)-1])\n    else:\n        return max(lps(str[0:len(str)-1]),lps(str[len(str)-2:len(str)]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # To check whether the string is palindrome\n    pal = str == str[::-1]\n    \n    # To find the length of the longest palindromic subsequence\n    if pal:\n        longest = 0\n        p = 0\n        for i in range(len(str)):\n            for j in range(i, len(str)):\n                if str[i] == str[j]:\n                    if j-i == 1:\n                        p += 1\n                    else:\n                        if p >= longest:\n                            longest = p\n                        p = 0\n            if longest >= p:\n                longest = p\n            p = 0\n        \n        return longest\n    else:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # define the length of the longest palindromic subsequence.\n    # find the longest subsequence of characters, and store it into a variable\n    longest = 1\n    palindrome = 0\n    # Iterate from the beginning of the string and if the palindrome string is of length 1, we have the first character.\n    for i in range(0, len(str)):\n        # if the length of the palindrome is greater than the longest palindrome, the length will be the longest palindrome\n        if palindrome > len(str[i]):\n            longest = len(str[i])\n            palindrome = str[i]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = 0\n    i = 0\n    j = 1\n    while i < len(str):\n        if str[i] == str[j]:\n            j += 1\n        else:\n            length = max(length, j - i)\n            i = j\n            j = i + 1\n    return length\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #get the length of the substring\n    lps = len(str)\n    \n    #loop through the string\n    for i in range(lps):\n        #check if we can get a palindrom\n        if (str[i] == str[lps-i-1]):\n            #increment palindrome\n            palindrome_count = i + 1\n            #print palindrome\n            print(f'{str[i]} = {palindrome_count}')\n            break\n        elif (i == lps-1):\n            print(f'{str[i]} = {0}')\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum\n    h_sum = n\n    while n > 1:\n        h_sum = h_sum + n % 10\n        n = n // 10\n    return h_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return n\n    else:\n        return n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(n**(1/2))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    \n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    \n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(1+harmonic_sum(n-1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (1 + harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (((1.0/n)*(n+1)))/2.0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s = 1\n    for i in range(1,n+1):\n        s = s + i*i\n    return s\n    \ndef harmonic_sum_recursive(n):\n    if n<0:\n        return 0\n    if n==0:\n        return 1\n    return n*harmonic_sum_recursive(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    s=1\n    for i in range(1,n):\n        s=s*(i+1)/(i+1)\n    return s\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    for i in array_nums2:\n        if i in array_nums1:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for i in range(0,len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection.append(array_nums1[i])\n            array_nums2.remove(array_nums1[i])\n        else:\n            return False\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    intersection_array=set(array_nums1) & set(array_nums2)\n    return list(intersection_array)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersection_array.append(num1)\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    temp_array = set(array_nums1) & set(array_nums2)\n    temp_array = temp_array.intersection(set(array_nums1))\n    temp_array = temp_array.intersection(set(array_nums2))\n    return temp_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums_intersection=[]\n    array_nums_no_intersection=[]\n    intersection=[]\n    \n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 in num2:\n                array_nums_no_intersection.append(num1)\n    \n    for num in array_nums_no_intersection:\n        if num in array_nums2:\n            array_nums_intersection.append(num)\n    \n    for num in array_nums_intersection:\n        intersection.append(num)\n    \n    for num in array_nums2:\n        if num not in array_nums1:\n            array_nums_no_intersection.remove(num)\n    \n    for num in array_nums_no_intersection:\n        intersection.remove(num)\n    \n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersections = []\n    for i in array_nums1:\n        for j in array_nums2:\n            if i < j:\n                intersections.append(i)\n            elif i > j:\n                intersections.append(j)\n    return intersections\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    my_result = []\n    array_nums1.sort()\n    array_nums2.sort()\n    #print(array_nums1)\n    #print(array_nums2)\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] + array_nums2[j] == array_nums1[i] * array_nums2[j]:\n                my_result.append(array_nums1[i])\n    return my_result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # for array_num in array_nums1:\n    #     print(array_num)\n    # for array_num in array_nums2:\n    #     print(array_num)\n    #     if array_num in array_nums1:\n    #         print('Yes')\n    #         break\n    #     if array_num in array_nums2:\n    #         print('Yes')\n    #         break\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #return sum(tup.count(x))\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    temp_tup = tup[:]\n    temp_tup.remove(x)\n    return temp_tup.count(x)"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurences = 0\n    for element in tup:\n        if element == x:\n            occurences += 1\n    return occurences\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    '''\n    CODE:\n    tup = ('F', 2, 'A')\n    x = 'A'\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    s = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            s += 1\n    return s\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a = 0\n    for i in tup:\n        if i == x:\n            a+=1\n    return a\n    \ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a = 0\n    for i in tup:\n        if i == y:\n            a+=1\n    return a\n    \ndef count_XY(tup, x, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a = 0\n    for i in tup:\n        if i == x and i == y:\n            a+=1\n    return a\n        \ndef is_Palindrome(x):\n    '''\n    Write a python function that takes in a string and returns True if the string is a palindrome, else False.\n    '''\n    t = x[::-1]\n    if t == x:\n        return True\n    return False\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    # use a for loop to iterate through the elements of the tuple \n    for x in tup: \n        if x == x:\n            # if the element is the same \n            # then increment the count \n            return tup.count(x) \n        # else if the element is not the same \n        # then increment the count \n        else:\n            return tup.count(x) \n    # if the element is not found in the tuple then return the count \n    # since it should be less than the count of the element \n    return tup.count(x) \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for item in tup:\n        if item == x:\n            occ += 1\n    return occ\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Write your code here\n    count = 0\n    for i in tup:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list\n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    #print(element)\n    for i in range(len(list)):\n        if list[i] > element:\n            list.insert(i,element)\n            break\n    return list\n    \ndef check_for_duplicates(list):\n    '''\n    Write a function that returns a dictionary where keys are the elements in list and values are the number of times they appear in list.\n    '''\n    \n    result = {}\n    for item in list:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n    \ndef check_the_list(list,min_num):\n    '''\n    Write a function that returns a dictionary where keys are the elements in list and values are the number of times they appear in list where their numbers are smaller than min_num.\n    '''\n    \n    result = {}\n    for item in list:\n        if item < min_num:\n            result[item] = result.get(item,0) + 1\n    return result\n    \ndef run_tests():\n    '''\n    Write a function that takes in a list of integers and returns a list of lists containing the number of times each number appears in the list and the order of the numbers appear in the list.\n    '''\n    test_cases = [\n    [2,3,5,8],\n    [1,5,8,9,11,16,19],\n    [1,2,3,5,8,10,13,17,19]\n    ]\n    \n    for test_case in test_cases:\n        result = get_result(test_case)\n        for key in result:\n            print(key, \": \", result[key])\n            \ndef get_result(test_case):\n    '''\n    Return a dictionary where keys are the elements in the list and values are the number of times the element appears in the list.\n    '''\n    result = {}\n    list = []\n    for element in test_case:\n        list.append(element)\n    for i in range(len(list)):\n        if list[i] in result:\n            result[list[i]] += 1\n        else:\n            result[list[i]] = 1\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element < list[i]:\n            list.insert(i,element)\n            return list\n        else:\n            return list\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # use a list of lists to insert each element into the list\n    # if element is not in list, add the element to the end of the list\n    # if element is already in the list, add the element to the end of the list\n    for element in list:\n        if element[0]==element[1]:\n            print(element)\n            list.remove(element)\n            list.insert(0,element)\n            print(list)\n            break\n        elif element[0]<element[1]:\n            print(element)\n            list.remove(element)\n            list.insert(0,element)\n            print(list)\n            break\n    print(list)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list[i] = element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element_index = list.index(element)\n    return [element for element in list[:element_index]] + [element for element in list[element_index+1:]]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #check if list is empty\n    if len(list) == 0:\n        return []\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i,element)\n        return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Note, you may need to use the built-in insert method.  We've created a new list called \"new_list\" to store the new elements.\n    new_list = []\n    for e in list:\n        new_list.append(e)\n    for i in range(len(list)-1,0,-1):\n        new_list[i] = list[i]\n    for i in range(len(list)-1,0,-1):\n        new_list.insert(i,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #print(numbers)\n    #print(type(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radians = []\n    degrees = []\n    for i in numbers:\n        radians.append(cmath.degrees(i.real))\n        degrees.append(cmath.degrees(i.imag))\n    return radians, degrees\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # convert n+1 numbers to complex\n    n = len(numbers)\n    if n==1:\n        return numbers[0]\n    else:\n        c = cmath.sqrt(numbers[0])\n        r = convert(numbers[1:])\n        r = c + (r*cmath.sqrt(numbers[0]))\n        return r\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #return the values in complex form\n    #convert the numbers in complex form to polar form\n    if type(numbers)!= type('string'):\n        return 'invalid input'\n    numbers = float(numbers)\n    def convert_to_polar(numbers):\n        if numbers > 0:\n            a = cmath.exp(1j*2*cmath.pi*numbers)\n            if numbers < 0:\n                b = -a\n            else:\n                b = a\n        else:\n            b = abs(numbers)\n            if numbers < 0:\n                b = -b\n        return b\n    return convert_to_polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z1 = numbers.imag**2\n    z2 = abs(numbers.real)\n    r = cmath.sqrt(z1 + z2)\n    phi = (cmath.phase(numbers.real)) * (180/3.14)\n    return r, phi\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # myList = [2, 3, 4]\n    # myTuple = (2, 3, 4)\n    # myDict = {2: (6, -5), 3: (9, 1), 4: (-1, 4)}\n    # myDict = {2: (3, 4), 3: (-1, -4), 4: (4, 3)}\n    # myDict = {2: (3, 4), 3: (-1, -4), 4: (4, 3)}\n    # myDict = {2: (3, 4), 3: (-1, -4), 4: (4, 3)}\n    # myDict = {2: (3, 4), 3: (-1, -4), 4: (4, 3)}\n    # myDict = {2: (3, 4), 3: (-1, -4), 4: (4, 3)}\n    myDict = {2: (3, 4), 3: (-1, -4), 4: (4, 3)}\n    return list(map(lambda x: cmath.polar(x[0]*x[1]), numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return list(map(lambda x: complex(x[0],x[1]), numbers))    \ndef main():    \n    '''\n    Write a python program to convert a list of numbers to its sum.    \n    '''\n    print('===== List of numbers =====')\n    print('  [1, 3, -4]\\n')\n    numbers = [1, 3, -4]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1, 3, 5]\\n')\n    numbers = [1, 3, 5]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3+4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3-4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3+4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3-4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3+4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 - 6j]\\n')\n    numbers = [1+2j, 3-4j, 5-6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 + 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3+4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 - 4j, 5 + 6j]\\n')\n    numbers = [1+2j, 3-4j, 5+6j]\n    print(convert(numbers))\n    print('\\n')\n    print('===== List of numbers =====')\n    print('  [1 + 2j, 3 "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = [complex(x) for x in numbers]\n    polar_coords = [cmath.phase(x) for x in numbers]\n    return polar_coords\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #\n    # COMPLEX NUMBERS\n    #\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # print(numbers)\n    convert_list = []\n    c = cmath.rect(3, -3)\n    p = (c.real, c.imag)\n    \n    # print(p)\n    \n    for item in numbers:\n        convert_list.append(item * p)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    from math import ceil\n    count = 0\n    for i in list1:\n        if type(i) == int or type(i) == float:\n            count += 1\n    print(count)\n    return count\n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the sum of its elements.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The sum of values is:\", sum(l))\n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the average of its elements.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The average of values is:\", sum(l)/len(l))\n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the maximum value of its elements.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The maximum value of values is:\", max(l))\n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the minimum value of its elements.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The minimum value of values is:\", min(l))\n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the length of the list.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The length of values is:\", len(l))\n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the sum of their multiplications.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The sum of values is:\", sum(i*j for i,j in zip(l, l)))\n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the sum of their squares.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The sum of values is:\", sum(i*i for i in l))\n    \n    \n    \n    \ndef run():\n    '''\n    Write a python function that takes a list of integers and returns the sum of their cubes.\n    '''\n    l = [1,2,3,4,5]\n    print(\"The sum of values is:\", sum(i**3 for i in l))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_elements = 0\n    for i in list1:\n        if type(i) == int:\n            num_elements += 1\n    return num_elements\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i) is int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    sum = 0\n    for i in list1:\n        if type(i) == int:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # your code goes here\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for x in list1:\n        if type(x) == int:\n            num += 1\n    return num\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    int_list = []\n    for i in list1:\n        if type(i) == int:\n            int_list.append(i)\n    return int_list\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # TODO\n    n = len(list1)\n    return n\n    #pass\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == 1:\n        return [tuple(l)]\n    if len(l) == 2:\n        return combinations_with_replacement(l, 2)\n    else:\n        comb_list = combinations_colors(l[0:n//2], n//2) + combinations_colors(l[n//2:], n//2)\n        return comb_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return combinations_with_replacement(l, n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    s = []\n    if l == 1:\n        return [[l]]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(e) for e in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [()]\n    \n    if n == 1:\n        return list(combinations_with_replacement(l, 1))\n    \n    else:\n        res = []\n        for i in range(1, n):\n            for j in combinations_with_replacement(l, i):\n                res.append(j)\n        return res\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in combinations_with_replacement(l, n):\n        res.append(tuple(i))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = []\n    for i in range(1, l+1):\n        for j in combinations_with_replacement(l, i):\n            colors.append(j)\n    return colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos_colors = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            combos_colors.append(tuple(l[i] for i in range(i, n)))\n            combos_colors.append(tuple(l[i] for i in range(j, n)))\n    return combos_colors\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    combinations = []\n    for i in range(0, len(l)):\n        for j in combinations_with_replacement(l, i):\n            combinations.append(j)\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # your code goes here\n    n_x = []\n    for i in range(len(l)):\n        n_x.append(l[i])\n    combos = []\n    for i in range(n):\n        for x in combinations(n_x, i):\n            combos.append(x)\n    return combos\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    total_prime_numbers = 0\n    for i in range(n+1):\n        if is_prime(i):\n            total_prime_numbers += 1\n    return total_prime_numbers\n    # def count_Primes_nums(n):\n    #     prime_numbers = []\n    #     for i in range(n+1):\n    #         if is_prime(i):\n    #             prime_numbers.append(i)\n    #     return len(prime_numbers)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    \n    for i in range(2, n):\n        if all(int(i) for i in str(i)):\n            prime_count += 1\n    \n    return prime_count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if isprime(i) == True:\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = [2, 3] # list of primes below this number\n    count = 0 # variable to keep track of how many primes are smaller than the given number\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        count = 0\n        for i in range(n):\n            if is_prime(i):\n                count += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    summation = 0\n    prime_list = [0]*(n+1)\n    # Prints list for visualisation\n    for i in range(2,n+1):\n        prime_list[i] = i\n    for i in range(2,n):\n        if prime_list[i]!= 0:\n            for j in range(i+i,n,i):\n                prime_list[j] = 0\n    for i in range(2,n):\n        if prime_list[i]!= 0:\n            for j in range(i,n):\n                prime_list[j] = 0\n    # print(prime_list)\n    # Gets list of prime numbers\n    for i in range(2,n):\n        if prime_list[i]!= 0:\n            summation += prime_list[i]\n    # print(summation)\n    return summation"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime = [2,3,5,7,11,13,17,19]\n    p = len(prime)\n    \n    # Iterate through the array.\n    for i in range(2,n):\n        if prime[i] == 1:\n            continue\n        elif prime[i] == 2:\n            return p-i-2\n        elif prime[i] == 3:\n            return p-i-3\n        else:\n            continue\n    return p-i-2\n    \n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a>b:\n        a,b=b,a\n    return a,b\n    \n    \n    \n    \n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef add_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the sum of them.\n    '''\n    return a+b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (b,a"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first_num = a\n    second_num = b\n    return (second_num,first_num)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if type(a) == int and type(b) == int:\n        first = a\n        second = b\n        return (second,first)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    max_ind = 0\n    for ind, i in enumerate(test_tup1):\n        if i > test_tup2[max_ind]:\n            max_ind = ind\n    return test_tup1[:max_ind], test_tup2[:max_ind]\n    \ndef test_maximization():\n    '''\n    Test if the function maximize_elements works as intended.\n    '''\n    \n    test_tup1 = (1, 2, 3, 4, 5, 6, 7)\n    test_tup2 = (7, 8, 9, 10, 11, 12, 13)\n    \n    assert maximize_elements(test_tup1, test_tup2) == (12, 13)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result = 0\n    \n    if len(test_tup1) < len(test_tup2):\n        return len(test_tup1)\n    elif len(test_tup2) < len(test_tup1):\n        return len(test_tup2)\n    else:\n        for i in test_tup1:\n            if i > test_tup2[0]:\n                result += 1\n            elif i > test_tup2[0] and i < test_tup1[0]:\n                result += 1\n        \n        for i in test_tup2:\n            if i > test_tup1[0]:\n                result += 1\n            elif i > test_tup1[0] and i < test_tup2[0]:\n                result += 1\n                \n        return result"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # your code here\n    if len(test_tup1) > len(test_tup2):\n        return (test_tup1[0], test_tup2[-1])\n    else:\n        return (test_tup2[0], test_tup1[-1])"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = test_tup1[0]\n    for elem in test_tup1[1:]:\n        if elem > max_val:\n            max_val = elem\n    for elem in test_tup2[1:]:\n        if elem > max_val:\n            max_val = elem\n    return max_val\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup2\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = test_tup1[0]\n    for i in test_tup2:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element = test_tup1[0]\n    for element in test_tup1:\n        if element > max_element:\n            max_element = element\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Test your code\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_i, max_j = -1, -1\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_j = i\n            max_i = i\n    if max_i!= -1:\n        return (test_tup1, test_tup2)[max_i], max_j\n    else:\n        return (test_tup2, test_tup1)[max_i], max_j\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the first tuple\n    first_tup = test_tup1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i=1\n    while i<=n:\n        if isPrime(i):\n            j=i\n            while j<=i*2:\n                print(j)\n                if j%2==1:\n                    j+=1\n                else:\n                    j+=1\n                    if j==i:\n                        return i\n        i+=1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_candidate = True\n    for i in range(2,n+1):\n        if n%i==0:\n            prime_candidate=False\n            break\n    if prime_candidate==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    while a <= n:\n        if n % a == 0: \n            return n\n        a += 2\n    return False\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    num = 1\n    while num < n:\n        prime.append(2)\n        num = num + 2\n    prime = prime[:n]\n    prime.append(3)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Number of newman\u2013shanks\u2013williams prime numbers\n    numbers = list(range(1, n))\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_divisors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            prime_divisors.append(i)\n            if n // i == i:\n                prime_divisors.append(n//i)\n            break\n    return prime_divisors[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(1,n+1): \n        p = i * (n - i) \n        if p % 10 == 0: \n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n): \n        if(n % i == 0): \n            return False \n    return True \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i+i, n, i):\n                sieve[j] = False\n    return nth_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    d = []\n    d.append(0)\n    d.append(1)\n    for i in range(2,n):\n        d.append(d[i-1] + d[i-2])\n    for i in range(len(d)):\n        if d[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup_sum = test_tup1 + test_tup2\n    return test_tup_sum\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return [x/y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = tuple([i/j for i,j in zip(test_tup1, test_tup2)])\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # create variables for each of the tuples\n    arr1 = []\n    arr2 = []\n    for i in range(len(test_tup1)):\n        arr1.append(test_tup1[i][0])\n        arr2.append(test_tup2[i][0])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_test = []\n    division_test.append(test_tup1[0]/test_tup2[0])\n    division_test.append(test_tup1[1]/test_tup2[1])\n    division_test.append(test_tup1[0]/test_tup2[0])\n    division_test.append(test_tup1[1]/test_tup2[1])\n    return division_test\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize the variables\n    count_of_div = 0\n    div_sum = 0\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        div_elements = []\n        for tup in test_tup1:\n            div_elements.append(div(tup[0], tup[1]))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        for j in test_tup2:\n            result.append(i/j)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #Write your code here\n    assert len(test_tup1) == len(test_tup2)\n    n1 = test_tup1[0]\n    n2 = test_tup2[0]\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            n1 *= test_tup2[i]\n        else:\n            n1 /= test_tup1[i]\n    if test_tup1[0] == 0:\n        return [0,n1]\n    return [n1,0]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #s = int(input(\"Enter the first element: \"))\n    #e = int(input(\"Enter the second element: \"))\n    #s = int(input(\"Enter the first element: \"))\n    #e = int(input(\"Enter the second element: \"))\n    s = test_tup1[0]\n    e = test_tup2[0]\n    division = (s/e)\n    return division\n    #return test_tup1[0]/test_tup2[0]\n    #return division\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    b = []\n    if len(list1) < L:\n        a = list1\n        b = list1[:L]\n    else:\n        a = list1[:L]\n        b = list1[L:]\n    return a, b\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L<=0:\n        raise ValueError(\"Length of L must be at least 1.\")\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L < 1:\n        return []\n    if L == 1:\n        return [list1], [list1]\n    index1, index2 = 0, 0\n    result = []\n    while len(list1) >= L:\n        if index1 < len(list1) and index2 < len(list1):\n            result.append(list1[index1:index2])\n            index1 += L\n            index2 += L\n        elif index1 < len(list1):\n            result.append(list1[index1:])\n            index1 += L\n        elif index2 < len(list1):\n            result.append(list1[index2:])\n            index2 += L\n        else:\n            return result, result\n    return result, result\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = []\n    if L == 1:\n        return (list1, list1)\n    if len(list1) > L:\n        list1 = list1[0:L]\n    list2 = list1 + list1\n    list3 = list2[0:L//2] + list2[L//2:]\n    return (list3, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    temp_list = list1[0:L]\n    temp_list.extend(list1[L:])\n    return temp_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    while len(list1) > L:\n        list1 = list1[L:]\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 1:\n        return list1,list1\n    else:\n        # get first part\n        L1 = list1[:L]\n        # get rest of the parts\n        L2 = list1[L:]\n        return L1,L2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    tuple = []\n    length = L\n    mid = (L-1)//2\n    if L % 2 == 1:\n        # odd length\n        tuple.append(list1[:mid])\n        tuple.append(list1[mid:])\n    else:\n        # even length\n        tuple.append(list1[:mid])\n        tuple.append(list1[mid+1:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    s1 = list1[:L]\n    s2 = list1[L:]\n    return s1, s2\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 18:\n        print(f'{h_age} is {h_age} years old.')\n    else:\n        print(f'{h_age} is {h_age} years old.')\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    from math import ceil\n    return ceil(h_age * 365)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=2:\n        return 0\n    elif h_age<=4:\n        return 1\n    elif h_age<=6:\n        return 2\n    elif h_age<=8:\n        return 3\n    elif h_age<=10:\n        return 4\n    else:\n        return 5"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 2:\n        if h_age <= 10:\n            return \"The dog's age is \" + str(h_age) + \" years.\"\n        elif h_age <= 12:\n            return \"The dog's age is \" + str(h_age) + \" years and it is 'before' age.\"\n        else:\n            return \"The dog's age is \" + str(h_age) + \" years and it is 'after' age.\"\n    else:\n        return \"The dog's age is \" + str(h_age) + \" years.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(f\"Dog's age in dog's years is {(h_age * 365) + 1} years.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age\n    elif h_age <= 4:\n        return h_age + 1\n    elif h_age <= 6:\n        return h_age + 2\n    elif h_age <= 8:\n        return h_age + 3\n    else:\n        return h_age + 4\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 1:\n        return h_age\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 9:\n        return f\"{h_age} is a dog\"\n    elif h_age > 9 and h_age <= 14:\n        return f\"{h_age} is a cat\"\n    elif h_age > 14 and h_age <= 18:\n        return f\"{h_age} is a dog\"\n    elif h_age > 18:\n        return f\"{h_age} is a cat.\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    Dog_age = h_age * 365\n    Dog_age = Dog_age + 1\n    return(Dog_age)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #Write your code here\n    if step > len(S):\n        print(S)\n        return\n    print([S[:step], S[step:]])\n    print('Printing')\n    print(S[:step], S[step:])\n    return list_split(S, step + 1)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # count the length of the list\n    n = len(S)\n    \n    # initialize an empty list\n    L = []\n    \n    # use a for loop to iterate n times\n    for i in range(0, n, step):\n        L.append(S[i:i+step])\n        \n    # return the list\n    return L\n    \n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # define function to return list of lists, where the i is the current index, and the j is the next index\n    def list_split_step(L, i, j):\n        if i >= len(L):\n            return []\n        if j >= len(L[i]):\n            return []\n        if L[i][j] == L[i][j-1]:\n            return [L[i]] + list_split_step(L, i+1, j)\n        else:\n            return [L[i]] + list_split_step(L, i, j+1)\n    # return list of lists\n    return list_split_step(S, 0, 0)\n    \nS = [1, 2, 3, 4, 5]\nstep = 2"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Complete the function\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    answer = []\n    for i in range(len(S)):\n        answer.append(S[i:i+step])\n    return answer\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return []"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if n == step:\n        return S\n    else:\n        return [list_split(S, step) for i in range(n)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    for index in range(len(S)-step+1):\n        return_list.append(S[index:index+step])\n    return return_list\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i:i+step])\n    return lst\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # comment out this line when you implement this function\n    raise NotImplementedError\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = (2 * (l ** 2)) ** 0.5\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from mpl_toolkits.mplot3d import Axes3D\n    from matplotlib import cm\n    import matplotlib.colors as colors\n    import mpl_toolkits.mplot3d.art3d as art3d\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    def less_than(n):\n        if n <= 0:\n            return 0\n        else:\n            return (1 + n)**3\n    def quadratic(a,b,c):\n        return b**2 - 4*a*c\n    def cubic(a,b,c,d):\n        return (b**2 - 4*a*c)**(1/2)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(\"Write a function to find the lateral surface area of a cube given its side length.\")\n    print(\"Input an integer for side length and your function should return the lateral surface area of a cube given its side length.\")\n    print(\"You can assume that the input is an integer and that it is greater than 0.\")\n    print(\"Hint: If you can't figure it out, return 0.\")\n    print(\"Example: \")\n    print(f\"Input: {side}\")\n    print(f\"Side length: {side}\")\n    print(f\"Output: {lateral}\")\n    \ndef possible_moves(initial_position, turn):\n    '''\n    Write a function that returns the possible moves from the current position.\n    A move is a direction of the player's index on the board.\n    '''\n    possible_moves = []\n    if turn == 1:\n        if initial_position == 0:\n            possible_moves.append(0)\n        elif initial_position == 1:\n            possible_moves.append(1)\n        elif initial_position == 2:\n            possible_moves.append(2)\n        elif initial_position == 3:\n            possible_moves.append(3)\n        elif initial_position == 4:\n            possible_moves.append(4)\n        elif initial_position == 5:\n            possible_moves.append(5)\n        elif initial_position == 6:\n            possible_moves.append(6)\n        elif initial_position == 7:\n            possible_moves.append(7)\n        elif initial_position == 8:\n            possible_moves.append(8)\n        elif initial_position == 9:\n            possible_moves.append(9)\n        elif initial_position == 10:\n            possible_moves.append(10)\n        elif initial_position == 11:\n            possible_moves.append(11)\n    elif turn == 2:\n        if initial_position == 0:\n            possible_moves.append(0)\n        elif initial_position == 1:\n            possible_moves.append(1)\n        elif initial_position == 2:\n            possible_moves.append(2)\n        elif initial_position == 3:\n            possible_moves.append(3)\n        elif initial_position == 4:\n            possible_moves.append(4)\n        elif initial_position == 5:\n            possible_moves.append(5)\n        elif initial_position == 6:\n            possible_moves.append(6)\n        elif initial_position == 7:\n            possible_moves.append(7)\n        elif initial_position == 8:\n            possible_moves.append(8)\n        elif initial_position == 9:\n            possible_moves.append(9)\n        elif initial_position == 10:\n            possible_moves.append(10)\n        elif initial_position == 11:\n            possible_moves.append(11)\n    return possible_moves\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import math\n    f = lambda a,b,c: math.sqrt((a**2+b**2+c**2-2*a*b*c))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # Initialize result variable\n    result = 0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    # Assume user enters a positive integer n > 0 and n is in the range 1..8.\n    if l < 0 or l > 8:\n        print(\"Error: the input must be an integer in the range 1..8\")\n    else:\n        def function(n):\n            # Formula for the lateral surface area of a cube given its side length.\n            # The formula is: (sqrt(x^2+y^2+z^2))\n            # The result is the square of the cuboid's sidelength in terms of the modulo operator.\n            return int(sqrt((n*(n+1))/2))\n        print(function(l))\nif __name__ == '__main__':\n    print(\"\\nTesting the lateralsurface_cube function:\")\n    try:\n        lateralsurface_cube(-1)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(0)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(1)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(2)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(3)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(4)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(5)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(6)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(7)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(8)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(9)\n    except ValueError:\n        pass\n    try:\n        lateralsurface_cube(10)\n    except ValueError:\n        pas"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = 6*l\n    b = 2*l\n    c = l\n    d = l\n    x = b**2 + 4*a*c + 2*l*d\n    y = b*a*c - 2*l*d\n    z = l**2 - (2*l-d)**2\n    if z < 0:\n        z = -z\n        d = -d\n        c = -c\n    return ((2*a*d - b*c)**2 * x) + ((-2*a*b*c)**2 * y) + (l**2 * z)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def calculate_lateral_area(l, base_length):\n        lateral_area = base_length * base_length\n        for i in range(2, l):\n            lateral_area += (l - i) * base_length\n        return lateral_area\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # YOUR CODE HERE\n    if n < 2:\n        return 0\n    else:\n        s = 0\n        for i in range(n):\n            s += i*i\n        return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n * square_Sum(n - 1)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    '''\n    Complete this function so that it returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s=s+i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    squares = []\n    for i in range(0, n, 2):\n        squares.append(i*i)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i**2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # your code here\n    s = 0\n    if n <= 2:\n        return n\n    else:\n        for x in range(2,n):\n            square = x * x\n            s += square\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i%2==0:\n            sum = sum + pow(i, 2)\n    return sum\n    \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            sum_squares += i**2\n    return sum_squares\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n=int(n)\n    if n==0 or n==1 or n==2:\n        return n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            if n % 2 == 1:\n                print(i)\n        i += 2\n    \n    \ndef main():\n    n = int(input(\"Enter a number: \"))\n    find_star_num(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 4\n    if n==4: return 7\n    if n%3==0: return 3*(n//3)\n    if n%3==1: return 4*(n//3)\n    if n%3==2: return 7*(n//3)\n    return find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    i = 1\n    star_num = i\n    while (i * i) <= n: \n        if (n % i) == 0: \n            star_num = i \n            break\n        i += 1 \n    return star_num \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return int(n**0.5) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n    star_num = 1\n    for i in range(1,n+1):\n        if(i%2==0):\n            star_num+=1\n    return star_nu"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    number = n \n    #while n > 0:\n    #    n -= 1\n    #    if n % 2 == 1:\n    #        number = (number + 1)\n    #    else:\n    #        number = (number - 1)\n    if number > 10: \n        print(f\"{number} is not a star number\") \n    else: \n        print(number) \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 9\n    if n == 6:\n        return 11\n    if n == 7:\n        return 13\n    if n == 8:\n        return 15\n    if n == 9:\n        return 17\n    if n == 10:\n        return 19\n    if n == 11:\n        return 21\n    if n == 12:\n        return 23\n    if n == 13:\n        return 25\n    if n == 14:\n        return 27\n    if n == 15:\n        return 29\n    if n == 16:\n        return 31\n    if n == 17:\n        return 33\n    if n == 18:\n        return 35\n    if n == 19:\n        return 37\n    if n == 20:\n        return 39\n    if n == 21:\n        return 41\n    if n == 22:\n        return 43\n    if n == 23:\n        return 45\n    if n == 24:\n        return 47\n    if n == 25:\n        return 49\n    if n == 26:\n        return 51\n    if n == 27:\n        return 53\n    if n == 28:\n        return 55\n    if n == 29:\n        return 57\n    if n == 30:\n        return 59\n    if n == 31:\n        return 61\n    if n == 32:\n        return 63\n    if n == 33:\n        return 65\n    if n == 34:\n        return 67\n    if n == 35:\n        return 69\n    if n == 36:\n        return 71\n    if n == 37:\n        return 73\n    if n == 38:\n        return 75\n    if n == 39:\n        return 77\n    if n == 40:\n        return 79\n    if n == 41:\n        return 81\n    if n == 42:\n        return 83\n    if n == 43:\n        return 85\n    if n == 44:\n        return 87\n    if n == 45:\n        return 89\n    if n == 46:\n        return 91\n    if n == 47:\n        return 93\n    if n == 48:\n        return 95\n    if n == 49:\n        return 97\n    if n == 50:\n        return 99\n    if n == 51:\n        return 101\n    if n == 52:\n        return 103\n    if n == 53:\n        return 105\n    if n == 54:\n        return 107\n    if n == 55:\n        return 109\n    if n == 56:\n        return 111\n    if n == 57:\n        return 113\n    if n == 58:\n        return 115\n    if n == 59:\n        return 117\n    if n == 60:\n        return 119\n    if n == 61:\n        return 121\n    if n == 62:\n        return 123\n    if n == 63:\n        return 125\n    if n == 64:\n        return 127\n    if n == 65:\n        return 129\n    if n == 66:\n        return 131\n    if n == 67:\n        return 133\n    if n == 68:\n        return 135\n    if n == 69:\n        return 137\n    if n == 70:\n        return 139\n    if n == 71:\n        return 141\n    if n == 72:\n        return 143\n    if n == 73:\n        return 145\n    if n == 74:\n        return 147\n    if n == 75:\n        return 149\n    if n == 76:\n        return 151\n    if n == 77:\n        return 153\n    if n == 78:\n        return 155\n    if n == 79:\n        return 157\n    if n == 80:\n        return 159\n    if n == 81:\n        return 161\n    if n == 82:\n        return 163\n    if n == 83:\n        return 165\n    if n == 84:\n        return 167\n    if n == 85:\n        return 169\n    if n == 86:\n        return 171\n    if n == 87:\n        return 173\n    if n == 88:\n        return 175\n    if n == 89:\n        return 177\n    if n == 90:\n        return 179\n    if n == 91:\n        return 181\n    if n == 92:\n        return 183\n    if n == 93:\n        return 185\n    if n == 94:\n        return 187\n    if n == 95:\n        return 189\n    if n == 96:\n        return 191\n    if n == 97:\n        return 193\n    if n == 98:\n        return 195\n    if n == 99:\n        return 197\n    if n == 100:\n        return 199\n    if n == 101:\n        return 201\n    if n == 102:\n        return 203\n    if n == 103:\n        return 205\n    if n == 104:\n        return 207\n    if n == 105:\n        return 209\n    if n == 106:\n        return 211\n    if n == 107:\n        return 213\n    if n == 108:\n        return 215\n    if n == 109:\n        return 217\n    if n == 110:\n        return 219\n    if n == 111:\n        return 221\n    if n == 112:\n        return 223\n    if n == 113:\n        return 225\n    if n == 114:\n        return 227\n    if n == 115:\n        return 229\n    if n == 116:\n        return 231\n    if n == 117:\n        return 233\n    if n == 118:\n        return 235\n    if n == 119:\n        return 237\n    if n == 120:\n        return 239\n    if n == 121:\n        return 241\n    if n == 122:\n        return 243\n    if n == 123:\n        return 245\n    if n == 124:\n        return 247\n    if n == 125:\n        return 249\n    if n == 126:\n        return 251\n    if n == 127:\n        return 253\n    if n == 128:\n        return 255\n    if n == 129:\n        return 257\n    if n == 130:\n        return 259\n    if n == 131:\n        return 261\n    if n == 132:\n        return 263\n    if n == 133:\n        return 265\n    if n == 134:\n        return 267\n    if n == 135:\n        return 269\n    if n == 136:\n        return 271\n    if n == 137:\n        return 273\n    if n == 138:\n        return 275\n    if n == 139:\n        return 277\n    if n == 140:\n        return 279\n    if n == 141:\n        return 281\n    if n == 142:\n        return 283\n    if n == 143:\n        return 285\n    if n == 144:\n        return 287\n    if n == 145:\n        return 289\n    if n == 146:\n        return 291\n    if n == 147:\n        return 293\n    if n == 148:\n        return 295\n    if n == 149:\n        return 297\n    if n == 151:\n        return 299\n    if n == 152:\n        return 301\n    if n == 153:\n        return 302\n    if n == 154:\n        return 303\n    if n == 155:\n        return 305\n    if n == 156:\n        return 307\n    if n == 157:\n        return 309\n    if n == 158:\n        return 311\n    if n == 159:\n        return 313\n    if n == 160:\n        return 315\n    if n == 161:\n        return 317\n    if n == 162:\n        return 319\n    if n == 163:\n        return 321\n    if n == 164:\n        return 323\n    if n == 165:\n        return 325\n    if n == 166:\n        return 327\n    if n == 167:\n        return 329\n    if n == 168:\n        return 331\n    if n == 169:\n        return 333\n    if n == 170:\n        return 335\n    if n == 171:\n        return 337\n    if n == 172:\n        return 339\n    if n == 173:\n        return 341\n    if n == 174:\n        return 343\n    if n == 175:\n        return 345\n    if n == 176:\n        return 347\n    if n == 177:\n        return 349\n    if n == 178:\n        return 351\n    if n == 179:\n        return 353\n    if n == 180:\n        return 355\n    if n == 181:\n        return 357\n    if n == 182:\n        return 359\n    if n == 183:\n        return 361\n    if n == 184:\n        return 363\n    i"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1 or n == 2: \n        return n\n    else: \n        return find_star_num(n-1) + 3\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in numbers:\n        if i == n:\n            return i\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - 32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return(chr(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    val = ord(k)\n    if val > 127:\n        return val\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # find the character in unicode\n    n = ord(k)\n    # convert into ascii value\n    a = n - ord('A')\n    # return ascii value\n    return a\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    # convert to unicode\n    k = k.upper()\n    \n    # convert to integer\n    k = int(k)\n    \n    # return the character\n    return k\n    \n    "
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # make a dict with letters and their ascii values\n    return chr(ord(k)+32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    if k in ascii_value:\n        return ascii_value[k]\n    else:\n        raise UnicodeEncodeError(\"ascii_value\", k, 0, 1, \"ordinal not in ascii_value\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k)+1)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        #print 'k is a letter:'\n        return ord(k)\n    else:\n        #print 'k is not a letter:'\n        return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0 \n    for i in range(0, len(arr)):\n        if(i % 2 == 0):\n            even_sum += arr[i]\n        \n    return even_sum\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # iterate through the list\n    for i in range(len(arr)):\n        # sum the even numbers\n        if(arr[i] % 2 == 0):\n            even_sum = even_sum + arr[i]\n    # sum the odd numbers\n    odd_sum = 0\n    for i in range(len(arr)):\n        # if odd_sum is not zero\n        if (odd_sum == 0):\n            odd_sum = arr[i]\n        # if odd_sum is not the first item\n        elif(arr[i]!= odd_sum):\n            odd_sum = arr[i]\n    # return the sum\n    return even_sum + odd_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(i%2==0):\n            sum = sum + arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0 \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n    # print(sum_even_and_even_index(arr))\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Return the sum of even numbers in the array\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for num in arr:\n        if num%2 == 0:\n            sum_even += num\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    if n>=0:\n        for i in range(n+1):\n            if i%5==0:\n                sum=sum+i\n        return sum\n    else:\n        print(\"Error\")\n        \ndef find_Roots(n):\n    '''\n    This function takes in a number and returns the closest number for a given number, if it exists.\n    '''\n    if n==0:\n        print(\"No root\")\n        return -1\n    else:\n        return int(round(math.sqrt(n)))\n        \ndef check_Even(n):\n    '''\n    This function takes in a number and returns True if the number is an even number, or False if it is not.\n    '''\n    return (n%2==0)\n    \ndef Power_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of the first n odd natural numbers using the function Power_Sum.\n    '''\n    sum=0\n    for i in range(n+1):\n        if i%2==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 4\n    else: \n        x = even_Power_Sum(n - 2) \n        y = x * (n - 1) \n        return y \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 2:\n        return n\n    else:\n        return even_Power_Sum(n -1) + 2 * n \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    list1 = []\n    for i in range(0,n):\n        list1.append(int(str(i) + str(i) + str(i) + str(i)))\n    even = 0\n    for j in range(0,len(list1)):\n        if (list1[j] % 5) == 0:\n            even += list1[j]\n            # print(list1[j])\n    return even\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0\n    else: \n        power = 0\n        while n >= 10: \n            power += 1\n            n = int(n/10)\n        \n        return int(power) * int(n)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**5\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans=0\n    for i in range(n,0,-1):\n        ans+=pow(i,5)\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = 0\n    y = 0\n    z = 0\n    p = 1\n    for i in range(0, n):\n        z = int(z) ** int(p)\n        p = int(p)\n        y = y + z\n        x = x + z\n    return(x + y)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            even += i\n    return even\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for data in test_list:\n        rear.append(data[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)):\n        rear.append(test_list[i][1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for tup in test_list:\n        output.append(tup[1])\n    return output\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n    \ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    front_list = []\n    for i in test_list:\n        front_list.append(i[0])\n    return front_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [elem for elem in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for item in test_list:\n        rear.append(item[1])\n    return rear\n    \n    \ndef get_item(item_name, dictionary):\n    '''\n    Write a function that returns a value from a dictionary by name.\n    '''\n    if item_name in dictionary:\n        return dictionary[item_name]\n    else:\n        print(\"The item does not exist.\")\n        return None\n    \n    \ndef test_rear_extract():\n    test_list = [\n        (1, \"one\"),\n        (2, \"two\"),\n        (3, \"three\")\n        ]\n    \n    # First, get the list of tuples of the test_list, using get_item.\n    test_list_1 = [(1, \"one\"), (2, \"two\"), (3, \"three\")]\n    \n    # Now, pass the test_list_1 to get_item, using the function you wrote earlier.\n    rear_1 = get_item(\"one\", test_list_1)\n    print(\"The item on the rear of the list is: \" + str(rear_1))\n    \n    # Next, get the list of tuples of the test_list, using get_item.\n    test_list_2 = [\n        (1, \"one\"),\n        (2, \"two\"),\n        (3, \"three\")\n        ]\n    \n    # Now, pass the test_list_2 to get_item, using the function you wrote earlier.\n    rear_2 = get_item(\"one\", test_list_2)\n    print(\"The item on the rear of the list is: \" + str(rear_2))\n    \n    # Finally, get the list of tuples of the test_list, using get_item.\n    test_list_3 = [\n        (1, \"one\"),\n        (2, \"two\"),\n        (3, \"three\")\n        ]\n    \n    # Now, pass the test_list_3 to get_item, using the function you wrote earlier.\n    rear_3 = get_item(\"one\", test_list_3)\n    print(\"The item on the rear of the list is: \" + str(rear_3))\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # hint: you can use any built-in function and think about ways to do this.\n    # you can also try a technique that involves a set, or dictionary\n    # try to understand the code in a function that takes a list of tuples as input\n    test_list = [(1,2),(3,4),(5,6),(1,5)]\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (test_tup1[0], test_tup1[1], test_tup1[2])\n    test_tup2 = (test_tup2[0], test_tup2[1], test_tup2[2])\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2], test_tup1[3] - test_tup2[3], test_tup1[4] - test_tup2[4]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    def substract_elements_2(tup1, tup2):\n        sum = 0\n        for i in range(len(tup1)):\n            sum += tup1[i] - tup2[i]\n        return sum\n    \n    return substract_elements_2(test_tup1, test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    def str_list(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a string of the tuples with the correct order.\n        '''\n        return [str(t) for t in test_tup1] + [str(t) for t in test_tup2]\n    def make_list(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a list of the tuples with the correct order.\n        '''\n        return list(test_tup1) + list(test_tup2)\n    test_tup1 = test_tup1[::-1]\n    test_tup2 = test_tup2[::-1]\n    return make_list(test_tup1, test_tup2)\n    # return str_list(test_tup1, test_tup2)\n    # return make_list(test_tup1, test_tup2)\n    # return''.join(str_list(test_tup1, test_tup2))\n    \ndef add_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and adds the elements of the first tuple to the elements of the second tuple.\n    '''\n    def str_list(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a string of the tuples with the correct order.\n        '''\n        return [str(t) for t in test_tup1] + [str(t) for t in test_tup2]\n    def make_list(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a list of the tuples with the correct order.\n        '''\n        return list(test_tup1) + list(test_tup2)\n    test_tup1 = test_tup1[::-1]\n    test_tup2 = test_tup2[::-1]\n    return make_list(test_tup1, test_tup2)\n    # return str_list(test_tup1, test_tup2)\n    # return make_list(test_tup1, test_tup2)\n    # return''.join(str_list(test_tup1, test_tup2))\n    \ndef rotate_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and rotates the first tuple by the second one.\n    '''\n    def str_list(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a string of the tuples with the correct order.\n        '''\n        return [str(t) for t in test_tup1] + [str(t) for t in test_tup2]\n    def make_list(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a list of the tuples with the correct order.\n        '''\n        return list(test_tup1) + list(test_tup2)\n    test_tup1 = test_tup1[::-1]\n    test_tup2 = test_tup2[::-1]\n    return make_list(test_tup1, test_tup2)\n    # return str_list(test_tup1, test_tup2)\n    # return make_list(test_tup1, test_tup2)\n    # return''.join(str_list(test_tup1, test_tup2))\n    \ndef convert_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and converts them to the type specified.\n    '''\n    def make_list(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and returns a list of the tuples with the correct order.\n        '''\n        return list(test_tup1) + list(test_tup2)\n    test_tup1 = make_list(test_tup1, test_tup2)\n    test_tup1 = list(test_tup1)\n    test_tup1.sort()\n    test_tup1.reverse()\n    return test_tup1\n    # return str_list(test_tup1, test_tup2)\n    # return make_list(test_tup1, test_tup2)\n    # return''.join(str_list(test_tup1, test_tup2))\n    \ndef test_elements():\n    '''\n    Write a function that takes in two tuples and checks if all elements in the first are as expected.\n    '''\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '3')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n    assert add_elements(('1', '2'), ('3', '4')) == ('1', '2', '3', '4')\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    test_tup1 = test_tup1\n    test_tup2 = test_tup2\n    \n    #get the length of the first tuple\n    len_first_tup = len(test_tup1)\n    #get the length of the second tuple\n    len_second_tup = len(test_tup2)\n    \n    #loop through the number of elements in the first tuple\n    for i in range(len_first_tup):\n        #if there are any elements in the second tuple, subtract one from that element\n        if len(test_tup2) > 1:\n            #get the index of the current element of the second tuple\n            index = len(test_tup2)-1\n            \n            #if the first element of the second tuple is the last element of the first tuple, subtract the first element from the second element\n            if test_tup2[index][1] == test_tup1[-1][1]:\n                test_tup2[index][1] -= test_tup1[-1][1]\n                \n            #if the second element of the second tuple is the last element of the first tuple, subtract the second element from the first element\n            elif test_tup2[index][1] == test_tup1[-1][1]:\n                test_tup2[index][1] -= test_tup1[-1][1]\n                \n            #if the first element of the second tuple is not the last element of the first tuple, do nothing\n            else:\n                continue\n        else:\n            continue\n    \n    #loop through the number of elements in the second tuple\n    for i in range(len_second_tup):\n        #if there are any elements in the first tuple, subtract one from that element\n        if len(test_tup1) > 1:\n            #get the index of the current element of the first tuple\n            index = 0\n            \n            #if the first element of the first tuple is the last element of the second tuple, subtract the first element from the second element\n            if test_tup1[index][1] == test_tup2[-1][1]:\n                test_tup1[index][1] -= test_tup2[-1][1]\n                \n            #if the second element of the first tuple is the last element of the second tuple, subtract the second element from the first element\n            elif test_tup1[index][1] == test_tup2[-1][1]:\n                test_tup1[index][1] -= test_tup2[-1][1]\n                \n            #if the first element of the first tuple is not the last element of the second tuple, do nothing\n            else:\n                continue\n        else:\n            continue\n    \n    #if there are any elements in the first tuple, return the value of the second tuple\n    if len(test_tup1) > 1:\n        return test_tup2[index][1]\n    else:\n        return 0\n    "
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    test_tup2 = (4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through tuples and subtract them\n    for i in range(len(test_tup1)):\n        # assign the elements of the first tuple to the variable x\n        x = test_tup1[i]\n        # loop through the second tuple\n        for j in range(len(test_tup2)):\n            # assign the element of the second tuple to the variable y\n            y = test_tup2[j]\n            # check if the element of y is equal to the element of x\n            if y == x:\n                # if it is add it to the resulting list\n                test_tup1[i] = y + x\n            # if it isn't equal, change the variable y to be z\n            else:\n                z = y - x\n                test_tup1[i] = z\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output = []\n    for x in range(0, len(test_tup1)):\n        for y in range(0, len(test_tup2)):\n            output.append(test_tup1[x] - test_tup2[y])\n    return output\n    \n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and multiply the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output = []\n    for x in range(0, len(test_tup1)):\n        for y in range(0, len(test_tup2)):\n            output.append(test_tup1[x] * test_tup2[y])\n    return output\n    \n    \ndef divide_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and divide the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    output = []\n    for x in range(0, len(test_tup1)):\n        for y in range(0, len(test_tup2)):\n            output.append(test_tup1[x] // test_tup2[y])\n    return output\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    \n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(2, n + 1, 2):\n        s = s + (i * (math.factorial(i) / math.factorial(i - 2))) * (i - 2) \n        # n(2) + i(3) + i(4) +....\n    return s\nprint(even_binomial_Coeff_Sum(9))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #base case: if n = 0: return 0\n    if n==0: return 0\n    \n    #base case: if n = 1: return 1\n    if n==1: return 1\n    \n    #base case: if n is even: return (n*2)\n    if n%2==0: return (n*even_binomial_Coeff_Sum(n/2))\n    \n    #base case: if n is odd: return (2*n + 1)\n    if n%2!=0: return (n*2 + 1)\n    \n    #base case: n>10: return 0\n    return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Use the following formula to compute the binomial coefficients of n\n    return (n - (n % 2))*(n % 2) + (n % 2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 0\n    if n <= 0:\n        print('Please enter an positive integer!')\n    else:\n        for i in range(2,n+1):\n            a = a + math.factorial(i)\n    return a\n    \ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    a = 0\n    if n <= 0:\n        print('Please enter an positive integer!')\n    else:\n        for i in range(2,n+1):\n            a = a + math.factorial(i)\n    return a\n    \ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = 0\n    if n <= 0:\n        print('Please enter an positive integer!')\n    else:\n        for i in range(2,n+1):\n            a = a + math.factorial(i)\n    return a\n    \ndef odd_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    a = 0\n    if n <= 0:\n        print('Please enter an positive integer!')\n    else:\n        for i in range(2,n+1):\n            a = a + math.factorial(i)\n    return a\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of binomial coefficient for all the integers from 2 to n.\n    '''\n    c = 0\n    for i in range(2,n+1):\n        c = c + math.factorial(i)\n    return c\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.factorial(n) // (math.factorial(n - 1) * math.factorial(n - 2))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    #return the sum of even index binomial coefficients\n    if n < 2:\n        return 1\n    \n    #initialise the sum\n    sum = 0\n    \n    #loop through the values\n    for x in range(2, n+1):\n        #find the index of the first even\n        index = math.floor(x)\n        #find the index of the last even\n        index2 = index - 1\n        \n        #find the sum of the first even\n        sum += even_binomial_Coeff_Sum(index)\n        #find the sum of the last even\n        sum += even_binomial_Coeff_Sum(index2)\n        #add the sum\n        sum += x\n        \n        \n    #return the sum\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2 or n == 0: \n        return 0\n    else:\n        return int(n ** 0.5) * even_binomial_Coeff_Sum(n - 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # I want this one for the first half of my challenge. \n    # If n is even, I want to divide it by 3, and add 1.\n    # If n is odd, I want to add one.\n    # I don't want the result in the middle, but want to return it.\n    \n    if n == 1:\n        return 1\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    if n == 0:\n        return 0\n    for i in range(n):\n        total += (1 + 4 * (i+1)) * even_binomial_Coeff_Sum(i)\n    return total\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*math.pi\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*pi*r**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate volume using volume formula\n    volume = 4*3.14*r*h**3\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*pi*r**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = h*r*4\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4*np.pi*r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 1/3 * r * r * h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*3.14*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*np.pi*(r**3)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict = {}\n    for key, value in dict.items():\n        if value >= n:\n            newDict[key] = value\n    return newDict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = dict()\n    for k,v in dict.items():\n        if v >= n:\n            d[k] = v\n    return d\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list_ = []\n    for i in dict.values():\n        if i > n:\n            list_.append(i)\n    print(list_)\n    return list_\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # filter the dictionary with values greater than or equal to n\n    result = {value:value for value in dict.values() if value >=n}\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict2=dict.copy()\n    for key, value in dict2.items():\n        if value>=n:\n            dict2.pop(key)\n    return dict2\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        new_dict[k] = [x for x in v if x > n]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    # Calculate the length of the dictionary\n    len_dict = len(dict)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    out = {}\n    for key in dict:\n        if dict[key] > n:\n            out[key] = dict[key]\n    return out\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i <= test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i == test_tup[0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # \n    elements_before_first_element = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[0]:\n            elements_before_first_element += 1\n    return elements_before_first_element\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    elem_1 = test_tup[0]\n    elem_2 = test_tup[1]\n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] == elem_1:\n            count = count + 1\n        if test_tup[i] == elem_2:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    from collections import Counter\n    if len(test_tup) == 1:\n        print(\"Tupla vac\u00eda\")\n    elif test_tup[0] in test_tup[1:]:\n        print(f\"Tupla con {len(test_tup[1:])} elementos\")\n    else:\n        print(f\"Tupla con {len(test_tup[1:])} elementos\")\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    print(\"Number of elements that occurs before\", test_tup[0], \"is:\", count)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 1\n    \n    cnt = 0\n    i = 1\n    while i < len(test_tup) - 1:\n        if test_tup[i] < test_tup[i+1]:\n            i += 1\n            continue\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i] < test_tup[i+1]:\n            cnt += 1\n        i += 1\n    return cnt\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    elements = 0\n    if test_tup[0]!= '-':\n        for i in range(len(test_tup)):\n            elements += 1\n    return elements\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    my_tup = test_tup\n    count = 0\n    for i in range(len(my_tup)):\n        if my_tup[i] == my_tup[i - 1]:\n            count = count + 1\n    print(count)\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n):\n        if (n % i) == 0:\n            return i\n    return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 5\n    else: \n        return (n-1)*5 + (n-2)*(n-3)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    else:\n        return (n*(n+1))/6\n    \ndef is_num_diagonal(n):\n    '''\n    Write a function to find the nth diagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 10\n    else:\n        return (n*(n+1))/2\n    \ndef main():\n    print(is_num_triangle(5))\n    print(is_num_triangle(3))\n    print(is_num_triangle(7))\n    print(is_num_triangle(24))\n    print(is_num_triangle(45))\n    print(is_num_triangle(63))\n    print(is_num_triangle(181))\n    print(is_num_triangle(11))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==1: \n        return 1\n    else: \n        return is_num_decagonal(n-1) + is_num_decagonal(n-2) \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    c = n//2\n    if n % 2 == 0:\n        if c == 0:\n            return True\n        else:\n            return False\n    else:\n        if c == 1:\n            return True\n        else:\n            return False\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    i = 1\n    while(i <= n):\n        temp = i\n        i += 1\n        num += temp\n        \n    return num\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 5\n    elif n == 3: \n        return -9\n    else: \n        return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n1 = n\n    n2 = n - 1\n    lst = []\n    while True:\n        if n1 % 2 == 0 and n2 % 2 == 0:\n            lst.append(n1)\n            lst.append(n2)\n            break\n        elif n1 % 2 == 1 and n2 % 2 == 1:\n            lst.append(n1)\n            lst.append(n2)\n            break\n        elif n1 % 2 == 1 and n2 % 2 == 1:\n            lst.append(n1)\n            lst.append(n2)\n            break\n        else:\n            n2 += 1\n            \n    return lst[n]\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return -1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = n + 1\n    n = n + 1\n    if n == 1:\n        return i\n    else:\n        return is_num_decagonal(n - 1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index,value in enumerate(dlist):\n        if value == item:\n            return (index,index)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, el in enumerate(dlist):\n        if el == item:\n            return (True, i)\n        else:\n            pass\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return next((i for i, item_position in enumerate(dlist) if item == item_position[0]), -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #iterate through the array\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (i == len(dlist)-1,i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    result = ()\n    while index < len(dlist):\n        if dlist[index] == item:\n            result = (True, index)\n            break\n        index += 1\n    return result\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = -1\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            position = i\n            break\n    return (position!= -1, position)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # TODO: replace the nested loop with a for loop\n    # TODO: your code here\n    pos=0\n    for position,element in enumerate(dlist):\n        if(element == item):\n            return(True, position)\n        else:\n            pos+=1\n            continue\n    \n    return(False, -1"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    for x in range(len(dlist)):\n        if dlist[x] == item:\n            return (x == len(dlist) - 1, i)\n        i += 1\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    search = False\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            search = True\n    return search, i\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 1:\n        return True\n    if len(test_list) % 2 == 0:\n        for i in range(len(test_list)):\n            if test_list[i] == test_list[i + 1]:\n                return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set)!= len(test_list):\n        return False\n    else:\n        return True\n    \ndef test_all_unique():\n    '''\n    This function tests all_unique function.\n    '''\n    test_list = [1,1,2,1,1,2,1,2,3,4,5,6,7,8,9]\n    assert all_unique(test_list) == True\n    assert all_unique(test_list) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in range(len(test_list)):\n        if test_list[i] not in unique:\n            unique.append(test_list[i])\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in test_list:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        else:\n            seen.add(item)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 1:\n        return True\n    else:\n        return False\n    \n    # Write your code here.\ntest_list = [1, 1, 2, 3, 3, 3, 4]\nprint(all_unique(test_list))\ntest_list = ['a', 'a', 'a', 'b', 'c', 'b', 'd', 'a']\nprint(all_unique(test_list))\ntest_list = [5, 5, 5, 5, 5, 5, 5]\nprint(all_unique(test_list))\ntest_list = ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'f', 'f', 'f', 'f', 'g', 'g', 'g', 'g', 'g', 'h', 'h', 'h', 'h', 'i', 'i', 'i', 'i', 'i', 'j', 'j', 'j', 'j', 'j', 'k', 'k', 'k', 'k', 'k', 'l', 'l', 'l', 'l','m','m','m','m','m', 'n', 'n', 'n', 'o', 'o', 'o', 'o', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r','s','s','s','s', 't', 't', 't', 't', 'u', 'u', 'u', 'u', 'u', 'v', 'v', 'v', 'v', 'w', 'w', 'w', 'w', 'y', 'y', 'z', 'z']\nprint(all_unique(test_list))\ntest_list = ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'f', 'f', 'f', 'f', 'f', 'f', 'g', 'g', 'g', 'g', 'g', 'g', 'h', 'h', 'h', 'h', 'i', 'i', 'i', 'i', 'i', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'k', 'k', 'k', 'k', 'k', 'l', 'l', 'l', 'l','m','m','m','m','m','m', 'n', 'n', 'n', 'n', 'o', 'o', 'o', 'o', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r','s','s','s','s','s', 't', 't', 't', 't', 't', 'u', 'u', 'u', 'u', 'u', 'v', 'v', 'v', 'v', 'v', 'w', 'w', 'w', 'w', 'y', 'y', 'y', 'y', 'z', 'z']\nprint(all_unique(test_list))\ntest_list = ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', 'h', 'h', 'h', 'h', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'l', 'l', 'l', 'l', 'l','m','m','m','m','m','m', 'n', 'n', 'n', 'n', 'n', 'n', 'o', 'o', 'o', 'o', 'o', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r','s','s','s','s','s','s','s', 't', 't', 't', 't', 't', 't', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'v', 'v', 'v', 'v', 'v', 'w', 'w', 'w', 'w', 'w', 'w', 'y', 'y', 'y', 'y', 'y', 'z', 'z']\nprint(all_unique(test_list))\ntest_list = ['a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', 'h', 'h', 'h', 'i', 'i', 'i', 'i', 'i', 'i', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'j', 'k', 'k', 'k', 'k', 'k', 'k', 'l', 'l', 'l', 'l', 'l','m','m','m','m','m','m','m', 'n', 'n', 'n', 'n', 'n', 'n', 'o', 'o', 'o', 'o', 'o', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r','s','s','s','s','s','s', 't', 't', 't', 't', 't', 't', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'u', 'v', 'v', 'v', 'v', 'v', 'v', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'y', 'y', 'y', 'y', 'y', 'y', 'z', 'z', 'z', 'z']\nprint(all_unique(test_list))\ntest_list = ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'h', 'h', 'h'"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list_unique = []\n    for i in range(len(test_list)):\n        test_list_unique.append(test_list[i])\n    return len(set(test_list_unique)) == len(test_list_unique)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a dictionary of the unique elements of the list\n    dict_unique = {}\n    for element in test_list:\n        if element in dict_unique:\n            dict_unique[element] = element\n        else:\n            dict_unique[element] = element\n    return dict_unique"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == len(nums2):\n        res = []\n        for i in range(len(nums1)):\n            res.append(nums1[i]-nums2[i])\n    else:\n        print('ERROR: No such list has been input!')\n    return res\n    #raise NotImplementedError\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num - elem for num, elem in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for num in nums1:\n        result.append(num)\n    for num in nums2:\n        result.append(num)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums=[]\n    for i in nums2:\n        nums.append(i)\n    i=0\n    while i<len(nums1):\n        j=0\n        while j<len(nums):\n            nums[j]=nums1[i]-nums[j]\n            j+=1\n        i+=1\n    return nums\ndef check_neighbour(nums,x,y):\n    '''\n    Write a function to return the number of neighbours of the position x,y.\n    '''\n    count=0\n    if 0<=x<len(nums) and 0<=y<len(nums):\n        count+=1\n    return count\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    def isSubset(lst,sub):\n        '''\n        Check if a list contains the sublist.\n        '''\n        for i in sub:\n            if i not in lst:\n                return False\n        return True\n        \n    def fun(lst,sub):\n        '''\n        Return a new list with the sublist.\n        '''\n        return [i for i in lst if not isSubset(lst,sub)]\n    return fun(nums1,nums2)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums1:\n        list1.append(i)\n        \n    #Create a list of the second list\n    list2=[]\n    for i in nums2:\n        list2.append(i)\n    \n    #Return the list\n    return list1,list2\n    \n    \ndef list_multiplication(nums):\n    '''\n    Write a function to compute multiplication of a list of numbers.\n    '''\n    \n    #Create a list to multiply\n    list_multiplied=[]\n    for i in range(len(nums)):\n        list_multiplied.append(nums[i]*nums[i])\n    \n    #Return the list\n    return list_multiplied\n    \n    \ndef triple_multiplication(nums):\n    '''\n    Write a function to compute triple multiplication of a list of numbers.\n    '''\n    \n    #Create a list to multiply\n    list_multiplied=[]\n    for i in range(3):\n        list_multiplied.append(nums[i]*nums[2-i])\n    \n    #Return the list\n    return list_multiplied\n    \n    \ndef list_multiplication_with_numbers(nums):\n    '''\n    Write a function to compute multiplication of a list of numbers with \n    the number of the element.\n    '''\n    \n    #Create a list to multiply\n    list_multiplied=[]\n    for i in range(len(nums)):\n        list_multiplied.append(nums[i]*nums[i])\n    \n    #Return the list\n    return list_multiplied\n    \n    \ndef max_sublist(nums1,nums2):\n    '''\n    Write a function that returns the largest sublist of the two given lists.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums1:\n        list1.append(i)\n        \n    #Create a list of the second list\n    list2=[]\n    for i in nums2:\n        list2.append(i)\n    \n    #Create a list of the largest sublist\n    list_sublist1=list1[:]\n    list_sublist2=list2[:]\n    for i in range(len(list_sublist1)):\n        list_sublist1[i]=' '\n        list_sublist2[i]=' '\n    \n    #Return the list\n    return list_sublist1,list_sublist2\n    \n    \ndef list_reorder(nums):\n    '''\n    Write a function that takes in a list and reorders the list.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums:\n        list1.append(i)\n        \n    #Create a list of the second list\n    list2=[]\n    for i in range(len(nums)):\n        list2.append(nums[i])\n    \n    #Create a list of the third list\n    list3=[]\n    for i in range(len(nums)):\n        list3.append(nums[len(nums)-i-1])\n    \n    #Return the list\n    return list1,list2,list3\n    \n    \ndef list_sum(nums1,nums2):\n    '''\n    Write a function that takes in a list and sums the two lists.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums1:\n        list1.append(i)\n        \n    #Create a list of the second list\n    list2=[]\n    for i in nums2:\n        list2.append(i)\n    \n    #Return the list\n    return list1+list2\n    \n    \ndef list_sum_with_numbers(nums):\n    '''\n    Write a function that takes in a list of numbers and sums the list.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums:\n        list1.append(i)\n        \n    #Create a list of the second list\n    list2=[]\n    for i in range(len(nums)):\n        list2.append(nums[i])\n    \n    #Return the list\n    return list1+list2\n    \n    \ndef find_even(nums):\n    '''\n    Write a function that takes in a list and finds the first even number in the list.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums:\n        list1.append(i)\n        \n    #Create a list of the first even number\n    list2=[]\n    for i in range(len(nums)):\n        if i%2==0:\n            list2.append(nums[i])\n    \n    #Return the list\n    return list1+list2\n    \n    \ndef is_palindrome(nums):\n    '''\n    Write a function that takes in a list and checks if the list is a palindrome.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums:\n        list1.append(i)\n        \n    #Create a list of the first even number\n    list2=[]\n    for i in range(len(nums)):\n        if i%2!=0:\n            list2.append(nums[i])\n    \n    #Return the list\n    return list1==list2\n    \n    \ndef odd_even(nums):\n    '''\n    Write a function that takes in a list and checks if the list is odd or even.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums:\n        list1.append(i)\n        \n    #Create a list of the first even number\n    list2=[]\n    for i in range(len(nums)):\n        if i%2==0:\n            list2.append(nums[i])\n    \n    #Return the list\n    return list1==list2\n    \n    \ndef is_triple(nums):\n    '''\n    Write a function that takes in a list and checks if the list is a triple.\n    '''\n    \n    #Create a list of the first list\n    list1=[]\n    for i in nums:\n        list1.append(i)\n        \n    #Create a list of the first even number\n    list2=[]\n    for i in range(len(nums)):\n        if i%2==0:\n            list2.append(nums[i])\n    \n    #Return the list\n    return list1==list2\n    \n    \ndef main():\n    '''\n    This program will ask the user to input any number and see if they are anagrams, \n    triples, or palindromes. If they are anagrams then it will ask them to \n    input their first and second numbers and then check if they are similar. \n    If they are similar then it will print a message to the user that the\n    numbers are similar. If they are not similar then the program will ask them \n    to input their first and second numbers and then compare the numbers and \n    if they are anagrams then it will print a message to the user that they are anagrams. \n    If they are not anagrams then it will print a message to the user that they are not anagrams.\n    '''\n    \n    #Create an input variable to hold the first number\n    first_number=input('Please enter a number ')\n    \n    #Create an input variable to hold the second number\n    second_number=input('Please enter a number ')\n    \n    #Create a list to store the input\n    number=[]\n    \n    #Create a variable to store the first number\n    number.append(first_number)\n    \n    #Create a variable to store the second number\n    number.append(second_number)\n    \n    #Call the sub_list function and store the list\n    nums1,nums2=sub_list(number,number)\n    \n    #Call the list_multiplication function and store the list\n    nums3"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    n = len(nums1)\n    res = []\n    for i in range(n):\n        if nums1[i] in nums2:\n            res.append(nums1[i])\n            nums1.remove(nums1[i])\n            nums2.remove(nums2[i])\n    return res\n    # TODO: Write an efficient implementation of sub_list that uses O(n) time complexity.\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list=[]\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == len(nums2):\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    n=0\n    while(n<len(nums1)):\n        if(n>0):\n            temp=nums1[n]-nums2[n]\n        else:\n            temp=nums1[n]\n        n+=1\n        nums1.pop(n)\n        nums2.pop(n)\n        n=0\n        if(temp<0):\n            break\n    return nums1\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0: \n        print(\"Please enter a positive number\") \n        return validate(n) \n    else: \n        return n \n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #We will assume that the input is a positive integer and the output will have a list of the indices of the digits in the string.\n    #This will help us identify the digits with the index. \n    #This step would also reduce the memory usage by assuming the number to be an integer and not a string.\n    \n    if len(str(n))!= len(str(int(n))):\n        return -1\n    \n    num_list = []\n    for i in range(len(str(n))):\n        num_list.append(int(str(n)[i]))\n    return num_list\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0:\n        return False\n    # n = n * 10\n    # print(f\"{n} is less than or equal to {n%10}\")\n    for i in range(10):\n        if n % 10 == i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(0,n,1): \n        if(i!=n-1):\n            if(int(str(n)[i])<int(str(n)[i+1])):\n                print(\"INVALID\")\n        else:\n            print(int(str(n)[i]))\n    return(0)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # 2. Note that we are not passing a range, so we can use a for loop for this task.\n    # 2.1. Create a variable called num_sum that is equal to 0.\n    # 2.2. Create a variable called is_valid that is equal to False.\n    # 2.3. Initialize a variable that is equal to the length of the input string.\n    # 2.4. Loop through the string of digits.\n    # 2.5. If the character at the index is not a digit, then we add it to the variable called num_sum.\n    # 2.6. If the character at the index is equal to the letter '0', then we return num_sum == 0.\n    # 2.7. If the character at the index is equal to the letter '1', then we return num_sum == 1.\n    # 2.8. If the character at the index is equal to the letter '2', then we return num_sum == 2.\n    # 2.9. If the character at the index is equal to the letter '3', then we return num_sum == 3.\n    # 2.10. If the character at the index is equal to the letter '4', then we return num_sum == 4.\n    # 2.11. If the character at the index is equal to the letter '5', then we return num_sum == 5.\n    # 2.12. If the character at the index is equal to the letter '6', then we return num_sum == 6.\n    # 2.13. If the character at the index is equal to the letter '7', then we return num_sum == 7.\n    # 2.14. If the character at the index is equal to the letter '8', then we return num_sum == 8.\n    # 2.15. If the character at the index is equal to the letter '9', then we return num_sum == 9.\n    # 2.16. If the character at the index is equal to the letter '10', then we return num_sum == 10.\n    # 2.17. If the character at the index is equal to the letter '11', then we return num_sum == 11.\n    # 2.18. If the character at the index is equal to the letter '12', then we return num_sum == 12.\n    # 2.19. If the character at the index is equal to the letter '13', then we return num_sum == 13.\n    # 2.20. If the character at the index is equal to the letter '14', then we return num_sum == 14.\n    # 2.21. If the character at the index is equal to the letter '15', then we return num_sum == 15.\n    # 2.22. If the character at the index is equal to the letter '16', then we return num_sum == 16.\n    # 2.23. If the character at the index is equal to the letter '17', then we return num_sum == 17.\n    # 2.24. If the character at the index is equal to the letter '18', then we return num_sum == 18.\n    # 2.25. If the character at the index is equal to the letter '19', then we return num_sum == 19.\n    # 2.26. If the character at the index is equal to the letter '20', then we return num_sum == 20.\n    # 2.27. If the character at the index is equal to the letter '21', then we return num_sum == 21.\n    # 2.28. If the character at the index is equal to the letter '22', then we return num_sum == 22.\n    # 2.29. If the character at the index is equal to the letter '23', then we return num_sum == 23.\n    # 2.30. If the character at the index is equal to the letter '24', then we return num_sum == 24.\n    # 2.31. If the character at the index is equal to the letter '25', then we return num_sum == 25.\n    # 2.32. If the character at the index is equal to the letter '26', then we return num_sum == 26.\n    # 2.33. If the character at the index is equal to the letter '27', then we return num_sum == 27.\n    # 2.34. If the character at the index is equal to the letter '28', then we return num_sum == 28.\n    # 2.35. If the character at the index is equal to the letter '29', then we return num_sum == 29.\n    # 2.36. If the character at the index is equal to the letter '30', then we return num_sum == 30.\n    # 2.37. If the character at the index is equal to the letter '31', then we return num_sum == 31.\n    # 2.38. If the character at the index is equal to the letter '32', then we return num_sum == 32.\n    # 2.39. If the character at the index is equal to the letter '33', then we return num_sum == 33.\n    # 2.40. If the character at the index is equal to the letter '34', then we return num_sum == 34.\n    # 2.41. If the character at the index is equal to the letter '35', then we return num_sum == 35.\n    # 2.42. If the character at the index is equal to the letter '36', then we return num_sum == 36.\n    # 2.43. If the character at the index is equal to the letter '37', then we return num_sum == 37.\n    # 2.44. If the character at the index is equal to the letter '38', then we return num_sum == 38.\n    # 2.45. If the character at the index is equal to the letter '39', then we return num_sum == 39.\n    # 2.46. If the character at the index is equal to the letter '40', then we return num_sum == 40.\n    # 2.47. If the character at the index is equal to the letter '41', then we return num_sum == 41.\n    # 2.48. If the character at the index is equal to the letter '42', then we return num_sum == 42.\n    # 2.49. If the character at the index is equal to the letter '43', then we return num_sum == 43.\n    # 2.50. If the character at the index is equal to the letter '44', then we return num_sum == 44.\n    # 2.51. If the character at the index is equal to the letter '45', then we return num_sum == 45.\n    # 2.52. If the character at the index is equal to the letter '46', then we return num_sum == 46.\n    # 2.53. If the character at the index is equal to the letter '47', then we return num_sum == 47.\n    # 2.54. If the character at the index is equal to the letter '48', then we return num_sum == 48.\n    # 2.55. If the character at the index is equal to the letter '49', then we return num_sum == 49.\n    # 2.56. If the character at the index is equal to the letter '50', then we return num_sum == 50.\n    # 2.57. If the character at the index is equal to the letter '51', then we return num_sum == 51.\n    # 2.58. If the character at the index is equal to the letter '52', then we return num_sum == 52.\n    # 2.59. If the character at the index is equal to the letter '53', then we return num_sum == 53.\n    # 2.60. If the character at the index is equal to the letter '54', then we return num_sum == 54.\n    # 2.61. If the character at the index is equal to the letter '55', then we return num_sum == 55.\n    # 2.62. If the character at the index is equal to the letter '56', then we return num_sum == 56.\n    # 2.63. If the character at the index is equal to the letter '57', then we return num_sum == 57.\n    # 2.64. If the character at the index is equal to the letter '58', then we return num_sum == 58.\n    # 2.65. If the character at the index is equal to the letter '59', then we return num_sum == 59.\n    # 2.66. If the character at the index is equal to the letter '60', then we return num_sum == 60.\n    # 2.67. If the character at the index is equal to the letter '61', then we return num_sum == 61.\n    # 2.68. If the character at th"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = sum(map(int, str(n)))\n    if(s == n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = n\n    for i in range(len(str(n))):\n        if (n % 10) == int(str(n)[i]) and temp!= n:\n            return \"too many or zero\"\n        temp = temp // 10\n    if (n % 10) == int(str(n)[i]) and temp!= n:\n        return \"too many or zero\"\n    return \"valid\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError('Integer must be of type int')\n    if n < 0:\n        raise ValueError('Integer must be greater than 0')\n    d = [0,1,2,3,4,5,6,7,8,9]\n    for i in range(0,10):\n        if i not in d:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #Your code goes here\n    for i in range(1,10):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return list == [x for x in list if x == element]\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        index = list.index(element)\n        list.remove(element)\n        list.insert(index,element)\n        print(list)\n    else:\n        print(\"The element not found\")\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # create a empty list for storing the values\n    new_list = []\n    \n    # iterate through the list, checking each item\n    for element in list:\n        if element == element:\n            new_list.append(element)\n    \n    # return the list with the values\n    return new_list\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Your code here\n    new_list = []\n    i=0\n    for i in range(len(list)):\n        if list[i]!= element:\n            new_list.append(list[i])\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    for elem in list:\n        if elem!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    result = True\n    for item in list:\n        if item!= element:\n            result = False\n    return result\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = text.lower()\n    text = text.replace('a', 'a')\n    text = text.replace('b', 'b')\n    text = text.replace('c', 'c')\n    pattern = re.compile(r'\\b[ab]\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower()\n    # find the first 'a' and check whether the text contains 'b' and 'a'\n    a = 0\n    b = 0\n    while a < len(text):\n        if text[a] == 'a' and text[a+1] == 'b':\n            return True\n        a += 1\n    # if the text does not contain 'a' or 'b' then return False\n    return False\n    \ndef text_match_two_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Your code here\n    # remove the \\n and \\r characters, and the whitespace characters.\n    text = text.replace('\\n', '')\n    text = text.replace('\\r', '')\n    # remove any leading and trailing whitespace characters.\n    text = text.replace(' ', '')\n    # Convert all characters in the text to lowercase letters.\n    text = text.lower("
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a_counter = 0\n    b_counter = 0\n    for i in text:\n        if i == 'a':\n            a_counter += 1\n        elif i == 'b':\n            b_counter += 1\n        if a_counter == 2 and b_counter == 3:\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.findall(r'[a-b]', text)\n    if m:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a_regex = re.compile(r'[a-z]+')\n    two_regex = re.compile(r'[a-z]+')\n    three_regex = re.compile(r'[a-z]+')\n    res = a_regex.match(text)\n    res = two_regex.match(text)\n    res = three_regex.match(text)\n    return res\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_a = re.search('(a){2}', text)\n    match_b = re.search('(b){2}', text)\n    if match_a and match_b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_lower = text.lower()\n    pattern_1 = re.compile('a[^b]*[a]*b')\n    pattern_2 = re.compile('a[^b]*[a]*b[^c]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[b]*[a]*[b]*[b]*[a]*[b]*[b]*[a]*[b]*[a]*[b]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[b]*[a]*[b]*[a]*[b]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]*[b]*[a]"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 3:\n        return False\n    pattern = r'[a-zA-Z]+\\w+'\n    m = re.findall(pattern, text)\n    if len(m) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r'^([bc]{2})([bc]{2})([bc]{2})$',text)!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    \n    res = 0\n    for i in range(n):\n        res += k * a[i]\n    return re"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = []\n    dp = [[0]*(k+1) for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0:\n                dp[i][j] = a[i]\n            else:\n                if j==0:\n                    dp[i][j] = dp[i-1][j] + a[i]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]+a[i])\n    max_value = dp[n][k]\n    for i in range(n, n+k):\n        result.append(dp[i][k])\n    return max(result)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n<=1: \n        return a[n]\n    else: \n        result = [0 for i in range(n+1)]\n        for i in range(1, n+1): \n            result[i] = result[i-1] + a[i]\n            #  if (i-k >= 0): \n        return max(result[k:]) \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = sum(a)\n    if s % k!= 0:\n        return -1\n    else:\n        ans = 0\n        for i in range(n):\n            ans = max(ans, a[i])\n            for j in range(i, n, k):\n                ans = max(ans, a[j])\n        return ans\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the largest sum of a in a\n    # divide the array into subarray in which the largest sum of subarray is repeated.\n    # the array is arranged into subarray\n    # return the largest sum in subarray\n    # for each subarray in subarray, find the largest sum in subarray\n    # return the sum of each subarray\n    # return a sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if a is None: \n        return None\n    if a==[]: \n        return 0\n    max_sum = 0\n    max_sum_index = 0\n    for i in range(n): \n        sum_array = a[i] \n        for j in range(k): \n            sum_array = (sum_array + a[i - j]) \n        max_sum = max(max_sum, sum_array) \n        if sum_array > max_sum: \n            max_sum = sum_array \n            max_sum_index = i \n    return max_sum, max_sum_index\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # dp[i][j] = a[i] + a[i-j]\n    # max_sum = dp[i][j]\n    # i = j = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    for i in range(k):\n        sum += a[i]\n    return sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    temp_sum = a[0]\n    for i in range(1, n):\n        temp_sum = a[i] + max(a[i-1], a[i-k])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sums = [0 for i in range(k)]\n    arr = []\n    max_value = 0\n    for i in range(n):\n        arr.append(a[i])\n        for j in range(n):\n            sums[j] += arr[j]\n        arr.pop()\n        sums[i] = sums[i] - arr[i]\n        if max_value < sums[i]:\n            max_value = sums[i]\n    return max_value\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i<n:\n        sum_of_squares = sum_of_squares + i*i\n        i = i+1\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_square = 0\n    for i in range(1, n):\n        sum_square += i ** 2\n    return sum_square\n    \ndef main():\n    '''\n    Write a python function that takes in a number and returns the sum of squares of all even natural numbers.\n    '''\n    print(square_Sum(6))\n    print(square_Sum(4))\n    print(square_Sum(9))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i**2\n    return s\nprint(square_Sum(100))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n + 1):\n        sum += i**2\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += (i**2)\n    return s\nprint(square_Sum(100))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += i**2\n    print(sum_of_squares)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(1, n + 1, 2):\n        sum += i ** 2 \n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n==0:\n        return 0\n    \n    return (square_Sum(n-1))+square_Sum(n/2)\n    \n    \n    \ndef square_sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of squares of all numbers from 1 to n.\n    '''\n    if n==0:\n        return 0\n    \n    return square_sum(n-1)+square_sum(n/2)\n    \n    \n    \ndef square_sum_rec(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of squares of all numbers from 1 to n.\n    '''\n    if n==0:\n        return 0\n    \n    if n==1:\n        return 1\n    \n    return square_sum_rec(n-1)+square_sum_rec(n/2)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    square_sum = 0\n    for i in range(1, n+1):\n        square_sum = square_sum + i**2\n    return square_sum\n    # return square_sum\ndef max_Diff(n):\n    '''\n    Write a python function takes in a number and return the maximum difference in it.\n    '''\n    difference = 0\n    for i in range(n, 0, -1):\n        difference = i - difference\n    return difference\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(str(list1[i][j])) > max:\n                max = len(str(list1[i][j]))\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        for j in i:\n            if len(j) > max_length:\n                max_length = len(j)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l=list1\n    for i in range(len(l)):\n        max_len=max(l[i])\n        for j in range(len(l[i])):\n            if max_len[j]==0:\n                l[i][j]=l[i][j]\n                max_len[j]=l[i][j]\n            else:\n                l[i][j]=l[i][j]+max_len[j]\n        l[i]=l[i][:2]\n    return(max(l,key=len))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 1:\n        return len(list1[0])\n    else:\n        return max(list1[0])\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return 0\n    if len(list1) == 1:\n        return len(list1[0])\n    else:\n        return max(map(len, list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    def longest_list(l):\n        '''\n        Return the longest list of lists in a list of lists.\n        '''\n        max_len = 0\n        for element in l:\n            if len(element) > max_len:\n                max_len = len(element)\n        return max_len\n    l = []\n    for element in list1:\n        l.append(element)\n    return longest_list(l)\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # define a function that finds the maximum length of a list\n    def max_length_list(l):\n        '''\n        finds the maximum length of the list\n        l: list\n        '''\n        l_len = 0\n        # iterate through each element of the list\n        for i in l:\n            # if the element is larger, increase the length\n            if len(i) > l_len:\n                l_len = len(i)\n        return l_len\n    # find the maximum length of the list\n    return max_length_list(list1)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1.sort()\n    new_list = []\n    for x in list1:\n        if len(str(x)) > len(str(max(list1))):\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 1\n    for sublist in list1:\n        max_length = max(max_length, len(sublist))\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    new_list = []\n    max = 0\n    for i in list1:\n        new_list.append(len(i))\n    for i in new_list:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1 or k==1:\n        return n\n    return count_no_of_ways(n-1,k)+count_no_of_ways(n-1,k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 1 or k < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif k == 1:\n        return n * count_no_of_ways(n - 1, k)\n    else:\n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n    \nprint(count_no_of_ways(5, 3)"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1 and k==1:\n        return 1\n    if k==1:\n        return 2**k\n    elif n<=1:\n        return 0\n    else:\n        return 2**(k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (k == n): \n        return n\n    elif (n <= 2): \n        return (n ** 2) * 2 \n    elif (n % 2 == 0): \n        n = n // 2 \n        return count_no_of_ways(n, k) \n    elif (n % 2 == 1): \n        k = k - 1 \n        return count_no_of_ways(n, k) \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    \n    count = 0\n    left = 2 * n - 2\n    right = k\n    while left <= right:\n        mid = (left + right) // 2\n        if right > mid:\n            if left <= mid:\n                if n <= mid:\n                    count = count + (mid - right)\n                right = mid\n            else:\n                if n <= mid:\n                    count = count + left\n                left = mid + 1\n        else:\n            if n <= mid:\n                count = count + left\n            if n <= mid + 1:\n                count = count + left - mid\n                left = mid + 1\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 1 or k < 1:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0 or n < 2: \n        return 1\n    \n    ways = 0 \n    for i in range(n):\n        ways += count_no_of_ways(n - 1, k - 1) \n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    n = max(n,2)\n    \n    if(n%2!=0):\n        print(\"Invalid input\")\n    else:\n        fence = n/2\n        for i in range(0,(fence**k)):\n            count = 0\n            for j in range(n+1):\n                if(j%2==0):\n                    if(i+j<fence**(k-1)):\n                        count+=1\n            if(count%2!=0):\n                print(f\"{count//2} ways\")\n            else:\n                print(f\"{count//2} ways\")\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def recur(m, n, k): \n        if k == 2: \n            return m + n \n        else:\n            if n == 0 and m == 0: \n                return 1\n            elif k > 2: \n                return 0 \n            else: \n                return recur(m, n - 1, k) + recur(m, n - 1, k + 1) \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or n == 2: return 1 \n    ways = 0\n    if (k <= 1): ways += 1\n    else: ways += (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)) \n    return ways\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<=m:\n        return int(n/m)\n    else:\n        return int(m/n)\n    \n    \ndef mul(n,m):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return n*m\n    \n    \ndef add(n,m):\n    '''\n    Write a python function to add two numbers.\n    '''\n    return n+m\n    \n    \ndef sub(n,m):\n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return n-m\n    \n    \ndef div(n,m):\n    '''\n    Write a python function to divide two numbers.\n    '''\n    return n/m\n    \n    \ndef modulus(n,m):\n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    return n%m\n    \n    \ndef fac(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    return n**2\n    \n    \ndef sum(n):\n    '''\n    Write a python function to calculate the sum of a number.\n    '''\n    return n+n+n\n    \n    \ndef substract(n):\n    '''\n    Write a python function to calculate the substract of a number.\n    '''\n    return n-n\n    \n    \ndef find_gcd(n,m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if n>m:\n        return gcd(m,n)\n    else:\n        return gcd(n,m)\n    \n    \n    \ndef gcd(n,m):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    if n>m:\n        return gcd(n%m,m)\n    else:\n        return gcd(m%n,n)\n    \n    \n    \ndef inverse(n):\n    '''\n    Write a python function to find the inverse of a number.\n    '''\n    return pow(n,1/2)\n    \n    \n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n    \n    \ndef add_factorial(n):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*add_factorial(n-1)\n    \n    \n    \ndef sqrt(n):\n    '''\n    Write a python function to calculate the square root of a number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**0.5\n    \n    \ndef log2(n):\n    '''\n    Write a python function to calculate the logarithm of a number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**0.5\n    \n    \ndef bin_to_dec(n):\n    '''\n    Write a python function to convert binary to decimal number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n\n    \n    \ndef dec_to_bin(n):\n    '''\n    Write a python function to convert decimal number to binary.\n    '''\n    if n==0:\n        return 0\n    else:\n        return bin(n)[2:]\n    \n    \ndef string_to_int(n):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if n==\"\":\n        return 0\n    else:\n        return int(n)\n    \n    \ndef int_to_string(n):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if n==0:\n        return \"0\"\n    else:\n        return str(n)\n    \n    \n    \ndef dec_to_bin_string(n):\n    '''\n    Write a python function to convert decimal number to binary.\n    '''\n    if n==0:\n        return \"0\"\n    else:\n        return bin(n)[2:]\n    \n    \ndef bin_string_to_int(n):\n    '''\n    Write a python function to convert binary string to an integer.\n    '''\n    if n==\"\":\n        return 0\n    else:\n        return int(n,2)\n    \n    \ndef int_to_dec_string(n):\n    '''\n    Write a python function to convert integer to decimal number.\n    '''\n    if n==0:\n        return \"0\"\n    else:\n        return str(n,2)\n    \n    \ndef int_to_bin_string(n):\n    '''\n    Write a python function to convert integer to binary.\n    '''\n    if n==0:\n        return \"0\"\n    else:\n        return bin(n)[2:]\n    \n    \ndef bin_string_to_int_string(n):\n    '''\n    Write a python function to convert binary string to integer.\n    '''\n    if n==\"\":\n        return \"0\"\n    else:\n        return int(n,2)\n    \n    \ndef find_pow_of_two(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2\n    \n    \n    \ndef add_power_of_two(n):\n    '''\n    Write a python function to add power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2\n    \n    \n    \ndef power_of_two(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2\n    \n    \n    \ndef compute_divisor(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2\n    \n    \ndef compute_square_root(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**0.5\n    \n    \n    \ndef compare(a,b):\n    '''\n    Write a python function to compare two numbers.\n    '''\n    if a>b:\n        return 1\n    else:\n        return -1\n    \n    \n    \ndef comp_even(a,b):\n    '''\n    Write a python function to compare two numbers.\n    '''\n    if a%2==0:\n        return 1\n    else:\n        return -1\n    \n    \n    \ndef find_even_divisors(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**0.5\n    \n    \n    \ndef find_odd_divisors(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**2\n    \n    \n    \ndef find_divisor(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**0.5\n    \n    \n    \ndef divisors(n):\n    '''\n    Write a python function to find the power of two number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n**0.5\n    \n    \n    \ndef find_pow_of_two_sub_div(n):\n    '''\n    Write a pytho"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    return math.floor(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return m\n    if n < 0:\n        n = abs(n)\n        return find(n//m,m)\n    if m > n:\n        n = abs(n)\n        return find(n//m,m)\n    else:\n        return n\n    \n    # Write your code here\n    \ndef main():\n    n, m = input().split()\n    n = int(n)\n    m = int(m)\n    print(find(n,m))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return find(m,n)\n    else:\n        if n==m:\n            return n\n        if n<m:\n            return find(n,m-1)\n        else:\n            return find(n-1,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return m\n    else:\n        return m//n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if (n==0):\n        return 1\n    if (m == 0):\n        return 0\n    \n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n == m):\n        return n\n    elif n > m:\n        return find(n,m//n)\n    elif n < m:\n        return find(n,m//n+1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    if m == 0:\n        return n\n    if m == 1:\n        return n/m\n    else:\n        if n >= m:\n            if n>m:\n                n-=m\n            else:\n                m-=n\n                n/=m\n        else:\n            n/=m\n            m-=n\n        return find(n,m)\n    \n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n == m):\n        return n\n    n1 = n % m\n    n2 = m % n\n    if(n2 == 0):\n        return (n1 + m)\n    else:\n        return (n1 + m) % n2 + m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError\n    if n == m:\n        return n\n    else:\n        return find(n%m,m)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w*h) == 0 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < 0:\n        return \"Triangle is not a right angle\"\n    elif (w*h) > 1000:\n        return \"Triangle is not a right angle\"\n    elif (w*h) > math.sqrt(w*h) :\n        return \"Triangle is not a right angle\"\n    elif (w*h) > math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) :\n        return \"Triangle is not a right angle\"\n    elif (w*h) > math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) and (w*h) < (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) > math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) and (w*h) < (w*h)/2 and (w*h) < (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) and (w*h) < (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) + (w*h) and (w*h) < (w*h)/2 and (w*h) < (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 and (w*h) < (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    elif (w*h) < math.sqrt(w*h) and (w*h) < math.sqrt(w*h) and (w*h) < (w*h)/2 and (w*h) > (w*h)/2 :\n        return \"Triangle is not a right angle\"\n    e"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w+h*h)/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return True\n    if abs(w-h)>10:\n        return False\n    else:\n        if w+h+w==h*h:\n            return True\n        else:\n            if w+h-2*w*math.sin(math.radians(45))>h:\n                return True\n            else:\n                if w+h+math.sin(math.radians(45))*w>h:\n                    return True\n                else:\n                    return False\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))*math.cos(w*math.pi/180)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w == h):\n        return w\n    else:\n        if (w**2 + h**2 < 1):\n            return w**2 + h**2\n        else:\n            return otherside_rightangle(w, h*3/2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # convert to radians\n    theta = math.radians(45)\n    # set up variables\n    r = w/2;\n    l = h/2;\n    # loop through and find the square root\n    for theta in range(0,180,1):\n        # convert to degrees\n        rho = math.sqrt(r**2+l**2)\n        # set new variables\n        phi = theta*theta/180\n        # find the current angle\n        z = phi+phi/3;\n        # find the angle difference\n        z_theta = math.acos(abs(z/rho))\n        # check if the angle is in range\n        if (z_theta < theta and z_theta > -theta):\n            return rho,phi,z_theta\n    # if the angle is not within range\n    else:\n        return None\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    rad = w/2;\n    a = math.sqrt(h**2 - (rad**2))\n    b = math.sqrt(2*h*rad)\n    c = math.sqrt(h**2 - (a**2 + b**2))\n    return c\ndef main():\n    '''\n    Calculate the triangle side based on the user's input.\n    '''\n    print(\"Welcome to Sideangle Calculator\")\n    print(\"Type 'triangle' to calculate the side of a triangle.\")\n    print(\"Type 'circle' to calculate the side of a circle.\")\n    print(\"Type'square' to calculate the side of a square.\")\n    print(\"Type 'rightangle' to calculate the side of a right angled triangle.\")\n    print(\"Type 'exit' to quit the program.\")\n    \n    \n    while True:\n        main_input = input(\"Type 'triangle' to calculate the side of a triangle.\\nType 'circle' to calculate the side of a circle.\\nType'square' to calculate the side of a square.\\nType 'rightangle' to calculate the side of a right angled triangle.\\nType 'exit' to quit the program.\\n\").lower()\n        \n        if main_input == \"triangle\":\n            print(\"\")\n            print(\"The triangle side of a triangle is:\",otherside_rightangle(input(\"Enter the radius of the triangle: \"), input(\"Enter the length of the triangle: \")))\n        elif main_input == \"circle\":\n            print(\"\")\n            print(\"The circle side of a circle is:\",otherside_rightangle(input(\"Enter the radius of the circle: \"), input(\"Enter the diameter of the circle: \")))\n        elif main_input == \"square\":\n            print(\"\")\n            print(\"The square side of a square is:\",otherside_rightangle(input(\"Enter the diameter of the square: \"), input(\"Enter the radius of the square: \")))\n        elif main_input == \"rightangle\":\n            print(\"\")\n            print(\"The right angle side of a right angled triangle is:\",otherside_rightangle(input(\"Enter the radius of the right angled triangle: \"), input(\"Enter the diameter of the right angled triangle: \")))\n        elif main_input == \"exit\":\n            print(\"\")\n            print(\"Goodbye\")\n            break\n        else:\n            print(\"\")\n            print(\"Invalid input. Try again!\")\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = h/2\n    c = math.sqrt(w/a)\n    if c<a:\n        return c\n    else:\n        return a\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w < h):\n        left_side = h\n        right_side = w\n        return left_side, right_side\n    else:\n        left_side = w\n        right_side = h\n        return left_side, right_side\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for element in listval:\n        if element > max_val:\n            max_val = element\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max = 0\n    \n    for item in listval:\n        if item > max:\n            max = item\n            \n    return max\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for x in listval:\n        if x > max:\n            max = x\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for value in listval:\n        if value > maxval:\n            maxval = value\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1, len(listval)):\n        if max < listval[i]:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = 0\n    for value in listval:\n        if value > maximum:\n            maximum = value\n    return maximum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for d in range(1, number):\n        if number % d == 0:\n            sum += d\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = int(number)\n    #  if number is even, return its own divisors\n    if number % 2 == 0:\n        return sum_div(number//2)\n    # if number is odd, return all of its divisors\n    else:\n        #  first, we'll return the sum of the all of its even divisors\n        return sum_div(number//2) + (number%2)\n        #for every even number, we'll return the sum of the divisors of the number\n        #we'll return the sum of the divisors of the number, even and odd\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    #numbers = [1,2,3,4,5,6]\n    #for i in numbers:\n    #    if i == 0:\n    #        continue\n    #    elif i % 2 == 0:\n    #        print(\"numero:\",i)\n    #    else:\n    #        print(i,end=\", \")\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n    \n    "
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1,number+1):\n        if number%i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors.append(divisor)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    else:\n        return (sum_div(number - 1) + (sum_div(number - 2)))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # YOUR CODE HERE\n    assert number > 0, 'number must be positive'\n    num = 1\n    sum = 0\n    while num <= number:\n        if number % num == 0:\n            sum += num\n            num += 1\n        else:\n            num += 1\n    return su"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        if number%i==0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] < arr[j]:\n                count +=1\n    return count\n    \ndef get_Merge_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    merge_list = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] > arr[j]:\n                merge_list.append(arr[j])\n    for i in range(len(arr)):\n        if i == 0:\n            count += 1\n        elif merge_list[i] > merge_list[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    j = 1\n    count = 0\n    arr.sort()\n    while (i < len(arr)):\n        if (arr[i] < arr[i-1]):\n            count += 1\n        i += 1\n    return count\n    # Write your code here\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Your code here\n    Inv = 0\n    for i in arr:\n        if(i%2 == 1):\n            Inv += 1\n    return Inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count_inv = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count_inv += 1\n                arr[i], arr[j] = arr[j], arr[i]\n    return count_inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count_inv = 0 \n    for i in range(len(arr)-1): \n        if arr[i] > arr[i+1]: \n            count_inv += 1 \n    return count_inv \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return len(set(arr))-len(arr)-1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    i = 1\n    while i < len(arr): \n        j = 0\n        while j < len(arr): \n            if arr[i] < arr[j]: \n                Inv_Count += 1\n            j += 1\n        i += 1\n    return Inv_Count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(n):\n            for j in range(n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j],arr[j+1] = arr[j+1],arr[j]\n        inv_count = 0\n        for i in range(n):\n            if arr[i] > arr[i+1]:\n                inv_count += 1\n        return inv_count\n        \ndef bubble_sort(arr):\n    '''\n    Write a python function to sort an array of integers in ascending order.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for el in list1:\n        if type(el) == list:\n            flatten_list(el)\n        else:\n            yield el\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    nested_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Problem: https://www.hackerrank.com/challenges/flatten-nested-list/problem\n    # Your task:\n    # Complete the flatten function so that it flattens the given list such that the list is flattened in\n    # order. This is a simple recursive solution.\n    # Input Format:\n    # A nested list.\n    #\n    # Constraints:\n    # 1 <= n <= 50\n    # Output Format:\n    # A flattened nested list.\n    #\n    # Sample Input:\n    # [2, [6, {'a': 4, 'b': 9}], 7]\n    #\n    # Sample Output:\n    # [6, {'a': 4, 'b': 9}, 7]\n    #\n    # Hint:\n    # You may use the built-in function 'list.sort()' to sort the list in descending order.\n    # You'll also have to make sure that the list has been sorted in a counter-clockwise fashion.\n    # In other words, list.sort(key=lambda x: x[0]) sorts the list by the first element of the list.\n    #\n    # Time Complexity:\n    # O(n)\n    #\n    # Sample Tests:\n    # Input 1:\n    # [2, [6, {'a': 4, 'b': 9}], 7]\n    #\n    # Output 1:\n    # [6, {'a': 4, 'b': 9}, 7]\n    #\n    # Input 2:\n    # [2, [6, {'a': 4, 'b': 9}], 7, 8]\n    #\n    # Output 2:\n    # [6, {'a': 4, 'b': 9}, 7, 8]\n    #\n    # Input 3:\n    # [2, [6, {'a': 4, 'b': 9}], 7, 8, 9]\n    #\n    # Output 3:\n    # [6, {'a': 4, 'b': 9}, 7, 8, 9]\n    \n    def flatten(self, list1, p):\n        if not list1:\n            return []\n        elif list1[0] is None:\n            return flatten(list1[1:], p + [list1[0]])\n        else:\n            return [list1[0]] + flatten(list1[1:], p + [list1[0]])\n    \n    return flatten(list1, [])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for element in list1:\n        if isinstance(element, list):\n            output.extend(flatten_list(element))\n        else:\n            output.append(element)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    # your code goes here\n    if type(list1) == list:\n        flattenList = []\n        \n        for element in list1:\n            if type(element) == list:\n                flattenList.extend(flatten_list(element))\n            else:\n                flattenList.append(element)\n        \n        return flattenList\n    \n    else:\n        return list1\n    \n    \n    # Note: there is a function with no return statement"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return list1 + flatten_list(list1[1:])"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for el in list1:\n        if type(el) == list:\n            flat_list.extend(flatten_list(el))\n        else:\n            flat_list.append(el)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list1 = list(map(lambda x: x[0] * x[1], enumerate(list1)))\n    return list1\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for st in stdata:\n        if max_aggregate < st[1]:\n            max_aggregate = st[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    for i in stdata:\n        result += i[1]\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dic = defaultdict(list)\n    for v,k in stdata:\n        dic[k].append(v)\n    # print(dic)\n    return max(dic.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort(key = lambda x: x[1], reverse = True)\n    return stdata[0][1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a default dict to keep track of the maximum aggregated value\n    # Key is the tuple, value is the max aggregated value\n    max_aggregate_dict = {}\n    # Iterate over the list to get the max aggregated value\n    for tuple in stdata:\n        max_aggregate_dict[tuple] = max(max_aggregate_dict.get(tuple, 0), tuple[1])\n    # Return the max aggregated value\n    return max_aggregate_dict.get('END', 0)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for key in stdata.keys():\n        if stdata[key][0] > max_aggregate:\n            max_aggregate = stdata[key][0]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(list)\n    for item in stdata:\n        item = tuple(item)\n        aggregate[item[0]].append(item[1])\n    return max(aggregate.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Process all tuples and look at the last row\n    row_length = 0\n    for row in stdata:\n        row_length += 1\n    # Now calculate the aggregate.\n    agg = 0\n    for row in stdata:\n        agg += row[row_length - 1]\n    return agg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    n = len(stdata)\n    if n==0:\n        return 0\n    else:\n        #a = stdata[0][1] + stdata[1][1] + stdata[2][1]\n        #b = stdata[0][2] + stdata[1][2] + stdata[2][2]\n        #c = stdata[0][3] + stdata[1][3] + stdata[2][3]\n        #d = stdata[0][4] + stdata[1][4] + stdata[2][4]\n        #e = stdata[0][5] + stdata[1][5] + stdata[2][5]\n        #f = stdata[0][6] + stdata[1][6] + stdata[2][6]\n        #g = stdata[0][7] + stdata[1][7] + stdata[2][7]\n        #h = stdata[0][8] + stdata[1][8] + stdata[2][8]\n        #i = stdata[0][9] + stdata[1][9] + stdata[2][9]\n        #j = stdata[0][10] + stdata[1][10] + stdata[2][10]\n        #k = stdata[0][11] + stdata[1][11] + stdata[2][11]\n        #l = stdata[0][12] + stdata[1][12] + stdata[2][12]\n        #m = stdata[0][13] + stdata[1][13] + stdata[2][13]\n        #n = stdata[0][14] + stdata[1][14] + stdata[2][14]\n        #o = stdata[0][15] + stdata[1][15] + stdata[2][15]\n        #p = stdata[0][16] + stdata[1][16] + stdata[2][16]\n        #q = stdata[0][17] + stdata[1][17] + stdata[2][17]\n        #r = stdata[0][18] + stdata[1][18] + stdata[2][18]\n        #s = stdata[0][19] + stdata[1][19] + stdata[2][19]\n        #t = stdata[0][20] + stdata[1][20] + stdata[2][20]\n        #u = stdata[0][21] + stdata[1][21] + stdata[2][21]\n        #v = stdata[0][22] + stdata[1][22] + stdata[2][22]\n        #w = stdata[0][23] + stdata[1][23] + stdata[2][23]\n        #x = stdata[0][24] + stdata[1][24] + stdata[2][24]\n        #y = stdata[0][25] + stdata[1][25] + stdata[2][25]\n        #z = stdata[0][26] + stdata[1][26] + stdata[2][26]\n        #print(stdata)\n        #return a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z\n        \n        #return (stdata[0][1] + stdata[1][1] + stdata[2][1]) + (stdata[0][2] + stdata[1][2] + stdata[2][2]) + (stdata[0][3] + stdata[1][3] + stdata[2][3]) + (stdata[0][4] + stdata[1][4] + stdata[2][4]) + (stdata[0][5] + stdata[1][5] + stdata[2][5]) + (stdata[0][6] + stdata[1][6] + stdata[2][6]) + (stdata[0][7] + stdata[1][7] + stdata[2][7]) + (stdata[0][8] + stdata[1][8] + stdata[2][8]) + (stdata[0][9] + stdata[1][9] + stdata[2][9]) + (stdata[0][10] + stdata[1][10] + stdata[2][10]) + (stdata[0][11] + stdata[1][11] + stdata[2][11]) + (stdata[0][12] + stdata[1][12] + stdata[2][12]) + (stdata[0][13] + stdata[1][13] + stdata[2][13]) + (stdata[0][14] + stdata[1][14] + stdata[2][14]) + (stdata[0][15] + stdata[1][15] + stdata[2][15]) + (stdata[0][16] + stdata[1][16] + stdata[2][16]) + (stdata[0][17] + stdata[1][17] + stdata[2][17]) + (stdata[0][18] + stdata[1][18] + stdata[2][18]) + (stdata[0][19] + stdata[1][19] + stdata[2][19]) + (stdata[0][20] + stdata[1][20] + stdata[2][20]) + (stdata[0][21] + stdata[1][21] + stdata[2][21]) + (stdata[0][22] + stdata[1][22] + stdata[2][22]) + (stdata[0][23] + stdata[1][23] + stdata[2][23]) + (stdata[0][24] + stdata[1][24] + stdata[2][24]) + (stdata[0][25] + stdata[1][25] + stdata[2][25]) + (stdata[0][26] + stdata[1][26] + stdata[2][26]) + (stdata[0][27] + stdata[1][27] + stdata[2][27])\n        #return stdata[0][1] + stdata[1][1] + stdata[2][1] + stdata[0][2] + stdata[1][2] + stdata[2][2] + stdata[0][3] + stdata[1][3] + stdata[2][3] + stdata[0][4] + stdata[1][4] + stdata[2][4] + stdata[0][5] + stdata[1][5] + stdata[2][5] + stdata[0][6] + stdata[1][6] + stdata[2][6] + stdata[0][7] + stdata[1][7] + stdata[2][7] + stdata[0][8] + stdata[1][8] + stdata[2][8] + stdata[0][9] + stdata[1][9] + stdata[2][9] + stdata[0][10] + stdata[1][10] + stdata[2][10] + stdata[0][11] + stdata[1][11] + stdata[2][11] + stdata[0][12] + stdata[1][12] + stdata[2][12] + stdata[0][13] + stdata[1][13] + stdata[2][13] + stdata[0][14] + stdata[1][14] + stdata[2][14] + stdata[0][15] + stdata[1][15] + stdata[2][15] + stdata[0][16] + stdata[1][16] + stdata[2][16] + stdata[0][17] + stdata[1][17] + stdata[2][17] + stdata[0][18] + stdata[1][18] + stdata[2][18] + stdata[0][19] + stdata[1][19] + stdata[2][19] + stdata[0][20] + stdata[1][20] + stdata[2][20] + stdata[0][21] + stdata[1][21] + stdata[2][21] + stdata"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    assert isinstance(stdata, list)\n    m = -1\n    for tup in stdata:\n        if m < 0:\n            m = tup[2]\n        else:\n            if tup[2] > m:\n                m = tup[2]\n    return m\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    p = 2**n-1\n    count = 0\n    for i in range(n):\n        count += (p & 1) * (p & 1)\n        p >>= 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    s = 0\n    for i in range(n):\n        s += (2**i)*(2**(n-i-1))\n    return s\n    \nn = 4\ncount = count_binary_seq(n)\nprint(count)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    s = 0\n    s += n % 2 \n    n = n // 2\n    while (n > 0):\n        s += n % 2\n        n //= 2\n    return s\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def binary(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return binary(n-1) + binary(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    p=n//2\n    sum=0\n    for i in range(p):\n        if i%2==0:\n            sum+=1\n        else:\n            sum-=1\n    return sum\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total_count = 0\n    while n:\n        total_count += int(str(bin(n)[2:])[-1])\n        n -= 1\n    return total_count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return (n+1) * (n+2) // 2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Store the next 4 bits \n    next_4_bits = [] \n    # First 4 bits \n    for i in range(4): \n        next_4_bits.append(ord(str(bin(n ^ i))[2:].replace('0',' '))) \n    # print(next_4_bits)\n    # Sum the current 4 bits \n    current_sum = 0 \n    for i in range(4): \n        current_sum += next_4_bits[i]\n    # print(current_sum)\n    # Check if sum of current 4 bits is same as sum of last 4 bits\n    return (current_sum == n) \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    l=n-1\n    sum=0\n    while n>0:\n        sum+=bin(n)[2:]\n        n-=1\n    return sum==bin(l)[2:]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    n = int(n)\n    l = 0\n    r = 1\n    while r <= n:\n        l = l + r\n        r = r + 2\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    for key, value in d.items():\n        d_depth += 1\n        if isinstance(value, dict):\n            d_depth += dict_depth(value)\n    return d_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    n = len(d.keys())\n    if n == 0:\n        return 0\n    return 1 + dict_depth(d[d.keys()[0]])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    import sys\n    count = 0\n    for k in d:\n        count += 1\n        if isinstance(d[k],dict):\n            count += dict_depth(d[k])\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    try:\n        depth = 1\n        d = dict(d)\n        for k, v in d.items():\n            depth = depth + 1\n            if isinstance(v, dict):\n                depth = dict_depth(v)\n        return depth\n    except TypeError:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    return max(dict_depth(d[k]) for k in d.keys()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '_' not in d:\n        return 0\n    \n    depth = 0\n    for k, v in d.items():\n        depth += dict_depth(v)\n        \n    return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        print('\\n\\n\\n')\n        print('Depth of dictionary: ', end='')\n        depth = 0\n        for key, value in d.items():\n            print(key,'', value,'', end='')\n            depth += 1\n            print(key,'', value,'', end='')\n            print(depth,'', end='')\n    print('\\n\\n\\n')\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # depth = 0\n    if type(d) == dict:\n        depth = len(d)\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    # First try to get the size of the dictionary\n    sz = len(d) + 1\n    # Check if there is at least one key\n    for k in d.keys():\n        sz = max(sz, 1 + dict_depth(d[k]) + dict_depth(d[k][::-1]))\n    return sz\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    else:\n        # Depth of a dictionary is the number of keys\n        # that are not null.\n        return max(dict_depth(d[k]) for k in d if k in d) + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Base Case :  If we have to take the last value of the input array, then that will result in a very small answer\n    if len(arr) == 1 :\n        return arr[0]\n    # If we want to do multiple rotation for multiple input array, then it is necessary to use range function\n    if ranges[index] < ranges[index+1] :\n        return find_Element(arr,ranges,rotations,index+1)\n    # If we want to do multiple rotation for multiple input array, then it is necessary to use index function\n    else :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = int(rotations)\n    rotations = rotations % 360\n    index = int(index)\n    \n    \n    for i in range(rotations,rotations+rotations) : \n        index = i % 360\n        \n        for j in range(0,len(arr)) : \n            if (index == arr[j][0]) and (j!= index) : \n                return arr[j][1]\n            \n        \n    return -1\n    \ndef sort_List(arr,i) : \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    for j in range(len(arr)) : \n        for k in range(0,len(arr)) : \n            if (arr[j][0] == arr[k][0]) and (i == arr[k][0]) : \n                arr[k],arr[j] = arr[j],arr[k]\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == len(arr):\n        return 0\n    else :\n        return find_Element(arr,ranges,rotations,index+1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0 :\n        for i in range(len(arr)) :\n            for j in range(len(arr)) :\n                if i == index and j == index:\n                    return arr[i]\n    else:\n        for i in range(len(arr)) :\n            if arr[i] == arr[i-rotations] :\n                return arr[i]\n            if i == index:\n                return arr[i]\n            \ndef MergeSort(arr,ranges,rotations,index) : \n    '''\n    Write a python function to sort an array using the merge sort algorithm.\n    '''\n    if len(arr) > 1 :\n        mid = len(arr)//2\n        l = arr[:mid]\n        r = arr[mid:]\n        l = MergeSort(l,r,rotations,index)\n        r = MergeSort(r,ranges,rotations,index)\n        arr = l + r\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if (ranges[index][1] <= ranges[index][0]) :\n        return arr[ranges[index][0]][ranges[index][1]]\n    \n    for i in range(len(arr)) :\n        if ranges[i][0] <= index < ranges[i][1] :\n            return arr[i][index]\n        \n    return arr[index]\n    \ndef calculate_difference(arr,d,index) :\n    '''\n    Write a python function to calculate the difference of a range of given range in an array of given range.\n    '''\n    \n    if index == 0 :\n        return arr[d][d]\n    \n    if arr[index][index+1][1] > arr[index][index-1][1] :\n        return arr[index][index][1] - arr[index][index][0]\n    \n    if arr[index][index+1][1] < arr[index][index-1][1] :\n        return arr[index][index][1] - arr[index][index][0]\n    \n    #for i in range(len(arr)) :\n    #    print(arr[i][index][0],arr[i][index][1])\n    \n    #print(\"-----------------------------\")\n    \n    return arr[index][index][1] - arr[index][index][0]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def rotate_arr(arr,r,rotations) :\n        '''\n        Write a python function to rotate array arr of size(n,n) \n        and returns modified array.\n        '''\n        for i in range(r) :\n            arr[i], arr[-i-1] = arr[-i-1], arr[i]\n        return arr\n    \n    def rotate_arr_diagonal(arr,r,rotations) :\n        '''\n        Write a python function to rotate array arr of size(n,n) \n        and returns modified array.\n        '''\n        for i in range(r) :\n            arr[i], arr[-i-1] = arr[-i-1], arr[i]\n        return arr\n    \n    def get_value(arr,r) :\n        '''\n        Write a python function to get value of a given index \n        after rotation and returns modified array.\n        '''\n        r=arr.size()//2\n        for i in range(r) :\n            if i<r-1 :\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            elif i==r-1 :\n                arr[i], arr[0] = arr[0], arr[i]\n        return arr\n    \n    def rotate_arr_reverse(arr,r) :\n        '''\n        Write a python function to rotate array arr of size(n,n) \n        and returns modified array.\n        '''\n        for i in range(r) :\n            arr[i], arr[-i-1] = arr[-i-1], arr[i]\n        return arr\n    \n    if r<=0 or r>=arr.size() or rotations<1 or rotations>rotations :\n        return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)):\n        for j in range(len(arr)):\n            if arr[j][1] == index:\n                return [j,ranges[rotations[i]][0]]\n    return []\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rans == 1 :\n        if rotations == 1 :\n            if (index % 2 == 0) :\n                return arr[index+1]\n            else :\n                return arr[index-1]\n        elif rotations == 2 :\n            return arr[index]\n    elif rans == 2 :\n        if rotations == 1 :\n            if (index % 2 == 0) :\n                return arr[index+1]\n            else :\n                return arr[index-1]\n        elif rotations == 2 :\n            return arr[index]\n    elif rans == 3 :\n        if rotations == 1 :\n            if (index % 2 == 0) :\n                return arr[index-1]\n            else :\n                return arr[index+1]\n        elif rotations == 2 :\n            return arr[index]\n    elif rans == 4 :\n        if rotations == 1 :\n            if (index % 2 == 0) :\n                return arr[index-1]\n            else :\n                return arr[index+1]\n        elif rotations == 2 :\n            return arr[index]\n    elif rans == 5 :\n        if rotations == 1 :\n            if (index % 2 == 0) :\n                return arr[index-1]\n            else :\n                return arr[index+1]\n        elif rotations == 2 :\n            return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = 0\n    for i in range(len(ranges)) :\n        if ranges[i] <= index :\n            rotations = rotations + 1\n    for rotations in range(rotations):\n        for i in range(len(arr) - 1):\n            if arr[i] <= arr[i + 1] :\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                return arr, rotations + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #rotations should be integer\n    for i in range(rotations) :\n        for j in range(len(ranges)-1) :\n            arr[index] = ranges[j]\n            index = (index +1) % len(ranges)\n            arr[index] = ranges[j+1]\n        #rotation should be 1\n        arr[index] = ranges[0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = ['p']\n    for word in words:\n        if word[0] == 'p':\n            p_list.append(word[1:])\n    return p_list\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words=[]\n    for word in words:\n        if word[0]=='p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #words = ['p']\n    p = ''\n    for word in words:\n        if word[0] == 'p':\n            p = word\n            break\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_index=0\n    for i in range(len(words)):\n        if words[i][0:2]=='p':\n            p_index=i\n    print(p_index,words[p_index])\n    for i in range(p_index+1,len(words)):\n        if words[i][0:2]=='p':\n            break\n        else:\n            i+=1\n    return words[p_index:i]\n    #for i in range(len(words)):\n    #    if words[i][0:2]=='p':\n    #        break\n    #    else:\n    #        i+=1\n    #return words[p_index:i]\ndef create_dictionary_from_words(words):\n    dictionary=dict()\n    for word in words:\n        dictionary[word] = 0\n    return dictionary\ndef search_in_dictionary(dictionary,word):\n    if word in dictionary:\n        print(word,dictionary[word])\n    else:\n        print(\"not found\")\n    #for i in range(len(words)):\n    #    if words[i][0:2]=='p':\n    #        break\n    #    else:\n    #        i+=1\n    #return words[p_index:i]\ndef find_all_in_dictionary(dictionary):\n    search_list=[]\n    for word in dictionary:\n        search_list.append(word)\n    return search_list\ndef delete_list(search_list,delete_list):\n    for i in range(len(search_list)):\n        for j in range(len(search_list)):\n            if search_list[i] in delete_list:\n                search_list.pop(j)\n                break\ndef get_letters(dictionary):\n    letters=[]\n    for word in dictionary:\n        for letter in word:\n            letters.append(letter)\n    return letters\ndef get_alpha(dictionary):\n    alpha=[]\n    for word in dictionary:\n        for letter in word:\n            if letter.isalpha():\n                alpha.append(letter)\n    return alpha\ndef get_punctuation(dictionary):\n    punctuation=[]\n    for word in dictionary:\n        for punctuation_character in word:\n            if punctuation_character.isalpha():\n                punctuation.append(punctuation_character)\n    return punctuation\ndef get_symbols(dictionary):\n    symbols=[]\n    for word in dictionary:\n        for symbol in word:\n            if symbol.isalnum():\n                symbols.append(symbol)\n    return symbols\ndef get_numbers(dictionary):\n    numbers=[]\n    for word in dictionary:\n        for number in word:\n            if number.isdigit():\n                numbers.append(number)\n    return numbers\ndef main():\n    print(\"\\nWelcome to my dictionary search\\n\")\n    words=[]\n    search_words=input(\"Enter word or sentence to search:\")\n    words.append(search_words)\n    search_words=start_withp(words)\n    dictionary=create_dictionary_from_words(words)\n    search_words=search_words.split()\n    print(\"\\n\")\n    for word in words:\n        print(word)\n    print(\"\\n\")\n    print(\"The word you entered is in dictionary:\")\n    print(dictionary)\n    print(\"\\n\")\n    print(\"The words you entered are a part of the dictionary:\")\n    print(find_all_in_dictionary(dictionary))\n    print(\"\\n\")\n    print(\"The words you entered can only be letters and numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain punctuation or symbol or number.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and symbols.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain symbols and numbers and the word you entered can't contain numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain symbols, numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain symbols and numbers and the word you entered can't contain numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain numbers or symbols.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers, symbols, and the word you entered can't contain symbols or numbers.\")\n    print(\"\\n\")\n    print(\"The words you entered can't contain numbers"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print('Start with p:')\n    print(words[0][0:1]+'p')\n    return(words[0][0:1]+'p')\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    print('End with p:')\n    print(words[-1][0:1]+'p')\n    return(words[-1][0:1]+'p')\ndef two_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n'.\n    '''\n    print('Two letters:')\n    print(words[0][0:2]+'n')\n    return(words[0][0:2]+'n')\ndef three_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and three letters.\n    '''\n    print('Three letters:')\n    print(words[0][0:3]+'n'+words[1][0:3]+'p')\n    return(words[0][0:3]+'n'+words[1][0:3]+'p')\ndef four_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and four letters.\n    '''\n    print('Four letters:')\n    print(words[0][0:4]+'n'+words[1][0:4]+'p'+words[2][0:4]+'n')\n    return(words[0][0:4]+'n'+words[1][0:4]+'p'+words[2][0:4]+'n')\ndef five_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and five letters.\n    '''\n    print('Five letters:')\n    print(words[0][0:5]+'n'+words[1][0:5]+'p'+words[2][0:5]+'n')\n    return(words[0][0:5]+'n'+words[1][0:5]+'p'+words[2][0:5]+'n')\ndef six_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and six letters.\n    '''\n    print('Six letters:')\n    print(words[0][0:6]+'n'+words[1][0:6]+'p'+words[2][0:6]+'n')\n    return(words[0][0:6]+'n'+words[1][0:6]+'p'+words[2][0:6]+'n')\ndef seven_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and seven letters.\n    '''\n    print('Seven letters:')\n    print(words[0][0:7]+'n'+words[1][0:7]+'p'+words[2][0:7]+'n')\n    return(words[0][0:7]+'n'+words[1][0:7]+'p'+words[2][0:7]+'n')\ndef eight_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and eight letters.\n    '''\n    print('Eight letters:')\n    print(words[0][0:8]+'n'+words[1][0:8]+'p'+words[2][0:8]+'n')\n    return(words[0][0:8]+'n'+words[1][0:8]+'p'+words[2][0:8]+'n')\ndef nine_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and nine letters.\n    '''\n    print('Nine letters:')\n    print(words[0][0:9]+'n'+words[1][0:9]+'p'+words[2][0:9]+'n')\n    return(words[0][0:9]+'n'+words[1][0:9]+'p'+words[2][0:9]+'n')\ndef ten_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and ten letters.\n    '''\n    print('Ten letters:')\n    print(words[0][0:10]+'n'+words[1][0:10]+'p'+words[2][0:10]+'n')\n    return(words[0][0:10]+'n'+words[1][0:10]+'p'+words[2][0:10]+'n')\ndef eleven_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and eleven letters.\n    '''\n    print('Eleven letters:')\n    print(words[0][0:11]+'n'+words[1][0:11]+'p'+words[2][0:11]+'n')\n    return(words[0][0:11]+'n'+words[1][0:11]+'p'+words[2][0:11]+'n')\ndef twelve_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and twelve letters.\n    '''\n    print('Twelve letters:')\n    print(words[0][0:12]+'n'+words[1][0:12]+'p'+words[2][0:12]+'n')\n    return(words[0][0:12]+'n'+words[1][0:12]+'p'+words[2][0:12]+'n')\ndef thirteen_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and thirteen letters.\n    '''\n    print('Thirteen letters:')\n    print(words[0][0:13]+'n'+words[1][0:13]+'p'+words[2][0:13]+'n')\n    return(words[0][0:13]+'n'+words[1][0:13]+'p'+words[2][0:13]+'n')\ndef fourteen_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and fourteen letters.\n    '''\n    print('Fourteen letters:')\n    print(words[0][0:14]+'n'+words[1][0:14]+'p'+words[2][0:14]+'n')\n    return(words[0][0:14]+'n'+words[1][0:14]+'p'+words[2][0:14]+'n')\ndef fifteen_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and fifteen letters.\n    '''\n    print('Fifteen letters:')\n    print(words[0][0:15]+'n'+words[1][0:15]+'p'+words[2][0:15]+'n')\n    return(words[0][0:15]+'n'+words[1][0:15]+'p'+words[2][0:15]+'n')\ndef sixteen_letters(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and 'n' and sixteen letters.\n    '''\n    print('Sixteen letters:')\n    print(words[0][0:16]+'n'+words[1][0:16]+'p'+words[2][0:16]+'n')\n    return(words[0][0:16]+'n'+words[1][0:16]+'p'+words[2][0:16]+'n')\ndef seventeen_letters(words):\n    ''"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Initializing two new words with first letter of the first word, this is the first word\n    new_first_word = words[0][0]\n    # Initializing second word with second letter of the first word, this is the second word\n    new_second_word = words[1][0]\n    # Initializing list of all words starting with 'p'\n    all_words = []\n    # Iterating over the list, starting with the first word, and ending with the second word\n    for i in range(0, len(words)):\n        if (words[i][0] == 'p'):\n            # If the second word starts with p, append the word in the list\n            if (words[i][1] == 'p'):\n                all_words.append(words[i][2])\n    # Return the two words\n    return new_first_word, new_second_word, all_words\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = 0\n    for word in words:\n        if word[0] == 'p':\n            p += 1\n    return words[:p], words[p:]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\ndef remove_sp(s):\n    '''\n    Remove whitespace at the end of a string.\n    '''\n    s = s.rstrip()\n    return s\ndef all_caps(string):\n    '''\n    All words in a string are converted to upper case and returned.\n    '''\n    string = string.upper()\n    return string\ndef remove_p(string):\n    '''\n    Remove the 'p' word at the end of a string.\n    '''\n    string = string.replace('p', '')\n    return string\ndef replace_sp(string):\n    '''\n    Replace the'' with a space.\n    '''\n    string = string.replace(' ','')\n    return string\ndef remove_duplicate_words(words):\n    '''\n    Create a list of words where only one word is in a list.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef lowercase(string):\n    '''\n    Convert all letters to lowercase.\n    '''\n    string = string.lower()\n    return string\ndef remove_special(string):\n    '''\n    Remove all special characters in a string.\n    '''\n    string = re.sub(r'[^A-Za-z0-9_]+','', string)\n    string = re.sub(r'[^0-9]+','', string)\n    return string\ndef remove_word_from_list(words):\n    '''\n    Remove words from a list.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef replace_word_to_list(words):\n    '''\n    Replace all words in a list to a list.\n    '''\n    result = []\n    for word in words:\n        result.append(word.replace(' ',''))\n    return result\ndef count_unique_words(string):\n    '''\n    Return the number of unique words in a string.\n    '''\n    result = 0\n    for word in string.split(' '):\n        if word not in result:\n            result += 1\n    return result\ndef remove_repeated_words(words):\n    '''\n    Remove repeated words from a list.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef remove_stopwords(words):\n    '''\n    Remove stopwords from a list.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef lemmatize_stems(words):\n    '''\n    Lemmatize words.\n    '''\n    result = []\n    for word in words:\n        result.append(word[0].lower())\n    return result\ndef remove_stopwords_and_lemmatize(words):\n    '''\n    Remove stopwords and lemmatize.\n    '''\n    result = []\n    for word in words:\n        if word[0] not in result:\n            result.append(word[0])\n    return result\ndef lemmatize_stems_and_remove_stopwords(words):\n    '''\n    Lemmatize words and remove stopwords.\n    '''\n    result = []\n    for word in words:\n        result.append(word[0].lower())\n    return result\ndef remove_stopwords_and_lemmatize_and_remove_stems(words):\n    '''\n    Remove stopwords and lemmatize and remove stems.\n    '''\n    result = []\n    for word in words:\n        if word[0] not in result:\n            result.append(word[0])\n    return result\ndef remove_stopwords_and_lemmatize_and_remove_stems_and_lemmatize(words):\n    '''\n    Remove stopwords and lemmatize and remove stems and lemmatize.\n    '''\n    result = []\n    for word in words:\n        if word[0] not in result:\n            result.append(word[0])\n    return result\ndef get_stopwords(stopwords):\n    '''\n    Remove all stopwords from a list.\n    '''\n    result = []\n    for word in stopwords:\n        if word not in result:\n            result.append(word)\n    return result\ndef get_word_count(words):\n    '''\n    Return the number of words in a string.\n    '''\n    result = len(words.split(' '))\n    return result\ndef get_lower_case(string):\n    '''\n    Convert all letters to lowercase.\n    '''\n    string = string.lower()\n    return string\ndef get_word_to_list(words):\n    '''\n    Create a list of words where only one word is in a list.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef get_unique_words(words):\n    '''\n    Create a list of unique words where only one word is in a list.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef get_unique_words_and_remove_duplicates(words):\n    '''\n    Create a list of unique words and remove duplicates.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef count_words_for_a_word(words):\n    '''\n    Return the number of words in a list that are in a given word.\n    '''\n    count = 0\n    for word in words:\n        if word in words:\n            count += 1\n    return count\ndef get_word_frequency(words):\n    '''\n    Count the number of times a word is in a list.\n    '''\n    result = {}\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\ndef get_word_frequency_and_remove_duplicates(words):\n    '''\n    Count the number of times a word is in a list and remove duplicates.\n    '''\n    result = {}\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\ndef frequency_of_word_in_list(words):\n    '''\n    Return the number of times a given word appears in a list.\n    '''\n    result = 0\n    for word in words:\n        if word in result:\n            result += 1\n    return result\ndef remove_duplicate_words(words):\n    '''\n    Remove all the words in a list that are not in the list.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef remove_duplicate_words_and_remove_stems(words):\n    '''\n    Remove all the words in a list that are not in the list and remove the stems.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef remove_duplicate_words_and_remove_stems_and_lemmatize(words):\n    '''\n    Remove all the words in a list that are not in the list and remove the stems and lemmatize.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\ndef remove_duplicate_words_and_remove_stems_and_lemmatize_and_remove_stems(words):\n    '''\n    Remove all the words in a list that are not in the lis"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = ''\n    for word in words:\n        if word.startswith('p'):\n            p = word[1:]\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word, word[1:]\n    return None\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum_so_far = 0\n    a[0] = 0\n    for i in range(1, n):\n        if sum_so_far > a[i-1] + k:\n            sum_so_far = a[i-1] + k\n        sum_so_far += a[i]\n        a[i] = sum_so_far\n    return sum_so_far\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix = [None]*(n+1)\n    prefix[index] = 0\n    for i in range(index+1, n+1):\n        if prefix[i-1] == None:\n            preprefix = prefix[i-1]\n        else:\n            preprefix = max(preprefix, prefix[i-1])\n        if i - preprefix + 1 >= k:\n            prefix[i] = preprefix + prefix[i-k]\n    return prefix[n]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return 0\n    elif index == n:\n        return a[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        if a[0] == k:\n            return a[0]\n        return 0\n    if index < n:\n        res = max_sum_increasing_subseq(a, n - 1, index + 1, k)\n        return max(res, a[index] + res)\n    else:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    ans = float(\"-inf\")\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n    i = index\n    \n    j = 0\n    while j < n:\n        if j >= i:\n            if a[j] < a[i]:\n                a[i] = a[j]\n            if j + 1 < n and a[j+1] < a[j] + a[j+1]:\n                a[i] = a[j] + a[j+1]\n        j += 1\n        i += 1\n    \n    return a[i] + max_sum_increasing_subseq(a, n, i+1, k)\n    "
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0 or (n == 0 and index == 0):\n        return a[index]\n    if index == 0:\n        return 0\n    if k == n:\n        return a[index]\n    temp = max_sum_increasing_subseq(a, n, index + 1, k)\n    return max(temp, a[index] + max_sum_increasing_subseq(a, n, index, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    i = index\n    k_plus = k+1\n    res = a[0]\n    k_minus = 1\n    sum = 0\n    res = res + a[i]\n    while i >= 0:\n        if i == n-1:\n            res = max(k_plus, res, k_minus)\n            k_plus = k_minus\n        else:\n            res = max(res, k_plus, a[i+1])\n            k_plus = k_minus\n        sum = max(sum, res)\n        i = index+1\n        res = a[i]\n    return sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    while i < n:\n        if a[i] <= a[i-1]:\n            a[i+1] = a[i]\n            i += 1\n        else:\n            a[i] = a[i-1]\n            i += 1\n            break\n    if k > i:\n        return max_sum_increasing_subseq(a, n, i, k)\n    return a[i]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Your code here\n    n=len(a)\n    if k>n:\n        return max_sum_increasing_subseq(a, n, index, k)\n    else:\n        max_v = max(a[index:n])\n        # Check to see if the next element is at the end of the list\n        if index+k > n:\n            return max_v\n        else:\n            # Check if the current element is at the end of the list\n            if a[index] < max_v:\n                return max_v\n            else:\n                # If the current element is not at the end of the list, add the current element to the list\n                return max(max_sum_increasing_subseq(a, n, index+k, k), a[index] + max_v)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        if n == 0:\n            return tuplex\n        elif n==1:\n            return (tuplex[0],tuplex[1])\n        else:\n            return (tuplex[0],tuplex[1],tuplex[2])\n    else:\n        if n == 0:\n            return tuplex[0]\n        elif n==1:\n            return (tuplex[0],tuplex[1])\n        else:\n            return (tuplex[0],tuplex[1],tuplex[2])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == n:\n        return m\n    elif m < n:\n        return colon_tuplex(tuplex,m+1,n)\n    else:\n        return colon_tuplex(tuplex,m,n-1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #Create a dictionary to save the tuplex value\n    colon_dict = {}\n    #create a tuple to set the initial colon\n    tuplex = tuplex[:m]\n    #set the length of the tuplex\n    l = len(tuplex)\n    for i in range(0,l):\n        if i == l-1:\n            colon_dict[tuplex[i]] = tuplex[i]\n        else:\n            colon_dict[tuplex[i]] = tuplex[i+1]\n    #create a new list to put the colon\n    colon_list = []\n    #Create the colon list\n    for i in range(1,l):\n        colon_list.append(colon_dict[tuplex[i]])\n    #return the colon\n    return colon_list\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    k = len(tuplex)\n    if m == 1:\n        if n == 0:\n            return \" \"\n        elif k > 0:\n            return tuplex[n]\n        else:\n            return \" \"\n    elif m == 0:\n        if n == 1:\n            return \" \"\n        elif k > 0:\n            return tuplex[n-1]\n        else:\n            return \" \"\n    else:\n        if k == 0:\n            return tuplex[n]\n        elif k == 1:\n            return tuplex[n-1]\n        else:\n            return \" \"\n    \ndef newline(m,n):\n    '''\n    Write a function to generate a newline (Newline) for a row of a 2D list.\n    '''\n    print(\"\\n\",end=\"\")\n    for i in range(0,m):\n        print(\",\",end=\"\")\n        \ndef print_row(m,n,tuplex):\n    '''\n    Write a function to print a row.\n    '''\n    if m == 0:\n        print(\" \" * n)\n    elif n == 1:\n        print(tuplex[0])\n    else:\n        print_row(m-1,0,tuplex)\n        print(tuplex[n-1])\n        print_row(m-1,n-1,tuplex)\n        \ndef make_column(m,n,tuplex):\n    '''\n    Write a function to print a column.\n    '''\n    print(m,\"|\",end=\"\")\n    for i in range(0,n):\n        print(tuplex[i],end=\"\")\n        \ndef make_col(m,n,tuplex):\n    '''\n    Write a function to print a column.\n    '''\n    print_col(m,n,tuplex)\n    print(m,\"|\",end=\"\")\n    for i in range(0,n):\n        print(tuplex[i],end=\"\")\n        \ndef make_row(m,n,tuplex):\n    '''\n    Write a function to print a row.\n    '''\n    print_row(m,n,tuplex)\n    print(m,\"|\",end=\"\")\n    \ndef print_column(m,n,tuplex):\n    '''\n    Write a function to print a column.\n    '''\n    for i in range(0,m):\n        print_col(i,n,tuplex)\n    print(m,\"|\",end=\"\")\n    \ndef print_row(m,n,tuplex):\n    '''\n    Write a function to print a row.\n    '''\n    for i in range(0,n):\n        print(tuplex[i],end=\"\")\n        \ndef print_col(m,n,tuplex):\n    '''\n    Write a function to print a column.\n    '''\n    for i in range(0,m):\n        print_row(i,n,tuplex)\n        print(tuplex[i],end=\"\")\n    print(m,\"|\",end=\"\")\n    \ndef print_row_box(m,n,tuplex):\n    '''\n    Write a function to print a row.\n    '''\n    print_row(m,n,tuplex)\n    print(m,\"|\",end=\"\")\n    for i in range(0,n):\n        print_row_box(m,n,tuplex)\n        print(tuplex[i],end=\"\")\n        \ndef print_column_box(m,n,tuplex):\n    '''\n    Write a function to print a column.\n    '''\n    print_column(m,n,tuplex)\n    print(m,\"|\",end=\"\")\n    for i in range(0,n):\n        print_column_box(m,n,tuplex)\n        print(tuplex[i],end=\"\")\n        \ndef print_row_box_box(m,n,tuplex):\n    '''\n    Write a function to print a row.\n    '''\n    print_row(m,n,tuplex)\n    print(m,\"|\",end=\"\")\n    for i in range(0,n):\n        print_row_box(m,n,tuplex)\n        print(tuplex[i],end=\"\")\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == n+1:\n        return tuplex\n    else:\n        return colon_tuplex(tuplex + (m,),m,n+1)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == n:\n        # print('tuplex',tuplex)\n        return tuplex[0][0]\n    if len(tuplex) == m:\n        # print('tuplex',tuplex)\n        return tuplex[0][0]\n    else:\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i][m]==n:\n            return tuplex[i][0:n]\n        elif tuplex[i][m]>n:\n            n=tuplex[i][m]\n    return None\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = list()\n    for i in range(m,n):\n        colon_tuplex.append(tuplex[i])\n    return colon_tuplex\ndef remove_duplicates(tuplex):\n    '''\n    Remove duplicate elements from a list.\n    '''\n    return list(dict.fromkeys(tuplex))\ndef is_valid_colon(tuplex):\n    '''\n    Check if a tuple is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if tuplex[0]!= tuplex[1]:\n        return False\n    return True\ndef is_valid_tuple(tuplex):\n    '''\n    Check if a tuple is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if tuplex[0] == tuplex[1]:\n        return True\n    else:\n        return False\ndef is_valid_list(tuplex):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    for element in tuplex:\n        if element == element:\n            return True\n    return False\ndef is_valid_list_duplicate_elements(tuplex):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if tuplex[0] == tuplex[1]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[0]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_first_index(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if tuplex[0] == element:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_last_index(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if tuplex[-1] == element:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_0(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[0]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_0_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-1]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_1(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[1]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_1_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-1]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_2(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[2]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_2_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-2]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_3(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-3]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_3_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-4]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_4(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-5]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_4_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-6]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_5(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-7]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_5_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-8]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_6(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-9]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_6_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-10]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_7(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-11]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_7_minus_one(tuplex,element):\n    '''\n    Check if a list is valid.\n    '''\n    if len(tuplex)!= 2:\n        return False\n    if element == tuplex[-12]:\n        return True\n    else:\n        return False\ndef is_valid_list_duplicate_element_in_index_8(tuple"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return tuplex[n]\n    else:\n        return colon_tuplex(tuplex,m-1,n) + tuplex[n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i+m] for i in range(0,n,m))\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 and len(nums2) == 0:\n        return None\n    if len(nums1) == 0:\n        return [nums2]\n    if len(nums2) == 0:\n        return [nums1]\n    else:\n        l = len(nums1)\n        r = len(nums2)\n        dp = [[0] * r for _ in range(l)]\n        dp[0][0] = nums1[0] * nums2[0]\n        for i in range(l - 1):\n            for j in range(r - 1):\n                if nums1[i] < nums2[j]:\n                    dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j] + nums1[i])\n                else:\n                    dp[i + 1][j + 1] = max(dp[i + 1][j] + nums2[j], dp[i][j + 1])\n        return [nums1[i] for i in range(l) if dp[i][r - 1]"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    candidates = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] * nums2[j] > N:\n                continue\n            candidates.append([nums1[i] * nums2[j], i, j])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def second_largest(nums1, nums2, N):\n        result = []\n        for i in range(N):\n            temp = []\n            for j in range(N):\n                temp.append(nums1[i] * nums2[j])\n            result.append(max(temp))\n        return result\n    result = []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    for i in range(N):\n        if nums1[i]!= nums2[i]:\n            result.append(nums1[i])\n    for i in range(N-1, -1, -1):\n        if nums1[i]!= nums2[i]:\n            result.append(nums2[i])\n    result.reverse()\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #Write your code here\n    \n    if len(nums1) > N or len(nums2) > N:\n        print(\"Numbers of lists are not matching\")\n        return None\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n    arr = []\n    arr.extend(nums1)\n    arr.extend(nums2)\n    arr.sort(reverse = True)\n    result = []\n    i = 1\n    j = 0\n    while i < len(arr):\n        if i!= j:\n            temp = arr[i] * arr[j]\n            result.append(temp)\n            i += 1\n            j += 1\n        else:\n            j += 1\n    print(result)\n    return result\n    \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    k = 0\n    M = len(nums1)\n    N = len(nums2)\n    \n    # finding the products of the first list\n    for i in range(M):\n        n1 = nums1[i]\n        for j in range(N):\n            n2 = nums2[j]\n            if n1 * n2 > N:\n                break\n            elif n1*n2 == N:\n                k = max(k, 1)\n            elif n1*n2 < N:\n                k = max(k, n1 * n2)\n    return k\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # our idea is to put all the factors of the sum of nums1 and nums2 on the stack, we add them to the stack, so we have to sort all of the factors.\n    # we can do this by using the third stack, and keeping the size of that stack as the size of the larger stack\n    # if the number of factors is a power of two we can return that factor\n    # this will be more than we need because we have to keep removing factors, since the lenght of the larger stack will be greater than the\n    # lenght of the smaller stack\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = []\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    ans = 0\n    for i in range(N):\n        ans += nums1[i] * nums2[i]\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #nums1, nums2, N = list of nums, list of nums with product\n    s = sorted(nums1)\n    l = len(nums2)\n    if l > N:\n        return\n    i = 0\n    while(i < l):\n        idx = 0\n        num_1 = s[i]\n        while(idx < N):\n            if num_1 <= nums2[idx]:\n                break\n            idx += 1\n        if(idx == N):\n            i = i + 1\n            num_1 = s[i]\n        else:\n            i += 1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    i = 0\n    j = 0\n    ans = []\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) == type(b):\n        return a if a>b else b\n    else:\n        print(\"Please enter numbers only\")\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(\"Maximum is: \",max(a,b))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print (a)\n    else:\n        print (b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(a)\n    print(b)\n    if a > b:\n        print(a)\n        print(b)\n    else:\n        print(b)\n        print(a)\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a\n    if b>a:\n        maximum = a\n    if a>b:\n        maximum = b\n    return maximum\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max=a\n    if b>max:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max_num = max(a,b)\n    return max_num\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # write your code here\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a==b):\n        return a\n    else:\n        return max(a,b)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = tuple(str1)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return (int(str1),int(str1[0]),int(str1[1]),int(str1[2]),int(str1[3]),int(str1[4]),int(str1[5]),int(str1[6]),int(str1[7]),int(str1[8]))"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_list = []\n    for char in str1:\n        tuple_list.append(char)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if not str1:\n        return ()\n    tup_str = tuple(str1)\n    return tup_str\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    import re\n    pat = re.compile(r'(\\w+)')\n    return pat.findall(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(map(ord,str1))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = tuple(str1)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if str1=='':\n        return ()\n    elif len(str1)==1:\n        return ('',str1)\n    elif len(str1)==2:\n        return ('',str1[0],str1[1])\n    else:\n        return ('',str1[0],str1[1],str1[2],str1[3],str1[4],str1[5])\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n:\n        n &= (n-1)\n    else:\n        n = n-1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n==0:\n        n=1\n    return n\ndef get_right_most_set_bit(n): \n    '''\n    Write a python function to get the right most set bit.\n    '''\n    if n==0:\n        n=1\n    return n\ndef is_set(n): \n    '''\n    Write a python function to determine if a number is set.\n    '''\n    if n==0:\n        return True\n    else:\n        return False\ndef is_unset(n): \n    '''\n    Write a python function to determine if a number is unset.\n    '''\n    if n==0:\n        return True\n    else:\n        return False\ndef is_prime(n): \n    '''\n    Write a python function to determine if a number is prime.\n    '''\n    if n==0:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_combination(n): \n    '''\n    Write a python function to determine if a number is a combination of numbers.\n    '''\n    if n==0:\n        return True\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef prime_factor(n): \n    '''\n    Write a python function to find the prime factor of a given number.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return (i,n//i)\n    return None\ndef is_factorial(n): \n    '''\n    Write a python function to determine if a number is factorial.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_prime_factorial(n): \n    '''\n    Write a python function to determine if a number is prime factorial.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_summation(n): \n    '''\n    Write a python function to determine if a number is summation.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_subset(n,m): \n    '''\n    Write a python function to determine if a number is a subset of a given number.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if i not in n:\n                return False\n    return True\ndef is_consecutive(n): \n    '''\n    Write a python function to determine if a number is a consecutive integer.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if i not in n:\n                return False\n    return True\ndef contains_duplicate(n): \n    '''\n    Write a python function to determine if a number contains duplicate numbers.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if i not in n:\n                return False\n    return True\ndef is_equal(n): \n    '''\n    Write a python function to determine if a number is equal to another number.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            if i not in n:\n                return False\n    return True\ndef is_valid(n): \n    '''\n    Write a python function to determine if a number is a valid number.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_power(n): \n    '''\n    Write a python function to determine if a number is a power.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_recursive(n): \n    '''\n    Write a python function to determine if a number is a recursive number.\n    '''\n    if n==0:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef find_prime_factors(n): \n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n==0:\n        return []\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return [i]\n    return find_prime_factors(n//2)\ndef find_factor_combinations(n): \n    '''\n    Write a python function to find the factor combinations of a given number.\n    '''\n    if n==0:\n        return []\n    return find_factor_combinations(n//2)+[n//2]\ndef find_factorial_recursive(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0:\n        return 1\n    return n*find_factorial_recursive(n-1)\ndef prime_factors_recursive(n): \n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n==0:\n        return []\n    if n==1:\n        return [1]\n    a=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            a.append(i)\n            if i not in n:\n                return a\n    return a\ndef prime_factors_recursive(n): \n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if n==0:\n        return []\n    if n==1:\n        return [1]\n    a=[]\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            a.append(i)\n            if i not in n:\n                return a\n    return a\ndef is_perfect_square(n): \n    '''\n    Write a python function to determine if a number is a perfect square.\n    '''\n    if n==0:\n        return True\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n%4==0:\n        return is_perfect_square(n//4)\n    if n%3==0:\n        return is_perfect_square(n//3)\n    if n%2==0:\n        return is_perfect_square(n//2)\n    return False\ndef is_prime_square(n): \n    '''\n    Write a python function to determine if a number is a prime square.\n    '''\n    if n==0:\n        return True\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n%4==0:\n        return is_prime_square(n//4)\n    if n%3==0:\n        return is_prime_square(n//3)\n    if n%2==0:\n        retur"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    '''\n    input:\n        n: the number\n    output:\n        returns the updated number\n    '''\n    i = 1\n    while (i <= n):\n        if (i % 2):\n            print(i)\n        i = (i >> 1) + 1\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 0: \n        n = n + 2**32 # if n is negative, make it positive\n    if n > 2**32-1: \n        n = n - 2**32\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(len(n)):\n        if n[i] == 1:\n            n[i] = 0\n        else:\n            n[i] = 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if(n == 0):\n        return \n    n &= 0xF0\n    n |= (1 << 7)\n    n &= 0xF0\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n < 2**31: \n        return n\n    else: \n        return -1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = (n << 1) ^ (1 << 8)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = n & (-n)\n    n = n >> set_bit\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*(r**2)*h,3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(4*math.pi*r*h*r*(1-(h/2.0)),2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r ** 2) * (math.sin(math.radians(h)) / 2)\n    print('The volume is'+ str(v) +'lm2')\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi * (r ** 2) * (math.sin(math.radians(h)) / 2)\n    print('The volume is'+ str(v) +'lm2')\n    return v\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    v = math.pi * (r ** 2) * (math.sin(math.radians(h)) / 2)\n    print('The volume is'+ str(v) +'lm2')\n    return v\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    A = math.pi * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle(r):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_triangle(r):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    A = 3 * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rec(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_circ(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_triangle(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = 3 * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle_rec(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle_circ(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_circle(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = (math.pi * (r ** 2))\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rectangle(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = 3 * r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rectangle_triangle(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle(r):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_triangle(r):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    V = 3 * r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_rec(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_circ(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_triangle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle_rec(r):\n    '''\n    Write a function to find the volume of a rectangle and a circle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle_circ(r):\n    '''\n    Write a function to find the volume of a rectangle and a circle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_circle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_rectangle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_rectangle_triangle(r):\n    '''\n    Write a function to find the volume of a rectangle and a circle.\n    '''\n    V = r ** 2\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef volume_circle_triangle(r):\n    '''\n    Write a function to find the volume of a circle and a rectangle.\n    '''\n    V = math.pi * (r ** 2)\n    print('The volume is'+ str(V) +'lm2')\n    return V\ndef area_rec(r):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    A = r ** 2\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_rec_circ(r):\n    '''\n    Write a function to calculate the area of a rectangle and a circle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rec(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('The area is'+ str(A) +'lm2')\n    return A\ndef area_circle_rec_circ(r):\n    '''\n    Write a function to calculate the area of a circle and a rectangle.\n    '''\n    A = math.pi * (r ** 2)\n    print('Th"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*(h**3)\n    #return 3.14*(r*h)\ndef find_volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (3.14)*r*h\n    #return 3.14*(r*h)\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return r*(3.14)*h\n    #return r*h\ndef find_area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (3.14)*r*h\n    #return 3.14*(r*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # your code here\n    return math.pi*(r*r)/4*math.sin(math.pi/2)*h*(4*math.pi)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Write your code here\n    x=2*(math.pi)/h\n    r=r*math.sin(x)\n    return math.pow(r*r*2,1/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4*math.pi*(r**2)*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # fill in parameters\n    m = 3\n    c = h / 2\n    r2 = r * r\n    n = 2 * math.pi * r2\n    volume = m * c * (1 - math.exp(-n / c))\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3) * math.pi * (r**3) * (h**3)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # First, let's define the variable n, a positive integer less than or equal to n.\n    n = int(n)\n    # Start building the loop \n    for x in range(2, n+1):\n        # If the number is divisible by 2, the power of 2 is 1\n        if(x == 2 or x%2 == 0):\n            # If the number is divisible by 3, the power of 2 is 2\n            if(x%3 == 0):\n                return x\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return highest_Power_of_2(n - 1) + highest_Power_of_2(n - 2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2: \n        return n \n    else: \n        return highest_Power_of_2(n//2) \n    \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return max(find_Power_of_2(n), find_Power_of_2(2*n))\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    num = 2\n    if n <= 0:\n        return 0\n    while n % 2 == 0:\n        n = n/2\n        num += 1\n    while n % 3 == 0:\n        n = n/3\n        num += 1\n    while n % 5 == 0:\n        n = n/5\n        num += 1\n    if num == 1:\n        return 0\n    return num\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n=int(n)\n    res=0\n    for i in range(2,n+1):\n        if n%i==0:\n            res+=1\n    return res\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return n*(2**n)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2: \n        return n\n    elif n <= 10:\n        return n**2\n    elif n <= 100:\n        return n**3\n    else: \n        return n**4\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    l = []\n    for i in range(n, 0, -1): \n        if i > 1: \n            if i % 2 == 0: \n                l.append(2) \n            else: \n                l.append(1) \n        else: \n            l.append(0) \n    return l \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n<=1:\n        return n\n    elif n==2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # get the first term from the given number\n    # make two steps, calculate the next term and store it in the variable nth\n    # if nth term is equal to n\n    # then return nth term\n    # otherwise return nth term with 2 different steps\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    if n == 5:\n        return 120\n    if n == 6:\n        return 720\n    if n == 7:\n        return 5040\n    if n == 8:\n        return 48512\n    if n == 9:\n        return 54144\n    if n == 10:\n        return 54288\n    if n == 11:\n        return 54384\n    if n == 12:\n        return 55400\n    if n == 13:\n        return 54272\n    if n == 14:\n        return 54240\n    if n == 15:\n        return 54152\n    if n == 16:\n        return 54110\n    if n == 17:\n        return 53984\n    if n == 18:\n        return 53952\n    if n == 19:\n        return 53928\n    if n == 20:\n        return 53916\n    if n == 21:\n        return 53904\n    if n == 22:\n        return 53900\n    if n == 23:\n        return 54998\n    if n == 24:\n        return 54993\n    if n == 25:\n        return 53984\n    if n == 26:\n        return 53952\n    if n == 27:\n        return 53928\n    if n == 28:\n        return 53916\n    if n == 29:\n        return 53904\n    if n == 30:\n        return 53900\n    if n == 31:\n        return 53998\n    if n == 32:\n        return 54996\n    if n == 33:\n        return 54994\n    if n == 34:\n        return 54992\n    if n == 35:\n        return 54990\n    if n == 36:\n        return 53984\n    if n == 37:\n        return 53952\n    if n == 38:\n        return 53928\n    if n == 39:\n        return 53916\n    if n == 40:\n        return 53904\n    if n == 41:\n        return 53900\n    if n == 42:\n        return 53998\n    if n == 43:\n        return 53996\n    if n == 44:\n        return 53984\n    if n == 45:\n        return 53952\n    if n == 46:\n        return 53928\n    if n == 47:\n        return 53916\n    if n == 48:\n        return 53904\n    if n == 49:\n        return 53900\n    if n == 50:\n        return 54998\n    if n == 51:\n        return 54993\n    if n == 52:\n        return 54992\n    if n == 53:\n        return 54990\n    if n == 54:\n        return 54996\n    if n == 55:\n        return 54994\n    if n == 56:\n        return 54992\n    if n == 57:\n        return 54990\n    if n == 58:\n        return 54994\n    if n == 59:\n        return 54992\n    if n == 60:\n        return 54990\n    if n == 61:\n        return 54994\n    if n == 62:\n        return 54992\n    if n == 63:\n        return 54990\n    if n == 64:\n        return 54994\n    if n == 65:\n        return 54992\n    if n == 66:\n        return 54990\n    if n == 67:\n        return 54994\n    if n == 68:\n        return 54992\n    if n == 69:\n        return 54990\n    if n == 70:\n        return 54994\n    if n == 71:\n        return 54992\n    if n == 72:\n        return 54990\n    if n == 73:\n        return 54994\n    if n == 74:\n        return 54992\n    if n == 75:\n        return 54990\n    if n == 76:\n        return 54994\n    if n == 77:\n        return 54992\n    if n == 78:\n        return 54990\n    if n == 79:\n        return 54994\n    if n == 80:\n        return 54992\n    if n == 81:\n        return 54990\n    if n == 82:\n        return 54994\n    if n == 83:\n        return 54992\n    if n == 84:\n        return 54990\n    if n == 85:\n        return 54994\n    if n == 86:\n        return 54992\n    if n == 87:\n        return 54990\n    if n == 88:\n        return 54994\n    if n == 89:\n        return 54992\n    if n == 90:\n        return 54990\n    if n == 91:\n        return 54994\n    if n == 92:\n        return 54992\n    if n == 93:\n        return 54990\n    if n == 94:\n        return 54994\n    if n == 95:\n        return 54992\n    if n == 96:\n        return 54990\n    if n == 97:\n        return 54994\n    if n == 98:\n        return 54992\n    if n == 99:\n        return 54990\n    if n == 100:\n        return 54994\n    if n == 101:\n        return 54992\n    if n == 102:\n        return 54990\n    if n == 103:\n        return 54994\n    if n == 104:\n        return 54992\n    if n == 105:\n        return 54990\n    if n == 106:\n        return 54994\n    if n == 107:\n        return 54992\n    if n == 108:\n        return 54990\n    if n == 109:\n        return 54994\n    if n == 110:\n        return 54992\n    if n == 111:\n        return 54990\n    if n == 112:\n        return 54994\n    if n == 113:\n        return 54992\n    if n == 114:\n        return 54990\n    if n == 115:\n        return 54994\n    if n == 116:\n        return 54992\n    if n == 117:\n        return 54990\n    if n == 118:\n        return 54994\n    if n == 119:\n        return 54992\n    if n == 120:\n        return 54990\n    if n == 121:\n        return 54994\n    if n == 122:\n        return 54992\n    if n == 123:\n        return 54990\n    if n == 124:\n        return 54994\n    if n == 125:\n        return 54992\n    if n == 126:\n        return 54990\n    if n == 127:\n        return 54994\n    if n == 128:\n        return 54992\n    if n == 129:\n        return 54990\n    if n == 130:\n        return 54994\n    if n == 131:\n        return 54992\n    if n == 132:\n        return 54990\n    if n == 133:\n        return 54994\n    if n == 134:\n        return 54992\n    if n == 135:\n        return 54990\n    if n == 136:\n        return 54994\n    if n == 137:\n        return 54992\n    if n == 138:\n        return 54990\n    if n == 139:\n        return 54994\n    if n == 140:\n        return 54992\n    if n == 141:\n        return 54990\n    if n == 142:\n        return 54994\n    if n == 143:\n        return 54992\n    if n == 144:\n        return 54990\n    if n == 145:\n        return 54994\n    if n == 146:\n        return 54992\n    if n == 147:\n        return 54990\n    if n == 148:\n        return 54994\n    if n == 149:\n        return 54992\n    if n == 150:\n        return 54990\n    if n == 151:\n        return 54994\n    if n == 152:\n        return 54992\n    if n == 153:\n        return 54990\n    if n == 154:\n        return 54994\n    if n == 155:\n        return 54992\n    if n == 156:\n        return 54990\n    if n == 157:\n        return 54994\n    if n == 158:\n        return 54992\n    if n == 159:\n        return 54990\n    if n == 160:\n        return 54994\n    if n == 161:\n        return 54992\n    if n == 162:\n        return 54990\n    if n == 163:\n        return 54994\n    if n == 164:\n        return 54992\n    if n == 165:\n        return 54990"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Code goes here\n    return pow(2, n) - 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 0:\n        print('Illegal input')\n    else:\n        return 2*n\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n<=1: \n        return 1\n    \n    if n%2==0: \n        return 1+find_lucas(n-1) \n    else: \n        return 1+find_lucas(n//2)+find_lucas(n//2-1) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n): \n        if n <= 1: \n            return n \n        else: \n            return lucas(n - 1) + lucas(n - 2) \n    return lucas(n) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 6\n    return find_lucas(n - 1) + find_lucas(n - 2) + find_lucas(n - 3)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in string:\n        list_.append(i)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if not list_:\n        return []\n    if not string:\n        return list_\n    if string[0] == '$':\n        return list_ + add_string(list_[1:], string[1:])\n    return add_string(list_[1:], string[1:])\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = string.format(element)\n        list_.append(element)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def apply(elem):\n        if type(elem) is str:\n            elem = elem.strip()\n            if elem[0] == '{':\n                sub_list = elem.split('}')\n                elem = sub_list[-1]\n                if elem[0]!= '{':\n                    raise ValueError('Empty dictionary on top level!')\n                sub_list = elem.split('}')\n                elem = sub_list[-1]\n            if elem[0] == '{':\n                elem = apply(elem[1:])\n                if elem[0]!= '{':\n                    raise ValueError('Empty dictionary on top level!')\n            return {'{': {elem}}\n        else:\n            return elem\n    return apply(list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def apply_format(el):\n        if type(el) == int:\n            return str(el)\n        elif type(el) == str:\n            return apply_format(el.lower()) + el\n        else:\n            return el.replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n    #print(list_, string, \"\\n\")\n    return apply_format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [str(elem) for elem in list_]\n    string = \" \".join(list_)\n    return string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        try:\n            string.format(item)\n        except (ValueError, KeyError):\n            pass\n        else:\n            list_[list_.index(item)] = item\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        print(element.format(string))\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [str(i) + string for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n        d2[l1[i]] = l3[i]\n        d3[l1[i]] = l3[i]\n    return [d1, d2, d3]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for x in l1:\n        d[x] = l2[l3.index(x)]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l2 == []:\n        return l3\n    if len(l2)!= len(l3):\n        print('Error')\n        return -1\n    r1 = l1[0]\n    r2 = convert_list_dictionary(l1[1:], l2[0], l3[0])\n    return r1, r2\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        for j in l2:\n            d[i] = j\n    for i in l3:\n        d[i] = {}\n        for j in l2:\n            d[i][j] = l2[j]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1[i] = convert_list_dictionary(l1[i], l2, l3)\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dictionary = {}\n    for i in range(len(l1)):\n        if type(l1[i])!= type(l2[i]):\n            l1[i] = [l1[i]]\n        if type(l2[i])!= type(l3[i]):\n            l2[i] = [l2[i]]\n        nested_dictionary[i] = {\n            key:convert_list_dictionary(l1[i],l2[i],l3[i])\n            for key in l1[i]\n        }\n    return nested_dictionary"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    result['user'] = l1\n    result['email'] = l2\n    result['password'] = l3\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l1 is None:\n        return None\n    if l2 is None:\n        return None\n    if l3 is None:\n        return None\n    d = {'name':l1}\n    for i in range(len(l2)):\n        d.update({l2[i][0]:l2[i][1]})\n    for i in range(len(l3)):\n        d.update({l3[i][0]:l3[i][1]})\n    return d\n    \ndef get_neighbours(cx, cy, cz, cx2, cy2, cz2, cx3, cy3, cz3):\n    '''\n    Get all three neighbours of a cell in 3D\n    '''\n    nx = [cx2 - cx, cx2 + cx, cx3 - cx, cx3 + cx]\n    ny = [cy2 - cy, cy2 + cy, cy3 - cy, cy3 + cy]\n    nz = [cz2 - cz, cz2 + cz, cz3 - cz, cz3 + cz]\n    return nx, ny, nz\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        for j in i:\n            d[j] = 1\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        if i not in d1:\n            d1[i] = {}\n        d1 = d1[i]\n    d2 = {}\n    for i in l2:\n        if i not in d2:\n            d2[i] = {}\n        d2 = d2[i]\n    d3 = {}\n    for i in l3:\n        if i not in d3:\n            d3[i] = {}\n        d3 = d3[i]\n    return d1, d2, d3\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n + max(n, n+3)\n    elif n == 3:\n        return n + max(n, n+2)\n    else:\n        return n + max(n, n+4)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (f(n) + f(n/2) + f(n/3) + f(n/4) + f(n/5)"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int (n)\n    f = lambda n: (f (n/2), f (n/3), f (n/4), f (n/5)) [n % 2]\n    return f (n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = []\n    a.append(1)\n    a.append(2)\n    a.append(3)\n    a.append(4)\n    a.append(5)\n    i = 6\n    while i <= n:\n        a.append(a[i-1] + a[i])\n        i += 1\n    return a[n]\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #f(n/2) = (f(n/2) + 2 * f(n/2) + n) / 2\n    #f(n/3) = 2 * 2 * f(n/3) + 2 * f(n/3) + n\n    #f(n/4) = 2 * 2 * 2 * f(n/4) + 2 * f(n/4) + n\n    #f(n/5) = n + f(n/5)\n    #n = 1 or 2\n    \n    return ((f(n/2) + 2 * f(n/2) + n) / 2 + f(n/3) + 2 * 2 * f(n/3) + n)\n    \ndef main():\n    n = input('Input a number: ')\n    print('The maximum sum possible by using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). ')\n    print('The equation is: ', end = '')\n    print(get_max_sum(int(n)))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return get_max_sum (n-1) + get_max_sum (n/2) + get_max_sum (n/3) + get_max_sum (n/4) + get_max_sum (n/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return n\n    else:\n        return (n+1) * n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = (1/2)\n    b = (1/3)\n    c = (1/4)\n    d = (1/5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    numerator = f(n)\n    denominator = 1 + 3 + 4 + 5 + 6 + 7\n    max_numerator = numerator * denominator\n    max_denominator = 1 + 3 + 4 + 5 + 6 + 7\n    \n    return int(max(max_numerator, max_denominator))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for num in input_list:\n        if len(str(num)) > max_len:\n            max_len = len(str(num))\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = len(input_list)\n    for i in range(0, max):\n        for j in range(i, max):\n            if input_list[i] > input_list[j]:\n                max = i\n                break\n    return max\n    \nprint(max_length_list([1, 5, 4, 2, 7, 0, 9, 8, 3, 6, 4, 5]))\nprint(max_length_list(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return input_list[0]\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # TODO: write a function that checks if all elements in the tuple are unique.\n    # return a boolean value that indicates if the tuple is unique or not.\n    # return True or False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not any([(test_tup[i] == test_tup[i-1]) for i in range(len(test_tup)-1)])\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if (len(test_tup)!= len(set(test_tup))):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if isinstance(test_tup, tuple) == False:\n        print(\"Invalid Input, should be tuple\")\n        exit()\n    else:\n        for x in test_tup:\n            if x in test_tup:\n                print(x)\n                print(\"\\n\")\n                print(\"Necessary to have unique elements\")\n                print(\"\\n\")\n                exit()\n                \n                \ndef main():\n    '''\n    Write a function to validate input\n    '''\n    check_distinct((str(input(\"Please enter a list of numbers separated by commas, just to make sure they are all in a single line, only the first number must be a number\\n\"))))\n    print(\"\\n\")\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check for duplicate elements\n    if len(test_tup) > 1:\n        for element in test_tup:\n            if element in test_tup:\n                return False\n    # If duplicate element found\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in test_tup:\n        if i in test_tup:\n            count += 1\n    return count == 0\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return not any(test_tup[i] in seen for i in range(len(test_tup)))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    return len(test_set) == len(test_set)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    check_distinct_tuple = set(test_tup)\n    if len(check_distinct_tuple) == len(set(check_distinct_tuple)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = []\n    for ch in str1:\n        if ch not in char_list:\n            char_list.append(ch)\n    return char_list[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic = {}\n    for c in str1:\n        if c not in dic:\n            dic[c] = 1\n        else:\n            dic[c] += 1\n    res = list(dic.keys())[0]\n    return res\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq_dict = {}\n    for ch in str1:\n        if ch not in freq_dict:\n            freq_dict[ch] = 1\n        else:\n            freq_dict[ch] += 1\n    for ch in freq_dict:\n        if freq_dict[ch] == 1:\n            return ch\n    return \"no character found\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    sorted_count = sorted(count.items(), key=lambda item: item[1], reverse=True)\n    return sorted_count[0][0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # First occurrence, if there is no occurrence\n    if str1 == \"\":\n        return 0\n    # Number of occurences = number of letters of the string\n    if len(str1) == 0:\n        return 0\n    # Number of occurrences = number of characters of the string\n    elif len(str1) == 1:\n        return str1[0]\n    # Number of occurrences = the first character of the string\n    elif len(str1) == 2:\n        return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    '''\n    import re\n    def second_non_repeating_character(str1):\n        str2 = str1.lower()\n        return str2.count('a', 0, len(str1))\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    # TODO: Remove this line when you implement this function\n    print(str1)\n    return str1.count('a', 0, len(str1))\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    # lst = []\n    # for i in str1:\n    #     if i not in lst:\n    #         lst.append(i)\n    # print(lst)\n    # if len(lst)>=1:\n    #     return lst[0]\n    # else:\n    #     return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == str1.lower():\n        return str1.lower()\n    else:\n        return str1.lower().replace(\" \",\"\")[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Get the length of the string\n    length = len(str1)\n    \n    # Start with the first character in the string\n    first_char = str1[0]\n    \n    # Keep going until we find a non-repeating character\n    while first_char in str1:\n        # Append the character\n        first_char = first_char + str1[0]\n    \n    # Return the first non-repeating character\n    return first_char\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string) is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match is not None:\n        return True\n    else:\n        return False\ndef is_same_letter(s1, s2):\n    '''\n    Return True if the given characters are same, False otherwise.\n    '''\n    if s1 == s2:\n        return True\n    elif s1 in ['a', 'e', 'i', 'o', 'u'] and s2 in ['a', 'e', 'i', 'o', 'u']:\n        return True\n    else:\n        return False\ndef is_match_logical(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same characters.\n    '''\n    match = re.match(regex, string)\n    if match is not None:\n        return True\n    else:\n        return False\ndef get_position_logical(s):\n    '''\n    Return the index of the first occurrence of the given substring.\n    '''\n    index = 0\n    for i, ch in enumerate(s):\n        if is_match_logical(s[:index]):\n            return index\n        index += 1\n    return -1\ndef get_position_indicator(s):\n    '''\n    Return the index of the first occurrence of the given substring.\n    '''\n    for i, ch in enumerate(s):\n        if ch =='':\n            continue\n        if is_match_logical(s[:i+1]):\n            return i\n    return -1\ndef is_match_logical_r(s):\n    '''\n    Return True if the given string starts with the same characters.\n    '''\n    if get_position_indicator(s) == 0:\n        return True\n    else:\n        return False\ndef is_match_logical_c(s):\n    '''\n    Return True if the given string ends with the same characters.\n    '''\n    if get_position_indicator(s) == len(s):\n        return True\n    else:\n        return False\ndef is_match_logical_l(s):\n    '''\n    Return True if the given string starts with the same characters.\n    '''\n    if get_position_indicator(s) == -1:\n        return True\n    else:\n        return False\ndef get_indicator_logical(string):\n    '''\n    Return the index of the first occurrence of the given substring.\n    '''\n    index = 0\n    for i, ch in enumerate(string):\n        if is_match_logical(string[:index]):\n            return index\n        index += 1\n    return -1\ndef get_indicator_indicator(s):\n    '''\n    Return the index of the first occurrence of the given substring.\n    '''\n    for i, ch in enumerate(s):\n        if ch =='':\n            continue\n        if is_match_logical(s[:i+1]):\n            return i\n    return -1\ndef is_match_logical_r_l(s):\n    '''\n    Return True if the given string starts with the same characters.\n    '''\n    if get_indicator_indicator(s) == 0:\n        return True\n    else:\n        return False\ndef is_match_logical_l_r(s):\n    '''\n    Return True if the given string ends with the same characters.\n    '''\n    if get_indicator_indicator(s) == len(s):\n        return True\n    else:\n        return False\ndef get_string_match(string):\n    '''\n    Return the matched substring in a string, if any.\n    '''\n    match = re.search(regex, string)\n    if match is not None:\n        return match.group(0)\n    else:\n        return False\ndef is_substring_match(string, substrings):\n    '''\n    Return True if the given substring is matched in the given string, if any.\n    '''\n    if get_string_match(string) in substrings:\n        return True\n    else:\n        return False\ndef get_string_matches(string, substrings):\n    '''\n    Return a list of the matched strings in the given string.\n    '''\n    return [get_string_match(string), get_string_match(string) + \" \" + get_string_match(string) + \" \" + get_string_match(string) + \" \" + get_string_match(string) + \" \" + get_string_match(string)]\ndef get_string_match_l(string):\n    '''\n    Return the matched substring in a string, if any.\n    '''\n    match = re.search(regex, string)\n    if match is not None:\n        return match.group(0)\n    else:\n        return False\ndef get_string_match_l_r(string):\n    '''\n    Return the matched substring in a string, if any.\n    '''\n    match = re.search(regex, string)\n    if match is not None:\n        return match.group(0)\n    else:\n        return False\ndef get_string_matches_l(string, substrings):\n    '''\n    Return a list of the matched strings in the given string.\n    '''\n    return [get_string_match_l(string), get_string_match_l(string) + \" \" + get_string_match_l(string) + \" \" + get_string_match_l(string) + \" \" + get_string_match_l(string) + \" \" + get_string_match_l(string)]\ndef get_string_matches_l_r(string):\n    '''\n    Return the matched substring in a string, if any.\n    '''\n    match = re.search(regex, string)\n    if match is not None:\n        return match.group(0)\n    else:\n        return False\ndef get_string_matches_l_r_r(string):\n    '''\n    Return the matched substring in a string, if any.\n    '''\n    match = re.search(regex, string)\n    if match is not None:\n        return match.group(0)\n    else:\n        return False\ndef is_match_logical_l_r(s):\n    '''\n    Return True if the given string starts with the same characters.\n    '''\n    if get_indicator_indicator(s) == 0:\n        return True\n    else:\n        return False\ndef is_match_logical_l_r_l(s):\n    '''\n    Return True if the given string ends with the same characters.\n    '''\n    if get_indicator_indicator(s) == len(s):\n        return True\n    else:\n        return False\ndef is_match_logical_l_r_r(s):\n    '''\n    Return True if the given string starts with the same characters.\n    '''\n    if get_indicator_indicator(s) == -1:\n        return True\n    else:\n        return False\ndef is_match_logical_l_r_r(s):\n    '''\n    Return True if the given string ends with the same characters.\n    '''\n    if get_indicator_indicator(s) == len(s):\n        return True\n    else:\n        return False\ndef is_match_logical_l_r_l(s):\n    '''\n    Return True if the given string starts with the same characters.\n    '''\n    if get_indicator_indicator(s) == -1:\n        return True\n    else:\n        return False\ndef is_match_logical_l_r_l(s):\n    '''\n    Return True if the given string ends with the same characters.\n    '''\n    if get_indicator_indicator(s) == len(s):\n        return True\n    else:\n        return False\ndef get_substring_match(string):\n    '''\n    Return the matched substring in a string, if any.\n    '''\n    match = re.search(regex, string)\n    if match is not None:\n    "
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string == '':\n        return True\n    elif string.startswith(string) and string.endswith(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        print(\"char is equal\")\n    else:\n        print(\"char is not equal\")\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string.startswith(string[0]) and string.endswith(string[-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    matcher = re.search(regex, string)\n    if matcher:\n        return matcher.group()\n    else:\n        return \"\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=int(a)+int(b)+int(c)\n    if x%2==0:\n        x=x//2\n        return (int(a)+int(b)+int(c))/2\n    else:\n        x=(x-int(a))*(-1)\n        return x\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b or a<c or b<c:\n        return None\n    if a==b or a==c or b==c:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a= sorted(a)\n    b= sorted(b)\n    c= sorted(c)\n    return (a[int(len(a)/2)]+b[int(len(b)/2)]+c[int(len(c)/2)])/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3:\n        return None\n    a.sort()\n    return a[int((len(a)/3)+1)]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # note: input a,b,c are numbers\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > 0 and b > 0 and c > 0:\n        if a < b and b < c and a < c:\n            return a\n        elif b < a and b < c and b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)<3 or len(b)<3 or len(c)<3:\n        return -1\n    def median(a,b,c):\n        try:\n            if a+b+c>=3:\n                return (a+b+c)/3\n            elif a+b+c==3:\n                return a\n            elif a+b+c<3:\n                return b\n            else:\n                return c\n        except:\n            return -1\n    return median(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0:\n        return max(b, c)\n    if len(a) == 1:\n        return a[0]\n    return (a[0] + a[1] + a[2]) / 3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if len(a)==0 or len(b)==0 or len(c)==0:\n        print('The function returns None.  ')\n        return None\n    if len(a)==1 and len(b)==1 and len(c)==1:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==0 and len(c)==1:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==0 and len(c)==1:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==0 and len(b)==1 and len(c)==1:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==1 and len(b)==1 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==1 and len(c)==1:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==1 and len(b)==1 and len(c)==1:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==1 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==0 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==1 and len(c)==0:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==1 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==0 and len(b)==1 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==1 and len(b)==1 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==0 and len(b)==1 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==1 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==1 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==1 and len(b)==0 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==0 and len(b)==1 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==1 and len(b)==1 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==0 and len(b)==1 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==0 and len(c)==1:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==1 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==0 and len(b)==1 and len(c)==0:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==0 and len(c)==1:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==1 and len(b)==1 and len(c)==0:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',a[0])\n        return a[0]\n    if len(a)==0 and len(b)==1 and len(c)==0:\n        print('The function returns:',b[0])\n        return b[0]\n    if len(a)==1 and len(b)==0 and len(c)==1:\n        print('The function returns:',c[0])\n        return c[0]\n    if len(a)==0 and len(b)==0 and len(c)==0:\n        print('The function returns:',a[0])"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x=a+b+c\n    x=int(x)\n    x=x/3\n    x=int(x)\n    x=x-int(x)\n    x=int(x)\n    return x\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # sum = 0\n    # for num in nums:\n    #     sum += num\n    # return sum\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # d = 0\n    # for number in nums:\n    #     d += number % 10\n    # return d\n    return sum([int(number) for number in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + int(num)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_array = []\n    for num in nums:\n        sum_of_digits = 0\n        for x in str(num):\n            sum_of_digits += int(x)\n        sum_of_digits_array.append(sum_of_digits)\n    return sum(sum_of_digits_array)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for test_tuple in test_tup1:\n        xor_result = xor_result ^ test_tuple[0]\n    for test_tuple in test_tup2:\n        xor_result = xor_result ^ test_tuple[1]\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Write your code here.\n    result = \"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2[i]:\n            result += test_tup1[i]\n        else:\n            result += test_tup2[i]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Write your code here.\n    return (test_tup1[0]^test_tup2[0], test_tup1[1]^test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in test_tup1:\n        result = result ^ i\n    for j in test_tup2:\n        result = result ^ j\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bit_tup1 = bit_tup(test_tup1)\n    bit_tup2 = bit_tup(test_tup2)\n    res = []\n    for i in range(len(bit_tup1)):\n        res.append(bit_tup1[i] ^ bit_tup2[i])\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if type(test_tup1)!= tuple or len(test_tup1)!= 2:\n        return \"Invalid inputs. Try again.\"\n    if type(test_tup2)!= tuple or len(test_tup2)!= 2:\n        return \"Invalid inputs. Try again.\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for tup1 in test_tup1:\n        result.append(tup1[0] ^ tup1[1])\n    for tup2 in test_tup2:\n        result.append(tup2[0] ^ tup2[1])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1, test_tup2 = test_tup1[::-1], test_tup2[::-1]\n    return list(map(lambda x,y: x ^ y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        result = result ^ test_tup2[i]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor = []\n    for i in range(0, len(test_tup1)):\n        bitwise_xor.append(bitwise_xor(test_tup1[i], test_tup2[i]))\n    \n    return bitwise_xor\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def count_unique(test_list):\n        '''\n        count_unique(test_list)\n        Count the number of unique elements in the list and return the number of unique tuples\n        '''\n        # Your code here\n        num_of_unique = 0\n        for ele in test_list:\n            if ele not in test_list:\n                num_of_unique += 1\n        return num_of_unique\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for item in test_list:\n        if type(item) is dict:\n            freq += len(item.keys())\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    count = 0\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n            count += 1\n    print(count)\n    return unique_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty list to store the number of unique tuples\n    # If the list is not empty, it should contain only the tuples with at least 1 occurrence\n    num_unique_tuples = []\n    if len(test_list) > 0:\n        # Check if there is any number of unique tuples in the list\n        for i in test_list:\n            if i not in num_unique_tuples:\n                # Add the number of unique tuples to the list and store it\n                num_unique_tuples.append(i)\n    return len(num_unique_tuples)\n    \ndef reduce_freq(test_list):\n    '''\n    Write a function to find the number of unique tuples with at least 2 occurrences in the given list.\n    '''\n    # Create an empty list to store the number of unique tuples\n    # If the list is not empty, it should contain only the tuples with at least 1 occurrence\n    num_unique_tuples = []\n    if len(test_list) > 0:\n        # Check if there is any number of unique tuples in the list\n        for i in test_list:\n            # If there is a number of tuples with at least two occurrences, count the number of unique tuples\n            if len(num_unique_tuples) > 0 and i in num_unique_tuples:\n                # Add the number of unique tuples to the list and store it\n                num_unique_tuples.append(i)\n    return len(num_unique_tuples)\n    \ndef frequent_elements(test_list):\n    '''\n    Write a function to return the number of occurrences of all elements.\n    '''\n    # Create an empty dictionary to store the number of unique elements\n    # If the list is not empty, it should contain only the tuples with at least 1 occurrence\n    elements_count = {}\n    if len(test_list) > 0:\n        # Check if there is any number of unique elements in the list\n        for i in test_list:\n            # If there is a number of elements with at least one occurrence, add the element to the dictionary\n            if i in elements_count:\n                elements_count[i] += 1\n            # If there is no number of elements with at least one occurrence, create a new dictionary\n            else:\n                elements_count[i] = 1\n    return len(elements_count)\n    \ndef reduce_frequency(test_list):\n    '''\n    Write a function to return the number of occurrences of all elements with the same frequency.\n    '''\n    # Create an empty dictionary to store the number of elements with the same frequency\n    # If the list is not empty, it should contain only the tuples with at least one occurrence\n    elements_count = {}\n    if len(test_list) > 0:\n        # Check if there is any number of unique elements in the list\n        for i in test_list:\n            # If there is a number of elements with the same frequency, add the element to the dictionary\n            if i in elements_count:\n                elements_count[i] += 1\n            # If there is no number of elements with the same frequency, create a new dictionary\n            else:\n                elements_count[i] = 1\n    return len(elements_count)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    total_tweets = len(test_list)\n    tweets_list = []\n    for t in test_list:\n        tweets_list.append(t)\n    \n    n = 0\n    for l in tweets_list:\n        n += len(l)\n    print(f\"Total number of unique tweets in dataset: {n}\")\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup[0] not in freq_dict:\n            freq_dict[tup[0]] = 1\n        else:\n            freq_dict[tup[0]] += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    with open('test_list.txt','r') as f:\n        lines = f.readlines()\n        count = 0\n        for line in lines:\n            count+=1\n        print(\"Number of unique tuples in the test list: \",count)\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i]!= None:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Please note that the function is only valid if the number of tuples in a list is at least as long as the number of tuples in the list.\n    if len(test_list) < 1:\n        return None\n    else:\n        # find the length of the list\n        if len(test_list) % 2 == 0:\n            # check that the tuples are not duplicates\n            if test_list[0] == test_list[1]:\n                # if the first element of the list is the same as the second element of the list, we are done!\n                return 0\n            else:\n                # else, the first element of the list is not the same as the second element of the list,\n                # we check if the first element of the list is an odd number and if it is, we take the odd number as the first element,\n                # if the second element of the list is odd, we take the odd number as the second element, and so on.\n                index = 0\n                for i in range(len(test_list)):\n                    if i % 2!= 0:\n                        index += 1\n                        #print(index)\n                    else:\n                        index += 1\n                return index\n        else:\n            # if the list is odd, we need to take the first element as the second element\n            index = 0\n            for i in range(len(test_list)):\n                if i % 2!= 0:\n                    index += 1\n                    #print(index)\n                else:\n                    index += 1\n            return index\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Iterate through the list to create a dictionary and tally the number of occurances\n    counter = {}\n    for line in test_list:\n        line = line.rstrip()\n        if line not in counter:\n            counter[line] = 1\n        else:\n            counter[line] += 1\n    # Convert the dictionary to a list and return it\n    return list(counter.values())\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_tuples(a,b):\n        '''Add two tuples of integers a and b using the map function.'''\n        return tuple(map(sum, zip(a,b)))\n    return add_tuples(test_tup1,test_tup2)\ndef subtract(test_tup1, test_tup2):\n    '''Write a function to perform index wise subtraction of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda a,b: a-b, test_tup1, test_tup2))\ndef multiply(test_tup1, test_tup2):\n    '''Write a function to perform index wise multiplication of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda a,b: a*b, test_tup1, test_tup2))\ndef divide(test_tup1, test_tup2):\n    '''Write a function to perform index wise division of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda a,b: a/b, test_tup1, test_tup2))\ndef modulo(test_tup1, test_tup2):\n    '''Write a function to perform index wise modulo of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda a,b: a%b, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup1 = []\n    nested_tup2 = []\n    for i in test_tup1:\n        nested_tup1.append(i)\n    for i in test_tup2:\n        nested_tup2.append(i)\n    return tuple(nested_tup1) + tuple(nested_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return test_tup1 + test_tup2\n    return None\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = test_tup1[0] # Get tuple value from the first index\n    tup2 = test_tup2[0] # Get tuple value from the second index\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # this function takes 2 tuples as input and adds them using index\n    def index_addition(test_tuple1, test_tuple2):\n        '''\n        This function takes a tuple as input and add it to another tuple and return a new tuple.\n        '''\n        # initialize an empty list and append the tuple to it\n        new_list = list()\n        new_list.append(test_tuple1[0])\n        new_list.append(test_tuple2[0])\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tup1 + tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here\n    tup1 = test_tup1\n    tup2 = test_tup2\n    def add_tuple(tup1,tup2):\n        for i in range(0,len(tup1)):\n            add = tup1[i] + tup2[i]\n            tup1[i] = add\n        return tup1\n    tup_result = add_tuple(tup1,tup2)\n    return tup_result\n    \nprint(add_nested_tuples((1,2), (3,4)))\nprint(add_nested_tuples((2,5,4), (6,7,8))"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min_num = a\n    if b > a:\n        min_num = b\n    return min_num\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    if b>a:\n        return a\n    if a==b:\n        return a\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        smaller=a\n    else:\n        smaller=b\n    while smaller!= 0:\n        if a<smaller:\n            smaller=a\n        else:\n            smaller=smaller-b\n    return smaller\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        min = a\n    else:\n        min = b\n    for i in range(1,len(a)+1):\n        if(a[i-1]<min):\n            min = a[i-1]\n    for i in range(1,len(b)+1):\n        if(b[i-1]<min):\n            min = b[i-1]\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # Write your code here\n    if a>b:\n        print(\"the maximum value is: \",a)\n    else:\n        print(\"the minimum value is: \",b)\n    \nminimum(1,2)\nminimum(2,3)\nminimum(3,4)\nminimum(3,3)\nminimum(4,3)\nminimum(3,5)\nminimum(4,5)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex,tuple):\n        return tuplex[0]==tuple1\n    else: \n        return tuplex==tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #This creates a tuple with just 2 elements and a condition\n    tuplex = (1,2,3,4,5)\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # your code goes here\n    return tuplex in tuple1\n    \nprint(check_tuplex((1,2,3),('a','b','c','d')))\nprint(check_tuplex((1,2,3,4,5,6,7),(1,2,3,4,5,6,7)))\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (len(tuplex) == len(tuple1)):\n        for i in range(len(tuplex)):\n            if tuplex[i] not in tuple1:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if tuple1 == i: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return i\n    return \"Not found\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1): \n        for index,val in enumerate(tuplex):\n            if val == tuple1[index]:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #TODO write a function that returns True if there is an element in a tuple,\n    #otherwise it returns False\n    #TODO write a function that will check whether an element exists within a tuple\n    #TODO add the return value to a variable\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x\n    z = y + 1\n    for i in range(1,z): \n        if (y % 2) == 0: \n            return False\n        y = y / 2 \n    return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # get the number of bits in x.\n    bits = len(bin(x)) - 2\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2!= 0):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 1\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        if n == 1:\n            return n\n        return n * next_bigger(n - 1)\n    return next_bigger(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n=int(n)\n    \n    big = 0\n    count = 0\n    while big!= n:\n        big = n % 10\n        count += 1\n        n = n // 10\n    return count\n    \ndef main():\n    print(rearrange_bigger(15))\n    print(rearrange_bigger(65))\n    print(rearrange_bigger(10))\n    print(rearrange_bigger(9))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #This solution was inspired from\n    #https://stackoverflow.com/questions/42463868/in-python-how-to-sort-a-list-based-on-last-two-digit-position\n    return sum([int(n[i]) for i in range(len(n)) if i<len(n)-2])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return n/2\n    else:\n        return n*2\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return (n // 100) * 10 + n % 10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    c = []\n    n = str(n)\n    for i in n:\n        c.append(i)\n    c = ''.join(c)\n    \n    a = c.split(\",\")\n    for i in a:\n        if len(i) == len(a):\n            print(f\"The number after rearranging {i} is: {int(i)}\")\n        else:\n            print(f\"The number after rearranging {i} is: {i}\")\n    \n    return 0\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = n[::-1]\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = ''\n    for i in range(len(n)):\n        s += str(int(n[i]) * 10)\n    s += str(len(n))\n    return s\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(number):\n        \"\"\"\n        We want to rearrange the digits from the left to the right. Therefore, we have to\n        go to right-most digit, left-most digit, and right-most digit, then we want to rearrange\n        the digits from left to the right.\n        \"\"\"\n        if number < 10:\n            return number\n        if number % 10 == 0:\n            return int(str(number)[::-1][0])\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    p = 0\n    while n > 0:\n        if n & 1:\n            n >>= 1\n            p += 1\n        else:\n            n >>= 1\n            p -= 1\n    return p + 1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    i=0\n    j=0\n    h=[]\n    res=[]\n    while i<k and j<len(nums1):\n        if nums1[i]!=nums2[j]:\n            res.append((nums1[i],nums2[j]))\n            i+=1\n            j+=1\n        elif nums1[i]==nums2[j]:\n            h.append((nums1[i],nums2[j]))\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j==len(nums1):\n        print(h)\n    else:\n        for i in h:\n            print(i)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Length of first array and second array are different.\")\n        return -1\n    h = []\n    for num in nums1:\n        heapq.heappush(h, -num)\n    for num in nums2:\n        heapq.heappush(h, num)\n    for _ in range(k):\n        heapq.heappop(h)\n    ans = []\n    for i, j in zip(h[0:k], h[1:k]):\n        ans.append([i,j])\n    return ans"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] + nums2[j] == 0:\n                pairs.append((i,j))\n    \n    heapq.heapify(pairs)\n    \n    for i in range(k):\n        heapq.heappop(pairs)\n    \n    return len(pairs)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Step 1 : Convert the first array to a heap\n    heapq.heapify(nums1)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i] - nums2[j], i, j))\n            if len(heap) >= k:\n                heapq.heappop(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = nums1.sort()\n    nums2 = nums2.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j], j))\n    res = []\n    i = 0\n    j = 0\n    while (i < k and j < k):\n        if heap[i][0] < heap[j][0]:\n            res.append(heapq.heappop(heap)[1])\n            i += 1\n        else:\n            res.append(heapq.heappop(heap)[1])\n            j += 1\n    while (i < k):\n        res.append(heapq.heappop(heap)[1])\n        i += 1\n    while (j < k):\n        res.append(heapq.heappop(heap)[1])\n        j += 1\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    pairs = 0\n    # get k smallest elements from first array\n    for i in range(0, len(nums1) - k + 1):\n        # get k smallest elements from second array\n        for j in range(i, i + k):\n            if nums1[i] > nums2[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h1 = []\n    h2 = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and not (i == j):\n                heapq.heappush(h1,(nums1[i]*nums2[j],i,j))\n    if len(h1) <= k:\n        return []\n    if len(h1) > k:\n        heapq.heapify(h1)\n        for i in range(k):\n            heapq.heappop(h1)\n    res = []\n    if h1:\n        res.append([heapq.heappop(h1)[1],heapq.heappop(h1)[1]])\n    heapq.heapify(h2)\n    for i in range(len(h2)):\n        for j in range(len(h2)):\n            if not (h2[i] == h2[j] and i!= j):\n                heapq.heappush(h2,(h2[i]*h2[j],i,j))\n    if h2:\n        res.append([heapq.heappop(h2)[1],heapq.heappop(h2)[1]])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    small_num = []\n    small_num.append(nums1[0])\n    small_num.append(nums2[0])\n    \n    for i in range(1, len(nums1)):\n        if (nums1[i] < nums2[i-1]):\n            small_num.append(nums1[i])\n        else:\n            small_num.append(nums2[i-1])\n    \n    heapq.heapify(small_num)\n    for i in range(k-1):\n        small_num.append(small_num[0]*small_num[1])\n        small_num.pop(0)\n        small_num.append(small_num[0]*small_num[1])\n        \n    return small_num\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return min(list1)\n    min1 = list1[0]\n    min2 = list1[1]\n    for i in range(1,len(list1)):\n        if list1[i] < min1:\n            min1 = list1[i]\n        if list1[i] < min2:\n            min2 = list1[i]\n    return min(min1,min2)\n    \ndef find_min_product_rec(list1):\n    '''\n    Find the minimum product in a list of tuples.\n    '''\n    if len(list1) < 2:\n        return min(list1)\n    min1 = list1[0]\n    min2 = list1[1]\n    for i in range(1,len(list1)):\n        if list1[i] < min1:\n            min1 = list1[i]\n        if list1[i] < min2:\n            min2 = list1[i]\n    return min(min1,min2)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_sum = 999999999999\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            min.append(list1[j][0] * list1[i][1])\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = None\n    for i in list1:\n        for j in list1:\n            if i == j:\n                pass\n            elif min_value is None:\n                min_value = i * j\n            else:\n                min_value = i * j if i < j else min_value\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product=1\n    min_list=[]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        return(list1[0][1])\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = list1[0][0]*list1[0][1]\n    for x in range(len(list1)):\n        for y in range(len(list1[x])):\n            minimum_product = min(minimum_product, list1[x][y]*list1[x][y])\n    return minimum_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(list(map(lambda x: x[1], list1)))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the product_dict\n    product_dict = {}\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    n = len(listval)\n    if n == 0:\n        return 0\n    else:\n        return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return 0\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        minv = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] < minv:\n                minv = listval[i]\n        return minv\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if min_val > val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) <= 1:\n        return listval[0]\n    else:\n        min_val = min(listval[0], listval[1])\n        listval.remove(min_val)\n        return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    else:\n        minimum = listval[0]\n        for x in listval:\n            if x < minimum:\n                minimum = x\n        return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # create an empty list to hold the minumum value\n    min_list = []\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 2:\n        if listval[0] > listval[1]:\n            return listval[0]\n        else:\n            return listval[1]\n    else:\n        if listval[0] < listval[1]:\n            return listval[0]\n        else:\n            return listval[1]\n    \n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 2:\n        if listval[0] < listval[1]:\n            return listval[1]\n        else:\n            return listval[0]\n    else:\n        if listval[0] > listval[1]:\n            return listval[0]\n        else:\n            return listval[1]\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.replace(\"_\", \" \").title()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?<!^)(?=[A-Z])[a-z]'\n    result = re.sub(pattern, '_', word)\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #note: snake case is case sensitive\n    #an empty string is assumed to return an empty string\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split word into a list of words\n    split_word = re.split(r'(.)', word.lower())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word.title())\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Find all words starting with a capital letter\n    word = word.lower()\n    # Lowercase letters and remove spaces and punctuation\n    word = re.sub(r'[^a-z0-9A-Z]+', '', word)\n    # Split into a list\n    words = word.split()\n    # Replace all capital letters with lower case\n    # and remove spaces\n    words = [word.lower().replace(' ', '').replace('-', '_') for word in words]\n    # Create a string from the list\n    words = ''.join(words)\n    # return the string\n    return words\n    \n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.search(r\"[A-Z][a-z]*$\", word):\n        return word\n    else:\n        first_letter = word[0].upper()\n        to_capital = word[1:].capitalize()\n        return first_letter + to_capital\n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    if re.search(r\"[A-Z][a-z]*$\", word):\n        return word\n    else:\n        first_letter = word[0].lower()\n        to_snake = word[1:].title()\n        return first_letter + to_snake\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    pattern = r\"[^a-zA-Z0-9]\"\n    return re.sub(pattern, '', text)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(.)([A-Z][a-z]+)', r' \\1_\\2', word)\n    word = re.sub(r'([a-z])([A-Z])', r' \\1_\\2', word)\n    return re.sub(r'([A-Z][a-z]+)', r' \\1', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # taking the first letter of a word and putting it back into the original word.\n    if word[0] == 'a':\n        word = word[1:] + word[0]\n    else:\n        word = '_' + word\n    \n    # taking the first letter of the word, then putting it back to the original word.\n    word = word[0] + word[1:]\n    \n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == '':\n        return word\n    new_word = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    new_word = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', new_word).lower()\n    return new_word\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result=[]\n    for i in l:\n        if i%2==0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    \n    for number in l:\n        if number%2!= 0:\n            odds.append(number)\n    \n    return odds\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::-1]\n    return l\n    \n    \nif __name__ == '__main__':\n    print(remove_odd([1, 2, 3, 4, 5]))\n    print(remove_odd([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]))\n    print(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 80"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    idx = 0\n    while idx < len(l)-1:\n        if l[idx] % 2 == 1:\n            l.pop(idx)\n        else:\n            idx += 1\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Your code here\n    odd_lst = []\n    for num in l:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    print(odd_lst)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    odds = []\n    for i in l:\n        if i % 2 == 1:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num%2==1]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # define a list of numbers to remove\n    num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return []\n    \n    result = []\n    for i in l:\n        if i % 2!= 0:\n            result.append(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n            \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    a = []\n    for i in range(len(list1)):\n        a.append(list1[i][n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    n = int(n)\n    if n > len(list1):\n        raise ValueError('the number of elements cannot be more than the number of tuples')\n    if n > len(list1) - 1:\n        raise ValueError('the number of elements cannot be more than the number of tuples - 1')\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        index = n+1\n        return list1[index]\n    except:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    start = 0\n    end = len(list1)\n    while True:\n        if list1[start][0] <= n <= list1[start][1]:\n            return list1[start][2]\n        else:\n            start += 1\n            if start >= end:\n                return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    i = 0\n    nth_element = list1[n]\n    while (i < len(list1) and list1[i]!= nth_element):\n        i = i + 1\n    return (i, list1[i])\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1+list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)>=len(list2):\n        for i in range(len(list2)):\n            if list1[i] in list2:\n                list2.remove(list1[i])\n                list1.remove(list1[i])\n            else:\n                return'sequence does not exist'\n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                list2.remove(list1[i])\n            else:\n                return'sequence does not exist'\n    return list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(list1)\n    print(list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Pass the variables to the function and perform the comparison\n    if list1[0]<list2[0]:\n        return \"not overlap\"\n    if list1[-1]>list2[-1]:\n        return \"not overlap\"\n    if list1[0]==list2[0]:\n        return \"not overlap\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\ndef main():\n    list1=[3,2,1,7,4,8,7]\n    list2=[2,3,4,5,6]\n    result=overlapping(list1,list2)\n    if result==True:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i] in list2:\n            return True\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if(len(list1)>0) and (len(list2)>0):\n        for i in range(len(list2)):\n            if(list1[i] in list2):\n                return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max([max(arr) * max(arr[i:]) for i in range(len(arr))])\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return -1\n    \n    n = len(arr)\n    l = 0\n    r = n - 1\n    \n    #Taking the left pointer\n    while l <= r:\n        #Taking the element and calculating product\n        product = arr[l] * arr[r]\n        #Taking the smaller element\n        if product < 0:\n            l += 1\n            r -= 1\n        #Taking the smaller element\n        elif product > 0:\n            r -= 1\n        #Taking the smaller element\n        else:\n            l += 1\n    \n    return arr[l]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_value = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if arr[i] * arr[j] > max_value:\n                max_value = arr[i] * arr[j]\n    print(max_value)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    p = []\n    l = len(arr)\n    for i in range(l-1):\n        for j in range(i+1,l):\n            p.append(arr[i]*arr[j])\n    p = sorted(p)\n    return p[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0: \n        return 0\n    i = 0\n    while i < len(arr): \n        j = i \n        max1 = -1\n        while j < len(arr) and arr[j] * arr[i] > max1: \n            max1 = arr[j] * arr[i] \n            j += 1 \n        if i!= j: \n            arr[i], arr[j] = arr[j], arr[i] \n        i += 1\n    return max1 \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # pre-processing:\n    arr = list(map(int, arr))\n    arr = sorted(arr)\n    \n    # initializing:\n    max_val = arr[0] * arr[1]\n    for num in arr:\n        if num * num > max_val:\n            max_val = num * num\n    return max_val\n    \n    # time complexity: O(n^2)\n    # space complexity: O(1)\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if(len(arr)<3):\n        return []\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]>max_product:\n            max_product=arr[i]\n    return max_product\n    \ndef main():\n    '''\n    Test Case\n    a = [1,2,3,4,5,6,7,8,9,10]\n    b = [1,2,3,4,5,6,7,8,9,10]\n    c = [1,2,3,4,5,6,7,8,9,10]\n    d = [1,2,3,4,5,6,7,8,9,10]\n    e = [1,2,3,4,5,6,7,8,9,10]\n    f = [1,2,3,4,5,6,7,8,9,10]\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10]\n    b = [1,2,3,4,5,6,7,8,9,10]\n    c = [1,2,3,4,5,6,7,8,9,10]\n    d = [1,2,3,4,5,6,7,8,9,10]\n    e = [1,2,3,4,5,6,7,8,9,10]\n    f = [1,2,3,4,5,6,7,8,9,10]\n    \n    print(\"The maximum product from a given array of integers is: \",max_Product(a))\n    print(\"The maximum product from a given array of integers is: \",max_Product(b))\n    print(\"The maximum product from a given array of integers is: \",max_Product(c))\n    print(\"The maximum product from a given array of integers is: \",max_Product(d))\n    print(\"The maximum product from a given array of integers is: \",max_Product(e))\n    print(\"The maximum product from a given array of integers is: \",max_Product(f))\n    \nmain()"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            max_product=max(arr[i]*arr[j],max_product)\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if max_product < arr[j] * arr[i]:\n                max_product = arr[j] * arr[i]\n    return max_product\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    First = input_tuple[0]\n    \n    for element in Input:\n        \n        if First in element:\n            \n            index = Input.index(element)\n            \n            return index\n            \n            break\n            \n    return -1\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # return first element\n    if len(Input) <= 0:\n        return\n    # print(Input[0])\n    # print(Input[-1])\n    # start = 0\n    # end = len(Input) - 1\n    # # print(Input[start:end])\n    # # print(Input[end])\n    # for i in range(start, end+1):\n    #     # print(i)\n    #     if Input[i] == Input[start]:\n    #         start = i + 1\n    #     elif Input[i] == Input[end]:\n    #         end = i\n    # return start\n    # return end\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in Input:\n        if i:\n            return i\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 1:\n        return (Input[0])\n    elif len(Input) == 2:\n        return (Input[0])\n    elif len(Input) == 3:\n        return (Input[0])\n    elif len(Input) == 4:\n        return (Input[0])\n    else:\n        return (Input[0])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [1,1,2,3,3,4]\n    # Output = 1\n    # def find_first(Input):\n    #     return next((x for x in Input if Input.count(x) == 1), None)\n    \n    # Output = None\n    # Output = find_first(Input)\n    \n    # if Output is not None:\n    #     return Output\n    \n    # Output = []\n    # for i in Input:\n    #     if i in Output:\n    #         continue\n    #     else:\n    #         Output.append(i)\n    \n    # return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Your code here\n    list1 = list(Input)\n    print(list1)\n    l = []\n    c = 0\n    for i in range(len(list1)):\n        if list1[i][0] not in l:\n            l.append(list1[i][0])\n    for i in range(len(list1)):\n        if list1[i][0] == list1[0][0]:\n            c+=1\n    print(c)\n    if len(list1)==1:\n        print(\"No common element\")\n    else:\n        print(\"common element\")\n    print(l)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    cursor = Input[0]\n    res = []\n    for i in range(1,len(Input)):\n        if cursor in Input[i]:\n            res.append(Input[i])\n    if len(res) > 0:\n        return res[0]\n    else:\n        return \"\"\n        \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    d = {}\n    for i in Input:\n        if i[0] in d:\n            d[i[0]] = d[i[0]] +1\n        else:\n            d[i[0]] = 1\n    for i in d.items():\n        if i[1] > 1:\n            print(i[0], end=' ')\n            print(i[1])\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = []\n    for i in range(len(Input)):\n        list_of_tuples.append(Input[i])\n    list_of_tuples = list(set(list_of_tuples))\n    return list_of_tuples\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_ = []\n    for i in Input:\n        list_.append(i[0])\n    return list_\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    i = 0\n    while i < len(lst):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n        i += 1\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) <= 0: \n        return -1\n    if lst[0] > lst[1]:\n        return lst[0]\n    return Find_Max(lst[1:])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n            idx = i\n    return idx\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = lst[0]\n    i = 0\n    while i < len(lst):\n        if lst[i] > Max:\n            Max = lst[i]\n        i += 1\n    return Max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if max < i:\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return 'Empty'\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return \"No element in the list\"\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\nlst = [1, 3, 5, 8, 3, 3]\nprint(Find_Max(lst))"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) > 0: \n        if len(lst) == 1: \n            return lst[0]\n        elif len(lst) > 1: \n            return Find_Max(lst[1:])\n    else: \n        return 'Empty list'\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = []\n    for x in lst:\n        if len(max_length) == 0 or len(x) > len(max_length[0]):\n            max_length = [x]\n        elif len(x) > len(max_length[0]):\n            max_length = [x]\n        else:\n            for y in range(0,len(max_length)-1):\n                if x[len(max_length[y])] > y[len(max_length[y])]:\n                    max_length = [x[len(max_length[y])]]\n                    max_length = max_length[:]\n                    break\n    return max_length\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Create a dictionary for the list\n    list_dict = {}\n    # Iterate through the list\n    for num in list1:\n        # Add the number to the dictionary\n        list_dict[num] = list_dict.get(num, 0) + 1\n    # Return the total sum\n    total_sum = 0\n    for key in list_dict:\n        total_sum += list_dict[key]\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for n in list1:\n        total_sum += n\n    print(f\"{total_sum}\")\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        total += item\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print('The list is : ',list1)\n    l=len(list1)\n    sum=0\n    for i in range(l):\n        sum+=list1[i]\n    print('The list sum is : ',sum*l)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    l = len(list1)\n    if l == 0:\n        return 0\n    if l == 1:\n        return list1[0]\n    r = [round(i,l) for i in list1]\n    r = sum(r)\n    return r\n    \nl = [1,2,3,4,5,6,7,8,9]\nr = [round_and_sum(l),round_and_sum(l),round_and_sum(l)]\nprint(r)"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    def rounding(num_list):\n        '''\n        Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        '''\n        sum_list = 0\n        for i in range(0, len(num_list)):\n            sum_list += num_list[i]\n        print(sum_list * len(num_list))\n    rounding(list1)\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # print(list1)\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    # print(list1)\n    return(sum(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([round(i, n) * len(list1) for i in list1])\n    \ndef multiplication_table_for_range(start, end):\n    '''\n    Write a function to print the multiplication table of numbers from 1 to 10 inclusive.\n    '''\n    for i in range(start, end + 1):\n        print(i, end ='')\n    \ndef multiple_print(a):\n    '''\n    Write a function that prints a list of numbers, where each number appears twice, and the number at index j is printed as 2*j.\n    '''\n    for i in a:\n        print(i * 2, end ='')\n    \ndef main():\n    print(\"\\nWelcome to the multiplication table calculator.\")\n    print(\"\"\"Please select from the following options:\n    1. Print a list of numbers\n    2. Use the function to multiply a list of numbers\n    3. Add a new number to a list of numbers\n    4. Remove the last element of a list of numbers\n    5. Print the sum of all the numbers in the list\n    6. Print the multiplication table for 1 to 10\n    7. Exit\"\"\")\n    \n    option = input(\"Option: \")\n    if option == '1':\n        a = input(\"A: \")\n        b = input(\"B: \")\n        print(a, \"*\", b, \"=\", round_and_sum([int(i) for i in a.split()]))\n    elif option == '2':\n        a = input(\"A: \")\n        print(\"The multiplication table for\", a, \"is\", multiplication_table_for_range(1, 10))\n    elif option == '3':\n        a = input(\"A: \")\n        b = input(\"B: \")\n        c = input(\"C: \")\n        print(\"The addition of\", a, \"and\", b, \"is\", c, \"=\", round_and_sum([int(i) for i in a.split()]))\n    elif option == '4':\n        a = input(\"A: \")\n        b = input(\"B: \")\n        c = input(\"C: \")\n        print(a, \"*\", b, \"=\", c, \"*\", int(b), \"=\", round_and_sum([int(i) for i in a.split()]), \"*\", int(b), \"=\", c, \"*\", int(b), \"=\", round_and_sum([int(i) for i in a.split()]))\n    elif option == '5':\n        a = input(\"A: \")\n        b = input(\"B: \")\n        c = input(\"C: \")\n        print(a, \"*\", b, \"=\", c, \"*\", int(c), \"=\", round_and_sum([int(i) for i in a.split()]), \"*\", int(c), \"=\", round_and_sum([int(i) for i in a.split()]), \"*\", int(c), \"=\", round_and_sum([int(i) for i in a.split()]))\n    elif option == '6':\n        a = input(\"A: \")\n        b = input(\"B: \")\n        c = input(\"C: \")\n        print(\"The addition of\", a, \"and\", b, \"is\", c, \"=\", round_and_sum([int(i) for i in a.split()]))\n    elif option == '7':\n        pass\n    else:\n        print(\"There is no such option\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    for number in list1:\n        sum+=number\n    return sum*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #convert all numbers to ints, and then take the sum and round each number down\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubes = [1,4,9,16,25,36,81]\n    total = 0\n    \n    for cube in cubes:\n        total += cube * cube\n    \n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        return n * cube_Sum(n-1)"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n * n * n * n * n * n\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n,0,-2):\n        total = total + i**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (cube_Sum(n-1) + n**2)\ndef cube_Sum_2(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (cube_Sum_2(n-1) + n**3)\ndef factorial(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)\ndef factorial_2(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_2(n-1)\ndef fibonacci_numbers(n): \n    '''\n    Write a python function to generate the first n fibonacci numbers.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci_numbers(n-1) + fibonacci_numbers(n-2)\ndef fibonacci_numbers_2(n): \n    '''\n    Write a python function to generate the first n fibonacci numbers.\n    '''\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci_numbers(n-1) + fibonacci_numbers(n-2)\ndef factorial_3(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_3(n-1)\ndef factorial_3_2(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_3_2(n-1)\ndef factorial_3_3(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_3_3(n-1)\ndef factorial_4(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_4(n-1)\ndef factorial_4_2(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_4_2(n-1)\ndef factorial_5(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_5(n-1)\ndef factorial_6(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_6(n-1)\ndef factorial_7(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_7(n-1)\ndef factorial_8(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_8(n-1)\ndef factorial_9(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_9(n-1)\ndef factorial_10(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_10(n-1)\ndef factorial_11(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_11(n-1)\ndef factorial_12(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_12(n-1)\ndef factorial_13(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_13(n-1)\ndef factorial_14(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_14(n-1)\ndef factorial_15(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_15(n-1)\ndef factorial_16(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_16(n-1)\ndef factorial_17(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_17(n-1)\ndef factorial_18(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factorial_18(n-1)\ndef factorial_19(n): \n    '''\n    Write a python function to compute the factorial of an integer.\n    '''\n    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return n * factoria"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0,n):\n        cube_sum = cube_sum + pow(i,3)\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum+=i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += i**3\n    return sum \nn = int(input(\"Enter the number of numbers you want to find: \"))\nprint(\"The cube sum is: \", cube_Sum(n))\n    "
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s=\"\"\n    for x in test_tup:\n        s=s+str(x)\n    return s\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    tup_c = []\n    for i in range(len(test_tup)):\n        tup_c.append(test_tup[i])\n    \n    return tuple(tup_c)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if len(test_tup) < 1:\n        return ()\n    elif len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return tuple(test_tup[0]) + tuple(test_tup[1:])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0]+test_tup[1]+test_tup[2]\ndef multiply_tuple(test_tup):\n    '''\n    Write a function to multiply each element of tuple by the number of the tuple.\n    '''\n    return test_tup[0]*test_tup[1]*test_tup[2]\ndef divide_tuple(test_tup):\n    '''\n    Write a function to divide each element of tuple by the number of the tuple.\n    '''\n    return test_tup[0]/test_tup[1]\ndef tuple_sum(test_tup):\n    '''\n    Write a function that will sum up all the elements in the tuple.\n    '''\n    return sum(test_tup)\ndef tuple_count(test_tup):\n    '''\n    Write a function that will count the number of elements in the tuple.\n    '''\n    return len(test_tup)\ndef tuple_length(test_tup):\n    '''\n    Write a function that will count the length of the tuple.\n    '''\n    return len(test_tup)\ndef tuple_index(test_tup):\n    '''\n    Write a function that will return the index of the tuple in the tuple.\n    '''\n    return test_tup.index(test_tup[0])\ndef tuple_length_nested(test_tup):\n    '''\n    Write a function that will count the number of nested tuple in the tuple.\n    '''\n    return len(tuple(test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tuple = ()\n    for i in test_tup:\n        new_tuple = new_tuple + (i,)\n    return new_tuple\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    for i in test_tup:\n        for j in range(len(test_tup[i])):\n            test_tup[i][j] = test_tup[i][j]\n            \n    return test_tup\n    \n    \ndef convert_to_float(test_tup):\n    '''\n    Write a function to convert each element of tuple to float.\n    '''\n    for i in test_tup:\n        for j in range(len(test_tup[i])):\n            test_tup[i][j] = float(test_tup[i][j])\n            \n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return(test_tup[0] + '\\n' + test_tup[1] + '\\n' + test_tup[2])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    lst = []\n    for item in test_tup:\n        lst.append(item)\n    return tuple(lst)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1,n+1):\n        cubes.append(i*i*i)\n    print(sum(cubes)/(n**3))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    return sum(cubes)/len(cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num = 1\n    while num <= n:\n        num = num + 1\n        print(\"cube of\", num, \"is\", num ** 3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * n * n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import math\n    for i in range(1, n + 1):\n        cube = i ** 3\n        print(math.floor(cube))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num=0\n    for i in range(1,n+1):\n        num = num + i\n    return num/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    square_cubes = []\n    for i in range(n):\n        square_cubes.append(i**3)\n    avg = sum(square_cubes)/n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result=0\n    for i in range(1,n+1):\n        result+=i**3\n    return result/n\n    "
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i*i*i)\n    avg = sum(cubes)/n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube=1\n    while(n>=1):\n        cube+=n*n*n\n        n-=1\n    return cube/3\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    strings = test_tuple[0]\n    str_len = len(strings)\n    temp_list = []\n    for i in range(0,str_len):\n        if (i+1)%str_len == 0 and i!=0:\n            temp_list.append(strings[i])\n    return temp_list\n    \ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    strings = test_tuple[0]\n    str_len = len(strings)\n    temp_list = []\n    for i in range(0,str_len):\n        if i!=0:\n            temp_list.append(strings[i-1])\n    return temp_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    rear.extend(test_tuple)\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    r1 = 0\n    r2 = 0\n    r3 = 0\n    r4 = 0\n    r5 = 0\n    r6 = 0\n    r7 = 0\n    r8 = 0\n    r9 = 0\n    r10 = 0\n    r11 = 0\n    r12 = 0\n    r13 = 0\n    r14 = 0\n    r15 = 0\n    r16 = 0\n    r17 = 0\n    r18 = 0\n    r19 = 0\n    r20 = 0\n    r21 = 0\n    r22 = 0\n    r23 = 0\n    r24 = 0\n    r25 = 0\n    r26 = 0\n    r27 = 0\n    r28 = 0\n    r29 = 0\n    r30 = 0\n    r31 = 0\n    r32 = 0\n    r33 = 0\n    r34 = 0\n    r35 = 0\n    r36 = 0\n    r37 = 0\n    r38 = 0\n    r39 = 0\n    r40 = 0\n    r41 = 0\n    r42 = 0\n    r43 = 0\n    r44 = 0\n    r45 = 0\n    r46 = 0\n    r47 = 0\n    r48 = 0\n    r49 = 0\n    r50 = 0\n    r51 = 0\n    r52 = 0\n    r53 = 0\n    r54 = 0\n    r55 = 0\n    r56 = 0\n    r57 = 0\n    r58 = 0\n    r59 = 0\n    r60 = 0\n    r61 = 0\n    r62 = 0\n    r63 = 0\n    r64 = 0\n    r65 = 0\n    r66 = 0\n    r67 = 0\n    r68 = 0\n    r69 = 0\n    r70 = 0\n    r71 = 0\n    r72 = 0\n    r73 = 0\n    r74 = 0\n    r75 = 0\n    r76 = 0\n    r77 = 0\n    r78 = 0\n    r79 = 0\n    r80 = 0\n    r81 = 0\n    r82 = 0\n    r83 = 0\n    r84 = 0\n    r85 = 0\n    r86 = 0\n    r87 = 0\n    r88 = 0\n    r89 = 0\n    r90 = 0\n    r91 = 0\n    r92 = 0\n    r93 = 0\n    r94 = 0\n    r95 = 0\n    r96 = 0\n    r97 = 0\n    r98 = 0\n    r99 = 0\n    r100 = 0\n    r101 = 0\n    r102 = 0\n    r103 = 0\n    r104 = 0\n    r105 = 0\n    r106 = 0\n    r107 = 0\n    r108 = 0\n    r109 = 0\n    r110 = 0\n    r111 = 0\n    r112 = 0\n    r113 = 0\n    r114 = 0\n    r115 = 0\n    r116 = 0\n    r117 = 0\n    r118 = 0\n    r119 = 0\n    r120 = 0\n    r121 = 0\n    r122 = 0\n    r123 = 0\n    r124 = 0\n    r125 = 0\n    r126 = 0\n    r127 = 0\n    r128 = 0\n    r129 = 0\n    r130 = 0\n    r131 = 0\n    r132 = 0\n    r133 = 0\n    r134 = 0\n    r135 = 0\n    r136 = 0\n    r137 = 0\n    r138 = 0\n    r139 = 0\n    r140 = 0\n    r141 = 0\n    r142 = 0\n    r143 = 0\n    r144 = 0\n    r145 = 0\n    r146 = 0\n    r147 = 0\n    r148 = 0\n    r149 = 0\n    r150 = 0\n    r151 = 0\n    r152 = 0\n    r153 = 0\n    r154 = 0\n    r155 = 0\n    r156 = 0\n    r157 = 0\n    r158 = 0\n    r159 = 0\n    r160 = 0\n    r161 = 0\n    r162 = 0\n    r163 = 0\n    r164 = 0\n    r165 = 0\n    r166 = 0\n    r167 = 0\n    r168 = 0\n    r169 = 0\n    r170 = 0\n    r171 = 0\n    r172 = 0\n    r173 = 0\n    r174 = 0\n    r175 = 0\n    r176 = 0\n    r177 = 0\n    r178 = 0\n    r179 = 0\n    r180 = 0\n    r181 = 0\n    r182 = 0\n    r183 = 0\n    r184 = 0\n    r185 = 0\n    r186 = 0\n    r187 = 0\n    r188 = 0\n    r189 = 0\n    r190 = 0\n    r191 = 0\n    r192 = 0\n    r193 = 0\n    r194 = 0\n    r195 = 0\n    r196 = 0\n    r197 = 0\n    r198 = 0\n    r199 = 0\n    r200 = 0\n    r201 = 0\n    r202 = 0\n    r203 = 0\n    r204 = 0\n    r205 = 0\n    r206 = 0\n    r207 = 0\n    r208 = 0\n    r209 = 0\n    r210 = 0\n    r211 = 0\n    r212 = 0\n    r213 = 0\n    r214 = 0\n    r215 = 0\n    r216 = 0\n    r217 = 0\n    r218 = 0\n    r219 = 0\n    r220 = 0\n    r221 = 0\n    r222 = 0\n    r223 = 0\n    r224 = 0\n    r225 = 0\n    r226 = 0\n    r227 = 0\n    r228 = 0\n    r229 = 0\n    r230 = 0\n    r231 = 0\n    r232 = 0\n    r233 = 0\n    r234 = 0\n    r235 = 0\n    r236 = 0\n    r237 = 0\n    r238 = 0\n    r239 = 0\n    r240 = 0\n    r241 = 0\n    r242 = 0\n    r243 = 0\n    r244 = 0\n    r245 = 0\n    r246 = 0\n    r247 = 0\n    r248 = 0\n    r249 = 0\n    r250 = 0\n    r251 = 0\n    r252 = 0\n    r253 = 0\n    r254 = 0\n    r255 = 0\n    r256 = 0\n    r257 = 0\n    r258 = 0\n    r259 = 0\n    r260 = 0\n    r261 = 0\n    r262 = 0\n    r263 = 0\n    r264 = 0\n    r265 = 0\n    r266 = 0\n    r267 = 0\n    r268 = 0\n    r269 = 0\n    r270 = 0\n    r271 = 0\n    r272 = 0\n    r273 = 0\n    r274 = 0\n    r275 = 0\n    r276 = 0\n    r277 = 0\n    r278 = 0\n    r279 = 0\n    r280 = 0\n    r281 = 0\n    r282 = 0\n    r283 = 0\n    r284 = 0\n    r285 = 0\n    r286 = 0\n    r287 = 0\n    r288 = 0\n    r289 = 0\n    r290 = 0\n    r291 = 0\n    r292 = 0\n    r293 = 0\n    r294 = 0\n    r295 = 0\n    r296 = 0\n    r297 = 0\n    r298 = 0\n    r299 = 0\n    r300 = 0\n    r301 = 0\n    r302 = 0\n    r303 = 0\n    r304 = 0\n    r305 = 0\n    r306 = 0\n    r307 = 0\n    r308 = 0\n    r309 = 0\n    r310 = 0\n    r311 = 0\n    r312 = 0\n    r313 = 0\n    r314 = 0\n    r315 = 0\n    r316 = 0\n    r317 = 0\n    r318 = 0\n    r319 = 0\n    r320 = 0\n    r321 = 0\n    r322 = 0\n    r323 = 0\n    r324 = 0\n    r325 = 0\n    r326 = 0\n    r327 = 0\n    r328 = 0\n    r329 = 0\n    r330 = 0\n    r331 = 0\n    r332 = 0\n    r333 = 0\n    r334 = 0\n    r335 "
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i][-1] == \"R\":\n            return test_tuple[i][:-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n    temp = list(test_tuple)\n    for i in range(0, len(temp)):\n        if temp[i] == 'R':\n            temp[i] = ''\n    return temp\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def extract_rear(test_tuple):\n        arr = []\n        for i in test_tuple:\n            if i[-1] == 'r':\n                arr.append(i)\n        return arr\n    if type(test_tuple) == tuple:\n        return extract_rear(test_tuple)\n    else:\n        raise TypeError(\"Expected tuple\")\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #return [element for element in test_tuple if \"r\" in element]\n    return [element for element in test_tuple if \"r\" in element.lower()]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    index = 0\n    for i in range(len(test_tuple)):\n        if len(test_tuple[i]) < 4:\n            test_tuple[i] = '0' * (4 - len(test_tuple[i])) + test_tuple[i]\n        test_tuple[i] = test_tuple[i][::-1] #Reversing the order of the strings\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for tup in test_tuple:\n        rear_list.append(tup[0])\n    return rear_list\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Create a new list, with the given element in it.\n    new_list = []\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for item in list1:\n        if item == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # your code here\n    count = 0\n    for ele in list1:\n        if x in ele:\n            count +=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    sublist = 0\n    for item in list1:\n        if item == x:\n            sublist += 1\n    return sublist\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    sublst = []\n    index_of_element = 0\n    for sublist in list1:\n        if x in sublist:\n            sublst.append(sublist.count(x))\n        else:\n            sublst.append(0)\n    for x in sublst:\n        index_of_element += x\n    return index_of_element"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new = []\n    for n in nums:\n        if n % 2!= 0:\n            new.append(n)\n    return new\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_oddnumbers = []\n    \n    for number in nums:\n        if number % 2 == 1:\n            filtered_oddnumbers.append(number)\n    \n    return filtered_oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_list = []\n    for num in nums:\n        if num % 2 == 1:\n            filtered_list.append(num)\n    return filtered_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            new_nums.append(num)\n    return new_nums\n    # util\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2!=0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd = []\n    \n    for n in nums:\n        if n % 2 == 1:\n            odd.append(n)\n    \n    return od"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            new_nums.append(num)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda num: num%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            filtered_nums.append(num)\n    return filtered_nums\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-','_').replace('.','_').replace(' ','_')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        d1 = dt.split('-')\n        dd = d1[2] + '-' + d1[1] + '-' + d1[0]\n        mm = d1[3][:2]\n        yyyy = d1[0] + '-' + d1[2] + '-' + d1[1] + '-' + d1[0]\n        return yyyy +'' + mm +'' + dd\n    except:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.search('(?<=\\\\d)\\\\d+', dt):\n        return re.sub(r'(?<=\\\\d)\\\\d+', '-'.join([re.sub(r'[^0-9]', '', str(dt))[:4], re.sub(r'[^0-9]', '', str(dt))[4:]]), dt)\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if '-' in dt:\n        # '-' in format: mm-dd-yyyy\n        dt = dt.split('-')\n        month = int(dt[0])\n        day = int(dt[1])\n        year = int(dt[2])\n        dt = month, day, year\n    elif '.' in dt:\n        # '.' in format: dd-mm-yyyy\n        dt = dt.split('.')\n        month = int(dt[0])\n        day = int(dt[1])\n        year = int(dt[2])\n        dt = month, day, year\n    else:\n        # '-' in format: mm-dd-yyyy\n        dt = dt.split('-')\n        month = int(dt[0])\n        day = int(dt[1])\n        year = int(dt[2])\n        dt = month, day, year\n    \n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[1] + '-' + dt[2] + '-' + dt[0] +'' + dt[3] + ':' + dt[4] + ':' + dt[5]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    day = int(dt[0:2])\n    month = int(dt[3:5])\n    year = int(dt[6:10])\n    \n    if day < 10:\n        day = '0' + str(day)\n    if month < 10:\n        month = '0' + str(month)\n    if year < 10:\n        year = '0' + str(year)\n    \n    return year + '-' + month + '-' + day\n    \n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.split()[-1] == \"-\" or dt.split()[-1] == \".\":\n        if dt.split()[-1] == \".\":\n            if len(dt.split()) == 2:\n                y,m,d = dt.split()\n            elif len(dt.split()) == 4:\n                y,m,d,h,m,s,f = dt.split()\n            else:\n                y,m,d = dt.split()\n                h,m,s = d.split(\":\")\n        else:\n            y,m,d = dt.split()\n            h,m,s = d.split(\":\")\n    elif dt.split()[-1] == \"-\" and len(dt.split()) == 3:\n        y,m,d = dt.split()\n        h,m,s = d.split(\":\")\n    elif dt.split()[-1] == \"-\" and len(dt.split()) == 2:\n        y,m,d = dt.split()\n        h,m = d.split(\":\")\n    else:\n        y,m,d = dt.split()\n        h,m = d.split(\":\")\n    return f\"{y}-{m}-{d}\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    m = d[1].split('.')\n    y = int(m[0])\n    if y % 4 == 0:\n        if y % 100 == 0:\n            if y % 400 == 0:\n                mm = '0' + m[1]\n            else:\n                mm = m[1]\n        else:\n            mm = m[1]\n    else:\n        mm = '0' + m[1]\n    dd = dt.split('-')[2]\n    yy = int(dd.split('.')[0])\n    if yy < 100:\n        yy = '0' + str(yy)\n    else:\n        yy = str(yy)\n    return y + '-' + mm + '-' + yy\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace(\"-\", \"\")\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            value_to_swap = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > value_to_swap:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = value_to_swap\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    h = len(my_list) # length of the array\n    count = 0 # count of elements in the array\n    while count < h: # for loop\n        count += 1 # increment count for each iteration\n        for i in range(h-count): # i is the index of the element\n            for j in range(i, h-count): # j is the index of the next element\n                if my_list[i] > my_list[j]: # if element is bigger\n                    # swap them\n                    my_list[i], my_list[j] = my_list[j], my_list[i] # swap them\n                # increment count\n                count += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    count = 0\n    while count < n//2:\n        gap = n//2 - count\n        for i in range(gap):\n            index = i + gap\n            if index < n:\n                temp = my_list[index]\n                j = index\n                while j >= gap and my_list[j-gap] > temp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = temp\n        count += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l = len(my_list)\n    gap = int(l/2)\n    while gap > 0:\n        for i in range(gap, l):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Step 1 - Loop through the array and add the array elements that\n    # are not already part of a larger block of elements (if a larger block\n    # does not fit, then a new block is created).\n    # Note: This algo computes the midpoint of the sorted array\n    # and divides the array evenly between 2 or 4 elements.\n    for i in range(int(len(my_list)/4)):\n        for j in range(4):\n            if j == 0:\n                j = 1\n            elif j == 1:\n                j = 2\n            elif j == 2:\n                j = 3\n            block_start = int(i * 4 + j)\n            block_end = int((i + 1) * 4)\n            for k in range(block_start, block_end):\n                if my_list[k] < my_list[k + 1]:\n                    my_list[k], my_list[k + 1] = my_list[k + 1], my_list[k]\n                else:\n                    break\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Method 1:\n    # Keep track of the steps\n    n = len(my_list)\n    # Step 1:\n    # Find the midpoint. \n    # Iterate over the array from end to start.\n    # Compare the item at the midpoint to the first\n    # item in the array.\n    # If the comparison is > than the midpoint, swap.\n    # If the comparison is < than the midpoint, swap.\n    # If the comparison is = than the midpoint, don't swap\n    # If the comparison is < than the midpoint, swap.\n    # Keep the midpoint index\n    # Keep track of the steps\n    # Repeat the same process until the end of the array\n    # Start from the midpoint\n    i = 1\n    while i < n:\n        j = i - 1\n        # Move the left half to the right half\n        while j >= 0 and my_list[j] > my_list[j+1]:\n            my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n            j -= 1\n        # Keep track of the steps\n        # Keep the index for the next iteration\n        i += 1\n    # Return the sorted array\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def count_gap(array):\n        gap = 1\n        count = 1\n        while gap < len(array) - 1:\n            if array[gap]!= array[gap+1]:\n                gap = gap + gap // 2\n            else:\n                gap = gap + gap // 2\n            count += 1\n        return count\n    def gap_sort(my_list, gap):\n        '''\n        Write a function to sort the given array by using gap sort.\n        '''\n        def recur_sorted(array, start, gap):\n            if start == gap:\n                return\n            recur_sorted(array, array[start], gap)\n            recur_sorted(array, array[gap], gap)\n        recur_sorted(my_list, 0, gap)\n        gap += count_gap(my_list)\n        return my_list\n    def sort(my_list):\n        '''\n        Sort the given array.\n        '''\n        gap = len(my_list) // 2\n        return gap_sort(my_list, gap)\n    return sort(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Calculate how many groups of items can be split \n    # by finding the length of the longest one\n    l = n//2\n    \n    # Iterate through the array and store the items\n    # as it is sorted in order to split it\n    # in the correct groups\n    for i in range(l, n):\n        for j in range(0, n-i):\n            item = my_list[j]\n            k = j\n            while k>0 and my_list[k-1] > item:\n                my_list[k] = my_list[k-1]\n                k = k-1\n            my_list[k] = item\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1.get(test_tup2.get(0)), test_tup2.get(0), test_tup1.get(1)\n    \ndef sum_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to sum the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1.get(0) + test_tup2.get(0), test_tup1.get(1) + test_tup2.get(1)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Write your code here.\n    return (test_tup1[0] and test_tup2[0]) or (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    assert test_tup1[0] < test_tup2[0], 'The elements in the tuple are not sorted'\n    assert test_tup1[-1] < test_tup2[-1], 'The elements in the tuple are not sorted'\n    assert len(test_tup1) == len(test_tup2), 'The length of the tuple is not equal'\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        result.append(i)\n    for j in test_tup2:\n        result.append(j)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] and test_tup1[1] or test_tup2[0] and test_tup2[1] or None\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return []\n    return test_tup1[0] & test_tup2[0], test_tup1[0] | test_tup2[0]\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if not isinstance(test_tup1, tuple):\n        raise TypeError(\"Expected a tuple as the first argument.\")\n    elif not isinstance(test_tup2, tuple):\n        raise TypeError(\"Expected a tuple as the second argument.\")\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('tuple size mismatch')\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * b) * c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b == 0:\n        return a\n    return parabola_directrix(a, b, c - a)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b-c) + (a+b+c)/2*(b-a)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a + b + c) / 2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # if a and b are the same number, then print 'right'\n    if a == b == c:\n        print('right')\n        return\n    \n    # if a and b are not the same number, then print 'wrong'\n    if a!= b!= c:\n        print('wrong')\n        return\n    \n    # else, print the equation\n    print('the equation of a,b,c is:')\n    print(a+b+c)\n    \n    # call the function\n    parabola_directrix(a+b, c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * b * c\n    \ndef parabola_cubic(a, b, c, d, e):\n    '''\n    Write a function to find the cubic of a parabola.\n    '''\n    return a * b * c * d * e\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == b and b == c:\n        return 0\n    if a == c and b == c:\n        return 1\n    if a == b or b == c:\n        return 0\n    return 1\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def parabola(a, b, c):\n        if c > 0:\n            return a**2 + b**2 + c**2\n        elif c < 0:\n            return -a**2 + b**2 + c**2\n        else:\n            return 0\n    return parabola(a,b,c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (((a)**2) + ((b)**2) + ((c)**2))**0.5\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common_list = []\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_list.append(i)\n    \n    return len(common_list) > 0\n    \nprint(common_element([1, 2, 3, 4, 5], [2, 3, 5, 5, 5]))\nprint(common_element([1, 2, 3, 4, 5], [2, 3, 5, 5, 5, 8]))"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1) > 0 and len(list2) > 0 and list1[0] == list2[0]\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for item in list1:\n        if item in list2:\n            common_elements.append(item)\n    return len(common_elements) >= 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    #Creating an empty set for storing the common elements.\n    common_set = set()\n    \n    #Applying the functions to the lists.\n    for item in list1:\n        if item in list2:\n            common_set.add(item)\n            \n    return len(common_set) >= 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_el = []\n    # Print each element in both lists\n    for element in list1:\n        if element in list2:\n            common_el.append(element)\n    return len(common_el) == 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) <= len(list2):\n        return False\n    elif len(list1) == len(list2):\n        for i in list1:\n            if list1.count(i) == 1:\n                return True\n        return False\n    else:\n        for i in list2:\n            if list2.count(i) == 1:\n                return True\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = list1.intersection(list2)\n    return len(common) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0:\n        return False\n    if len(list2) == 0:\n        return False\n    if list1[0] == list2[0]:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] == list2[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = list(set(list1) & set(list2))\n    if len(common) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for index, item in enumerate(list1):\n        if index in list2:\n            if item == list2[index]:\n                continue\n            else:\n                common = True\n                break\n    return common\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<base2:\n        base1,base2=base2,base1\n    x1=base1+height/2\n    x2=base2-height/2\n    y1=0\n    y2=height\n    r1=x1-height/2\n    r2=x2-height/2\n    if r1<=0:\n        r1=0\n        y1=0\n    if r2<=0:\n        r2=0\n        y2=0\n    return (y2-y1)/(r2-r1)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1>base2:\n        if height<base1:\n            return 0\n        elif height<base2:\n            return base1+height\n        else:\n            return base2\n    elif base1<base2:\n        if height<base1:\n            return 0\n        elif height<base2:\n            return base1+height\n        else:\n            return base2\n    else:\n        return 0\n    \n    \n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_length = base1\n    base2_length = base2\n    base1_i = height/2\n    base2_i = height/2\n    while (base2_i - base1_i > base1_length):\n        base2_length = base2_length + base2_i - base1_i\n        base2_i = base2_i + height\n        base2_length = base2_length + base2_i - base1_i\n    print(base2_length)\n    return base2_length/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2 + height) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    side_b = ((base1+base2)/2)\n    half_side = (height/2)\n    center_1 = (side_b-half_side)\n    center_2 = (side_b+half_side)\n    return center_1+center_2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height<=0 or base1<=0 or base2<=0:\n        return 0\n    elif base1>base2:\n        base2,base1=base1,base2\n        height=height/2\n    elif base1<base2:\n        base1,base2=base2,base1\n        height=height/2\n    if base1==base2:\n        return base1\n    return base1+base2+height/3\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (height+base1+base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    mid = int((height + 1)/2)\n    if height == 1:\n        return mid\n    elif height == 2:\n        return ((base1 + base2)/2)\n    else:\n        p = mid - 1\n        p2 = mid + 1\n        p3 = mid\n        p4 = mid\n        while p > 0:\n            if ((p2 + p3) <= height) and ((p2 + p3) >= height / 2):\n                if (height % 2 == 0):\n                    if p2 > p and p2 > p3:\n                        p2 = p\n                    elif p2 < p and p2 < p3:\n                        p2 = p\n                    if p4 > p and p4 > p3:\n                        p4 = p\n                    elif p4 < p and p4 < p3:\n                        p4 = p\n                elif (height % 2 == 1):\n                    if p2 > p and p2 > p3:\n                        p2 = p\n                    elif p2 < p and p2 < p3:\n                        p2 = p\n                    if p4 > p and p4 > p3:\n                        p4 = p\n                    elif p4 < p and p4 < p3:\n                        p4 = p\n            if (height % 2 == 0) and (p2 > p and p2 > p3):\n                if p2 > p and p2 > p4:\n                    p2 = p\n                elif p2 < p and p2 < p4:\n                    p2 = p\n            if (height % 2 == 1) and (p2 > p and p2 > p3):\n                if p2 > p and p2 > p4:\n                    p2 = p\n                elif p2 < p and p2 < p4:\n                    p2 = p\n            if (height % 2 == 0) and (p2 > p and p2 < p3):\n                if p2 < p and p2 < p4:\n                    p2 = p\n                elif p2 > p and p2 > p4:\n                    p2 = p\n            if (height % 2 == 1) and (p2 < p and p2 < p3):\n                if p2 < p and p2 < p4:\n                    p2 = p\n                elif p2 > p and p2 > p4:\n                    p2 = p\n        return (p2 + p4)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if(base1>base2):\n        base = base2\n    else:\n        base = base1\n    if(base<0):\n        base = 0\n    if(base>=height):\n        base = height\n    if(base<=0):\n        base = 0\n    if(base==0):\n        base = base1\n    if(base==0):\n        base = base2\n    a = height//2\n    b = base\n    while base<height:\n        if(base<=a):\n            f = a*base\n            if(f<=base):\n                break\n            else:\n                b += 1\n                if(base<b):\n                    break\n                else:\n                    a += 1\n                    if(a<=b):\n                        break\n        else:\n            f = b*base\n            if(f<=base):\n                break\n            else:\n                b += 1\n                if(base<b):\n                    break\n                else:\n                    a += 1\n                    if(a<=b):\n                        break\n    return int(round(a/2))"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s=[]\n    s.append(base1)\n    s.append(base2)\n    s.append(base1+base2)\n    s.append(base1+2*base2)\n    s.append(base1+3*base2)\n    s.append(base1+4*base2)\n    s.append(base1+5*base2)\n    s.append(base1+6*base2)\n    s.append(base1+7*base2)\n    s.append(base1+8*base2)\n    s.append(base1+9*base2)\n    s.append(base1+10*base2)\n    s.append(base1+11*base2)\n    s.append(base1+12*base2)\n    s.append(base1+13*base2)\n    s.append(base1+14*base2)\n    s.append(base1+15*base2)\n    s.append(base1+16*base2)\n    s.append(base1+17*base2)\n    s.append(base1+18*base2)\n    s.append(base1+19*base2)\n    s.append(base1+20*base2)\n    s.append(base1+21*base2)\n    s.append(base1+22*base2)\n    s.append(base1+23*base2)\n    s.append(base1+24*base2)\n    s.append(base1+25*base2)\n    s.append(base1+26*base2)\n    s.append(base1+27*base2)\n    s.append(base1+28*base2)\n    s.append(base1+29*base2)\n    s.append(base1+30*base2)\n    s.append(base1+31*base2)\n    s.append(base1+32*base2)\n    s.append(base1+33*base2)\n    s.append(base1+34*base2)\n    s.append(base1+35*base2)\n    s.append(base1+36*base2)\n    s.append(base1+37*base2)\n    s.append(base1+38*base2)\n    s.append(base1+39*base2)\n    s.append(base1+40*base2)\n    s.append(base1+41*base2)\n    s.append(base1+42*base2)\n    s.append(base1+43*base2)\n    s.append(base1+44*base2)\n    s.append(base1+45*base2)\n    s.append(base1+46*base2)\n    s.append(base1+47*base2)\n    s.append(base1+48*base2)\n    s.append(base1+49*base2)\n    s.append(base1+50*base2)\n    s.append(base1+51*base2)\n    s.append(base1+52*base2)\n    s.append(base1+53*base2)\n    s.append(base1+54*base2)\n    s.append(base1+55*base2)\n    s.append(base1+56*base2)\n    s.append(base1+57*base2)\n    s.append(base1+58*base2)\n    s.append(base1+59*base2)\n    s.append(base1+60*base2)\n    s.append(base1+61*base2)\n    s.append(base1+62*base2)\n    s.append(base1+63*base2)\n    s.append(base1+64*base2)\n    s.append(base1+65*base2)\n    s.append(base1+66*base2)\n    s.append(base1+67*base2)\n    s.append(base1+68*base2)\n    s.append(base1+69*base2)\n    s.append(base1+70*base2)\n    s.append(base1+71*base2)\n    s.append(base1+72*base2)\n    s.append(base1+73*base2)\n    s.append(base1+74*base2)\n    s.append(base1+75*base2)\n    s.append(base1+76*base2)\n    s.append(base1+77*base2)\n    s.append(base1+78*base2)\n    s.append(base1+79*base2)\n    s.append(base1+80*base2)\n    s.append(base1+81*base2)\n    s.append(base1+82*base2)\n    s.append(base1+83*base2)\n    s.append(base1+84*base2)\n    s.append(base1+85*base2)\n    s.append(base1+86*base2)\n    s.append(base1+87*base2)\n    s.append(base1+88*base2)\n    s.append(base1+89*base2)\n    s.append(base1+90*base2)\n    s.append(base1+91*base2)\n    s.append(base1+92*base2)\n    s.append(base1+93*base2)\n    s.append(base1+94*base2)\n    s.append(base1+95*base2)\n    s.append(base1+96*base2)\n    s.append(base1+97*base2)\n    s.append(base1+98*base2)\n    s.append(base1+99*base2)\n    s.append(base1+100*base2)\n    s.append(base1+101*base2)\n    s.append(base1+102*base2)\n    s.append(base1+103*base2)\n    s.append(base1+104*base2)\n    s.append(base1+105*base2)\n    s.append(base1+106*base2)\n    s.append(base1+107*base2)\n    s.append(base1+108*base2)\n    s.append(base1+109*base2)\n    s.append(base1+110*base2)\n    s.append(base1+111*base2)\n    s.append(base1+112*base2)\n    s.append(base1+113*base2)\n    s.append(base1+114*base2)\n    s.append(base1+115*base2)\n    s.append(base1+116*base2)\n    s.append(base1+117*base2)\n    s.append(base1+118*base2)\n    s.append(base1+119*base2)\n    s.append(base1+120*base2)\n    s.append(base1+121*base2)\n    s.append(base1+122*base2)\n    s.append(base1+123*base2)\n    s.append(base1+124*base2)\n    s.append(base1+125*base2)\n    s.append(base1+126*base2)\n    s.append(base1+127*base2)\n    s.append(base1+128*base2)\n    s.append(base1+129*base2)\n    s.append(base1+130*base2)\n    s.append(base1+131*base2)\n    s.append(base1+132*base2)\n    s.append(base1+133*base2)\n    s.append(base1+134*base2)\n    s.append(base1+135*base2)\n    s.append(base1+136*base2)\n    s.append(base1+137*base2)\n    s.append(base1+138*base2)\n    s.append(base1+139*base2)\n    s.append(base1+140*base2)\n    s.append(base1+141*base2)\n    s.append(base1+142*base2"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    if number in arr:\n        return True\n    else:\n        for i in arr:\n            if number > i:\n                count += 1\n        if count == len(arr):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr)==0:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if(len(arr) <= 0):\n        return False\n    else:\n        if(number > arr[-1]):\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n    if arr[0] > number or arr[-1] > number:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # create an empty list to store result\n    list_res = []\n    # iterate through the array\n    for i in range(len(arr)):\n        # if the number is greater than the number in the list\n        if arr[i] > number:\n            # add the number to the list\n            list_res.append(arr[i])\n        # if the number is less than the number in the list\n        elif arr[i] < number:\n            # add the number to the list\n            list_res.append(arr[i])\n    # if the result is not empty\n    if len(list_res) > 0:\n        # return the result\n        return list_res\n    # if the result is empty, then the number is not greater than any element\n    else:\n        return \"Number not greater than any element\"\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Your code here\n    if arr[0] > number:\n        print('Not found')\n    else:\n        print('Found')\n    if arr[-1] > number:\n        print('Not found')\n    else:\n        print('Found')\n    if arr[0] >= number:\n        print('Found')\n    else:\n        print('Not found')\n    if arr[-1] >= number:\n        print('Found')\n    else:\n        print('Not found')\n    if arr[0] <= number:\n        print('Found')\n    else:\n        print('Not found')\n    if arr[-1] <= number:\n        print('Found')\n    else:\n        print('Not found')\n    if arr[0] <= number:\n        print('Found')\n    else:\n        print('Not found')\n    if arr[-1] <= number:\n        print('Found')\n    else:\n        print('Not found')\n    if arr[0] <= number:\n        print('Found')\n    else:\n        print('Not found')\n    if arr[-1] <= number:\n        print('Found')\n    else:\n        print('Not found')\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    print(count, \"times\" )\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[a-z]\\b'\n    text = text.lower()\n    return re.search(pattern, text) is not None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[a-zA-Z]+'\n    match = re.findall(pattern, text)\n    return match\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace(' ', '1')\n    return re.match('\\[a\\]', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    r = re.compile(r'^[a-z]{2,}$')\n    if r.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.match(r\"^(\\w+) (a){1} (b){1} (c){1} (d){1}\", text) is not None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.sub(r'\\s\\s+','', text)\n    match = re.findall(r'(?:\\s)(\\w+\\b)(\\s|\\w+)', text)\n    return(match)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = r'^\\w+\\:\\d+\\:\\d+\\:\\d+$'\n    matcher = re.findall(p, text)\n    if len(matcher)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall(r'^(a{0,1})(.*){1,2}$', text)\n    # return re.findall(r'^a{0,1}(.*){1,2}$', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[a-zA-Z0-9]{4,}[a-zA-Z0-9]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    return [x for x in text if x.isalpha() and len(x) == 2]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    a = n // 10\n    b = n % 10\n    return b\n    \ndef main() :\n    '''\n    Write a python function to find the most common number.\n    '''\n    n = 11\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    for i in range(len(list)) :\n        if n%10 == 0 :\n            n = n//10\n            continue\n        else :\n            n = n*10+last_Digit(n)\n            return n\nmain("
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    if s[-1] == '0' :\n        return 0\n    else :\n        return int(s[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10) + ((n // 10) % 10)\n    \ndef first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<0 :\n        n = n * -1\n    lastDigit = n % 10\n    return lastDigit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n    \ndef add_Digit(n) :\n    '''\n    Write a python function to add digits to a number.\n    '''\n    return n + 1\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return n%10\n    else :\n        return 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = ''\n    if n == 0 :\n        result = 0\n    while n > 0 :\n        n, remainder = divmod(n, 10)\n        result = str(remainder) + result\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res=[]\n    for i in list1:\n        if i<0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1[::-1]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1.sort(reverse=True)\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    if list1 is None:\n        return None\n    else:\n        return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    def neg(x):\n        '''\n        Write a python function to return the negative numbers in a list.\n        '''\n        if x < 0:\n            return -x\n        else:\n            return x\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for num in list1:\n        if num < 0:\n            list2.append(num)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg=[]\n    for i in range(len(list1)):\n        if list1[i]<0:\n            list_neg.append(list1[i])\n    return list_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Define negative numbers as negative numbers with 0\n    neg_numbers = [num for num in list1 if num < 0]\n    print(\"The negative numbers are:\")\n    print(neg_numbers)\n    return neg_numbers\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    a=str1.split()\n    b=[]\n    c=[]\n    for i in a:\n        if int(i[-1])%2==0:\n            b.append(i)\n    for j in b:\n        c.append(j[1:-1])\n    return''.join(c)\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code here\n    l = len(str1)\n    str1 = str1.replace(\"o\",\"\")\n    str1 = str1.replace(\"e\",\"\")\n    str1 = str1.replace(\"l\",\"\")\n    str1 = str1.replace(\"n\",\"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in str1:\n        if i % 2!= 0:\n            result = result + i\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #get the odd characters\n    odd_char = []\n    for i in range(len(str1)):\n        if i % 2!= 0:\n            odd_char.append(str1[i])\n    \n    #delete the odd characters\n    for char in odd_char:\n        str1 = str1.replace(char, \"\")\n    \n    #return the string\n    return str1\n    "
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1 == \"\":\n        return \"\"\n    else:\n        if str1[0]%2==0:\n            return str1[1:]\n        else:\n            return str1[:-1]\n        \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    num_digits = len(str1)\n    for i in range(num_digits):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    temp = \"\"\n    while i<len(str1):\n        if i%2 == 0:\n            temp+=str1[i]\n        else:\n            temp+=str1[i]+str1[i+1]\n        i+=2\n    return temp\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_char = ''\n    for char in str1:\n        if char % 2 == 0:\n            odd_char += char\n    return odd_char\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    if len(str1) % 2 == 0:\n        return str(str1)\n    else:\n        return str1[0:int(len(str1) / 2)]\n    # return str(str1).split(\" \")\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = []\n    for s in str1:\n        if s % 2!= 0:\n            lst.append(s)\n    return ''.join(lst)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[1] > i[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_pair = 0\n    for test in test_list:\n        if test[1] < test[0]:\n            count_pair += 1\n    return count_pair\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #create a bidirectional map for a list\n    bidirectional_map = {}\n    for item in test_list:\n        if item[0] in bidirectional_map:\n            bidirectional_map[item[0]].append(item)\n        else:\n            bidirectional_map[item[0]] = [item]\n    #loop through the test_list and add each tuple to the map\n    count = 0\n    for k,v in bidirectional_map.items():\n        if len(v) > 1:\n            count += len(v)\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        for j in range(len(i)):\n            if i[j] == i[j-1] and j > 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item in test_list:\n        count += len(item[1])\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    s = test_list[0][0]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] == s:\n            s = test_list[i][1]\n            continue\n    return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)-1):\n        if test_list[i][1] > test_list[i+1][0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0,len(test_list),2):\n        if test_list[i] > test_list[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    prev_tuple = None\n    prev_count = None\n    for pair in test_list:\n        if prev_tuple is None:\n            prev_tuple = pair\n            prev_count = 1\n        elif prev_tuple is not None:\n            if prev_count == 1:\n                count += 1\n                prev_count = 0\n                prev_tuple = pair\n            else:\n                count += 1\n                prev_count = 0\n                prev_tuple = pair\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    s = set(test_list)\n    return len(s & s.difference(test_list))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in L:\n        if type(i) is int:\n            L.append(i)\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    print(list(map(int,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 0\n    s = \"\"\n    for i in range(len(L)):\n        s += str(L[i])\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n    \ndef main():\n    '''\n    Write a function to compute the product of two arrays of numbers.\n    '''\n    L1 = [1, 2, 3, 4, 5]\n    L2 = [10, 20, 30, 40, 50]\n    print(multiple_to_single(L1))\n    print(multiple_to_single(L2))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in L:\n        s += str(i)\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Complete this function\n    def join_list(L):\n        return sum(L)\n    return join_list(L)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    i = 0\n    while i < len(text):\n        if text[i].isalpha() or text[i] == '-' or text[i].isdigit():\n            return i\n        i += 1\n    return len(text)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = re.findall(r'\\b(?:ever|once|all|any|be|take|work|in|out|be|work|work|make|consume|work|use|use|stake|take|find|find|take|work|work|work|use|use|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work|work"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    words = text.split()\n    adverbs = re.findall(r\"(\\w+) [+]\\w*\", text)\n    for word in words:\n        if word[0] == \"A\":\n            #adverb = word[2:]\n            #start = adverbs.index(adverb)\n            start = words.index(word)\n            return start, start+1\n        else:\n            #adverb = word[:-1]\n            #end = adverbs.index(adverb)\n            end = words.index(word)\n            return end, end+1\n    print(\"No adverbs\")\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_pattern = re.compile('([a-z]{3,}[a-z]*[0-9]*)([a-z]+)([0-9]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    adverb_position_pattern = re.compile('([0-9]{2,3}[a-z]{3,}[0-9]*)([a-z]+)')\n    position"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # 1. Read in the given text and parse it\n    sentence = re.split(r\"\\s+\", text)\n    \n    # 2. Find the first adverb\n    first_adverb = 0\n    for index, word in enumerate(sentence):\n        if word in ['very', 'hard', 'hardly', 'easy']:\n            first_adverb = index\n            break\n    \n    # 3. Go through the sentence, find the adverb and its positions\n    adverbs = []\n    for i, word in enumerate(sentence):\n        if word in ['very', 'hard', 'hardly', 'easy']:\n            adverbs.append([i,word])\n    \n    # 4. Return the adverbs, the positions\n    return adverbs, first_adverb\n    \ndef find_verb_position(sentence):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    \n    # 1. Read in the given text and parse it\n    sentence = re.split(r\"\\s+\", sentence)\n    \n    # 2. Find the first verb\n    first_verb = 0\n    for index, word in enumerate(sentence):\n        if word in ['very', 'hard', 'hardly', 'easy']:\n            first_verb = index\n            break\n    \n    # 3. Go through the sentence, find the verb and its positions\n    verb = []\n    for i, word in enumerate(sentence):\n        if word in ['very', 'hard', 'hardly', 'easy']:\n            verb.append([i,word])\n    \n    # 4. Return the verb, the positions\n    return verb, first_verb\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_preposition(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_postposition(text):\n    '''\n    Write a function to find the first postposition and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_suffix_position(text):\n    '''\n    Write a function to find the first suffix and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_prepositional(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'aeiouAEIOU':\n                start += 1\n            else:\n                break\n        return start, start\ndef find_determiner(text):\n    '''\n    Write a function to find the first determiner and their positions in a given sentence.\n    '''\n    '''\n    If the text is given as a string, it should match the pattern \"abctxt\"\n    If it's not, it should match a pattern of the form \"abctxt{1,2,3}\"\n    '''\n    pattern = r'abctxt(\\d+)'\n    match = re.findall(pattern,text)\n    if match:\n        start = match[0][0]\n        start = start-1\n        end = start\n        while text[start] not in 'aeiouAEIOU':\n            start += 1\n            end += 1\n        return start, end\n    else:\n        start = 0\n        while start < len(text):\n            if text[start] in 'ae"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['yep', 'y', 'yo', 'yay', 'yayes', 'yayin', 'yayins', 'yayin', 'ye', 'yea', 'yeay', 'yeayes']\n    for i, ad in enumerate(adverbs):\n        if text.lower().find(ad)!= -1:\n            pos = i+1\n            return pos\n    return 0\ndef find_adjective_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    adjectives = ['e', 'a', 'an', 'the', 'it', 'theirs', 'their', 'a', 'an', 'an', 'they', 'them', 'themselves', 'them', 'themselves']\n    for i, ad in enumerate(adjectives):\n        if text.lower().find(ad)!= -1:\n            pos = i+1\n            return pos\n    return 0\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verbs = ['are', 'is', 'are you', 'is it', 'is it', 'isn\\'t', 'isnt', 'is that', 'is the', 'are you so', 'are you the', 'are you!', 'are you!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'are!', 'ar"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.findall(r'(?<=[a-z])([aeiou])', text)\n    adverb_positions = []\n    for adverb_pos in adverb:\n        adverb_positions.append([re.findall(r'(?<=[a-z])([a-z])', adverb_pos), adverb_pos])\n    adverb_positions.sort(key=lambda item: item[1])\n    return adverb_positions\ndef find_noun_positions(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    noun = re.findall(r'(?<=[a-z])([a-z]+)', text)\n    noun_positions = []\n    for noun_pos in noun:\n        noun_positions.append([re.findall(r'(?<=[a-z])([a-z])', noun_pos), noun_pos])\n    noun_positions.sort(key=lambda item: item[1])\n    return noun_positions\ndef find_verb_positions(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verb = re.findall(r'(?<=[a-z])([aeiou])', text)\n    verb_positions = []\n    for verb_pos in verb:\n        verb_positions.append([re.findall(r'(?<=[a-z])([a-z])', verb_pos), verb_pos])\n    verb_positions.sort(key=lambda item: item[1])\n    return verb_positions\ndef find_determiner_positions(text):\n    '''\n    Write a function to find the first determiner and their positions in a given sentence.\n    '''\n    determiner = re.findall(r'(?<=[a-z])([a-z]+)', text)\n    determiner_positions = []\n    for determiner_pos in determiner:\n        determiner_positions.append([re.findall(r'(?<=[a-z])([a-z])', determiner_pos), determiner_pos])\n    determiner_positions.sort(key=lambda item: item[1])\n    return determiner_positions\ndef find_adjective_positions(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    adjective = re.findall(r'(?<=[a-z])([a-z]+)', text)\n    adjective_positions = []\n    for adjective_pos in adjective:\n        adjective_positions.append([re.findall(r'(?<=[a-z])([a-z])', adjective_pos), adjective_pos])\n    adjective_positions.sort(key=lambda item: item[1])\n    return adjective_positions\ndef find_comma_positions(text):\n    '''\n    Write a function to find the first comma and their positions in a given sentence.\n    '''\n    comma = re.findall(r'(?<=[a-z])([,])', text)\n    comma_positions = []\n    for comma_pos in comma:\n        comma_positions.append([re.findall(r'(?<=[a-z])([,])', comma_pos), comma_pos])\n    comma_positions.sort(key=lambda item: item[1])\n    return comma_positions\ndef find_number_positions(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    number = re.findall(r'(?<=[0-9])[.,]', text)\n    number_positions = []\n    for number_pos in number:\n        number_positions.append([re.findall(r'(?<=[0-9])[.,]', number_pos), number_pos])\n    number_positions.sort(key=lambda item: item[1])\n    return number_positions\ndef find_prefix_positions(text):\n    '''\n    Write a function to find the first prefix and their positions in a given sentence.\n    '''\n    prefix = re.findall(r'(?<=[a-z])[^,]', text)\n    prefix_positions = []\n    for prefix_pos in prefix:\n        prefix_positions.append([re.findall(r'[^,]', prefix_pos), prefix_pos])\n    prefix_positions.sort(key=lambda item: item[1])\n    return prefix_positions\ndef find_suffix_positions(text):\n    '''\n    Write a function to find the first suffix and their positions in a given sentence.\n    '''\n    suffix = re.findall(r'(?<=[a-z])[^,]', text)\n    suffix_positions = []\n    for suffix_pos in suffix:\n        suffix_positions.append([re.findall(r'[^,]', suffix_pos), suffix_pos])\n    suffix_positions.sort(key=lambda item: item[1])\n    return suffix_positions\ndef find_noun_with_prefix_and_suffix(text):\n    '''\n    Write a function to find the first noun and the prefix and suffix and their positions in a given sentence.\n    '''\n    noun = re.findall(r'(?<=[a-z])([a-z]{2})\\b', text)\n    noun_with_prefix = []\n    noun_with_prefix_positions = []\n    noun_with_prefix_positions.append([re.findall(r'(?<=[a-z])([a-z])', noun[0]), noun[0]])\n    noun_with_prefix_positions.append([re.findall(r'(?<=[a-z])([a-z])', noun[0]), noun[0]])\n    noun_with_prefix_positions.sort(key=lambda item: item[1])\n    noun_with_prefix.append([re.findall(r'(?<=[a-z])([a-z])', noun[0]), noun[0]])\n    return noun_with_prefix, noun_with_prefix_positions\ndef find_noun_with_prefix_and_suffix_without_prefix(text):\n    '''\n    Write a function to find the first noun and the prefix and suffix and their positions in a given sentence.\n    '''\n    noun = re.findall(r'(?<=[a-z])([a-z]{2})\\b', text)\n    noun_with_prefix = []\n    noun_with_prefix_positions = []\n    noun_with_prefix_positions.append([re.findall(r'(?<=[a-z])([a-z])', noun[0]), noun[0]])\n    noun_with_prefix_positions.append([re.findall(r'(?<=[a-z])([a-z])', noun[0]), noun[0]])\n    noun_with_prefix_positions.sort(key=lambda item: item[1])\n    noun_with_prefix.append([re.findall(r'(?<=[a-z])([a-z])', noun[0]), noun[0]])\n    return noun_with_prefix, noun_with_prefix_positions\ndef find_noun_with_prefix_and_suffix_without_prefix_with_prefix(text):\n    '''\n    Write a function to find the first noun and the prefix and suffix and their positions in a given sentence.\n    '''\n    noun = re.findall(r'(?<=[a-z])([a-z]{2})\\b', text)\n    noun_with_prefix = []\n    noun_with_prefix_positions = []\n    noun_with_prefix_positions.append([re.findall(r'(?<=[a-z])([a-z])'"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = [\"i\", \"you\", \"he\", \"she\", \"it\", \"they\", \"my\", \"mine\", \"myself\", \"it's\", \"he's\", \"he's\", \"he's\", \"he's\", \"him\", \"her\", \"her\", \"her\", \"his\", \"himself\", \"him\", \"himself\", \"his\", \"herself\", \"his\", \"him\"]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    token = text.split(' ')\n    adverb_position = []\n    for i, token_ in enumerate(token):\n        if token_ == \"adverb\" or token_ == \"adverb\" or token_ == \"aber\":\n            adverb_position.append(i)\n    adverb_position.sort()\n    return adverb_position\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    x_dim = l['x']\n    y_dim = l['y']\n    z_dim = l['z']\n    area = 4 * (x_dim * y_dim * z_dim)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l**3 * 2\n    print(\"The surface area of a cube of a given size is: \", area)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s=l*(4*l*(4-1)*l*(4-1)*l*(4-1))\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(i+1,l):\n            for k in range(j+1,l):\n                s += l * (l * (l - 1)) * 1.5\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # find the volume of the cube\n    vol = 0\n    for y in range(l):\n        for x in range(l):\n            for z in range(l):\n                vol = vol + (l * l * l * l)\n    # return the volume\n    return vol\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = (l**3)/6\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return pow(l[0] * l[0] + l[1] * l[1] + l[2] * l[2], 1/3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 0\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                surfacearea += l[i][j][k]\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0.0\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                s += l[i][j][k]\n    return s\n    \n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # we will use array module to make a simple calculation\n    n = len(nums)\n    # first time, we calculate the ratio of positive numbers\n    ratio = [1] * n\n    for i in range(1, n):\n        if nums[i] > 0:\n            ratio[i] = nums[i] / nums[i - 1]\n    # return the ratio\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Your code here\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count+=1\n    return count/len(nums)\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    # Your code here\n    count=0\n    for i in range(len(nums)):\n        if nums[i]<0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = array('i', nums)\n    count = 0\n    for i in range(0, len(a)):\n        if a[i] < 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            total += nums[i]\n    return total/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums = list(set(nums))\n    for i in nums:\n        if i > 0:\n            nums.remove(i)\n    positive_ratio = len(nums)/float(len(nums))\n    return positive_ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    nums.sort()\n    for num in nums:\n        if num>0:\n            positive_count+=1\n    return positive_count\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    negative_count = 0\n    nums.sort()\n    for num in nums:\n        if num<0:\n            negative_count+=1\n    return negative_count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            return int(nums[i]/i)\n    return 1\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_list.append(list1[i])\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    for i in range(len(list1)-1):\n        if list1[i] < list1[i+1]:\n            return list1[i]\n    return None\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    min = float(\"inf\")\n    for ele in list1:\n        if ele < 0 and ele > min:\n            min = ele\n    return min\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return list1.index(max(list1))\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    \n    for i in range(len(list1) - 1):\n        if list1[i] < 0 and list1[i+1] < 0:\n            return list1[i] + list1[i+1]\n    return list1[i]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if not list1: \n        return None\n    \n    n = 0\n    for i in list1:\n        if i < 0:\n            n += 1\n    return n\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for num in list1:\n        if num < 0:\n            max_neg = num\n            break\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for ele in list1:\n        if ele < 0:\n            neg_list.append(ele)\n    if len(neg_list) > 0:\n        return max(neg_list)\n    else:\n        return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = [] \n    for i in range(len(list1)): \n        if list1[i] < 0: \n            neg_num.append(list1[i]) \n    print(neg_num) \n    return max(neg_num) \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    temp_list = list(filter(lambda x: x < 0, list1))\n    if len(temp_list) > 0:\n        return temp_list[0]\n    else:\n        return 0\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for i in test_list:\n        return_list.append(i[:K])\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for x in test_list:\n        while len(x) <= K:\n            x = (x, 'EMPTY')\n        yield x\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_list = []\n    for i in test_list:\n        trim_list.append(i[:K])\n    return trim_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, val in enumerate(test_list):\n        test_list[i] = val[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        if len(t) > K:\n            trimmed_list.append(t[:K])\n        else:\n            trimmed_list.append(t)\n    return trimmed_list\n    #raise NotImplementedError\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list_trimmed = []\n    for item in test_list:\n        if len(item) >= K:\n            test_list_trimmed.append(item[:K])\n        else:\n            test_list_trimmed.append(item)\n    return test_list_trimmed\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        t = (t[0], t[1])\n        t = t[:K]\n        result.append(t)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    output = []\n    for tup in test_list:\n        output.append(tup[:K])\n    return output\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(tuple, filter(None, test_list)))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = [tup1 * tup2 for tup1, tup2 in zip(test_tup1, test_tup2)]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    x = test_tup1[0]\n    y = test_tup1[1]\n    print(f\"The index of first element {x} is {index(x, test_tup2)}\")\n    print(f\"The index of second element {y} is {index(y, test_tup2)}\")\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # FILL IN YOUR CODE HERE\n    # get the first item from both tuples\n    # check for duplicate indices\n    # insert all the elements in list to new tuple\n    # return new tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    i_mult_sum = 0\n    \n    for j in range(len(test_tup1[0])):\n        \n        i_mult_sum += test_tup1[0][j] * test_tup2[j][0]\n        \n    return i_mult_sum\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result + test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 1\n    for i in range(len(test_tup1)):\n        result *= test_tup1[i]\n    for i in range(len(test_tup2)):\n        result /= test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    result = 1\n    while index1 < len(test_tup1):\n        while index2 < len(test_tup2):\n            result = result * test_tup1[index1]\n            index1 += 1\n            index2 += 1\n        index1 = 0\n        index2 = 0\n        result = 1\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tup1[0] * tup2[0] * tup1[1] * tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list1 = test_tup1\n    list2 = test_tup2\n    #if len(list1) < len(list2):\n    #    a = list(map(lambda x: x*x, list1))\n    #elif len(list1) > len(list2):\n    #    a = list(map(lambda x: x*x, list2))\n    #else:\n    a = [i * j for i,j in zip(list1, list2)]\n    return a\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurrence = 0\n    for elem in lst:\n        occurrence += 1\n    return occurrence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = Counter(tup)\n    count = len(occurence)\n    for elem in lst:\n        if elem in occurence:\n            occurence[elem] += 1\n    return(occurence)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = 0\n    for i in lst:\n        occur += tup.count(i)\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(tup)): \n        count += lst.count(tup[i])\n    return count\ndef create_dict(lst):\n    '''\n    Write a python function to create a dictionary from a list.\n    '''\n    dct = dict()\n    for i in range(len(lst)): \n        dct[lst[i]] = i\n    return dct\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup = tuple(tup)\n    lst = list(lst)\n    counter = dict(Counter(lst))\n    for k in counter:\n        if counter[k] > 1:\n            return -1\n    return len(tup) - len(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c=Counter(tup)\n    return c.most_common()\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count += 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # declare an empty dictionary to store the items of the tuple.\n    occur = {}\n    # iterate through the list\n    for i in lst:\n        # iterate through the tuple\n        for j in tup:\n            # check the key is in the dict\n            if i == j:\n                # if it is, add 1 to the count\n                occur[i] = occur[i] + 1\n    # return the dictionary\n    return occur\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(lst) - Counter(tup).__getitem__(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_dct = {}\n    for el in lst: \n        if el in lst_dct.keys(): \n            lst_dct[el] = lst_dct[el] + 1\n        else: \n            lst_dct[el] = 1\n    return lst_dct \n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [0] * len(nums)\n    for i in range(len(nums)):\n        cubes[i] = (i**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    cube = [0]*3\n    for i in range(len(nums)):\n        cube[i%3] += nums[i]**3\n    result = [cube[i%3] for i in range(len(cube))]\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for num in nums:\n        cube.append(num**3)\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num**3 for num in nums if num**3!= 0]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num*num*num)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def cube(n):\n        return n*n*n\n    \n    return [cube(x) for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube = num*num*num\n        cube_list.append(cube)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**3)\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    print(total)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n    \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1): \n        total += i \n    return total \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(str)):\n        if str[i]!='':\n            output.append(str[i])\n    return \"\".join(output)\n    \ndef get_weighted_average(student_scores):\n    '''\n    Calculate the weighted average of the student score.\n    '''\n    total = 0\n    for value in student_scores:\n        total += value\n    return total/len(student_scores)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # loop for given string\n    for i in range(0, len(str)):\n        # check if it is a string value\n        if str[i].isnumeric():\n            # if it is, extract it\n            if str[i] == '.':\n                # if it is the last character, it's a string\n                if i + 1 == len(str):\n                    # string has been filled\n                    return str\n                # if it's not, it's not a string\n                else:\n                    # fill the remaining string with the last character\n                    str = str[:i] + str[i + 1:]\n            # otherwise, it's a string value\n            else:\n                # it's a string value, append it to the string\n                str = str + str[i]\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return len(str)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return \"\"\n    elif len(str) == 1:\n        return str\n    elif l <= len(str):\n        return str[:l]\n    else:\n        return extract_string(str[l:], l) + str[l:]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    index = 0\n    for char in l:\n        if index >= l.index(char):\n            break\n        index += 1\n    return str[index:index + l.index(char)]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if type(l) == type([]):\n        return''.join([extract_string(str, l[i]) for i in range(len(l))])\n    else:\n        return str[l[:l.index(str)] + l[l.index(str)+1:].rfind(' ')+1]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) == 0:\n        return \"\"\n    elif len(str) == 1:\n        return str[0]\n    elif l == 0:\n        return \"\"\n    else:\n        return str[l-1] + extract_string(str[l:], l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l.sort()\n    i = 0\n    while i < len(str):\n        j = i\n        while j >= 0 and str[j]!= '\\n':\n            j -= 1\n        l[i] = str[j]\n        i += 1\n        if j < len(str) - 1 and str[j + 1]!= '\\n':\n            j += 1\n    return ''.join(l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    result = \"\"\n    \n    for i in str:\n        if i == \" \":\n            result += i\n        else:\n            result += i[0]\n    \n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    start = 0\n    while True:\n        end = l.find(str, start)\n        if end == -1: break\n        extracted_str.append(l[start:end+1])\n        start = end + 1\n    return ''.join(extracted_str)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # open the file\n    file_object = open(text1, 'r')\n    # close the file\n    file_object.close()\n    # read the file\n    file_text = file_object.read()\n    # split the line into a list\n    line_list = file_text.split('\\n')\n    # remove any whitespaces from the list\n    for i in range(0,len(line_list)):\n        line_list[i] = re.sub('\\s+','', line_list[i])\n    # write the file\n    file_object = open(text1, 'w')\n    file_object.write(''.join(line_list))\n    file_object.close()\n    return file_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    '''\n    Example 1:\n    Input: \"My name is John\"\n    Output: \"John\"\n    Explanation: Removing leading and trailing whitespaces leads to \"John\"\n    Example 2:\n    Input: \"  hello world  \"\n    Output: \"world\"\n    Explanation: Removing leading and trailing whitespaces leads to \"world\"\n    Example 3:\n    Input: \"i am learning python\"\n    Output: \"i am\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am\"\n    Example 4:\n    Input: \"i am \\\"hello\\\" world\"\n    Output: \"i am \\\"hello\\\" world\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am \\\"hello\\\" world\"\n    Example 5:\n    Input: \"i am \\\"hello world\\\"\"\n    Output: \"i am \\\"hello world\\\"\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am \\\"hello world\\\"\"\n    Example 6:\n    Input: \"i am \\\"hello world\\\" \\\"hello\\\"\"\n    Output: \"i am \\\"hello world\\\" \\\"hello\\\"\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am \\\"hello world\\\" \\\"hello\\\"\"\n    '''\n    text=text1.strip()\n    while \" \" in text:\n        text=text.replace(\" \",\"\")\n    return text\ndef remove_spaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    '''\n    Example 1:\n    Input: \"My name is John\"\n    Output: \"John\"\n    Explanation: Removing leading and trailing whitespaces leads to \"John\"\n    Example 2:\n    Input: \"  hello world  \"\n    Output: \"world\"\n    Explanation: Removing leading and trailing whitespaces leads to \"world\"\n    Example 3:\n    Input: \"i am learning python\"\n    Output: \"i am\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am\"\n    Example 4:\n    Input: \"i am \\\"hello\\\" world\"\n    Output: \"i am \\\"hello\\\" world\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am \\\"hello\\\" world\"\n    Example 5:\n    Input: \"i am \\\"hello world\\\"\"\n    Output: \"i am \\\"hello world\\\"\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am \\\"hello world\\\"\"\n    Example 6:\n    Input: \"i am \\\"hello world\\\" \\\"hello\\\"\"\n    Output: \"i am \\\"hello world\\\" \\\"hello\\\"\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am \\\"hello world\\\" \\\"hello\\\"\"\n    Example 7:\n    Input: \"i am \\\"hello world\\\" \\\"hello\\\" \\\"hello\\\"\"\n    Output: \"i am \\\"hello world\\\" \\\"hello\\\" \\\"hello\\\"\"\n    Explanation: Removing leading and trailing whitespaces leads to \"i am \\\"hello world\\\" \\\"hello\\\" \\\"hello\\\"\"\n    '''\n    text=text1.replace(\" \",\"\")\n    return text\ndef remove_spaces_punctuation(text1):\n    '''\n    Write a function that removes all punctuation from the given string.\n    '''\n    text=text1.replace(\"\u2018\",\"\\'').replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\"\\r\",\"\").replace(\"\\f\",\"\").replace(\"\\t\",\"\").replace(\"\\b\",\"\").replace(\".\",\"\").replace(\"?\",,\"\").replace(\"!\",,\"\").replace(\"!\",\"\").replace(\"!\",\"\").replace(\" \",\"\").replace(\"\u2014\",\"\").replace(\"\u2019\",\"\").replace(\"\\\"\",\"\").replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\"-\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"'\",\"\").replace(\"\\\"\",\"\")\n    return text\ndef remove_number(text1):\n    '''\n    Write a function that removes all numbers from the given string.\n    '''\n    text=text1.replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\" \",\"\").replace(\"-\",\"\").replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\"\\xa0\",\"\").replace(\" \",\"\").replace(\"#\",\"\").replace(\"#\",\"\").replace(\"*\",\"\").replace(\"*\",\"\").replace(\"%\",\"\").replace(\"%\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\",\"\").replace(\"&\","
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = ''\n    for i in range(len(text1)):\n        if text1[i].isspace():\n            new_text = new_text + text1[i]\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"\\s+\", \" \", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # First, find all the whitespaces.\n    sp = re.compile(r'\\s+')\n    sp_matches = sp.findall(text1)\n    text1 = text1.replace(' ','')\n    #print(sp_matches)\n    # Second, take the rest of the text\n    text2 = ''\n    for match in sp_matches:\n        text2 += match +''\n    #print(text2)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1_without_whitespaces = ''\n    for i in text1:\n        if i!='':\n            text1_without_whitespaces += i\n        else:\n            pass\n    return text1_without_whitespaces\ndef remove_newline(text1):\n    '''\n    Write a function to remove all newline characters from the given string.\n    '''\n    text1_without_newlines = ''\n    for i in text1:\n        if i == '\\n':\n            text1_without_newlines +=''\n        else:\n            pass\n    return text1_without_newlines\ndef remove_spaces(text1):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    text1_without_spaces = ''\n    for i in text1:\n        if i!='':\n            text1_without_spaces += i\n        else:\n            pass\n    return text1_without_spaces\ndef remove_upper(text1):\n    '''\n    Write a function to remove all upper case characters from the given string.\n    '''\n    text1_without_upper = ''\n    for i in text1:\n        if i.isupper():\n            text1_without_upper += i.upper()\n        else:\n            pass\n    return text1_without_upper\ndef remove_lower(text1):\n    '''\n    Write a function to remove all lower case characters from the given string.\n    '''\n    text1_without_lower = ''\n    for i in text1:\n        if i.islower():\n            text1_without_lower += i.lower()\n        else:\n            pass\n    return text1_without_lower\ndef remove_title(text1):\n    '''\n    Write a function to remove all upper case characters from the given string.\n    '''\n    text1_without_title = ''\n    for i in text1:\n        if i.istitle():\n            text1_without_title += i.title()\n        else:\n            pass\n    return text1_without_title\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    text1_without_punctuation = ''\n    for i in text1:\n        if i!='' and i!= '.' and i!= ',' and i!= '!':\n            text1_without_punctuation += i\n        else:\n            pass\n    return text1_without_punctuation\ndef remove_emails(text1):\n    '''\n    Write a function to remove all emails from the given string.\n    '''\n    text1_without_emails = ''\n    for i in text1:\n        if i == '@':\n            text1_without_emails +=''\n        else:\n            pass\n    return text1_without_emails\ndef remove_at(text1):\n    '''\n    Write a function to remove all at characters from the given string.\n    '''\n    text1_without_at = ''\n    for i in text1:\n        if i == '@':\n            text1_without_at +=''\n        else:\n            pass\n    return text1_without_at\ndef remove_digit(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text1_without_digits = ''\n    for i in text1:\n        if i.isdigit():\n            text1_without_digits += i\n        else:\n            pass\n    return text1_without_digits\ndef remove_all(text1):\n    '''\n    Write a function to remove all characters from the given string.\n    '''\n    text1_without_all = ''\n    for i in text1:\n        text1_without_all += i\n        pass\n    return text1_without_all\ndef remove_special(text1):\n    '''\n    Write a function to remove all special characters from the given string.\n    '''\n    text1_without_special = ''\n    for i in text1:\n        text1_without_special += i\n        pass\n    return text1_without_special\ndef remove_swaps(text1):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    text1_without_swaps = ''\n    for i in text1:\n        if i!='':\n            text1_without_swaps += i\n        else:\n            pass\n    return text1_without_swaps\ndef remove_number(text1):\n    '''\n    Write a function to remove all digits from the given string.\n    '''\n    text1_without_number = ''\n    for i in text1:\n        if i.isdigit():\n            text1_without_number += i\n        else:\n            pass\n    return text1_without_number\ndef remove_newline_separator(text1):\n    '''\n    Write a function to remove all newline characters from the given string.\n    '''\n    text1_without_newline_separator = ''\n    for i in text1:\n        if i == '\\n':\n            text1_without_newline_separator +=''\n        else:\n            pass\n    return text1_without_newline_separator\ndef remove_punctuation_separator(text1):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    text1_without_punctuation_separator = ''\n    for i in text1:\n        if i!='' and i!= '.' and i!= ',' and i!= '!':\n            text1_without_punctuation_separator += i\n        else:\n            pass\n    return text1_without_punctuation_separator\ndef remove_all_separator(text1):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    text1_without_all_separator = ''\n    for i in text1:\n        text1_without_all_separator += i\n        pass\n    return text1_without_all_separator\ndef remove_name_punctuation(text1):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    text1_without_name_punctuation = ''\n    for i in text1:\n        if i!='':\n            text1_without_name_punctuation += i\n        else:\n            pass\n    return text1_without_name_punctuation\ndef remove_name_punctuation_separator(text1):\n    '''\n    Write a function to remove all punctuation characters from the given string.\n    '''\n    text1_without_name_punctuation_separator = ''\n    for i in text1:\n        if i!='':\n            text1_without_name_punctuation_separator += i\n        else:\n            pass\n    return text1_without_name_punctuation_separator\ndef remove_name_all_separator(text1):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    text1_without_name_all_separator = ''\n    for i in text1:\n        text1_without_name_all_separator += i\n        pass\n    return text1_without_name_all_separator\ndef remove_date_time(text1):\n    '''\n    Write a function to remove all date and time characters from the given string.\n    '''\n    text1_without_date_time = ''\n    for i in text1:\n        if i!='':\n            text1_without_date_time += i\n        else:\n            pass\n    return text1_without_date_time\ndef remove_date_time_separator(text1):\n    '''\n    Write a function to remove all date and time characters from the given string.\n    '''\n    text1_without_date_time_separator = ''\n    for i in text1:\n        if i!='':\n            text1_without_date_time_separator += i\n        else:\n            pass\n    return text1_without_date_time_separator\ndef remove_time_separator(text1):\n    '''\n    Writ"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = ''\n    # copy the string\n    for line in text1.splitlines():\n        # remove the spaces\n        line = line.replace(' ', '')\n        # put the result into string\n        text2 += line + '\\n'\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = ''\n    for word in text1.split():\n        new_text += word\n        new_text +=''\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # init empty string for returned string\n    final_string = \"\"\n    # loop through string\n    for char in text1:\n        # if char is space\n        if char.isspace():\n            # remove whitespaces from the string\n            final_string += char.strip()\n    return final_string\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>0:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    \n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == 0:\n        return 0.0\n    else:\n        return actual_cost / sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    total = 0\n    for i in range(len(actual_cost)):\n        if actual_cost[i] >= sale_amount:\n            total += sale_amount\n        else:\n            total += actual_cost[i]\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initializing the sum of factors for even numbers\n    s = 0\n    # looping through the number\n    for i in range(1, n+1):\n        # if the number is even\n        if n % i == 0:\n            # adding up all the factors\n            s += i\n    return s\ndef mulinumber(n) :\n    '''\n    Write a python function to calculate the sum of the first n natural numbers.\n    '''\n    # initializing the sum of the first n natural numbers\n    sum = 0\n    # looping through the number\n    for i in range(0, n):\n        # if the number is odd\n        if i % 2 == 1:\n            # adding up the first two natural numbers\n            sum += i\n    # returning the sum of the first n natural numbers\n    return sum\ndef power(x, n):\n    '''\n    Write a python function to calculate the nth power of x and return the result.\n    '''\n    # initializing the power\n    power = 1\n    # looping through the power\n    for i in range(1, n+1):\n        # if the power is less than or equal to x\n        if power < x:\n            # adding up the power and the result of the power\n            power *= x\n            # the result returned\n            return power\n        # if the power is greater than or equal to x\n        else:\n            # multiplying the result of the power by the x\n            power = power * x\n            # the result returned\n            return power\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    num = int(n)\n    num2 = num\n    factors = []\n    while(num2!= 0):\n        if num % 2 == 0:\n            factors.append(2)\n        else:\n            factors.append(num)\n        num = num // 2\n        \n    #print(\"Factors: \",factors)\n    if num in factors :\n        return \"The number is a prime number!\"\n    else :\n        return \"The number is not a prime number!\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 0 : \n        return 0\n    i = 0\n    while i < n : \n        if n % i == 0 : \n            i += 1\n            n /= i \n        else : \n            i += 1\n    return n \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return sumofFactors(n // 2)\n    else:\n        return sumofFactors(n // 2) + sumofFactors(n - 1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count=0\n    for i in range(1,int(math.sqrt(n))) :\n        if n%i==0:\n            count+=i\n            if i%2==0 :\n                count+=i\n    return count\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # Find the factors\n    if n == 0 :\n        return 0\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 :\n            factors.append(i)\n    # Add the number of factors\n    if len(factors) > 2: \n        return sumofFactors(n//len(factors)) + sumofFactors(n%len(factors))\n    else : \n        return 0\n    \ndef multiplyFactors(n,k) :\n    '''\n    Write a python function to find the multiplicaton of two numbers. \n    '''\n    if n == 0 :\n        return 0\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 :\n            factors.append(i)\n    # Add the number of factors\n    if len(factors) > 2: \n        return multiplyFactors(n//len(factors),k) + multiplyFactors(n%len(factors),k)\n    else : \n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        divisor = int(math.sqrt(n))\n        s=0\n        while divisor > 0:\n            if n % divisor == 0:\n                s+=divisor\n                n = n / divisor\n            else:\n                divisor-=1\n        return s\nn = int(input())\nprint(sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 1 : return n\n    elif n % 2 == 0 : return sumofFactors(n//2)\n    elif n % 2 == 1 : return n//2\n    else : return n*sumofFactors(n-1)\ndef main() :\n    '''\n    The main function.\n    '''\n    # user input\n    num = input(\"Enter a number: \")\n    result = sumofFactors(int(num))\n    print(result)\nmain()"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return 2 \n    else: \n        return sumofFactors(n // 2) + 2 \ndef isPerfectSquare(n): \n    '''\n    Return True if n is a perfect square, else False.\n    '''\n    if n < 0 or (n % 2)!= 0: \n        return False \n    return math.sqrt(n) == math.sqrt(n - 1) \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    return re.match(pattern,text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_lower = text.lower()\n    return re.findall(r'z',text_lower)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern_wordz = re.compile(r'z')\n    return pattern_wordz.search(text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^a-z]','',text)\n    return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\bz\\b' # Replace this with the regular expression\n    return re.search(regex,text)!= None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_s(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_b(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_s(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_b(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_c(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_d(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_e(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_f(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_g(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_h(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_i(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_j(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_k(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_l(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_m(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_n(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_o(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_p(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_q(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_r(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_s(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_t(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_u(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_v(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_w(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_x(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_y(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_a_z(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_b(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_c(text):\n    '''\n    Write a function that matches a word containing 'z' followed by a number.\n    '''\n    \n    '''\n    Write your function here\n    '''\n    return\n    \n    \ndef text_match_wordz_d(text):\n    ''"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.match('[a-z]+', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = '\\w*z?'\n    #text = text.lower()\n    pattern_re = re.compile(pattern)\n    result = pattern_re.findall(text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(text)\n    #print(\"\\n\")\n    text = re.sub(r\"[A-Za-z_\\\\/]\", '', text)\n    return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r\"[^a-zA-Z0-9]'?\"\n    return pattern in text\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        print('Error: month number cannot be larger than 12')\n        sys.exit()\n    if monthnum2 < 1 or monthnum2 > 12:\n        print('Error: month number cannot be smaller than 1 or larger than 12')\n        sys.exit()\n    if monthnum2 == 1 or monthnum2 == 2:\n        if monthnum2 == 1:\n            return 1\n        elif monthnum2 == 2:\n            return 0\n    if monthnum2 == 3 or monthnum2 == 4:\n        if monthnum2 == 3:\n            return 0\n        elif monthnum2 == 4:\n            return 1\n    if monthnum2 == 5 or monthnum2 == 6:\n        if monthnum2 == 5:\n            return 0\n        elif monthnum2 == 6:\n            return 1\n    if monthnum2 == 7 or monthnum2 == 8:\n        if monthnum2 == 7:\n            return 0\n        elif monthnum2 == 8:\n            return 1\n    if monthnum2 == 9 or monthnum2 == 10:\n        if monthnum2 == 9:\n            return 0\n        elif monthnum2 == 10:\n            return 1\n    if monthnum2 == 11 or monthnum2 == 12:\n        if monthnum2 == 11:\n            return 0\n        elif monthnum2 == 12:\n            return 1\n    else:\n        print('Error: month number does not contain 31 days')\n        sys.exit()\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    if monthnum2 > 31:\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the given month number is within the range of 1 to 12\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        # check whether the given month number contains the 31 days\n        if monthnum2 == 31:\n            return True\n        else:\n            # raise ValueError exception if the given month number is not within the range of 1 to 31\n            raise ValueError('Invalid month number, month number must be between 1 to 31')\n    else:\n        raise ValueError('Invalid month number, month number must be between 1 to 12')\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 > 12):\n        monthnum2 = monthnum2 - 12\n        return(1)\n    else:\n        return(0)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == '01':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '02':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '03':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '04':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '05':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '06':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '07':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '08':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '09':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '10':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '11':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    elif monthnum2 == '12':\n        print('Your number {} is a Valid Month number'.format(monthnum2))\n    else:\n        print('Your number {} does not contain a valid month number'.format(monthnum2))\n        \n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n    else:\n        if monthnum2 % 4 == 0:\n            if monthnum2 % 100!= 0:\n                if monthnum2 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum == 1 or (monthnum == 2 and (31 <= monthnum <= 31)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_list = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 31 or monthnum2 < 1:\n        return 'You enter a invalid month number, Please enter between 1 and 31.'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 2 or monthnum2 == 3 or monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 9 or monthnum2 == 10 or monthnum2 == 11 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for i in range(len(stringlist)):\n        result.append(stringlist[i][::-1])\n    return result\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 0:\n        return stringlist\n    else:\n        for i in range(0, len(stringlist), 1):\n            stringlist[i] = stringlist[i][::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for item in stringlist:\n        print(item)\n    return item\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    length = len(stringlist)\n    for i in range(length):\n        stringlist[i] = stringlist[i][::-1]\n        \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) <= 0:\n        return []\n    \n    stringlist = sorted(stringlist)\n    new_list = []\n    for x in stringlist:\n        new_list.append(x)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string = \"\"\n    stringlist.sort()\n    for i in stringlist:\n        reverse_string += i + \" \"\n    return reverse_string.rstrip()\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Write your code here.\n    string_list = []\n    for string in stringlist:\n        string_list.append(string[::-1])\n    return string_list\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = 0\n    for i in lst:\n        if(len(i)<=minimum):\n            minimum = len(i)\n    return minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    index_min = 0\n    for index, value in enumerate(lst): \n        if value < lst[index_min]: \n            index_min = index \n    return lst[index_min] \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0]\n    for i in range(1, len(lst)): \n        if lst[i] < min_length: \n            min_length = lst[i] \n    return min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # your code goes here \n    # min = lst[0]\n    # for i in range(1, len(lst)):\n    #     if lst[i] < min:\n    #         min = lst[i]\n    # return min\n    return lst[0] \nlst = [1, 3, 4, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\nprint(Find_Min(lst)) \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    for i in range(len(lst)): \n        if(lst[i] < lst[min_length - 1]): \n            min_length = i\n    return min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    lst_2 = []\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return(lst[:min_len])\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst=lst.copy()\n    min_length=lst.count(min_lst[0])\n    for i in range(1,len(lst)):\n        if lst[i]!=min_lst[i]:\n            min_lst[i]=min_length\n            min_length=lst[i]\n    return min_lst\n    \n    \ndef Sort_List(lst): \n    '''\n    Write a python function to sort the given list in ascending order.\n    '''\n    for i in range(len(lst)-1):\n        for j in range(i+1,len(lst)):\n            if lst[i]<lst[j]:\n                lst[i],lst[j]=lst[j],lst[i]\n    return lst\n    \n    \ndef main(): \n    \"\"\"\n    Test case\n    \"\"\"\n    lst=[7, 2, 4, 9, 2, 5, 8, 6, 3, 1] \n    print(\"Given list is \",end=\"\") \n    print(lst) \n    \n    print(\"Sorted list is \",end=\"\") \n    print(Sort_List(lst)) \n    print(\"Without Sort\") \n    print(lst) \n    print(\"After Sort\") \n    print(Sort_List(lst)) \n    \n    print(\"Checking if all elements are less than 5\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 10\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 15\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 20\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 25\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 30\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 35\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 40\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 45\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 50\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 55\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 60\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 65\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 70\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 75\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 80\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 85\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 90\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 95\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 100\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 105\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 110\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 115\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 120\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 125\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 130\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 135\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 140\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 145\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 150\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 155\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 160\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 165\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 170\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 175\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 180\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 185\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 190\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 195\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 200\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 205\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 210\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 215\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 220\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 225\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 230\") \n    print(\"List is \",end=\"\") \n    print(lst) \n    \n    print(\"Checking if all elements are less than 235\") \n    print(\"List is \",end=\"\") \n    prin"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0] \n    for i in range(1, len(lst)): \n        if lst[i] < min: \n            min = lst[i] \n    return min \n    pass \n \n \ndef Find_Median(lst): \n    '''\n    Write a python function to find the median of a list.\n    '''\n    lst.sort() \n    if len(lst) % 2 == 1: \n        return (lst[int(len(lst)/2) - 1] + lst[int(len(lst)/2)]) / 2\n    return (lst[int(len(lst)/2)]) \n    pass \n \n \ndef Find_Mode(lst): \n    '''\n    Write a python function to find the mode of a list.\n    '''\n    pass \n \ndef Remove_Duplicate(lst): \n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    pass \n \ndef Remove_Outliers(lst): \n    '''\n    Write a python function to remove the outlier elements from a list.\n    '''\n    pass \n \ndef Find_Range(lst): \n    '''\n    Write a python function to find the range of a list.\n    '''\n    pass \n \ndef Reverse(lst): \n    '''\n    Write a python function to reverse a list.\n    '''\n    pass \n \ndef Fibonacci(lst): \n    '''\n    Write a python function to find the fibonacci sequence of a list.\n    '''\n    pass \n \ndef Insertion_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Quick_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Merge(lst): \n    '''\n    Write a python function to merge two sorted lists.\n    '''\n    pass \n \ndef Merge_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Selection_Sort(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Shell_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Shell_Sort2(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Selection_Sort2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Quick_Sort2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Median(lst): \n    '''\n    Write a python function to find the median of a list.\n    '''\n    pass \n \ndef Mode(lst): \n    '''\n    Write a python function to find the mode of a list.\n    '''\n    pass \n \ndef Num_of_elements(lst): \n    '''\n    Write a python function to count the number of elements in a list.\n    '''\n    pass \n \ndef Random_Selection(lst): \n    '''\n    Write a python function to randomly select an element from a list.\n    '''\n    pass \n \ndef Random_Swap(lst): \n    '''\n    Write a python function to randomly select an element from a list.\n    '''\n    pass \n \ndef Random_Insert(lst): \n    '''\n    Write a python function to randomly select an element from a list.\n    '''\n    pass \n \ndef Random_Random_Sorted(lst): \n    '''\n    Write a python function to randomly select an element from a list.\n    '''\n    pass \n \ndef Random_Sort(lst): \n    '''\n    Write a python function to randomly select an element from a list.\n    '''\n    pass \n \ndef Random_Swap_Sort(lst): \n    '''\n    Write a python function to randomly select an element from a list.\n    '''\n    pass \n \ndef Reverse_Sorted(lst): \n    '''\n    Write a python function to reverse a list in ascending order.\n    '''\n    pass \n \ndef Sorting(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Quick_Sort2(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Sort_2(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Select_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Sort_3(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Select_Sort2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Sort_4(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Select_Sort3(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Insertion_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Quick_Sort3(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Quick_Sort_2(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Merge_2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Merge_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Selection_Sort_2(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Shell_Sort_2(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Shell_Sort_3(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Shell_Sort(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Shell_Sort2(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Shell_Sort3(lst): \n    '''\n    Write a python function to sort a list in descending order.\n    '''\n    pass \n \ndef Select_Sort(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Shell_Sort_4(lst): \n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    pass \n \ndef Select_Sort2(lst): \n    '''\n    Write "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) <= 1: \n        return lst[0]\n    else: \n        for i in range(len(lst)): \n            for j in range(i+1, len(lst)): \n                if lst[i] + lst[j] < lst[j]: \n                    lst[j], lst[i] = lst[i], lst[j] \n        return Find_Min(lst[:len(lst)//2])\n    "
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(f\"The area of the rectangle is {area}\")\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(f\"The rectangle area is {l*b}\")\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    \n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l * b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"Rectangle area is \" + str(l*b))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Your code here\n    out = []\n    for i in str1.split():\n        if i[0] == i[0].upper():\n            out.append(i[1:])\n    return ''.join(out)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.replace('[0-9]', '')\ndef remove_special(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.replace('[^a-zA-Z]', '')\ndef remove_emails(str1):\n    '''\n    Write a function to remove email addresses from a given string.\n    '''\n    return str1.replace('[^a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]{2,}', '')\ndef remove_dates(str1):\n    '''\n    Write a function to remove dates from a given string.\n    '''\n    return str1.replace('[^a-zA-Z]+', '')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove whitespaces from a given string.\n    '''\n    return str1.strip()\ndef remove_emails_with_spaces(str1):\n    '''\n    Write a function to remove emails with spaces from a given string.\n    '''\n    return str1.replace('[^a-zA-Z0-9]', '')\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return str1.strip()\ndef remove_number_of_tokens(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.replace('[0-9]', '')\ndef remove_non_alnum(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_letters + '_'))\ndef remove_alpha_nums(str1):\n    '''\n    Write a function to remove alphanumeric characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_letters + '_'))\ndef remove_camelcase(str1):\n    '''\n    Write a function to remove camelcase characters from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_letters + '_'))\ndef remove_whitespace_from_sentence(str1):\n    '''\n    Write a function to remove whitespace from a given sentence.\n    '''\n    return str1.strip()\ndef remove_stop_words(str1):\n    '''\n    Write a function to remove stopwords from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_punctuation_from_sentence(str1):\n    '''\n    Write a function to remove punctuation from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_emails_from_sentence(str1):\n    '''\n    Write a function to remove email addresses from a given sentence.\n    '''\n    return str1.replace('[^a-zA-Z]+', '')\ndef remove_dates_from_sentence(str1):\n    '''\n    Write a function to remove dates from a given sentence.\n    '''\n    return str1.replace('[^a-zA-Z]+', '')\ndef remove_special_characters_from_sentence(str1):\n    '''\n    Write a function to remove special characters from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_number_of_words(str1):\n    '''\n    Write a function to remove numbers from a given sentence.\n    '''\n    return str1.replace('[0-9]', '')\ndef remove_non_alnum_from_sentence(str1):\n    '''\n    Write a function to remove non-alphanumeric characters from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_letters + '_'))\ndef remove_letter_from_sentence(str1):\n    '''\n    Write a function to remove letters from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_letters + '_'))\ndef remove_all_words(str1):\n    '''\n    Write a function to remove all words from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_camelcase_from_sentence(str1):\n    '''\n    Write a function to remove camelcase characters from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_letters + '_'))\ndef remove_whitespaces_from_sentence(str1):\n    '''\n    Write a function to remove whitespaces from a given sentence.\n    '''\n    return str1.strip()\ndef remove_special_characters_from_sentence(str1):\n    '''\n    Write a function to remove special characters from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_stop_words_from_sentence(str1):\n    '''\n    Write a function to remove stopwords from a given sentence.\n    '''\n    return str1.replace('[^a-zA-Z]+', '')\ndef remove_punctuation_from_sentence(str1):\n    '''\n    Write a function to remove punctuation from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_emails_from_sentence(str1):\n    '''\n    Write a function to remove email addresses from a given sentence.\n    '''\n    return str1.replace('[^a-zA-Z]+', '')\ndef remove_dates_from_sentence(str1):\n    '''\n    Write a function to remove dates from a given sentence.\n    '''\n    return str1.replace('[^0-9]+', '')\ndef remove_special_characters_from_sentence(str1):\n    '''\n    Write a function to remove special characters from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_whitespaces_from_sentence(str1):\n    '''\n    Write a function to remove whitespaces from a given sentence.\n    '''\n    return str1.strip()\ndef remove_stop_words_from_sentence(str1):\n    '''\n    Write a function to remove stopwords from a given sentence.\n    '''\n    return str1.replace('[^a-zA-Z]+', '')\ndef remove_punctuation_from_sentence(str1):\n    '''\n    Write a function to remove punctuation from a given sentence.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_emails_from_sentence"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_string = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            new_string += str1[i].lower()\n        else:\n            new_string += str1[i]\n    return new_string\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1==' ':\n        return''\n    temp = re.sub(r'\\w', r'', str1)\n    if temp[0].isupper():\n        return temp\n    return temp\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.replace('A','A').replace('B','B').replace('C','C').replace('D','D').replace('E','E')\\\n    .replace('F','F').replace('G','G').replace('H','H').replace('I','I').replace('J','J').replace('K','K')\\\n    .replace('L','L').replace('M','M').replace('N','N').replace('O','O').replace('P','P').replace('Q','Q').replace('R','R')\\\n    .replace('S','S').replace('T','T').replace('U','U').replace('V','V').replace('W','W').replace('X','X').replace('Y','Y').replace('Z','Z')\n    return str1\ndef remove_lower(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.replace('a','A').replace('b','B').replace('c','C').replace('d','D').replace('e','E')\\\n    .replace('f','F').replace('g','G').replace('h','H').replace('i','I').replace('j','J').replace('k','K')\\\n    .replace('l','L').replace('m','M').replace('n','N').replace('o','O').replace('p','P').replace('q','Q').replace('r','R')\\\n    .replace('s','S').replace('t','T').replace('u','U').replace('v','V').replace('w','W').replace('x','X').replace('y','Y').replace('z','Z')\n    return str1\ndef remove_digit(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    str1=str1.replace('0','0').replace('1','1').replace('2','2').replace('3','3').replace('4','4').replace('5','5').replace('6','6')\\\n    .replace('7','7').replace('8','8').replace('9','9').replace(' ',' ').replace('!','').replace('-',' ').replace('.','').replace(' ',' ')\\\n    .replace('$','$')\n    return str1\ndef remove_special_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str1=str1.replace('!','!').replace('@','@').replace('#','#').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')').replace('_','_').replace('+','+').replace('=','=').replace('_','_').replace('{','{').replace('}','}').replace('{','{').replace('}','}')\\\n    .replace('[','[').replace(']',']').replace('<','<').replace('>','>').replace('^','^').replace('*','*').replace(';',';').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','(').replace(')',')')\n    return str1\ndef remove_all_char(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    str1=str1.replace('!','!').replace('@','@').replace('#','#').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')').replace('_','_').replace('+','+').replace('=','=').replace('_','_').replace('{','{').replace('}','}').replace('{','{').replace('}','}')\\\n    .replace('[','[').replace(']',']').replace('<','<').replace('>','>').replace('^','^').replace('*','*').replace(';',';').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')')\n    return str1\ndef remove_word(str1):\n    '''\n    Write a function to remove words from a given string.\n    '''\n    str1=str1.replace('.','.').replace('!','!').replace('@','@').replace('#','#').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')').replace('_','_').replace('+','+').replace('=','=').replace('_','_').replace('{','{').replace('}','}').replace('{','{').replace('}','}')\\\n    .replace('[','[').replace(']',']').replace('<','<').replace('>','>').replace('^','^').replace('*','*').replace(';',';').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')')\n    return str1\ndef remove_all(str1):\n    '''\n    Write a function to remove all words from a given string.\n    '''\n    str1=str1.replace('.','.').replace('!','!').replace('@','@').replace('#','#').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')').replace('_','_').replace('+','+').replace('=','=').replace('_','_').replace('{','{').replace('}','}').replace('{','{').replace('}','}')\\\n    .replace('[','[').replace(']',']').replace('<','<').replace('>','>').replace('^','^').replace('*','*').replace(';',';').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')')\n    return str1\ndef remove_all_replace(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    str1=str1.replace('!','!').replace('@','@').replace('#','#').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')').replace('_','_').replace('+','+').replace('=','=').replace('_','_').replace('{','{').replace('}','}').replace('{','{').replace('}','}')\\\n    .replace('[','[').replace(']',']').replace('<','<').replace('>','>').replace('^','^').replace('*','*').replace(';',';').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')')\n    return str1\ndef remove_word_replace(str1):\n    '''\n    Write a function to remove words from a given string.\n    '''\n    str1=str1.replace('.','.').replace('!','!').replace('@','@').replace('#','#').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')').replace('_','_').replace('+','+').replace('=','=').replace('_','_').replace('{','{').replace('}','}').replace('{','{').replace('}','}')\\\n    .replace('[','[').replace(']',']').replace('<','<').replace('>','>').replace('^','^').replace('*','*').replace(';',';').replace('$','$').replace('%','%').replace('&','&').replace('*','*').replace('(','').replace(')',')')\n    return str1\ndef remove_all_replace_replace(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    str1=str1.replace('!','!').replace('@','@').replace('#','#').replace('$','$').replace('%','%').replace('"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_symbols(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+', '', str1)\ndef remove_chars(str1):\n    '''\n    Write a function to remove characters from a given string.\n    '''\n    return re.sub(r'[\\s]+', '', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub(r'[0-9]', '', str1)\ndef get_words(str1):\n    '''\n    Write a function that will return a list of the words in a given string.\n    '''\n    return re.split(r'\\s+', str1)\ndef remove_empty(str1):\n    '''\n    Write a function that will remove all empty strings from a given string.\n    '''\n    return re.sub('^\\s+', '', str1)\ndef remove_first(str1):\n    '''\n    Write a function that will return a list of the first occurence of the given string.\n    '''\n    return re.findall(r'\\w+', str1)\ndef remove_last(str1):\n    '''\n    Write a function that will return a list of the last occurence of the given string.\n    '''\n    return re.findall(r'\\w+', str1)\ndef remove_alphabet(str1):\n    '''\n    Write a function that will return a list of all alphabets in the given string.\n    '''\n    return list(set(str1))\ndef remove_punctuation_special(str1):\n    '''\n    Write a function that will return a list of all punctuation special in the given string.\n    '''\n    return re.sub(r'[^\\w\\s]+', '', str1)\ndef remove_symbols_special(str1):\n    '''\n    Write a function that will return a list of all special symbols in the given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+', '', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function that will return a list of all numbers in the given string.\n    '''\n    return re.sub(r'[0-9]+', '', str1)\ndef clean_string(str1):\n    '''\n    Write a function that will return a new string with all empty spaces and all punctuation removed.\n    '''\n    return re.sub(r'[^\\w\\s]+','', str1)\ndef get_string_length(str1):\n    '''\n    Write a function that will return the string length of a given string.\n    '''\n    return len(str1)\ndef split_string(str1):\n    '''\n    Write a function that will return a list of all the spaces separated by spaces.\n    '''\n    return re.split('\\s+', str1)\ndef get_string_length_remove_spaces(str1):\n    '''\n    Write a function that will return the string length of a given string.\n    '''\n    return len(str1.strip())\ndef remove_symbol_brackets(str1):\n    '''\n    Write a function that will return a new string with all whitespaces removed.\n    '''\n    return re.sub(r'[^a-zA-Z]+','', str1)\ndef remove_double_spaces(str1):\n    '''\n    Write a function that will return a new string with all single spaces removed.\n    '''\n    return re.sub(r'\\s+','', str1)\ndef remove_numbers_special(str1):\n    '''\n    Write a function that will return a new string with all special symbols removed.\n    '''\n    return re.sub(r'[0-9]+', '', str1)\ndef remove_chars_special(str1):\n    '''\n    Write a function that will return a new string with all special characters removed.\n    '''\n    return re.sub(r'[^\\w\\s]+', '', str1)\ndef remove_digits_special(str1):\n    '''\n    Write a function that will return a new string with all numbers removed.\n    '''\n    return re.sub(r'[0-9]', '', str1)\ndef get_string_length_remove_digits(str1):\n    '''\n    Write a function that will return the string length of a given string.\n    '''\n    return len(str1.strip())\ndef get_string_length_remove_digits_special(str1):\n    '''\n    Write a function that will return the string length of a given string.\n    '''\n    return len(str1.strip())\ndef remove_non_numbers(str1):\n    '''\n    Write a function that will return a new string with all non-numbers removed.\n    '''\n    return re.sub(r'[^0-9]+','', str1)\ndef remove_numbers_special_special(str1):\n    '''\n    Write a function that will return a new string with all numbers and special characters removed.\n    '''\n    return re.sub(r'[^0-9]+','', str1)\ndef remove_whitespaces(str1):\n    '''\n    Write a function that will return a new string with all whitespaces removed.\n    '''\n    return re.sub('\\s+','', str1)\ndef remove_symbols(str1):\n    '''\n    Write a function that will return a new string with all symbols removed.\n    '''\n    return re.sub(r'[^a-zA-Z]+','', str1)\ndef remove_digits(str1):\n    '''\n    Write a function that will return a new string with all numbers and special characters removed.\n    '''\n    return re.sub(r'[0-9]+','', str1)\ndef get_string_length_remove_digits_special(str1):\n    '''\n    Write a function that will return the string length of a given string.\n    '''\n    return len(str1.strip())\ndef remove_punctuation_special_special(str1):\n    '''\n    Write a function that will return a new string with all special symbols and special characters removed.\n    '''\n    return re.sub(r'[^\\w\\s]+','', str1)\ndef get_string_length_remove_digits_special_special(str1):\n    '''\n    Write a function that will return the string length of a given string.\n    '''\n    return len(str1.strip())\ndef clean_string_special(str1):\n    '''\n    Write a function that will return a new string with all special symbols removed.\n    '''\n    return re.sub(r'[^a-zA-Z]+','', str1)\ndef remove_punctuation_special_special(str1):\n    '''\n    Write a function that will return a new string with all special symbols and special characters removed.\n    '''\n    return re.sub(r'[^a-zA-Z]+','', str1)\ndef remove_chars_special_special(str1):\n    '''\n    Write a function that will return a new string with all special characters and special characters removed.\n    '''\n    return re.sub(r'[^\\w\\s]+','', str1)\ndef remove_digits_special_special(str1):\n    '''\n    Write a function that will return a new string with all numbers and special characters removed.\n    '''\n    return re.sub(r'[0-9]+','', str1)\ndef get_string_length_remove_digits_special_special(str1):\n    '"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if (str1[i].isupper()):\n            new_str += str1[i].lower()\n        elif (str1[i].isalpha()):\n            new_str += str1[i].upper()\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    #remove characters\n    str1 = str1.replace(' ','')\n    #remove empty spaces\n    str1 = str1.replace('\\t','')\n    #remove special characters\n    str1 = str1.replace('!',' ')\n    str1 = str1.replace('\"',' ')\n    str1 = str1.replace('?','')\n    str1 = str1.replace('|','')\n    str1 = str1.replace('&','')\n    str1 = str1.replace('!','')\n    str1 = str1.replace('%','')\n    str1 = str1.replace('*','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    return str1\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove special characters, numbers and punctuations from a given string.\n    '''\n    #strip punctuation\n    str1 = str1.replace('.','')\n    str1 = str1.replace(',',' ')\n    str1 = str1.replace(';',' ')\n    str1 = str1.replace('!',' ')\n    str1 = str1.replace('?',' ')\n    str1 = str1.replace('\\'','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    #strip numbers\n    str1 = str1.replace('0','')\n    str1 = str1.replace('1','')\n    str1 = str1.replace('2','')\n    str1 = str1.replace('3','')\n    str1 = str1.replace('4','')\n    str1 = str1.replace('5','')\n    str1 = str1.replace('6','')\n    str1 = str1.replace('7','')\n    str1 = str1.replace('8','')\n    str1 = str1.replace('9','')\n    #remove special characters\n    str1 = str1.replace('\\'','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    str1 = str1.replace('\"','')\n    str1 = str1.replace('?','')\n    str1 = str1.replace('!','')\n    str1 = str1.replace('%','')\n    str1 = str1.replace('*','')\n    str1 = str1.replace('(','')\n    str1 = str1.replace(')','')\n    #remove spaces\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\t',' ')\n    str1 = str1.replace('\\n',' ')\n    str1 = str1.replace('\\u00A0',' ')\n    str1 = str1.replace('\\u00A1',' ')\n    str1 = str1.replace('\\u00A2',' ')\n    str1 = str1.replace('\\u00A3',' ')\n    str1 = str1.replace('\\u00A4',' ')\n    str1 = str1.replace('\\u00A5',' ')\n    str1 = str1.replace('\\u00A6',' ')\n    str1 = str1.replace('\\u00A7',' ')\n    str1 = str1.replace('\\u00A8',' ')\n    str1 = str1.replace('\\u00A9',' ')\n    str1 = str1.replace('\\u00AA',' ')\n    str1 = str1.replace('\\u00AB',' ')\n    str1 = str1.replace('\\u00AC',' ')\n    str1 = str1.replace('\\u00AD',' ')\n    str1 = str1.replace('\\u00AE',' ')\n    str1 = str1.replace('\\u00AF',' ')\n    str1 = str1.replace('\\u00B0',' ')\n    str1 = str1.replace('\\u00B1',' ')\n    str1 = str1.replace('\\u00B2',' ')\n    str1 = str1.replace('\\u00B3',' ')\n    str1 = str1.replace('\\u00B4',' ')\n    str1 = str1.replace('\\u00B5',' ')\n    str1 = str1.replace('\\u00B6',' ')\n    str1 = str1.replace('\\u00B7',' ')\n    str1 = str1.replace('\\u00B8',' ')\n    str1 = str1.replace('\\u00B9',' ')\n    str1 = str1.replace('\\u00BA',' ')\n    str1 = str1.replace('\\u00BB',' ')\n    str1 = str1.replace('\\u00BC',' ')\n    str1 = str1.replace('\\u00BD',' ')\n    str1 = str1.replace('\\u00BE',' ')\n    str1 = str1.replace('\\u00BF',' ')\n    str1 = str1.replace('\\u00C0',' ')\n    str1 = str1.replace('\\u00C1',' ')\n    str1 = str1.replace('\\u00C2',' ')\n    str1 = str1.replace('\\u00C3',' ')\n    str1 = str1.replace('\\u00C4',' ')\n    str1 = str1.replace('\\u00C5',' ')\n    str1 = str1.replace('\\u00C6',' ')\n    str1 = str1.replace('\\u00C7',' ')\n    str1 = str1.replace('\\u00C8',' ')\n    str1 = str1.replace('\\u00C9',' ')\n    str1 = str1.replace('\\u00CA',' ')\n    str1 = str1.replace('\\u00CB',' ')\n    str1 = str1.replace('\\u00CC',' ')\n    str1 = str1.replace('\\u00CD',' ')\n    str1 = str1.replace('\\u00CE',' ')\n    str1 = str1.replace('\\u00CF',' ')\n    str1 = str1.replace('\\u00D0',' ')\n    str1 = str1.replace('\\u00D1',' ')\n    str1 = str1.replace('\\u00D2',' ')\n    str1 = str1.replace('\\u00D3',' ')\n    str1 = str1.replace('\\u00D4',' ')\n    str1 = str1.replace('\\u00D5',' ')\n    str1 = str1.replace('\\u00D6',' ')\n    str1 = str1.replace('\\u00D7',' ')\n    str1 = str1.replace('\\u00D8',' ')\n    str1 = str1.replace('\\u00D9',' ')\n    str1 = str1.replace('\\u00DA',' ')\n    str1 = str1.replace('\\u00DB',' ')\n    str1 = str1.replace('\\u00DC',' ')\n    str1 = str1.replace('\\u00DD',' ')\n    str1 = str1.replace('\\u00DE',' ')\n    str1 = str1.replace('\\u00DF',' ')\n    str1 = str1.replace('\\u00E0',' ')\n    str1 = str1.replace('\\u00E1',' ')\n    str1 = str1.replace('\\u00E2',' ')\n    str1 = str1.replace('\\u00E3',' ')\n    str1 = str1.replace('\\u00E4',' ')\n    str1 = str1.replace('\\u00E5',' ')\n    str1 = str1.replace('\\u00E6',' ')\n    str1 = str1.replace('\\u00E7',' ')\n    str1 = str1.replace('\\u00E8',' ')\n    str1 = str1.replace('\\u00E9',' ')\n    str1 = str1"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            list1.append(str1[i])\n        else:\n            list1.append(str1[i])\n    str2 = ''.join(list1)\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\w*\\d\\w*', '', str1, flags=re.I)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # code goes here\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # For loop to generate all the elements in the sublist. \n    # Iterate through the sublist and save the element.\n    for i in lst: \n        print(i[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        lst[0] = i[0] \n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[:5]\n    for el in lst:\n        print(el)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    try: \n        return lst[0] \n    except IndexError: \n        return 0 \n    \n    \ndef QQ(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef BB(lst): \n    '''\n    Return the cube root of a number.\n    '''\n    try: \n        return lst[0]**3 \n    except IndexError: \n        return 0 \n    \n    \ndef D(lst): \n    '''\n    Return the degrees of a number.\n    '''\n    try: \n        return degrees(lst[0]) \n    except IndexError: \n        return 0 \n    \n    \ndef F(lst): \n    '''\n    Return the factorial of a number.\n    '''\n    try: \n        return lst[0]**3 \n    except IndexError: \n        return 0 \n    \n    \ndef SS(lst): \n    '''\n    Return the sum of the squares of a number.\n    '''\n    try: \n        return sum(lst[0])**2 \n    except IndexError: \n        return 0 \n    \n    \ndef H(lst): \n    '''\n    Return the hyperbolic angle of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef S(lst): \n    '''\n    Return the sum of the square of the elements of a list.\n    '''\n    try: \n        return sum(lst[0])**2 \n    except IndexError: \n        return 0 \n    \n    \ndef LS(lst): \n    '''\n    Return the sum of the square of the elements of a list.\n    '''\n    try: \n        return sum(lst[0])**2 \n    except IndexError: \n        return 0 \n    \n    \ndef DLS(lst): \n    '''\n    Return the sum of the squares of the elements of a list.\n    '''\n    try: \n        return sum(lst[0])**2 \n    except IndexError: \n        return 0 \n    \n    \ndef RM(lst): \n    '''\n    Return the root of a number.\n    '''\n    try: \n        return lst[0]**0.5 \n    except IndexError: \n        return 0 \n    \n    \ndef Ls(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**0.5 \n    except IndexError: \n        return 0 \n    \n    \ndef QLS(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**1.5 \n    except IndexError: \n        return 0 \n    \n    \ndef DLSQ(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef SQ(lst): \n    '''\n    Return the square of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef R(lst): \n    '''\n    Return the root of a number.\n    '''\n    try: \n        return lst[0]**0.5 \n    except IndexError: \n        return 0 \n    \n    \ndef QR(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**0.5 \n    except IndexError: \n        return 0 \n    \n    \ndef QRQ(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**0.5 \n    except IndexError: \n        return 0 \n    \n    \ndef QRQQ(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**0.5 \n    except IndexError: \n        return 0 \n    \n    \ndef QRQQQ(lst): \n    '''\n    Return the square root of a number.\n    '''\n    try: \n        return lst[0]**0.5 \n    except IndexError: \n        return 0 \n    \n    \ndef BQ(lst): \n    '''\n    Return the binary quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef QQQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef BQQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef QQQQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef BQQQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef DQ(lst): \n    '''\n    Return the degree of a number.\n    '''\n    try: \n        return degrees(lst[0]) \n    except IndexError: \n        return 0 \n    \n    \ndef QQD(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef QQDQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef QQDQQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef QQDQQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return lst[0]**2 \n    except IndexError: \n        return 0 \n    \n    \ndef BQD(lst): \n    '''\n    Return the binary degree of a number.\n    '''\n    try: \n        return degrees(lst[0]) \n    except IndexError: \n        return 0 \n    \n    \ndef QQDQD(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return degrees(lst[0]) \n    except IndexError: \n        return 0 \n    \n    \ndef QQDQDQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return degrees(lst[0]) \n    except IndexError: \n        return 0 \n    \n    \ndef QQDQDQQ(lst): \n    '''\n    Return the quadrant of a number.\n    '''\n    try: \n        return degrees("
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0][0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def getFirst(elem): \n        '''\n        Take in a sublist and return the first element of its sublist.\n        '''\n        for element in elem: \n            return element[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize a new list to store the value of the first element in each sublist\n    new_lst = []\n    # loop through the list to store the elements of the sublist\n    for i in lst:\n        new_lst.append(i[0])\n    # print the first element in each sublist\n    print(new_lst[0])\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.islower():\n            count+=1\n    return count\n    \ndef count_digits(str):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n    \ndef count_punctuation(str):\n    '''\n    Write a python function to count the number of punctuation marks in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i=='!':\n            count+=1\n    return count\n    \ndef is_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is capital letter.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.isupper()\n    \ndef is_punctuation(str):\n    '''\n    Write a python function to determine if a given string is punctuation.\n    '''\n    return str.isdigit() and str.isalpha() and str.isupper() and str.islower()\n    \ndef is_alpha(str):\n    '''\n    Write a python function to determine if a given string is alpha.\n    '''\n    return str.isalpha() and str.isupper() and str.islower()\n    \ndef is_upper(str):\n    '''\n    Write a python function to determine if a given string is upper.\n    '''\n    return str.isupper() and str.islower() and str.isalpha() and str.isupper()\n    \ndef is_lower(str):\n    '''\n    Write a python function to determine if a given string is lower.\n    '''\n    return str.isupper() and str.islower() and str.isalpha() and str.islower()\n    \ndef is_num(str):\n    '''\n    Write a python function to determine if a given string is numeric.\n    '''\n    return str.isdigit() and str.isalpha() and str.isupper() and str.islower()\n    \ndef is_upper_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is capital letter.\n    '''\n    return str.isupper() and str.islower() and str.isalpha() and str.isupper()\n    \ndef is_punctuation_num(str):\n    '''\n    Write a python function to determine if a given string is punctuation or number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isdigit() and str.isalpha() and str.isalpha()\n    \ndef is_capital_letter_num(str):\n    '''\n    Write a python function to determine if a given string is capital letter.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.isupper()\n    \ndef is_upper_capital_letter_num(str):\n    '''\n    Write a python function to determine if a given string is capital letter.\n    '''\n    return str.isupper() and str.islower() and str.isalpha() and str.isupper()\n    \ndef is_punctuation_num_num(str):\n    '''\n    Write a python function to determine if a given string is punctuation or number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isdigit() and str.isalpha() and str.isdigit()\n    \ndef is_num_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isupper() and str.islower() and str.isalpha()\n    \ndef is_upper_capital_letter_num_num(str):\n    '''\n    Write a python function to determine if a given string is capital letter.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.isupper()\n    \ndef is_upper_capital_letter_num_num(str):\n    '''\n    Write a python function to determine if a given string is capital letter.\n    '''\n    return str.isupper() and str.islower() and str.isalpha() and str.isupper()\n    \ndef is_upper_capital_letter_num_num(str):\n    '''\n    Write a python function to determine if a given string is capital letter.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.isupper()\n    \ndef is_lower_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is lower.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.islower()\n    \ndef is_lower_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is lower.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.islower()\n    \ndef is_lower_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is lower.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.islower()\n    \ndef is_num_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isupper() and str.islower() and str.isdigit()\n    \ndef is_num_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isupper() and str.islower() and str.isdigit()\n    \ndef is_num_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isupper() and str.islower() and str.isdigit()\n    \ndef is_num_capital_letter(str):\n    '''\n    Write a python function to determine if a given string is number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isupper() and str.islower() and str.isdigit()\n    \ndef is_digit(str):\n    '''\n    Write a python function to determine if a given string is digit.\n    '''\n    return str.isdigit() and str.isalpha() and str.isdigit()\n    \ndef is_alpha_num(str):\n    '''\n    Write a python function to determine if a given string is alpha number.\n    '''\n    return str.isdigit() and str.isalpha() and str.isdigit()\n    \ndef is_upper_cap_letter_num(str):\n    '''\n    Write a python function to determine if a given string is upper case letter.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.isupper()\n    \ndef is_upper_cap_letter_num(str):\n    '''\n    Write a python function to determine if a given string is upper case letter.\n    '''\n    return str.isupper() and str.islower() and str.isdigit() and str.isalpha() and str.isupper()\n    \ndef is_upper_cap_letter_num_num(str):\n    '''\n    Write a python function to determine i"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    chars = []\n    for char in str:\n        if char.isupper():\n            chars.append(char)\n    return ''.join(chars)\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    chars = []\n    for char in str:\n        if char.islower():\n            chars.append(char)\n    return ''.join(chars)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr+=1\n    return ctr\ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.islower():\n            ctr+=1\n    return ctr\ndef count_digits(str):\n    '''\n    Write a python function to count the digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\ndef count_symbols(str):\n    '''\n    Write a python function to count the symbols in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == \" \":\n            ctr+=1\n        else:\n            ctr=0\n    return ctr\ndef remove_punctuation(str):\n    '''\n    Write a python function to remove all punctuation marks in a given string.\n    '''\n    str = str.translate(str.maketrans({' ': '_', '.': '_', ':': '_', '!': '_', '?': '_'}))\n    return str\ndef split_string(str,delim=',',qu=None):\n    '''\n    Write a python function to split a given string into a list of strings where the values in the list are separated by the given delimiter.\n    The optional parameter 'delim' specifies the delimiter to use. Default value is ','\n    The optional parameter 'qu' specifies the list of characters to be returned. Default value is None.\n    '''\n    str = str.split(delim)\n    if qu is not None:\n        if type(qu) is str:\n            return str[0] + str + str[1:]\n        else:\n            for i in qu:\n                str.append(i)\n            return str\n    return str\ndef find_first_and_last(str):\n    '''\n    Write a python function to count the number of occurrences of the first and last characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == str[0] or i == str[-1]:\n            ctr+=1\n    return ctr\ndef combine_string(str1,str2):\n    '''\n    Write a python function to combine the two given strings.\n    '''\n    str1 = str1.split(',')\n    str2 = str2.split(',')\n    str1 = str1[1:]\n    str2 = str2[1:]\n    for i in range(len(str1)):\n        str1[i] = str1[i].strip()\n        str2[i] = str2[i].strip()\n    return str1 + str2\ndef reinsert_symbol(str):\n    '''\n    Write a python function to replace all occurrences of a given symbol with another symbol in a given string.\n    '''\n    str = str.replace('!', '_')\n    str = str.replace('?', '_')\n    str = str.replace('.', '_')\n    str = str.replace(' ', '_')\n    return str\ndef remove_punctuation_and_quotations(str):\n    '''\n    Write a python function to remove all punctuation marks from a given string.\n    '''\n    str = str.translate(str.maketrans({' ': '_', '.': '_', ':': '_', '!': '_', '?': '_'}))\n    return str\ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isalpha() and i not in [' ','.','?','!','_']:\n            ctr+=1\n    return ctr\ndef remove_stopwords(str):\n    '''\n    Write a python function to remove all stopwords from a given string.\n    '''\n    str = str.split()\n    for i in range(len(str)):\n        if str[i].isalpha() and i not in [' ','.','?','!','_']:\n            str.remove(str[i])\n    return \" \".join(str)\ndef find_first_and_last_words(str):\n    '''\n    Write a python function to find the number of occurrences of the first and last characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == str[0] or i == str[-1]:\n            ctr+=1\n    return ctr\ndef count_words_lens(str):\n    '''\n    Write a python function to count the length of all words in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isalpha() and i not in [' ','.','?','!','_']:\n            ctr+=1\n    return ctr\ndef count_words_double_n_times(str):\n    '''\n    Write a python function to count the number of times each word occurs in a given string.\n    '''\n    ctr = 0\n    for i in str.split():\n        if i.isalpha():\n            ctr+=1\n    return ctr\ndef find_first_and_last_words_double(str):\n    '''\n    Write a python function to find the number of occurrences of the first and last characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == str[0] or i == str[-1]:\n            ctr+=1\n    return ctr\ndef count_symbols_double_n_times(str):\n    '''\n    Write a python function to count the number of times each symbol occurs in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isalpha():\n            ctr+=1\n    return ctr\ndef count_double_n_times(str):\n    '''\n    Write a python function to count the number of double n times in a given string.\n    '''\n    ctr = 0\n    for i in str.split():\n        if i.isalpha() and i!='':\n            ctr+=1\n    return ctr\ndef remove_stopwords_double_n_times(str):\n    '''\n    Write a python function to remove all stopwords from a given string.\n    '''\n    str = str.split()\n    for i in range(len(str)):\n        if str[i].isalpha() and i not in [' ','.','?','!','_']:\n            str.remove(str[i])\n    return \" \".join(str)\ndef get_ngrams(str):\n    '''\n    Write a python function to count the number of n-grams in a given string.\n    '''\n    ngram_count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            ngram_count+=1\n    return ngram_count\ndef remove_ngrams(str):\n    '''\n    Write a python function to remove all n-grams from a given string.\n    '''\n    str = str.split()\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            str.remove(str[i])\n    return \" \".join(str)\ndef count_ngrams(str):\n    '''\n    Write a python function to count the number of n-grams in a given string.\n    '''\n    ngram_count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            ngram_count+=1\n    return ngram_count\ndef get_n_grams(str):\n    '''\n    Write a python function to count the number of n-grams in a given string.\n    '''\n    ngram_count = 0\n    for i in range(len(str) - 1):\n        if str[i] == str[i + 1]:\n            ngram_count+=1\n    return ngram_count\ndef count_n_grams(str):\n    '''\n    Write a pytho"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    num_upper_case = 0\n    num_lower_case = 0\n    for i in str:\n        if i.isupper():\n            num_upper_case += 1\n        elif i.islower():\n            num_lower_case += 1\n    print(num_upper_case, num_lower_case)\n    \nupper_ctr('Hi how are you?')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return(len(str.upper()))\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    str = str.upper()\n    print(str)\n    return str\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ct_char = 0\n    for ch in str:\n        if ch.isupper():\n            ct_char += 1\n    return ct_char"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for c in str:\n        if c.isupper():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        result.append(list1)\n    else:\n        for i in range(1, len(list1)+1):\n            for j in combinations_list(list1[:i]):\n                result.append(j + list1[i:])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    def generate_combinations(lst, length):\n        if length == len(lst):\n            result.append(lst)\n            return\n        else:\n            for i in range(length, len(lst)):\n                lst[i] = lst[i - length]\n                generate_combinations(lst, i)\n                lst[i] = lst[i + length]\n    generate_combinations(lst, len(lst))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # If list is empty or only consists of one element, return empty list\n    if list1 == [] or len(list1) == 1:\n        return []\n    # If list is not empty, check if all elements of list are unique\n    if set(list1).issubset(set(list1[0])):\n        return [list1]\n    # if list contains all possible elements, return list\n    if len(list1) == len(set(list1)):\n        return list1\n    # if list contains any element that is not unique\n    if len(list1) > len(set(list1)):\n        return combinations_list(list1[1:])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    def backtrack(res, idx, path, next=[]):\n        if idx == len(list1):\n            res.append(list(path))\n            return\n        for i in range(idx, len(list1)):\n            backtrack(res, i+1, path+[list1[i]], next+[list1[i]])\n    backtrack([], 0,[])\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    list1.sort()\n    for i in range(len(list1)):\n        temp_list = list1[:i] + list1[i+1:]\n        result.append(temp_list)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination = []\n    # Set all the combinations of the list as it's elements\n    combination_set = set(list1)\n    # Iterate through the set, adding the next element to the combination set\n    for i in combination_set:\n        combination.append(i)\n    # Add all the elements into a list, add an empty list as it's value is a list\n    combination_list = [x for x in combination]\n    return combination_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = len(list1)\n    if l == 1:\n        return [list1]\n    lst = []\n    for i in range(l):\n        lst.extend(combinations_list(list1[:i] + list1[i+1:]))\n    return lst\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    if type(list1)!= list:\n        raise TypeError(\"list1 must be a list\")\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_of_list = []\n    if len(list1) == 1:\n        list_of_list.append(list1[0])\n    else:\n        for i in range(len(list1)):\n            if len(list1) == 1:\n                list_of_list.append(list1[0])\n            else:\n                list_of_list.append(list1[0] + list1[i])\n    print(list_of_list)\n    return list_of_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # define a new array with the size of array multiplied by the length of the subarray.\n    subarray_size = [[0]*(len(arr[i])+1) for i in range(0,len(arr))]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    curr_product = 1\n    left = 0\n    right = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_sum = 0\n    start = 0\n    end = 0\n    res = arr[0]\n    for i in range(len(arr)):\n        max_sum = max(max_sum, arr[i]*(end-start))\n        if arr[i]*(end-start) > res:\n            start = i\n            res = arr[i]*(end-start)\n        if arr[i]*(end-start) > max_sum:\n            end = i\n            max_sum = arr[i]*(end-start)\n    return res\narr = [1, 5, 2, 6, 3, 7]\nprint(max_subarray_product(arr)"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = []\n    max_product_subarray = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_arr = arr[0]\n    min_arr = arr[0]\n    for i in range(1, len(arr)):\n        max_arr = max(arr[i], max_arr * arr[i])\n        min_arr = min(arr[i], min_arr * arr[i])\n    return max_arr, min_arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # We are not concerned with the understanding of the array.\n    if not arr:\n        return []\n    # We are talking about the end.\n    if len(arr) == 1:\n        return [1]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    subarray_len = 1\n    max_subarray_product = arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    length = len(arr)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n % 2 == 0:\n        for x in range(0,n,2):\n            if (dict[x][0] == dict[x+1][0]):\n                return False\n    else:\n        for x in range(0,n,2):\n            if (dict[x][0]!= dict[x+1][0]):\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[k] == v for k, v in n.items())\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if v == n:\n            return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = 0\n    for key in dict.keys():\n        if dict[key]!= value:\n            return False\n        value += 1\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for x in dict:\n        if x == n:\n            count += 1\n    if count == len(dict):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if not all(x in dict for x in n):\n        print(\"Incorrect format\")\n        return False\n    return True\n        \ndef check_data(dict):\n    '''\n    Write a function that returns the number of occurrences of all values\n    in a dictionary\n    '''\n    \n    occ = 0\n    for v in dict:\n        occ += dict[v]\n    return occ\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if len(v)!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if len(dict[i])!= n:\n            return False\n    return True\n    \n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in dict:\n        if type(dict[x]) is dict:\n            check_value(dict[x],n)\n        else:\n            if dict[x] is None:\n                if n is None:\n                    print('\\t\\tPlease provide value in the dictionary')\n                    exit()\n                else:\n                    print('\\t\\t'+dict[x]+' is missing, so value is missing')\n                    exit()\n            else:\n                if n is None:\n                    print('\\t\\t'+dict[x]+' is not None, so value is not same')\n                elif type(dict[x]) is not dict:\n                    print('\\t\\t'+dict[x]+' is not a dictionary')\n                elif type(dict[x]) is dict:\n                    check_value(dict[x],n)\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    new_d = {}\n    new_d.update(dict)\n    for i in new_d:\n        if dict[i]!= new_d[i]:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == None:\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    dict1 = dict1.items()\n    for k,v in dict1:\n        if v == '':\n            dict1.pop(k)\n    \n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if not dict1[key]:\n            del dict1[key]\n    return dict1\n    "
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty = []\n    for key, value in dict1.items():\n        if value == '' or value == None:\n            empty.append(key)\n    \n    for i in range(len(empty)):\n        dict1.popitem(default=None)\n    \n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = dict1.copy()\n    for k, v in dict1.items():\n        if v == [] or v == []:\n            dict1.pop(k)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    try:\n        dict1.pop()\n    except KeyError:\n        pass\n    return dict1\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    newdict = dict1.copy()\n    for k, v in newdict.items():\n        if len(v) == 0:\n            del newdict[k]\n    return newdict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if len(dict1[item]) == 0:\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    list1 = list(dict1.keys())\n    for item in list1:\n        if len(dict1[item]) == 0:\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # check if there are elements in array\n    if arr == []:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = 1\n    for i in range(1, len(arr)):\n        res = res * arr[i-1]\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max=1\n    for i in arr:\n        for j in range(1,i+1):\n            if(j%i==0):\n                break\n        if(j>=i):\n            print(j)\n            for k in range(i,j):\n                print(k)\n                if(k%i==0):\n                    break\n            print(k)\n            for l in range(k,i):\n                print(l)\n                if(l%i==0):\n                    break\n            max=max*arr[k]\n    return(max)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    arr.sort()\n    res = arr[0]\n    for i in range(1,len(arr)):\n        res = res*arr[i]\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    pass\n    # \"\"\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        for i in range(len(arr)-1):\n            arr[i] *= arr[i+1]\n    return max(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def factorial(n):\n        f = 1\n        for i in range(1, n+1):\n            f = f*i\n        return f\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def calculate_product_of_arr(arr):\n        result = 1\n        for i in range(1, len(arr)):\n            result = result * arr[i]\n        return result\n    return max(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup[0], test_tup[1]\n    return [a + b, b + a]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = (test_tup[0] + test_tup[1], test_tup[1] + test_tup[0])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #If the sum is equal to the sum of the previous tuple then the addition of the two elements is trivial.\n    if len(test_tup) == 2:\n        print(test_tup[0] + test_tup[1])\n        return\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    if a < b:\n        a, b = b, a\n    \n    a_idx = b - a\n    \n    for i in range(a_idx + 1):\n        test_tup = (a + i, b)\n        if is_in_interval(test_tup):\n            return test_tup\n    \n    raise ValueError(\"Unknown interval\")\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #Your code here\n    return tuple(zip(*test_tup))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # TODO: Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    # Create two empty lists (only the first list) and list for the second list.\n    first_list = []\n    second_list = []\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create an empty list to store the results\n    res_list = []\n    # Create a for-loop and populate the res_list with the values from the tuple\n    for i in range(len(test_tup) - 1):\n        res_list.append(test_tup[i][1] + test_tup[i + 1][1])\n    return res_list\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return (test_tup[0], test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    (a, b) = test_tup\n    return (a + b)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(len(arr)):\n        while arr[i] % n!= 0:\n            arr[i] = arr[i] % n\n    return arr[0]\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    remainder = sum % n\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    while prod * arr[0] % n!= 1:\n        prod = prod * arr[0] % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Keep in mind that it's a division operation and not multiplication/modulo\n    a = 1\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] % n!= 0:\n            a = (a * arr[i]) % n\n    return a\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #The prime factors of the number are 2,3,5,7,11,..\n    for i in range(2,n+1):\n        if (n % i) == 0:\n            #If i divides evenly into n, then i divides n evenly.\n            return i\n    #If none of the above conditions are true, then n is not a prime.\n    return -1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # get the remainder modulo the array size\n    r = arr[0]\n    for i in range(1, n):\n        r = (r * arr[i]) % 10\n    return r\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(0,len(arr)): \n        if arr[i] == 0: \n            print(' ')\n        else: \n            print('*',end='')\n        # print(arr[i], end=\" \")\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n    product=1\n    for i in range(len(arr)):\n        product*=arr[i]\n    return product%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    a = 1\n    for i in range(1,n):\n        a = a * arr[i]\n    return a\n    "
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(1,n+1):\n        prod = prod * arr[i]\n    return prod\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<=1:\n        return False\n    count = 0\n    for i in range(len(l)):\n        if l[i] == l[i-1]:\n            count+=1\n        else:\n            if count >= 2:\n                return False\n            count = 0\n            \n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    if len(l) == 1:\n        return True\n    else:\n        for i in l:\n            if i == l[0]:\n                l.remove(i)\n            else:\n                c += 1\n        if c == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    for i in l:\n        if (c<2):\n            if (i == l[c]):\n                c+=1\n            else:\n                c=0\n        else:\n            c+=1\n    return c==0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #Find the size of the list\n    s = 0\n    for i in l:\n        if i == s:\n            s += 1\n    return s > 0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(0,n):\n        if l[i] > l[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(l)>0 and sum(l[:-1])==l[-1] and (len(set(l))==len(l))\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0: return False\n    if l[0] == l[-1]: return True\n    if l[0]!= l[-1] and len(l)>1 and l[0]!= l[-2]: \n        return check_Consecutive(l[1:])\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for n in l: \n        if n%10==0: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    numbers = []\n    for num in l:\n        if num%10==0 and num>0:\n            numbers.append(num)\n    if len(numbers) == len(set(numbers)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a temp list to keep the order of tuples\n    temp_list = []\n    # iterate through each pair of elements in the given tuples\n    for i in range(len(test_list1)):\n        # check if the first element of the tuple is greater than the second element\n        if test_list1[i][0] > test_list2[i][0]:\n            # add the first element of the tuple to the temp list\n            temp_list.append(test_list1[i])\n        else:\n            # add the second element of the tuple to the temp list\n            temp_list.append(test_list2[i])\n    # create a tuple to return\n    tuple = tuple(temp_list)\n    # return the tuple\n    return tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # base case for the return\n    if len(test_list1) == 0 or len(test_list2) == 0:\n        return ()\n        \n    # initialize result tuple\n    result = ()\n    \n    # sort the tuples in decreasing order\n    test_list1.sort()\n    test_list2.sort()\n    \n    # loop through each tuple\n    # if the tuple is not in the sorted list, return\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            result = result + (test_list1[i],)\n    \n    return result\n    \nprint(tuple_intersection([1, 2, 3, 4, 5, 6], [1, 3, 4, 6, 8, 10])"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        print(\"Tuple lists must have the same length.\")\n        return\n    output = []\n    for x, y in zip(test_list1, test_list2):\n        if x == y:\n            output.append(x)\n        elif x > y:\n            output.append(y)\n        else:\n            output.append(x)\n    return tuple(output)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #test_list1 = sorted(test_list1)\n    #test_list2 = sorted(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list = list(test_list1)\n    test_list.sort()\n    test_list2 = list(test_list2)\n    test_list2.sort()\n    for i in range(0, len(test_list)):\n        if test_list[i] in test_list2:\n            test_list2.remove(test_list[i])\n    return test_list2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_set1=set(test_list1)\n    test_set2=set(test_list2)\n    intersection_list1=test_set1&test_set2\n    intersection_list2=test_set1|test_set2\n    return intersection_list1, intersection_list2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_set = set(test_list1) & set(test_list2)\n    test_set.update(set(test_list1) - set(test_list2))\n    return test_set\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # note: using the test tuple list as a counter to create the intersection set.\n    # this will cause the function to break on duplicate elements and hence not return the full set of elements.\n    # The need to use an equal set to keep the duplicate elements unique from the list.\n    # after the while loop, the intersection set will always be the set of tuples that is the same for both lists\n    intersection_set = set()\n    while len(test_list1)!= 0:\n        if test_list1[0] not in intersection_set:\n            intersection_set.add(test_list1[0])\n            test_list1.pop(0)\n        else:\n            break\n    while len(test_list2)!= 0:\n        if test_list2[0] not in intersection_set:\n            intersection_set.add(test_list2[0])\n            test_list2.pop(0)\n        else:\n            break\n    return intersection_set\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    temp_list = []\n    for x in range(len(test_list1)):\n        if x < len(test_list2):\n            temp_list.append(test_list1[x])\n        else:\n            temp_list.append(test_list2[x])\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for char in str1:\n        if char in char_dict:\n            newstr += char_dict[char]\n        else:\n            newstr += char\n    str1 = newstr\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return (str1.replace(ch,newch))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    \n    list = []\n    \n    for i in range(len(str1)):\n        list.append(str1[i].replace(ch,newch))\n        \n    return ''.join(list)\n    \ndef main():\n    \n    str1 = input(\"Enter your string: \")\n    ch = input(\"Enter your character: \")\n    \n    print(str1)\n    print(replace_char(str1,ch,ch))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.lower()\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n    "
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if newch not in string.ascii_letters:\n        return \"Invalid character\"\n    else:\n        return str1.replace(str1.index(newch),newch)\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    if dict1 is None:\n        print(\"Input is None, sort() was called with no argument.\")\n        return\n    \n    # get the keys of the dictionary\n    keys = dict1.keys()\n    # create a new dictionary to hold sorted values\n    sorted_dict = {}\n    # convert the dictionary into a list\n    \n    for key in keys:\n        # create a list containing the values\n        values = []\n        # iterate through the dictionary\n        for value in dict1[key]:\n            # add the value to the list\n            values.append(value)\n        # add the sorted values\n        values.sort()\n        # add the sorted values to the dictionary\n        sorted_dict[key] = values\n    # convert the dictionary into a sorted dictionary\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = sorted(dict1.values(), reverse=True)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create an empty list for values\n    list1 = []\n    # loop through dictionary keys\n    for key, value in dict1.items():\n        # append the values to list\n        list1.append(value)\n    # sort the list\n    list1.sort()\n    # return the list\n    return list1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    print(sort_dict)\ndef sort_dict_of_dict(dictionary1):\n    '''\n    Write a function to sort a dictionary in a way that each key appears in\n    the order of its value.\n    '''\n    sort_dict = {}\n    for i in dictionary1:\n        sort_dict.setdefault(i[0], []).append(i)\n    print(sort_dict)\ndef sorted_dict_of_dict(dictionary1):\n    '''\n    Write a function that sorts a dictionary in a way that each key appears in\n    the order of its value.\n    '''\n    for i in sorted(dictionary1):\n        print(i, dictionary1[i])\ndef in_dict(dictionary1):\n    '''\n    Write a function that takes a dictionary as an argument and returns the\n    value that appears in the dictionary.\n    '''\n    for i in dictionary1:\n        if i in dictionary1:\n            print(dictionary1[i])\ndef count_dict(dictionary1):\n    '''\n    Write a function that takes a dictionary and returns the number of keys in\n    the dictionary.\n    '''\n    return len(dictionary1)\ndef count_dict_of_dict(dictionary1):\n    '''\n    Write a function that takes a dictionary and returns the number of keys in\n    the dictionary.\n    '''\n    for i in dictionary1:\n        print(len(dictionary1[i]))\ndef create_dict_of_dict(dictionary1):\n    '''\n    Write a function that takes a dictionary and returns a new dictionary\n    with the same values as the input dictionary.\n    '''\n    new_dict = {}\n    for i in dictionary1:\n        new_dict[i[0]] = dictionary1[i]\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # TODO: Write your code here\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = dict1\n    new_dict = { k: v for (k, v) in sorted(new_dict.items(), key=lambda item: item[1], reverse=True)}\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sorted = dict()\n    for k, v in dict1.items():\n        for i in v:\n            if k not in dict_sorted:\n                dict_sorted[k] = [i]\n            else:\n                dict_sorted[k].append(i)\n    return dict_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a new dictionary to store the sorted keys\n    sorted_keys = {}\n    for k, v in dict1.items():\n        sorted_keys[v] = k\n    # create a sorted list of all keys\n    sorted_keys_values = sorted(sorted_keys.values())\n    # create a new dictionary to store the sorted values\n    sorted_values = {}\n    for key in sorted_keys_values:\n        sorted_values[key] = dict1[key]\n    # return the sorted dictionary\n    return sorted_values\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1:\n        if dict1[key]!= 0:\n            dict1[key] = round(dict1[key], 0)\n    return dict1\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    l_big = max(nums)\n    l_small = min(nums)\n    sum = l_big + l_small\n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # create a big and small array \n    big_array = []\n    small_array = []\n    # add the elements to the big array\n    for i in range(len(nums)):\n        big_array.append(nums[i])\n        # add the elements to the small array\n        if(i == len(nums)-1):\n            small_array.append(nums[i])\n        else:\n            if(nums[i+1] < nums[i]):\n                small_array.append(nums[i+1])\n            else:\n                small_array.append(nums[i])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num+min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    num_set = []\n    for num in nums:\n        if num not in num_set:\n            num_set.append(num)\n    return max(num_set) - min(num_set)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the max and min element of the array\n    max_element = max(nums)\n    min_element = min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    max_value, min_value = nums[0], nums[0]\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        elif num < min_value:\n            min_value = num\n    return max_value+min_value\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s=0\n    for i in nums:\n        s+=i\n    if s>nums[0]:\n        s=nums[0]\n    if s<nums[-1]:\n        s=nums[-1]\n    return s\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums)\n    if nums[0] > nums[-1]:\n        return big_sum(nums[1:])\n    else:\n        return big_sum(nums[:-1])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_str = string.lower()\n    return lower_case_str\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) == str:\n        lowercase = string.lower()\n        return lowercase\n    else:\n        raise TypeError('string must be string type')\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # base case: if string is empty, we return nothing\n    if str1 == \"\":\n        return \"\"\n    \n    # recursive case: if there is a blank\n    if str1[0] == \"\":\n        # return the string\n        return str1[1:]\n        \n    # recursive case: if there is a special character\n    if re.search(r'[^a-z0-9]', str1[0]):\n        # return the string\n        return str1[1:]\n    else:\n        # return the rest of the string\n        return remove_lowercase(str1[1:]) + remove_lowercase(str1[0])\n        "
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower_str1=str1.lower()\n    lower_str1_split=lower_str1.split(' ')\n    str2=''\n    for word in lower_str1_split:\n        if word.isalpha():\n            str2+=word.lower()\n        else:\n            str2+=word\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.lower().replace(str1[0:5], \"\")\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_duplicates(str1):\n    '''\n    Write a function that returns a new string where all the characters that are not repeated are removed.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_words(str1):\n    '''\n    Write a function that removes all the words from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_chars(str1):\n    '''\n    Write a function that removes all the characters from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_space(str1):\n    '''\n    Write a function that removes all the spaces from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_numbers(str1):\n    '''\n    Write a function that removes all the numbers from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_exclamation(str1):\n    '''\n    Write a function that removes all the exclamation marks from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_dot(str1):\n    '''\n    Write a function that removes all the dots from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_slash(str1):\n    '''\n    Write a function that removes all the slashes from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_space_and_punctuation(str1):\n    '''\n    Write a function that removes all the spaces and punctuation from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_stopwords(str1):\n    '''\n    Write a function that removes all the stopwords from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_punctuation_and_stopwords(str1):\n    '''\n    Write a function that removes all the punctuation and stopwords from a given string.\n    '''\n    #\n    # Example\n    # 'i, o, oo, oooo, ooooOO, ooooOOO' --> 'i, oo, ooo'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_urls(str1):\n    '''\n    Write a function that removes all the URLs from a given string.\n    '''\n    #\n    # Example\n    # 'http://www.example.com' --> 'http://www.example.com'\n    # \n    # **\n    # ** YOUR CODE HERE**\n    # \n    # ###\n    # ** You may not import any additional modules **\n    # ###\n    # \n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_special_chars(str1):\n    '''\n    Write a function that removes all the special characters from a given string.\n    '''\n    #\n    # Example\n    # '"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # example of removing a sub string from a given string\n    # notice that, if a given string starts with a lowercase substring,\n    # it will be removed by removing the lowercase substring too\n    # example 1:\n    # If the string is \"abccba\", the substring \"cba\" will be removed\n    # example 2:\n    # If the string is \"abc\", the substring \"c\" will be removed\n    # and the string will be \"abc\"\n    # so \"abccba\" will be changed to \"ac\"\n    # i.e. we will change the substring \"c\" from \"cba\" to \"ac\"\n    # and then \"ac\" will be removed by removing the lowercase substring\n    # \"cba\" will be removed from the original string\n    # note that if a given string starts with a lowercase substring,\n    # it will be removed by removing the lowercase substring too\n    # because \"a\" and \"b\" are the same substring\n    # we'll never see two substrings with same lowercase substring\n    # we'll remove the lowercase substring \"c\" from the original string\n    # and then \"cba\" will be replaced by \"cba\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = re.sub('[a-z]','', str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    regex = r\"[A-Z]+\"\n    for i in range(len(str1)):\n        if (re.search(regex, str1[i:])):\n            str2 += str1[i]\n        else:\n            str2 += str1[i].lower()\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str(str1).lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub('\\b[a-z]\\b', '', str1)\n    str1 = re.sub('\\b\\w*\\b', '', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    res = re.sub(r'(.)\\1{2,}',r'\\1',str1)\n    return res\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(.)\\1+', r'\\1', str1)\ndef split_string(str1):\n    '''\n    Write a function to split a given string into a list of individual strings.\n    '''\n    return re.split(r'(.)\\1+', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub(r'(.)\\1+', r'\\1', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'(.)\\1+', r'\\1', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'(.)\\1+', r' ', str1)\ndef remove_unwanted_chars(str1):\n    '''\n    Write a function to remove unwanted characters from a given string.\n    '''\n    return re.sub(r'\\W+','', str1)\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return re.sub(r'[\\(\\)]+','', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_symbols_and_punctuations(str1):\n    '''\n    Write a function to remove punctuation and symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_number(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_stopwords_and_punctuations(str1):\n    '''\n    Write a function to remove punctuation and stopwords from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_punctuation_and_symbols(str1):\n    '''\n    Write a function to remove punctuation and symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_number_and_symbols(str1):\n    '''\n    Write a function to remove numbers and symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_non_alphabetic_symbols(str1):\n    '''\n    Write a function to remove non-alphabetic symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_non_alphabetic_punctuation(str1):\n    '''\n    Write a function to remove non-alphabetic punctuation from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_numeric_punctuation(str1):\n    '''\n    Write a function to remove numeric punctuation from a given string.\n    '''\n    return re.sub(r'[^0-9\\']+','', str1)\ndef remove_number_and_stopwords(str1):\n    '''\n    Write a function to remove numbers and symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_number_and_stopwords(str1):\n    '''\n    Write a function to remove numbers and symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_number_and_punctuations(str1):\n    '''\n    Write a function to remove numbers and symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_number_and_symbols(str1):\n    '''\n    Write a function to remove numbers and symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_number_and_stopwords(str1):\n    '''\n    Write a function to remove numbers and symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_number_and_punctuations(str1):\n    '''\n    Write a function to remove numbers and symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_number_and_stopwords_and_punctuations(str1):\n    '''\n    Write a function to remove numbers and symbols and stopwords from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_number_and_stopwords_and_punctuations(str1):\n    '''\n    Write a function to remove numbers and symbols and stopwords and punctuations from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_symbols_and_punctuations(str1):\n    '''\n    Write a function to remove symbols and punctuations from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_number_and_stopwords_and_punctuations(str1):\n    '''\n    Write a function to remove numbers and symbols and stopwords and punctuations from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_punctuation_and_symbols_and_stopwords_and_punctuations(str1):\n    '''\n    Write a function to remove punctuation and symbols and stopwords and punctuations and symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_punctuation_and_stopwords_and_punctuations_and_symbols(str1):\n    '''\n    Write a function to remove punctuation and symbols and stopwords and punctuations and symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_special_symbols_and_stopwords_and_punctuations_and_symbols(str1):\n    '''\n    Write a function to remove special symbols and stopwords and punctuations and symbols from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_number_and_stopwords_and_punctuations_and_symbols_and_special_symbols(str1):\n    '''\n    Write a function to remove numbers and symbols and stopwords and punctuations and symbols and special symbols from a given string.\n    '''\n    return re.sub(r'\\d+','', str1)\ndef remove_symbols_and_stopwords_and_punctuations_and_special_symbols_and_number(str1):\n    '''\n    Write a function to remove symbols and stopwords and punctuations and special symbols and numbers from a given string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\']+','', str1)\ndef remove_number_and_stopwords_and_punctuations_and_special_symbols_and_number(str1):\n    '''\n    Write "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    str = str(n)\n    str = str.split('0')\n    num = 0\n    for i in range(len(str)):\n        num = int(str[i])\n        break\n    return num\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # write your code here\n    return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 : \n        return n\n    else : \n        return n//10 + first_Digit(n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    n = int(n)\n    digit = n % 10\n    if n == 0 : \n        return 0\n    else :\n        return digit\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    n = int(n)\n    digit = n % 10\n    if n == 0 :\n        return 0\n    else :\n        return digit\n    \ndef main() :  \n    '''\n    Write a python function to find the number of digits in a number.\n    '''\n    \n    n = input('Enter a number: ')\n    print(f\"The number of digits in {n} is {first_Digit(n) + last_Digit(n)}.\")\n    \nmain()"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n).split()[0]\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return str(n).split()[1]\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return str(n).split()[2]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    '''\n    print(n % 10)\n    print(n // 10)\n    return n // 10\n    '''\n    for i in range(n) :\n        print(n % 10)\n        print(n // 10)\n        return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = n\n    first = 0\n    while num > 0 :\n        first = num%10\n        num = num//10\n    return first\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n <= 1:\n        return n\n    if n % 10 == 0:\n        return 0\n    if n % 10 == 9:\n        return 9\n    else:\n        return first_Digit(n/10)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    return n//10 % 10\n    \ndef third_Digit(n) :  \n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    return n//100 % 10\n    \ndef fourth_Digit(n) :  \n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    return n//1000 % 10\n    \ndef fifth_Digit(n) :  \n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    return n//10000 % 10\n    \ndef sixth_Digit(n) :  \n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    return n//100000 % 10\n    \ndef seventh_Digit(n) :  \n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    return n//1000000 % 10\n    \ndef eighth_Digit(n) :  \n    '''\n    Write a python function to find the eighth digit of a given number.\n    '''\n    return n//10000000 % 10\n    \ndef ninth_Digit(n) :  \n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    return n//100000000 % 10\n    \ndef tenth_Digit(n) :  \n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    return n//100000000000 % 10\n    \ndef eleventh_Digit(n) :  \n    '''\n    Write a python function to find the eleventh digit of a given number.\n    '''\n    return n//1000000000000 % 10\n    \ndef twelfth_Digit(n) :  \n    '''\n    Write a python function to find the twelfth digit of a given number.\n    '''\n    return n//10000000000000 % 10\n    \ndef final_Digit(n) :  \n    '''\n    Write a python function to find the final digit of a given number.\n    '''\n    return n%10\n    \ndef sum_all_digits(n) :  \n    '''\n    Write a python function to get the sum of all digits of a given number.\n    '''\n    sum_digits = 0\n    while n>0 :  \n        sum_digits += n %10\n        n = n//10\n    return sum_digits\n    \ndef flip_digits(n) :  \n    '''\n    Write a python function to get the nth-digit after flip.\n    '''\n    return n%10\n    \ndef reverse_digits(n) :  \n    '''\n    Write a python function to get the nth-digit after reverse.\n    '''\n    return n%10\n    \ndef rotate_digits(n) :  \n    '''\n    Write a python function to get the nth-digit after rotate.\n    '''\n    return n%10\n    \ndef convert_digits(n) :  \n    '''\n    Write a python function to get the nth-digit after convert.\n    '''\n    return n%10\n    \ndef is_odd(n) :  \n    '''\n    Write a python function to check if a given number is odd.\n    '''\n    return n%10 > 2\n    \ndef is_even(n) :  \n    '''\n    Write a python function to check if a given number is even.\n    '''\n    return n%10 < 2\n    \ndef is_perfect(n) :  \n    '''\n    Write a python function to check if a given number is perfect.\n    '''\n    return n%10 == 10\n    \ndef is_prime(n) :  \n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    return n%10 == 2\n    \ndef is_prime2(n) :  \n    '''\n    Write a python function to check if a given number is prime.\n    '''\n    if n < 2 :  \n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2) :  \n        if n % i == 0 :  \n            return False\n    return Tru"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #def check_digits(n):\n    if n>=10:\n        return n % 10\n    else:\n        return \"BAD\"\n    #print(check_digits(n))\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if(list[i] % 2 == 0):\n            odd.append(list[i])\n    return odd\n        \ndef OnlyOdd(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if(list[i] % 2!= 0):\n            odd.append(list[i])\n    return odd\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    a=[]\n    for i in list:\n        if i%2!=0:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(i) for i in list if i%2==1]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if(list[i] % 2 == 0):\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # write your code here\n    \n    odds = list[::2]\n    return odds\n    \ndef Merge(list): \n    '''\n    Write a python function which takes a list of integers and returns a list with the odd integers in it.\n    '''\n    # write your code here\n    merged = []\n    odds = []\n    for i in list:\n        if i % 2 == 0:\n            merged.append(i)\n    for i in merged:\n        odds.append(i)\n    return odds\n    \ndef Check(list): \n    '''\n    Write a python function which takes a list of integers and returns True if the list contains only positive integers and False otherwise.\n    '''\n    # write your code here\n    for i in list:\n        if i > 0:\n            return False\n    return True\n    \ndef PrintList(list): \n    '''\n    Write a python function which takes a list and prints the list after removing the duplicates from it.\n    '''\n    # write your code here\n    list.sort()\n    num_list = []\n    for i in list:\n        num_list.append(i)\n    while len(num_list) > 0:\n        num_list.remove(num_list[0])\n    for i in num_list:\n        print(i, end=\" \")\n    print()\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    result = 0\n    for n in range(1, n+1) :\n        result += n**3\n    \n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_n = 1\n    for i in range(n) :\n        sum_cubes += i**3\n        sum_n += i\n    return sum_cubes - sum_n\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n = 0\n    for i in range(1, n + 1) :\n        sum_n += i ** 3\n    return sum_n - sum_n ** 3\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1) : \n        total = total + (i**3)\n    return total\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    import math\n    \n    def factorial(n) :\n        \n        if n==0:\n            return 1\n        elif n==1:\n            return n\n        else :\n            return n*factorial(n-1)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    import numpy as np\n    cubes = [0 for x in range(n+1)]\n    nums = [0 for x in range(n+1)]\n    nums[0] = 1\n    cubes[0] = 1\n    for i in range(1, n+1):\n        cubes[i] = cubes[i-1] * cubes[i]\n        nums[i] = nums[i-1] + nums[i-1] * cubes[i]\n    return sum(nums[2:])\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = 0\n    for i in range(1, n+1) :\n        cubes_sum += i ** 3\n    return cubes_sum - sum(range(1, n+1))\n    \ndef addition(n) :\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1) :\n        sum_of_natural_numbers += i\n    return sum_of_natural_numbers\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        return n**3 - n**2 + difference(n-1)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(N) :\n        if (A[i] ^ N - i) % 2!= 0 :\n            odd += 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) :\n            # if xor of two numbers equals N-j and 1's complement of xor equals 1, then count is one \n            if A[i] & A[j] == A[j] ^ A[i] : \n                count = count + 1 \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = [x for x in A if x!=0]\n    count = 0\n    for i in range(len(A)-1) :\n        for j in range(i+1,len(A)) :\n            if A[i]==A[j] :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-2) :\n        if A[i] == A[i+1] :\n            if A[i] == A[i+2] :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd=0\n    for i in range(N):\n        if A[i]&1!= 0:\n            odd+=1\n    return odd\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    even=0\n    for i in range(N):\n        if A[i]&1 == 0:\n            even+=1\n    return even\n    \ndef main() : \n    N=20\n    A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(\"Number of pairs where XOR is odd:\",find_Odd_Pair(A,N))\n    print(\"Number of pairs where XOR is even:\",find_Even_Pair(A,N))\n    \nmain()"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(1,N) : \n        if A[i]^A[i-1]!= 1 :\n            count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs=0\n    for i in range(0,N):\n        if (A[i]&1)==1:\n            pairs+=1\n    return pairs\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    pairs=0\n    for i in range(0,N):\n        if (A[i]&1)==0:\n            pairs+=1\n    return pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Step 1: find the xor value of the 1st element and check if it is odd\n    xor = (A[0] ^ A[1])\n    if xor % 2 == 0:\n        # Step 2: find the xor of the 2nd element and check if it is odd\n        xor = (A[0] ^ A[2])\n        if xor % 2 == 0:\n            # Step 3: find the xor of the 3rd element and check if it is odd\n            xor = (A[0] ^ A[3])\n            if xor % 2 == 0:\n                return True\n    return False\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor = 0\n    for i in range(0,N):\n        xor ^= A[i]\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # find the odd number\n    odd = 0\n    for i in range(N) : \n        if A[i] % 2!= 0 : \n            odd += 1\n    # return the number of pairs\n    return odd\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    # find the even number\n    even = 0\n    for i in range(N) : \n        if A[i] % 2 == 0 : \n            even += 1\n    # return the number of pairs\n    return even\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        print(string.swapcase())\n    else:\n        print(string.capitalize())\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(s.lower() if s.lower()!= s.upper() else s.upper() for s in string)"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char =='':\n            char = '~'\n        new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    return string.title()\n    \ndef toggle_digit(num):\n    '''\n    Write a function to toggle the case of all digits in a string.\n    '''\n    num = str(num)\n    return num[::-1]\n    \ndef print_cat(cat):\n    '''\n    Write a function to print the title, head, and body of a cat.\n    '''\n    print(\"\\n\", cat, \":\")\n    print(cat.title())\n    print(cat.head())\n    print(cat.body())\n    \ndef print_animal(animal):\n    '''\n    Write a function to print the title, head, and body of an animal.\n    '''\n    print(\"\\n\", animal, \":\")\n    print(animal.title())\n    print(animal.head())\n    print(animal.body())\n    \ndef print_item(item):\n    '''\n    Write a function to print the title, head, and body of an item.\n    '''\n    print(\"\\n\", item, \":\")\n    print(item.title())\n    print(item.head())\n    print(item.body())\n    \ndef print_animal_and_item(animal, item):\n    '''\n    Write a function to print the title, head, and body of a cat and an animal.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title())\n    print(animal.head() + \" and \" + item.head())\n    print(animal.body() + \" and \" + item.body())\n    \ndef print_head_and_body(animal, item):\n    '''\n    Write a function to print the title, head, and body of an animal.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title())\n    print(animal.head() + \" and \" + item.head())\n    print(animal.body() + \" and \" + item.body())\n    \ndef print_all(text, *items):\n    '''\n    Write a function to print all the items in a list.\n    '''\n    print(text)\n    if len(items) > 0:\n        for item in items:\n            print(item)\n            \ndef print_animal_and_item_and_head(animal, item, head):\n    '''\n    Write a function to print the title, head, and body of an animal and an item.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title() + \" and \" + head)\n    print(animal.head() + \" and \" + item.head() + \" and \" + head)\n    print(animal.body() + \" and \" + item.body() + \" and \" + head)\n    \ndef print_animal_and_item_and_body(animal, item, body):\n    '''\n    Write a function to print the title, head, and body of an animal and an item.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title() + \" and \" + body)\n    print(animal.head() + \" and \" + item.head() + \" and \" + body)\n    print(animal.body() + \" and \" + item.body() + \" and \" + body)\n    \ndef print_item_and_animal(item, animal):\n    '''\n    Write a function to print the title, head, and body of an item and an animal.\n    '''\n    print(\"\\n\", item, \" and \", animal, \":\")\n    print(item.title() + \" and \" + animal.title())\n    print(item.head() + \" and \" + animal.head())\n    print(item.body() + \" and \" + animal.body())\n    \ndef print_item_and_animal_and_body(item, animal, body):\n    '''\n    Write a function to print the title, head, and body of an item and an animal.\n    '''\n    print(\"\\n\", item, \" and \", animal, \":\")\n    print(item.title() + \" and \" + animal.title() + \" and \" + body)\n    print(item.head() + \" and \" + animal.head() + \" and \" + body)\n    print(item.body() + \" and \" + animal.body() + \" and \" + body)\n    \ndef print_all_and_animal_and_item(text, *items):\n    '''\n    Write a function to print all the items in a list and all the items and their title.\n    '''\n    print(text)\n    if len(items) > 0:\n        for item in items:\n            print(item)\n            print(item.title())\n            print_animal_and_item_and_head(item)\n            print_animal_and_item_and_body(item)\n            print_item_and_animal(item, item.animal)\n            print_item_and_animal_and_body(item, item.animal, item.body)\n            \ndef print_animal_and_item_and_body_and_head(animal, item, body, head):\n    '''\n    Write a function to print the title, head, and body of an animal and an item.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title() + \" and \" + body)\n    print(animal.head() + \" and \" + item.head() + \" and \" + body)\n    print(animal.body() + \" and \" + item.body() + \" and \" + body)\n    print(animal.title() + \" and \" + head)\n    print(animal.head() + \" and \" + head)\n    print(animal.body() + \" and \" + head)\n    \ndef print_animal_and_item_and_body_and_head(animal, item, body, head):\n    '''\n    Write a function to print the title, head, and body of an animal and an item.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title() + \" and \" + body)\n    print(animal.head() + \" and \" + item.head() + \" and \" + body)\n    print(animal.body() + \" and \" + item.body() + \" and \" + body)\n    print(animal.title() + \" and \" + head)\n    print(animal.head() + \" and \" + head)\n    print(animal.body() + \" and \" + head)\n    \ndef print_animal_and_item_and_head_and_body(animal, item, head, body):\n    '''\n    Write a function to print the title, head, and body of an animal and an item.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title() + \" and \" + head)\n    print(animal.head() + \" and \" + item.head() + \" and \" + head)\n    print(animal.body() + \" and \" + item.body() + \" and \" + body)\n    print(animal.title() + \" and \" + head)\n    print(animal.head() + \" and \" + head)\n    print(animal.body() + \" and \" + head)\n    \ndef print_animal_and_item_and_body_and_head(animal, item, body, head):\n    '''\n    Write a function to print the title, head, and body of an animal and an item.\n    '''\n    print(\"\\n\", animal, \" and \", item, \":\")\n    print(animal.title() + \" and \" + item.title() + \" and \" + body)\n    print(animal.head() + \" and \" + item.head() + \" and \" + body)\n    print(animal.body() + \" and \" + item.body() + \" and \" + body)\n    print(animal.title() + \" and \" + head)\n    print(animal.head() + \" and "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # For each char in the string\n    for char in string:\n        # If the char is uppercase or lowercase\n        if char.isupper() or char.islower():\n            # If the char is uppercase\n            if char.isupper():\n                # Toggle the first char of the string\n                string = string.replace(char, chr(ord(char) + 1))\n            # If the char is lowercase\n            elif char.islower():\n                # Toggle the first char of the string\n                string = string.replace(char, chr(ord(char) - 1))\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for c in string:\n        if c.isupper():\n            c = chr(ord(c)+1)\n        else:\n            c = chr(ord(c)-1)\n        print(c, end=\"\")\n    print()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # your code here\n    if string.isupper() == True:\n        string = string.lower()\n    else:\n        string = string.upper()\n    return string\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.upper() == string:\n        string = string.lower()\n    return string\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    import math\n    \n    d1 = math.floor(math.log(n1,10))\n    d2 = math.floor(math.log(n2,10))\n    \n    diff = 10**(d1+d2) - 10**d1 - 10**d2\n    \n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0}\n    \n    for d1 in n1:\n        if d[d1] == 0:\n            d[d1] = 1\n            d['0'] += 1\n        elif d[d1] == 1:\n            d[d1] = 2\n            d['1'] += 1\n        elif d[d1] == 2:\n            d[d1] = 3\n            d['2'] += 1\n        elif d[d1] == 3:\n            d[d1] = 4\n            d['3'] += 1\n        elif d[d1] == 4:\n            d[d1] = 5\n            d['4'] += 1\n        elif d[d1] == 5:\n            d[d1] = 6\n            d['5'] += 1\n        elif d[d1] == 6:\n            d[d1] = 7\n            d['6'] += 1\n        elif d[d1] == 7:\n            d[d1] = 8\n            d['7'] += 1\n        elif d[d1] == 8:\n            d[d1] = 9\n            d['8'] += 1\n        else:\n            d['0'] += 1\n            d['1'] += 1\n            d['2'] += 1\n            d['3'] += 1\n            d['4'] += 1\n            d['5'] += 1\n            d['6'] += 1\n            d['7'] += 1\n            d['8'] += 1\n            d['9'] += 1\n    \n    for d2 in n2:\n        if d[d2] == 0:\n            d[d2] = 1\n            d['0'] += 1\n        elif d[d2] == 1:\n            d[d2] = 2\n            d['1'] += 1\n        elif d[d2] == 2:\n            d[d2] = 3\n            d['2'] += 1\n        elif d[d2] == 3:\n            d[d2] = 4\n            d['3'] += 1\n        elif d[d2] == 4:\n            d[d2] = 5\n            d['4'] += 1\n        elif d[d2] == 5:\n            d[d2] = 6\n            d['5'] += 1\n        elif d[d2] == 6:\n            d[d2] = 7\n            d['6'] += 1\n        elif d[d2] == 7:\n            d[d2] = 8\n            d['7'] += 1\n        elif d[d2] == 8:\n            d[d2] = 9\n            d['8'] += 1\n        else:\n            d['0'] += 1\n            d['1'] += 1\n            d['2'] += 1\n            d['3'] += 1\n            d['4'] += 1\n            d['5'] += 1\n            d['6'] += 1\n            d['7'] += 1\n            d['8'] += 1\n            d['9'] += 1\n    \n    d2_dist = 0\n    for d2 in n2:\n        d2_dist += d[d2]\n    return d2_dist\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diffs = {}\n    for digit1, digit2 in zip(n1, n2):\n        if digit1 < 10:\n            digit1 = \"0\" + str(digit1)\n        if digit2 < 10:\n            digit2 = \"0\" + str(digit2)\n        diff = abs(digit1 - digit2)\n        diffs[digit1] = diff\n        diffs[digit2] = diff\n    return sum(diffs.values())\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(0, len(str(n1))):\n        sum += abs(ord(n1[i]) - ord(n2[i]))\n    return sum\n    \ndef sub_string_distance_nums(str1, str2):\n    '''\n    Find the difference between two strings.\n    '''\n    return digit_distance_nums(str1, str2) - digit_distance_nums(str2, str1)\n    \ndef sub_string_ratio(str1, str2):\n    '''\n    Find the ratio between the difference between two strings.\n    '''\n    return (digit_distance_nums(str1, str2))/len(str1)\n    \ndef get_string_distances(str1, str2):\n    '''\n    Find the differences between two strings.\n    '''\n    return digit_distance_nums(str1, str2) - digit_distance_nums(str2, str1)\n    \ndef get_string_ratios(str1, str2):\n    '''\n    Find the ratios between the differences between two strings.\n    '''\n    return (digit_distance_nums(str1, str2))/len(str1)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    dig1 = sum([int(i) for i in str(n1)])\n    dig2 = sum([int(i) for i in str(n2)])\n    diff = (dig1 - dig2) % 10\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #TODO: Fill in this function\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # first get the sum of the digits\n    sum = 0\n    for num in str(n1):\n        sum += int(num) - int(num)\n    # now find the difference\n    return abs(sum - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(n1)\n    n2 = abs(n2)\n    return sum([int(num) - int(d) for (num, d) in zip(str(n1), str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #Base cases:\n    #If the number passed in is less than the number in the list, the digit is in the list.\n    #If the number passed in is greater than the number in the list, the digit is in the list, and so on.\n    #But if the number passed in is greater than the number in the list, there are two numbers that are in the list, and the numbers are not in the list.\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    l = len(str(n1))\n    return sum(int(x) - int(y) for x, y in zip(str(n2), str(n1))) % (10 ** l)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    for i in range(0, size):\n        sum += a[i]\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size):\n        max_sum += a[i]\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    index = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1\n    sub_sum = 0\n    for i in range(size):\n        sub_sum = max(sub_sum, a[i])\n        max_sum = max(max_sum, sub_sum)\n        if sub_sum == 0:\n            break\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[0]\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Create empty list\n    res = []\n    n = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # if a is empty return 0\n    if size == 0:\n        return 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    if size < 1 or a == []:\n        return 0\n    if size == 2:\n        return max(a[0], a[1])\n    if size == 3:\n        return max(max_sub_array_sum(a[0], 0), max_sub_array_sum(a[1], 1), max_sub_array_sum(a[2], 2))\n    maximum = -sys.maxsize\n    for i in range(size):\n        maximum = max(maximum, max_sub_array_sum(a[0:i+1], i+1))\n        maximum = max(maximum, max_sub_array_sum(a[i+1:size], size-i-1))\n    return maximum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    max_sub_array_sum = a[0]\n    for i in range(1, size):\n        max_sub_array_sum = max(max_sub_array_sum + a[i], a[i])\n    return max_sub_array_sum\n    \n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    l, r, d = 0, 0, {0:0}\n    sum = 0\n    s = 0\n    n = size\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    t1 = []\n    t2 = []\n    for x in test_tup1:\n        t1.append(x)\n    for y in test_tup2:\n        t2.append(y)\n    return sorted(t1 + t2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = []\n    if len(test_tup1) > 0 and len(test_tup2) > 0:\n        for item in test_tup1:\n            for item2 in test_tup2:\n                if item < item2:\n                    result.append(item)\n                else:\n                    result.append(item2)\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # write your code here\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            test_tup1[i] = test_tup2[test_tup1[i]]\n        else:\n            test_tup1[i] = -1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    output_tuple = ()\n    for index, val in enumerate(test_tup1):\n        if val not in test_tup2:\n            output_tuple += (val,)\n    return output_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # To compare the tuple1 and tuple2\n    if type(test_tup1) == tuple:\n        if len(test_tup1)!= len(test_tup2):\n            raise ValueError(\"Both tuples must have the same length\")\n        else:\n            result = []\n            if len(test_tup1) == 0:\n                for i in test_tup2:\n                    result.append(i)\n            else:\n                for i in test_tup1:\n                    for j in test_tup2:\n                        if i == j:\n                            result.append(j)\n            return result\n    elif type(test_tup1) == set:\n        if len(test_tup1)!= len(test_tup2):\n            raise ValueError(\"Both tuples must have the same length\")\n        else:\n            result = []\n            if len(test_tup1) == 0:\n                for i in test_tup2:\n                    result.append(i)\n            else:\n                for i in test_tup1:\n                    for j in test_tup2:\n                        if i == j:\n                            result.append(j)\n            return result\n    elif type(test_tup1) == list:\n        if len(test_tup1)!= len(test_tup2):\n            raise ValueError(\"Both tuples must have the same length\")\n        else:\n            result = []\n            if len(test_tup1) == 0:\n                for i in test_tup2:\n                    result.append(i)\n            else:\n                for i in test_tup1:\n                    for j in test_tup2:\n                        if i == j:\n                            result.append(j)\n            return result\n    else:\n        raise TypeError(\"Either tuple or set must be given\")\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1+test_tup2\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1+test_tup2\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the difference of the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1+test_tup2\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef add_elements(test_tup1, test_tup2):\n    '''\n    Write a function to add the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef subtract_elements(test_tup1, test_tup2):\n    '''\n    Write a function to add the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function to add the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef divide_elements(test_tup1, test_tup2):\n    '''\n    Write a function to add the elements of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef find_maximum(test_tup1, test_tup2):\n    '''\n    Write a function to find the maximum of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1+test_tup2\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef find_minimum(test_tup1, test_tup2):\n    '''\n    Write a function to find the minimum of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1+test_tup2\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef find_sum(test_tup1, test_tup2):\n    '''\n    Write a function to find the sum of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1+test_tup2\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef find_product(test_tup1, test_tup2):\n    '''\n    Write a function to find the product of two given tuples and output them in sorted order.\n    '''\n    temp_tup1 = []\n    temp_tup2 = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return test_tup1+test_tup2\n    \n    for x in test_tup1:\n        temp_tup1.append(x)\n    \n    for y in test_tup2:\n        temp_tup2.append(y)\n    \n    temp_tup1.extend(temp_tup2)\n    \n    return sorted(temp_tup1)\n    \n    \ndef fibonacci(num):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num-1) + fibonacci(num-2)\n    \n    \ndef find_second_greatest(test_tup1, test_tup2):\n    '''\n    Write a function to find the second greatest of two give"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Sort tuples from smallest to biggest\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    \n    # Get length of both\n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n    \n    # Initialize variable to store count\n    count_tup1 = 0\n    count_tup2 = 0\n    \n    # Initialize empty list\n    result = []\n    \n    # Loop through every element of two tuples\n    for i in range(len_tup1):\n        \n        # If the first element of two tuples is less than the second one,\n        # then move the second element of the second tuple to the end of the list\n        if test_tup1[i] < test_tup2[i]:\n            result.append(test_tup1[i])\n            count_tup1 += 1\n        \n        # If the first element of two tuples is greater than the second one,\n        # then move the second element of the second tuple to the end of the list\n        else:\n            result.append(test_tup2[i])\n            count_tup2 += 1\n    \n    # Return tuple of sorted elements\n    return sorted(result)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return tuple(sorted(test_tup1))\n    else:\n        return tuple(sorted(test_tup2))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    elements = set(test_tup1) | set(test_tup2)\n    return sorted(elements)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(test_tup1+test_tup2))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > result:\n            result = len(lst[i])\n    return result\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    lst_len = len(lst)\n    for i in range(lst_len):\n        if(len(lst[i]) > count):\n            count = len(lst[i])\n    return count\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    Max_Len = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if(lst[i] > lst[j]):\n                j += 1\n                break\n            j += 1\n        if(j > Max_Len):\n            Max_Len = j\n    return Max_Len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(map(len, lst))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    i = 0\n    j = 0\n    maxLen = 0\n    \n    while j < len(lst):\n        if lst[i] == lst[j]:\n            j += 1\n            i += 1\n        else:\n            if len(lst[i]) > len(lst[j]):\n                j += 1\n            elif len(lst[i]) == len(lst[j]):\n                i += 1\n            else:\n                j += 1\n            maxLen = max(len(lst[i]), len(lst[j]))\n            \n    return maxLen\n    \ndef main():\n    lst = [1, 2, 3, 1, 4, 5, 1, 6, 7, 8, 9, 1, 2, 4, 5, 1, 3, 4, 2, 7, 4, 5, 3, 6, 1, 2, 7, 1, 1, 8, 9, 1, 6, 7, 4, 2, 1]\n    maxLen = Find_Max_Length(lst)\n    print(\"Length of the longest sublists in given list is\", maxLen)\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] + lst[j] > max_length:\n                max_length = lst[i] + lst[j]\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # get a dictionary of the frequencies\n    freq = {}\n    for i in lst:\n        freq[i] = lst.count(i)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(map(len,lst))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = 0\n    curr_length = 0\n    temp_list = []\n    for i in lst:\n        if(i == 0):\n            temp_list.append(i)\n        else:\n            curr_length += 1\n        if(maxlen < curr_length):\n            maxlen = curr_length\n            temp_list = []\n        if(curr_length > maxlen):\n            maxlen = curr_length\n            temp_list = []\n        curr_length = 0\n    return maxlen\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst):\n            if lst[i] < lst[j]:\n                j += 1\n            else:\n                j = i\n            i = j\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n        j = i - 1\n        while j > -1 and lst[j] < lst[i]:\n            j -= 1\n        i = j + 1\n    return max_len\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # special quote characters\n    dashes = re.compile(r'(\\*){1,}')\n    squotes = re.compile(r\"`\\*`\")\n    # case insensitive\n    case_insensitive = re.compile(r'(\\*\\*)')\n    # compile all text\n    all_text = re.findall(dashes,text)\n    all_squotes = re.findall(squotes,text)\n    all_case_insensitive = re.findall(case_insensitive,text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value_list = []\n    result_list = []\n    for i in text:\n        if i == '\"':\n            result_list.append(result_list)\n            result_list = []\n        else:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'([^\\s]+)[\\s]*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(.*?)\\s*(."
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    string = text\n    return re.findall(r'(\\'.*?\\')', string)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\w*\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r\"\\b(?:\\\"|\\'|,|:)\\b\", text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\u201c', '\"')\n    text = text.replace('\u201d', '\"')\n    values = re.findall(r'[a-zA-Z]', text)\n    values = [value.replace('\"', \"\") for value in values]\n    values = [value.replace(',', '.') for value in values]\n    values = [value.replace('(', '') for value in values]\n    values = [value.replace(')', '') for value in values]\n    values = [value.replace('!', '') for value in values]\n    values = [value.replace('?', '') for value in values]\n    values = [value.replace('\"', '') for value in values]\n    values = [value.replace('.', '') for value in values]\n    values = [value.replace('\\n', '') for value in values]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'(?<=\\\")(.*?)(?=\\\")', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = text.split('\"')\n    return values[1:-1]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r\"(\\?)([^?]*)\")\n    m = regex.match(text)\n    if m is None:\n        return \"\"\n    else:\n        return m.group(2)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if(arr[i]!= arr[j]):\n                counter = counter + 1\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Dictionary for number of pairs\n    dict={}\n    for i in arr:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    #Count the number of pairs\n    return len(dict)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    return arr.count(min(arr))\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    \n    #count how many possible pairs\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]!= arr[j]):\n                return arr[i]-arr[j]\n    return 0\ndef count_EqualPairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are equal.\n    '''\n    arr.sort()\n    \n    #count how many possible pairs\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]!= arr[j]):\n                return arr[i]-arr[j]\n    return 0"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) == 1: \n        return 1\n    return int(sum(arr)/2) \n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if (n==0 or n==1):\n        return 1\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    output=0\n    if len(arr)==1:\n        output=1\n    else:\n        output=0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if i!=j:\n                    output+=arr[i]==arr[j] and (arr[i]!=arr[j])\n    return output\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Fill in the regular expression\n    # \n    # Compute number of pairs\n    # \n    # Return number of pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j] and i!=j:\n                count+=1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = word\n    return s.split(' ')"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word[:0].split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word[0].split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # if there are only spaces in the input, then return the list of words as a list\n    return word.split() \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    word_l = list(word)\n    word_l_len = len(word_l)\n    word_l_count = word_l_len\n    idx = 0\n    for i in range(word_l_len):\n        if word_l[i] =='':\n            word_l[idx] = ''\n            word_l_len -= 1\n            word_l_count -= 1\n            idx += 1\n        elif word_l[i] == '\\n':\n            word_l[idx] = ''\n            word_l_len -= 1\n            word_l_count -= 1\n            idx += 1\n        else:\n            word_l[idx] = word_l[i]\n            word_l_count -= 1\n            idx += 1\n    return word_l\n    \ndef normalize(word):\n    '''\n    Write a python function to normalize a word.\n    '''\n    word = word.lower()\n    word = split(word)\n    word =''.join(word)\n    word_l = word.split(' ')\n    word =''.join(word_l)\n    return word\n    \ndef word_length(word):\n    '''\n    Write a python function to count the number of characters in a word.\n    '''\n    word = normalize(word)\n    word_len = len(word)\n    return word_len\n    \ndef longest_word(words):\n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    longest = 0\n    for word in words:\n        longest = longest if word[-1] > longest[-1] else word\n    return longest\n    \ndef word_count(words):\n    '''\n    Write a python function to find the number of words in a list of words.\n    '''\n    count = 0\n    for word in words:\n        count = count + 1\n    return count\n    \ndef word_frequency(words):\n    '''\n    Write a python function to find the frequency of the words in a list of words.\n    '''\n    dic = {}\n    for word in words:\n        if word in dic:\n            dic[word] += 1\n        else:\n            dic[word] = 1\n    return dic\n    \ndef word_sort(words):\n    '''\n    Write a python function to sort the words in a list of words.\n    '''\n    dic = word_frequency(words)\n    for i in dic:\n        for j in range(dic[i]):\n            words.remove(i)\n    return words\n    \ndef word_search(words):\n    '''\n    Write a python function to search the words in a list of words.\n    '''\n    dic = word_frequency(words)\n    for i in dic:\n        if i in words:\n            words.remove(i)\n    return words\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    list_words = [] \n    for i in range(0, len(word)):\n        list_words.append(word[i])\n    return list_words\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    def check_digits(n):\n        for i in str(n):\n            if int(i) > 9:\n                return False\n        return True\n    if n < 0:\n        return check_digits(n)\n    return sum(map(int,str(n)))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        n = n // 10\n        sum += n % 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = str(n)\n    i = 0\n    if(len(n) <= 1):\n        return int(n)\n    while(i < len(n)):\n        if(n[i]!= '0'):\n            break\n        i = i + 1\n    return int(n[0:len(n)-i])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum = sum + (n % 10)\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n:\n        remainder = n % 10\n        total += remainder\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not n:\n        return 0\n    \n    if n < 10:\n        return n\n    \n    # Remove the leading 0\n    new_number = str(n)[1:]\n    \n    # Add the leading 0\n    if new_number[-1] == '0':\n        new_number = new_number[:-1]\n    \n    # Sum the digits of the number\n    return sum_digits(int(new_number))"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while(n!= 0):\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(digit) for digit in str(n)])\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if (list1 == sorted_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    list2=[]\n    for i in range(len(list1)):\n        list2.append(list1[i])\n    \n    if list2==sorted(list2):\n        print(\"list1 is sorted.\")\n    else:\n        print(\"list1 is not sorted.\")\n    \n    return None\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)>1:\n        for i in range(0,len(list1)-1):\n            if list1[i]<list1[i+1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 is None:\n        return False\n    elif list1 == []:\n        return True\n    else:\n        return isinstance(list1,list) and list1[0] < list1[-1]\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 0:\n        return False\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n        \n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n        \nprint('Input list1 = ', input_list1)\nprint('Input list2 = ', input_list2)\nprint('Input sort = ', sort_list(input_list1))\nprint('Sorted list1 = ', sorted(input_list1))\nprint('Sorted list2 = ', sorted(input_list2))\nprint('Sorted sort = ', issort_list(input_list1))\nprint('Sorted sort = ', issort_list(input_list2))"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    print('list1 = {}'.format(list1))\n    count = 0\n    for i in range(0, len(list1)):\n        print(list1[i])\n        if i == len(list1) - 1:\n            break\n        else:\n            if list1[i] > list1[i+1]:\n                count += 1\n    if count == 0:\n        return True\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    length = len(list1)\n    if length == 0:\n        return True\n    else:\n        # Check the front element\n        if list1[0] > list1[length - 1]:\n            return False\n        else:\n            return issort_list(list1[1:length])\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    return dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_of_dictionaries = []\n    for i in range(length):\n        dictionary = {}\n        dictionary['name'] = ''\n        dictionary['price'] = 0\n        dictionary['cost'] = 0\n        dictionary['quantity'] = 0\n        dictionary['bag'] = ''\n        dictionary['bag_quantity'] = 0\n        list_of_dictionaries.append(dictionary)\n    return list_of_dictionaries\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(0,length):\n        empty_list.append({})\n    return empty_list\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for _ in range(0, length):\n        empty_dicts.append(dict())\n    return empty_dicts\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Write your code here\n    # Create a list with the size of N and add a value to the list\n    # Return the list\n    # Create a function to generate and print all the required dictionaries\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code here\n    list1.sort(reverse=False)\n    # Write an if condition to see if the sublists are not equal.\n    if len(list1) == 1:\n        return list1\n    # If the sublists are equal, you can assume that the sublists are sorted by the indexes of the sublists.\n    # Otherwise, you can assume the sublists are not sorted by the indexes of the sublists.\n    else:\n        sublist_1 = []\n        sublist_2 = []\n        for i in range(len(list1[0])):\n            sublist_1.append([])\n            for j in range(len(list1)):\n                sublist_1[i].append(list1[j][i])\n        # If the first sublist is sorted by index, add it to the sublist 1.\n        if sublist_1[0] == sublist_1[1]:\n            sublist_1[0].append(list1[0][0])\n            sublist_1.append([])\n            sublist_1[0].append(list1[1][0])\n        else:\n            for i in range(len(sublist_1)):\n                if sublist_1[i][0] > sublist_1[i][1]:\n                    sublist_1[i].append(list1[0][i])\n                    sublist_1[i].append(list1[1][i])\n                else:\n                    sublist_1[i].append(list1[1][i])\n                    sublist_1[i].append(list1[0][i])\n        # If the sublists are not equal, you can assume they are sorted by the index of the sublists.\n        # Otherwise, you can assume they are not sorted by the index of the sublists.\n        else:\n            sublist_1[0] = []\n            sublist_1[0].append(list1[0][0])\n            sublist_1[0].append(list1[1][0])\n            sublist_1[1] = []\n            sublist_1[1].append(list1[0][0])\n            sublist_1[1].append(list1[1][0])\n        # Insert the sublists in the sorted sublists.\n        for i in range(len(sublist_1)):\n            for j in range(len(sublist_1[0])):\n                list1[i].insert(j,sublist_1[i][j])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    final_sublists = []\n    for sublist in list1:\n        temp_sublist = sublist[:]\n        temp_sublist.sort()\n        final_sublists.append(temp_sublist)\n    return final_sublists\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[i][j])):\n                list1[i][j][k] = list1[i][j][k].lower()\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(0, len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"Sorting Sublists:\")\n    for sublist in list1:\n        print(sublist)\n        for i in range(len(sublist)):\n            for j in range(len(sublist) - 1):\n                if sublist[j] < sublist[j+1]:\n                    temp = sublist[j]\n                    sublist[j] = sublist[j+1]\n                    sublist[j+1] = temp\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code here\n    return list(map(list, sorted(zip(*list1))))\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create new empty list with the same structure as the original list\n    list2 = []\n    for i in list1:\n        list2.append([j for j in i])\n    \n    # sort the lists\n    for i in range(len(list2)):\n        # reverse the sublist if the list is not in order\n        if i % 2 == 0:\n            for j in range(len(list2[i])):\n                list2[i][j] = list2[i][j].lower()\n        else:\n            for j in range(len(list2[i])):\n                list2[i][j] = list2[i][j].upper()\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # List 1\n    sort_list_1 = []\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Declare empty lists to store the sorted sublists\n    sorted_list = []\n    # Declare empty dictionary to store the counts of each sublist\n    sorted_dict = {}\n    for item in list1:\n        for char in item:\n            if char not in sorted_dict:\n                sorted_dict[char] = 1\n            else:\n                sorted_dict[char] += 1\n    # Iterate through the dict and create a sorted list\n    for key, value in sorted_dict.items():\n        sorted_list.append(key)\n        sorted_dict[key] = value\n    return sorted_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # remove duplicate numbers from a given list\n    # write a python function that will remove duplicate numbers from a given list of list \n    return [int(item) for item in set(nums)]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    #print(nums)\n    nums=nums[0]\n    #print(nums)\n    for i in range(1,len(nums)):\n        if nums[i]==nums[i-1]:\n            continue\n        else:\n            return nums\n    return False\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_list = []\n    for i in nums:\n        if i not in unique_list:\n            unique_list.append(i)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    temp=[]\n    for i in range(len(nums)):\n        temp.append(nums[i])\n    for i in range(len(nums)):\n        temp.remove(nums[i])\n    return temp\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    hash_table = {}\n    for num in nums:\n        if num in hash_table:\n            hash_table[num] += 1\n        else:\n            hash_table[num] = 1\n    return [num for num in nums if hash_table[num] == 1]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) == 0:\n        return []\n    unique = []\n    temp = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n            temp.append(i)\n        else:\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # set of unique elements\n    uniques = set()\n    # create empty lists\n    unique_nums = []\n    # iterate through each element\n    for num in nums:\n        # if element is not in list\n        if num not in uniques:\n            # add element to unique list\n            uniques.add(num)\n            # add element to list\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # TODO: modify this function and use the original function\n    temp = []\n    for num in nums:\n        if num not in temp:\n            temp.append(num)\n    return temp\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #Implement Your Code Here\n    if len(nums) < 2:\n        return nums\n    else:\n        return sorted(set(nums))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(dict.fromkeys(list_data))\n    return(sum(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # loop through the list to find the length of the list\n    for x in range(len(list_data)):\n        # loop through the list to find the length of the list\n        for y in range(len(list_data)):\n            if list_data[x] == list_data[y]:\n                # if the items are the same, find the total number of unique items\n                if list_data[x] == list_data[y]:\n                    list_data[x] = len(list_data)\n                break\n    return list_data\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = []\n    for i in list_data:\n        if i not in unique_data:\n            unique_data.append(i)\n    return len(unique_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 0\n    for item in list_data:\n        product += item\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = []\n    for i in list_data:\n        if i not in unique_data:\n            unique_data.append(i)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_list = []\n    for i in list_data:\n        if i not in product_list:\n            product_list.append(i)\n    return product_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for element in list_data:\n        if element > result:\n            result = element\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    import math\n    \n    for i in range(len(list_data)):\n        list_data[i] = math.factorial(list_data[i])\n        \n    return list_data\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for element in list_data:\n        result = element * result\n    return result\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 0.5 * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*(r**2)*np.pi\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = r * h\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # First, write a function that returns the surface area of a cylinder given its radius r and height h\n    # Remember that in our example, r is the radius and h is the height.\n    # In the result, the argument h should be 0 since r is the radius.\n    # This is because we don't have any height yet.\n    # The result is an int.\n    # So we can convert this result into an float.\n    # Then, we'll create a second variable called surfacearea\n    # Then, we'll add the result of this function to the variable in the result.\n    # Finally, we'll return the result of this function as a float.\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*(r*h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = r*h**2\n    print(\"The surface area of a cylinder with radius %s and height %s is %s.\" % (r,h,area))\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*pi*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*(pi*r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Find the two vertices of the cylinder\n    x0 = r/2\n    y0 = 0\n    x1 = r\n    y1 = h\n    # Calculate the area\n    return (((x0**2)+(y0**2))**0.5)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = r**2 # convert radius to square\n    h = h**2 # convert height to square\n    area = r*h # calculate area\n    return area\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # find the length of B and remove it from B\n    remove_idx = len(B)-1\n    for i in range(len(A)): \n        # if A[i] is not a sublist of B[remove_idx] then it is not a sublist of A[i]\n        if B[remove_idx] not in A[i]:\n            remove_idx -= 1\n            continue\n        break\n    # if A[i] is a sublist of B[remove_idx]\n    # then B is a sublist of A[i] \n    if remove_idx == -1:\n        return False\n    else: \n        return True"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==0:\n        return True\n    if A[0]==B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # return A,B if both are sublists\n    return len(A) == len(B) and all(A[i:i+len(B[0])] == B[0] for i in range(len(A)-len(B[0])))\n    \n    # return A,B if A is sublist of B\n    # return any(A[i:i+len(B[0])] == B[0] for i in range(len(A)-len(B[0])))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B in A:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code here\n    \n    if len(A)!= len(B):\n        return False\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return set(A)==set(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return isSubset(A, B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    count=0\n    if len(A)==len(B):\n        for i in range(len(A)):\n            if A[i]==B[i]:\n                count+=1\n    return count<=1\ndef find_subarray(nums, k): \n    '''\n    Find subarray with size k \n    '''\n    arr=[]\n    for i in range(len(nums)):\n        if is_Sub_Array(nums,k):\n            arr.append(i)\n    return arr \nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    nums=list(map(int,input().split()))\n    arr=find_subarray(nums,k)\n    print(*arr"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==len(B): \n        for i in range(len(A)): \n            if A[i] not in B: \n                return False\n    return True \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    l = [0] * (len(A) + 1)\n    print(l)\n    l[0],l[len(A)],l[len(A)] = A[0],A[0],A[0]\n    for i in range(1,len(A)):\n        l[i] = l[i - 1] + A[i]\n        print(l)\n        print(l[i],l[len(A)])\n        if l[i] == B:\n            print(i,l[i],l[len(A)])\n            return True\n    return False\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    a = n\n    x = a\n    while True:\n        x = (x*x) % 12345\n        a = a - 1\n        if x == 1:\n            break\n    print(x)\n    \n    \ndef main():\n    n = int(input())\n    factorial(n)\n    lastDigitFactorial(n)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    return last_Digit_Factorial(n - 1) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factor = n\n    num = 1\n    while factor > 0: \n        num = num * factor \n        factor -= 1\n    return num\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0: \n        return 0\n    elif n < 0: \n        return -1\n    elif n == 1: \n        return 1\n    else: \n        return last_Digit_Factorial(n-1) \n  \ndef is_Prime(n):\n    '''\n    Return True if n is a prime number.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0 or n==3:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return last_Digit_Factorial(n - 1)\n    \nprint(last_Digit_Factorial(8))\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n - 1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # YOUR CODE HERE\n    # raise NotImplementedError\n    return None\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n == 0):\n        return 0\n    if(n <= 0):\n        return 0\n    while(n > 1):\n        n -= 1\n        if(n % 10 > 1):\n            n = n // 10\n        else:\n            return n\n    return n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n % last_Digit_Factorial(n // 10)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleave_list = []\n    for item1,item2,item3 in zip(list1,list2,list3):\n        interleave_list.append(item1)\n        interleave_list.append(item2)\n        interleave_list.append(item3)\n    return interleave_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    list4.append(list1)\n    list4.append(list2)\n    list4.append(list3)\n    return list4"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    list1.sort()\n    list2.sort()\n    list3.sort()\n    return (list1+list2+list3)\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1+list2,list1+list3,list2+list3]"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    a=[]\n    for i in range(len(list1)):\n        a.append(list1[i]+list2[i]+list3[i])\n    return a\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_of_lists = list1+list2+list3\n    # for items in list_of_lists:\n    #     print(items)\n    # print(list_of_lists)\n    # print(type(list_of_lists))\n    # print(len(list_of_lists))\n    # print(list_of_lists[0][0][0][1])\n    # print(list_of_lists[0][0][1][0])\n    # print(list_of_lists[0][0][1][1])\n    # print(list_of_lists[0][1][0][0])\n    # print(list_of_lists[0][1][1][0])\n    # print(list_of_lists[0][1][1][1])\n    # print(list_of_lists[1][0][0][0])\n    # print(list_of_lists[1][0][1][0])\n    # print(list_of_lists[1][0][1][1])\n    # print(list_of_lists[1][1][0][0])\n    # print(list_of_lists[1][1][1][0])\n    # print(list_of_lists[1][1][1][1])\n    # print(list_of_lists[2][0][0][0])\n    # print(list_of_lists[2][0][1][0])\n    # print(list_of_lists[2][0][1][1])\n    # print(list_of_lists[2][1][0][0])\n    # print(list_of_lists[2][1][1][0])\n    # print(list_of_lists[2][1][1][1])\n    # print(list_of_lists[2][2][0][0])\n    # print(list_of_lists[2][2][1][0])\n    # print(list_of_lists[2][2][1][1])\n    # print(list_of_lists[2][2][1][2])\n    # print(list_of_lists[2][2][2][0])\n    # print(list_of_lists[2][2][2][1])\n    # print(list_of_lists[2][2][2][2])\n    # print(list_of_lists[3][0][0][0])\n    # print(list_of_lists[3][0][1][0])\n    # print(list_of_lists[3][0][1][1])\n    # print(list_of_lists[3][1][0][0])\n    # print(list_of_lists[3][1][1][0])\n    # print(list_of_lists[3][1][1][1])\n    # print(list_of_lists[3][1][1][2])\n    # print(list_of_lists[3][2][0][0])\n    # print(list_of_lists[3][2][1][0])\n    # print(list_of_lists[3][2][1][1])\n    # print(list_of_lists[3][2][1][2])\n    # print(list_of_lists[3][2][2][0])\n    # print(list_of_lists[3][2][2][1])\n    # print(list_of_lists[3][2][2][2])\n    # print(list_of_lists[3][2][2][3])\n    # print(list_of_lists[3][2][2][4])\n    # print(list_of_lists[3][2][2][5])\n    # print(list_of_lists[3][2][2][6])\n    # print(list_of_lists[3][2][2][7])\n    # print(list_of_lists[3][2][2][8])\n    # print(list_of_lists[3][2][2][9])\n    # print(list_of_lists[3][2][2][10])\n    # print(list_of_lists[3][2][2][11])\n    # print(list_of_lists[3][2][2][12])\n    # print(list_of_lists[3][2][2][13])\n    # print(list_of_lists[3][2][2][14])\n    # print(list_of_lists[3][2][2][15])\n    # print(list_of_lists[3][2][2][16])\n    # print(list_of_lists[3][2][2][17])\n    # print(list_of_lists[3][2][2][18])\n    # print(list_of_lists[3][2][2][19])\n    # print(list_of_lists[3][2][2][20])\n    # print(list_of_lists[3][2][2][21])\n    # print(list_of_lists[3][2][2][22])\n    # print(list_of_lists[3][2][2][23])\n    # print(list_of_lists[3][2][2][24])\n    # print(list_of_lists[3][2][2][25])\n    # print(list_of_lists[3][2][2][26])\n    # print(list_of_lists[3][2][2][27])\n    # print(list_of_lists[3][2][2][28])\n    # print(list_of_lists[3][2][2][29])\n    # print(list_of_lists[3][2][2][30])\n    # print(list_of_lists[3][2][2][31])\n    # print(list_of_lists[3][2][2][32])\n    # print(list_of_lists[3][2][2][33])\n    # print(list_of_lists[3][2][2][34])\n    # print(list_of_lists[3][2][2][35])\n    # print(list_of_lists[3][2][2][36])\n    # print(list_of_lists[3][2][2][37])\n    # print(list_of_lists[3][2][2][38])\n    # print(list_of_lists[3][2][2][39])\n    # print(list_of_lists[3][2][2][40])\n    # print(list_of_lists[3][2][2][41])\n    # print(list_of_lists[3][2][2][42])\n    # print(list_of_lists[3][2][2][43])\n    # print(list_of_lists[3][2][2][44])\n    # print(list_of_lists[3][2][2][45])\n    # print(list_of_lists[3][2][2][46])\n    # print(list_of_lists[3][2][2][47])\n    # print(list_of_lists[3][2][2][48])\n    # print(list_of_lists[3][2][2][49])\n    # print(list_of_lists[3][2][2][50])\n    # print(list_of_lists[3][2][2][51])\n    # print(list_of_lists[3][2][2][52])\n    # print(list_of_lists[3][2][2][53])\n    # print(list_of_lists[3][2][2][54])\n    # print(list_of_lists[3][2][2][55])\n    # print(list_of_lists[3][2][2][56])\n    # print(list_of_lists[3][2][2][57])\n    # print(list_of_lists[3][2][2][58])\n    # print(list_of_lists[3][2][2][59])\n    # print(list_of_lists[3][2][2][60])\n    # print(list_of_lists[3][2][2][61])\n    # print(list_of_lists[3][2][2][62])\n    # print(list_of_lists[3][2][2][63])\n    # print(list_of_lists[3][2][2][64])\n    # print(list_of_lists["
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            list4.append(list1[i]+list2[j]+list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    interleaved_list = []\n    \n    #Code here\n    # iterate through the 3 lists\n    # add the corresponding values\n    # interleave lists in the same order\n    \n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            interleaved_list.append(list1[i][j])\n        for k in range(len(list3)):\n            interleaved_list.append(list2[i][k])\n        for l in range(len(list3)):\n            interleaved_list.append(list3[l][i])\n            \n    return(interleaved_list)\n        \n        \n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the pairs\n    lst_1 = list(set(test_tup1[0]) | set(test_tup2[0]))\n    lst_2 = list(set(test_tup1[1]) | set(test_tup2[1]))\n    lst = list(lst_1 + lst_2)\n    \n    return lst\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(0,len(test_tup1)):\n        for j in range(0,len(test_tup2)):\n            if test_tup1[i]!= test_tup2[j]:\n                dissimilar.append(test_tup1[i])\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #create a list with the dissimilar elements\n    lst = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            lst.append(test_tup1[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            test_tup2.append(test_tup1[i])\n    return test_tup2\n    \n    \n    \ndef group_code_by_group(test_tup):\n    '''\n    Write a function to return the group code of the elements in a given tuple.\n    '''\n    \n    \n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)-i-1):\n            if test_tup[j] not in test_tup[j+1:]:\n                test_tup[j], test_tup[j+1] = test_tup[j+1], test_tup[j]\n    return test_tup\n    \n    \ndef count_common_elements(test_tup):\n    '''\n    Write a function to return the number of common elements in a given tuple.\n    '''\n    \n    \n    \n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] in test_tup[j]:\n                test_tup[i], test_tup[j] = test_tup[j], test_tup[i]\n    return test_tup\n    \n    \n    \ndef length_of_longest_word(test_tup):\n    '''\n    Write a function to return the length of the longest word in a given tuple.\n    '''\n    \n    \n    \n    word = set(test_tup)\n    for i in range(len(test_tup)):\n        if len(test_tup[i]) > len(word):\n            word = test_tup[i]\n    return len(word)\n    \n    \n    \ndef percentage(count, total):\n    '''\n    Write a function to return the percentage of the given number of items.\n    '''\n    \n    \n    \n    return round((count/total) * 100, 2)\n    \n    \n    \ndef get_common_elements(test_tup):\n    '''\n    Write a function to return the common elements of two tuples.\n    '''\n    \n    \n    \n    test_tup = tuple(test_tup)\n    common_tup = find_common_elements(test_tup)\n    common_elements = []\n    for i in common_tup:\n        for j in test_tup:\n            if i in j:\n                common_elements.append(i)\n    return common_elements\n    \n    \n    \n    \ndef get_group_code_by_group(test_tup):\n    '''\n    Write a function to return the group code of the elements in a given tuple.\n    '''\n    \n    \n    \n    \n    group_code_by_group = group_code_by_group(test_tup)\n    group_code_by_group = group_code_by_group[0:-1]\n    return group_code_by_group\n    \n    \n    \n    \n    \ndef count_longest_word(test_tup):\n    '''\n    Write a function to return the length of the longest word in a given tuple.\n    '''\n    \n    \n    word = set(test_tup)\n    for i in range(len(test_tup)):\n        if len(test_tup[i]) > len(word):\n            word = test_tup[i]\n    return len(word)\n    \n    \n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a function to return the sum of the digits of a positive integer.\n    '''\n    \n    \n    \n    \n    for i in range(len(n)):\n        if n[i].isdigit():\n            return int(n[i])\n    \n    \n    \n    \n    \ndef prefix_sum_recursive(n, prefix=[]):\n    '''\n    Write a function that calculates the sum of the digits of a positive integer.\n    '''\n    \n    if len(n) == 1:\n        return int(n)\n    \n    \n    \n    if n <= 0:\n        return 0\n    \n    \n    prefix.append(n % 10)\n    n = int(n/10)\n    return prefix_sum_recursive(n, prefix) + prefix_sum_recursive(n-1, prefix)\n    \n    \n    \n    \ndef find_all_combinations(test_tup):\n    '''\n    Write a function that returns the number of all possible permutations of the given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a new set to check\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    # create a empty dictionary to store the answer\n    ans = {}\n    # add the answer from the dictionary to the answer set\n    ans.update(test_set1)\n    ans.update(test_set2)\n    # create a sorted list of the items in the answer set\n    sorted_ans = sorted(ans)\n    # return the sorted list\n    return sorted_ans\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = tuple(sorted(test_tup1))\n    test_tup2 = tuple(sorted(test_tup2))\n    \n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        raise ValueError('Can not find dissimilar elements')\n    \n    if test_tup1 in test_tup2:\n        test_tup2 = test_tup2.remove(test_tup1)\n        \n    test_tup2 = tuple(sorted(test_tup2))\n    \n    dissimilar_list = []\n    \n    for x in test_tup2:\n        if x not in test_tup1:\n            dissimilar_list.append(x)\n    \n    return dissimilar_list\n    \n    "
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for x in test_tup1:\n        if x not in test_tup2:\n            dissimilar_list.append(x)\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = {}\n    for i in range(0, len(test_tup1)):\n        if i not in a.keys():\n            a[i] = test_tup1[i]\n        else:\n            a[i] = test_tup1[i] + ',' + test_tup2[i]\n    return a\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diss_dict = {}\n    for item in test_tup1:\n        if item in test_tup2:\n            diss_dict[item] = diss_dict.get(item, 0) + 1\n    return diss_dict\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            dissimilar_tup.append(test_tup1[i])\n    return dissimilar_tup\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    for i in range(1, len(test_tuple)):\n        if test_tuple[i] % 2 == 0:\n            test_tuple[i], test_tuple[i+1] = test_tuple[i+1], test_tuple[i]\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    even_fnc = lambda tup: tup[::2] \n    even_fnc(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_el(elem): \n        return elem if elem % 2 == 0 else elem*2\n    even_fnc(test_tuple, even_el)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = [] \n    for i in test_tuple: \n        if i % 2 == 0: \n            even_list.append(i)\n    even_fnc(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(*test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # add the first item to the right\n    even_fnc(test_tuple[1], test_tuple[0])\n    # add the remaining items to the left\n    even_fnc(test_tuple[2:], test_tuple[:2])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple((f for f in test_tuple if even_fnc(f)))\n    \ndef sum_odd_even(test_tuple): \n    '''\n    Write a function that returns the sum of all even elements and all odd elements in a tuple.\n    '''\n    return sum(f for f in test_tuple if even_fnc(f)) + sum(f for f in test_tuple if odd_fnc(f))\n    \ndef sum_even_odd(test_tuple): \n    '''\n    Write a function that returns the sum of all even elements and all odd elements in a tuple.\n    '''\n    return sum(f for f in test_tuple if odd_fnc(f)) + sum(f for f in test_tuple if even_fnc(f))\n    \ndef get_odds(test_tuple, odd_fnc): \n    '''\n    Write a function that returns the sum of all odd elements and all even elements in a tuple.\n    '''\n    return sum(f for f in test_tuple if odd_fnc(f)) + sum(f for f in test_tuple if even_fnc(f))\n    \ndef get_evens(test_tuple, odd_fnc): \n    '''\n    Write a function that returns the sum of all even elements and all odd elements in a tuple.\n    '''\n    return sum(f for f in test_tuple if odd_fnc(f)) + sum(f for f in test_tuple if even_fnc(f))\n    \ndef check_evens(test_tuple, odd_fnc): \n    '''\n    Write a function that returns the sum of all even elements and all odd elements in a tuple.\n    '''\n    return sum(f for f in test_tuple if odd_fnc(f)) + sum(f for f in test_tuple if even_fnc(f))\n    \ndef is_even(f): \n    '''\n    Write a function that returns True if a tuple is even, False otherwise.\n    '''\n    return even_fnc(f)\n    \ndef is_odd(f): \n    '''\n    Write a function that returns True if a tuple is odd, False otherwise.\n    '''\n    return odd_fnc(f)\n    \ndef is_all_evens(test_tuple): \n    '''\n    Write a function that returns True if all elements in a tuple are even, False otherwise.\n    '''\n    return sum(f for f in test_tuple if is_even(f)) == test_tuple\n    \ndef is_all_odds(test_tuple): \n    '''\n    Write a function that returns True if all elements in a tuple are odds, False otherwise.\n    '''\n    return sum(f for f in test_tuple if is_odd(f)) == test_tuple\n    \ndef is_all_evens(test_tuple): \n    '''\n    Write a function that returns True if all elements in a tuple are evens, False otherwise.\n    '''\n    return sum(f for f in test_tuple if is_even(f)) == test_tuple\n    \ndef main(): \n    print('------- TESTS -------')\n    print('2.4.2')\n    test_tuple1 = (1, 2, 3, 4, 5)\n    test_tuple2 = ('a', 'b', 'c', 'd', 'e')\n    print('2.4.3')\n    test_tuple3 = (2, 'a', (1, 2, 3, 4, 5))\n    test_tuple4 = (2, 3, 4, 5, 6)\n    print('2.4.4')\n    test_tuple5 = (2, 3, 4, 5, 6)\n    print('2.4.5')\n    test_tuple6 = (2, 3, 4, 5, 6)\n    print('2.4.6')\n    print('------- END -------')\n    \n    print('-------------------')\n    print('2.5.1')\n    print('2.5.1.1')\n    print('2.5.1.2')\n    print('2.5.1.3')\n    print('2.5.1.4')\n    print('2.5.1.5')\n    print('2.5.1.6')\n    print('2.5.1.7')\n    print('2.5.1.8')\n    print('2.5.1.9')\n    print('2.5.1.10')\n    print('2.5.1.11')\n    print('2.5.1.12')\n    print('2.5.1.13')\n    print('2.5.1.14')\n    print('2.5.1.15')\n    print('2.5.1.16')\n    print('2.5.1.17')\n    print('2.5.1.18')\n    print('2.5.1.19')\n    print('2.5.1.20')\n    print('2.5.1.21')\n    print('2.5.1.22')\n    print('2.5.1.23')\n    print('2.5.1.24')\n    print('2.5.1.25')\n    print('2.5.1.26')\n    print('2.5.1.27')\n    print('2.5.1.28')\n    print('2.5.1.29')\n    print('2.5.1.30')\n    print('2.5.1.31')\n    print('2.5.1.32')\n    print('2.5.1.33')\n    print('2.5.1.34')\n    print('2.5.1.35')\n    print('2.5.1.36')\n    print('2.5.1.37')\n    print('2.5.1.38')\n    print('2.5.1.39')\n    print('2.5.1.40')\n    print('2.5.1.41')\n    print('2.5.1.42')\n    print('2.5.1.43')\n    print('2.5.1.44')\n    print('2.5.1.45')\n    print('2.5.1.46')\n    print('2.5.1.47')\n    print('2.5.1.48')\n    print('2.5.1.49')\n    print('2.5.1.50')\n    print('2.5.1.51')\n    print('2.5.1.52')\n    print('2.5.1.53')\n    print('2.5.1.54')\n    print('2.5.1.55')\n    print('2.5.1.56')\n    print('2.5.1.57')\n    print('2.5.1.58')\n    print('2.5.1.59')\n    print('2.5.1.60')\n    print('2.5.1.61')\n    print('2.5.1.62')\n    print('2.5.1.63')\n    print('2.5.1.64')\n    print('2.5.1.65')\n    print('2.5.1.66')\n    print('2.5.1.67')\n    print('2.5.1.68')\n    print('2.5.1.69')\n    print('2.5.1.70')\n    print('2.5.1.71')\n    print('2.5.1.72')\n    print('2.5.1.73')\n    print('2.5.1.74')\n    print('2.5.1.75')\n    print('2.5.1.76')\n    print('2.5.1.77')\n    print('2.5.1.78')\n    print('2.5.1.79')\n    print('2.5.1.80')\n    print('2.5.1.81')\n    print('2.5.1.82')\n    print('2.5.1.83')\n    print('2.5.1.84')\n    print('2.5.1.85')\n    print('2.5.1"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def split(t): \n        return list(t) \n    def odd_ele(t): \n        return t[1:] + t[0:1] \n    def even_ele(t): \n        return t[1::2] + t[0::2] \n    odd, even, even_fnc = list(even_fnc()), split(test_tuple[0]), odd_ele \n    return even, odd, even_fnc \n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #write your code here\n    even_ele = []\n    even_ele = test_tuple[0][1]\n    odd_ele = []\n    odd_ele = test_tuple[1][1]\n    for i in range(len(test_tuple[0][1])):\n        if test_tuple[0][1][i] % 2 == 0:\n            even_ele = even_ele + [test_tuple[0][1][i]]\n        elif test_tuple[0][1][i] % 2!= 0:\n            odd_ele = odd_ele + [test_tuple[0][1][i]]\n    even_ele = list(set(even_ele))\n    odd_ele = list(set(odd_ele))\n    return even_ele, odd_ele\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_list = []\n    for item in test_tuple: \n        if not item: \n            break\n        else: \n            if item % 2 == 0: \n                odd_list.append(item)\n    print(odd_list) \n    \n    \n    even_list = []\n    for item in odd_list: \n        if item % 2 == 0: \n            even_list.append(item)\n    print(even_list) \n    \n    \n    result = even_fnc(even_list, odd_list) \n    print(result) \n    \n    \ndef main(): \n    \n    print(\"Start\") \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9) \n    even_fnc = even_ele \n    \n    even_fnc(test_tuple, even_fnc) \n    \n    print(\"End\") \n    \n    print(\"TESTING DATA WITHOUT ERRORS\") \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9) \n    print(\"Before: \", test_tuple) \n    \n    even_fnc = even_ele \n    \n    print(\"After: \", even_fnc(test_tuple, even_fnc)) \n    print(\"End\") \n    \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    for x in range(1,b+1):\n        for y in range(1,s+1):\n            print(x,y)\n            if(x<b and y<s):\n                print(x,y)\n                print(\"\\n\")\n                print(2*x,2*y,2*x*y)\n                print(\"\\n\")\n                \n                \n            else:\n                print(x,y)\n                print(\"\\n\")\n                \n                \n            print(\"\")\n    print(2*b,2*s,2*b*s)\n    print(\"\\n\")\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b==0 or s==0:\n        return 0\n    if b==1 and s==1:\n        return 0\n    else:\n        return (s-b)*(s-b)*surface_Area(b-1,s)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # square_b = int(input(\"Please enter the base edge of the square pyramid:\"))\n    # square_h = int(input(\"Please enter the height of the square pyramid:\"))\n    #\n    # # Calculate the area of the square pyramid\n    # area = 0\n    # for i in range(1, square_b):\n    #     area += (i * (square_h ** 2))\n    # print(f\"The area of the square pyramid is: {area}\")\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def height(b,s):\n        return s*b\n    def surface(b,s):\n        return b*s\n    \n    return(height(b,s))+(surface(b,s))"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return b*b\n    elif (s == 2):\n        return s*s\n    elif (s == 3):\n        return (b**2)*(b+s-1)\n    elif (s > 3):\n        return (s-3)*(s-2)*b*(s-2)\ndef pyramid(b,s):\n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return b*b\n    elif (s == 2):\n        return (b+s)/2\n    elif (s == 3):\n        return b**2\n    elif (s == 4):\n        return (b+s)**2\n    elif (s == 5):\n        return (b+s)**3\n    elif (s == 6):\n        return b**4*b*b\ndef area_of_Pyramid(b,s):\n    '''\n    Write a python function to find the area of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return (b*(b+s-1))/2\n    elif (s == 2):\n        return (b*(b+s/2))\n    elif (s == 3):\n        return b**3\n    elif (s == 4):\n        return (b*(b+s)**2)/2\n    elif (s == 5):\n        return (b*(b+s)**3)/6\n    elif (s == 6):\n        return b*(b+s)**4*b**2\ndef calculate_volume(b,s):\n    '''\n    Write a python function to calculate the volume of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return b*b\n    elif (s == 2):\n        return s*s*b\n    elif (s == 3):\n        return b**3\n    elif (s == 4):\n        return b*(b+s)**2\n    elif (s == 5):\n        return b*(b+s)**3\n    elif (s == 6):\n        return b*(b+s)**4*b**2\ndef calculate_Volume(b,s):\n    '''\n    Write a python function to calculate the volume of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return b*b\n    elif (s == 2):\n        return (b*b+s)**2\n    elif (s == 3):\n        return b*(b+s)**2\n    elif (s == 4):\n        return b*(b+s)**3\n    elif (s == 5):\n        return b*(b+s)**4*b**2\n    elif (s == 6):\n        return b*(b+s)**5*b**3\ndef calculate_surface(b,s):\n    '''\n    Write a python function to calculate the surface area of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return b*b\n    elif (s == 2):\n        return (b+s)/2\n    elif (s == 3):\n        return (b+s)/2*(b+s-1)\n    elif (s == 4):\n        return (b+s)**2\n    elif (s == 5):\n        return (b+s)**3\n    elif (s == 6):\n        return (b+s)**4*b*b\ndef surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return b*b\n    elif (s == 2):\n        return (b+s)/2\n    elif (s == 3):\n        return (b+s)/2*(b+s-1)\n    elif (s == 4):\n        return (b+s)**2\n    elif (s == 5):\n        return (b+s)**3\n    elif (s == 6):\n        return b**3*b*b\ndef perimeter(b,s):\n    '''\n    Write a python function to calculate the perimeter of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return (b*b+s)**2\n    elif (s == 2):\n        return (b+s)/2\n    elif (s == 3):\n        return (b+s)/2*(b+s-1)\n    elif (s == 4):\n        return (b+s)**2\n    elif (s == 5):\n        return (b+s)**3\n    elif (s == 6):\n        return (b+s)**4*b**2\ndef perimeter_of_Pyramid(b,s):\n    '''\n    Write a python function to calculate the perimeter of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return b*(b+s-1)\n    elif (s == 2):\n        return (b+s)/2\n    elif (s == 3):\n        return (b+s)/2*(b+s-1)\n    elif (s == 4):\n        return (b+s)**2\n    elif (s == 5):\n        return (b+s)**3\n    elif (s == 6):\n        return b*(b+s)**4*b**2\ndef compute_volume(b,s):\n    '''\n    Write a python function to calculate the volume of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return (b*(b+s-1))\n    elif (s == 2):\n        return (b*(b+s))\n    elif (s == 3):\n        return (b*(b+s))*(b+s-1)\n    elif (s == 4):\n        return (b*(b+s)**2)\n    elif (s == 5):\n        return (b*(b+s)**3)\n    elif (s == 6):\n        return (b*(b+s)**4*b**2)\ndef volume_of_Pyramid(b,s):\n    '''\n    Write a python function to calculate the volume of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return (b*b)\n    elif (s == 2):\n        return (b+s)/2\n    elif (s == 3):\n        return (b+s)/2*(b+s-1)\n    elif (s == 4):\n        return (b+s)**2\n    elif (s == 5):\n        return (b+s)**3\n    elif (s == 6):\n        return b**3*b*b\ndef area_of_Pyramid(b,s):\n    '''\n    Write a python function to find the area of a pyramid with a given base edge and height.\n    '''\n    if (s == 0):\n        return 0\n    elif (s == 1):\n        return (b*(b+s-1))/2\n    elif (s == 2):\n        return (b*(b+s))\n    elif (s == 3):\n        return b*(b+s)\n    elif (s == 4):\n        return b*(b+s)**2\n    elif (s == 5):\n        return b*(b+s)**3\n    e"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #b = int(input(\"Enter the base edge: \"))\n    #s = int(input(\"Enter the height: \"))\n    area = 0\n    for i in range(1,s):\n        area = area + i * (1.0 + (b/2))\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 1.0*(s[0]-b[0])*(s[1]-b[1])\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = 0\n    for i in range(1, s):\n        a += (s**2 * i / s)\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b**2 * s)**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a=s/2\n    #base edge is given as an argument, so, if we find the base edge then return the area \n    if (b>=a):\n        return 0\n    else: \n        return a*a\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    try:\n        return len(dict1) == 0\n    except:\n        return 'Error'\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for element in dict1:\n        return element not in dict1.keys()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return \"This dictionary is empty.\"\n    else:\n        return \"This dictionary is not empty.\"\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number = []\n    for i in range(1, num + 1):\n        catalan_number.append(1)\n        for j in range(1, i):\n            if (j % 2) == 0:\n                catalan_number[i - 1] *= (j // 2)\n            else:\n                catalan_number[i - 1] *= (j * 2)\n    return catalan_number[num - 1]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert type(num)==int, 'Invalid type'\n    assert num>=0, 'Invalid value'\n    assert num<=10**7, 'Invalid value'\n    assert num%10==0, 'Invalid value'\n    #assert 1<=n<=10**6, 'Invalid value'\n    assert 1<=num<=10**6, 'Invalid value'\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    if num == 0:\n        return 1\n    # 1-based addition\n    # Determines the base\n    base = 2\n    # 2-nd base\n    # n=1,2,3,...\n    # 4-th base\n    # n=4,5,6,...\n    # n = x = 2^x\n    # O(n*n) to run at most once\n    # the first base, so the result is n^(x-1) + n-x\n    # O(n)\n    # to run at most x times\n    # The following algorithm checks x >= 1\n    # for each x\n    # if x >= 2, then the result is x*x\n    # if x >= 3, then the result is x*x*x\n    # if x >= 4, then the result is x*x*x*x\n    # if x >= 5, then the result is x*x*x*x*x*x\n    # if x >= 6, then the result is x*x*x*x*x*x*x*x*x\n    # if x >= 7, then the result is x*x*x*x*x*x*x*x*x*x*x*x\n    # if x >= 8, then the result is x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x\n    # so we can run at most x x times\n    # (if x >= 3, we'll run at most x x times)\n    # (if x >= 4, we'll run at most x x times)\n    # (if x >= 5, we'll run at most x x times)\n    # (if x >= 6, we'll run at most x x times)\n    # (if x >= 7, we'll run at most x x times)\n    # (if x >= 8, we'll run at most x x times)\n    # so we run at most x x times\n    # O(n) to run at most once\n    # for each base, we check to see if the base has a coefficient\n    # if the base has a coefficient, we add it\n    # if the base has no coefficient, we check for the base itself\n    # if the base has a coefficient, then we run at most x times\n    # so the overall run time is O(n)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, num):\n        catalan.append(catalan[i-1] + catalan[i])\n    return catalan[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num==1:\n        return 1\n    \n    if num==2:\n        return 1\n        \n    return catalan_number(num-1)+catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 1 or num == 2:\n        return 1\n    \n    elif num == 3:\n        return 4\n    \n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    i=1\n    n=2\n    if num<=0:\n        print(num)\n    elif num==0:\n        return 1\n    else:\n        while i<=num:\n            print(i)\n            i+=1\n        return n\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number = (1 + num) * (1 + num) * (1 + num)\n    return(catalan_number)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    #make a regex expression to find the first adverb ending with ly\n    regex = r'(ly)\\b|(ly|ly|ly)$'\n    #define the whole string\n    s ='m'\n    #find all the positions of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #define the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a list for the expressions\n    positions_list = [i for i in positions if i < first_adverb_pos]\n    #print the list\n    print(positions_list)\n    #loop through the list and print the positions\n    for i in positions_list:\n        print(i)\n    print('\\n')\n    #make a new list with the positions of the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #make a new list with the adverbs\n    adverbs = list(map(lambda i: 'ly' + str(i), adverbs))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #make a new list with the adverbs\n    adverbs = list(map(lambda i: 'ly' + str(i + 1), adverbs))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #find the first adverb ending with ly\n    regex = r'ly\\b|(ly|ly)$'\n    #find the position of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #get the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a new list with the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #make a new list with the adverbs\n    adverbs = list(map(lambda i: 'ly' + str(i), adverbs))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #make a new list with the adverbs\n    adverbs = list(map(lambda i: 'ly' + str(i + 1), adverbs))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #find the first adverb ending with ly\n    regex = r'ly\\b|(ly|ly)$'\n    #find the position of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #get the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a new list with the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #make a new list with the adverbs\n    adverbs = list(map(lambda i: 'ly' + str(i), adverbs))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #find the first adverb ending with ly\n    regex = r'ly\\b|(ly|ly)$'\n    #find the position of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #get the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a new list with the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #find the first adverb ending with ly\n    regex = r'ly\\b|(ly|ly)$'\n    #find the position of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #get the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a new list with the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #find the first adverb ending with ly\n    regex = r'ly\\b|(ly|ly)$'\n    #find the position of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #get the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a new list with the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #find the first adverb ending with ly\n    regex = r'ly\\b|(ly|ly)$'\n    #find the position of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #get the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a new list with the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through the list and print the adverbs\n    for i in adverbs:\n        print(i)\n    print('\\n')\n    #find the first adverb ending with ly\n    regex = r'ly\\b|(ly|ly)$'\n    #find the position of the expression\n    positions = [x.start() for x in re.finditer(regex, text)]\n    #get the first adverb position\n    first_adverb = positions[0]\n    #get the first position of the expression\n    first_adverb_pos = positions[first_adverb]\n    #make a new list with the expressions\n    adverbs = list(map(lambda i: i + 1, positions_list))\n    #print the list\n    print(adverbs)\n    print('\\n')\n    #loop through th"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if text == \"\":\n        return None\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == \"y\":\n            adverbs.append(i)\n    if adverbs == []:\n        return None\n    return adverbs\ndef find_stopwords(text):\n    '''\n    Write a function to find the first stopword ending with ly and its positions in a given string.\n    '''\n    if text == \"\":\n        return None\n    stopwords = []\n    for i in range(len(text)):\n        if text[i] == \"l\":\n            stopwords.append(i)\n    if stopwords == []:\n        return None\n    return stopwords\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r\"(ly|l|lys|ly|lyc|ly|lyc|ly|lys|lyc|ly|lyc|ly|lyc|ly|lyc|ly|lyc|lyc|ly|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|ly|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|lyc|ly"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Loop through the entire string\n    for i in range(len(text)):\n        # If the first adverb ending with ly exists, then stop.\n        if text[i].lower() == 'ly':\n            break\n    \n    # If ly exists, then start the loop again\n    if i!= 0:\n        # Find the start of the adverb\n        start = -1\n        for j in range(i):\n            # Check if the next character is a single letter\n            if text[j].isalpha():\n                # If the letter is a single letter, then the next character is a adverb\n                if text[j].lower() == 'l':\n                    start = j\n                # If the next character is not a single letter, and if ly is not at the start of the sentence\n                # and if ly is at the end of the sentence, then return the starting point of the adverb\n                elif text[j].lower()!= 'ly' and text[j + 1].lower()!= 'ly':\n                    return start\n        # If ly is not at the start of the sentence, then return the starting point of the adverb\n        return start\n        \n    # If ly is at the end of the sentence, then return the starting point of the adverb\n    return 0\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    adverbs = []\n    \n    adverbs = re.findall('ly$', text)\n    \n    if adverbs:\n        print(adverbs)\n    else:\n        print('No adverbs found.')\n        print('Why are you searching for adverbs?...')\n        print('Please ask me to give me some help.')\n        print('Please do not stop me.')\n        print('I\\'m sorry, but I did not find any adverb ending with ly.')\n        print('Say yes or no.')\n        answer = input('Yes or No?')\n        \n        if answer == 'Yes':\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    reg = re.compile(r'[a-zA-ZA-Z\\s]*ly')\n    return reg.findall(text)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'(?:((?<=ly).|\\d+ly)|((?<=ly)n)|((?<=ly)ng)|(?<=ly)s)')\n    results = pattern.finditer(text)\n    return results\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['ly', 'ly','s','st', 'd', 'do', 'd ', 'dy', 'ly ', 'ly', 'ly', 'ly', 'ly', 'ly', 'ly', 'ly', 'ly']\n    for i in adverbs:\n        text = text.replace(i, 'ly ')\n    find_adverbs_regex = re.compile('ly (.*)')\n    adverbs = find_adverbs_regex.findall(text)\n    for i in adverbs:\n        adverb = i[-1]\n        if adverb[-1] in ('ly', 'ly', 'ly', 'ly'):\n            return adverb[-1]\n        else:\n            return adverb\n    return text\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    m = re.search('ly',text)\n    if m:\n        pos = m.start()\n        adverb = text[pos:pos+len(m.group(0))+1]\n        return adverb\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    word_tokens = word_tokenize(text)\n    for i in range(len(word_tokens) - 1):\n        if word_tokens[i].endswith('ly'):\n            result = re.search('ly', word_tokens[i])\n            if result:\n                adverb_ending = word_tokens[i][-3:]\n                adverb_positions = result.start()\n                return adverb_ending, adverb_positions\n    return None, None\ndef find_positions(word):\n    '''\n    Write a function to find the index of the word within the word tokenized text.\n    '''\n    from nltk.tokenize import word_tokenize\n    word_tokens = word_tokenize(word)\n    for i in range(len(word_tokens) - 1):\n        if word_tokens[i].endswith('ly'):\n            result = re.search('ly', word_tokens[i])\n            if result:\n                word_positions = result.start()\n                return word_positions\n    return None\ndef find_words(text):\n    '''\n    Write a function to find the first word ending with ly and its positions within the text.\n    '''\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n    word_tokens = word_tokenize(text)\n    for i in range(len(word_tokens) - 1):\n        if word_tokens[i].endswith('ly'):\n            result = re.search('ly', word_tokens[i])\n            if result:\n                word_positions = result.start()\n                result_index = i\n                return word_positions, result_index\n    return None, None\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    my_heap = []\n    my_heapq = []\n    \n    for item in items:\n        my_heapq.append(item)\n        heapq.heapify(my_heap)\n    \n    while len(my_heap) > n:\n        curr_item = my_heapq.pop()\n        if curr_item not in my_heap:\n            heapq.heappush(my_heap,curr_item)\n            heapq.heapify(my_heap)\n    \n    return my_heap\n    \ndef get_ordered_list(items,n):\n    '''\n    Write a function to return an n-item ordered list of the first n elements.\n    '''\n    my_list = []\n    for i in range(n):\n        curr = heapq.heappop(items)\n        my_list.append(curr)\n    return my_list\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    index=0\n    items.sort()\n    return heapq.nlargest(n,items)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1],item[0]))\n    for i in range(n):\n        if len(heap)>0:\n            item = heapq.heappop(heap)\n            print(item[0], item[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for x in items:\n        heapq.heappush(heap,(-x,x))\n    items = list(dict.fromkeys(items))\n    items.sort(reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # heap = []\n    # items = list(items)\n    # items.sort(key = lambda x : x[1])\n    # for i in items:\n    #     heapq.heappush(heap,i[1])\n    #     # heapq.heappushpop(heap,i[1])\n    # if heap:\n    #     print(heapq.heappop(heap))\n    # return heapq.heapify(heap)\n    return heapq.nlargest(n,items)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    '''\n    items[i] - [1,2,3,5,7,9]\n    '''\n    h = []\n    heapq.heapify(h)\n    for i in range(n):\n        heapq.heappush(h,items[i][1])\n    s = [i for i in range(n)]\n    \n    j = 0\n    while j < len(s):\n        if heapq.heappop(h) > heapq.heappop(s):\n            heapq.heappush(s,heapq.heappop(h))\n        j += 1\n    print(s)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #get top n\n    import random\n    list_ = []\n    for item in items:\n        list_.append((item,items.count(item)))\n    heapq.heapify(list_)\n    #get n most expensive items\n    n_most_expensive = heapq.nlargest(n,list_,key=lambda x: x[1])\n    return n_most_expensive\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[1])\n        heapq.heappush(heap,-i[1])\n        if len(heap) == n:\n            return [heapq.heappop(heap),heapq.heappop(heap)]\n    return None\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items) == 0:\n        return []\n    else:\n        items.sort()\n        heap = []\n        i = 0\n        heapq.heappush(heap,(-items[i],items[i]))\n        while len(heap) > n:\n            print(heap)\n            temp = heapq.heappop(heap)\n            print(temp)\n            i+=1\n            if i==n:\n                i = 0\n                temp = -temp[0]\n                heapq.heappush(heap,(-temp[0],temp[1]))\n        return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,-item[1])\n    for _ in range(n):\n        heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return list(l[:n]) + list(l[n:])\n    \ndef insert_element(l, n, data):\n    '''\n    Write a python function to insert an element at the nth position.\n    '''\n    l.insert(n, data)\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # TODO: Write your code here\n    return l[0:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    print(\"Splitting list of {} elements into nth element\".format(n))\n    print(\"Splitting list at {} elements\".format(n))\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # pass\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    if len(l) == 0:\n        return []\n    \n    return [l[:n]] + split_Arr(l[n+1:], n)\n    \n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    str_lst = l\n    i = 1\n    while i < n:\n        str_lst.append(str_lst.pop(0))\n        i += 1\n    return str_lst\n        \n    \ndef print_values(l):\n    '''\n    Write a python function that prints the values of l as they are in a list.\n    '''\n    \n    str_lst = l\n    for i in range(0,len(str_lst)):\n        print(str_lst[i])\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    p = n//2\n    return(l[:p], l[p:])\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    elif n == 1:\n        return l[:1]\n    elif n % 2 == 0:\n        return split_Arr(l, n//2) + [l[n//2]] + split_Arr(l, n//2)\n    else:\n        return split_Arr(l, n//2) + [l[:n//2]] + split_Arr(l, n//2) + [l[n//2+1:]]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    lst = []\n    for x in listx:\n        lst.append(x)\n    return tuple(lst)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    '''\n    1. Create a tuple of the first item of the list.\n    '''\n    tup1 = listx[0]\n    \n    '''\n    2. Create a tuple of the second item of the list.\n    '''\n    tup2 = listx[1]\n    \n    '''\n    3. Create a tuple of the first item of the list.\n    '''\n    tup3 = listx[0]\n    \n    '''\n    4. Create a tuple of the second item of the list.\n    '''\n    tup4 = listx[1]\n    \n    '''\n    5. Return the tuple.\n    '''\n    return tup1, tup2, tup3, tup4"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_floats(listx):\n    '''\n    Write a function to convert a list to a float.\n    '''\n    return float(listx)\n    \ndef list_int_or_float(listx):\n    '''\n    Write a function to convert a list to an integer or a float.\n    '''\n    if type(listx)==int or type(listx)==float:\n        return listx\n    else:\n        raise TypeError('Can only convert integer or float!')\n    \ndef list_float_or_int(listx):\n    '''\n    Write a function to convert a list to a float or an integer.\n    '''\n    if type(listx)==float or type(listx)==int:\n        return listx\n    else:\n        raise TypeError('Can only convert float or integer!')\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max(abs(max_num - min_num), abs(min_num - max_num))\n    \nprint(big_diff([1, 2, 4, 5])"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = None\n    i = 0\n    for num in nums:\n        if num == nums[i]:\n            i+=1\n            continue\n        else:\n            diff = num - nums[i]\n            i = 0\n            break\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) <= 2:\n        return nums[0] - nums[1]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    difs = []\n    if not nums:\n        return []\n    difs = [nums[0] - nums[0]]\n    for i in range(len(nums)):\n        difs.append(nums[i] - nums[0])\n    return difs\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    dif = smallest - largest\n    return dif\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    first_num = nums[0]\n    second_num = nums[-1]\n    diff = first_num - second_num\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #convert to integer\n    nums = [int(i) for i in nums]\n    print(nums)\n    for i in range(len(nums)-1):\n        print('i is ',i)\n        for j in range(i+1,len(nums)):\n            if nums[j] < nums[i]:\n                print('swapped ',nums[i], 'and ', nums[j])\n                nums[i],nums[j] = nums[j],nums[i]\n                print(nums)\n    print(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    x = sorted(nums)\n    if x[0] == x[-1]:\n        return x[0]\n    else:\n        return x[-1] - x[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    first = nums[0]\n    second = nums[1]\n    for i in range(2, len(nums)):\n        if nums[i] < first:\n            first = nums[i]\n        if nums[i] > second:\n            second = nums[i]\n    return first - second\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a + b == (a**2 + b**2)**.5\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return sum(pow(i,2) for i in range(b-a+1))\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square_sum = 0\n    for i in range(a):\n        for j in range(b):\n            if i**2 + j**2 == a*b:\n                square_sum += 1\n    return square_sum\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [a]\n    elif b < 0:\n        return []\n    elif a == 0:\n        return []\n    else:\n        i = 0\n        j = 0\n        if a == b:\n            return [a]\n        while(i < b):\n            if(a*a == b*b):\n                return [a]\n            elif (a * a < b * b):\n                i += 1\n            else:\n                j += 1\n        return [a]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if(i*i==a*a+b*b):\n                result.append(i*j)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if(not a or not b):\n        return 0\n    if (a == b):\n        return 1\n    elif (a < b):\n        return perfect_squares(a, b-1)\n    else:\n        return perfect_squares(b, a-1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    num = a\n    num_sq = 0\n    while (num ** 2) <= b:\n        num_sq += 1\n        num = (num ** 2)\n    \n    if num_sq == 2:\n        return False\n    \n    for num in range(num_sq, 1, -1):\n        if (num ** 2) == a or (num ** 2) == b:\n            return False\n        elif (num ** 2) == a and num ** 2 == b:\n            return True\n    \n    return True\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    s=0\n    for i in range(a,b+1):\n        if math.sqrt(i)==math.sqrt(i):\n            s+=1\n    if s==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    result = 0\n    \n    for i in range(a, b):\n        j = i*i\n        if (i**2) == j:\n            result = i\n    \n    return result\n    \n    # solution\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if(a > b):\n        return \"The first argument is greater than the second argument\"\n    elif(a == b):\n        return \"The numbers are equal\"\n    elif(a % b == 0):\n        return \"The number is perfect square\"\n    else:\n        return \"The numbers are not perfect squares\"\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return complex(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    r=sqrt(x**2+y**2)\n    theta=atan(y/x)\n    return round(r),round(theta)\ndef polar_triangle(x,y,z):\n    '''\n    Write a function to convert polar coordinates to triangle coordinates.\n    '''\n    x=float(x)\n    y=float(y)\n    z=float(z)\n    if (x==0 and y>0 and z<0):\n        a=x\n        b=0\n        c=y\n        d=z\n    elif (x==0 and y<0 and z>0):\n        a=x\n        b=y\n        c=0\n        d=z\n    elif (x==0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y==0 and z>0):\n        a=x\n        b=y\n        c=0\n        d=z\n    elif (x>0 and y==0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y==0 and z>0):\n        a=x\n        b=y\n        c=0\n        d=z\n    elif (x<0 and y==0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y>0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z>0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x>0 and y<0 and z<0):\n        a=x\n        b=y\n        c=z\n        d=0\n    elif (x<0 and y<0 and z>"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = y**2 - x**2\n    b = cmath.sqrt(a)\n    c = a * x\n    d = b * y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c = (cmath.sqrt(x**2 + y**2))\n    if c < 1:\n        r = cmath.sqrt(c)\n        r = abs(r)\n        phi = cmath.acos(y/x)\n        theta = cmath.acos(y/c)\n        return r,phi,theta\n    else:\n        return 0\ndef polar_graph(coor_x,coor_y):\n    '''\n    Write a function to convert polar coordinates to graph coordinates.\n    '''\n    x = coor_x[0]\n    y = coor_x[1]\n    if x > 0:\n        theta = cmath.acos((y*coor_x[1]*coor_x[2])/((y**2 + y)**0.5))\n        phi = cmath.acos((y*coor_y[0]*coor_y[2])/((y**2 + y)**0.5))\n        r = x*cmath.sqrt(y**2 + y)\n        return r,phi,theta\n    elif y > 0:\n        phi = cmath.acos((x*coor_y[0]*coor_y[2])/((x**2 + x)**0.5))\n        theta = cmath.acos((x*coor_y[1]*coor_y[2])/((x**2 + x)**0.5))\n        r = y*cmath.sqrt(x**2 + y)\n        return r,phi,theta\n    else:\n        return 0\ndef polar_dist_cal(r,phi,theta):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    a = 2*r*cmath.sin(phi)\n    b = 2*r*cmath.cos(phi)\n    c = 2*cmath.sin(theta)\n    d = 2*cmath.cos(theta)\n    return a*a + b*b + c*c + d*d - 0.5*((r*r*cmath.cos(phi)-r*r*cmath.sin(phi)*cmath.cos(theta))**2+(r*r*cmath.cos(phi)+r*r*cmath.sin(phi)*cmath.sin(theta))**2+(c*cmath.cos(theta)-c*cmath.sin(theta))**2-(r*r*cmath.sin(phi))**2-(r*r*cmath.cos(phi)+c*cmath.sin(phi))**2-(c*cmath.sin(theta))**2)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(x, y)\n    r_x, r_y = r.real, r.imag\n    return r_x, r_y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Use cmath module to compute polar coordinates\n    coords = cmath.polar(cmath.rect(x,y))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    ang_rad = cmath.phase(x*y)\n    ang_deg = round(ang_rad*180.0/cmath.pi,2)\n    return ang_rad, ang_deg\ndef polar_rect_angle(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad, ang_deg = polar_rect(x,y)\n    return ang_deg\ndef polar_angle(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return ang_rad\ndef polar_sin(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.sin(cmath.radians(ang_rad)),2)\ndef polar_cos(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.cos(cmath.radians(ang_rad)),2)\ndef polar_tan(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.tan(cmath.radians(ang_rad)),2)\ndef polar_area(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area_2_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_sine(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.sin(cmath.radians(ang_rad)),2)\ndef polar_cosine(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.cos(cmath.radians(ang_rad)),2)\ndef polar_arccos(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.acos(cmath.sin(cmath.radians(ang_rad))),2)\ndef polar_arctan(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan(cmath.sin(cmath.radians(ang_rad))),2)\ndef polar_arctan2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan2(cmath.sin(cmath.radians(ang_rad)),cmath.cos(cmath.radians(ang_rad))),2)\ndef polar_acos(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.acos(cmath.sin(cmath.radians(ang_rad))),2)\ndef polar_atan2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan2(cmath.sin(cmath.radians(ang_rad)),cmath.cos(cmath.radians(ang_rad))),2)\ndef polar_arctan2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan2(cmath.sin(cmath.radians(ang_rad)),cmath.cos(cmath.radians(ang_rad))),2)\ndef polar_sin2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.sin(cmath.radians(ang_rad)),2)\ndef polar_cos2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.cos(cmath.radians(ang_rad)),2)\ndef polar_tan2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.tan(cmath.radians(ang_rad)),2)\ndef polar_area2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area2_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area2_2_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_sine2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    retur"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y,x)\n    return r,theta\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*math.pi\n    theta = y*math.pi\n    return r, theta\ndef polar_circle(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = cmath.sqrt(((x*math.pi*x)**2)+(y**2))\n    return r\ndef polar_rect_circle(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x*math.pi)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_triangle(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    return r\ndef polar_rect_circle_triangle(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)\n    return r\ndef polar_circle_circle(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x*math.pi)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_triangle(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x*math.pi)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_triangle(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x*math.pi)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x*math.pi)**2\n    theta = (y*math.pi)**2\n    return r, theta\ndef polar_circle_circle_triangle(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x*math.pi)**2\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)\n    theta = (y*math.pi)\n    return r, theta\ndef polar_rect_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a rectangle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return the radius of a circle in polar coordinates\n    '''\n    r = (x**2+y**2)**0.5\n    theta = (y*math.pi)\n    return r, theta\ndef polar_circle_circle_circle_triangle_square(x,y):\n    '''\n    Write a function to return th"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(0, 0)\n    x = complex(x)\n    y = complex(y)\n    if x == 0 and y == 0:\n        return [x, y]\n    if x == 0:\n        z = complex(y, 0)\n    if y == 0:\n        z = complex(0, x)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # define the variable to be passed to the function.\n    start_index = 0\n    end_index = len(newList) - 1\n    while start_index < end_index:\n        temp = newList[start_index]\n        newList[start_index] = newList[end_index]\n        newList[end_index] = temp\n        start_index += 1\n        end_index -= 1\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[::-1]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList.append(newList.pop(len(newList)-1))\n    newList.append(newList.pop(0))\n    \n    return newList\n    \n    \ndef main():\n    '''\n    Write a python function to replace the last element with another element.\n    '''\n    \n    newList = []\n    \n    print(\"\\nThe first list: \")\n    print(list(map(int,input().split())))\n    \n    print(\"\\nThe second list: \")\n    print(list(map(int,input().split())))\n    \n    print(\"\\nThe list with all elements swapped: \")\n    print(swap_List(newList))\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    i = 0\n    j = len(newList) - 1\n    while i < len(newList):\n        newList[i], newList[j] = newList[j], newList[i]\n        i += 1\n        j -= 1\n    print(*newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    swap_pos = 0\n    swap_value = 0\n    \n    for swap_pos in range(len(newList)):\n        swap_value = newList[swap_pos]\n        newList[swap_pos] = newList[swap_pos + 1]\n        newList[swap_pos + 1] = swap_value\n    \n    return newList\n    \n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = []\n    for i in range(len(newList)):\n        new_list.append(newList[i])\n        new_list.append(newList[i+1])\n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort() \n    newList.reverse() \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # start with empty list\n    lst = []\n    # traverse through the entire list\n    for i in range(len(newList)):\n        # swap the elements of the list that are the same index\n        # (assume they are the same index)\n        lst.append(newList[i])\n        newList.pop(i)\n    return lst\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #Swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # TODO: Write your code here\n    newList = newList[::-1]\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-k,k-1) * n / (binomial_Coeff(n,k-1) * binomial_Coeff(n-k,k-1))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > 0:\n        coeff = 1\n        for _ in range(k):\n            coeff = coeff * (n-_)\n    elif k == 0:\n        coeff = 1\n    elif k > 0 and n == 0:\n        coeff = 0\n    else:\n        coeff = 0\n    return coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_Coeff(n-1, k)\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k-1)\ndef binomial_coeff_for_2n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_2n_k(n-1, k)\n    else:\n        return binomial_coeff_for_2n_k(n-1, k-1) + binomial_coeff_for_2n_k(n-1, k-1)\ndef binomial_coeff_for_3n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_3n_k(n-1, k)\n    else:\n        return binomial_coeff_for_3n_k(n-1, k-1) + binomial_coeff_for_3n_k(n-1, k-1) + binomial_coeff_for_3n_k(n-1, k-1)\ndef binomial_coeff_for_4n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_4n_k(n-1, k)\n    else:\n        return binomial_coeff_for_4n_k(n-1, k-1) + binomial_coeff_for_4n_k(n-1, k-1) + binomial_coeff_for_4n_k(n-1, k-1)\ndef binomial_coeff_for_5n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_5n_k(n-1, k)\n    else:\n        return binomial_coeff_for_5n_k(n-1, k-1) + binomial_coeff_for_5n_k(n-1, k-1) + binomial_coeff_for_5n_k(n-1, k-1)\ndef binomial_coeff_for_6n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_6n_k(n-1, k)\n    else:\n        return binomial_coeff_for_6n_k(n-1, k-1) + binomial_coeff_for_6n_k(n-1, k-1) + binomial_coeff_for_6n_k(n-1, k-1) + binomial_coeff_for_6n_k(n-1, k-1)\ndef binomial_coeff_for_7n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_7n_k(n-1, k)\n    else:\n        return binomial_coeff_for_7n_k(n-1, k-1) + binomial_coeff_for_7n_k(n-1, k-1) + binomial_coeff_for_7n_k(n-1, k-1) + binomial_coeff_for_7n_k(n-1, k-1)\ndef binomial_coeff_for_8n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_8n_k(n-1, k)\n    else:\n        return binomial_coeff_for_8n_k(n-1, k-1) + binomial_coeff_for_8n_k(n-1, k-1) + binomial_coeff_for_8n_k(n-1, k-1) + binomial_coeff_for_8n_k(n-1, k-1)\ndef binomial_coeff_for_9n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_9n_k(n-1, k)\n    else:\n        return binomial_coeff_for_9n_k(n-1, k-1) + binomial_coeff_for_9n_k(n-1, k-1) + binomial_coeff_for_9n_k(n-1, k-1) + binomial_coeff_for_9n_k(n-1, k-1)\ndef binomial_coeff_for_10n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_10n_k(n-1, k)\n    else:\n        return binomial_coeff_for_10n_k(n-1, k-1) + binomial_coeff_for_10n_k(n-1, k-1) + binomial_coeff_for_10n_k(n-1, k-1) + binomial_coeff_for_10n_k(n-1, k-1)\ndef binomial_coeff_for_11n_k(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0 or k == 0):\n        return 1\n    if (n < 0 or k < 0):\n        return 0\n    if (n < k):\n        return binomial_coeff_for_11n_k(n-1, k)\n    else:\n        return binomial_coeff_for_11n_k(n-1, k-1) + binomial_coeff_for_11n_k(n-1, k-1) + binomial_coeff_for_11n_k(n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: return 1 \n    if k == 1: return n\n    return binomial_Coeff(n - 1, k - 1) * k\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    \ndef check_len(num1,num2):\n    '''\n    Write a python function to check if the two given arguments are the same length.\n    '''\n    if len(num1)==len(num2):\n        return True\n    else:\n        return False\n    \ndef binomial_Coeff_list(n,k):\n    '''\n    Return the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=[]\n    for i in range(n,n+k):\n        coeff.append(binomial_Coeff(i,k))\n    return sum(coeff)\n    \ndef zp(n,k):\n    '''\n    Return the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=[]\n    for i in range(n,n+k):\n        coeff.append(binomial_Coeff(i,k))\n    return sum(coeff)\n    \ndef list_mod(n,k):\n    '''\n    Return the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=[]\n    for i in range(n,n+k):\n        coeff.append(binomial_Coeff_list(i,k))\n    return sum(coeff)\n    \ndef qe_check(q,r):\n    '''\n    returns true if the given quaternion is in the list.\n    '''\n    if q in qe_check_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for i in range(0,k):\n        s += n*((2**i)**(-n-1))\n    return s\ndef binomial_Coeff_check(n,k,p): \n    '''\n    Check if a point (x,y) is a binomial coefficient.\n    '''\n    if (binomial_Coeff(n,k) == binomial_Coeff(n+1,k)):\n        print(\"Yes\")\n        return\n    else:\n        print(\"No\")\n        return\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return -1\n    sum = 0\n    for i in range(k):\n        sum += (1 / (n + i + 1)) * binomial_Coeff(n - 1,i)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        raise ValueError('n < k')\n    if n < 2:\n        return 1\n    p = binomial_Coeff(n-1,k-2)\n    q = binomial_Coeff(n-1,k)\n    return p * q\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    if k == 0: \n        return 1\n    if k == 1: \n        return n\n    if k == 2: \n        return n*n\n    kth_coeff = binomial_Coeff(n-1,k-1)\n    return kth_coeff * (n*k)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    final_ip = ''\n    for letter in ip:\n        if letter == '.':\n            break\n        else:\n            final_ip += letter\n    return final_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #Convert the input to lowercase\n    ip=ip.lower()\n    #Find the first zero\n    zero=ip.find('0')\n    if zero>0:\n        ip=ip.replace(ip[zero],\"\")\n    #Find the last zero\n    last_zero=ip.rfind('0')\n    #Remove the 0's\n    ip=ip[:last_zero+1]\n    #Remove any additional zeros\n    ip=ip.replace(\".\",\"\")\n    #Remove any spaces\n    ip=ip.replace(\" \",\"\")\n    #Remove any extra spaces\n    ip=ip.replace(\",\",\"\")\n    #Remove any extra zeros\n    ip=ip.replace(\".\",\"\")\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.lstrip('0')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    removezero = re.compile(r'^0+')\n    x = removezero.sub('',ip)\n    return x\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        ip = ip.split('.')\n        # get the number of bits\n        bits = len(ip[2])\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.lower()\n    if ip[0]=='0':\n        return ip\n    elif ip[-1]=='0':\n        return ip[:-1]\n    else:\n        ip=ip[:-1]\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip == \"0\"):\n        return ip\n    else:\n        temp = \"\"\n        for i in ip:\n            if(i == \"0\"):\n                temp = temp + i\n        return temp\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    IP_regex = r'^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$'\n    res = re.match(IP_regex, ip)\n    if res:\n        return ip.replace(res.group(0), \"\")\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    for i in range(len(ip)):\n        if ip[i] == '.':\n            break\n    else:\n        return ip\n    if ip.startswith('0.'):\n        ip = ip[1:]\n    elif ip.startswith('0'):\n        ip = ip[1:]\n    elif ip.startswith('0') and ip.endswith('.'):\n        ip = ip[:-1]\n    else:\n        ip = ip\n    return ip\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff_even_odd = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            diff_even_odd += list1[i]\n        else:\n            diff_even_odd -= list1[i]\n    return diff_even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list = []\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i % 2 == 0:\n            new_list.append(i)\n        else:\n            odd_list.append(i)\n    \n    for i in new_list:\n        if len(odd_list) == 0:\n            even_list.append(i)\n        elif len(even_list) == 0:\n            even_list.append(i)\n        elif i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    \n    print(\"Even numbers are:\", even_list)\n    print(\"Odd numbers are:\", odd_list)\n    print(\"The difference between even numbers and odd numbers is:\", (len(new_list) - len(odd_list)))\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        diff = list1[::2] - list1[1::2]\n    else:\n        diff = list1[1::2] - list1[::2]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list_of_numbers = []\n    for i in list1:\n        list_of_numbers.append(i)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even_number = int(len(list1) / 2)\n    first_odd_number = int(len(list1) / 2)\n    if list1[first_even_number] % 2 == 0:\n        return list1[first_even_number]\n    else:\n        return list1[first_odd_number]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # your code here\n    diff = []\n    for i in range(0,len(list1),2):\n        diff.append(list1[i+1]-list1[i])\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    #declare a variable to store the list\n    even_odd = []\n    \n    #loop through the list \n    for n in list1:\n        #if the number is even \n        if n%2 == 0:\n            #add the number to the even_odd list\n            even_odd.append(n)\n        #else \n        else:\n            #add the number to the odd_odd list\n            odd_odd.append(n)\n    #return the list\n    return(even_odd)\n    "
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_index = list1.index(list1[0])\n    return even_odd_index - 1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    def even_odd(num):\n        if num % 2 == 0:\n            return \"Even\"\n        else:\n            return \"Odd\"\n    \n    if not list1:\n        return None\n    return [i for i in list1 if even_odd(i)!= list1[i]]\n    \nlist1 = [3,5,2,3,6,7,9]"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # swap dictionary\n    swap_dictionary = {}\n    for x in range(0,7):\n        swap_dictionary[x] = 0\n    for x in range(0,7):\n        swap_dictionary[x] = 0\n    \n    # intialize count\n    count = 0\n    \n    # convert the string to binary\n    # swap string\n    for i in range(0, len(str1)):\n        \n        if str1[i]!= str2[i]:\n            # swap the one\n            swap_dictionary[str1[i]] = str2[i]\n            swap_dictionary[str2[i]] = str1[i]\n            \n            count += 1\n            \n        else:\n            pass\n    \n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    N=len(str1)\n    M=len(str2)\n    table=[0 for i in range(N)]\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return (1 + min(min(int(s, 2), len(str1)-1), min(int(s, 2), len(str2)-1)))\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #compare the left of the binary number with the right one\n    compare = 0\n    for i in range(len(str1)-1) : \n        if str1[i]!= str2[i] : \n            compare += 1\n        else : \n            break\n    #now do the same for the right one\n    compare += 1\n    \n    #since the leftmost bit is 0 or 1, just do the same for the rightmost bit\n    compare += 1\n    for i in range(len(str1)-1,-1,-1) :\n        if str1[i]!= str2[i] :\n            compare += 1\n        else : \n            break\n    return compare\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    for i in range(n1):\n        for j in range(i,n1):\n            if str1[j] == str2[j]:\n                n1 = n1 - 1\n                n2 = n2 - 1\n                count += 1\n            elif str1[j]!= str2[j]:\n                break\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #Splitting string\n    temp = str1[::-1]\n    temp2 = str2[::-1]\n    \n    #Two variables to store number of swaps required\n    swaps = 0\n    \n    #While string is present\n    while (str1[0] == str2[0]):\n        #swaps++\n        swaps += 1\n        #If string is not length of 2,\n        if (len(str1)!= len(str2)):\n            #Set string to last character\n            str2 = str2[len(str2)-1::-1]\n        #If string is length of 2\n        else:\n            #Set string to last character\n            str1 = str1[len(str1)-1::-1]\n    \n    #print(str1,str2)\n    #print(swaps)\n    \n    #While string is not length of 2\n    while (str1[0]!= str2[0]):\n        #swaps++\n        swaps += 1\n        #If string is length of 2,\n        if (len(str1)!= len(str2)):\n            #Set string to last character\n            str2 = str2[len(str2)-1::-1]\n        #If string is length of 2\n        else:\n            #Set string to last character\n            str1 = str1[len(str1)-1::-1]\n    \n    #print(str1,str2)\n    #print(swaps)\n    \n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    s1=str1\n    s2=str2\n    \n    for i in range(len(s1)):\n        if s1[i]=='1':\n            if s2[i]=='1':\n                count=count+1\n            else:\n                count=count+1\n        elif s1[i]=='0':\n            if s2[i]=='0':\n                count=count+1\n            else:\n                count=count+1\n    return count\n        \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i] :\n            if str1[i] == '1' and str2[i] == '0' :\n                c += 1\n            elif str1[i] == '1' and str2[i] == '1' :\n                c += 1\n            else :\n                c += 2\n    return c\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if (not isinstance(str1, str)) : \n        return None\n    if (not isinstance(str2, str)) : \n        return None\n    return len(str1) - len(str2)\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Solution from https://www.geeksforgeeks.org/minimum-number-of-swaps-required-to-convert-binary-string-to-a-dynamic-programming-language/\n    m = max(len(str1),len(str2))\n    # for i in range(m):\n    #     if str1[i]=='1':\n    #         str1[i]=0\n    #     else:\n    #         str1[i]=1\n    #     if str2[i]=='1':\n    #         str2[i]=0\n    #     else:\n    #         str2[i]=1\n    def CountSwaps(str1,str2):\n        count=0\n        for i in range(len(str1)):\n            if str1[i]==str2[i]:\n                str1[i]=1-str1[i]\n                str2[i]=0-str2[i]\n                count+=1\n        return count\n    return CountSwaps(str1,str2)\n    # print(CountSwaps(str1,str2))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(len(tuple_list[0]), end=\" \")\n    return sys.getsizeof(tuple_list[0]) + sys.getsizeof(tuple_list[1]) + sys.getsizeof(tuple_list[2]) + sys.getsizeof(tuple_list[3])\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_bytes = 0\n    for item in tuple_list:\n        total_bytes += item.__sizeof__()\n    return total_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # if the size of a tuple is zero, it returns zero.\n    if len(tuple_list) == 0:\n        return 0\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += len(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total = 0\n    for t in tuple_list:\n        total += len(t)\n    return total\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    if(len(tuple_list) > 0):\n        if(len(tuple_list) == 1):\n            return sys.getsizeof(tuple_list[0])\n        else:\n            return tuple_size(tuple_list[0]) + tuple_size(tuple_list[1:])\n    else:\n        return 0\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * 8\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr2)-1\n    \n    while left < right:\n        mid = (left+right)//2\n        if arr1[mid] < arr2[mid]:\n            left = mid+1\n        else:\n            right = mid\n    \n    return arr1[left]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1[k] > arr2[k]:\n        return find_kth(arr1, arr2, k)\n    elif arr1[k] == arr2[k]:\n        return arr1[k]\n    else:\n        return find_kth(arr1, arr2, k-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) or k > len(arr2):\n        return 'not found'\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pos = 0\n    n = len(arr1)\n    while(pos < n):\n        mid = pos + ((n - pos) / 2)\n        if (arr1[mid] <= arr2[k - 1]):\n            pos = mid\n        else:\n            pos = (pos + mid) // 2\n    return arr1[pos]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1:\n        raise IndexError\n    if not arr2:\n        raise IndexError\n    if k == 1:\n        return arr1[k-1]\n    if k > len(arr1):\n        return arr2[k-1]\n    left = 0\n    right = len(arr1)-1\n    \n    while left < right:\n        mid = left + (right-left)//2\n        if arr1[mid] < arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return arr1[left]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    def find_kth(arr1, arr2, k):\n        # Make a copy of the lists\n        arr1 = copy.copy(arr1)\n        arr2 = copy.copy(arr2)\n        # Traverse through both lists\n        for i in range(k):\n            # If kth is greater than number of elements in arr1\n            if arr1[i] > arr2[i]:\n                # Swap the elements\n                arr1[i], arr2[i] = arr2[i], arr1[i]\n                # Move the pointer to next one\n                i += 1\n        # Return the value of the last element\n        return arr1[i]\n    return find_kth(arr1, arr2, k"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def findKth(arr1, arr2, k):\n        l1, l2 = 0, 0\n        while l1 < len(arr1) and l2 < len(arr2):\n            if arr1[l1] > arr2[l2]:\n                l2 += 1\n            elif arr1[l1] < arr2[l2]:\n                l1 += 1\n            else:\n                if l2 == len(arr2):\n                    return arr2[l1 + k - 1]\n                elif l1 == len(arr1):\n                    return arr1[l2 + k - 1]\n                else:\n                    return arr1[l1 + k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # index of arr1, arr2, k\n    \n    # if k is equal to the length of both arrays, return arr1\n    if (len(arr1) == len(arr2) and len(arr1) == k):\n        return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr1[mid] <= arr2[k - 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if left == len(arr1) - 1:\n        return arr1[left]\n    else:\n        return arr2[left"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return(arr1[k - 1] if k >= 0 else arr2[k - 1]"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in range(len(str(number))):\n        sum += int(str(number)[i])\n    if number == sum:\n        print(\"{} is a armstrong number\".format(number))\n    else:\n        print(\"{} is not a armstrong number\".format(number))\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = int(number)\n    d = 0\n    while num > 0:\n        d = d + 1\n        q = num % 10\n        num = num // 10\n    \n    if d == len(str(num)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def calc(number):\n        '''\n        Implement this function, and solve the problem in the editor below.\n        '''\n        d = 0\n        for i in number:\n            if i.isnumeric():\n                d += int(i)\n        \n        if d == number:\n            return True\n        else:\n            return False\n    return calc(number)\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    for i in range(1, number//10):\n        if number % 10**i == 0:\n            count += 1\n    if count == number//10:\n        print(\"Armstrong number\")\n    else:\n        print(\"Not Armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = 0\n    s = 0\n    while n <= number:\n        s += 1\n        n = int(str(n)[-1])\n        n = n * 10\n    i = s\n    while i >= 1:\n        s = 0\n        while s <= i:\n            s = s + 1\n            n = int(str(n)[-1])\n            n = n * 10\n        if n == i:\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in range(0,number):\n        sum += int(i)\n    if number == sum:\n        return \"Armstrong\"\n    else:\n        return \"Not Armstrong\"\nprint(armstrong_number(5))\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    i = 0\n    sum = 0\n    while(i < len(number)):\n        sum = sum + int(number[i])\n        i = i + 1\n        if(sum == number[i]):\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # initialize and set the reminder count to 0\n    reminder_count = 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    max_digit = int(max(str(number)))\n    while max_digit >= 1:\n        if str(number) == str(number)[::-1]:\n            return True\n        else:\n            number = number / 10\n            max_digit -= 1\n    return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        total += i\n    average = total / number\n    print(f'The total is {total} and the average is {average:.2f}.')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return(sum(x for x in range(number) if x%2==0) + sum(x for x in range(number) if x%2!=0))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    first_n = number\n    sum = 0\n    average = 0\n    i = 0\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for number in range(1, n+1):\n        sum += number\n    average = sum/n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not number:\n        return\n    if number<=0:\n        return\n    if len(str(number))<=2:\n        return(number)\n    else:\n        total=0\n        for i in range(1,len(str(number))):\n            total+=int(str(number)[i])\n        average=total/len(str(number))\n        print(f'Sum={total}, Average={average}')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num_list = []\n    num_sum = 0\n    num_average = 0\n    for i in range(1,number+1):\n        num_list.append(i)\n    \n    for i in num_list:\n        num_sum += i\n        \n    return num_sum/len(num_list)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Write your code here\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n        average += i\n    average = sum/number\n    return sum,average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 1:\n        return number\n    elif number == 2:\n        return number*2\n    elif number == 3:\n        return number*3\n    elif number == 4:\n        return number*4\n    else:\n        return number*number\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print (\"The number is even\")\n    else : \n        print (\"The number is odd\") \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is not even\")\n    return\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    string = str1.lower()\n    output = ''\n    for i in string:\n        if i == i:\n            output += i\n        else:\n            if output!= '':\n                output = output[0]\n    return output\n    \ndef reverse_string(str1):\n    '''\n    Write a python function to find the reverse of a given string.\n    '''\n    return str1[::-1]\n    \ndef is_palindrome(str1):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_recursive(str1, length):\n    '''\n    Write a recursive function to check if a given string is a palindrome.\n    '''\n    if length == 1:\n        if str1 == str1[::-1]:\n            return True\n        else:\n            return False\n    else:\n        first_repeated_str = first_repeated_char(str1)\n        if str1 == first_repeated_str:\n            return True\n        else:\n            return is_palindrome_recursive(str1[1:], length-1) or is_palindrome_recursive(str1[1:], length-1) or is_palindrome_recursive(str1[1:], length-1)\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeat = \"\"\n    if str1 == \"\":\n        return \"\"\n    for i in range(0, len(str1)):\n        if str1[i] in str1:\n            first_repeat += str1[i]\n        else:\n            return first_repeat\n    return first_repeat\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to hold the characters and count the occurrence\n    char_dict = {}\n    char_dict[char] = 0\n    # loop through the string, if the char is present in the dictionary return its index\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n    # return the index of the first occurence of the char\n    for char in char_dict:\n        if char_dict[char] == 1:\n            return char_dict[char]\n    # if no characters are found return -1\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    for char,count in count.items():\n        if count == 1:\n            return char\n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = {}\n    for char in str1:\n        if char in s:\n            s[char] = s[char] + 1\n        else:\n            s[char] = 1\n    for char in s:\n        if s[char] > 1:\n            return char\n    return''\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # iterate through the string\n    for char in str1:\n        # if the char is repeated\n        if char in str1:\n            # check if the char has already been found\n            if str1.count(char) == 1:\n                # return the char\n                return char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return None\n    if len(str1) < 1:\n        return None\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[j] == str1[i]:\n                return str1[j]\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq = dict()\n    for letter in str1:\n        if letter not in freq:\n            freq[letter] = 0\n        freq[letter] += 1\n    for letter in freq:\n        if freq[letter] == 1:\n            return letter\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        return None\n    if str1[0] == str1[0]:\n        return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if str1[i]!= str1[i-1]:\n            if str1[i] == str1[i-1]:\n                result = str1[i]\n            else:\n                result = str1[i]\n                break\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [number for number in range(1, n+1) if number % 10!= 0 or number % 3 == 0]\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i < 100:\n            ludic.append(i)\n        else:\n            ludic.append(i % 10)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            res.append(i)\n        elif i % 3 == 0:\n            res.append(i)\n        else:\n            pass\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1,n+1):\n        if i < n:\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    result.append(i)\n            elif i % 3 == 0:\n                if i % 5 == 0:\n                    result.append(i)\n    return result\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        lud = 0\n        while True:\n            lud += i\n            if lud > 100:\n                break\n            else:\n                lud += 1\n                if lud == 100:\n                    break\n        if lud == 100:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    nums = []\n    for i in range(1,n+1):\n        nums.append(i)\n    result = []\n    for i in range(1,n+1):\n        if i < 10:\n            result.append(i)\n        elif i % 10 == 5:\n            result.append(i)\n    return result"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n, 0, -1):\n        if int(i) < int(ludic[-1]):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 3 or (n == 3 and (n <= 9)):\n        return [1,2,3,4,5,6,7,8,9]\n    else:\n        return [i for i in range(1, n+1) if i%2 == 0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i < n:\n            if i%10 == 0:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(list(map(lambda word: word[::-1], s.split())))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join([word[::-1] for word in s.split()])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    new_s = \"\"\n    if s:\n        for i in s.split():\n            new_s += i[::-1] + \" \"\n    return new_s\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s_rev = ''\n    for word in s:\n        s_rev += word[::-1] +''\n    return s_rev\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = list(s)\n    l = len(s)\n    for i in range(l):\n        for j in range(l-i-1):\n            if s[j] =='':\n                s[j] = s[j+1]\n                s[j+1] =''\n    print(\" \".join(s))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse(s):\n        # reverse all words\n        return \" \".join(word[::-1] for word in s.split())\n    return reverse(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return (s.split(\" \"))[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip().split()\n    result = \"\"\n    for word in s:\n        result = result + word[::-1] + \" \"\n    return result[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    words = words[::-1]\n    return \" \".join(words)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<2:\n        return False\n    if num==2:\n        return True\n    if num==3:\n        return True\n    \n    if num%2==0 or num%3==0:\n        return False\n    if num==5:\n        return True\n    \n    for i in range(2,num//2):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef ncr(n, r):\n    '''\n    Write a function that returns the n-th positive integer that is a square of the given r-length.\n    '''\n    if r < 0:\n        return\n    if r == 0:\n        return 1\n    if r == 1:\n        return n\n    return n * ncr(n-1,r-1)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5,int(math.sqrt(num))+1,6):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Corner cases\n    if num <= 1:\n        return False\n    elif num <= 3:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # prime number is the only integer number that divides evenly into other numbers.\n    if num <= 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1 or num == 2 or num == 3:\n        return True\n    elif num < 2 or num > int(math.sqrt(num)):\n        return False\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(f'{num} is not a prime number')\n                return False\n        print(f'{num} is a prime number')\n        return True\n    else:\n        print(f'{num} is not a prime number')\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree *(math.pi/180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi/180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (3.141592 / 180)\ndef angle_of_the_sun(lat, long):\n    '''\n    Write a function that takes the latitude and longitude of a given location as input\n    and returns the angle of the sun at that location.\n    '''\n    # Get the absolute value of latitude\n    lat_abs_value = math.radians(lat)\n    # Get the absolute value of longitude\n    long_abs_value = math.radians(long)\n    # Get the difference between the two values\n    difference_lat = lat_abs_value - long_abs_value\n    # Get the difference in degrees\n    angle = (difference_lat) * (5 / 360)\n    # Get the difference in radians\n    angle_in_radian = radian_degree(angle)\n    # Get the difference in degrees\n    angle_in_degree = math.degrees(angle_in_radian)\n    # Convert the angle in radians to degrees\n    return angle_in_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree>180:\n        degree=degree-360\n        rad=degree/180*math.pi\n    else:\n        rad=degree/180*math.pi\n    return rad\ndef celsius_kelvin_to_kelvin(degree,precision=3):\n    '''\n    Write a function that converts a degree in kelvin to a degree in kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.radians(degree)\n    degree=math.degrees(degree)\n    kelvin=rad+(precision*(celsius+degree))\n    return kelvin\ndef kelvin_to_celsius(degree,precision=3):\n    '''\n    Write a function that converts degrees to kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.radians(degree)\n    degree=math.degrees(degree)\n    kelvin=precision*(degree+0.5*(celsius+degree))\n    return kelvin\ndef kelvin_to_c(degree,precision=3):\n    '''\n    Write a function that converts degrees to celcius.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.degrees(degree)\n    degree=math.degrees(degree)\n    c=precision*(degree+0.5*(celsius+degree))\n    return c\ndef celsius_to_kelvin(degree,precision=3):\n    '''\n    Write a function that converts degrees to kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.radians(degree)\n    degree=math.degrees(degree)\n    kelvin=precision*(degree+0.5*(celsius+degree))\n    return kelvin\ndef kelvin_to_celsius(degree,precision=3):\n    '''\n    Write a function that converts degrees to celcius.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.degrees(degree)\n    degree=math.degrees(degree)\n    c=precision*(degree+0.5*(celsius+degree))\n    return c\ndef kelvin_to_c(degree,precision=3):\n    '''\n    Write a function that converts degrees to celcius.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.degrees(degree)\n    degree=math.degrees(degree)\n    c=precision*(degree+0.5*(celsius+degree))\n    return c\ndef kelvin_to_kelvin(degree,precision=3):\n    '''\n    Write a function that converts degrees to kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.radians(degree)\n    degree=math.degrees(degree)\n    kelvin=precision*(degree+0.5*(celsius+degree))\n    return kelvin\ndef kelvin_to_kelvin(degree,precision=3):\n    '''\n    Write a function that converts degrees to kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    celsius=math.degrees(degree)\n    degree=math.degrees(degree)\n    kelvin=precision*(degree+0.5*(celsius+degree))\n    return kelvin\ndef deg_to_rad(degree,precision=3):\n    '''\n    Write a function that converts degrees to radians.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    c=precision*(degree+0.5*(rad))\n    return c\ndef rad_to_deg(degree,precision=3):\n    '''\n    Write a function that converts degrees to radians.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    precision: How many places of precision to the degree value.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    c=precision*(degree+0.5*(rad))\n    return c\ndef convert_to_degree(degree):\n    '''\n    Write a function that converts degrees to degrees.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    deg=degree+0.5*(rad)\n    return deg\ndef convert_to_rad(degree):\n    '''\n    Write a function that converts degrees to radians.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    c=degree+0.5*(rad)\n    return c\ndef convert_to_c(degree):\n    '''\n    Write a function that converts degrees to celcius.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    celsius=degree+0.5*(rad)\n    return celsius\ndef convert_to_kelvin(degree):\n    '''\n    Write a function that converts degrees to kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    kelvin=degree+0.5*(rad)\n    return kelvin\ndef convert_to_kelvin_abbr(degree):\n    '''\n    Write a function that converts degrees to kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    kelvin=degree+0.5*(rad)\n    return kelvin\ndef convert_to_kelvin_deg(degree):\n    '''\n    Write a function that converts degrees to kelvin.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    kelvin=degree+0.5*(rad)\n    return kelvin\ndef convert_to_celsius_abbr(degree):\n    '''\n    Write a function that converts degrees to celcius.\n    \n    Arguments:\n    degree: A number in degrees between 0 and 360.\n    '''\n    rad=radian_degree(degree)\n    degree=math.degrees(degree)\n    celsius=degree+"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree/360*math.pi\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    angle = degree*(math.pi/180)\n    return angle\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_hour(hour):\n    '''\n    Convert hour (in hours) to radians.\n    '''\n    return hour*radian_degree(1/24)\ndef radian_min(min):\n    '''\n    Convert minutes (in minutes) to radians.\n    '''\n    return min*radian_degree(1/60)\ndef radian_sec(sec):\n    '''\n    Convert seconds (in seconds) to radians.\n    '''\n    return sec*radian_degree(1/60)\ndef convert_hours_min_sec(hours,minutes,seconds):\n    '''\n    Convert hours (in hours) to minutes and seconds.\n    '''\n    return hours+minutes+seconds\ndef round_to_second(num, places=2):\n    '''\n    Round a number to the given number of places\n    '''\n    return int(math.ceil(num * (10 ** places)))\ndef float_to_float(float_num):\n    '''\n    Convert a number to a float number.\n    '''\n    return float(round_to_second(float_num,places=2))\ndef is_even(number):\n    '''\n    Return True if a number is even, False if not.\n    '''\n    return (number%2==0)\ndef is_even_or_odd(number):\n    '''\n    Return True if a number is even, False if not.\n    '''\n    if(is_even(number)):\n        return True\n    else:\n        return False\ndef is_integer(number):\n    '''\n    Return True if a number is an integer, False if not.\n    '''\n    try:\n        int(number)\n        return True\n    except:\n        return False\ndef is_positive(number):\n    '''\n    Return True if a number is positive, False if not.\n    '''\n    return (is_integer(number) or is_positive(number))\ndef is_negative(number):\n    '''\n    Return True if a number is negative, False if not.\n    '''\n    return (is_integer(number) or is_negative(number))\ndef is_positive_or_negative(number):\n    '''\n    Return True if a number is positive or negative, False if not.\n    '''\n    if(is_integer(number) or is_negative(number)):\n        return True\n    else:\n        return False\ndef is_positive_or_negative_or_zero(number):\n    '''\n    Return True if a number is positive or negative, or zero, False if not.\n    '''\n    if(is_positive_or_negative(number) or is_positive_or_negative(number) or is_zero(number)):\n        return True\n    else:\n        return False\ndef is_zero(number):\n    '''\n    Return True if a number is 0, False if not.\n    '''\n    return (is_integer(number) or is_positive_or_negative(number))\ndef is_integer_or_negative(number):\n    '''\n    Return True if a number is an integer or negative, False if not.\n    '''\n    return (is_integer(number) or is_negative(number))\ndef is_integer_or_zero(number):\n    '''\n    Return True if a number is an integer or positive, or zero, False if not.\n    '''\n    return (is_integer(number) or is_positive_or_negative(number))\ndef is_negative_or_zero(number):\n    '''\n    Return True if a number is negative or zero, False if not.\n    '''\n    return (is_negative_or_zero(number) or is_zero(number))\ndef is_greater_or_equal(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, False if not.\n    '''\n    return (number1>number2)\ndef is_equal(number1,number2):\n    '''\n    Return True if a number is equal to the other number, False if not.\n    '''\n    return (number1==number2)\ndef is_less_or_equal(number1,number2):\n    '''\n    Return True if a number is less than or equal to the other number, False if not.\n    '''\n    return (number1<number2)\ndef is_greater_or_equal_or_zero(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, or zero, or negative, False if not.\n    '''\n    if(is_greater_or_equal(number1,number2) or is_zero(number1) or is_negative(number1)):\n        return True\n    else:\n        return False\ndef is_equal_or_negative(number1,number2):\n    '''\n    Return True if a number is equal to the other number, or negative, False if not.\n    '''\n    if(is_equal(number1,number2)):\n        return True\n    else:\n        return False\ndef is_greater_or_equal_or_zero(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, or zero, or negative, False if not.\n    '''\n    if(is_greater_or_equal_or_zero(number1,number2)):\n        return True\n    else:\n        return False\ndef is_greater_than_or_equal_zero(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, and zero, or negative, False if not.\n    '''\n    if(is_greater_than_or_equal(number1,number2)):\n        return True\n    else:\n        return False\ndef is_greater_than_or_equal_zero(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, and zero, or negative, False if not.\n    '''\n    if(is_greater_than_or_equal_zero(number1,number2)):\n        return True\n    else:\n        return False\ndef is_greater_than_or_equal_or_zero(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, or zero, or negative, False if not.\n    '''\n    if(is_greater_than_or_equal_or_zero(number1,number2)):\n        return True\n    else:\n        return False\ndef is_greater_than_zero(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, or zero, False if not.\n    '''\n    if(is_greater_than(number1,number2)):\n        return True\n    else:\n        return False\ndef is_greater_than(number1,number2):\n    '''\n    Return True if a number is greater than or equal to the other number, False if not.\n    '''\n    if(is_greater_than_or_equal(number1,number2)):\n        return True\n    else:\n        return False\ndef is_less_than_or_equal_zero(number1,number2):\n    '''\n    Return True if a number is less than or equal to the other number, or zero, False if not.\n    '''\n    if(is_less_than_or_equal_or_zero(number1,number2)):\n        return True\n    else:\n        return False\ndef is_less_than_or_equal(number1,number2):\n    '''\n    Return True if a number is less than or equal to the other number, False if not.\n    '''\n    if(is_less_than(number1,number2)):\n        return True\n    else:\n        return False\ndef is_less_than(number1,number2):\n    '''\n    Return True if a number is less than or equal to the other number, False if not.\n    '''\n    if(is_greater_than_zero(number1,number2)):\n        return True\n    else:\n        return False\ndef is"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    m = pattern.findall(text)\n    start = 0\n    end = len(m)\n    return (m, start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = 0\n    end = len(text) - 1\n    match = re.search(pattern, text)\n    if match is not None:\n        while match is not None:\n            start = match.start()\n            end = match.end()\n            yield match, start, end\n            match = re.search(pattern, text[start:end+1])\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = []\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Match the regex pattern at the beginning of the string\n    pattern = re.compile(pattern)\n    m = pattern.search(text)\n    while m is not None:\n        start = m.start()\n        end = m.end()\n        yield start, end, text[start:end]\n        m = pattern.search(text, start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match_pattern = re.search(pattern, text)\n    start_index = match_pattern.start()\n    end_index = match_pattern.end()\n    return text[start_index:end_index], start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.findall(pattern, text, re.M | re.S | re.X)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match is None:\n        return None, None, None\n    match_str = match.group()\n    start_index = match.start()\n    end_index = match.end()\n    return match_str, start_index, end_index\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match_start = re.findall(pattern, text)\n    match_end = match_start[0]\n    match_start = match_start[0]\n    return match_start, match_end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Format the pattern into a list of lists\n    pattern_list = pattern.split(\"|\")\n    pattern = \"\"\n    for pattern in pattern_list:\n        pattern = pattern.replace(\"(\", \" ( \")\n        pattern = pattern.replace(\")\", \" ) \")\n        pattern = pattern.replace(\"[\", \" [ \")\n        pattern = pattern.replace(\"]\", \" ] \")\n        pattern = pattern.replace(\"<\", \"< \")\n        pattern = pattern.replace(\">\", \" > \")\n        pattern = pattern.replace(\"-\", \" - \")\n        pattern = pattern.replace(\"'\", \" \")\n        pattern = pattern.replace('\"', \" \")\n        pattern = pattern.replace(\",\", \", \")\n        pattern = pattern.replace(\"*\", \" * \")\n        pattern = pattern.replace(\"\\\\\", \" \")\n        pattern = pattern.replace(\";\", \" \")\n        pattern = pattern.replace(\"?\", \" \")\n        pattern = pattern.replace(\"#\", \" \")\n        pattern = pattern.replace(\"$\", \" \")\n        pattern = pattern.replace(\"&\", \" \")\n        pattern = pattern.replace(\"`\", \" \")\n        pattern = pattern.replace(\"_\", \" \")\n        pattern = pattern.replace(\"\\\"\", \" \")\n        pattern = pattern.replace(\"|\", \" \")\n        pattern = pattern.replace(\".*\", \" \")\n        pattern = pattern.replace(\"!\", \" \")\n        pattern = pattern.replace(\"-\",\" - \")\n        pattern = pattern.replace(\"=\",\" = \")\n        pattern = pattern.replace(\"+\",\" + \")\n        pattern = pattern.replace(\"$\",\" $ \")\n        pattern = pattern.replace(\"&\",\" & \")\n        pattern = pattern.replace(\"`\",\" \")\n        pattern = pattern.replace(\"_\",\" \")\n        pattern = pattern.replace(\"/\",\" / \")\n        pattern = pattern.replace(\"\\\\\",\" \")\n        pattern = pattern.replace(\";\",\" \")\n        pattern = pattern.replace(\"\\\"\", \" \")\n        pattern = pattern.replace(\".\", \" \")\n        pattern = pattern.replace(\",\", \", \")\n        pattern = pattern.replace(\"*\",\" * \")\n        pattern = pattern.replace(\"[\",\" [ \")\n        pattern = pattern.replace(\"]\",\" ] \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\">\",\" > \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\".\",\" \")\n        pattern = pattern.replace(\"!\", \" \")\n        pattern = pattern.replace(\"-\",\" - \")\n        pattern = pattern.replace(\"=\",\" = \")\n        pattern = pattern.replace(\"+\",\" + \")\n        pattern = pattern.replace(\"$\",\" $ \")\n        pattern = pattern.replace(\"&\",\" & \")\n        pattern = pattern.replace(\"`\",\" \")\n        pattern = pattern.replace(\"_\",\" \")\n        pattern = pattern.replace(\"/\",\" / \")\n        pattern = pattern.replace(\"\\\\\",\" \")\n        pattern = pattern.replace(\";\",\" \")\n        pattern = pattern.replace(\"\\\"\",\" \")\n        pattern = pattern.replace(\".\", \" \")\n        pattern = pattern.replace(\",\", \", \")\n        pattern = pattern.replace(\"*\",\" * \")\n        pattern = pattern.replace(\"[\",\" [ \")\n        pattern = pattern.replace(\"]\",\" ] \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\">\",\" > \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\".\",\" \")\n        pattern = pattern.replace(\"!\", \" \")\n        pattern = pattern.replace(\"-\",\" - \")\n        pattern = pattern.replace(\"=\",\" = \")\n        pattern = pattern.replace(\"+\",\" + \")\n        pattern = pattern.replace(\"$\",\" $ \")\n        pattern = pattern.replace(\"&\",\" & \")\n        pattern = pattern.replace(\"`\",\" \")\n        pattern = pattern.replace(\"_\",\" \")\n        pattern = pattern.replace(\"/\",\" / \")\n        pattern = pattern.replace(\"\\\\\",\" \")\n        pattern = pattern.replace(\";\",\" \")\n        pattern = pattern.replace(\"\\\"\",\" \")\n        pattern = pattern.replace(\".\", \" \")\n        pattern = pattern.replace(\",\", \", \")\n        pattern = pattern.replace(\"*\",\" * \")\n        pattern = pattern.replace(\"[\",\" [ \")\n        pattern = pattern.replace(\"]\",\" ] \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\">\",\" > \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\".\",\" \")\n        pattern = pattern.replace(\"!\", \" \")\n        pattern = pattern.replace(\"-\",\" - \")\n        pattern = pattern.replace(\"=\",\" = \")\n        pattern = pattern.replace(\"+\",\" + \")\n        pattern = pattern.replace(\"$\",\" $ \")\n        pattern = pattern.replace(\"&\",\" & \")\n        pattern = pattern.replace(\"`\",\" \")\n        pattern = pattern.replace(\"_\",\" \")\n        pattern = pattern.replace(\"/\",\" / \")\n        pattern = pattern.replace(\"\\\\\",\" \")\n        pattern = pattern.replace(\";\",\" \")\n        pattern = pattern.replace(\"\\\"\",\" \")\n        pattern = pattern.replace(\".\", \" \")\n        pattern = pattern.replace(\",\", \", \")\n        pattern = pattern.replace(\"*\",\" * \")\n        pattern = pattern.replace(\"[\",\" [ \")\n        pattern = pattern.replace(\"]\",\" ] \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\">\",\" > \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\".\",\" \")\n        pattern = pattern.replace(\"!\", \" \")\n        pattern = pattern.replace(\"-\",\" - \")\n        pattern = pattern.replace(\"=\",\" = \")\n        pattern = pattern.replace(\"+\",\" + \")\n        pattern = pattern.replace(\"$\",\" $ \")\n        pattern = pattern.replace(\"&\",\" & \")\n        pattern = pattern.replace(\"`\",\" \")\n        pattern = pattern.replace(\"_\",\" \")\n        pattern = pattern.replace(\"/\",\" / \")\n        pattern = pattern.replace(\"\\\\\",\" \")\n        pattern = pattern.replace(\";\",\" \")\n        pattern = pattern.replace(\"\\\"\",\" \")\n        pattern = pattern.replace(\".\",\" \")\n        pattern = pattern.replace(\",\", \", \")\n        pattern = pattern.replace(\"*\",\" * \")\n        pattern = pattern.replace(\"[\",\" [ \")\n        pattern = pattern.replace(\"]\",\" ] \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\">\",\" > \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\".\",\" \")\n        pattern = pattern.replace(\"!\", \" \")\n        pattern = pattern.replace(\"-\",\" - \")\n        pattern = pattern.replace(\"=\",\" = \")\n        pattern = pattern.replace(\"+\",\" + \")\n        pattern = pattern.replace(\"$\",\" $ \")\n        pattern = pattern.replace(\"&\",\" & \")\n        pattern = pattern.replace(\"`\",\" \")\n        pattern = pattern.replace(\"_\",\" \")\n        pattern = pattern.replace(\"/\",\" / \")\n        pattern = pattern.replace(\"\\\\\",\" \")\n        pattern = pattern.replace(\";\",\" \")\n        pattern = pattern.replace(\"\\\"\",\" \")\n        pattern = pattern.replace(\".\", \" \")\n        pattern = pattern.replace(\",\", \", \")\n        pattern = pattern.replace(\"*\",\" * \")\n        pattern = pattern.replace(\"[\",\" [ \")\n        pattern = pattern.replace(\"]\",\" ] \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\">\",\" > \")\n        pattern = pattern.replace(\"<\",\" < \")\n        pattern = pattern.replace(\".\",\" \")\n        pattern = pattern.replace(\"!\", \" \")\n        pattern = pattern.replace(\"-\",\" - \")\n        pattern = pattern.replace(\"=\",\" = \")\n        pattern = pattern.replace(\"+\",\" + \")\n        pattern = pattern.replace(\"$\",\" $ \")\n        pattern = pattern.replace(\"&\","
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern, re.MULTILINE)\n    match = regex.search(text)\n    return match.start(), match.end(), match.group()\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(n, n-1, -1):\n        # print(i)\n        if i*i == n:\n            return i\n    return 0\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    numbers = [1, 4, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n    n = len(numbers)\n    k = (n - 1) // 2\n    if n % 2 == 0:\n        return numbers[k]\n    else:\n        return numbers[k + 1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base cases\n    if n <= 1: \n        return n\n    # return the base cases \n    return n % 10 + bell_Number(n // 10)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    list1 = [2,3,5,7,11,13,17,19,23,29]\n    print(list1[len(list1)-n])\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n<0:\n        print(\"Error: Negative Index. \")\n    else:\n        # Part 1.\n        nth_bell = 1\n        while n>=2:\n            nth_bell *= (n-1)\n            n -= 1\n        print(nth_bell)\n    \n    # Part 2.\n    nth_bell = 1\n    while n>=2:\n        nth_bell *= (n-1)\n        n -= 1\n    print(nth_bell)\n    \n    # Part 3.\n    nth_bell = 1\n    while n>=2:\n        nth_bell *= (n-1)\n        n -= 1\n    print(nth_bell)\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3) + 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    print(\"The number of Bells is\", n) \n    \ndef find_missing_numbers():\n    '''\n    Write a python function to print the missing numbers.\n    '''\n    print(\"The missing numbers are:\", end=\" \")\n    for i in range(1,10):\n        if i%3==0:\n            print(i, end=\" \")\n    print(\"\\n\")\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here.\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 0\n    while i < n:\n        print(i+1)\n        i = i + 2\n    return None\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    print(list1)\n    temp = []\n    for i in range(len(list1)):\n        temp.append(list1[i])\n    print(temp)\n    temp.pop(L)\n    print(temp)\n    return temp\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n    if L == len(list1):\n        return result\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    if L[L.index(min(list1))] == min(list1):\n        del L[L.index(min(list1))]\n        return remove_kth_element(list1, L)\n    else:\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    return list1[:L-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return [list1[0]]\n    return remove_kth_element(list1, L-1) + [list1[L]]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return remove_kth_elem(list1, L, 0, len(list1))\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    if L == 0:\n        return []\n    if L < n:\n        list1.pop(L-1)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L.index(max(L))\n    return list1.pop(k)"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    l = len(test_list)\n    if l < N:\n        return \"Error: n must be greater than or equal to the length of the given list.\"\n    if l == 1:\n        return test_list[0][N-1]\n    return max(test_list[0][:N], max_of_nth(test_list[1:], N))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_N = test_list[0][N]\n    for x in test_list:\n        if x[N] > max_of_N:\n            max_of_N = x[N]\n    return max_of_N\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][0]\n    else:\n        return max(test_list[0][N-1], max_of_nth(test_list, N-1))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([test_list[i][N-1] for i in range(len(test_list))])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    m = len(test_list)\n    if m == 0:\n        return 0\n    elif m == 1:\n        return test_list[0][N - 1]\n    elif N == 1:\n        return max(test_list[0])\n    else:\n        return max(max_of_nth(test_list[0:N], N - 1), max_of_nth(test_list[N:], N - 1))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    s = 0\n    for i in range(len(test_list)):\n        s = s + test_list[i][N-1]\n    return s\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    if N == 1:\n        return test_list[0][N-1]\n    else:\n        return max(test_list[:,N-1])\n    return max_of_nth(test_list,N-1)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N]:\n            max_val = test_list[i][N]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[0][N-1]\n    for i in range(N):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # if we have a list of lists, we return the maximum of the column of each list\n    # if we have a single row, we return the maximum of the entire row\n    # if we have a single col, we return the maximum of all the col\n    def max_of_nth_col(test_list, N):\n        if len(test_list) <= N:\n            return test_list[0]\n        else:\n            return test_list[N-1]\n    \n    # we return the maximum of then'th column of the whole list\n    def max_of_nth_row(test_list, N):\n        if len(test_list) <= N:\n            return test_list[N]\n        else:\n            return test_list[N-1]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    if len(lst) == 0:\n        return []\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result\ndef simple_sort(lst):\n    '''\n    Sort the given list of lists using bubble sort.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)-i-1):\n            if lst[j][0] < lst[j+1][0]:\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    if len(lst) <= 1:\n        return lst\n    else:\n        return [lst[0]] + merge(lst[1:])\n    \ndef select(lst, target):\n    '''\n    Write a python function which takes a list and a target number, and returns the number of elements whose sum is equal to the target number.\n    '''\n    \n    if lst[0] == target:\n        return 1\n    else:\n        return select(lst[1:], target) + 1\n        \n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst2 = []\n    lst1 = lst\n    while len(lst1) > 0:\n        second_element = lst1[0][1]\n        for index, item in enumerate(lst1):\n            if item[1] == second_element:\n                second_element = item[0]\n        lst2.append((second_element, item[0]))\n        lst1.pop(0)\n    lst2.sort()\n    return lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    soln = []\n    if not lst:\n        return []\n    for sublist in lst:\n        for e in sublist:\n            soln.append(e)\n    return soln\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        out = []\n        for i in range(0, len(lst[0])):\n            for sublist in lst:\n                out.append([sublist[i], sublist[0]])\n        return out\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for elem in lst:\n        result.append([elem[0], elem[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0],lst[1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Initialize empty lists\n    list1 = []\n    list2 = []\n    \n    # Append elements from each list in the list\n    for i in lst:\n        list1.append(i[0])\n        list2.append(i[1])\n    \n    # Return merged lists\n    return list(list1), list(list2)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    new_lst = []\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    output = []\n    for i in lst:\n        for j in i:\n            output.append(j[0])\n            output.append(j[1])\n    return output\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = 0\n    for i in range(len(test_list)):\n        cummulative += test_list[i]\n    return cummulative\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # sum = 0\n    # for element in test_list:\n    #     if element!= 0:\n    #         sum = sum + element\n    # return sum\n    sum = 0\n    for element in test_list:\n        sum += element\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = 0\n    for i in test_list:\n        cum += i\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = []\n    for i in test_list:\n        cum.append(sum(i))\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = 0\n    for x in test_list:\n        cum += x\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    import itertools\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n    "
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # create a new list of tuples\n    new_list = []\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    return test_list[0] + cummulative_sum(test_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(nums[0][i] + nums[1][i])/2 for i in range(len(nums[0]))]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    t = []\n    for i in nums:\n        t.append(i)\n    return sum(t) / len(t)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n    return sum / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for x in nums:\n        result.append(sum(x) / len(x))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    assert(len(nums) >= 2)\n    assert(type(nums[0]) is tuple)\n    assert(type(nums[1]) is tuple)\n    assert(type(nums[0][0]) is tuple)\n    assert(type(nums[1][0]) is tuple)\n    assert(len(nums[0]) == len(nums[1]))\n    assert(len(nums[0]) == len(nums[0][0]))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    s=[]\n    for num in nums:\n        for i in num:\n            s.append(i)\n    return s\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num) / len(num) for num in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for num in nums:\n        average.append(sum(num)/len(num))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #Your code here\n    t=()\n    sum=0\n    for i in nums:\n        sum+=i[1]\n        for j in i[0]:\n            t.append((sum/len(i[0])))\n    return t\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Invalid tuple!\")\n        return\n    else:\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                test_tup1[i] = - test_tup1[i]\n            if test_tup1[i] < test_tup2[i]:\n                test_tup2[i] = - test_tup2[i]\n        return tuple(test_tup1), tuple(test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    print()\n    print(\"===Tuple Modulo:\")\n    print(test_tup1, end=' ')\n    print(test_tup2, end=' ')\n    print()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] % test_tup2[i] == 0:\n                print(\"Not Equal\")\n            else:\n                print(\"Equal\")\n    else:\n        print(\"Lengths are not equal\")\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    x = 0\n    for i in range(0, len(test_tup1)):\n        x = x + test_tup1[i] * test_tup2[i]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = 0\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            print(\"ERROR: The given element is not present in the given tuple\")\n            break\n        else:\n            mod = mod%tup[1]\n    return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuples must be the same length'\n    elif tuple(test_tup1) == tuple(test_tup2):\n        return 0\n    else:\n        return tuple(map(lambda x: x % 10, test_tup1))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #modulo = tuple.__mod__(tuple1, tuple2)\n    return test_tup1 % test_tup2\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"length of test_tup1 and test_tup2 must be equal\"\n    mod = 0\n    for i in range(len(test_tup1)):\n        mod = mod * test_tup1[i] + test_tup2[i]\n    return mod\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Your code here\n    modulo = []\n    modulo.append(0)\n    modulo.append(0)\n    for i in range(len(test_tup1)):\n        modulo.append(test_tup1[i] % test_tup2[i])\n    return modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup1 = tuple(map(lambda x: x % 2, test_tup1))\n    new_tup2 = tuple(map(lambda x: x % 2, test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Initialize the array with -1\n    jumps = [] \n    #Record the starting point of the path\n    start = (steps[0][0], steps[0][1])\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    \n    if steps % 2 == 0: \n        # If there's even number of jumps, the jumps will be the first jump \n        return min_Jumps(steps + 1, d + 1)\n    \n    # If there's odd number of jumps, the jumps will be the second jump \n    return min_Jumps(steps + 1, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    N = len(steps)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps): \n        jumps += int(abs(d) - abs(steps - i)) \n        # print(int(abs(steps - i)), int(abs(d - steps - i)), int(abs(d - steps - i) - abs(steps - i))) \n        if int(abs(d - steps - i)) + int(abs(steps - i)) == int(abs(d - steps - i) - abs(steps - i)): \n            print(int(abs(steps - i)), int(abs(d - steps - i)), int(abs(d - steps - i) - abs(steps - i))) \n            return int(abs(steps - i)) + int(abs(d - steps - i)) \n            break \n    # print(int(abs(steps - i)), int(abs(d - steps - i)), int(abs(d - steps - i) - abs(steps - i))) \n    return -1 \n    \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # defining min jumps possible\n    # to solve this problem, we must consider the number of jumps which we need to reach\n    # to reach the origin in two d directions \n    # we use two d directions\n    # we have to find the middle point on the d direction\n    # and then find the minimum number of jumps required \n    # to reach the middle point in two d directions\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == 1:\n        return 1\n    elif d == 2:\n        return 1 + min_Jumps(steps - 1, 1)\n    elif d == 3:\n        return 1 + min_Jumps(steps - 1, 2)\n    else:\n        return min_Jumps(steps - 1, 3)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    numJumps = 0\n    for i in range(steps):\n        if d == [0, 0]:\n            return numJumps\n        if d[0] == 0 and d[1] == 0:\n            return numJumps\n        d.append(d[0] + d[1])\n        numJumps = numJumps + 1\n    return numJumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create an array for storing the jumps\n    array = [] \n    # Create a for-loop that will iterate through the array to find the minimum number of jumps.\n    # Iterate through the steps, and check if the steps_num list is empty and set the value to 0. \n    # Set the min_jump to the max of the steps_num list.\n    # If the number of jumps is greater than the min_jump and steps_num does not contain the minimum number of jumps, the iteration should end and return -1.\n    # Otherwise, the jump should be added to the array, and the steps_num list will contain the new value.\n    for steps_num in steps:\n        if steps_num == 0:\n            array.append(0)\n        else:\n            # Create the array variable.\n            array = []\n            # Set the current value of the current steps_num to the min value.\n            current_min = 0\n            # Loop through the array to find the min value.\n            for item in array:\n                if item < current_min:\n                    current_min = item\n            # Set the current value of the current steps_num to the min value plus the value of the current minimum value plus the current value.\n            current_min += steps_num\n            # Set the current value to the min value plus the value of the current minimum value plus the current value plus the current value.\n            current_min += steps[steps_num - 1]\n            # Set the current value to the min value plus the value of the current minimum value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value + 1\n            # If the current value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value + 1\n            if current_min == d:\n                return current_min\n            else:\n                # Set the current value of the current steps_num to the min value plus the current value plus the current minimum value plus the current value plus the current minimum value plus the current minimum value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value plus the current value + 1\n                current_min += steps[steps_num - 1]\n                # Set the current value to the min value plus the value of the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value plus the value of the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value plus the value of the current minimum value plus the current minimum value plus the current minimum value plus the current minimum value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value plus the value of the current minimum value plus the current minimum value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set the current value to the min value + 1\n                current_min += steps[steps_num]\n                # Set th"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d in (0, 1):\n        return steps\n    \n    if d in (2, 3):\n        return min(steps[1:], key=lambda x: (x, steps[0] - x))\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Use a dic to save the x and y coordinates of the point of origin. \n    x, y = 0, 0\n    #Store the x and y coordinates of the destination point. \n    dest = [0,0]\n    #Store the number of jumps required as we have to explore. \n    jumps = 0\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0:\n        return None\n    \n    elif len(nums2)==0:\n        return None\n    \n    \n    res=[]\n    \n    if nums1[0]!=nums2[0]:\n        return None\n    \n    for i in nums1:\n        if i in nums2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Divide by 0\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # find the number of elements in the first list\n    n1 = len(nums1)\n    # find the number of elements in the second list\n    n2 = len(nums2)\n    # create a 2d array\n    array = [[0 for x in range(n2)] for y in range(n1)]\n    for i in range(n1):\n        for j in range(n2):\n            array[i][j] = nums1[i] // nums2[j]\n    return array\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # if num1>nums2:\n        # nums1,nums2=nums2,nums1\n    if len(nums1)>len(nums2):\n        nums2,nums1=nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    l = []\n    for i in range(len(nums1)):\n        l.append(nums1[i]/nums2[i])\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num for num in nums1 if num in nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # print(type(nums1))\n    # print(type(nums2))\n    return nums1/nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    s1=set(nums1)\n    s2=set(nums2)\n    l1=list(s1)\n    l2=list(s2)\n    for i in l1:\n        if i not in l2:\n            l2.append(i)\n    return l2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Take nums1 and nums2 as input.\n    # Initialize a dictionary to store the value from nums1.\n    # Initialize a dictionary to store the value from nums2.\n    # Iterate nums1 from top to bottom.\n    # Iterate nums2 from bottom to top.\n    # Compare and return the highest value from both lists.\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Write your code here\n    count = 0\n    if len(nums1) > len(nums2):\n        for x in nums1:\n            count += 1\n    else:\n        for x in nums2:\n            count += 1\n    return count\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = test_str.split(\" \")\n    for i in range(len(result)):\n        result[i] = str(result[i])\n        result[i] = result[i][::-1]\n    return \" \".join(result)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # --------------- YOUR CODE HERE --------------------- #\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str[i] = '0'+test_str[i]\n        if test_str[i] == '.':\n            test_str[i] = '0.00'\n        if test_str[i].find('.')!= -1:\n            test_str[i] = test_str[i].split('.')\n            for i in range(len(test_str[i])):\n                test_str[i] = test_str[i][-1]\n            test_str[i] = test_str[i][:-1]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            new_str += test_str[i]\n            i += 1\n        elif test_str[i]!= '.':\n            new_str += test_str[i]\n        else:\n            new_str += '.'\n        i += 1\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_list = list(test_str)\n    test_list.sort(reverse=True)\n    test_str_num = \"\"\n    for i in range(len(test_list)):\n        test_str_num += test_list[i]\n    return test_str_num\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = list(test_str)\n    cnt = 1\n    while cnt < len(lst):\n        temp = lst[cnt]\n        while cnt < len(lst) and lst[cnt].isdigit():\n            lst[cnt] = lst[cnt] + lst[cnt+1]\n            cnt += 1\n        lst[cnt] = temp\n        cnt += 1\n    lst = ''.join(lst)\n    return lst\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            while test_str[i].isdigit():\n                test_str = test_str[:i] + str(int(test_str[i]) + 1) + test_str[i+1:]\n        i += 1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    final_str = ''\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric():\n            final_str = final_str + str(test_str[i])\n        else:\n            final_str = final_str + test_str[i]\n    return final_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    def moves_to_end(string):\n        temp = []\n        for i in string:\n            if i.isalpha():\n                temp.append(i)\n            else:\n                pass\n        for i in range(len(temp)):\n            string = string[:i] + temp[i] + string[i+1:]\n        return string\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    lst = list(map(int, test_str.split()))\n    for i in range(len(lst)):\n        lst[i] = lst[i] + 1\n    lst.sort()\n    return \"\".join(map(str, lst))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    \n    n = len(a)\n    \n    # Your code here\n    # define a function to get the max of the n list and remove the tuple from the list\n    \n    for i in range(n):\n        for j in range(i, n):\n            if a[j] % a[i] == 0:\n                size = size + 1\n            else:\n                size = size\n                break\n            \n    return size\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = []\n    subsets.append([])\n    for i in a:\n        for j in subsets:\n            subsets.append(j + [i])\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l=[]\n    for i in range(1,len(a)):\n        for j in range(i,len(a)):\n            if a[i]%a[j]==0:\n                l.append((a[i],a[j]))\n                if len(l)>=len(set(l)):\n                    return(len(l))\n    return(len(l))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Your code here\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    l = len(a)\n    if l == 0:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return a[0]\n    i = 0\n    while i < n:\n        if a[i] % a[i + 1] == 0:\n            return a[i]\n        i += 1\n    return a[0]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_sum = 0\n    sum_ = 0\n    subset = []\n    for i in a:\n        subset.append(i)\n        sum_ += i\n        if sum_ % i == 0:\n            max_sum = i\n    return max_sum\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return len(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def smallest_subset(a):\n        min_size = len(a)\n        l = [1]\n        for i in range(1,len(a)):\n            if a[i-1] % a[i] == 0:\n                l.append(a[i-1]//a[i])\n                l.append(a[i])\n        return l[-2], l[-1]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    num_dict = {}\n    num_arr = []\n    for i in a:\n        num_arr.append(i)\n    if len(num_arr) <= 1:\n        return len(num_arr)\n    else:\n        if a[0] in num_dict:\n            num_dict[a[0]] += 1\n        else:\n            num_dict[a[0]] = 1\n        for i in range(1, len(num_arr)):\n            if num_arr[i] % num_arr[i - 1] == 0:\n                num_dict[a[i]] += 1\n        return max(num_dict.values())\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    if n % 2 == 0:\n        return (sorted_arr1[n//2] + sorted_arr2[n//2]) / 2\n    else:\n        return sorted_arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Your code here\n    if n == 1:\n        return arr1[0]\n    else:\n        middle = (n - 1) // 2\n        if middle == n - 1:\n            return (arr1[middle] + arr2[middle]) / 2\n        if middle >= 0:\n            return (arr1[middle] + arr2[middle]) / 2\n        else:\n            return arr1[middle]\n        return None\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def sort(arr1, arr2, n):\n        arr1.sort()\n        arr2.sort()\n        i = 0\n        j = 0\n        k = 0\n        while i < n:\n            if arr1[i] < arr2[j]:\n                arr1[i], arr2[j] = arr2[j], arr1[i]\n                i += 1\n                j += 1\n                k += 1\n            else:\n                i += 1\n        return k\n    k = 0\n    if n % 2 == 0:\n        median = (arr1[n // 2] + arr2[n // 2]) / 2\n    else:\n        median = arr1[n // 2]\n    k = sort(arr1, arr2, n)\n    print(median)\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[int(n / 2)] + arr2[int(n / 2)]) / 2\n    else:\n        return arr1[n // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = (arr1 + arr2) // 2\n    count = 0\n    \n    for item in arr1:\n        count += 1\n        if item < median:\n            count = 0\n            median = item\n    for item in arr2:\n        count += 1\n        if item < median:\n            count = 0\n            median = item\n    \n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == 0 or l2 == 0:\n        return 0\n    if l1 == 1 or l2 == 1:\n        return arr1[0] if arr1[0] > arr2[0] else arr2[0]\n    if l1 > l2:\n        arr1, arr2 = arr2, arr1\n        l1, l2 = l2, l1\n    if l2 > l1:\n        arr1, arr2 = arr1, arr2\n        l2, l1 = l1, l2\n    x1 = l1//2\n    x2 = l2//2\n    if x1 < x2:\n        return get_median(arr1[x1:], arr2[x2:], n)\n    else:\n        return get_median(arr2[x2:], arr1[x1:], n)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    x = len(arr1)\n    y = len(arr2)\n    if x > y:\n        arr2 = sorted(arr2)\n        x = y\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    \n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return arr1[n//2]\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    if (n % 2 == 0):\n        while i < n//2 and j < n:\n            if arr1[i] > arr2[j]:\n                i += 1\n            else:\n                j += 1\n    else:\n        while i < n//2 and j < n:\n            if arr1[i] > arr2[j]:\n                i += 1\n            else:\n                j += 1\n    return (arr1[i] + arr2[j]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # O(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr1[0]\n    # O(n)\n    # Sort the list\n    arr1.sort()\n    arr2.sort()\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    def power(n,p):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return p\n        else:\n            return power(n-1,p*p)\n    \n    return power(n,n//p)*n\n    \n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # use recursion\n    # return recurse(nums, n)\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    i=0\n    while i<len(nums):\n        j=i\n        while j<len(nums):\n            nums[i]**=nums[j]\n            j+=1\n        i+=1\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(num,n) for num in nums]\n    \ndef factorial(num):\n    '''\n    Write a function to compute the factorial of a number.\n    '''\n    assert num >= 0\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    return num * factorial(num - 1)\n    \ndef factorial_dp(num):\n    '''\n    DP solution.\n    For reference:\n    https://www.geeksforgeeks.org/python-number-factorial-dp/\n    '''\n    #if the number is 0 or 1\n    if num == 0 or num == 1:\n        return 1\n    #calculate the factorial\n    #return the factorial of the numbers 1 and 2\n    return num * factorial_dp(num - 1)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(x, n) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # iterative approach\n    power = 1\n    for i in range(len(nums)):\n        power = power * nums[i]\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) == 0:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[0]**(len(nums)-i-1) for i in range(len(nums))"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    if n == 2:\n        return [2*x for x in nums]\n    elif n < 2:\n        return None\n    else:\n        return [nth_nums(x, n-1) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def convert(n):\n        return int(n)**n\n    numbers = [convert(n) for n in nums]\n    return numbers\n    \n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result=[]\n    if len(nums)<=1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            result.append(nums[i]**n)\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef is_number(string):\n    '''\n    Write a python function to check if a string is a number.\n    '''\n    return isinstance(string, str)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_count = 0\n    for char in string:\n        if char.isupper():\n            upper_count += 1\n    if upper_count == string.count(' '):\n        return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_list = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    return string.upper() in upper_list\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return False\n    return True\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList.pop() \n    newList.pop() \n    \n    newList.insert(0, newList.pop())\n    newList.insert(len(newList), newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList.reverse() \n    newList.pop() \n    newList.reverse() \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"The new list\")\n    print(newList)\n    print(\"***********************************************************\")\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n    print(\"***********************************************************\")\n    \n    return newList\n    \n    \n    \ndef remove_element(list, element):\n    '''\n    Write a python function that remove the element from a list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.remove(element)\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef get_length(list):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    print(\"The list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(len(list))\n    return len(list)\n    \n    \ndef reverse_string(list):\n    '''\n    Write a python function to reverse a string.\n    '''\n    print(\"The new string\")\n    print(list)\n    print(\"***********************************************************\")\n    list.reverse()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef find_Index(list, element):\n    '''\n    Write a python function to find the index of a element in a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list.index(element))\n    return list.index(element)\n    \n    \ndef clear_list(list):\n    '''\n    Write a python function to clear a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.clear()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef insert_in_list(list, element, index):\n    '''\n    Write a python function to insert an element in a given list at a particular index.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.insert(index, element)\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef delete_list(list):\n    '''\n    Write a python function to delete a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.clear()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef map_list(list):\n    '''\n    Write a python function to map a list to another list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    new_list = [element for element in list]\n    print(new_list)\n    print(\"***********************************************************\")\n    return new_list\n    \n    \ndef zip_list(list):\n    '''\n    Write a python function to zip a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list1 = list[0]\n    list2 = list[1]\n    list3 = list[2]\n    list4 = list[3]\n    list5 = list[4]\n    new_list = list1, list2, list3, list4, list5\n    print(new_list)\n    print(\"***********************************************************\")\n    return new_list\n    \n    \ndef find_length_list(list):\n    '''\n    Write a python function to find the length of a list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(len(list))\n    return len(list)\n    \n    \ndef reverse_search(list, target):\n    '''\n    Write a python function to search a given list for a given target.\n    '''\n    print(\"The list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(\"The element was found at the given index\")\n    print(list.index(target))\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef sort_list(list):\n    '''\n    Write a python function to sort a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.sort()\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef all_moves(list):\n    '''\n    Write a python function to get all moves of a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef all_moves_in_path(list, starting_point):\n    '''\n    Write a python function to get all moves of a given list with a given starting point.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list.index(starting_point))\n    return list\n    \n    \ndef all_moves_in_path_random(list, starting_point):\n    '''\n    Write a python function to get all moves of a given list with a given starting point.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list_copy = list.copy()\n    print(list_copy)\n    print(list_copy.index(starting_point))\n    return list\n    \n    \ndef all_moves_in_path_random_random(list, starting_point):\n    '''\n    Write a python function to get all moves of a given list with a given starting point.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list_copy = list.copy()\n    print(list_copy)\n    list_copy.remove(starting_point)\n    print(list_copy)\n    return list\n    \n    \ndef make_move(list):\n    '''\n    Write a python function to make a move in a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    list.remove(list[0])\n    print(list)\n    print(\"***********************************************************\")\n    return list\n    \n    \ndef print_list(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_2(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_3(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_4(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_5(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    return list\n    \n    \ndef print_list_6(list):\n    '''\n    Write a python function to print a given list.\n    '''\n    print(\"The new list\")\n    print(list)\n    print(\"***********************************************************\")\n    print(list[0])\n    print"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #declare an empty list\n    temp = []\n    #iterate over the list\n    for i in range(len(newList)):\n        temp.append(newList[i])\n        #the last element added to a new list\n        newList.remove(newList[i])\n    #reversing the elements\n    for i in range(len(newList)):\n        newList.append(temp[i])\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # if len(newList) == 1:\n    #     return\n    # list_new = newList[0:len(newList) // 2] + newList[len(newList) // 2:len(newList)]\n    # return list_new\n    return newList[:newList.index(min(newList))] + newList[len(newList) - newList.index(min(newList)):]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for index in range(len(newList)): \n        newList[index], newList[len(newList)-index-1] = newList[len(newList)-index-1], newList[index]\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 3:\n        print('Incorrect input')\n        return\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    newList = []\n    for i in range(len(newList)):\n        newList.append(newList[i])\n    newList.reverse()\n    print('\\nnew list =', newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)):\n        temp = newList[i]\n        newList[i] = newList[i+1]\n        newList[i+1] = temp \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # YOUR CODE HERE\n    if newList == []:\n        return []\n    if len(newList) < 2:\n        return newList\n    if len(newList) == 2:\n        return [newList[1], newList[0]]\n    mid = len(newList) // 2\n    if newList[mid] > newList[mid - 1]:\n        temp = newList[mid]\n        newList[mid] = newList[mid - 1]\n        newList[mid - 1] = temp\n    else:\n        temp = newList[mid]\n        newList[mid] = newList[mid - 1]\n        newList[mid - 1] = temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Your code here\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    l = r * (r - 1) / 2\n    area = (l * r) / 2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    x = 0\n    y = 0\n    sides = 0\n    while (r - x) >= 0.5:\n        sides += 1\n        x = r * 1.5\n        y = r * 1.5\n        r = x - y\n    return (sides - 1)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r):\n        '''\n        Write a python function to calculate the area of a triangle.\n        '''\n        if r >= 0:\n            a = math.pi*(r**2)\n            print(a)\n        else:\n            print('you entered an invalid value')\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0.0 :\n        print(\"Triangle can't be inscribed in a semicircle with a given radius\")\n        return\n    elif r == 0.0 :\n        print(\"Triangle has zero area\")\n        return\n    elif r == 1.0 :\n        print(\"Triangle has an equilateral triangle\")\n        return\n    else :\n        a = (1/2) * (r**2)\n        b = (1/2) * (r**2)\n        c = (1/2) * (r**2)\n        d = (1/2) * (r**2)\n        e = (1/2) * (r**2)\n        f = (1/2) * (r**2)\n        g = (1/2) * (r**2)\n        h = (1/2) * (r**2)\n        i = (1/2) * (r**2)\n        j = (1/2) * (r**2)\n        k = (1/2) * (r**2)\n        l = (1/2) * (r**2)\n        m = (1/2) * (r**2)\n        n = (1/2) * (r**2)\n        o = (1/2) * (r**2)\n        p = (1/2) * (r**2)\n        q = (1/2) * (r**2)\n        s = (1/2) * (r**2)\n        t = (1/2) * (r**2)\n        u = (1/2) * (r**2)\n        v = (1/2) * (r**2)\n        w = (1/2) * (r**2)\n        x = (1/2) * (r**2)\n        y = (1/2) * (r**2)\n        z = (1/2) * (r**2)\n        if a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Equilateral triangle has area of\", round(a * (2 * r),2), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Isosceles triangle has area of\", round(a * (2 * r) + b * (r ** 2)), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Scalene triangle has area of\", round(a * (r ** 2) + b * (r * r)), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Icosahedron has area of\", round(a * (r ** 3) + b * (r ** 2) * r), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Tetrahedron has area of\", round(a * (r ** 3) * r * r), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Octahedron has area of\", round(a * (r ** 3) * (r ** 2) * r), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Icosceles triangle has area of\", round(a * (r ** 3) * (r ** 2) * (r ** 2) + b * (r ** 2) * r * r), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Scalene triangle has area of\", round(a * (r ** 3) * (r ** 2) * (r ** 2) + b * (r ** 2) * (r * r) + c * (r ** 2) * (r * r) + d * (r ** 2) * (r ** 2) + e * (r ** 2) * (r * r) + f * (r ** 2) * (r * r) + g * (r ** 2) * (r * r)), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Icosahedron has area of\", round(a * (r ** 3) * (r ** 2) * (r ** 2) + b * (r ** 2) * (r * r) + c * (r ** 2) * (r * r) + d * (r ** 2) * (r ** 2) + e * (r ** 2) * (r * r) + f * (r ** 2) * (r * r) + g * (r ** 2) * (r * r)), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Tetrahedron has area of\", round(a * (r ** 3) * (r ** 2) * (r ** 2) + b * (r ** 2) * (r * r) + c * (r ** 2) * (r * r) + d * (r ** 2) * (r ** 2) + e * (r ** 2) * (r * r) + f * (r ** 2) * (r * r) + g * (r ** 2) * (r * r)), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Octahedron has area of\", round(a * (r ** 3) * (r ** 2) * (r ** 2) + b * (r ** 2) * (r * r) + c * (r ** 2) * (r * r) + d * (r ** 2) * (r ** 2) + e * (r ** 2) * (r * r) + f * (r ** 2) * (r * r) + g * (r ** 2) * (r * r)), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Icosceles triangle has area of\", round(a * (r ** 3) * (r ** 2) * (r ** 2) + b * (r ** 2) * (r * r) + c * (r ** 2) * (r * r) + d * (r ** 2) * (r ** 2) + e * (r ** 2) * (r * r) + f * (r ** 2) * (r * r) + g * (r ** 2) * (r * r)), \"cm2\")\n        elif a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + s + t + u + v + w > 0.0 :\n            print(\"Scalene triangle has area of\", round("
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r):\n        # find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The area of the circle is\", a)\n        return a\n    area(r)\n    return area(r)\n    \n    # Write a python function to compute the perimeter of a circle with a given radius\n    # which is a function of r.\n    # Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def perimeter(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The area of the circle is\", a)\n        return a\n    print(\"The perimeter of the circle is\", perimeter(r))\n    return perimeter(r)\n    \n    #Write a python function to find the circumference of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def circumference(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The circumference of the circle is\", a)\n        return a\n    print(\"The circumference of the circle is\", circumference(r))\n    return circumference(r)\n    \n    #Write a python function to find the area of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def area(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The area of the circle is\", a)\n        return a\n    print(\"The area of the circle is\", area(r))\n    return area(r)\n    \n    #Write a python function to find the diameter of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def diameter(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The diameter of the circle is\", a)\n        return a\n    print(\"The diameter of the circle is\", diameter(r))\n    return diameter(r)\n    \n    #Write a python function to find the perimeter of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def perimeter(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The perimeter of the circle is\", a)\n        return a\n    print(\"The perimeter of the circle is\", perimeter(r))\n    return perimeter(r)\n    \n    #Write a python function to find the circumference of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def circumference(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The circumference of the circle is\", a)\n        return a\n    print(\"The circumference of the circle is\", circumference(r))\n    return circumference(r)\n    \n    #Write a python function to find the area of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def area(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The area of the circle is\", a)\n        return a\n    print(\"The area of the circle is\", area(r))\n    return area(r)\n    \n    #Write a python function to find the diameter of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def diameter(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The diameter of the circle is\", a)\n        return a\n    print(\"The diameter of the circle is\", diameter(r))\n    return diameter(r)\n    \n    #Write a python function to find the perimeter of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def perimeter(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The perimeter of the circle is\", a)\n        return a\n    print(\"The perimeter of the circle is\", perimeter(r))\n    return perimeter(r)\n    \n    #Write a python function to find the circumference of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def circumference(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The circumference of the circle is\", a)\n        return a\n    print(\"The circumference of the circle is\", circumference(r))\n    return circumference(r)\n    \n    #Write a python function to find the area of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after the return statement.\n    def area(r):\n        # Find the radius of the circle\n        # and the area of the circle\n        a = 0\n        for i in range(1, r):\n            a += (i*i)\n        print(\"The area of the circle is\", a)\n        return a\n    print(\"The area of the circle is\", area(r))\n    return area(r)\n    \n    #Write a python function to find the diameter of a circle with a given radius\n    # and which is a function of r.\n    #Note: if we are using an if block and then the return statement runs after the if block, then the result becomes none.\n    # In this case, the if block has to be run after th"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r>0 :\n        s=1\n        for i in range(1,int(r/2)) :\n            s+=1\n        return s*math.pi*r**2\n    else : \n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r**2)**0.5\n    if (a >= r):\n        print (\"Area cannot be greater than given radius.\")\n        return 0\n    else:\n        b = ((-1)**(2)/2)*(r)\n        c = -1*((-1)**(2)/2)*(r)\n        d = ((-1)**(2)/2)*(r)\n        return 0\n    \ndef circle_area(r) :  \n    '''\n    Write a python function to find the area of the largest circle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = ((-1)**(2)/2)*(r)\n    b = ((-1)**(2)/2)*(r)\n    c = -1*((-1)**(2)/2)*(r)\n    return 0\n    \ndef main() :\n    r = float(input(\"Enter the radius of the square : \"))\n    print( \"Area of the triangle is \", triangle_area(r))\n    print( \"Area of the circle is \", circle_area(r))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    l = 3.141592653589793\n    c = 2.997924581006\n    a = (3 * l ** 2) - (4 * c ** 2)\n    area = (a * r ** 2) ** (1/2)\n    return area\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start == end:\n        return None\n    mid = (start+end)//2\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = (start+end)//2\n    if array[mid]!= array[mid+1]:\n        return array[mid]\n    if mid == start:\n        return array[mid+1]\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if end <= start:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] > array[mid + 1]:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return mid + 1\n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if end <= start:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] < array[mid + 1]:\n        return find_Second_Missing(array, mid + 1, end)\n    else:\n        return mid + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end == None:\n        return None\n    if start < end:\n        if start == end:\n            return start\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            return find_First_Missing(array,mid,end)\n        elif array[mid] > mid:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if end<start:\n        return -1\n    low=start\n    high=end\n    while low<high:\n        mid=(low+high)//2\n        if array[mid]<array[mid+1]:\n            low=mid+1\n        else:\n            high=mid\n    return array[low]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if end < start:\n        return None\n    if start == end:\n        return array[start]\n    mid = (start+end)//2\n    if array[mid] < array[mid+1]:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start < end:\n        mid = (start + end)//2\n        if array[mid] < array[mid+1]:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid] > array[mid-1]:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return mid\n    else:\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None: end = len(array) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            mid += 1\n            continue\n        if array[mid] < mid:\n            start = mid\n        else:\n            end = mid\n    return start\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    def replace_space(string):\n        if string.isspace():\n            return '%20'\n        else:\n            return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    #Splitting string to list and separating spaces\n    string = string.split()\n    #Finding length of list, so that the whole string is replaced\n    n = len(string)\n    #print(string)\n    #print(n)\n    #print(string[1])\n    #print(string[0])\n    #print(string[1][0])\n    #print(string[0][0])\n    #Replace the spaces with %20\n    string = [string[0][0] % 20]\n    #print(string[0][0])\n    #print(string[0][0])\n    #Remove the first and the second element from the list\n    for i in range(n-1):\n        #print(string[i][0])\n        #print(string[i][1])\n        #print(string[i][0])\n        string[i] ='' + string[i][0] +'' + string[i][1]\n    #print(string[n-1][0])\n    #print(string[n-1][1])\n    #print(string[n-1][0])\n    #Print the new string\n    return''.join(string)\n    "
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in range(len(string)):\n        if string[i] =='':\n            string = string[:i] + '%20' + string[i+1:]\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(s.replace(' ', '%20') for s in string.split())\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isspace():\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(0, len(list), 2):\n        even_list.append(list[i])\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    EvenList = []\n    for i in range(len(list)):\n        if(list[i] % 2 == 0):\n            EvenList.append(list[i])\n    return EvenList\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            Even_numbers.append(number)\n    return Even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in range(0,len(list)):\n        if (list[i]%2==0):\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for element in list:\n        if element % 2 == 0:\n            evens.append(element)\n    print(evens)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for number in list:\n        if number % 2 == 0:\n            evens.append(number)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for number in list: \n        if number % 2 == 0:\n            even.append(number)\n    print(even)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        sub.remove(ele)\n    if ele[1] == 0:\n        return\n    adjac(ele[1], sub)\n    adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele) \n        adjac(ele[0], sub) \n        adjac(ele[1], sub) \n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #List to store the coordinates\n    coordinates = []\n    #Check if the given element is a coordinate pair\n    if ele in sub:\n        coordinates.append(ele)\n    #For every adjacent element\n    for i in ele:\n        #Check if the element is a coordinate pair\n        if i in sub:\n            coordinates.append(i)\n    #Return the coordinates\n    return coordinates\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #base case\n    if ele in sub:\n        return ele\n    if ele == sub:\n        return None\n    #check adjacency\n    if ele[1] > 0 and sub[0][0] > 0:\n        return (ele[0], ele[1] - 1, sub[0][0])\n    if ele[0] > 0 and sub[1][0] > 0:\n        return (ele[0], ele[1] + 1, sub[1][0])\n    if ele[0] < 0 and sub[0][1] > 0:\n        return (ele[0], ele[1] + 1, sub[0][1])\n    if ele[0] < 0 and sub[1][1] > 0:\n        return (ele[0], ele[1] + 1, sub[1][1])\n    else:\n        return None\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == ele[1] == ele[2] == ele[3]: \n        return sub.append(ele) \n    else: \n        return adjac(ele[0], sub + [ele]) \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if ele[0]<0 or ele[0]>=len(data) or ele[1]<0 or ele[1]>=len(data): return []\n    if data[ele[0]][ele[1]]!='*': return []\n    adjac = []\n    for i in range(ele[0]-1,ele[0]+2):\n        for j in range(ele[1]-1,ele[1]+2):\n            if (i<0 or i>=len(data)) or (j<0 or j>=len(data)) or data[i][j]!='*': \n                continue\n            adjac.append((i,j))\n    return adjac\n    \ndef get_map(data):\n    '''\n    Write a function to return the map of the given grid.\n    '''\n    new_map = [['*' for i in range(len(data))] for j in range(len(data))]\n    new_map[len(data)-1][len(data)-1]='.'\n    return new_map\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if (ele[0] < ele[1]): \n        sub.append((ele[0] + 1, ele[1]))\n        sub.append((ele[0] + 1, ele[1] + 1))\n    else:\n        sub.append((ele[0] + 1, ele[1] + 1))\n    if (ele[1] < ele[0]): \n        sub.append((ele[0], ele[1] + 1))\n    else:\n        sub.append((ele[0] + 1, ele[1] + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # recursion for the given coordinate \n    if ele[0] == 0:\n        return [ele[1], ele[1]+1, ele[1]+2, ele[1]+3]\n    elif ele[1] == 0:\n        return [ele[0]+1, ele[0], ele[0]+2, ele[0]+3]\n    else:\n        return [ele[0]+1, ele[0]+1, ele[0]+2, ele[0]+2]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return None\n    elif ele == (0, 0):\n        sub.append((1, 0))\n        sub.append((0, 1))\n        return sub\n    elif ele == (0, 1):\n        sub.append((0, 2))\n        sub.append((1, 2))\n        return sub\n    elif ele == (1, 2):\n        sub.append((2, 0))\n        sub.append((2, 1))\n        return sub\n    else:\n        sub.append(ele)\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    if y - 1 >= 0:\n        adjac(y - 1, sub)\n    if x - 1 >= 0:\n        adjac(x - 1, sub)\n    if x + 1 < 9:\n        adjac(x + 1, sub)\n    if y + 1 < 9:\n        adjac(y + 1, sub)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    out = ''\n    for char in text:\n        if char!='' and char!= '\\n' and char!= '\\t':\n            out += char.lower() + '_'\n        else:\n            out += char\n    return out\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n','_').replace('\\t','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split()\n    words = [x.strip() for x in words]\n    words = [x.upper() for x in words]\n    words = [x.lower() for x in words]\n    return''.join(words)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('!','_')\n    text = text.replace('?','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text_without_spaces = text.replace(' ','_').replace('\\n','_')\n    return text_without_spaces\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\")\n    text = text.replace(\"\\t\",\"_\")\n    text = text.replace(\"\\n\",\"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\".\", \"_\").replace(\"?\", \"_\").replace(\"!\",\"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \",\"_\")\n    new_text = new_text.replace(\"-\",\"_\")\n    new_text = new_text.replace(\"_\",\"-\")\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return re.sub(' +',' ',text)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \",\" \")\n    text = text.replace(\"\\t\",\" \")\n    text = text.replace(\"\\n\",\" \")\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    l=list(num_list)\n    for i in range(len(l)):\n        if l[i]!=0:\n            l[i]=l[i]*-1\n            break\n    return l\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    while len(num_list)!= 0:\n        if num_list[-1]!= 0:\n            num_list.append(num_list[-1])\n        else:\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return []\n    elif len(num_list) == 1:\n        return num_list\n    elif len(num_list) == 2:\n        return [num_list[0]] + num_list[1:]\n    else:\n        return [num_list[0]] + move_zero(num_list[1:])\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    while num_list:\n        current_num = num_list.pop(0)\n        if current_num == 0:\n            new_list.append(0)\n        else:\n            new_list.append(current_num)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Write your code here\n    for i in num_list:\n        if i == 0:\n            num_list.remove(0)\n            num_list.append(0)\n        \n    num_list.reverse()\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list:\n        return None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = None\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result_list = []\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = []\n    for n in num_list:\n        if n == 0:\n            zeros.append(n)\n    # print(zeros)\n    zeros.reverse()\n    # print(zeros)\n    for n in zeros:\n        num_list.remove(n)\n        # print(n)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = '0'\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n-1):\n        if arr[i] == arr[i+1] and arr[i]!= 0:\n            x = x + arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    result = 0\n    for i in range(n) :\n        result += arr[i]\n        result -= arr[i]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i,n):\n            xor ^= arr[i]\n            xor ^= arr[j]\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 2 : \n        return arr[n]\n    else : \n        s = 0\n        s_1 = arr[0] \n        s_2 = arr[1] \n        for i in range(2,n) : \n            s_1 = s_1 ^ arr[i] \n            s_2 = s_2 ^ arr[i] \n        return s_1 ^ s_2 \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    for i in range(n) : \n        arr[i] = xor(arr[i],i)\n    return sum(arr)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Add any missing values to the end of the list \n    for i in range(len(arr) - 2):\n        arr[i] |= arr[i + 1]\n        arr[i + 1] = 0\n    # Remove 0s from the end of the list\n    arr[len(arr) - 1] = 0\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #count the number of pairs\n    count = 0\n    #create a list to store the pairs\n    pairs = []\n    for i in range(n-1):\n        for j in range(i+1,n):\n            #convert the number to a hexadecimal\n            xor = hex(arr[i] ^ arr[j])\n            #add the pair of numbers together in a list and put it in the pairs list\n            pairs.append(xor)\n            count = count + 1\n    return count\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    output = 0\n    for i in arr : \n        output += i*(i ^ 1)\n    return output \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Allocate an empty array\n    arr = []\n    # Check if arr is empty\n    if(arr == []):\n        return 0\n    # Use SLL to push the elements in the array to the SLL\n    sll = SLL()\n    for i in range(0,n):\n        sll.push(arr[i])\n    # Call the function\n    return sll.sll()\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s=0\n    for i in range(n):\n        s+=arr[i]\n    return s\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = []\n    for element in iterable:\n        heapq.heappush(l, element)\n    return l\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        hq.heapreplace(iterable, iterable.pop(i))\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return heapq.heappop(heap)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if not iterable:\n        raise TypeError(\"The list can't be empty!\")\n    \n    # the type of iterable will be list or tuple\n    # the type of iterable will be iterator\n    if isinstance(iterable, list):\n        heapq.heapify(iterable)\n    elif isinstance(iterable, tuple):\n        return tuple(heapq.heapify(iterable))\n    else:\n        raise TypeError(\"The type of iterable must be list or tuple!\")\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Declare variables\n    hq = []\n    heapq.heapify(hq)\n    for i in iterable:\n        heapq.heappush(hq, i)\n    # Remove from list\n    for i in range(len(hq)):\n        heapq.heapreplace(hq, hq[-1])\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _heapify(iterable, heap, n):\n        for i in range(n//2 - 1, -1, -1):\n            hq.heapify(iterable, n, i)\n        return iterable\n    def _siftup(iterable, heap, n):\n        root = n//2\n        i = root + 1\n        while i <= n:\n            hq.heappushpop(heap, iterable[i])\n            i += 1\n    \n    def _siftdown(iterable, heap, n, lo):\n        i = lo\n        while i < n:\n            hq.heapify(heap, n, i)\n            hq.heappushpop(heap, iterable[i])\n            i += 1\n    \n    def _siftup_helper(iterable, heap, n, lo, hi):\n        root = lo\n        i = lo + 1\n        while i <= hi:\n            hq.heapify(heap, n, i)\n            hq.heappushpop(heap, iterable[i])\n            i += 1\n        \n    def _siftdown_helper(iterable, heap, n, lo, hi):\n        root = lo\n        i = lo + 1\n        while i <= hi:\n            hq.heapify(heap, n, i)\n            hq.heappushpop(heap, iterable[i])\n            i += 1\n        \n    def _siftup_siftdown(iterable, heap, n, lo, hi):\n        _siftup_helper(iterable, heap, n, lo, hi)\n        _siftdown_helper(iterable, heap, n, lo, hi)\n    \n    def _heappushpop(iterable, item):\n        hq.heappushpop(iterable, item)\n        \n    def _heappush(iterable, item):\n        hq.heappush(iterable, item)\n        \n    def _heapify_sort(iterable):\n        # Heapify by the given function\n        _heapify(iterable, n, 0)\n        \n    def _heapify_siftup(iterable, heap, n):\n        _heapify_siftup(iterable, heap, n//2)\n    \n    def _heapify_siftdown(iterable, heap, n):\n        _heapify_siftdown(iterable, heap, n//2)\n    \n    def _heapify_sort_siftup(iterable, heap, n):\n        _heapify_sort(iterable, n, 0)\n        _heapify_siftup(iterable, heap, n//2)\n    \n    def _heapify_sort_siftdown(iterable, heap, n):\n        _heapify_sort(iterable, n, 0)\n        _heapify_siftdown(iterable, heap, n//2)\n    \n    def _heapify_sort_siftup_helper(iterable, heap, n, lo, hi):\n        _heapify_siftup_helper(iterable, heap, n, lo, hi)\n        _heapify_siftdown_helper(iterable, heap, n, lo, hi)\n        \n    def _heapify_sort_siftdown_helper(iterable, heap, n, lo, hi):\n        _heapify_sort_siftdown_helper(iterable, heap, n, lo, hi)\n        _heapify_siftdown_helper(iterable, heap, n, lo, hi)\n    \n    def _heapify_sort_siftup_siftdown(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown(iterable, heap, n, lo, hi)\n        _heapify_sort_siftdown_helper(iterable, heap, n, lo, hi)\n        \n    def _heapify_sort_siftup_siftdown_helper(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper(iterable, heap, n, lo, hi)\n        _heapify_siftup_siftdown_helper(iterable, heap, n, lo, hi)\n    \n    def _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _heapify_siftup(iterable, n, lo)\n    \n    def _heapify_sort_siftup_siftdown_helper_siftup_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _heapify_siftup(iterable, n, lo)\n        _heapify_siftup(iterable, n, hi)\n        _heapify_siftup(iterable, n, hi)\n        \n    def _heapify_sort_siftup_siftdown_helper_siftup_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _heapify_siftup(iterable, n, lo)\n        _heapify_siftup(iterable, n, hi)\n        _heapify_siftup(iterable, n, hi)\n        \n    def _heapify_sort_siftup_siftdown_helper_siftup_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _heapify_siftup(iterable, n, lo)\n        _heapify_siftup(iterable, n, hi)\n        _heapify_siftup(iterable, n, hi)\n        \n    def _heapify_sort_siftup_siftdown_helper_siftup_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _heapify_siftup(iterable, n, lo)\n        _heapify_siftup(iterable, n, hi)\n        _heapify_siftup(iterable, n, hi)\n        \n    def _heapify_sort_siftup_siftdown_helper_siftup_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _heapify_siftup(iterable, n, lo)\n        _heapify_siftup(iterable, n, hi)\n        _heapify_siftup(iterable, n, hi)\n        \n    def _heapify_sort_siftup_siftdown_helper_siftup_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _heapify_siftup(iterable, n, lo)\n        _heapify_siftup(iterable, n, hi)\n        _heapify_siftup(iterable, n, hi)\n        \n    def _heapify_sort_siftup_siftdown_helper_siftup_siftup(iterable, heap, n, lo, hi):\n        _heapify_sort_siftup_siftdown_helper_siftup(iterable, heap, n, lo, hi)\n        _h"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: Write your code here.\n    def heapsort(iterable, start=0, end=None):\n        '''\n        Write your code here.\n        '''\n        if end is None:\n            end = len(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable is None:\n        return iterable\n    for i in range(len(iterable)):\n        for j in range(i, -1, -1):\n            if iterable[j] < iterable[j - 1]:\n                temp = iterable[j - 1]\n                iterable[j - 1] = iterable[j]\n                iterable[j] = temp\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _heapify(elements):\n        '''\n        Heapify function for insertion sort.\n        '''\n        for i in range(len(elements) - 1):\n            min_index = i\n            for j in range(i + 1, len(elements)):\n                if elements[j][1] < elements[min_index][1]:\n                    min_index = j\n            if min_index!= i:\n                elements[i], elements[min_index] = elements[min_index], elements[i]\n                _heapify(elements)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    for element in iterable:\n        if len(result) < 2:\n            result.append(element)\n        else:\n            if element <= result[0]:\n                result[0] = element\n            else:\n                result[1] = element\n    return result\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    p = sale_amount\n    r = actual_cost\n    if r>p:\n        return False\n    else:\n        return True\n    \ndef noprofit(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    p = sale_amount\n    r = actual_cost\n    if r>p:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost-sale_amount)<0:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=0\n    loss=0\n    \n    if actual_cost <= sale_amount:\n        profit=sale_amount/100\n        if sale_amount/100<=actual_cost:\n            loss=sale_amount/100\n        else:\n            loss=sale_amount/100\n    else:\n        profit=sale_amount/100\n        if sale_amount/100<=actual_cost:\n            loss=sale_amount/100\n        else:\n            loss=sale_amount/100\n    print(\"Profit: \",profit, \"Loss: \",loss)\n    \ndef noprofit_loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and with loss\n    '''\n    profit=0\n    loss=0\n    \n    if actual_cost <= sale_amount:\n        profit=sale_amount/100\n        if sale_amount/100<=actual_cost:\n            loss=sale_amount/100\n        else:\n            loss=sale_amount/100\n    else:\n        profit=sale_amount/100\n        if sale_amount/100<=actual_cost:\n            loss=sale_amount/100\n        else:\n            loss=sale_amount/100\n    print(\"Profit: \",profit, \"Loss: \",loss)\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    else:\n        if actual_cost < sale_amount:\n            return False\n        else:\n            return True\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<actual_cost:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #raise NotImplementedError()\n    return actual_cost/sale_amount < 1\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost < sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # YOUR CODE HERE\n    return actual_cost <= sale_amount\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # wind in m/s\n    w = v/3.6\n    # temperature in celsius\n    t_c = t+273.15\n    # calculate the wind chill index\n    # with 3.6 deg C as the formula is\n    # C = v + 1.8*w - 0.3*t_c\n    return round(v + (w + 0.3*t_c)*1.8, 3)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index\n    w = v*(9/5) + 32\n    #convert to celsius\n    w = w*(9/5)\n    #calculate the wind chill\n    if (t<20):\n        w = ((t*0.62+32)/1.68)\n    elif (t>20 and t<40):\n        w = ((t*0.62+32)/1.68)\n    elif (t>40 and t<60):\n        w = ((t*0.62+32)/1.68)\n    elif (t>60 and t<80):\n        w = ((t*0.62+32)/1.68)\n    elif (t>80 and t<100):\n        w = ((t*0.62+32)/1.68)\n    else:\n        w = ((t*0.62+32)/1.68)\n    #print(w)\n    return w\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = v*(9.0/5.0 + 32.0/100.0)\n    return round(math.log((v/4.0), 1.0+c),2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate wind chill index from formula\n    # Formula: wci = (100 - wv)/(100 + wv)\n    wci_temp = (100 - v)/(100 + v)\n    wci = (100 - wci_temp)/(100 + wci_temp)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # v_no_gravity = v/3\n    # v_no_wind_boost = v_no_gravity * math.pow(t,2)\n    # v_no_wind_boost = math.pow(v_no_gravity, 3)\n    # v_no_wind_boost = v_no_wind_boost - v_no_wind_boost * math.pow(t, 4)\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/5))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/4))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/3))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/2))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/1.5))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/1))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/1))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/2.5))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/2))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/3))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/4))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/5))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/6))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/7))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/8))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/8))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/9))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/10))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/11))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/12))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/13))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/14))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/15))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/16))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/17))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/18))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/19))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/20))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/21))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/22))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/23))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/24))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/25))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/26))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/27))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/28))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/29))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/30))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/31))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/32))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/33))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/34))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/35))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/36))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/37))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/38))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/39))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/40))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/41))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/42))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/43))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/44))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/45))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/46))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/47))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/48))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/49))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/50))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/51))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/52))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/53))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/54))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/55))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/56))\n    # v_no_wind_boost = math.pow(v_no_wind_boost, (1/57))\n    # v_no_wind"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = v * math.log(v / 3.6)\n    tc = v / t + 293.15\n    return round(wc + (tc - tc) * math.log(tc / tc), 2)\n    \ndef main():\n    print('Welcome to the wind chill index calculator!')\n    print('Enter \"end\" to end the program.')\n    v = input('Enter the wind velocity in km/h: ')\n    t = input('Enter the temperature in celsius: ')\n    if v == 'end':\n        print('Program ended.')\n        return\n    wc = wind_chill(float(v),float(t))\n    print('The wind chill index for the temperature of', t, 'is', round(wc, 2))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # TODO: Replace this with your code\n    C = v * 9.0 / 3.0 + 32.0\n    h = 0.6215\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    import math\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import datetime as dt\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    r = (9/5) * v**4 + 5/4 * v**3 + 2 * (v**2) * (t - 32) + 35\n    if r > 100:\n        return 100\n    elif r < 0:\n        return 0\n    else:\n        return r\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_c = v/9.0\n    temp_c = (math.log(t,10))\n    return round(w_c + (temp_c * (9.0/5.0)), 2)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s=0\n    for i in sample_names:\n        if i.startswith('a'):\n            s+=len(i)\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Write your code here\n    count = 0\n    for i in sample_names:\n        if i[0].islower():\n            count += len(i)\n        \n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam = []\n    for name in sample_names:\n        nam.append(name.split(\" \")[0].lower())\n    nam = list(dict.fromkeys(nam))\n    return len(nam)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    n = len(sample_names)\n    lowercase = set(name.lower() for name in sample_names)\n    \n    n1 = len(set(name for name in sample_names if name.lower() in lowercase))\n    return n1\n    \ndef sample_nam(sample_names):\n    '''\n    Write a function to get the sum of the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = len(sample_names)\n    lowercase = set(name.lower() for name in sample_names)\n    \n    n1 = sum(len(name) for name in lowercase if name.lower() in lowercase)\n    return n1\n    \ndef name_generator(sample_names, n):\n    '''\n    Write a function that takes a list of names and a given number and returns a list of their names, where each name is randomly generated from the given number of letters.\n    '''\n    \n    result = []\n    \n    if type(sample_names)!= list:\n        print(\"sample_names must be a list\")\n        return result\n    \n    if type(n)!= int:\n        print(\"n must be an integer\")\n        return result\n    \n    if n < 1:\n        print(\"n must be greater than 0\")\n        return result\n    \n    for i in range(n):\n        result.append(sample_names[random.randint(0,len(sample_names)-1)])\n        \n    return result\n    \ndef sample_gen(sample_names, n):\n    '''\n    Write a function that takes a list of names and a given number and returns a list of their names, where each name is randomly generated from the given number of letters.\n    '''\n    \n    result = []\n    \n    if type(sample_names)!= list:\n        print(\"sample_names must be a list\")\n        return result\n    \n    if type(n)!= int:\n        print(\"n must be an integer\")\n        return result\n    \n    if n < 1:\n        print(\"n must be greater than 0\")\n        return result\n    \n    for i in range(n):\n        result.append(sample_names[random.randint(0,len(sample_names)-1)])\n        \n    return resul"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create a function to sum the length of the names\n    # return the number of the names\n    \n    # start with the function\n    # iterate through the list of names and the length is not 0\n    # when this is True\n    # return the number of the names\n    # need to go through each word of the list and add its length to the sum\n    # return the sum of the word lengths\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 10\n    \n    #return sum(len(name) for name in sample_names if name.isupper())\n    #sample_names = [name.title() for name in sample_names if name.isupper()]\n    #return sum(len(name) for name in sample_names)\n    #return sum(len(name.lower()) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 11\n    \n    #return sum(len(name) for name in sample_names if name.islower())\n    #sample_names = [name.title() for name in sample_names if name.islower()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 12\n    \n    #return sum(len(name) for name in sample_names if name.isalpha())\n    #sample_names = [name.title() for name in sample_names if name.isalpha()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 13\n    \n    #return sum(len(name) for name in sample_names if name.isalnum())\n    #sample_names = [name.title() for name in sample_names if name.isalnum()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 14\n    \n    #return sum(len(name) for name in sample_names if name.isnumeric())\n    #sample_names = [name.title() for name in sample_names if name.isnumeric()]\n    #return sum(len(name) for name in sample_names)\n    #return sum(len(name.isupper()) for name in sample_names)\n    \n    #return sum(len(name.lower()) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 15\n    \n    #return sum(len(name.upper()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isupper()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 16\n    \n    #return sum(len(name.lower()) for name in sample_names if name.islower())\n    #sample_names = [name.title() for name in sample_names if name.islower()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 17\n    \n    #return sum(len(name.isalpha()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isalpha()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 18\n    \n    #return sum(len(name.isnumeric()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isnumeric()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 19\n    \n    #return sum(len(name.isupper()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isupper()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 20\n    \n    #return sum(len(name.isalpha()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isalpha()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 21\n    \n    #return sum(len(name.islower()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.islower()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 22\n    \n    #return sum(len(name.isnumeric()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isnumeric()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 23\n    \n    #return sum(len(name.isupper()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isupper()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 24\n    \n    #return sum(len(name.isalpha()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isalpha()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 25\n    \n    #return sum(len(name.isnumeric()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isnumeric()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 26\n    \n    #return sum(len(name.islower()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.islower()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Doe', 'Mike']\n    #returns 27\n    \n    #return sum(len(name.isnumeric()) for name in sample_names)\n    #sample_names = [name.title() for name in sample_names if name.isnumeric()]\n    #return sum(len(name) for name in sample_names)\n    \n    #example\n    #sample_names = ['John', 'Shakespeare', 'Jane', 'Do"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return reduce(lambda x, y: x + len(y), map(lambda name: name[0].lower(), sample_names))\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #initialize an empty list\n    nam_list = []\n    \n    #iterate through the list of names\n    for name in sample_names:\n        \n        #remove the names with a lowercase letter\n        if name[0].lower() in nam_list:\n            nam_list.remove(name[0].lower())\n            \n    #return the list of names\n    return nam_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return 0\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create variables\n    name_list = []\n    sample_name = \"\"\n    upper_letters = \"\"\n    lower_letters = \"\"\n    initial_letters = \"\"\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Get rid of the parenthesis\n    items = items[1:-1]\n    # Get rid of everything except the strings\n    items = items.replace('(', '').replace(')', '')\n    # Get rid of the space\n    items = items.replace(' ', '')\n    # Get rid of the double quote\n    items = items.replace('\"', '')\n    # Get rid of the newline\n    items = items.replace('\\n', '')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_string = ''\n    index_of_parenthesis = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            index_of_parenthesis.append(i)\n        if items[i] == ')':\n            if index_of_parenthesis[-1] > index_of_parenthesis[-2]:\n                index_of_parenthesis[-1] = index_of_parenthesis[-2]\n            else:\n                index_of_parenthesis[-1] = index_of_parenthesis[-2]\n                index_of_parenthesis.pop()\n    for i in range(len(index_of_parenthesis)):\n        new_string += items[index_of_parenthesis[i]]\n    return new_string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    list_items = list(items)\n    \n    for i in range(len(list_items)):\n        if list_items[i][0] == '(':\n            if list_items[i][-1] == ')':\n                list_items[i] = list_items[i][0:-1]\n        elif list_items[i][-1] == ')':\n            if list_items[i][0] == '(':\n                list_items[i] = list_items[i][0:1]\n        if list_items[i][0] == '*':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:-1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n        if list_items[i][0] == '-':\n            if list_items[i][-1] == '+':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '-':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '*':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '*':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n    return ''.join(list_items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return \"\".join(i for i in items if i!= \"(\" and i!= \")\")\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    return str(items).replace(\"(\",\"\").replace(\")\",\"\").replace(\"[\",\"\").replace(\"]\",\"\").replace(\"'\",\"\").replace('\"','\").replace('&','&').replace('$','$').replace(\"/\",\"\").replace(\" \",\"\")\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #E.g. \"(a,b,c,d)\" -> a b c d\n    parenthesis = \"(a,b,c,d)\"\n    #Split the string by the parenthesis\n    parenthesis_split = parenthesis.split(',')\n    #Check the parenthesis\n    if (parenthesis_split[-1] == ')'):\n        parenthesis_split.pop()\n    else:\n        parenthesis_split.pop()\n    #Remove the parenthesis\n    parenthesis_split.pop()\n    #Remove the children\n    parenthesis_split.pop()\n    #Remove the rest of the parenthesis\n    parenthesis_split.pop()\n    #Join the new string together\n    string = ''.join(parenthesis_split)\n    return string\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item[:2] == '([' or item[:2] == '{':\n            if item[-1] == ']' or item[-1] == '}':\n                item = item[:-1]\n            else:\n                item = item[:-2]\n            if not item:\n                item = ','\n            yield item\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = []\n    for i in items:\n        if re.match('^[()]',i)!= None:\n            result.append(i)\n    return result\ndef remove_all_doubles(items):\n    '''\n    Write a function to remove all the doubles from a string.\n    '''\n    result = []\n    for i in items:\n        if i in result:\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_punctuation(items):\n    '''\n    Write a function to remove all the punctuation from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_punctuation_and_spaces(items):\n    '''\n    Write a function to remove all punctuation and spaces from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_every_other_two_spaces(items):\n    '''\n    Write a function to remove all the other two spaces from a string.\n    '''\n    result = []\n    for i in items:\n        if i == \" \":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_every_other_two_spaces_and_remove_punctuation(items):\n    '''\n    Write a function to remove all the other two spaces and punctuation from a string.\n    '''\n    result = []\n    for i in items:\n        if i == \" \":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_every_other_two_spaces_and_remove_punctuation_and_spaces(items):\n    '''\n    Write a function to remove all the other two spaces and punctuation from a string.\n    '''\n    result = []\n    for i in items:\n        if i == \" \":\n            continue\n        else:\n            result.append(i)\n    return result\ndef replace_emoji(items):\n    '''\n    Write a function to replace emojis in a string.\n    '''\n    result = []\n    for i in items:\n        if i == \" \":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_punctuation_and_emoji(items):\n    '''\n    Write a function to remove all the punctuation and emoji from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_everything_except_emoji(items):\n    '''\n    Write a function to remove all the emojis from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_punctuation_and_emojis(items):\n    '''\n    Write a function to remove all the punctuation and emojis from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_something(items):\n    '''\n    Write a function to remove a symbol from a string.\n    '''\n    result = []\n    for i in items:\n        if i == \" \":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_special_symbols(items):\n    '''\n    Write a function to remove all the special symbols from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_specific_symbols(items):\n    '''\n    Write a function to remove all the special symbols from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_number_from_string(items):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"0123456789\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_russian_from_string(items):\n    '''\n    Write a function to remove russian from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e\u044f\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041a\u041b\u041c\u041d\u041e\u041f\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042a\u042b\u042c\u042d\u042e\u042f\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_special_symbols_from_string(items):\n    '''\n    Write a function to remove all the special symbols from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_special_symbols_from_string_and_remove_punctuation(items):\n    '''\n    Write a function to remove all the special symbols and punctuation from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_specific_symbols_from_string_and_remove_punctuation_and_spaces(items):\n    '''\n    Write a function to remove all the special symbols and punctuation from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_special_symbols_from_string_and_remove_punctuation_and_spaces_and_remove_emojis(items):\n    '''\n    Write a function to remove all the special symbols and punctuation from a string.\n    '''\n    result = []\n    for i in items:\n        if i in \"!\\\"#$%&'()*+,-./:;?@[\\\\]^_`{|}~\":\n            continue\n        else:\n            result.append(i)\n    return result\ndef remove_specific_symbols_from_string_and_remove_punctuation_and_spaces_and_remove_emojis(items):\n    '''\n    Write a function to remove all the special symbols and punctuation from a string.\n    '''\n    result = []\n    for i in item"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    end_pos = 0\n    for i, item in enumerate(items):\n        if item == '(':\n            end_pos = i\n        elif item == ')':\n            items[i] = ''\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for i in range(0, len(items)):\n        if items[i] == '(':\n            output.append(items[i])\n            output.append(')')\n        elif items[i] == ')':\n            if output[-2] == '(':\n                output.append(output[-2])\n                output.append(items[i])\n            else:\n                output.append(items[i])\n    return output\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    while (i<=n): \n        j = (n-i)\n        if (j%2==0): \n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + is_nonagonal(n - 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0 or n==1: \n        return n \n    else: \n        return is_nonagonal(n-1) + is_nonagonal(n-2) \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return \"Please enter a positive integer.\"\n    for i in range(1, n):\n        if ((n % i) == 0):\n            return n\n    else:\n        return \"No nonagonal numbers\"\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # 0,1,2,3,4,5,6,7 \n    #   1,2,3,4,5,6,7\n    #    \n    #   *\n    #   *\n    #   *\n    #   *\n    #\n    \n    if n < 0 or (n > 0 and n%2 == 0):\n        return 0\n    \n    n_list = []\n    n_list = list(str(n))\n    n_list.reverse()\n    \n    for i in n_list:\n        if i == '*':\n            continue\n        if i == '0':\n            return int(''.join(n_list))\n        else:\n            return int(''.join(n_list[:i]))\n    \n    \n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return n\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 6\n    elif n == 4: \n        return 9\n    elif n == 5: \n        return 12\n    elif n == 6: \n        return 15\n    elif n == 7: \n        return 18\n    elif n == 8: \n        return 21\n    elif n == 9: \n        return 24\n    elif n == 10: \n        return 27\n    elif n == 11: \n        return 30\n    elif n == 12: \n        return 35\n    elif n == 13: \n        return 38\n    elif n == 14: \n        return 41\n    elif n == 15: \n        return 44\n    elif n == 16: \n        return 47\n    elif n == 17: \n        return 50\n    elif n == 18: \n        return 54\n    elif n == 19: \n        return 57\n    elif n == 20: \n        return 60\n    elif n == 21: \n        return 64\n    elif n == 22: \n        return 67\n    elif n == 23: \n        return 70\n    elif n == 24: \n        return 75\n    elif n == 25: \n        return 78\n    elif n == 26: \n        return 81\n    elif n == 27: \n        return 85\n    elif n == 28: \n        return 90\n    elif n == 29: \n        return 96\n    elif n == 30: \n        return 99\n    elif n == 31: \n        return 103\n    elif n == 32: \n        return 108\n    elif n == 33: \n        return 111\n    elif n == 34: \n        return 114\n    elif n == 35: \n        return 117\n    elif n == 36: \n        return 120\n    elif n == 37: \n        return 123\n    elif n == 38: \n        return 126\n    elif n == 39: \n        return 129\n    elif n == 40: \n        return 131\n    elif n == 41: \n        return 134\n    elif n == 42: \n        return 137\n    elif n == 43: \n        return 140\n    elif n == 44: \n        return 143\n    elif n == 45: \n        return 147\n    elif n == 46: \n        return 150\n    elif n == 47: \n        return 153\n    elif n == 48: \n        return 156\n    elif n == 49: \n        return 158\n    elif n == 50: \n        return 161\n    elif n == 51: \n        return 164\n    elif n == 52: \n        return 167\n    elif n == 53: \n        return 170\n    elif n == 54: \n        return 173\n    elif n == 55: \n        return 176\n    elif n == 56: \n        return 179\n    elif n == 57: \n        return 182\n    elif n == 58: \n        return 185\n    elif n == 59: \n        return 188\n    elif n == 60: \n        return 191\n    elif n == 61: \n        return 194\n    elif n == 62: \n        return 196\n    elif n == 63: \n        return 199\n    elif n == 64: \n        return 202\n    elif n == 65: \n        return 205\n    elif n == 66: \n        return 208\n    elif n == 67: \n        return 211\n    elif n == 68: \n        return 214\n    elif n == 69: \n        return 217\n    elif n == 70: \n        return 220\n    elif n == 71: \n        return 223\n    elif n == 72: \n        return 226\n    elif n == 73: \n        return 229\n    elif n == 74: \n        return 232\n    elif n == 75: \n        return 235\n    elif n == 76: \n        return 238\n    elif n == 77: \n        return 241\n    elif n == 78: \n        return 244\n    elif n == 79: \n        return 247\n    elif n == 80: \n        return 250\n    elif n == 81: \n        return 253\n    elif n == 82: \n        return 256\n    elif n == 83: \n        return 259\n    elif n == 84: \n        return 262\n    elif n == 85: \n        return 265\n    elif n == 86: \n        return 268\n    elif n == 87: \n        return 271\n    elif n == 88: \n        return 274\n    elif n == 89: \n        return 277\n    elif n == 90: \n        return 280\n    elif n == 91: \n        return 283\n    elif n == 92: \n        return 286\n    elif n == 93: \n        return 289\n    elif n == 94: \n        return 291\n    elif n == 95: \n        return 294\n    elif n == 96: \n        return 297\n    elif n == 97: \n        return 301\n    elif n == 98: \n        return 304\n    elif n == 99: \n        return 317\n    elif n == 100: \n        return 321\n    elif n == 101: \n        return 324\n    elif n == 102: \n        return 327\n    elif n == 103: \n        return 330\n    elif n == 104: \n        return 333\n    elif n == 105: \n        return 336\n    elif n == 106: \n        return 349\n    elif n == 107: \n        return 352\n    elif n == 108: \n        return 355\n    elif n == 109: \n        return 368\n    elif n == 110: \n        return 371\n    elif n == 111: \n        return 376\n    elif n == 112: \n        return 379\n    elif n == 113: \n        return 380\n    elif n == 114: \n        return 383\n    elif n == 115: \n        return 386\n    elif n == 116: \n        return 389\n    elif n == 117: \n        return 392\n    elif n == 118: \n        return 395\n    elif n == 119: \n        return 408\n    elif n == 120: \n        return 411\n    elif n == 121: \n        return 414\n    elif n == 122: \n        return 417\n    elif n == 123: \n        return 420\n    elif n == 124: \n        return 423\n    elif n == 125: \n        return 426\n    elif n == 126: \n        return 429\n    elif n == 127: \n        return 432\n    elif n == 128: \n        return 435\n    elif n == 129: \n        return 438\n    elif n == 130: \n        return 441\n    elif n == 131: \n        return 444\n    elif n == 132: \n        return 447\n    elif n == 133: \n        return 456\n    elif n == 134: \n        return 457\n    elif n == 135: \n        return 460\n    elif n == 136: \n        return 463\n    elif n == 137: \n        return 466\n    elif n == 138: \n        return 469\n    elif n == 139: \n        return 470\n    elif n == 140: \n        return 481\n    elif n == 141: \n        return 484\n    elif n == 142: \n        return 487\n    elif n == 143: \n        return 490\n    elif n == 144: \n        return 493\n    elif n == 145: \n        return 496\n    elif n == 146: \n        return 497\n    elif n == 147: \n        return 500\n    elif n == 148: \n        return 503\n    elif n == 149: \n        return 504\n    elif n == 150: \n        return 507\n    elif n == 151: \n        return 510\n    elif n == 152: \n        return 513\n    elif n == 153: \n        return 516\n    elif n == 154: \n        return "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    start = 0\n    end = n - 1\n    while end > start:\n        middle = (start + end) // 2\n        if (n % middle == 0):\n            return middle\n        else:\n            end = middle - 1\n    return None\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Write your code here\n    for i in range(1,n+1):\n        if ((i+n)%2) == 1:\n            return i\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    start = 0\n    while start <= n-1:\n        if (n-start) % 2 == 1:\n            return start\n        start += 1\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = 'z'\n    for word in text.split():\n        if re.match('[a-zA-Z0-9]+', word):\n            pattern += 'z'\n            print('\\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0438 {}: {}\\n'.format(pattern, len(word)))\n            \n    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n    if re.match(pattern, text):\n        #print('\\n\u0421\u0442\u0440\u043e\u043a\u0430 {} \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 {}\\n'.format(text, pattern))\n        return True\n    else:\n        #print('\\n\u0421\u0442\u0440\u043e\u043a\u0430 {} \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 {}\\n'.format(text, pattern))\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_wordz = re.search('^z[a-z0-9]+$', text)\n    match_wordz_middle = re.search('[a-z0-9]+$', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    start = text[:text.index('z')]\n    end = text[text.index('z')+1:]\n    if start == end:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    for char in text:\n        if char!= 'z' and char!= 'Z':\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = re.compile(\"z\")\n    flag = 0\n    for i in range(len(text)-1):\n        if word.match(text[i+1])!= None:\n            flag = 1\n            break\n        if flag == 1:\n            break\n    if flag == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_splitted = re.split('\\W', text)\n    string_splitted = list(filter(None, text_splitted))\n    for i in range(len(string_splitted)):\n        if 'z' in string_splitted[i]:\n            if 'z' in string_splitted[i-1] and 'z' in string_splitted[i+1]:\n                return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'z'\n    result = re.search(pattern,text)\n    if result is None:\n        result = False\n    else:\n        result = True\n        if result and (text.startswith('z') or text.endswith('z')):\n            result = False\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    def word_match_middle(word, text):\n        if word[1]==\"z\":\n            return True\n        else:\n            return False\n    matching = False\n    text=text.lower()\n    for i in text:\n        if i=='z':\n            if word_match_middle(text[-1:], text):\n                matching = True\n                break\n        elif i==''or i=='':\n            matching = False\n            break\n    return matching\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # regex:\n    match = re.search(r'z', text)\n    if match:\n        # check if the word contains 'z' and print out the match.\n        # if 'z' in match:\n        #     print('The word contains \"z\"')\n        # else:\n        #     print('The word does not contain \"z\"')\n        #\n        # end of regex\n        # no need to check if end of word, because this only checks for 'z'\n        return True\n    else:\n        # no need to check if start of word, because this only checks for 'z'\n        return False\n    # end of regex\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    lst = re.findall(r'z[^A-Z]',text)\n    return lst\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = input[0:k]\n    for i in range(len(input)-k):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(0, len(input)-k):\n        temp = input[i]\n        input[i] = input[k-1]\n        input[k-1] = temp\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a list to store the reversed elements\n    output = []\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input)): \n        output.append(input[len(input) - k - 1])\n        del(input[len(input) - k - 1])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return None\n    \n    if k == 0:\n        return None\n    \n    while k >= 0:\n        temp = input[k]\n        input[k] = input[len(input)-1]\n        input[len(input)-1] = temp\n        k = k - 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[0]\n    output = []\n    for i in range(k):\n        output.append(temp)\n        temp = input[i]\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_list = input[:]\n    new_list.reverse()\n    for i in range(k):\n        new_list.reverse()\n        print(new_list[i], end='')\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(k, len(input)):\n        output.append(input[i])\n    output.reverse()\n    return output\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code goes here\n    return input[::-1][:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Loop through array, move k elements down and reverse elements.\n    for i in range(0, k): \n        input[i], input[-1 - i] = input[-1 - i], input[i] \n    # print(input)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup[:]\n    for item in test_dict:\n        new_tup.append(item)\n    return tuple(new_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not isinstance(test_dict, dict):\n        raise TypeError('You cannot add a dictionary to a tuple')\n    elif not isinstance(test_dict, dict):\n        raise TypeError('The input is not a dictionary')\n    else:\n        for key in test_dict.keys():\n            if not isinstance(key, str):\n                raise TypeError('The keys in the dictionary are not strings')\n        for key in test_tup:\n            if not isinstance(key, str):\n                raise TypeError('The keys in the tuple are not strings')\n        for key in test_dict.keys():\n            if key not in test_tup:\n                raise KeyError('The key \"{}\" is not in the tuple'.format(key))\n            if not isinstance(test_dict[key], tuple):\n                raise TypeError('Each key in the dictionary must be a tuple')\n        for i in range(len(test_dict)):\n            if not isinstance(test_dict[i], tuple):\n                raise TypeError('Each element in the dictionary must be a tuple')\n            if len(test_dict[i])!= len(test_tup):\n                raise ValueError('The numbers of the elements in the dictionary must match the number of elements in the tuple')\n        for i in range(len(test_dict)):\n            if not isinstance(test_dict[i], tuple):\n                raise TypeError('Each element in the dictionary must be a tuple')\n            if len(test_dict[i])!= len(test_tup):\n                raise ValueError('The numbers of the elements in the dictionary must match the number of elements in the tuple')\n            if not all(isinstance(x, (int, float)) for x in test_dict[i]):\n                raise TypeError('Each element in the dictionary must be a tuple of numbers')\n        for i in range(len(test_dict)):\n            if not isinstance(test_dict[i], tuple):\n                raise TypeError('Each element in the dictionary must be a tuple')\n            if len(test_dict[i])!= len(test_tup):\n                raise ValueError('The numbers of the elements in the dictionary must match the number of elements in the tuple')\n            if len(test_dict[i]) == 0:\n                raise ValueError('Each element in the dictionary must have a non-zero number')\n            if not all(isinstance(x, (int, float)) for x in test_dict[i]):\n                raise TypeError('Each element in the dictionary must be a tuple of numbers')\n        return tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup[key] = value\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for k, v in test_dict.items():\n        if k in test_tup:\n            test_tup[k] += v\n        else:\n            test_tup[k] = v\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    test_dict = tuple(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup + test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    # store the inputs in a tuple\n    tup = (test_tup[0], test_tup[1], test_tup[2])\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # modify the test_dict to contain the values of the tuple\n    for k,v in test_dict.items():\n        # make the key the tuple.\n        key_tuple = (k,)\n        # add the tuple to the dict\n        test_tup = test_tup + key_tuple, v\n    # return the updated test_tup\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup + (test_dict,))\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    '''\n    return the average of the path\n    '''\n    N = len(cost)\n    # if N == 1:\n    #     return cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_average=0\n    for row in cost:\n        for item in row:\n            max_average+=item\n    return max_average/len(cost)\ndef minimaxWithPath(node):\n    '''\n    Given a complete node, returns the optimal path to the node, with the minimum cost to reach the node.\n    '''\n    global best\n    global max_average\n    global min_average\n    current_node=node\n    current_cost=cost[node[0]][node[1]]\n    if current_cost<max_average:\n        best=node\n        max_average=current_cost\n    if current_cost>min_average:\n        best=node\n        min_average=current_cost\n    for neighbor in cost[node[0]][node[1]]:\n        if neighbor[0]==node[0] and neighbor[1]==node[1]:\n            continue\n        new_node=Node(current_node[0],current_node[1],neighbor[0],neighbor[1],current_cost+neighbor[2])\n        global best\n        global max_average\n        global min_average\n        global curr_best\n        global curr_min_average\n        curr_best=new_node\n        curr_min_average=current_cost+neighbor[2]\n        if new_node.parent is None:\n            new_node.parent=node\n            new_node.g=current_cost+neighbor[2]\n        else:\n            new_node.g=new_node.parent.g+current_cost+neighbor[2]\n            new_node.parent.g=new_node.g\n        new_node.h=new_node.g+cost[new_node.parent[0]][new_node.parent[1]]\n        if new_node.parent.g>new_node.g:\n            new_node.parent.f=new_node.g\n        else:\n            new_node.parent.f=new_node.g+1\n        if new_node.g>=best.g:\n            best=new_node\n    if best.parent is not None:\n        if best.parent.f>best.f:\n            best=best.parent\n    return best\ndef calcAllPaths(node):\n    '''\n    Given a complete node, returns a dictionary of all the possible path.\n    '''\n    possible_paths=dict()\n    new_node=Node(node[0],node[1],node[2],node[3],cost[node[0]][node[1]])\n    if new_node.parent is not None:\n        possible_paths[node]=new_node\n        new_node.parent=possible_paths[node]\n        new_node.g=cost[node[0]][node[1]]+new_node.parent.g+new_node.parent.parent.g+cost[new_node.parent.parent[0]][new_node.parent.parent[1]]\n    else:\n        possible_paths[node]=new_node\n        new_node.parent=possible_paths[node]\n        new_node.g=cost[node[0]][node[1]]+new_node.parent.g+new_node.parent.g\n    for neighbor in cost[node[0]][node[1]]:\n        if neighbor[0]==node[0] and neighbor[1]==node[1]:\n            continue\n        new_node=Node(node[0],node[1],neighbor[0],neighbor[1],cost[node[0]][node[1]]+neighbor[2])\n        new_node.parent=possible_paths[node]\n        new_node.g=new_node.parent.g+neighbor[2]\n        new_node.h=new_node.g+cost[node[0]][node[1]]+neighbor[2]\n        if new_node.parent.g>new_node.g:\n            new_node.parent.f=new_node.g\n        else:\n            new_node.parent.f=new_node.g+1\n        if new_node.g>=best.g:\n            best=new_node\n        possible_paths[node]=new_node\n    return possible_paths\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize the result variable.\n    result = 0\n    # For each path\n    for path in range(n):\n        # For each cell of the path\n        for cell in range(n):\n            # If this cell is visited in the path\n            if cost[path][cell] > 0:\n                # Add the total cost as the result\n                result += cost[path][cell]\n    # Return the result\n    return result/n\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N < 1:\n        return -1\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    if cost == []:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Determine size of matrix\n    n = len(cost)\n    m = len(cost[0])\n    if n == m == 1:\n        return cost[0][0]\n    else:\n        # Initialize variables\n        d = [0] * n\n        max1 = [0] * n\n        avg = [0] * m\n        for i in range(n):\n            for j in range(m):\n                if (i == 0 and j == 0):\n                    d[i] = cost[i][j]\n                    max1[i] = d[i]\n                else:\n                    d[i] = cost[i][j] + max(d[i-1], max1[i-1])\n                    avg[i] = d[i] / 2\n                    max1[i] = d[i]\n            # Average is sum of squares\n            avg[i] = sum([(d[i]**2) for i in range(n)])\n        # Compute average\n        avg = sum(avg) / m\n        # Return maximum average\n        return avg\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #\n    # \n    # TESTING\n    #\n    #\n    '''\n    data = [[0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if (n == 1):\n        return cost[0]\n    maxCum = 0\n    for i in range(n):\n        for j in range(n-i):\n            s = cost[i][j] + cost[i][j+1]\n            if (s > maxCum):\n                maxCum = s\n    return maxCum / n\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #my solution\n    maxAverage = 0\n    paths = []\n    for i in range(len(cost)):\n        paths.append(paths[i] + [cost[i][i]])\n    for i in range(len(paths)):\n        for j in range(len(paths)):\n            sum = 0\n            if len(paths[i]) == 0:\n                continue\n            for k in range(len(paths[j])):\n                sum += paths[i][k]\n            if len(paths[j]) == 0:\n                continue\n            sum /= len(paths[i])\n            maxAverage += sum\n    return maxAverage / len(cost)\n    \n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    solution = []\n    for i in range(N):\n        solution.append(0)\n    for i in range(N):\n        for j in range(N):\n            solution[i] += cost[i][j]\n    for i in range(N):\n        for j in range(N):\n            solution[i] -= cost[i][j]\n    return solution\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(\"Filtering students that have below the minimum\")\n    for student in students:\n        height, weight = students[student]\n        if height>h and weight>w:\n            students[student] = (weight,height)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_to_check = students.items()\n    filtered_students = []\n    \n    for name, (height, weight) in students_to_check:\n        if height > h and weight > w:\n            filtered_students.append(name)\n        \n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students.values():\n        if student[1][0] < h and student[1][1] < w:\n            students[student[0]] = student\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = []\n    for student in students:\n        if student[0]<h and student[1]<w:\n            filtered.append(student)\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students:\n        if i['height']>h and i['weight']>w:\n            print(i['name'],' has height ',i['height'],' and weight ',i['weight'])\n        else:\n            pass\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height = h\n    min_weight = w\n    filtered_students = []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #return [student for student in students if student[1][1] > h and student[1][0] > w]\n    return [student for student in students if student[1][1] > h and student[1][0] > w]\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    if h =='min':\n        min_height = min(students.values())\n        students = {k:v for (k,v) in students.items() if v>min_height}\n    if w =='min':\n        min_weight = min(students.values())\n        students = {k:v for (k,v) in students.items() if v>min_weight}\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for s in students:\n        if s['height']<h and s['weight']<w:\n            print(s['name'],'has a height of',s['height'],'and weight of',s['weight'])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    for i in students.values():\n        if i[1]>=h and i[1]<=w:\n            return students\n    \ndef get_sum(student_data):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - the sum of the two heights and the two weights.\n    '''\n    \n    sum_height = 0\n    sum_weight = 0\n    \n    for i in student_data.values():\n        sum_height = sum_height+i[0]\n        sum_weight = sum_weight+i[1]\n    \n    return sum_height, sum_weight\n    \ndef main():\n    student_data = load_data()\n    h = filter_data(student_data, 18, 182)\n    w = filter_data(student_data, 40, 162)\n    \n    sum_height, sum_weight = get_sum(student_data)\n    \n    print('Students with height less than or equal to {} are: {}'.format(18,h.keys()))\n    print('Students with weight less than or equal to {} are: {}'.format(182,w.keys()))\n    print('The sum of height and weight is: {}'.format(sum_height))\n    print('The sum of weight and height is: {}'.format(sum_weight))\n    \n    print('The average height is: {}'.format(sum_height/len(h.values())))\n    print('The average weight is: {}'.format(sum_weight/len(w.values())))\n    \nmain("
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n    \n    i, j, c = 0, 0, 0\n    \n    # loop through each element in the lists\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            c += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return c\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i, value in enumerate(nums1):\n        if value == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    def same_pair(nums, i, j):\n        '''\n        The input is defined as the indices of the two lists.\n        The output is a list of indices.\n        '''\n        count_x = 0\n        for i in range(len(nums)):\n            if nums[i]!= nums[j]:\n                count_x += 1\n        return count_x\n    \n    ans = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and i!= j:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i in range(len(nums1)) if nums1[i] == nums2[i]])\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #set = set(nums1)\n    #for i in nums2:\n        #if i in set:\n            #return 1\n    #else:\n        #return 0\n    '''\n    #set = set(nums1)\n    if len(nums2)!= len(set(nums2)):\n        return 0\n    else:\n        count = 0\n        for i in nums2:\n            if i in set(nums1):\n                count += 1\n            else:\n                break\n        return count\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] in nums2:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # create an empty dictionary to store the indices\n    d = {}\n    # iterate through both lists\n    for i in range(len(nums1)):\n        # set the index to 0 if the value is not found in the other list\n        if nums1[i] not in d:\n            d[nums1[i]] = 0\n        # if the value is the same, increment the count by one\n        d[nums1[i]] += 1\n    # iterate through the dictionary\n    for key in d:\n        # increment the count if the value is found in the other list\n        if nums2[key] in d:\n            d[nums2[key]] += 1\n        # if the value is not found, return 0\n        else:\n            d[nums2[key]] = 0\n        # if the index is in the dictionary, then return the count\n        if key in d:\n            return d[key]\n    # return 0 if no value is found in the dictionary\n    return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    cnt = 0\n    for i, num in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            if num == num2:\n                if num == nums2[j+1]:\n                    cnt += 1\n    return cnt\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #Count number of pairs\n    num_same_pair = 0\n    for index1, value1 in enumerate(nums1):\n        for index2, value2 in enumerate(nums2):\n            if value1 == value2:\n                num_same_pair += 1\n    return num_same_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count = count + 1\n    return count\ndef print_array(nums):\n    '''\n    The input is the list of numbers. Print the number of same elements in the list.\n    '''\n    for i in nums:\n        print(i, end=\" \")\n    print()\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power > len(base):\n        return 0\n    if base == '0':\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while (power > 0):\n        sum += int(base)\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base = base // 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_power = []\n    base_power.append(int(base))\n    power_power = []\n    power_power.append(int(power))\n    sum_digits = []\n    sum_digits.append(0)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif power < 0:\n        return 0\n    elif base == 0:\n        return 0\n    else:\n        return base + power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # raise NotImplementedError\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base==0:\n        return 1\n    else:\n        return base+power_base_sum(base, power-1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    power_sum = 0\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_base = power\n    base_sum = 0\n    for i in range(len(base)):\n        base_sum += int(base[i])\n    while base_sum > power_base:\n        base_sum -= base_sum\n    return base_sum\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_text(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('(?<=[^\\'\\']*)(?=[\\'])', text1).group()\n    \ndef extract_number(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number4(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number5(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number6(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number7(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number8(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number9(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number10(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number11(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number12(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number13(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number14(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number15(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number16(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number17(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number18(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number19(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number20(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number21(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number22(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number23(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number24(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number25(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number26(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number27(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number28(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number29(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number30(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number31(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number32(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number33(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number34(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number35(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search('\\d+', text1).group()\n    \ndef extract_number36(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    retur"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotes = '\"{}\".'.format(text1)\n    return quotes\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = str(text1)\n    quotation_chars = ['\u201c', '\u201d', '&']\n    for char in quotation_chars:\n        text = text.replace(char, \" \")\n    return text.split(\" \")\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text_ = ''\n    for i in range(len(text1)):\n        if text1[i]!='':\n            text_ += text1[i]\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if re.search('[\u2018\u2019]', text1) is not None:\n        return text1\n    else:\n        return None\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # First, we need to find the first 2 quotation marks and convert them to upper case.\n    # We do this by looking for the quotation marks, and then looking for a space.\n    # This will be the start and end of the quotation mark, where we must find the end.\n    # The end will then be the character '\"'\n    \n    # All quotation marks are inside of the quotation mark, and there are 2 quotation marks between the two.\n    # So, we take the first 2 of the quotation marks, and convert it to upper case.\n    # Then, we look for the spaces within the quotation mark.\n    # If there are no spaces within the quotation mark, then it is the end of the quotation mark.\n    # We have to skip the second quotation mark.\n    # We also need to skip the first 2 quotation marks, as they are the first 2.\n    # In order to get the final quotation mark, we need to convert it to upper case.\n    # After that, we need to skip the space, because it is the end of the quotation mark.\n    # The end of the quotation mark is the character '\"'\n    \n    # Now, we are looking for the middle 2 quotation marks, and we look for the spaces within the quotation mark.\n    # This means, we can skip the third quotation mark (because it is the end of the quotation mark).\n    # We skip the first 2 quotation marks.\n    # We skip the second 2 quotation marks.\n    # We are then skipping the second 2 quotation marks, because it is the end of the quotation mark.\n    # Now, we need to skip the first 2 quotation marks, and the first 2 quotation marks (because it is the end of the quotation mark).\n    # We skip the space, because it is the end of the quotation mark.\n    # Now, we have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # We skip the second 2 quotation marks.\n    # We are then skipping the second 2 quotation marks, because it is the end of the quotation mark.\n    # Now, we skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # We skip the second 2 quotation marks.\n    # We are then skipping the first 2 quotation marks, because it is the end of the quotation mark.\n    # Now, we have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # We skip the second 2 quotation marks.\n    # We have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # Now, we have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # We skip the second 2 quotation marks.\n    # We have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # We have to skip the second 2 quotation marks.\n    # We have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # We have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # We have to skip the second 2 quotation marks.\n    # We have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks, because it is the end of the quotation mark.\n    # Now, we have to skip the first 2 quotation marks.\n    # We have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks.\n    # Now, we have to skip the first 2 quotation marks.\n    # Now, we have to skip the second 2 quotation marks"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"'\", '\"')\n    text2 = re.sub(\"[^A-Za-z0-9]+\", \" \", text1).lower()\n    for word in text2:\n        if word in quotation_marks:\n            return word\n    return 'unknown'\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.split()\n    quotations_list = list(filter(None, text2))\n    #print(quotations_list)\n    return quotations_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # regex: if the whole string contains \",\" or \";\", the string becomes a list and it is used to extract the value.\n    quotation_regex = r'\"([^\"]*)\"'\n    quotation_list = re.findall(quotation_regex, text1)\n    # the whole list is used to extract the value from the quotation_list\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\"','')\n    text1 = re.sub('\\s+','', text1)\n    text1 = re.sub('([^0-9])', '', text1)\n    text1 = text1.lower()\n    text1 = text1.split(' ')\n    text1 = [word for word in text1 if word not in'']\n    return text1\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert len(test_tup) % 2 == 0, \"the length of the tuple must be even\"\n    assert test_tup[0] > 0, \"all the numbers must be greater than 0\"\n    return tuple(map(lambda x: x * x, test_tup[::2]))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i * t for i, t in zip(test_tup[:-1], test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = [x * (x+1) for x in test_tup]\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] *= test_tup[i+1]\n    return test_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # TODO: Create a new tuple of length N and replace each element of the original tuple with the result of multiplying each element of the original tuple by the result of the previous element.\n    \n    # Set the loop condition to False as the first element will be the same as the second element.\n    loop_condition = True\n    \n    # Create an empty tuple to store the values.\n    new_tuple = []\n    \n    # Continue if the loop condition is true.\n    while loop_condition:\n        \n        # Check the new_tuple length.\n        if len(new_tuple) == 0:\n            new_tuple = test_tup\n        else:\n            new_tuple = []\n            \n            # Check the length of the previous tuple.\n            if len(new_tuple) == 0:\n                loop_condition = False\n            else:\n                for i in range(0, len(new_tuple)):\n                    new_tuple.append(new_tuple[i] * test_tup[i])\n                    \n    # Return the tuple.\n    return new_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l_tuple=[]\n    for i in range(len(test_tup)):\n        l_tuple.append(test_tup[i]*(i+1))\n    return tuple(l_tuple)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if not isinstance(test_tup, (tuple, list)):\n        raise TypeError(\"tup must be a tuple or a list\")\n    # t_1, t_2,..., t_{N-1}\n    if len(test_tup)!= len(set(test_tup)):\n        raise ValueError(\"tup must not contain duplicate values\")\n    else:\n        return tuple([test_tup[i] for i in range(len(test_tup))])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = len(test_tup)\n    # l = len(test_tup[0])\n    test_tup_new = (tuple(x*(i+1) for i,x in enumerate(test_tup)))\n    # test_tup_new = tuple(x*i for x in test_tup for i in range(1,l+1))\n    return test_tup_new\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = len(test_tup)\n    tup = tuple(test_tup)\n    for i in range(l):\n        tup = tuple(map(lambda x: x * tup, test_tup[i:]))\n    return tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda tup: tup[0] * tup[1], test_tup))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = [0 for i in range(len(lst1)+len(lst2))]\n    for i in range(len(lst1)):\n        new_lst[i+len(lst2)] = lst1[i] + lst2[i]\n    return new_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1=list(set(lst1))\n    lst2=list(set(lst2))\n    return (sum(lst1)+sum(lst2))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    # Remove extra numbers from the lists\n    lst1.extend(lst2)\n    # Convert the string to an int\n    lst1 = list(map(int,lst1))\n    # Initialize an empty list\n    num_list = []\n    # Iterate over the lists, and add each element to the list\n    for i in range(len(lst1)):\n        num_list.append(lst1[i] + lst2[i])\n    # Convert the list to a string\n    num_list = list(map(str,num_list))\n    # Return the string\n    return ','.join(num_list)\n    "
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    l1 = len(lst1)\n    l2 = len(lst2)\n    lst = []\n    for i in range(l1):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    s=0\n    for i in range(len(lst1)):\n        s=s+lst1[i]+lst2[i]\n    return s\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return sum(lst1+lst2)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    '''\n    Solve by iterating through the list.\n    Store the number of duplicates in a count variable.\n    Check if count is greater than the number of duplicates.\n    If it is, remove all duplicates.\n    If it isn't, add the duplicates to the list and count the number of duplicates removed.\n    '''\n    count = 0\n    for group in groupby(nums):\n        group_copy = list(group)\n        # print(group_copy)\n        for i in range(len(group_copy)):\n            if group_copy[i] == group_copy[i-1]:\n                count += 1\n            else:\n                # print(\"hi\")\n                group_copy[i] = \"hi\"\n                count = 1\n                break\n        # print(group_copy)\n        group_copy.remove(\"hi\")\n        group_copy.insert(0, \"hi\")\n        # print(group_copy)\n        # print(len(group_copy))\n    # print(group_copy)\n    # print(count)\n    return count\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # if the list is empty, return an empty list\n    if len(nums) == 0:\n        return []\n    # make a map to keep track of which index is being checked\n    map = dict()\n    # we first loop through the nums and add to the map\n    for i,num in enumerate(nums):\n        # add the index we are at to the map\n        map[num] = i\n    # now we have to loop through each pair of elements in the nums list\n    # and see if any of them has a duplicate\n    # if so, we replace the value at that index with the duplicate\n    # and return it\n    for i,num in enumerate(nums):\n        # if it's the first or last index, then set the value to the last element of the map\n        if i == 0 or i == len(nums)-1:\n            map[num] = nums[-1]\n        # if it's not the first or last element, then set the value to the first element of the map\n        else:\n            map[num] = nums[i-1]\n    # return the map as a list\n    return list(map.values())\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    N = len(nums)\n    for i, x in enumerate(nums):\n        while i < N - 1 and nums[i]!= nums[i + 1]:\n            i += 1\n        res.append(x)\n    return res\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set([item for item, count in groupby(nums)]))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    nums.reverse()\n    for i in range(len(nums)):\n        if nums[i]!= nums[i+1] and nums[i+1]!= nums[i]:\n            yield nums[i]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # A set of unique values of a list\n    temp = set(nums)\n    # A set of duplicate values (containing duplicates)\n    duplicate = set()\n    # Compare unique values to all other values\n    for element in temp:\n        # Check if duplicate is not already in set\n        if element not in duplicate:\n            duplicate.add(element)\n            # If duplicate, add it to the set\n            # Also make sure that the duplicate doesn't repeat\n            # Remove the duplicate\n            for duplicate_element in duplicate:\n                if duplicate_element == element:\n                    # Remove duplicate from the set\n                    duplicate.remove(duplicate_element)\n    return duplicate\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    arr = []\n    for i in range(len(nums)):\n        if nums[i] not in arr:\n            arr.append(nums[i])\n        else:\n            return [nums[i]]\n    return arr\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # If nums is empty or None, just return True\n    if not nums or len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    consecutive_duplicates = []\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # hashmap = {}\n    # for num in nums:\n    #     if num not in hashmap:\n    #         hashmap[num] = 1\n    #     else:\n    #         hashmap[num] += 1\n    #     if hashmap[num] > 1:\n    #         # list = []\n    #         # for i in range(2, hashmap[num]):\n    #         #     list.append(nums[i])\n    #         # nums = list\n    #         break\n    # return list(nums)\n    return [i for i, x in groupby(sorted(nums)) if x]\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    d = (r*h)/2\n    area = 2*math.pi*(d**2)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #initalize radius as 50\n    #initalize height as 2\n    #initalize variables\n    #initialize variables\n    #make an array\n    #find the midpoint of the first circle\n    #recalculate the midpoint\n    #find the angle between the midpoint and the circle\n    #find the distance between the midpoint and circle\n    #find the surface area\n    #return the value\n    import math\n    import numpy as np\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Simple Area calculation\n    return (r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return round(3.14 * (r**2) * (1-math.exp(h)) * math.cos(math.radians(45)) * 3.14,2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the vertical displacement\n    displacement = (r-h) / math.sqrt(1-r**2)\n    \n    #Calculate the 3D surface area\n    side_length = 2*math.pi*r\n    side_area = math.pi*r**2\n    \n    #Lateral surface area in a cone\n    lateral_surface_area = (side_length**3 * side_area * math.sin(displacement)) / (side_length**3 * (side_length-displacement)**3)\n    \n    #Return the lateral surface area\n    return lateral_surface_area\n    \ndef cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    #Calculate the vertical displacement\n    displacement = (r-h) / math.sqrt(1-r**2)\n    \n    #Calculate the 3D surface area\n    side_length = 2*math.pi*r\n    side_area = math.pi*r**2\n    \n    #Lateral surface area in a cylinder\n    lateral_surface_area = (side_length**3 * side_area * math.sin(displacement)) / (side_length**3 * (side_length-displacement)**3)\n    \n    #Return the lateral surface area\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # distance between the two edges\n    E = math.sqrt((r-h)**2+r**2)\n    # area of the cone\n    A = (1/2)*(E**2)\n    # make it a negative number if the surface area is positive\n    A = abs(A)\n    # return the result\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def points(theta):\n        return [math.sin(theta)*r, math.cos(theta)*r]\n    def normal(theta):\n        return [math.cos(theta), -math.sin(theta)]\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    c=math.pi*r**2\n    d=a*(r**2+b**2)\n    e=a*(r**2+c**2)\n    f=a*(c**2+b**2)\n    return 0.5*(a+b+c+d+e+f)\ndef lateralsurface_cone_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    c=math.pi*r**2\n    d=a*(r**2+b**2)\n    return (a+b+c+d)\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_cylinder_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_cuboid(r,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    c=r**2\n    d=a*(r**2+b**2)\n    e=a*(b**2+c**2)\n    f=a*(c**2+d**2)\n    g=a*(d**2+e**2)\n    h=a*(e**2+f**2)\n    return (a+b+c+d+e+f+g+h)\ndef lateralsurface_cuboid_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    c=r**2\n    d=a*(r**2+b**2)\n    e=a*(b**2+c**2)\n    f=a*(c**2+d**2)\n    g=a*(d**2+e**2)\n    h=a*(e**2+f**2)\n    return (a+b+c+d+e+f+g+h)\ndef lateralsurface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_sphere_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_cylinder_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_torus(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_torus_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a torus given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_sphere(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_sphere_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_triangle(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return a*(r+b)\ndef lateralsurface_triangle_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_hexahedron(r,h):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_hexahedron_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a hexahedron given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_biconvex(r,h):\n    '''\n    Write a function to find the lateral surface area of a biconvex given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_biconvex_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a biconvex given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_nurbscurve(r,h):\n    '''\n    Write a function to find the lateral surface area of a nurbs curve given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return 0.5*(a+b)\ndef lateralsurface_nurbscurve_a(r,h):\n    '''\n    Write a function to find the lateral surface area of a nurbs curve given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return (a+b)\ndef lateralsurface_isosurface(r,h):\n    '''\n    Write a function to find the lateral surface area of an isosurface given radius r and the height h.\n    '''\n    a=math.pi*h**2\n    b=r*h**2\n    return a*(r**2+b**2)"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (r*h) / (math.pi * 2)\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*r**3\ndef creeperverte(r,h):\n    '''\n    Write a function to calculate the perimeter of a given cylinder given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return r**3+z0*z1\ndef repereverte(r,h):\n    '''\n    Write a function to calculate the perimeter of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return r**3+z0*z1\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    '''\n    z0 = 1/(2*r)\n    z1 = math.pow(h,2)\n    return z0*math.pi*z1*l**3\ndef lerp(r,h,l):\n    '''\n    Write a function to calculate the lateral surface area of a given cone given its radius r and height h.\n    ''"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #create a regex object\n    regex = re.compile(r'(\\s|,|\\:|\\?|\\!|\\?|\\.')\n    #loop through the text\n    for character in text:\n        #test to see if it is a special character\n        if character in ('\\n', '\\t', '\\r'):\n            #replace the special characters\n            text = text.replace(character, ':')\n            text = text.replace(character, ',')\n            text = text.replace(character, '.')\n        elif character in (' '):\n            #replace all non-spaces with a colon\n            text = text.replace(character, ':')\n        elif character in ('.'):\n            #replace all non-spaces with a colon\n            text = text.replace(character, ':')\n        elif character in ('#'):\n            #replace all non-spaces with a colon\n            text = text.replace(character, ':')\n    return text\ndef read_input(path):\n    '''\n    Read a file in our input format as a string\n    '''\n    with open(path) as f:\n        text = f.read().lower()\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace('\\n', ':')\n    return text\n    \ndef remove_specialchar(text):\n    '''\n    Write a function to remove all occurrences of spaces, commas, or dots.\n    '''\n    text = text.replace(' ', '')\n    text = text.replace(',', '')\n    text = text.replace('.', '')\n    text = text.replace('\\n', '')\n    return text\n    \ndef replace_numbers(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('#', '_')\n    text = text.replace('$', '_')\n    return text\n    \ndef replace_dashes(text):\n    '''\n    Write a function to replace all occurrences of dashes with underscores.\n    '''\n    text = text.replace('-', '_')\n    return text\n    \ndef replace_dashes2(text):\n    '''\n    Write a function to replace all occurrences of dashes with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace('\\n', ':')\n    return text\n    \ndef remove_specialchar(text):\n    '''\n    Write a function to remove all occurrences of spaces, commas, or dots.\n    '''\n    text = text.replace(' ', '')\n    text = text.replace(',', '')\n    text = text.replace('.', '')\n    text = text.replace('\\n', '')\n    return text\n    \ndef replace_numbers2(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('#', '_')\n    text = text.replace('$', '_')\n    return text\n    \ndef replace_numbers3(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers4(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers5(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers6(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers7(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers8(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers9(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers10(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers11(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers12(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers13(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers14(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers15(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers16(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers17(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers18(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers19(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers20(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers21(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers22(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers23(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers24(text):\n    '''\n    Write a function to replace all occurrences of numbers with underscores.\n    '''\n    text = text.replace('__', '_')\n    text = text.replace('!', '_')\n    return text\n    \ndef replace_numbers25(text):\n    '''\n    Write a function to replace all occurrences of number"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r':\\1', text)\n    \ndef replace_all_special_chars(text):\n    '''\n    Write a function that replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r':\\1', text)\n    \ndef replace_stopwords(text):\n    '''\n    Write a function to replace a list of stopwords with a single space.\n    '''\n    pattern = r'\\b(?u)n\\'t\\b'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove a list of punctuation marks from a text.\n    '''\n    pattern = r'[^a-zA-Z]*\\.'\n    return re.sub(pattern, '', text)\n    \ndef remove_stopwords(text):\n    '''\n    Write a function to remove a list of stopwords from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove a list of punctuation marks from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern, '', text)\n    \ndef remove_stopwords(text):\n    '''\n    Write a function to remove a list of stopwords from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove a list of punctuation marks from a text.\n    '''\n    pattern = r'(?u)\\b(?:[a-zA-Z]\\.)+\\b'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r' \\1 ', text)\n    \ndef normalize_text_2(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, r' \\1 ', text)\n    \ndef lowercase_text(text):\n    '''\n    Write a function to lowercase the text.\n    '''\n    pattern = r'(?u)^[a-z]+\\s*'\n    return re.sub(pattern, '', text)\n    \ndef normalize_text_3(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text_4(text):\n    '''\n    Write a function to normalize case and whitespace.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef capitalize_first_word(text):\n    '''\n    Write a function to capitalize first word in a text.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef tokenize_text(text):\n    '''\n    Write a function that takes a string as an argument and returns a list of\n    tokens.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.split(pattern, text)\n    \ndef strip_non_alphanumeric(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is stripped of all non-alphanumeric characters.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern, '', text)\n    \ndef tokenize_text_2(text):\n    '''\n    Write a function that takes a string as an argument and returns a list of\n    tokens.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.split(pattern, text)\n    \ndef remove_punctuation_2(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of punctuation.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation_3(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of punctuation.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_punctuation_4(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of punctuation.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_2(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_3(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_4(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef remove_stopwords_5(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is removed of stopwords.\n    '''\n    pattern = r'(?u)^(?:[A-Z]\\.)+'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text_5(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef lowercase_text_5(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef normalize_text_6(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase.\n    '''\n    pattern = r'(\\s|\\.|\\,|\\:)+'\n    return re.sub(pattern,'', text)\n    \ndef lowercase_text_6(text):\n    '''\n    Write a function that takes a string as an argument and returns a string\n    that is normalized to lowercase"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pat = r'(?P<space>\\s+)'\n    pat2 = r'(?P<com>\\d+)\\s*:\\s*'\n    pat3 = r'(?P<dot>\\d+)'\n    pat4 = r'(?P<dotdot>\\d+)'\n    new_text = re.sub(pat, r'\\1: : ', text)\n    new_text = re.sub(pat2, r'\\1: : ', new_text)\n    new_text = re.sub(pat3, r':\\2', new_text)\n    new_text = re.sub(pat4, r'\\1: ', new_text)\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ','')\n    text = text.replace(',','\\n\\t')\n    text = text.replace('.','\\n\\t\\t')\n    return text\ndef replace_numbers(text):\n    '''\n    Replace all the number symbols with a colon.\n    '''\n    for k,v in int_dic.items():\n        text = text.replace(str(v),'\\n\\t\\t\\t'+str(k)+'\\n')\n    return text\ndef replace_double_newline(text):\n    '''\n    Replace all the double newline characters with a newline character.\n    '''\n    for i in text:\n        if i=='\\n':\n            text=text.replace('\\n','\\n\\t')\n        if i=='\\t':\n            text=text.replace('\\t','\\n\\t')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text "
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile('[\\s]+')\n    text = pattern.sub(':', text)\n    text = pattern.sub('', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # https://www.w3resource.com/python-exercises/exercises/python-exercises-dictionaries.php\n    # https://www.w3resource.com/python-exercises/exercises/python-exercises-dictionaries.php\n    '''\n    format = '<span style=\"color:red;\">{}</span>'\n    text = re.sub(' +',' ',text)\n    text = re.sub('( )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',text)\n    text = re.sub('(, )',' ',tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace('!', ':')\n    text = text.replace(',', ';')\n    text = text.replace(';', ',')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ \\,\\.\\!\\?\\&\\*\\#\\$\\%\\^\\&\\*\\(\\)_\\-\\=\\{\\}\\[\\]\\.\\{\\}]', ': ', text)\n    text = re.sub(r'[\\.\\.\\!\\?\\&\\*\\#\\$\\%\\^\\&\\*\\(\\)_\\-\\=\\{\\}\\[\\]\\.\\{\\}]', ': ', text)\n    text = re.sub(r'\\s+','', text)\n    return text\ndef normalize_numbers(text):\n    '''\n    Replace all numbers and other non-numeric symbols with digits.\n    '''\n    text = re.sub('[0-9]', '0', text)\n    text = re.sub('[\\W_]+','', text)\n    text = text.lower()\n    text = re.sub('[!@#$%^&*()_+-=\\{\\}\\[\\]|~;\\'{}(),/ ]', '', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Remove all stopwords, punctuation, and words that have an ASCII value other than a-z.\n    '''\n    text = re.sub(r'[^a-zA-Z ]', '', text)\n    text = re.sub(r'[a-zA-Z ]', '', text)\n    text = re.sub(r'[^a-zA-Z ]', '', text)\n    text = re.sub(r'\\s+','', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Replace all punctuation marks with a single space.\n    '''\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z ]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_newline(text):\n    '''\n    Remove all characters that are not new lines.\n    '''\n    text = re.sub('[\\n]+','', text)\n    return text\ndef remove_multiple_whitespaces(text):\n    '''\n    Remove all whitespaces from the beginning of all sentences.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\s','', text)\n    return text\ndef remove_corpus_words(text):\n    '''\n    Remove all words that are related to the corpus.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\w+\\s+','', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Remove all stopwords from the beginning of all sentences.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Replace all punctuation marks with a single space.\n    '''\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_newline(text):\n    '''\n    Replace all characters that are not new lines.\n    '''\n    text = re.sub('\\n+','', text)\n    return text\ndef remove_multiple_whitespaces(text):\n    '''\n    Remove all whitespaces from the beginning of all sentences.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\s','', text)\n    return text\ndef remove_corpus_words(text):\n    '''\n    Remove all words that are related to the corpus.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\w+\\s+','', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Replace all stopwords with a single space.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Replace all punctuation marks with a single space.\n    '''\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_newline(text):\n    '''\n    Replace all characters that are not new lines.\n    '''\n    text = re.sub('\\n+','', text)\n    return text\ndef remove_multiple_whitespaces(text):\n    '''\n    Replace all whitespaces from the beginning of all sentences.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\s','', text)\n    return text\ndef remove_corpus_words(text):\n    '''\n    Remove all words that are related to the corpus.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\w+\\s+','', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Replace all stopwords with a single space.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_punctuation(text):\n    '''\n    Replace all punctuation marks with a single space.\n    '''\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_newline(text):\n    '''\n    Replace all characters that are not new lines.\n    '''\n    text = re.sub('\\n+','', text)\n    return text\ndef remove_multiple_whitespaces(text):\n    '''\n    Replace all whitespaces from the beginning of all sentences.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_corpus_words(text):\n    '''\n    Remove all words that are related to the corpus.\n    '''\n    text = re.sub('\\s+','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    text = re.sub('[^0-9a-zA-Z#]','', text)\n    return text\ndef remove_stopwords(text):\n    '''\n    Replace all stopwords with a single space.\n    '''\n    text = r"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    #looping through the array and checking the left boundary if there is a match\n    while index < len(A) and A[index] < x:\n        index += 1\n    #if the left boundary is found, it means that the value is found in the right boundary\n    if index < len(A):\n        return index\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A.count(x) == 0:\n        return -1\n    i = 0\n    while True:\n        if A[i] == x:\n            return i\n        i += 1\n        if i == len(A):\n            return -1\n        \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    if A.count(x) == 0:\n        return -1\n    i = len(A)-1\n    while True:\n        if A[i] == x:\n            return i\n        i -= 1\n        if i == -1:\n            return -1\n        \ndef find_smallest(A):\n    '''\n    Write a function to find the smallest number in a sorted array.\n    '''\n    if A.count(min(A)) == 0:\n        return -1\n    else:\n        return A.index(min(A))\n        \ndef find_largest_number(A):\n    '''\n    Write a function to find the largest number in a sorted array.\n    '''\n    if A.count(max(A)) == 0:\n        return -1\n    else:\n        return A.index(max(A))\n        \ndef find_average(A):\n    '''\n    Write a function to find the average of a sorted array.\n    '''\n    n = len(A)\n    total = 0\n    for i in A:\n        total += i\n    return total/n\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pos = 0\n    while pos < len(A) and A[pos] < x:\n        pos += 1\n    return pos - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while(i < len(A)):\n        if A[i] == x:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if A[0] == x:\n        return 0\n    elif A[0] < x:\n        return find_first_occurrence(A[1:], x)\n    else:\n        return find_first_occurrence(A[1:], x-A[0])\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        elif A[mid] < x:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    while (start + 1 < end):\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid\n        else:\n            start = mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return A.index(x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the first element with the value x\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = 0\n    last_occurrence = len(A)-1\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n        elif A[i] > x:\n            last_occurrence = i\n            first_occurrence = i\n    if last_occurrence == -1:\n        last_occurrence = len(A)\n        first_occurrence = 0\n    if first_occurrence == -1:\n        return -1\n    else:\n        return first_occurrence\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Your code goes here\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        #print(arr[i])\n        if (i == 0):\n            total += sum(arr[i:])\n        elif(i < len(arr)):\n            total += arr[i-1] * sum(arr[i:i+1])\n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    S = 0\n    temp = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            S += arr[i]\n            temp += arr[i]\n            temp *= arr[i]\n    return S\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_ = 0\n    for i in range(n):\n        sum_ += sum(arr[:i+1])\n        sum_ *= arr[i]\n    return sum_\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    # write your code here\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    sums = [0] * arr_len\n    prod = 1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(1, len(arr)):\n            total += arr[i] * sum_Of_Subarray_Prod(arr[:i])\n        return total\n    \nprint(sum_Of_Subarray_Prod([1,2,3,4,5,6])"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr_len = len(arr)\n    arr_sum = 0\n    result = []\n    for i in range(arr_len):\n        arr_sum += arr[i]\n        if arr_sum!= 0:\n            result.append([arr_sum, i])\n    result.sort()\n    return(result)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr: return 0\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + sum_Of_Subarray_Prod(arr[1:])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1,len(arr)+1):\n        s = s + sum_Of_Subarray_Prod(arr[:i]) + sum_Of_Subarray_Prod(arr[i:])\n    return s\n    \ndef is_ValidSubarray(arr, p, q):\n    '''\n    Write a python function to check if the given subarray is valid.\n    '''\n    if (p>=len(arr)) or (q>=len(arr)) or p>=q:\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    return is_ValidSubarray(arr, p+1, q-1)\n    \ndef is_ValidSubarray_DP(arr, p, q):\n    '''\n    DP Solution:\n    Uses a stack with a stack of fixed size.\n    '''\n    if (p==0 or q==0):\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    else:\n        return is_ValidSubarray_DP(arr, p-1, q) or is_ValidSubarray_DP(arr, p, q-1)\n    \ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1,len(arr)+1):\n        s = s + sum_Of_Subarray_Prod(arr[:i]) + sum_Of_Subarray_Prod(arr[i:])\n    return s\n    \ndef is_ValidSubarray_DP(arr, p, q):\n    '''\n    DP Solution:\n    Uses a stack with a stack of fixed size.\n    '''\n    if (p>=len(arr)) or (q>=len(arr)) or p>=q:\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    curr = arr[p]\n    stack = [curr]\n    for i in range(p+1,q+1):\n        curr = arr[i] - arr[p]\n        if curr>0:\n            stack.append(curr)\n    return stack[-1]==0\n    \ndef is_ValidSubarray_BO(arr, p, q):\n    '''\n    bo solution:\n    Uses a stack with a stack of fixed size.\n    '''\n    if (p==0 or q==0):\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    curr = arr[p]\n    stack = [curr]\n    for i in range(p+1,q+1):\n        if arr[i] > arr[p]:\n            stack.append(arr[i] - arr[p])\n        else:\n            if stack[-1]<=0:\n                return False\n            else:\n                curr = arr[i] - arr[p]\n                stack.pop()\n                stack.append(curr)\n    return True\n    \ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1,len(arr)+1):\n        s = s + sum_Of_Subarray_Prod(arr[:i]) + sum_Of_Subarray_Prod(arr[i:])\n    return s\n    \ndef is_ValidSubarray_BO(arr, p, q):\n    '''\n    bo solution:\n    Uses a stack with a stack of fixed size.\n    '''\n    if (p==0 or q==0):\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    curr = arr[p]\n    stack = [curr]\n    for i in range(p+1,q+1):\n        if arr[i] > arr[p]:\n            stack.append(arr[i] - arr[p])\n        else:\n            if stack[-1]<=0:\n                return False\n            else:\n                curr = arr[i] - arr[p]\n                stack.pop()\n                stack.append(curr)\n    return True\n    \ndef is_ValidSubarray_LP(arr, p, q):\n    '''\n    LP solution:\n    Uses a stack with a stack of fixed size.\n    '''\n    if (p==0 or q==0):\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    curr = arr[p]\n    stack = [curr]\n    for i in range(p+1,q+1):\n        if arr[i] > arr[p]:\n            stack.append(arr[i] - arr[p])\n        else:\n            if stack[-1]<=0:\n                return False\n            else:\n                curr = arr[i] - arr[p]\n                stack.pop()\n                stack.append(curr)\n    return True\n    \ndef is_ValidSubarray_LP_OR(arr, p, q):\n    '''\n    LP solution:\n    Uses a stack with a stack of fixed size.\n    '''\n    if (p==0 or q==0):\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    curr = arr[p]\n    stack = [curr]\n    for i in range(p+1,q+1):\n        if arr[i] > arr[p]:\n            stack.append(arr[i] - arr[p])\n        else:\n            if stack[-1]<=0:\n                return False\n            else:\n                curr = arr[i] - arr[p]\n                stack.pop()\n                stack.append(curr)\n    return True\n    \ndef is_ValidSubarray_DP(arr, p, q):\n    '''\n    DP Solution:\n    Uses a stack with a stack of fixed size.\n    '''\n    if (p==0 or q==0):\n        return False\n    if arr[p]!=arr[q]:\n        return False\n    stack = [arr[p]]\n    for i in range(p,q):\n        if arr[i] > arr[p]:\n            stack.append(arr[i] - arr[p])\n        else:\n            if stack[-1]<=0:\n                return False\n            else:\n                curr = arr[i] - arr[p]\n                stack.pop()\n                stack.append(curr)\n    return True\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number\n    n = int(input(\"Enter the number to toggle bits: \"))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    c=0\n    while(n!=0):\n        n &= n-1\n        c+=1\n    return c\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    b = n\n    \n    b = bin(b)[2:]\n    b = list(b)\n    b[-1] = '0'\n    \n    b = ''.join(b)\n    b = int(b, 2)\n    \n    if b!= 1:\n        b = bin(b)[2:]\n        b = list(b)\n        b[-1] = '1'\n        \n        b = ''.join(b)\n        b = int(b, 2)\n        \n        if b!= 0:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n > 1:\n        n = n | 1\n        n = n & 1\n        n = n ^ 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bits = bin(n)[2:].zfill(n-1)\n    return bits\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = 0\n    if n < 10:\n        result = n\n    else:\n        result = n - 10\n    if n % 2 == 1:\n        result += 1\n    if result!= n:\n        return result\n    else:\n        return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    temp = n\n    r = bin(n)[2:]\n    l = bin(int(n) ^ (1 << (len(r) - 1)))[2:]\n    temp ^= int(r, 2) ^ int(l, 2)\n    return temp\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    val = n\n    if (val & 0b10000000)!= 0b10000000:\n        val = val - 0b10000000\n    if val & 0b1000000000 == 0b1000000000:\n        val = val + 0b1000000000\n    if val & 0b10000000000 == 0b10000000000:\n        val = val - 0b10000000000\n    return val\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        count = 0\n        temp = 0\n        if n < 0:\n            n = abs(n)\n        else:\n            n = -n\n        for i in range(0, n):\n            temp = 0\n            for j in range(0, 8):\n                if n & 1 << j:\n                    temp |= 0x01 << j\n                else:\n                    temp |= 0x00 << j\n            count += 1 << count\n        return temp\n    print(toggle_bits(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m=bin(n)[2:]\n    m1=m[-1]\n    m2=m[-2]\n    m=m[:-2]+'0'*(2-len(m))+m2\n    n=int(m,2)\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while a[i] < x:\n        i += 1\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    h = len(a)\n    i = bisect.bisect_left(a, x)\n    if a[i] == x:\n        return i\n    elif a[i] > x:\n        return h-1\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    if l == len(a):\n        return l\n    else:\n        return l+1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i >= len(a):\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # point = 0\n    # for i in range(len(a)):\n    #     if a[i] == x:\n    #         if i == point:\n    #             return i\n    #         point = i\n    # return None\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    insertion_index = bisect.bisect_left(a, x)\n    return insertion_index\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.search(regex, string)\n    if matcher!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    check_str = re.match(regex, string)\n    if check_str: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n    \ndef check_sentence(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match('^[A-Za-z]+$', string)\n    \ndef check_word(word):\n    '''\n    Write a function to check whether the given word is in the word list.\n    '''\n    return word in word_list\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n    \ndef check_str2(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return string[0].lower() in 'aeiou'\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if string[0] in 'aeiouAEIOU': \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(string[0] == 'a' or string[0] == 'e' or string[0] == 'i' or string[0] == 'o' or string[0] == 'u'):\n        return True\n    else:\n        return False\ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(string[0] == 'a' or string[0] == 'e' or string[0] == 'i' or string[0] == 'o' or string[0] == 'u'):\n        return True\n    else:\n        return False\ndef print_pattern(pattern):\n    '''\n    Write a function to print out the pattern as a string.\n    '''\n    result = \"\"\n    # Start each line with a space\n    for char in pattern:\n        result = result + char + \" \"\n    # Add a newline\n    result = result + \" \"\n    # Add a space after each new line\n    result = result + \" \"\n    return result\ndef check_str_pattern(string): \n    '''\n    Write a function that checks whether the pattern is a string of vowels or not.\n    '''\n    if(string == \"aeiouAEIOU\"):\n        return True\n    else:\n        return False\ndef read_file(filename):\n    '''\n    Read in the given file as a string.\n    '''\n    data = []\n    with open(filename) as f:\n        for line in f:\n            data.append(line.strip())\n    return data\ndef read_string(string):\n    '''\n    Read in a string of characters.\n    '''\n    result = \"\"\n    if(string == \"string\"):\n        return \"string\"\n    elif(string == \"spam\"):\n        return \"spam\"\n    elif(string == \"ham\"):\n        return \"ham\"\n    elif(string == \"eggs\"):\n        return \"eggs\"\n    elif(string == \"spam_eggs\"):\n        return \"spam_eggs\"\n    elif(string == \"ham_spam\"):\n        return \"ham_spam\"\n    elif(string == \"dog\"):\n        return \"dog\"\n    elif(string == \"spam_dog\"):\n        return \"spam_dog\"\n    elif(string == \"bacon\"):\n        return \"bacon\"\n    elif(string == \"spam_bacon\"):\n        return \"spam_bacon\"\n    elif(string == \"spam_bacon_spam\"):\n        return \"spam_bacon_spam\"\n    elif(string == \"ham_spam_spam\"):\n        return \"ham_spam_spam\"\n    elif(string == \"spam_spam_spam\"):\n        return \"spam_spam_spam\"\n    elif(string == \"spam_ham_spam\"):\n        return \"spam_ham_spam\"\n    elif(string == \"spam_spam_ham\"):\n        return \"spam_spam_ham\"\n    elif(string == \"spam_spam_ham_spam\"):\n        return \"spam_spam_ham_spam\"\n    elif(string == \"ham_spam_spam_spam\"):\n        return \"ham_spam_spam_spam\"\n    elif(string == \"spam_ham_spam_ham_spam\"):\n        return \"spam_ham_spam_ham_spam\"\n    elif(string == \"ham_spam_spam_spam_spam\"):\n        return \"ham_spam_spam_spam_spam\"\n    elif(string == \"spam_ham_spam_spam_ham_spam\"):\n        return \"spam_ham_spam_spam_spam_ham_spam\"\n    elif(string == \"spam_ham_spam_ham_spam_ham_spam\"):\n        return \"spam_ham_spam_ham_spam_ham_spam_ham_spam\"\n    elif(string == \"ham_ham_spam_ham_spam_ham_spam\"):\n        return \"ham_ham_spam_ham_spam_ham_spam_ham_spam\"\n    elif(string == \"spam_ham_spam_ham_spam_ham_ham_spam\"):\n        return \"spam_ham_spam_ham_spam_ham_spam_ham_spam\"\n    elif(string == \"ham_ham_spam_ham_spam_ham_spam_ham_spam\"):\n        return \"ham_ham_spam_ham_spam_ham_spam_ham_spam_ham_spam\"\n    elif(string == \"ham_spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"):\n        return \"ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"\n    elif(string == \"spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"):\n        return \"spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"\n    elif(string == \"ham_spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"):\n        return \"ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"\n    elif(string == \"spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"):\n        return \"spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"\n    elif(string == \"spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"):\n        return \"spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"\n    elif(string == \"ham_spam_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"):\n        return \"ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham\"\n    elif(string == \"ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham_ham"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in \"AEIOU\" and len(string) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base Case\n    if n == 0:\n        return 0\n    # Recursive Case\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\nprint(geometric_sum(5)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # if the number is 0, return the sum of it's digits\n    if n == 0:\n        return 0\n    # if the number is 1, return n\n    elif n == 1:\n        return n\n    # if n is even, add n/2 to the sum\n    elif n % 2 == 0:\n        return (n + geometric_sum(n/2))\n    # else, add n/2 to the sum\n    else:\n        return (n + geometric_sum(n/2))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        return float('inf')\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 2:\n        return n\n    else:\n        return (n*geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    lst = []\n    i = 1\n    \n    while n > i * i :\n        if n%i == 0:\n            lst.append(i)\n        i+=1\n    \n    return lst\ndef fibonacci(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    \n    if n < 2:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef count(n,k):\n    '''\n    Write a python function to count the number of Fibonacci numbers with k digits.\n    '''\n    \n    if n < 2:\n        return n\n    elif n < 10:\n        return k\n    else:\n        return count(n-1,k-1) + count(n-2,k)"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l=1\n    while l<=n:\n        l=l+1\n    return l\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    #for loop to calculate the count\n    for i in range(1, n+1):\n        count = count + 1\n        #using formula to calculate the sum\n        sum = 0\n        for j in range(1, count):\n            sum = sum + (math.pow(10, j))\n        #using formula to calculate the average\n        avg = sum/count\n        if (avg < 1):\n            return i\n    #the code above failed, because it returns the maximum index found so we just return the minimum index\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n_list = []\n    while n > 0:\n        n_list.append(n%10)\n        n = math.floor(n/10)\n    \n    if len(n_list) == 0:\n        return 0\n    \n    sorted_n_list = sorted(n_list)\n    index = sorted_n_list[-1] + 1\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # p=1\n    # n=int(input(\"Enter the number of digits to be searched: \"))\n    \n    # while n>0:\n    #     p+=1\n    #     n-=1\n    \n    # return math.ceil((n**(1/2))/(1+math.log(n,2)))\n    \n    # for i in range(1,n+1):\n    #     if n%i==0:\n    #         return i\n    \n    # return -1\n    \n    if n>0:\n        return math.ceil((n**(1/2))/(1+math.log(n,2)))\n    else:\n        return -1\n        \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    if n<0:\n        return -1\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n>2:\n        return find_Index(n//2)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 1: \n        return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n_set = set(n)\n    min_value = min(n_set)\n    for i in range(1, min_value + 1):\n        if i not in n_set:\n            return i\n        \ndef find_Index2(n): \n    '''\n    Write a python function to find the index of largest triangular number with n digits. https://www.geeksforgeeks.org/index-of-largest-triangular-number-with-n-digits/\n    '''\n    n_set = set(n)\n    max_value = max(n_set)\n    for i in range(1, max_value + 1):\n        if i not in n_set:\n            return i\n        \ndef newton(a, n, e):\n    '''\n    Write a python function to find the root of a quadratic equation by using the Newton Method. https://www.geeksforgeeks.org/newton-quadratic-equation-principal-derivative-using-python/\n    '''\n    if n == 1:\n        return a\n    \n    b = (n-1)/2\n    c = a\n    d = 1\n    x = b\n    count = 0\n    while count <= 10000:\n        if (x**2 - c) == (b**2 -d):\n            print(f\"n = {n}, b = {b}, c = {c}, d = {d}, x = {x}\")\n            return x\n        elif (x**2 - c) < 0:\n            d = -c/x\n            count += 1\n        else:\n            d = -c/x\n            count += 1\n        x = (b + d)/2\n    print(f\"n = {n}, b = {b}, c = {c}, d = {d}, x = {x}\")\n    return x\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # n-th digit of n is the smallest n such that n^2 is divisible by n\n    # n is 2^n where n = 1 + n.\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    i=0\n    while(n>0):\n        \n        if(n%10 == 1):\n            i=i+1\n        n=n//10\n    \n    if(i==0):\n        print(i+1)\n    else:\n        print(i-1)\n    return i\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = dict()\n    for key, value in test_tup:\n        result[key] = value\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[test_tup[i][0]] = test_tup[i][1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # make a dictionary out of the tuple\n    out = {}\n    # for each element in the tuple, \n    # check if it is in the dictionary, \n    # if so add the element to the dictionary\n    for i in range(len(test_tup)):\n        if type(test_tup[i]) is tuple:\n            out[i] = tuple_to_dict(test_tup[i])\n        else:\n            out[i] = test_tup[i]\n    return out\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value = {}\n    for i in test_tup:\n        key_value[i] = test_tup[i]\n    return key_value\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    if len(test_tup) == 0:\n        return {}\n    for i in range(len(test_tup) - 1):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    temp = {}\n    for index in range(len(test_tup)):\n        temp[test_tup[index]] = test_tup[index+1]\n    return temp\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(len(test_tup)-1):\n        dictionary[test_tup[i]] = test_tup[i+1]\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for key, value in test_tup:\n        result[key] = value\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup = list(test_tup)\n    for i in range(len(test_tup)):\n        test_tup[i] = tuple(test_tup[i])\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict((test_tup[i], test_tup[i+1]) for i in range(len(test_tup)-1))\n    \n    "
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # create a variable to store the length of the string\n    c = len(s)\n    # iterate over the string characters\n    for i in range(c) :\n        # use while loop to print the character\n        while s[i]!= s[i+1] :\n            # if the character has been used\n            if s[i]!= s[i-1] :\n                # break the loop by printing the last character\n                break\n            i = i + 1\n        # if the last character has been used\n        if i == c :\n            # return False as the character is same as itself\n            return False\n    # if all the characters have been used\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s:\n        if i!='' and i!= '\\n' and i!= '\\r' and i!= '\\t' and i!='':\n            print(i)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #print(s)\n    for i in range(len(s)):\n        for j in range(len(s)-i-1):\n            #print(s[j:j+i+1])\n            if s[j:j+i+1]!= s[j+1:j+i+2]:\n                #print(s[j:j+i+1])\n                #print(s[j+1:j+i+2])\n                #print(s[j+1:j+i+2])\n                #print(s[j:j+i+2])\n                return False\n            else:\n                #print(s[j:j+i+1])\n                #print(s[j+1:j+i+2])\n                #print(s[j+1:j+i+2])\n                #print(s[j:j+i+2])\n                #print(s[j:j+i+2])\n                return True\n    #print(s[0:len(s)-i-1])\n    return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (all(x==s for x in s))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == len(set(s)):\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = {}\n    for i in range(len(s)) :\n        a[s[i]] = 0\n    for i in range(len(s)) :\n        if s[i] not in a :\n            a[s[i]] = 1\n        else :\n            a[s[i]] += 1\n    return list(a.values()) == [1, 1]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # define function\n    def is_char_same(c):\n        return c in s\n    return is_char_same\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    check = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    check_string = set(check)\n    check_string = list(check_string)\n    check_string.sort()\n    return check_string == s\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side==1:\n        return math.sqrt(9*9 + 27*27)\n    elif side==2:\n        return math.sqrt(36*36 + 54*54)\n    elif side==3:\n        return math.sqrt(36*36 + 54*54 + 27*27)\n    elif side==4:\n        return math.sqrt(12*12 + 36*36 + 54*54 + 27*27)\n    elif side==5:\n        return math.sqrt(12*12 + 24*24 + 36*36 + 54*54 + 27*27)\n    elif side==6:\n        return math.sqrt(24*24 + 36*36 + 54*54 + 27*27)\n    elif side==7:\n        return math.sqrt(36*36 + 18*18 + 54*54 + 27*27)\n    elif side==8:\n        return math.sqrt(36*36 + 18*18 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==9:\n        return math.sqrt(24*24 + 18*18 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==10:\n        return math.sqrt(36*36 + 12*12 + 18*18 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==11:\n        return math.sqrt(36*36 + 12*12 + 18*18 + 54*54 + 27*27 + 54*54 + 54*54 + 27*27)\n    elif side==12:\n        return math.sqrt(36*36 + 12*12 + 12*12 + 18*18 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==13:\n        return math.sqrt(36*36 + 12*12 + 12*12 + 12*12 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==14:\n        return math.sqrt(12*12 + 12*12 + 12*12 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==15:\n        return math.sqrt(12*12 + 12*12 + 24*24 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==16:\n        return math.sqrt(24*24 + 12*12 + 54*54 + 27*27 + 54*54 + 54*54)\n    elif side==17:\n        return math.sqrt(36*36 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==18:\n        return math.sqrt(36*36 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==19:\n        return math.sqrt(12*12 + 36*36 + 54*54 + 54*54 + 54*54)\n    elif side==20:\n        return math.sqrt(36*36 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==21:\n        return math.sqrt(12*12 + 24*24 + 54*54 + 54*54 + 54*54)\n    elif side==22:\n        return math.sqrt(24*24 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==23:\n        return math.sqrt(36*36 + 18*18 + 54*54 + 54*54 + 54*54)\n    elif side==24:\n        return math.sqrt(36*36 + 18*18 + 54*54 + 54*54 + 54*54)\n    elif side==25:\n        return math.sqrt(36*36 + 12*12 + 18*18 + 54*54 + 54*54 + 54*54)\n    elif side==26:\n        return math.sqrt(36*36 + 12*12 + 12*12 + 18*18 + 54*54 + 54*54)\n    elif side==27:\n        return math.sqrt(36*36 + 12*12 + 12*12 + 12*12 + 54*54 + 54*54)\n    elif side==28:\n        return math.sqrt(36*36 + 12*12 + 12*12 + 12*12 + 54*54 + 54*54)\n    elif side==29:\n        return math.sqrt(36*36 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==30:\n        return math.sqrt(54*54 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==31:\n        return math.sqrt(54*54 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==32:\n        return math.sqrt(54*54 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==33:\n        return math.sqrt(54*54 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==34:\n        return math.sqrt(54*54 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==35:\n        return math.sqrt(54*54 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==36:\n        return math.sqrt(54*54 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==37:\n        return math.sqrt(18*18 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==38:\n        return math.sqrt(18*18 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==39:\n        return math.sqrt(18*18 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==40:\n        return math.sqrt(18*18 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==41:\n        return math.sqrt(36*36 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==42:\n        return math.sqrt(36*36 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==43:\n        return math.sqrt(12*12 + 36*36 + 54*54 + 54*54 + 54*54)\n    elif side==44:\n        return math.sqrt(12*12 + 24*24 + 54*54 + 54*54 + 54*54)\n    elif side==45:\n        return math.sqrt(24*24 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==46:\n        return math.sqrt(36*36 + 18*18 + 54*54 + 54*54 + 54*54)\n    elif side==47:\n        return math.sqrt(36*36 + 18*18 + 54*54 + 54*54 + 54*54)\n    elif side==48:\n        return math.sqrt(36*36 + 54*54 + 54*54 + 54*54 + 54*54)\n    elif side==49:\n        return math.sqrt(12*12 + 36*36 + 54*54 + 54*54 + 54*54)\n    elif side==50:\n        return math.sqrt(12*12 + 24*24 + 54*54 + 54*54 + 54*54)\n    elif side==51:\n        return math.sqrt(12*12 + 24*24 + 54*54 + 54*54 + 54*54)\n    elif side==52:\n        return math.sqrt(12*12 + 24*24 + 54*54 + 54*54 + 54*54)\n    elif side==53:\n        return math.sqrt(12*12 + 12*12 + 54*54 + 54*54 + 54*54)\n    elif side==54:\n        return math.sqrt(12*12 + 12*12 + 12*12 + 54*54 + 54*54)\n    elif side==55:\n        return math.sqrt(12*12 + 1"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #side = input()\n    if side.isalpha():\n        print(\"The input should be a string!\\n\")\n    else:\n        return 0\n    if side == \"q\":\n        print(\"The input should be 'q'\\n\")\n    elif side.isnumeric():\n        return int(side)\n    else:\n        print(\"The input should be a string!\\n\")\n    return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return 0.5\n    elif side == 2:\n        return 0.25*math.sqrt(3)\n    elif side == 3:\n        return 0.75*math.sqrt(3)\n    elif side == 4:\n        return math.sqrt(3)\n    else:\n        return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return 4\n    elif side == 2:\n        return 6\n    elif side == 3:\n        return 12\n    elif side == 4:\n        return 16\n    else:\n        return 8\ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    if side == 1:\n        return 12\n    elif side == 2:\n        return 18\n    elif side == 3:\n        return 24\n    elif side == 4:\n        return 30\n    else:\n        return 24\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'a':\n        return 0.5*math.sqrt(3)*(math.sqrt(2)*math.pi)\n    elif side == 'b':\n        return 0.5*math.sqrt(2)*(math.pi)\n    elif side == 'c':\n        return 0.5*math.sqrt(3)*(math.pi)*(math.sqrt(2)*math.pi)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side ** 2) * math.pi\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_l = side\n    side_r = side\n    side_r = side\n    side_l = side\n    return math.pi * (side_l * side_r)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 3\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    A = 0\n    B = side * (side - 1) / 2\n    for i in range(3):\n        c = 1 / 3\n        A += c * (2 * side + 1) * (-2 * side + 1) * (-1 + 3 * side) * (-1 + 3 * side) * i\n        c = 1 / 3\n        A += c * (2 * side + 1) * (-2 * side + 1) * i\n        A += c * (2 * side + 1) * i\n    return A\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    n = len(list)\n    if n == 0:\n        return\n    \n    i = n - 1\n    while i >= 0:\n        if list[i] > list[i+1]:\n            temp = list[i]\n            list[i] = list[i+1]\n            list[i+1] = temp\n            break\n        i -= 1\n    \n    return list\n    \ndef reverse(list):\n    '''\n    Write a function that reverses a list of numbers in place.\n    '''\n    \n    n = len(list)\n    \n    i = 0\n    while i < n:\n        temp = list[i]\n        \n        j = i\n        \n        while j < n and list[j+1] < temp:\n            list[j] = list[j+1]\n            j += 1\n            \n        list[j] = temp\n        \n        i += 1\n    \n    return list\n    \ndef merge_sort(list):\n    '''\n    Write a function that sorts a given list. The function should call itself recursively for each element that is greater than its predecessor and decrease its value.\n    '''\n    \n    def sort(list, low, high):\n        if low >= high:\n            return\n        \n        mid = low + (high - low) // 2\n        \n        sort(list, low, mid)\n        sort(list, mid+1, high)\n        \n        merge(list, low, mid, high)\n    \n    def merge(list, low, mid, high):\n        i, j = low, mid + 1\n        \n        while i <= mid and j <= high:\n            if list[i] <= list[j]:\n                temp = list[i]\n                list[i] = list[j]\n                list[j] = temp\n                \n                i += 1\n                j += 1\n            else:\n                break\n                \n        while i <= mid:\n            temp = list[i]\n            list[i] = list[j]\n            list[j] = temp\n            i += 1\n            j += 1\n        \n        while j <= high:\n            temp = list[j]\n            list[j] = list[i]\n            list[i] = temp\n            j += 1\n    \n    sort(list, 0, len(list)-1)\n    \n    return list\n    \ndef quick_sort(list):\n    '''\n    Write a function that sorts a given list. The function should call itself recursively for each element that is greater than its predecessor and decrease its value.\n    '''\n    \n    def quick_sort(list, low, high):\n        if low >= high:\n            return\n        \n        i = low + (high - low) // 2\n        \n        quick_sort(list, low, i)\n        quick_sort(list, i+1, high)\n    \n    quick_sort(list, 0, len(list)-1)\n    \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m-1::-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    index_ = len(list) - m\n    for i in range(index_):\n        list[i], list[len(list) - m - i] = list[len(list) - m - i], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_length = len(list)\n    last_index = list_length - 1\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for num in list:\n        new_list.append(num)\n    i = len(list) - 1\n    \n    while i >= 0:\n        if i % m == 0:\n            j = len(list) - 1 - i\n            while j >= 0:\n                new_list[j] = list[j]\n                j -= 1\n            break\n        i -= 1\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i = len(list) - 1\n    for j in range(i-1, -1, -1):\n        temp = list[j]\n        list[j] = list[i]\n        list[i] = temp\n        i = j\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[::-1] + list[:len(list)] + list[len(list):-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.reverse()\n    temp = []\n    i = 0\n    while i < len(list):\n        temp.append(list[i])\n        i = i+m\n    list = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Idea from: https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    if m == 0:\n        return list\n    m = m%len(list)\n    print(m, list[m])\n    return rotate_right(list, m+1)\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is not None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test_tup = tuple(test_tup)\n    if not test_tup:\n        return True\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n        else:\n            return False\n    \n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    count = 0\n    for el in test_tup:\n        if el is None:\n            count += 1\n    return count == 0\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is not None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    if len(test_tup)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = str(startnum)\n    endnum = str(endnum)\n    return [int(i) for i in startnum] + [int(i) for i in endnum]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result=[]\n    for i in range(startnum,endnum+1):\n        x=int(i/10)\n        y=i%10\n        if(x>0 and y==0):\n            result.append(i)\n        elif(y==0):\n            result.append(x)\n        else:\n            result.append(0)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [ x for x in range(startnum, endnum+1) if x % 10 == 0]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = []\n    for i in range(startnum, endnum + 1):\n        if not i%10:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_prime(x):\n        # Corner cases\n        if x == 1:\n            return False\n        if x == 2:\n            return True\n        if x > 2 and x % 2 == 0:\n            return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda n: all(i%n==0 for i in range(startnum, endnum)), range(10)))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    print(startnum, endnum)\n    \n    def divisible_by_digits_recursive(startnum, endnum):\n        if startnum >= endnum:\n            return 0\n        elif startnum == 0:\n            return 0\n        elif startnum % 10 == endnum % 10:\n            return 1 + divisible_by_digits_recursive(startnum / 10, endnum / 10)\n        else:\n            return divisible_by_digits_recursive(startnum, endnum - 10) + divisible_by_digits_recursive(startnum - 10, endnum)\n    \n    print(divisible_by_digits_recursive(startnum, endnum))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    def is_valid(number):\n        # use this funtion to see if the number is divisible by every digit it contains\n        return sum(map(int, str(number))) % 10 == 0\n    \n    # Make a list of all the numbers within the range.\n    start = [x for x in range(startnum, endnum + 1)]\n    \n    # Make a copy of the list, so that it's not modified.\n    valid = list(start)\n    \n    # Check each number in the list against each digit it contains.\n    for num in start:\n        # If the number is valid, add it to the list.\n        if is_valid(num):\n            valid.append(num)\n    \n    return valid\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        if i % 10!= 0:\n            pass\n        else:\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(number):\n        if number == 1:\n            return True\n        else:\n            if number % 10 == 0:\n                return True\n            else:\n                return False\n    \n    result = []\n    for i in range(startnum, endnum + 1):\n        if is_divisible(i):\n            result.append(i)\n    \n    return result"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0):\n        r = -r\n    if (a < 0):\n        a = -a\n    if (a > 360):\n        a = 360\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = math.radians(a)\n    r = math.radians(r)\n    if r < 0.0:\n        r = 0.0\n    if a < 0.0:\n        a = 0.0\n    \n    x = math.cos(r)\n    y = math.sin(r)\n    z = math.tan(a)\n    #print(x,y,z)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > math.pi:\n        print(\"The angle is out of range\")\n        return None\n    elif r > 10:\n        print(\"Radius is too large\")\n        return None\n    elif r < 10:\n        print(\"Radius is too small\")\n        return None\n    else:\n        if(a >= 0):\n            area = r**2 * math.sin(a)\n            return area\n        elif(a >= -math.pi/2):\n            area = r**2 * math.sin(a) * math.sin(math.pi/2 - a)\n            return area\n        else:\n            area = r**2 * math.sin(a) * math.sin(math.pi - a)\n            return area"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # if angle > 360:\n    #     angle = angle - 360\n    #     print(\"Error. Angle is bigger than 360 degrees\")\n    # if angle >= 0:\n    #     print(\"Sector area is: \", (r*math.sin(math.radians(a)))/2)\n    #     return None\n    \n    # else:\n    #     return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>0:\n        return math.pi*(r**2)*a\n    elif r<0:\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # print(r)\n    # print(a)\n    r = float(r)\n    a = float(a)\n    if (a < 0):\n        print('Angle should be positive')\n        return\n    if (r <= 0):\n        print('Radius should be positive')\n        return\n    if (a < 0 or a > 180):\n        print('Angle should be in range of 0 - 180 degrees')\n        return\n    # return math.sqrt(math.sin(math.radians(a))*(math.sin(math.radians(a)) - math.cos(math.radians(a))))\n    return math.sqrt(math.sin(math.radians(a)) * math.sin(math.radians(a)) + math.cos(math.radians(a)) * math.cos(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = math.pi * r ** 2\n    if sector_area > a:\n        sector_area = 0\n    return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return r**2 * math.sin(math.radians(a))**2\n    \ndef find_braid(r,sector_area):\n    '''\n    This function will find the braid as a circle which is approximately equal to the circle that is the radius and the distance between them.\n    '''\n    theta = math.radians(360/sector_area)\n    delta = sector_area * math.sin(theta)\n    return r**2 * math.cos(theta + delta / 2)\n    \ndef find_radius(sector_area,sector_length):\n    '''\n    This function will find the radius of the braid, which is the one that is the length and the angle between the sector and the other braid.\n    '''\n    theta = math.radians(360/sector_area)\n    r = sector_length * math.cos(theta)\n    return r\n    \ndef find_sector_length(sector_area,sector_length):\n    '''\n    This function will find the length of the sector, which is the one that is the angle between the sector and the other braid.\n    '''\n    theta = math.radians(360/sector_area)\n    l = sector_length * math.cos(theta)\n    return l\n    \ndef find_sector(sector_area,sector_length):\n    '''\n    This function will find the sector that is the area of the sector that has the shortest length and angle from the sector area.\n    '''\n    theta = math.radians(360/sector_area)\n    a = sector_area\n    r = sector_length\n    s = sector_length\n    l = sector_length\n    theta2 = math.radians(360/a)\n    sin2 = math.sin(theta2)\n    cos2 = math.cos(theta2)\n    sin1 = math.sin(theta)\n    cos1 = math.cos(theta)\n    sin3 = math.sin(theta2)\n    cos3 = math.cos(theta2)\n    sin4 = math.sin(theta3)\n    cos4 = math.cos(theta3)\n    \n    m1 = -l/2*sin1\n    m2 = l/2*sin2\n    m3 = -l/2*sin3\n    m4 = l/2*sin4\n    \n    for k in range(4):\n        d1 = m1\n        d2 = m2\n        d3 = m3\n        d4 = m4\n        \n        m1 = (sin1*d1*cos1 + cos1*sin2*d1*sin3 + cos2*sin3*d1*sin4 + sin2*sin1*cos3*cos4 - sin3*cos2*sin4)/(d1*d2*d3*d4)\n        m2 = (cos1*d1*cos1 + cos2*sin2*d1*sin3 + cos3*sin3*d1*sin4 + sin2*sin1*cos3*cos4 - sin3*cos2*sin4)/(d1*d2*d3*d4)\n        m3 = (sin1*d2*cos1 + cos2*sin3*d2*sin4 + cos3*sin3*d2*sin5 + sin2*sin1*cos3*cos4 - sin3*cos2*sin5)/(d2*d3*d4)\n        m4 = (cos1*d2*cos1 + cos2*sin3*d2*sin4 + cos3*sin3*d2*sin5 + sin2*sin1*cos3*cos4 - sin3*cos2*sin5)/(d2*d3*d4)\n        \n        r = m1*r\n        s = m2*s\n        l = m3*l\n        theta2 = m4*theta2\n        \n        sin1 = m1*sin1\n        cos1 = m1*cos1\n        sin2 = m2*sin2\n        cos2 = m2*cos2\n        sin3 = m3*sin3\n        cos3 = m3*cos3\n        sin4 = m4*sin4\n        cos4 = m4*cos4\n        \n    return math.sqrt((r**2 + s**2 + l**2 + s*l*sin1)/(4*r*s*l))\n        \ndef circle_area(r,theta):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 2*math.pi*(r**2 * math.cos(theta))\n    \ndef find_sector_area(sector_area):\n    '''\n    This function will find the area of the sector that has the shortest angle from the sector area.\n    '''\n    theta = math.radians(360/sector_area)\n    s = sector_area\n    l = sector_length\n    a = sector_area\n    r = sector_length\n    \n    sin1 = math.sin(theta)\n    sin2 = math.sin(theta+a/2)\n    sin3 = math.sin(theta+a/2+a/4)\n    sin4 = math.sin(theta+a/2+2*a/4)\n    \n    cos1 = math.cos(theta)\n    cos2 = math.cos(theta+a/2)\n    cos3 = math.cos(theta+a/2+a/4)\n    cos4 = math.cos(theta+a/2+2*a/4)\n    \n    for k in range(4):\n        d1 = s\n        d2 = l\n        d3 = a\n        d4 = r\n        \n        m1 = cos1*d1*cos1 + sin1*d1*sin1*sin1\n        m2 = cos2*d2*cos2 + sin2*d2*sin2*sin2\n        m3 = cos3*d3*cos3 + sin3*d3*sin3*sin3\n        m4 = cos4*d4*cos4 + sin4*d4*sin4*sin4\n        \n        r = m1*r\n        s = m2*s\n        l = m3*l\n        a = m4*a\n        \n        sin1 = m1*sin1\n        cos1 = m1*cos1\n        sin2 = m2*sin2\n        cos2 = m2*cos2\n        sin3 = m3*sin3\n        cos3 = m3*cos3\n        sin4 = m4*sin4\n        cos4 = m4*cos4\n        \n    return math.sqrt((r**2 + s**2 + l**2 + s*l*sin1)/(4*r*s*l))\n        \ndef find_sector_length(sector_area,sector_length):\n    '''\n    This function will find the length of the sector, which is the one that is the angle between the sector and the other braid.\n    '''\n    theta = math.radians(360/sector_area)\n    l = sector_length\n    s = sector_length\n    a = sector_area\n    r = sector_length\n    \n    sin1 = math.sin(theta)\n    sin2 = math.sin(theta+a/2)\n    sin3 = math.sin(theta+a/2+a/4)\n    sin4 = math.sin(theta+a/2+2*a/4)\n    \n    cos1 = math.cos(theta)\n    cos2 = math.cos(theta+a/2)\n    cos3 = math.cos(theta+a/2+a/4)\n    cos4 = math.cos(theta+a/2+2*a/4)\n    \n    m1 = r/2*sin1\n    m2 = s/2*sin2\n    m3 = l/2*sin3\n    m4 = a/4*sin4\n    \n    for k in range(4):\n        d1 = m1\n        d2 = m2\n        d3 = m3\n        d4 = m4\n        \n        m1 = (sin1*d1*cos1 + sin2*d2*cos2*sin3 + sin3*sin4*sin4)/"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return 1/math.tan(math.radians(a))*math.pi*r**2\ndef intersects(a,b,c):\n    '''\n    Returns True if a intersects b, otherwise False.\n    '''\n    if a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] < b[1]:\n        return True\n    elif a[0] > b[0] and a[1] > b[1]:\n        return True\n    elif a[0] < b[0] and a[1] > b"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    len_X = len(X)\n    len_Y = len(Y)\n    len_Z = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0] * (len(Y)+1) for i in range(len(X)+1)]\n    print(dp)\n    print(dp[0][0])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    m = len(Z)\n    if m == 0 or n == 0: \n        return \"\"\n    #  build the table for the LCS\n    #  first column : index of LHS\n    #  second column : index of RHS\n    #  third column : LHS LCS\n    #  fourth column : RHS LCS\n    #  initialize the lcs\n    lcs = [[0 for i in range(n + 1)] for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    #  find the LCS for the first string\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if X[i - 1] == Z[j - 1]:\n                lcs[i][j] = 1 + lcs[i - 1][j - 1]\n            else:\n                lcs[i][j] = 0\n    #  find the LCS for the second string\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if Y[i - 1] == Z[j - 1]:\n                lcs[i][j] = 1 + lcs[i - 1][j - 1]\n            else:\n                lcs[i][j] = 0\n    #  find the LCS for the third string\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if X[i - 1] == Z[j - 1]:\n                lcs[i][j] = 1 + lcs[i - 1][j - 1]\n            else:\n                lcs[i][j] = 0\n    #  return the lcs\n    return lcs[-1][-1]"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #create a variable to keep track of length\n    length = 0\n    #length of X and Y\n    if len(X)>len(Y):\n        length = len(Y)\n    else:\n        length = len(X)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if len(X) == 0:\n        return len(Y)\n    if len(Y) == 0:\n        return len(Z)\n    \n    if len(X) < len(Y):\n        return lcs_of_three(Y, Z, X)\n    \n    if len(X) < len(Z):\n        return lcs_of_three(Z, X, Y)\n    \n    x_left = []\n    y_left = []\n    z_left = []\n    x_right = []\n    y_right = []\n    z_right = []\n    \n    for i in range(len(X)):\n        if X[i] == Y[i]:\n            if Y[i] not in x_left:\n                x_left.append(Y[i])\n        else:\n            if Z[i] not in y_left:\n                y_left.append(Z[i])\n        if X[i] == Z[i]:\n            if Z[i] not in z_left:\n                z_left.append(Z[i])\n        else:\n            if X[i] not in x_right:\n                x_right.append(X[i])\n        \n    \n    x_right = set(x_right)\n    y_right = set(y_right)\n    z_right = set(z_right)\n    \n    if len(x_left) == 0 and len(y_left) == 0 and len(z_left) == 0:\n        return max(len(X), len(Y), len(Z))\n    if len(x_right) == 0 and len(y_right) == 0 and len(z_right) == 0:\n        return max(len(X), len(Y), len(Z))\n    \n    if len(x_left)!= 0:\n        x = lcs_of_three(x_left, y_left, z_left)\n    if len(x_right)!= 0:\n        x = lcs_of_three(x_right, y_right, z_right)\n    \n    return x\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a dictionary of char to index\n    # Do a binary search for the element in the array\n    # Return the index of the element if it exists\n    '''\n    S = [['a', 'a', 'a'], ['a', 'b', 'c'], ['a', 'c', 'c']]\n    # find the longest common subsequence between element in array A and element in array B\n    print(lcs_of_three(S[0], S[1], S[2]))\n    # Find the longest common subsequence between element in array A and element in array C\n    print(lcs_of_three(S[0], S[1], S[2]))\n    # Find the longest common subsequence between element in array B and element in array C\n    print(lcs_of_three(S[0], S[1], S[2]))\n    # Find the longest common subsequence between element in array C and element in array A\n    print(lcs_of_three(S[2], S[0], S[1]))\n    '''\n    # First solution\n    def lcs_of_three(self, array):\n        '''\n        Computes the longest common subsequence of two string sequences.\n        :param array: Array of characters\n        :return: Longest common subsequence of the two strings\n        '''\n        # Base case\n        if len(array) < 1 or len(array) == 1:\n            return 1\n        else:\n            # Find the first longest common subsequence\n            l = self.lcs_of_three(array[0], array[1:])\n            # Find the second longest common subsequence\n            r = self.lcs_of_three(array[1:], array[0:])\n            # Return the maximum of both\n            return max(l, r)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #First sort the strings \n    X=sorted(list(set(X)))\n    Y=sorted(list(set(Y)))\n    Z=sorted(list(set(Z)))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    x = len(X)\n    y = len(Y)\n    z = len(Z)\n    \n    if x == y == z == 0: \n        return 0\n    \n    dp = [[0 for x in range(x+1)] for y in range(y+1)]\n    \n    for i in range(x+1): \n        dp[0][i] = i\n    \n    for i in range(y+1): \n        dp[i][0] = i\n    \n    for i in range(z+1): \n        dp[0][i] = 0\n    \n    for i in range(1, x+1): \n        for j in range(1, y+1): \n            if X[i-1] == Y[j-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    print(dp[x][z])\n    return dp[x][z]"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    \n    # Create an empty dictionary to store the longest common subsequence found \n    LCS = {}\n    \n    # find the longest common subsequence with value '0' \n    for i in range(m-1): \n        for j in range(n-1): \n            if X[i] == Y[j] and X[i] == Z[j]: \n                LCS[X[i]] = max(X[i]+1, LCS.get(X[i],0)) + 1\n            elif X[i]!= Y[j] and X[i]!= Z[j]: \n                LCS[X[i]] = 0\n    print(LCS)\n    return max(LCS.values())\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = [[0] * (len(X)+1) for i in range(len(Y)+1)] \n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                lcs[j][i] = lcs[j-1][i-1] + 1\n            else:\n                lcs[j][i] = max(lcs[j-1][i], lcs[j][i-1])\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = str1.split()\n    capital_word_list = []\n    for word in word_list:\n        capital_word_list.append(word.capitalize())\n    return''.join(capital_word_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.replace('''','')\n    str1=str1.replace('\u201d','''')\n    str1=str1.replace('\u201c','''')\n    str1=str1.replace('\\\"',\"'\")\n    str1=str1.replace(\"'\",\"''\")\n    str1=str1.replace(\",\",\"\")\n    str1=str1.replace(\".\",\"\")\n    str1=str1.replace(\",\",\"\")\n    return str1\ndef multiple_capital_words(str1):\n    '''\n    Write a function that takes a string and returns the number of capital words and spaces\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isupper():\n            count+=1\n    return count\ndef multiple_space_words(str1):\n    '''\n    Write a function that takes a string and returns the number of spaces\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isspace():\n            count+=1\n    return count\ndef multiple_upper_words(str1):\n    '''\n    Write a function that takes a string and returns the number of upper words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isupper():\n            count+=1\n    return count\ndef multiple_lower_words(str1):\n    '''\n    Write a function that takes a string and returns the number of lower words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].islower():\n            count+=1\n    return count\ndef remove_digits(str1):\n    '''\n    Write a function that takes a string and returns the number of digits\n    '''\n    str1=str1.replace('-',' ')\n    str1=str1.replace('.','')\n    str1=str1.replace(',',' ')\n    str1=str1.replace('.','')\n    return str1\ndef upper_count(str1):\n    '''\n    Write a function that takes a string and returns the number of upper words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isupper():\n            count+=1\n    return count\ndef lower_count(str1):\n    '''\n    Write a function that takes a string and returns the number of lower words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].islower():\n            count+=1\n    return count\ndef only_digits(str1):\n    '''\n    Write a function that takes a string and returns the number of digits\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            count+=1\n    return count\ndef even_count(str1):\n    '''\n    Write a function that takes a string and returns the number of even words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            if int(i)%2==0:\n                count+=1\n    return count\ndef odd_count(str1):\n    '''\n    Write a function that takes a string and returns the number of odd words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            if int(i)%2!=0:\n                count+=1\n    return count\ndef is_digit(str1):\n    '''\n    Write a function that takes a string and returns the number of digits\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            count+=1\n    return count\ndef is_space(str1):\n    '''\n    Write a function that takes a string and returns the number of spaces\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isspace():\n            count+=1\n    return count\ndef is_upper(str1):\n    '''\n    Write a function that takes a string and returns the number of upper words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isupper():\n            count+=1\n    return count\ndef is_lower(str1):\n    '''\n    Write a function that takes a string and returns the number of lower words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].islower():\n            count+=1\n    return count\ndef is_digit_and_digit_or_space(str1):\n    '''\n    Write a function that takes a string and returns the number of digits and digits\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            count+=1\n        else:\n            if i[0].isspace():\n                count+=1\n    return count\ndef is_digit_and_digit_or_space_and_space(str1):\n    '''\n    Write a function that takes a string and returns the number of digits and digits\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            count+=1\n            if i[0].isspace():\n                count+=1\n        if i[0].isspace():\n            count+=1\n    return count\ndef is_digit_or_digit_and_digit_or_space(str1):\n    '''\n    Write a function that takes a string and returns the number of digits and digits\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            count+=1\n        else:\n            if i[0].isspace():\n                count+=1\n    return count\ndef is_digit_or_digit_and_digit_or_space_and_space(str1):\n    '''\n    Write a function that takes a string and returns the number of digits and digits\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            count+=1\n            if i[0].isspace():\n                count+=1\n        if i[0].isspace():\n            count+=1\n    return count\ndef is_lower_and_lower(str1):\n    '''\n    Write a function that takes a string and returns the number of lower words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].islower():\n            count+=1\n    return count\ndef is_upper_and_upper(str1):\n    '''\n    Write a function that takes a string and returns the number of upper words\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isupper():\n            count+=1\n    return count\ndef is_digit_and_digit_or_space_and_space(str1):\n    '''\n    Write a function that takes a string and returns the number of digits and digits\n    '''\n    str1=str1.split()\n    count=0\n    for i in str1:\n        if i[0].isdigit():\n            count+=1\n        else:\n            if i[0].isspace():\n                count+=1\n    return count\ndef is_digit_and_digit_or_space_and_space_and_space(str1):\n    '''\n    Write a function that takes a string and returns the number of digits and digits\n    '''\n    str1=str1.split()\n    count=0\n    for "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    def capital_word_start_space(s):\n        return re.sub(r'([^a-zA-Z])\\s+', r'\\1 ', s)\n    def remove_spaces_spaces(s):\n        return re.sub(r'\\s+','', s)\n    def fix_space_spaces(s):\n        return re.sub(r' \\s+','', s)\n    \n    words = str1.split()\n    words_no_space = list(map(lambda s: capital_word_start_space(s), words))\n    words_no_space = list(map(lambda s: remove_spaces_spaces(s), words_no_space))\n    words_no_space = list(map(lambda s: fix_space_spaces(s), words_no_space))\n    words_no_space = list(map(lambda s: s.lower(), words_no_space))\n    \n    return \" \".join(words_no_space)"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\" \")\n    str1 = str1.replace(\"-\",\" \")\n    str1 = str1.replace(\"\\n\",\" \")\n    str1 = str1.replace(\"\\t\",\" \")\n    str1 = str1.replace(\"\\r\",\" \")\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\w+', str1.strip())\n    str1 = \" \".join(words)\n    return str1\n    \n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = re.compile('^[a-z]')\n    return re.sub(regex, \" \", str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = re.findall(r\"[A-Z]\\w*\\s\\w*\", str1)\n    print(res)\n    return res\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace('the','')\n    str1 = str1.replace('there','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('of','')\n    str1 = str1.replace('a','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('of','')\n    str1 = str1.replace('on','')\n    str1 = str1.replace('is','')\n    str1 = str1.replace('in','')\n    str1 = str1.replace('has','')\n    str1 = str1.replace('was','')\n    str1 = str1.replace('she','')\n    str1 = str1.replace('her','')\n    str1 = str1.replace('her','')\n    str1 = str1.replace('it','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('which','')\n    str1 = str1.replace('these','')\n    str1 = str1.replace('your','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('they','')\n    str1 = str1.replace('we','')\n    str1 = str1.replace('have','')\n    str1 = str1.replace('would','')\n    str1 = str1.replace('of','')\n    str1 = str1.replace('would','')\n    str1 = str1.replace('like','')\n    str1 = str1.replace('because','')\n    str1 = str1.replace('because','')\n    str1 = str1.replace('both','')\n    str1 = str1.replace('than','')\n    str1 = str1.replace('till','')\n    str1 = str1.replace('although','')\n    str1 = str1.replace('everything','')\n    str1 = str1.replace('at','')\n    str1 = str1.replace('for','')\n    str1 = str1.replace('from','')\n    str1 = str1.replace('down','')\n    str1 = str1.replace('to','')\n    str1 = str1.replace('each','')\n    str1 = str1.replace('out','')\n    str1 = str1.replace('get','')\n    str1 = str1.replace('which','')\n    str1 = str1.replace('your','')\n    str1 = str1.replace('your','')\n    str1 = str1.replace('in','')\n    str1 = str1.replace('into','')\n    str1 = str1.replace('here','')\n    str1 = str1.replace('like','')\n    str1 = str1.replace('be','')\n    str1 = str1.replace('on','')\n    str1 = str1.replace('also','')\n    str1 = str1.replace('without','')\n    str1 = str1.replace('but','')\n    str1 = str1.replace('but','')\n    str1 = str1.replace('but','')\n    str1 = str1.replace('and','')\n    str1 = str1.replace('this','')\n    str1 = str1.replace('that','')\n    str1 = str1.replace('that','')\n    str1 = str1.replace('them','')\n    str1 = str1.replace('our','')\n    str1 = str1.replace('are','')\n    str1 = str1.replace('most','')\n    str1 = str1.replace('those','')\n    str1 = str1.replace('not','')\n    str1 = str1.replace('my','')\n    str1 = str1.replace('was','')\n    str1 = str1.replace('some','')\n    str1 = str1.replace('what','')\n    str1 = str1.replace('when','')\n    str1 = str1.replace('what','')\n    str1 = str1.replace('how','')\n    str1 = str1.replace('where','')\n    str1 = str1.replace('where','')\n    str1 = str1.replace('which','')\n    str1 = str1.replace('why','')\n    str1 = str1.replace('why','')\n    str1 = str1.replace('which','')\n    str1 = str1.replace('while','')\n    str1 = str1.replace('with','')\n    str1 = str1.replace('whose','')\n    str1 = str1.replace('which','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('you','')\n    str1 = str1.replace('yo"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = \"\"\n    i = 0\n    while i < len(str1):\n        if str1[i].isupper():\n            str2 += str1[i].lower()\n            str2 += \" \"\n        elif str1[i].islower():\n            str2 += str1[i].upper()\n            str2 += \" \"\n        i += 1\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(\\b[A-Z][a-z]*\\s?)(\\w+)(\\w+)'\n    return re.sub(pattern,' \\\\1 \\2 \\3',str1)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # create a new list\n    new_list = []\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_str = []\n    for i in range(0,len(nums_str)):\n        count = 0\n        for j in range(0, len(nums_str) - i):\n            if nums_str[j] > nums_str[j+1]:\n                temp = nums_str[j]\n                nums_str[j] = nums_str[j+1]\n                nums_str[j+1] = temp\n                count += 1\n        if count!= 0:\n            sorted_str.append(nums_str[i])\n            for k in range(i,len(nums_str)):\n                if nums_str[k] > nums_str[k+1]:\n                    temp = nums_str[k]\n                    nums_str[k] = nums_str[k+1]\n                    nums_str[k+1] = temp\n                    count += 1\n        if count == 0:\n            break\n    return sorted_str\n        \n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for index in range(len(nums_str)):\n        if nums_str[index] > '9':\n            nums_str[index] = '0' + nums_str[index]\n        elif nums_str[index] < '9':\n            nums_str[index] = '9' + nums_str[index]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_str.sort(key=int)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    print('Beginning to sort numeric strings in a list...')\n    lst = list(nums_str)\n    lst.sort(key=lambda num: num if not isinstance(num, int) else float(num))\n    print('Sorting of the list was successful!')\n    return lst\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Sorting numeric strings by their first number\n    nums = []\n    nums.append(nums_str[0])\n    for i in range(len(nums_str)):\n        if nums_str[i][0] == nums_str[i - 1][0]:\n            nums.append(nums_str[i])\n            nums.sort()\n        else:\n            nums.append(nums_str[i])\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Your code goes here.\n    sorted_numbers = sorted(nums_str)\n    return sorted_numbers\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for i in range(len(nums_str)):\n        num = nums_str[i].split(\".\")\n        num = num[0]\n        new_list.append(num)\n    new_list.sort()\n    for i in range(len(new_list)):\n        nums_str[i] = new_list[i]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_sorted = list(set(nums_str))\n    nums_str_sorted.sort()\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list = []\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    test_list.append(test_tup[2])\n    test_list.append(test_tup[3])\n    test_list.append(test_tup[4])\n    test_list.append(test_tup[5])\n    test_list.append(test_tup[6])\n    test_list.append(test_tup[7])\n    test_list.append(test_tup[8])\n    test_list.append(test_tup[9])\n    test_list.append(test_tup[10])\n    return test_list\n    \ndef check_tuple(test_tup, test_list):\n    '''\n    Write a function to check the tuple against the given list.\n    '''\n    assert test_tup in test_list, 'Incorrect tuple in the test list'\n    \ndef swap_tuple(test_tup, test_list):\n    '''\n    Write a function that swaps the values of the given tuple in the given list.\n    '''\n    test_list.remove(test_tup[0])\n    test_list.remove(test_tup[1])\n    test_list.remove(test_tup[2])\n    test_list.remove(test_tup[3])\n    test_list.remove(test_tup[4])\n    test_list.remove(test_tup[5])\n    test_list.remove(test_tup[6])\n    test_list.remove(test_tup[7])\n    test_list.remove(test_tup[8])\n    test_list.remove(test_tup[9])\n    test_list.remove(test_tup[10])\n    return test_list\n    \ndef check_tuple(test_tup, test_list):\n    '''\n    Write a function to check the tuple against the given list.\n    '''\n    assert test_tup[0] in test_list[0], 'Incorrect tuple in the test list'\n    assert test_tup[1] in test_list[1], 'Incorrect tuple in the test list'\n    assert test_tup[2] in test_list[2], 'Incorrect tuple in the test list'\n    assert test_tup[3] in test_list[3], 'Incorrect tuple in the test list'\n    assert test_tup[4] in test_list[4], 'Incorrect tuple in the test list'\n    assert test_tup[5] in test_list[5], 'Incorrect tuple in the test list'\n    assert test_tup[6] in test_list[6], 'Incorrect tuple in the test list'\n    assert test_tup[7] in test_list[7], 'Incorrect tuple in the test list'\n    assert test_tup[8] in test_list[8], 'Incorrect tuple in the test list'\n    assert test_tup[9] in test_list[9], 'Incorrect tuple in the test list'\n    assert test_tup[10] in test_list[10], 'Incorrect tuple in the test list'\n    \ndef del_tuple(test_tup, test_list):\n    '''\n    Write a function to delete the tuple from the given list.\n    '''\n    test_list = []\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    test_list.append(test_tup[2])\n    test_list.append(test_tup[3])\n    test_list.append(test_tup[4])\n    test_list.append(test_tup[5])\n    test_list.append(test_tup[6])\n    test_list.append(test_tup[7])\n    test_list.append(test_tup[8])\n    test_list.append(test_tup[9])\n    test_list.append(test_tup[10])\n    return test_list\n    \ndef new_tuple(test_list):\n    '''\n    Write a function to add the tuple to the given list and return the new list.\n    '''\n    new_list = []\n    test_list.append(test_tup[0])\n    test_list.append(test_tup[1])\n    test_list.append(test_tup[2])\n    test_list.append(test_tup[3])\n    test_list.append(test_tup[4])\n    test_list.append(test_tup[5])\n    test_list.append(test_tup[6])\n    test_list.append(test_tup[7])\n    test_list.append(test_tup[8])\n    test_list.append(test_tup[9])\n    test_list.append(test_tup[10])\n    return test_list\n    \ndef check_tuple(test_tup, test_list):\n    '''\n    Write a function to check the tuple against the given list.\n    '''\n    assert test_tup in test_list, 'Incorrect tuple in the test list'\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for tup in test_tup:\n        test_list.append(tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print(\"Tuple: \" + str(test_tup))\n    print(\"List: \" + str(test_list))\n    test_list.append(test_tup)\n    print(\"List after append: \" + str(test_list))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for el in test_tup:\n        test_list.append(el)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] <= arr[2 * i] or arr[i] <= arr[2 * i + 1]:\n        return False\n    if not check_min_heap_helper(arr, 2 * i):\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 1:\n        return arr[0] >= arr[1] and arr[0] >= arr[2]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    return arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == (len(arr) - 1): # when the array is at the end of the heap\n        return True\n    else:\n        return check_min_heap_helper(arr, i + 1) or check_min_heap_helper(arr, i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] == -1:\n        return True\n    return check_min_heap_helper(arr, 2 * i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    return arr[i] >= arr[0]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    if arr[i] > arr[-1]:\n        return check_min_heap_helper(arr, 2 * i + 1)\n    else:\n        return check_min_heap_helper(arr, 2 * i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0: return True\n    if arr[i] < arr[i//2]: return check_min_heap_helper(arr, i//2)\n    else: return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= (len(arr)//2):\n        return True\n    else:\n        return arr[i] < arr[i//2]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2] and arr[i//2] < arr[(i+1)//2] and arr[i] < arr[(i+1)//2]:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    num = [None] * n\n    num[0] = 1\n    for i in range(n):\n        num[i+1] = 1 + num[i]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n > 0:\n        return (n + 1) * (n + 1) // 2\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 11\n    elif n == 8:\n        return 21\n    elif n == 9:\n        return 43\n    elif n == 10:\n        return 85\n    elif n == 11:\n        return 171\n    elif n == 12:\n        return 341\n    elif n == 13:\n        return 683\n    elif n == 14:\n        return 1365\n    elif n == 15:\n        return 2731\n    else:\n        return -1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return 0\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return jacobsthal_num(n-1)+jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        raise ValueError('Invalid n value.')\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93:\n        return 93\n    if n == 94:\n        return 94\n    if n == 95:\n        return 95\n    if n == 96:\n        return 96\n    if n == 97:\n        return 97\n    if n == 98:\n        return 98\n    if n == 99:\n        return 99\n    if n == 100:\n        return 100\n    if n == 101:\n        return 101\n    if n == 102:\n        return 102\n    if n == 103:\n        return 103\n    if n == 104:\n        return 104\n    if n == 105:\n        return 105\n    if n == 106:\n        return 106\n    if n == 107:\n        return 107\n    if n == 108:\n        return 108\n    if n == 109:\n        return 109\n    if n == 110:\n        return 110\n    if n == 111:\n        return 111\n    if n == 112:\n        return 112\n    if n == 113:\n        return 113\n    if n == 114:\n        return 114\n    if n == 115:\n        return 115\n    if n == 116:\n        return 116\n    if n == 117:\n        return 117\n    if n == 118:\n        return 118\n    if n == 119:\n        return 119\n    if n == 120:\n        return 120\n    if n == 121:\n        return 121\n    if n == 122:\n        return 122\n    if n == 123:\n        return 123\n    if n == 124:\n        return 124\n    if n == 125:\n        return 125\n    if n == 126:\n        return 126\n    if n == 127:\n        return 127\n    if n == 128:\n        return 128\n    if n == 129:\n        return 129\n    if n == 130:\n        return 130\n    if n == 131:\n        return 131\n    if n == 132:\n        return 132\n    if n == 133:\n        return 133\n    if n == 134:\n        return 134\n    if n == 135:\n        return 135\n    if n == 136:\n        return 136\n    if n == 137:\n        return 137\n    if n == 138:\n        return 138\n    if n == 139:\n        return 139\n    if n == 140:\n        return 140\n    if n == 141:\n        return 141\n    if n == 142:\n        return 142\n    if n == 143:\n        return 143\n    if n == 144:\n        return 144\n    if n == 145:\n        return 145\n    if n == 146:\n        return 146\n    if n == 147:\n        return 147\n    if n == 148:\n        return 148\n    if n == 149:\n        return 149\n    if n == 150:\n        return 150\n    if n == 151:\n        return 151\n    if n == 152:\n        return 152\n    if n == 153:\n        return 153\n    if n == 154:\n        return 154\n    if n == 155:\n        return 155\n    if n == 156:\n        return 156\n    if n == 157:\n        return 157\n    if n == 158:\n        return 158\n    if n == 159:\n        return 159\n    if n == 160:\n        return 160\n    if n == 161:\n        return 161\n    if n == 162:\n        return 162\n    if n == 163:\n        return 163\n    if n == 164:\n        return 164\n    if n == 165:\n        return 165\n    if n == 166:\n        return 166\n    if n == 167:\n        return 167\n    if n == 168:\n        return 168\n    if n == 169:\n        return 169\n    if n == 170:\n        return 170\n    if n == 171:\n        return 171\n    if n == 172:\n        return 172\n    if n == 173:\n        return 173\n    if n == 174:\n        return 174\n    if n == 175:\n        return 175\n    if n == 17"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_num(n):\n        if n < 1: return 1\n        if n == 1: return 1\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    return jacobsthal_num(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    '''\n    Example\n    ----------\n    >>> n = 7\n    >>> jacobsthal_num(n)\n    7\n    '''\n    return n**2\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = 1\n    while True:\n        for i in range(n):\n            if n%i == 0:\n                break\n        else:\n            return a\n        a += 1\n        n //= i\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    len_list = len(test_list)\n    if len_list == K:\n        return test_list\n    elif len_list == K-1:\n        return test_list[:K-1]\n    else:\n        min_k = []\n        for i in range(0, len(test_list)-1):\n            for j in range(i+1, len(test_list)):\n                if test_list[j] < test_list[i]:\n                    min_k.append(test_list[j])\n        min_k.sort()\n        return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #Dictionary to map each item to its index in the list\n    index_map = {}\n    \n    #Dictionary to keep track of the k minimum values\n    minimum_k_values = {}\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Print all tuples in test_list\n    # Print all tuples from test_list\n    # Print all tuples from sorted list\n    # Print all tuples from sorted list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def min_k_records(test_list, k):\n        '''\n        This function takes a list and k and returns the k minimum number of records (without pre-sorting) from the list\n        '''\n        return sorted(test_list)[:k]\n    \n    return min_k_records(test_list, K)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = K\n    for k in range(len(test_list)-1):\n        if test_list[k] < test_list[k+1]:\n            k += 1\n            if k == len(test_list)-1:\n                return test_list[k:k+k]\n    return test_list[k:]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n    for i in test_list:\n        if len(min_k) < K:\n            min_k.append(i)\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: (x[0], x[1]))\n    for i in range(K):\n        sorted_list.pop(sorted_list.index(min(sorted_list, key=lambda x: (x[0], x[1]))))\n    return sorted_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    table = []\n    for el in test_list:\n        table.append(el)\n    table.sort()\n    minimum = table[0][0]\n    for el in range(len(table)):\n        if minimum > table[el][0]:\n            minimum = table[el][0]\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    K = int(K)\n    test_list = sorted(test_list)\n    if K == 0:\n        return test_list\n    if K < 1:\n        return test_list\n    if K > len(test_list):\n        return test_list\n    index = len(test_list)//K\n    for i in range(K):\n        if index % 2 == 0:\n            j = index//2\n        else:\n            j = index-1\n        if j < len(test_list):\n            min_k(test_list[j:], K)\n            index = j\n    return test_list[:index]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # use test cases as tuples\n    tuples = test_list\n    # get the first element from tuple\n    element = tuples[0]\n    # create a copy of the tuple\n    copy_of_tuple = (element,)\n    # find the element in the tuple and return it\n    return (element,)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    index1 = []\n    index2 = []\n    index3 = []\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j == k:\n                    result.append(i)\n                    index1.append(l1.index(i))\n                    index2.append(l2.index(j))\n                    index3.append(l3.index(k))\n    return result, index1, index2, index3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common = []\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    \n    index = 0\n    \n    while index < len(l1):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            common.append(l1[index])\n        index = index + 1\n        \n    return common\n    \n    \ndef similar(l1, l2, l3):\n    '''\n    We say that a element is common for lists l1, l2, l3 if it appears in the same order as it is already sorted. \n    Write a function to find similar elements from three lists. The function should return a list.\n    '''\n    \n    common = []\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    \n    index = 0\n    \n    while index < len(l1):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            common.append(l1[index])\n        index = index + 1\n        \n    return common\n        \n    \ndef remove_dups(l):\n    '''\n    We say that two elements are duplicated if they appear consecutively in the same list. Write a function to remove duplicates. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    for i in l:\n        if i not in occ_l:\n            occ_l.append(i)\n        \n    return occ_l\n    \n    \ndef remove_dups_2(l):\n    '''\n    We say that two elements are duplicated if they appear consecutively in the same list. Write a function to remove duplicates. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    for i in l:\n        if i not in occ_l:\n            occ_l.append(i)\n    \n    return occ_l\n    \n    \ndef remove_dups_3(l):\n    '''\n    We say that two elements are duplicated if they appear consecutively in the same list. Write a function to remove duplicates. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    for i in l:\n        if i not in occ_l:\n            occ_l.append(i)\n    \n    return occ_l\n    \n    \ndef most_common(l):\n    '''\n    We say that a element is common for lists l1, l2, l3 if it appears in the same order as it is already sorted. Write a function to find the most common element from three lists. The function should return a list.\n    '''\n    \n    occ_l = []\n    \n    l1 = sorted(l)\n    l2 = sorted(l)\n    l3 = sorted(l)\n    \n    index = 0\n    \n    while index < len(l1):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            occ_l.append(l1[index])\n        index = index + 1\n        \n    return occ_l\n    \n    \ndef reverse(l):\n    '''\n    We say that the element at the index you are given to the list is reversed. Write a function to reverse the elements of a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return l1\n    \n    \ndef reverse_2(l):\n    '''\n    We say that the element at the index you are given to the list is reversed. Write a function to reverse the elements of a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return l1\n    \n    \ndef reverse_3(l):\n    '''\n    We say that the element at the index you are given to the list is reversed. Write a function to reverse the elements of a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return l1\n    \n    \ndef max_index(l):\n    '''\n    We say that the element at the index you are given to the list is the greatest element. Write a function to find the index of the greatest element in a list. The function should return a list.\n    '''\n    \n    l1 = []\n    \n    for i in range(len(l)):\n        l1.append(l[i])\n    \n    return max(l1)\n    \n    \ndef check_if_range(n):\n    '''\n    We say that n is a range in the form of a list, if n is a range in the form of an integer. \n    Write a function to check whether a range is a range or not. The function should return True if it is, and False otherwise.\n    '''\n    \n    if n == range(1,10):\n        return True\n    \n    else:\n        return False\n    \n    \ndef range_to_list(n):\n    '''\n    We say that n is a range in the form of a list, if n is a range in the form of an integer. \n    Write a function to convert a range of numbers to a list. The function should return a list of all numbers in the range.\n    '''\n    \n    l = []\n    \n    for i in range(n):\n        l.append(i)\n    \n    return l\n    \n    \ndef list_to_range(n):\n    '''\n    We say that n is a list in the form of a range, if n is a list in the form of an integer. \n    Write a function to convert a list of numbers to a range. The function should return a range of numbers.\n    '''\n    \n    l = []\n    \n    for i in n:\n        l.append(i)\n    \n    return l\n    \n    \ndef check_range(n):\n    '''\n    We say that n is a range in the form of a list, if n is a range in the form of an integer. \n    Write a function to check whether a range is a range or not. The function should return True if it is, and False otherwise.\n    '''\n    \n    if n == range(1,10):\n        return True\n    \n    else:\n        return False\n    \n    \ndef search(l, n):\n    '''\n    We say that l is a list in the form of a list, if l is a list in the form of an integer. \n    Write a function to search for a number in a list. The function should return the index of the number in the list. If l does not exist, return -1.\n    '''\n    \n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    \n    return -1\n    \n    \ndef search_2(l, n):\n    '''\n    We say that l is a list in the form of a list, if l is a list in the form of an integer. \n    Write a function to search for a number in a list. The function should return the index of the number in the list. If l does not exist, return -1.\n    '''\n    \n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    \n    return -1\n    \n    \ndef search_3(l, n):\n    '''\n    We say that l is a list in the form of a list, if l is a list in the form of an integer. \n    Write a function to search for a number in a list. The function should return the index of the number in the list. If l does not exist, return -1.\n    '''\n    \n    for i in range(len(l)):\n        if l[i] == n:\n            return i\n    \n    retur"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for l in [l1, l2, l3]:\n        if l.index in l1 or l.index in l2 or l.index in l3:\n            index_list.append(l.index)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l_list = []\n    for x in l1:\n        if x not in l2 and x not in l3:\n            l_list.append(x)\n    return l_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [l1[index] for index in l2 if index in l3 and index in l1]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l_index = []\n    for i in l1:\n        if i in l2:\n            l_index.append(i)\n    for i in l2:\n        if i in l3:\n            l_index.append(i)\n    return l_index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    \n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l1[i] == l3[k]:\n                    index_list.append([i,j,k])\n    \n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    index = 0\n    common = []\n    while (index < len(l1)):\n        if (l1[index] in l2) and (l1[index] in l3):\n            common.append(l1[index])\n        index += 1\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(0, len(l1)):\n        if l1[i] in l2:\n            index_list.append(l1[i])\n        elif l1[i] in l3:\n            index_list.append(l1[i])\n        elif l2[i] in l3:\n            index_list.append(l2[i])\n        elif l3[i] in l1:\n            index_list.append(l3[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # print(l1)\n    # print(l2)\n    # print(l3)\n    # print(type(l1))\n    # print(type(l2))\n    # print(type(l3))\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = numbers[0]\n    smallest_index = 0\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_2 = numbers[0]\n    for num in numbers[1:]:\n        if smallest_2 < num:\n            smallest_2 = num\n    return smallest_2\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = min(numbers)\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for item in numbers:\n        if item < smallest:\n            smallest = item\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for index in range(len(numbers)):\n        if smallest > numbers[index]:\n            smallest = numbers[index]\n            smallest_index = index\n    return smallest, smallest_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i):\n            if numbers[j] > numbers[j+1]:\n                tmp = numbers[j]\n                numbers[j] = numbers[j+1]\n                numbers[j+1] = tmp\n    return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    length = len(numbers)\n    if length == 0:\n        return None\n    elif length == 1:\n        return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Hint: sort the list\n    numbers.sort()\n    # Check if second smallest number is the one\n    if numbers[1] == numbers[2]:\n        return numbers[1]\n    return numbers[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # list of all the strings in the text.\n    patterns = [\n        r'a?(b\\s)?([0-9]+)(b\\s)?(\\d+)(b\\s)?(\\d+)', \n        r'a?(b\\s)?([0-9]+)(b\\s)?(\\d+)', \n        r'a?(b\\s)?([0-9]+)(b\\s)?(\\d+)', \n        r'a?(b\\s)?([0-9]+)(b\\s)?(\\d+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?(\\d+)',\n        r'a?(b\\s)?([0-9]+)(b\\s)?(\\d+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b\\s)?([0-9]+)(b"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a_b_pattern = re.compile(r\"a\\s+b\\s+\")\n    a_b_regex = a_b_pattern.finditer(text)\n    if a_b_regex:\n        for x in a_b_regex:\n            a_b_group = x.group()\n            #print(\"Group: \" + a_b_group)\n            text_split = a_b_group.split(\"b\")\n            text_group = \"\".join(text_split)\n            if text_group[0] == \"a\":\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #find all a and b\n    a_b_regex = re.compile(r'(a|b)')\n    a_b_matches = a_b_regex.findall(text)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\b'\n    result = re.search(pattern, text)\n    if result is not None:\n        print(\"Match found\")\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    '''\n    #You will find this regex in our exercise.\n    pattern = r'a\\b'\n    result = re.search(pattern,text)\n    if not result:\n        raise Exception('No match')\n    return result.group()\n    '''\n    pattern = r'a\\b'\n    result = re.search(pattern,text,re.IGNORECASE)\n    if not result:\n        raise Exception('No match')\n    return result.group()\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'\n    result = re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)\n    if not result:\n        raise Exception('No match')\n    return result[0]\n    '''\n    pattern = r'a\\b'"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        print(text)\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(0,len(matches)):\n            if matches[i].count('a') == 1:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #Define regular expressions\n    pattern = re.compile(\"a\")\n    #Finds all matches\n    matches = pattern.findall(text)\n    #If there is a match, print it\n    if matches:\n        for i in range(len(matches)):\n            if matches[i].count('a') == 1 and matches[i].count('b') == 0:\n                print(matches[i])\n    else:\n        print(\"No matches found\")\ndef text_match_zero_one_12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's."
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'[a-zA-Z]+\\s?[a-zA-Z]+\\s?[a-zA-Z]+', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #set of all possible characters to be matched\n    chars = set('''abcdefghijklmnopqrstuvwxyz\n    ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    0123456789\n    () * ''')\n    #iterate over string\n    for char in text:\n        if char not in chars:\n            return False\n    return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_to_match = text.lower() #https://docs.python.org/3/tutorial/input.html\n    text_to_match = text_to_match.replace('a','B')\n    text_to_match = text_to_match.replace('b','A')\n    text_to_match = text_to_match.replace(' ','')\n    text_to_match = text_to_match.replace(',',' ')\n    text_to_match = re.sub('[,]',' ',text_to_match) #replace all commas with a space\n    text_to_match = re.sub('^\\s+',' ',text_to_match) #replace all whitespace characters with a space\n    text_to_match = re.sub('\\s+$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^\\s+$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('\\s+',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('^',' ',text_to_match) #replace spaces with nothing\n    text_to_match = re.sub('$',' ',text_to_match) #replac"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    zero_one_pattern = r'(?P<a>[\\w\\s\\d]+)\\.(?P<b>[\\w\\s\\d]+)\\.'\n    matches = re.findall(zero_one_pattern, text)\n    # return matches\n    if len(matches) == 0:\n        return False\n    else:\n        return matches\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            reverse_count += 1\n    return reverse_count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #test_list = ['a','b','c','a','b','c','a','d']\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i):\n            if test_list[j] > test_list[j+1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-1):\n            if test_list[j] == test_list[j+1]:\n                count += 1\n    return count\n    #-------------------practice------------------------------\n    # Your code here\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-1):\n            if test_list[j] == test_list[j+1] and test_list[i] == test_list[i+1]:\n                count += 1\n    return count\n    #-------------------practice------------------------------\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # loop through each string\n    for item in test_list:\n        if item[::-1] == item:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                reverse_count += 1\n    return reverse_count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i-1):\n            if test_list[j] == test_list[j+i] and test_list[j] == test_list[j+i+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = list(test_list)\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n    \ntest_string = input('Enter a string: ')\nprint('The number of pairs of reverse strings:', count_reverse_pairs(test_string))"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #Your code here\n    s = ''\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            s = s + test_list[j] +''\n            s = s.rstrip() +''\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if test_list == []:\n        return 0\n    length = len(test_list)\n    result = 0\n    for i in range(length):\n        for j in range(i+1, length):\n            if test_list[i] == test_list[j]:\n                result += 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        t = list1[i]\n        for j in t:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_ = {}\n    for i in list1:\n        i = list(i)\n        i = tuple(i)\n        dict_[i] = dict_.get(i, 0) + 1\n    return dict_\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if list1 == None:\n        return None\n    list_tuple = tuple(map(tuple, list1))\n    d = {}\n    for i in list_tuple:\n        d[i] = list1.count(i)\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    t = {}\n    for i in range(len(list1)):\n        x = (tuple(list1[i]), list1[i])\n        if x in t:\n            t[x] += 1\n        else:\n            t[x] = 1\n    return t\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if not list1:\n        return {}\n    sublists = {}\n    for i in range(len(list1)):\n        sublists[list1[i]] = len(list1[i])\n    return sublists\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_ = {}\n    for i in list1:\n        tuple_ = ()\n        for j in i:\n            if tuple_ not in dict_.keys():\n                dict_[tuple_] = 0\n            dict_[tuple_] += 1\n            tuple_ = tuple_ + (j,)\n    return dict_\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    map = defaultdict(lambda: defaultdict(int))\n    map['c']['a'] = 1\n    map['c']['b'] = 2\n    map['c']['c'] = 1\n    map['d']['c'] = 1\n    map['d']['d'] = 2\n    map['e']['d'] = 1\n    map['f']['d'] = 1\n    return map\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_of_lists = {}\n    for i in range(len(list1)):\n        list_ = []\n        for j in range(len(list1[i])):\n            list_.append(list1[i][j])\n        dict_of_lists[tuple(list_)] = list1[i].count(list_)\n    return dict_of_lists\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    a = dict()\n    for i in list1:\n        a[tuple(i)] = list1.count(i)\n    return a\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(l1): l1.count(l1) for l1 in list1}\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return type(num)==str and num.isdigit()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    precision = 2\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if len(num) == 0 or len(num)!= len(str(num)):\n            return False\n        else:\n            return True\n            \ndef main():\n    # Test\n    assert is_decimal('1.234') == True\n    assert is_decimal('1.000000') == False\n    assert is_decimal('0.000000') == False\n    assert is_decimal('3.200') == True\n    assert is_decimal('123.456') == False\n    assert is_decimal('34.5') == False\n    assert is_decimal('0.34') == False\n    assert is_decimal('0.0001') == False\n    assert is_decimal('1e-18') == False\n    assert is_decimal('1e-18') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1e-16') == False\n    assert is_decimal('1"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return int(num)\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for i in range(len(num)):\n        if num[i] == '.':\n            return False\n        if num[i] == 'e' or num[i] == 'E':\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '':\n        return False\n    if num[0] == '-' or num[0] == '+':\n        num = num[1:]\n    if num[0] == '0':\n        num = num[1:]\n    for i in range(len(num)):\n        if num[i] == '.':\n            break\n        else:\n            return False\n    if num[-1] == '.':\n        num = num[0:-1]\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit() and int(num)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.lstrip('-0').isdigit()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if isinstance(num, str):\n        num = num.replace('.', '')\n        if not num.isdigit():\n            return False\n        \n        if len(num) == 1:\n            return True\n        \n        if num[0] == '0' and len(num) > 1:\n            return False\n        \n        for char in num:\n            if not char.isdigit():\n                return False\n        \n        return True\n    \n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_int(num):\n    '''\n    Write a function to check whether a given string is an integer.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n        \ndef is_positive(num):\n    '''\n    Write a function to check whether a given string is a positive integer.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_float(num):\n    '''\n    Write a function to check whether a given string is a float.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_negative(num):\n    '''\n    Write a function to check whether a given string is a negative integer.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_even(num):\n    '''\n    Write a function to check whether a given string is an even number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_one_to_ten(num):\n    '''\n    Write a function to check whether a given string is a one-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_two_to_ten(num):\n    '''\n    Write a function to check whether a given string is a two-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_three_to_ten(num):\n    '''\n    Write a function to check whether a given string is a three-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_four_to_ten(num):\n    '''\n    Write a function to check whether a given string is a four-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_five_to_ten(num):\n    '''\n    Write a function to check whether a given string is a five-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_six_to_ten(num):\n    '''\n    Write a function to check whether a given string is a six-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_seven_to_ten(num):\n    '''\n    Write a function to check whether a given string is a seven-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_eight_to_ten(num):\n    '''\n    Write a function to check whether a given string is a eight-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_nine_to_ten(num):\n    '''\n    Write a function to check whether a given string is a nine-to-ten number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_zero(num):\n    '''\n    Write a function to check whether a given string is a zero number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_one_or_more(num):\n    '''\n    Write a function to check whether a given string is a one-or-more number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_zero_or_more(num):\n    '''\n    Write a function to check whether a given string is a zero-or-more number.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_zero(num):\n    '''\n    Write a function to check whether a given string is a decimal number or zero.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_one(num):\n    '''\n    Write a function to check whether a given string is a decimal number or one.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_two(num):\n    '''\n    Write a function to check whether a given string is a decimal number or two.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_three(num):\n    '''\n    Write a function to check whether a given string is a decimal number or three.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_four(num):\n    '''\n    Write a function to check whether a given string is a decimal number or four.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_five(num):\n    '''\n    Write a function to check whether a given string is a decimal number or five.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_six(num):\n    '''\n    Write a function to check whether a given string is a decimal number or six.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_seven(num):\n    '''\n    Write a function to check whether a given string is a decimal number or seven.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_eight(num):\n    '''\n    Write a function to check whether a given string is a decimal number or eight.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_nine(num):\n    '''\n    Write a function to check whether a given string is a decimal number or nine.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_zero(num):\n    '''\n    Write a function to check whether a given string is a decimal number or zero.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_one_or_more(num):\n    '''\n    Write a function to check whether a given string is a decimal number or one or more.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_two_or_more(num):\n    '''\n    Write a function to check whether a given string is a decimal number or two or more.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n    \ndef is_decimal_or_three_or_more(num):\n    '''\n    Write a function to check whether a given string is a decimal number or three or more.\n    '''\n    try:\n        int(num)"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    return (len(num) == 0) or (len(num) > 1) or (num[0] == '-' and num[1] == '0')\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    if arr[-1]==arr[-2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    flag = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            flag = 1\n            break\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Code here\n    if len(arr)==1:\n        return True\n    else:\n        for i in range(1,len(arr)):\n            if arr[i]!=arr[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = 0\n    for i in arr:\n        if unique == 1:\n            break\n        if i!= arr[unique]:\n            unique += 1\n    if unique == 1:\n        return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #d = dict()\n    #d['a'] = 1\n    #return d['a']\n    #dict_value = set(arr)\n    #return not dict_value\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return not any(set(arr) == set(arr[0]))\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i = 0\n    while i < len(arr):\n        if arr[i] == arr[i+1]:\n            break\n        else:\n            i += 1\n    return i == len(arr) - 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Write your code here\n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for elem in arr:\n        if elem!= count:\n            count = elem\n    return count == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 2:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 3:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 4:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 5:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 6:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 7:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 8:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 9:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 10:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 11:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    elif monthnum3 == 12:\n        if len(str(monthnum3)) == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==12:\n        print(\"The month number is 1.\")\n        return True\n    elif monthnum3==2 or monthnum3==3 or monthnum3==4 or monthnum3==5 or monthnum3==6 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==11:\n        print(\"The month number is 2.\")\n        return True\n    elif monthnum3==12:\n        print(\"The month number is 12.\")\n        return True\n    else:\n        print(\"The month number is not in the given range.\")\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if (monthnum3 in range(1,13)):\n        monthnum3 = monthnum3 - 1\n        if(monthnum3 in range(1,13)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(13,16)):\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        else:\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if (monthnum3 in range(13,17)):\n        monthnum3 = monthnum3 - 1\n        if(monthnum3 in range(13,16)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(17,20)):\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        else:\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if (monthnum3 in range(17,21)):\n        monthnum3 = monthnum3 - 1\n        if(monthnum3 in range(17,20)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(21,24)):\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        else:\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if (monthnum3 in range(21,25)):\n        monthnum3 = monthnum3 - 1\n        if(monthnum3 in range(21,24)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(25,30)):\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        else:\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if (monthnum3 in range(25,30)):\n        monthnum3 = monthnum3 - 1\n        if(monthnum3 in range(25,30)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(31,33)):\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(33,36)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(36,39)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(39,41)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(41,43)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(43,46)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(46,49)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(49,52)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(52,55)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(55,60)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(60,64)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(64,70)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(70,75)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(75,80)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        elif(monthnum3 in range(80,90)):\n            check_1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n            check_2 = [31, 29, 31, 30, 31, 3"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 0 < monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 < 1 or monthnum3 > 12):\n        return False\n    elif monthnum3 == 1:\n        if(monthnum3 == 2):\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 2:\n        if(monthnum3 == 3):\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 3:\n        if(monthnum3 == 4):\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 4:\n        if(monthnum3 == 5):\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 5:\n        if(monthnum3 == 6):\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 6:\n        if(monthnum3 == 7):\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 7:\n        if(monthnum3 == 8):\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 8:\n        if(monthnum3 == 9):\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 9:\n        if(monthnum3 == 10):\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 10:\n        if(monthnum3 == 11):\n            return True\n        elif monthnum3 == 12:\n            return True\n    elif monthnum3 == 11:\n        if(monthnum3 == 12):\n            return True\n    elif monthnum3 == 12:\n        if(monthnum3 == 1):\n            return True\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n    \n    \n    \ndef check_monthnumber_consecutive(monthnum3):\n    '''\n    Write a function to check whether the given month number contains consecutive days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 < 1 or monthnum3 > 12):\n        return False\n    elif monthnum3 == 1:\n        if(monthnum3 == 2):\n            if(monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 2:\n            if(monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 3:\n            if(monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 4:\n            if(monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 5:\n            if(monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 6:\n            if(monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 7:\n            if(monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 8:\n            if(monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11):\n                if(monthnum3 == 12):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 9:\n            if(monthnum3 == 10 or monthnum"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3%2==1):\n        return False\n    else:\n        if(monthnum3==12):\n            return True\n        elif(monthnum3==1):\n            return False\n        elif(monthnum3==2):\n            return False\n        elif(monthnum3==3):\n            return False\n        elif(monthnum3==4):\n            return False\n        elif(monthnum3==5):\n            return False\n        elif(monthnum3==6):\n            return False\n        elif(monthnum3==7):\n            return False\n        elif(monthnum3==8):\n            return False\n        elif(monthnum3==9):\n            return False\n        elif(monthnum3==10):\n            return False\n        elif(monthnum3==11):\n            return False\n        elif(monthnum3==12):\n            return False\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n==0:\n        return arr[0]\n    if n==1:\n        return arr[0]\n    minimum=arr[0]\n    min_of_min=arr[0]\n    for i in range(1,n):\n        if minimum>arr[i]:\n            minimum=arr[i]\n            min_of_min=min_of_min\n        elif min_of_min==arr[i]:\n            pass\n        else:\n            minimum+=arr[i]\n            min_of_min=min_of_min+arr[i]\n    return min_of_min\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return arr[0] - arr[1]\n    \n    arr.sort()\n    minimum = arr[0] - arr[1]\n    for i in range(2, n):\n        if arr[i] - arr[i-1] < minimum:\n            minimum = arr[i] - arr[i-1]\n            index = i\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    current_min = arr[0] - arr[1]\n    count = 0\n    for i in range(1, n):\n        current_min = arr[i] - arr[i-1]\n        count += 1\n    return count \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(2,n):\n        min_diff = min(min_diff,abs(arr[i] - arr[i-1]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(n): \n        if arr[i] < min_diff: \n            min_diff = arr[i] \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    lst = [0,0,0,0]\n    i = 0\n    j = 0\n    while i < n:\n        lst[i] = arr[i]\n        i += 1\n    while j < n-1:\n        lst[j] = arr[j]\n        j += 1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # a=arr[0]\n    # b=arr[1]\n    # i=0\n    # j=1\n    # while(i<n and j<n):\n    #     if(arr[i]<arr[j]):\n    #         arr[i],arr[j]=arr[j],arr[i]\n    #         i+=1\n    #         j+=1\n    #     else:\n    #         i+=1\n    #         j+=1\n    #         j+=1\n    # return arr\n    # return arr[0]+arr[1]\n    # max_diff = max_num = arr[0] - arr[1]\n    # for i in range(n):\n    #     for j in range(n):\n    #         max_num = max(max_num, arr[j]-arr[i])\n    # return max_diff\n    # max_diff = min_diff = arr[0] - arr[1]\n    # for i in range(n):\n    #     for j in range(n):\n    #         min_diff = min(min_diff, arr[j]-arr[i])\n    # return min_diff\n    # a=arr[0]\n    # b=arr[1]\n    # i=0\n    # j=1\n    # while(i<n and j<n):\n    #     if(arr[i]<arr[j]):\n    #         arr[i],arr[j]=arr[j],arr[i]\n    #         i+=1\n    #         j+=1\n    #     else:\n    #         i+=1\n    #         j+=1\n    # return arr\n    # return arr[0]+arr[1]\n    # max_diff = max(max_num, arr[0] - arr[1])\n    # for i in range(n):\n    #     for j in range(n):\n    #         max_num = max(max_num, arr[j]-arr[i])\n    # return max_diff\n    # max_diff = min(min_diff, arr[0] - arr[1])\n    # for i in range(n):\n    #     for j in range(n):\n    #         min_diff = min(min_diff, arr[j]-arr[i])\n    # return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i=0\n    j=n-1\n    while(i<j):\n        if arr[i]>arr[j]:\n            i+=1\n        else:\n            j-=1\n    return i\n    \nn=int(input(\"Enter the size of the array:\"))\narr=[]\nprint(\"Enter the elements of array\")\nfor i in range(n):\n    temp=int(input())\n    arr.append(temp)\n    \nprint(\"\\nEnter the elements in ascending order:\")\nfor i in range(n):\n    print(arr[i],end=\" \")\nprint(\"\\nThe minimum difference is:\")\nprint(find_min_diff(arr,n)"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(arr[i] - arr[j], dp[i][j-1])\n    min_diff = dp[0][n-1]\n    ans = arr[0]\n    for i in range(n-1):\n        if dp[i][n-1] < min_diff:\n            min_diff = dp[i][n-1]\n            ans = arr[i]\n    return ans"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[1] - arr[0]\n    if len(arr) == 3:\n        return min(arr[1] - arr[0],arr[2] - arr[1])\n    \n    # DFS: L(n) = 1\n    L = 1\n    \n    for i in range(2, n):\n        # if a[i]!= a[i-1]:\n        #     L += 1\n        L = min(L, (n - i + 1 - min(arr[i+1:], arr[i])) + 1)\n    \n    # DFS: L(n) = 1 + min(L, L + 2)\n    L = 1\n    for i in range(2, n):\n        L = min(L, (n - i + 1 + min(arr[i+1:], arr[i])))\n    \n    # print(L)\n    # print(arr)\n    \n    # L(n) = 1 + min(L, L + 2)\n    \n    return arr[1] - arr[0] + min(L, L + 2)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = []\n    for i in str:\n        l.append(i)\n    return len(l)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # hint: you may find regex useful here:\n    #   http://regex101.com/\n    # create your own regex here:\n    '''pattern = r'\\d+'\n    return len(re.findall(pattern, str))'''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for char in str:\n        if char.isdigit():\n            ctr+=1\n    return ctr\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def digits(x):\n        return sum(map(int, str(x)))\n    return digits(int(str(str_num)[0]))\ndef decode(n):\n    '''\n    Write a python function to decode a number into numbers.\n    '''\n    def str_num(x):\n        return ''.join(str(int(n/10**i)) for i in reversed(range(x)))\n    return int(str_num(n))\ndef euler_phi(n):\n    '''\n    Write a python function to return the Euler's Phi function.\n    '''\n    def phi(x):\n        return -(x*(1-x)) + (1+x**2)*x\n    def int_phi(x):\n        return phi(int(x))\n    def int_euler_phi(x):\n        return int_phi(int(x))\n    def sum_phi(x,y):\n        return sum((phi(x*(y**2)))-(phi(x))*(phi(y)))\n    def sum_euler_phi(x,y):\n        return sum_phi(int_euler_phi(x*(y**2)),int_euler_phi(x))\n    def num_cont_phi(n):\n        return sum_euler_phi(num_cont_phi(n),num_cont_phi(n))\n    def num_cont_euler_phi(n):\n        return sum_euler_phi(num_cont_euler_phi(n),num_cont_euler_phi(n))\n    def sum_euler_phi_g(x,y):\n        return sum_euler_phi(num_cont_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    def sum_euler_phi_h(x,y):\n        return sum_euler_phi(num_cont_euler_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    return sum_euler_phi_g,sum_euler_phi_h\ndef euler_phi_g(n):\n    '''\n    Write a python function to return the Euler's Phi function.\n    '''\n    def phi(x):\n        return -(x*(1-x)) + (1+x**2)*x\n    def int_phi(x):\n        return phi(int(x))\n    def int_euler_phi(x):\n        return int_phi(int(x))\n    def sum_phi(x,y):\n        return sum((phi(x*(y**2)))-(phi(x))*(phi(y)))\n    def sum_euler_phi(x,y):\n        return sum_phi(int_euler_phi(x*(y**2)),int_euler_phi(x))\n    def num_cont_phi(n):\n        return sum_euler_phi(num_cont_phi(n),num_cont_phi(n))\n    def num_cont_euler_phi(n):\n        return sum_euler_phi(num_cont_euler_phi(n),num_cont_euler_phi(n))\n    def sum_euler_phi_g(x,y):\n        return sum_euler_phi(num_cont_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    def sum_euler_phi_h(x,y):\n        return sum_euler_phi(num_cont_euler_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    return sum_euler_phi_g,sum_euler_phi_h\ndef euler_phi_h(n):\n    '''\n    Write a python function to return the Euler's Phi function.\n    '''\n    def phi(x):\n        return -(x*(1-x)) + (1+x**2)*x\n    def int_phi(x):\n        return phi(int(x))\n    def int_euler_phi(x):\n        return int_phi(int(x))\n    def sum_phi(x,y):\n        return sum((phi(x*(y**2)))-(phi(x))*(phi(y)))\n    def sum_euler_phi(x,y):\n        return sum_phi(int_euler_phi(x*(y**2)),int_euler_phi(x))\n    def num_cont_phi(n):\n        return sum_euler_phi(num_cont_phi(n),num_cont_phi(n))\n    def num_cont_euler_phi(n):\n        return sum_euler_phi(num_cont_euler_phi(n),num_cont_euler_phi(n))\n    def sum_euler_phi_g(x,y):\n        return sum_euler_phi(num_cont_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    def sum_euler_phi_h(x,y):\n        return sum_euler_phi(num_cont_euler_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    return sum_euler_phi_g,sum_euler_phi_h\ndef res_num(str_num):\n    '''\n    Write a python function to return the number of digits in a given string.\n    '''\n    def digits(x):\n        return sum(map(int, str(x)))\n    return digits(int(str_num[0]))\ndef decode(n):\n    '''\n    Write a python function to decode a number into numbers.\n    '''\n    def str_num(x):\n        return ''.join(str(int(n/10**i)) for i in reversed(range(x)))\n    return int(str_num(n))\ndef euler_phi_g(n):\n    '''\n    Write a python function to return the Euler's Phi function.\n    '''\n    def phi(x):\n        return -(x*(1-x)) + (1+x**2)*x\n    def int_phi(x):\n        return phi(int(x))\n    def int_euler_phi(x):\n        return int_phi(int(x))\n    def sum_phi(x,y):\n        return sum((phi(x*(y**2)))-(phi(x))*(phi(y)))\n    def sum_euler_phi(x,y):\n        return sum_phi(int_euler_phi(x*(y**2)),int_euler_phi(x))\n    def num_cont_phi(n):\n        return sum_euler_phi(num_cont_phi(n),num_cont_phi(n))\n    def num_cont_euler_phi(n):\n        return sum_euler_phi(num_cont_euler_phi(n),num_cont_euler_phi(n))\n    def sum_euler_phi_g(x,y):\n        return sum_euler_phi(num_cont_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    def sum_euler_phi_h(x,y):\n        return sum_euler_phi(num_cont_euler_phi(x*(y**2))/(num_cont_phi(x)),num_euler_phi(x))\n    return sum_euler_phi_g,sum_euler_phi_h\ndef euler_phi_h(n):\n    '''\n    Write a python function to return the Euler's Phi function.\n    '''\n    def phi(x):\n        return -(x*(1-x)) + (1+x**2)*x\n    def int_phi(x):\n        return phi(int(x))\n    def int_euler_phi(x):\n        return int_phi(int(x))\n    def sum_phi(x,y):\n        return sum((phi(x*(y**2)))-(phi(x))*(phi(y)))\n    def sum_eule"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    if str.isdigit():\n        ctr = len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str.replace(' ',''))\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n % 2 == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # If n is zero, then there is no polite number.\n    if n == 0: \n        return False\n    # If n is one, then there is a polite number.\n    if n == 1: \n        return True\n    # Otherwise, n is not even.\n    if n % 2 == 0: \n        return False\n    # Otherwise, n is odd.\n    else: \n        return not is_polite(n-1) \n    \ndef is_legendary(n): \n    '''\n    Write a function to find nth legendary number. geeksforgeeks.org/n-th-legendary-number/\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    elif n < 10: \n        return True\n    elif n % 2 == 0: \n        return False\n    else: \n        return not is_legendary(n-1) \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = int(math.sqrt(n))\n    if num == n:\n        print('The number {} is a polite number.'.format(n))\n        return 'Not a polite number'\n    else:\n        print('The number {} is not a polite number.'.format(n))\n        return None\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==0: return False\n    if n==1 or n==2: return True\n    for i in range(3,int(math.sqrt(n))+1):\n        if n%i==0: return False\n        if i*i==n: return True\n    return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # case 1\n    # n = 3\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    # case 2\n    if n == 1:\n        return 2\n    # case 3\n    if n % 2 == 0:\n        return 3\n    # case 4\n    if n == 2:\n        return 4\n    # case 5\n    if n == 3:\n        return 5\n    # case 6\n    if n == 4:\n        return 6\n    # case 7\n    if n == 5:\n        return 7\n    # case 8\n    if n == 6:\n        return 8\n    # case 9\n    if n == 7:\n        return 9\n    # case 10\n    if n == 8:\n        return 10\n    # case 11\n    if n == 9:\n        return 11\n    # case 12\n    if n == 10:\n        return 12\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True \n    else: \n        for i in range(1, n + 1): \n            if i % 10 == n % 10: \n                return False \n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0: \n        return False\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return is_polite(n//2)\n    else: \n        return not is_polite(n//2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_polite(n / 2) and not is_polite(n / 2 + 1)\n    else:\n        return is_polite(n / 2) and is_polite(n / 2 + 1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n==0):\n        return 0\n    elif (n==1):\n        return 1\n    elif (n==2):\n        return 3\n    elif (n==3):\n        return 7\n    elif (n==4):\n        return 11\n    elif (n==5):\n        return 13\n    elif (n==6):\n        return 19\n    elif (n==7):\n        return 23\n    elif (n==8):\n        return 29\n    elif (n==9):\n        return 31\n    elif (n==10):\n        return 43\n    elif (n==11):\n        return 51\n    elif (n==12):\n        return 53\n    elif (n==13):\n        return 59\n    elif (n==14):\n        return 61\n    elif (n==15):\n        return 67\n    elif (n==16):\n        return 71\n    elif (n==17):\n        return 73\n    elif (n==18):\n        return 79\n    elif (n==19):\n        return 81\n    elif (n==20):\n        return 83\n    elif (n==21):\n        return 89\n    elif (n==22):\n        return 91\n    elif (n==23):\n        return 93\n    elif (n==24):\n        return 99\n    elif (n==25):\n        return 101\n    elif (n==26):\n        return 103\n    elif (n==27):\n        return 105\n    elif (n==28):\n        return 107\n    elif (n==29):\n        return 111\n    elif (n==30):\n        return 113\n    elif (n==31):\n        return 119\n    elif (n==32):\n        return 123\n    elif (n==33):\n        return 131\n    elif (n==34):\n        return 137\n    elif (n==35):\n        return 141\n    elif (n==36):\n        return 147\n    elif (n==37):\n        return 151\n    elif (n==38):\n        return 155\n    elif (n==39):\n        return 157\n    elif (n==40):\n        return 161\n    elif (n==41):\n        return 165\n    elif (n==42):\n        return 167\n    elif (n==43):\n        return 171\n    elif (n==44):\n        return 173\n    elif (n==45):\n        return 179\n    elif (n==46):\n        return 181\n    elif (n==47):\n        return 185\n    elif (n==48):\n        return 187\n    elif (n==49):\n        return 191\n    elif (n==50):\n        return 193\n    elif (n==51):\n        return 197\n    elif (n==52):\n        return 201\n    elif (n==53):\n        return 203\n    elif (n==54):\n        return 207\n    elif (n==55):\n        return 209\n    elif (n==56):\n        return 211\n    elif (n==57):\n        return 223\n    elif (n==58):\n        return 227\n    elif (n==59):\n        return 229\n    elif (n==60):\n        return 231\n    elif (n==61):\n        return 233\n    elif (n==62):\n        return 239\n    elif (n==63):\n        return 241\n    elif (n==64):\n        return 243\n    elif (n==65):\n        return 247\n    elif (n==66):\n        return 249\n    elif (n==67):\n        return 251\n    elif (n==68):\n        return 253\n    elif (n==69):\n        return 255\n    elif (n==70):\n        return 257\n    elif (n==71):\n        return 261\n    elif (n==72):\n        return 263\n    elif (n==73):\n        return 265\n    elif (n==74):\n        return 267\n    elif (n==75):\n        return 269\n    elif (n==76):\n        return 271\n    elif (n==77):\n        return 273\n    elif (n==78):\n        return 275\n    elif (n==79):\n        return 277\n    elif (n==80):\n        return 281\n    elif (n==81):\n        return 283\n    elif (n==82):\n        return 285\n    elif (n==83):\n        return 287\n    elif (n==84):\n        return 291\n    elif (n==85):\n        return 293\n    elif (n==86):\n        return 295\n    elif (n==87):\n        return 297\n    elif (n==88):\n        return 301\n    elif (n==89):\n        return 303\n    elif (n==90):\n        return 305\n    elif (n==91):\n        return 307\n    elif (n==92):\n        return 311\n    elif (n==93):\n        return 313\n    elif (n==94):\n        return 315\n    elif (n==95):\n        return 317\n    elif (n==96):\n        return 319\n    elif (n==97):\n        return 321\n    elif (n==98):\n        return 323\n    elif (n==99):\n        return 327\n    elif (n==100):\n        return 331\n    elif (n==101):\n        return 333\n    elif (n==102):\n        return 335\n    elif (n==103):\n        return 337\n    elif (n==104):\n        return 341\n    elif (n==105):\n        return 343\n    elif (n==106):\n        return 347\n    elif (n==107):\n        return 349\n    elif (n==108):\n        return 351\n    elif (n==109):\n        return 353\n    elif (n==110):\n        return 357\n    elif (n==111):\n        return 361\n    elif (n==112):\n        return 363\n    elif (n==113):\n        return 365\n    elif (n==114):\n        return 367\n    elif (n==115):\n        return 371\n    elif (n==116):\n        return 373\n    elif (n==117):\n        return 375\n    elif (n==118):\n        return 377\n    elif (n==119):\n        return 381\n    elif (n==120):\n        return 383\n    elif (n==121):\n        return 385\n    elif (n==122):\n        return 387\n    elif (n==123):\n        return 391\n    elif (n==124):\n        return 393\n    elif (n==125):\n        return 395\n    elif (n==126):\n        return 403\n    elif (n==127):\n        return 405\n    elif (n==128):\n        return 407\n    elif (n==129):\n        return 411\n    elif (n==130):\n        return 409\n    elif (n==131):\n        return 413\n    elif (n==132):\n        return 415\n    elif (n==133):\n        return 417\n    elif (n==134):\n        return 421\n    elif (n==135):\n        return 431\n    elif (n==136):\n        return 439\n    elif (n==137):\n        return 441\n    elif (n==138):\n        return 445\n    elif (n==139):\n        return 447\n    elif (n==140):\n        return 451\n    elif (n==141):\n        return 453\n    elif (n==142):\n        return 455\n    elif (n==143):\n        return 457\n    elif (n==144):\n        return 461\n    elif (n==145):\n        return 463\n    elif (n==146):\n        return 465\n    elif (n==147):\n        return 467\n    elif (n==148):\n        return 471\n    elif (n==149):\n        return 473\n    elif (n==150):\n        return 475\n    elif (n==151):\n        return 477\n    elif (n==152):"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return math.factorial(n) * n % n == 1\ndef main():\n    '''\n    Prints the number of distinct prime factors of 4\n    '''\n    print(is_polite(4))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = []\n    for i in range(len(l1)):\n        if l1[i] not in s:\n            s.append(l1[i])\n    return s\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j] == l1[j+1]:\n                l2.append((l1[i], l1[j]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    #iterate through the list\n    for i in range(len(l1)-1):\n        #if the next number is greater than the current number, add the current number to the pairs\n        if l1[i+1] > l1[i]:\n            pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i] == l1[j]:\n                res.append((l1[i], l1[j]))\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            if l1[i] > l1[j]:\n                l2.append([l1[i],l1[j]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair = []\n    for i in range(len(l1) - 1):\n        if l1[i]!= l1[i + 1]:\n            pair.append([l1[i], l1[i + 1]])\n    return pair\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(1,len(l1)):\n        l.append((l1[i],l1[i-1]))\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    return [(i, l1[i + 1]) for i in range(0, n, 2)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            pass\n        else:\n            l2.append([l1[i],l1[i+1]])\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    # code here\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in arr:\n        if i+sum == sum:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr) - 1):\n        if sum - arr[i] > arr[i] and sum - arr[i+1] > arr[i+1]:\n            pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    if sum == 0:\n        return count\n    if sum not in arr:\n        return count\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum = arr[i] + arr[j]\n            if sum == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #initialize empty dictionary to store the number of pairs with sum equal to sum\n    pairs = {}\n    for num in arr:\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n    #determine the number of pairs with a sum equal to sum\n    for key in pairs:\n        if sum-key == key:\n            return pairs[key]\n    return -1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # YOUR CODE HERE\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if sum[j] - sum[i] == sum[i] - sum[j]:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            li3.append(li1[i])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1[len(li1)-1]-li2[len(li2)-1]\n    \ndef Operation1(li1,li2,op):\n    '''\n    Write a python function to calculate the average of the two lists.\n    '''\n    if op == 'add':\n        return li1+li2\n    elif op =='multiply':\n        return li1*li2\n    elif op =='subtract':\n        return li1-li2\n    else:\n        return li1*li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1)-len(li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # return the difference of the two lists\n    return li1[:]-li2[:]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return len(li1)-len(li2)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        diff.append(li1[i]-li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Function call\n    new_li1=[]\n    new_li2=[]\n    for i in li1:\n        new_li1.append(i)\n    for i in li2:\n        new_li2.append(i)\n    # Compare new_li1 and new_li2\n    diff_l=[]\n    for i in new_li1:\n        diff_l.append(i)\n    for j in new_li2:\n        diff_l.append(j)\n    return diff_l\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a new list that has the items of the first list minus the items in the second list\n    liDiff=[]\n    for i in range(len(li1)):\n        liDiff.append(li1[i] - li2[i])\n    return liDiff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = []\n    if li2 == None:\n        return li1\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n :\n        sum += (i**3)\n        i+=1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if i%2 == 0 : \n            sum += i**2\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        return 0\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    if n == 2 :\n        return 1\n    if n == 3 :\n        return 2\n    if n == 4 :\n        return 3\n    if n == 5 :\n        return 4\n    if n == 6 :\n        return 5\n    if n == 7 :\n        return 6\n    if n == 8 :\n        return 7\n    if n == 9 :\n        return 8\n    if n == 10 :\n        return 9\n    if n == 11 :\n        return 10\n    if n == 12 :\n        return 11\n    if n == 13 :\n        return 12\n    if n == 14 :\n        return 13\n    if n == 15 :\n        return 14\n    if n == 16 :\n        return 15\n    if n == 17 :\n        return 16\n    if n == 18 :\n        return 17\n    if n == 19 :\n        return 18\n    if n == 20 :\n        return 19\n    if n == 21 :\n        return 20\n    if n == 22 :\n        return 21\n    if n == 23 :\n        return 22\n    if n == 24 :\n        return 23\n    if n == 25 :\n        return 24\n    if n == 26 :\n        return 25\n    if n == 27 :\n        return 26\n    if n == 28 :\n        return 27\n    if n == 29 :\n        return 28\n    if n == 30 :\n        return 29\n    if n == 31 :\n        return 30\n    if n == 32 :\n        return 31\n    if n == 33 :\n        return 32\n    if n == 34 :\n        return 33\n    if n == 35 :\n        return 34\n    if n == 36 :\n        return 35\n    if n == 37 :\n        return 36\n    if n == 38 :\n        return 37\n    if n == 39 :\n        return 38\n    if n == 40 :\n        return 39\n    if n == 41 :\n        return 40\n    if n == 42 :\n        return 41\n    if n == 43 :\n        return 42\n    if n == 44 :\n        return 43\n    if n == 45 :\n        return 44\n    if n == 46 :\n        return 45\n    if n == 47 :\n        return 46\n    if n == 48 :\n        return 47\n    if n == 49 :\n        return 48\n    if n == 50 :\n        return 49\n    if n == 51 :\n        return 50\n    if n == 52 :\n        return 51\n    if n == 53 :\n        return 52\n    if n == 54 :\n        return 53\n    if n == 55 :\n        return 54\n    if n == 56 :\n        return 55\n    if n == 57 :\n        return 56\n    if n == 58 :\n        return 57\n    if n == 59 :\n        return 58\n    if n == 60 :\n        return 59\n    if n == 61 :\n        return 60\n    if n == 62 :\n        return 61\n    if n == 63 :\n        return 62\n    if n == 64 :\n        return 63\n    if n == 65 :\n        return 64\n    if n == 66 :\n        return 65\n    if n == 67 :\n        return 66\n    if n == 68 :\n        return 67\n    if n == 69 :\n        return 68\n    if n == 70 :\n        return 69\n    if n == 71 :\n        return 70\n    if n == 72 :\n        return 71\n    if n == 73 :\n        return 72\n    if n == 74 :\n        return 73\n    if n == 75 :\n        return 74\n    if n == 76 :\n        return 75\n    if n == 77 :\n        return 76\n    if n == 78 :\n        return 77\n    if n == 79 :\n        return 78\n    if n == 80 :\n        return 79\n    if n == 81 :\n        return 80\n    if n == 82 :\n        return 81\n    if n == 83 :\n        return 82\n    if n == 84 :\n        return 83\n    if n == 85 :\n        return 84\n    if n == 86 :\n        return 85\n    if n == 87 :\n        return 86\n    if n == 88 :\n        return 87\n    if n == 89 :\n        return 88\n    if n == 90 :\n        return 89\n    if n == 91 :\n        return 90\n    if n == 92 :\n        return 91\n    if n == 93 :\n        return 92\n    if n == 94 :\n        return 93\n    if n == 95 :\n        return 94\n    if n == 96 :\n        return 95\n    if n == 97 :\n        return 96\n    if n == 98 :\n        return 97\n    if n == 99 :\n        return 98\n    if n == 100 :\n        return 99\n    if n == 101 :\n        return 100\n    if n == 102 :\n        return 101\n    if n == 103 :\n        return 102\n    if n == 104 :\n        return 103\n    if n == 105 :\n        return 104\n    if n == 106 :\n        return 105\n    if n == 107 :\n        return 106\n    if n == 108 :\n        return 107\n    if n == 109 :\n        return 108\n    if n == 110 :\n        return 109\n    if n == 111 :\n        return 110\n    if n == 112 :\n        return 111\n    if n == 113 :\n        return 112\n    if n == 114 :\n        return 113\n    if n == 115 :\n        return 114\n    if n == 116 :\n        return 115\n    if n == 117 :\n        return 116\n    if n == 118 :\n        return 117\n    if n == 119 :\n        return 118\n    if n == 120 :\n        return 119\n    if n == 121 :\n        return 120\n    if n == 122 :\n        return 121\n    if n == 123 :\n        return 122\n    if n == 124 :\n        return 123\n    if n == 125 :\n        return 124\n    if n == 126 :\n        return 125\n    if n == 127 :\n        return 126\n    if n == 128 :\n        return 127\n    if n == 129 :\n        return 128\n    if n == 130 :\n        return 129\n    if n == 131 :\n        return 130\n    if n == 132 :\n        return 131\n    if n == 133 :\n        return 132\n    if n == 134 :\n        return 133\n    if n == 135 :\n        return 134\n    if n == 136 :\n        return 135\n    if n == 137 :\n        return 136\n    if n == 138 :\n        return 137\n    if n == 139 :\n        return 138\n    if n == 140 :\n        return 139\n    if n == 141 :\n        return 140\n    if n == 142 :\n        return 141\n    if n == 143 :\n        return 142\n    if n == 144 :\n        return 143\n    if n == 145 :\n        return 144\n    if n == 146 :\n        return 145\n    if n == 147 :\n        return 146\n    if n == 148 :\n        return 147\n    if n == 149 :\n        return 148\n    if n == 150 :\n        return 149\n    if n == 151 :\n        return 150\n    if n == 152 :\n        return 151\n    if n == 153 :\n        return 152\n    if n == 154 :\n        return 153\n    if n == 155 :\n        return 154\n    if n == 156 :\n        return 155\n    if n == 157 :\n        return 156\n    if n == 158 :\n        return 157\n    if n == 159 :\n        return 158\n    if n == 160 :\n        return 159\n    if n == 161 :\n        return 160\n    if n == 162 :\n        return 161\n    if n == 163 :\n        return 162\n    if n == 164 :\n        return 163\n    if n == 165 :\n        return 164\n    if n == 166 :\n        return 165\n    if n == 167 :\n        return 166\n    if n == 168 :\n        return 167\n    if n == 169 :\n        return 168\n    if n == 170 :\n        return 169\n    if n == 171 :\n        return 170\n    if n == 172 :\n        return 171\n    if n == 173 :\n        return 172\n    if n == 174 :\n        return 173\n    if n == 175 :\n        return 174\n    if n == 176 :\n        return 175\n    if n == 177 :\n        return 176\n    if n == 178 :\n        return 177\n    if n == 179 :\n        return 178\n    if n == 180 :\n        return 179\n    if n == 18"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for n in range(1,n+1) :\n        if n % 2!= 0 : \n            sum += n**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    else :\n        return (n*n*n)+(n*n+3)//2\n        \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    even_sum = 0\n    for odd in range(1,n+1,2):\n        even_sum = even_sum + (odd**3)\n    return even_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return odd_num_sum(n-1) + 4 * odd_num_sum(n-2) + 4 * odd_num_sum(n-3) + 4 * odd_num_sum(n-4)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum of first n natural numbers \n    sum = 0\n    # get first n natural numbers from 1 to n\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #Write your code here.\n    sum = 0\n    for i in range(1,n+1) :\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    d = {'(': 1, ')': 1}\n    for i in exp:\n        if i not in '()[]{}':\n            stack.append(i)\n        else:\n            if i in d:\n                d[i] = d[i]*2 + 1\n            else:\n                d[i] = 1\n    for i in d:\n        if d[i] == 0:\n            return False\n    return stack\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    open_brackets = ['(', '[', '{', ']']\n    closed_brackets = ['}', ']']\n    for character in exp:\n        if character in open_brackets:\n            stack.append(character)\n        elif character in closed_brackets:\n            if not stack or stack[-1]!= closed_brackets[0]:\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in \"+-*/\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                if i == \"(\" or i == \")\":\n                    if stack.pop()!= \"(\":\n                        return False\n                if i == \",\" or i == \")\":\n                    if stack.pop()!= \")\":\n                        return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left, right = 0, 0\n    for c in exp:\n        if c == '(':\n            left += 1\n        else:\n            right += 1\n        if left == right:\n            return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    s = list(exp)\n    op = []\n    for i in s:\n        if i in '({[':\n            op.append(i)\n        elif i in ')]}':\n            if op:\n                op.pop()\n            else:\n                return False\n    return not op\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    expr = '({}).('\n    \n    def is_paren(s):\n        # Check if string is balanced\n        for i in range(len(s)):\n            if s[i] == '(':\n                count = 0\n                for j in range(i, len(s)):\n                    if s[j] == '(':\n                        count += 1\n                    else:\n                        count -= 1\n                    if count < 0:\n                        return False\n                return True\n        return False\n    \n    def count_level_of_parens(s):\n        count = 0\n        i = 0\n        while i < len(s):\n            if s[i] == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return 0\n            i += 1\n        return count\n        \n    def find_sum(exp):\n        '''\n        Write a function to find the sum of all parentheses given as argument.\n        https://www.geeksforgeeks.org/find-the-sum-of-all-parentheses-given-an-expression/\n        '''\n        exp = exp[::-1]\n        # Exp = '((()'\n        # dp = {')':'(', '(':')', '(':'('}\n        # dp[')'] = ')'\n        # dp[']'] = ']'\n        # dp[']'] = ']', ')']\n        dp = {')':'(', '(':')', '(':'(', ')':'(', ']':'(', ']':'(', ')':'(', ')':'(', ')':'('}\n        exp = exp[::-1]\n        stack = []\n        for i in range(len(exp)):\n            if exp[i] in dp:\n                stack.append(exp[i])\n        if len(stack) == 0:\n            return 0\n        elif len(stack) == 1:\n            return int(stack[0])\n        else:\n            # Either get the last open paren\n            count = 0\n            for i in range(len(stack)):\n                if stack[i] == '(':\n                    count += 1\n                else:\n                    count -= 1\n                if count < 0:\n                    return 0\n            # Get all the parens\n            # exp = '((()'\n            # count = 0\n            # for i in range(len(stack)):\n            #     if stack[i] == '(':\n            #         count += 1\n            #     else:\n            #         count -= 1\n            #         if count < 0:\n            #             return 0\n            # return count\n            return int(stack[-1])\n    \n    def find_parent(exp):\n        '''\n        Write a function to find the parenthesis given as argument.\n        https://www.geeksforgeeks.org/find-the-parentheses-given-an-expression/\n        '''\n        # exp = '((()'\n        # dp = {')':'(', '(':')', '(':'(', ')':'(', ']':'(', ']':'(', ')':'(', ')':'(', ')':'(', ')':'('}\n        dp = {')':'(', '(':')', '(':'(', ')':'(', ']':'(', ']':'(', ')':'(', ')':'(', ')':'('}\n        stack = []\n        for i in range(len(exp)):\n            if exp[i] in dp:\n                stack.append(exp[i])\n        if len(stack) == 0:\n            return None\n        elif len(stack) == 1:\n            return stack[0]\n        else:\n            # Either get the last open paren\n            count = 0\n            for i in range(len(stack)):\n                if stack[i] == '(':\n                    count += 1\n                else:\n                    count -= 1\n                if count < 0:\n                    return None\n            # Get all the parens\n            # exp = '((()'\n            # count = 0\n            # for i in range(len(stack)):\n            #     if stack[i] == '(':\n            #         count += 1\n            #     else:\n            #         count -= 1\n            #         if count < 0:\n            #             return None\n            # return count\n            return stack[-1]\n        \n    def get_index(exp):\n        '''\n        Write a function to find the index of the parenthesis given as argument.\n        https://www.geeksforgeeks.org/find-the-index-of-the-parentheses-given-an-expression/\n        '''\n        index = 0\n        # Exp = '((()'\n        # dp = {')':'(', '(':')', '(':'(', ')':'(', ']':'(', ']':'(', ')':'(', ')':'(', ')':'('}\n        dp = {')':'(', '(':')', '(':'(', ')':'(', ']':'(', ']':'(', ')':'(', ')':'('}\n        stack = []\n        for i in range(len(exp)):\n            if exp[i] in dp:\n                stack.append(exp[i])\n        if len(stack) == 0:\n            return None\n        elif len(stack) == 1:\n            return stack[0]\n        else:\n            # Either get the last open paren\n            count = 0\n            for i in range(len(stack)):\n                if stack[i] == '(':\n                    count += 1\n                else:\n                    count -= 1\n                if count < 0:\n                    return None\n            # Get all the parens\n            # exp = '((()'\n            # count = 0\n            # for i in range(len(stack)):\n            #     if stack[i] == '(':\n            #         count += 1\n            #     else:\n            #         count -= 1\n            #         if count < 0:\n            #             return None\n            # return count\n            return int(stack[-1])\n            \n    def get_exp(exp):\n        '''\n        Write a function to find the expression given as argument.\n        https://www.geeksforgeeks.org/find-the-expression-given-an-expression/\n        '''\n        # Exp = '(()'\n        # dp = {')':'(', '(':')', '(':'(', ')':'(', ']':'(', ']':'(', ')':'(', ')':'('}\n        dp = {')':'(', '(':')', '(':'(', ')':'(', ']':'(', ']':'(', ')':'('}\n        stack = []\n        for i in range(len(exp)):\n            if exp[i] in dp:\n                stack.append(exp[i])\n        if len(stack) == 0:\n            return None\n        elif len(stack) == 1:\n            return stack[0]\n        else:\n            # Either get the last open paren\n            count = 0\n            for i in range(len(stack)):\n                if stack[i] == '(':\n                    count += 1\n                else:\n                    count -= 1\n                if count < 0:\n                    return None\n            # Get all the parens\n            # exp = '((()'\n            # count = 0\n            # for i in range(len(stack)):\n            #     if stack[i] == '(':\n            #         count += 1\n            #     else:\n            #         count -= 1\n            #         if count < 0:\n            #             return None\n            # return count\n            return stack[-1]\n        \n    def sum_in_parentheses(exp):\n        '''\n        Write a function to calculate the sum of all the parenthesis given as argument.\n        https://www.geeksforgeeks.org/sum-of-all-parentheses-given-an-expression/\n        '''\n        count = 0\n        index = 0\n        stack = []\n        "
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def get_stack(exp):\n        '''\n        Return a stack for the given expression.\n        '''\n        if len(exp) == 0:\n            return []\n        elif len(exp) == 1:\n            return [exp[0]]\n        else:\n            return [exp[0], get_stack(exp[1:])]\n    \n    stack = get_stack(exp)\n    \n    # Check if there are more than 1 operators.\n    if len(stack)!= len(exp):\n        return False\n    \n    # Check if all operators have a total number of 1.\n    # (0) + 1 or 0 + () = 0\n    for i in range(len(exp)):\n        if exp[i] == \"(\":\n            if len(stack) == 0 or stack[-1]!= \"(\":\n                return False\n            stack.pop()\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \")\":\n                stack.pop()\n    \n    # Check if all parentheses have a total number of 0.\n    # (0) + () = 0\n    for i in range(len(exp)):\n        if exp[i] == \")\":\n            if len(stack) == 0 or stack[-1]!= \"(\":\n                return False\n            stack.pop()\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \")\":\n                stack.pop()\n    \n    # Check if all parentheses have a total number of 1.\n    # (0) + () = 1\n    for i in range(len(exp)):\n        if exp[i] == \"(\":\n            if len(stack) == 0 or stack[-1]!= \"(\":\n                return False\n            stack.pop()\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \")\":\n                stack.pop()\n    \n    # Return the stack.\n    return True\n    \ndef solve(exp):\n    stack = deque()\n    stack.append(exp)\n    \n    # If the stack is empty, we reach a terminal state.\n    # Else, we take the first element of the stack and check if\n    # its operators have a total number of 0. If yes, we pop it.\n    if len(stack) == 0:\n        return True\n    \n    # We check the next element of the stack.\n    while True:\n        current_element = stack.pop()\n        \n        # For every operator, if the stack has more than one,\n        # we pop it.\n        if len(stack) > 1:\n            stack.pop()\n            if not check_expression(current_element):\n                return False\n        \n        # If the stack has only one element, we check if\n        # all parentheses have a total number of 1.\n        # If yes, we pop it.\n        elif len(stack) == 1:\n            if current_element == \"(\":\n                return False\n            stack.pop()\n            if not check_expression(current_element):\n                return False\n    \n    # We return True.\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    check_left = 0\n    check_right = 0\n    left_open_paren = False\n    right_open_paren = False\n    \n    for i in exp:\n        if i == '(':\n            left_open_paren = True\n        elif i == ')':\n            left_open_paren = False\n            \n        if i == '{':\n            right_open_paren = True\n        elif i == '}':\n            right_open_paren = False\n        \n        if i == ']':\n            if left_open_paren == True and right_open_paren == False:\n                return False\n            elif left_open_paren == False and right_open_paren == False:\n                return False\n    \n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left = 0\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            left += 1\n        else:\n            left -= 1\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    all_words = test_str.split()\n    word_length = 0\n    for word in all_words:\n        word_length += len(word)\n    if word_length < K:\n        return''.join(all_words[:len(all_words) - word_length])\n    else:\n        return''.join(all_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    list_of_words = []\n    for word in test_str.split():\n        if len(word)==K:\n            list_of_words.append(word)\n    return''.join(list_of_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # To do\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_string = ''\n    for letter in test_str:\n        if len(letter) == K:\n            new_string += letter\n    return new_string\n    "
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    test_str_len = len(test_str)\n    \n    for i in range(test_str_len - K + 1):\n        removed_str = test_str[i:i + K]\n        if not removed_str in test_str:\n            return removed_str\n    \n    return ''\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    K = K.lower()\n    if len(test_str) < K:\n        return ''\n    else:\n        dic = {}\n        for word in test_str:\n            if word in dic:\n                dic[word] = dic[word] + 1\n            else:\n                dic[word] = 1\n        \n        # print(dic)\n        for i in dic:\n            if dic[i] >= K:\n                test_str = test_str.replace(i, '')\n        return test_str"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    check = [False] * (len(test_str) + 1)\n    for i in range(len(test_str)):\n        for j in range(i, len(test_str)):\n            if test_str[i:j+1]!= test_str[i:j+1][::-1]:\n                check[j] = True\n    for i in range(len(check)):\n        if check[i]:\n            test_str = test_str.replace(test_str[i], '')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lens = dict()\n    \n    for word in test_str.split():\n        if len(word) == K:\n            lens[word] = 1\n        else:\n            lens[word] = 0\n    \n    return \" \".join(list(lens.keys()))\n    "
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #pattern_split = re.split('\\s',pattern)\n    pattern_split = pattern.split(\" \")\n    new_pattern_split = [i for i in pattern_split if i!= \"\"]\n    for i in new_pattern_split:\n        new_pattern = re.sub(i,\"\",text)\n        if new_pattern == text:\n            return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    j = 0\n    str_len = len(text)\n    while j < str_len:\n        if pattern[0] == text[j] and pattern[1] == text[j+1]:\n            i = j + 1\n            j += 2\n            if j == str_len:\n                return i,j\n        else:\n            j += 1\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match == None:\n        return None\n    else:\n        return match.start(),match.end()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res=[]\n    res_dict=dict()\n    for i in range(len(text)):\n        if (pattern==''):\n            return res\n        if (pattern[0] in text[i:len(pattern)]):\n            res.append(pattern[0])\n            if (pattern[1] not in text[i:]):\n                return res\n        if pattern[0] in text[i:len(pattern)]:\n            res_dict[pattern[0]]=i\n    return res\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m == None:\n        return None\n    else:\n        return m.start()+1, m.end()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace('*','').replace('[','').replace(']','')\n    result = []\n    for i in range(len(text)-len(pattern)+1):\n        result.append([i,i+len(pattern)-1])\n    if(len(text)>len(pattern)):\n        return result\n    for i in range(len(text)-len(pattern)+1):\n        if(pattern[i:i+len(pattern)] in text):\n            result.append([i,i+len(pattern)-1])\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text_list=text.split(\" \")\n    index=0\n    for i in range(len(text_list)):\n        if pattern.findall(text_list[i]):\n            index=i\n    if index!=0:\n        return index,index+len(pattern.split(\" \")[1])\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    #Print the pattern\n    print('The pattern is:', pattern)\n    \n    #Create an empty list\n    list = []\n    #Iterate through the characters of the pattern\n    for i in range(len(pattern)):\n        #Iterate through the text\n        for j in range(len(text)):\n            #If the characters at the ith position of the pattern and text are equal, add it to the list\n            if pattern[i] == text[j]:\n                list.append(j)\n    return list\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern,text)\n    print(m)\n    if len(m)==0:\n        return None\n    else:\n        return m\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    if not isinstance(pattern,str):\n        raise TypeError('pattern must be a string')\n    match=re.search(pattern,text)\n    if match:\n        return match.start(),match.end()\n    else:\n        return None\ndef count_chars(text):\n    '''\n    Write a function to count the number of times a substring occurs in a string.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    count=0\n    for c in text:\n        count+=text.count(c)\n    return count\ndef print_map(m,n):\n    '''\n    Write a function that prints a map for the given m and n.\n    '''\n    if not isinstance(m,int):\n        raise TypeError('m must be an integer')\n    if not isinstance(n,int):\n        raise TypeError('n must be an integer')\n    if m<0:\n        raise ValueError('m must be non-negative')\n    if n<0:\n        raise ValueError('n must be non-negative')\n    map_string=''\n    for i in range(n):\n        if m<0:\n            map_string+=(' ')\n            m-=1\n        elif i>0:\n            map_string+=' '\n        map_string+=str(m)\n    for i in range(m):\n        if n<0:\n            map_string+=' '\n            n-=1\n        elif i>0:\n            map_string+=' '\n        map_string+=str(n)\n    print(map_string)\ndef remove_noise(text):\n    '''\n    Write a function that removes any noise from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    noise_removed=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]+','',text)\n    return noise_removed\ndef filter_repeated_chars(text):\n    '''\n    Write a function that keeps the repeated characters from the string.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_repeated_chars=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]+','',text)\n    return text_with_repeated_chars\ndef filter_empty_chars(text):\n    '''\n    Write a function that keeps the empty characters from the string.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_empty_chars=re.sub('[\\x00-\\x7F]+','',text)\n    return text_with_empty_chars\ndef find_repeated_chars(text):\n    '''\n    Write a function that returns a string with repeated characters removed from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_repeated_chars=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]+','',text)\n    return text_with_repeated_chars\ndef filter_nums(text):\n    '''\n    Write a function that filters out numbers from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_numbers=re.sub('[0-9]+','',text)\n    return text_with_numbers\ndef filter_words(text):\n    '''\n    Write a function that filters out words from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_words=re.sub('[^\\w\\s]',' ',text)\n    return text_with_words\ndef filter_symbols(text):\n    '''\n    Write a function that filters out symbols from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_symbols=re.sub('[^\\w\\s]','',text)\n    return text_with_symbols\ndef filter_punct(text):\n    '''\n    Write a function that filters out punctuation from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_punct=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]','',text)\n    return text_with_punct\ndef filter_phone_numbers(text):\n    '''\n    Write a function that filters out phone numbers from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_phone_numbers=re.sub('[0-9]{3,7}[-]?[0-9]{3}[-]?[0-9]{4}','',text)\n    return text_with_phone_numbers\ndef filter_date(text):\n    '''\n    Write a function that filters out dates from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_date=re.sub('[0-9]{3}-?[0-9]{2}-?[0-9]{4}','',text)\n    return text_with_date\ndef filter_hashtags(text):\n    '''\n    Write a function that filters out hashtags from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_hashtags=re.sub('[#!$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]','',text)\n    return text_with_hashtags\ndef filter_emojis(text):\n    '''\n    Write a function that filters out emojis from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_emojis=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]','',text)\n    return text_with_emojis\ndef filter_punct_emojis(text):\n    '''\n    Write a function that filters out punctuation from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_punct_emojis=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]','',text)\n    return text_with_punct_emojis\ndef filter_emoji(text):\n    '''\n    Write a function that filters out emojis from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_emoji=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]','',text)\n    return text_with_emoji\ndef filter_symbols_emojis(text):\n    '''\n    Write a function that filters out symbols from the text.\n    '''\n    if not isinstance(text,str):\n        raise TypeError('text must be a string')\n    text_with_symbols_emojis=re.sub('[!#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~]','',text)\n    return text_with_symbol"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_numbers = list(filter(lambda n: n%2!=0, nums))\n    return len(odd_numbers) == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2!= 0:\n            count += 1\n    if count % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # nums = [2, 7, 9, 7, 2, 3, 8, 0, 3, 6]\n    nums = [2, 7, 9, 7, 2, 3, 8, 0, 3, 6]\n    odd_position = []\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            odd_position.append(i)\n    return odd_position\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = []\n    for index in range(len(nums)):\n        if nums[index]%2 == 0:\n            odd_list.append(nums[index])\n    return odd_list\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_nums.append(nums[i])\n    return odd_nums\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n        else:\n            pass\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index=[]\n    for i in range(len(nums)):\n        if(nums[i]%2==0):\n            odd_index.append(i)\n    return len(odd_index)==0\n    "
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = 0\n    for num in range(len(nums)):\n        if num % 2 == 1:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] += 1\n            if nums[i] % 2 == 0:\n                odd_index += 1\n    if odd_index == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Your code here\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # count = 0\n    # for i in range(len(test_str) - 1):\n    #     if test_str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n    #         if test_str[i+1].lower() in ['a', 'e', 'i', 'o', 'u']:\n    #             if test_str[i].lower() not in 'aeiou':\n    #                 count += 1\n    # return count\n    pass\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_count = 0\n    \n    for char in test_str:\n        if char in vowels_list:\n            vowel_count += 1\n    \n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Your code here\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for letter in test_str:\n        if letter in vowels:\n            count += test_str.count(letter)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Initialize an empty array\n    vowels = []\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 0\n    for i in test_str:\n        if i in \"aeiouAEIOU\":\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # if the given string contains only one character, it should not be a vowel\n    if len(test_str) == 1:\n        return 0\n    # if the given string has more than one vowel, it should only contain a single letter\n    elif len(test_str) > 1:\n        return len(set(test_str))\n    # if the given string has more than one vowel, it should not have any of it's neighbors\n    else:\n        return count_vowels(test_str[:-1]) + count_vowels(test_str[-1])\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_in_str = 0\n    vowels_in_str_dict = {}\n    vowels_in_dict = {}\n    vowels_in_dict_new = {}\n    for char in test_str:\n        if char in vowels_in_dict:\n            vowels_in_dict[char] += 1\n        else:\n            vowels_in_dict[char] = 1\n    for char in vowels_in_dict:\n        if char not in vowels_in_dict_new:\n            vowels_in_dict_new[char] = 0\n        vowels_in_dict_new[char] += vowels_in_dict[char]\n    for char in vowels_in_dict_new:\n        vowels_in_dict_new[char] /= vowels_in_dict[char]\n    return vowels_in_dict_new\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for vowel in test_str:\n        if vowel in 'aeiou':\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    for i in test_str:\n        if i in 'aeiou':\n            count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    res = []\n    for x in arr: \n        if x not in res: \n            res.append(x) \n    return sum(res) \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if x not in arr and arr.count(x)>1])\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum += arr[i]\n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    summ = 0\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            summ = summ + arr[i]\n    return summ\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr=set(arr)\n    for i in arr:\n        if arr.count(i)>1:\n            return -1\n    return sum(arr)\n    \narr=[2,1,5,4,3,2]\nprint(find_sum(arr))"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i] and arr[i]!= arr[i-1]:\n            sum += arr[i]\n    print(sum)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    num_list = list(set(arr))\n    if len(num_list) == len(arr):\n        return sum(set(arr))\n    else:\n        return -1\n    \n    #pass\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #declaring empty list\n    num = []\n    #function call for list\n    for i in range(len(arr)):\n        num.append(arr[i])\n    #print(num)\n    #using another loop for sum\n    sum = 0\n    #using for loop \n    for i in range(len(num)):\n        #if num[i] is repeated then sum = sum + num[i]\n        if num[i] in num:\n            sum += num[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = 0\n    for i in range(len(arr)): \n        if arr[i]!= 0: \n            result += arr[i] \n            # print(result)\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # if not arr:\n    #     return 0\n    # else:\n    #     # Initialize an empty list of sums\n    #     res = []\n    #     # Compute sum of non-repeated elements and append it to list\n    #     # in reverse order\n    #     for i in arr:\n    #         if i not in res:\n    #             res.append(i)\n    #         else:\n    #             res.append(res[len(res) - 1])\n    #     return sum(res)\n    return sum(set(arr))"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_len = len(list1)\n    list_uniq = []\n    for i in range(list1_len):\n        if i!= list1_len-1 and list1[i+1] == list1[i]:\n            pass\n        else:\n            list_uniq.append(list1[i])\n    list_uniq.sort()\n    return list_uniq\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    solutions = []\n    list2 = list(list1)\n    i = 0\n    while i < len(list2):\n        j = 0\n        while j < len(list2) and list2[j]!= list2[i]:\n            j += 1\n        if j == len(list2):\n            solutions.append(list2[i:])\n        else:\n            solutions.append([list2[i:j]])\n        i = j + 1\n    return solutions\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    p1 = []\n    p2 = []\n    for i in range(0, len(list1)-1):\n        if list1[i] == list1[i+1]:\n            p2.append(list1[i])\n        else:\n            if p1:\n                p1.append(list1[i])\n            else:\n                p1 = list1[i]\n    return p1, p2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list1) - i - 1:\n            if list1[j] == list1[j + 1]:\n                list1[j + 1], list1[j] = list1[j], list1[j + 1]\n                j += 2\n            else:\n                j += 1\n        i += 1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    if len(list1) < 2:\n        return list1\n    else:\n        return [list1[i:] for i in range(0, len(list1), 2)]\n        \n        \ndef get_duplicates(list1):\n    '''\n    Write a function to return the duplicates in a given list.\n    '''\n    if len(list1) < 2:\n        return list1\n    else:\n        return [x for x, y in groupby(list1)]\n    \ndef sort_by_duplicates(list1):\n    '''\n    Write a function to sort a given list of elements according to the number of duplicates.\n    '''\n    \n    if len(list1) < 1:\n        return list1\n    else:\n        return sorted(list1, key=len)\n    \ndef sort_by_duplicates_recursive(list1, sublist=[]):\n    '''\n    Write a function to sort a given list of elements according to the number of duplicates.\n    '''\n    \n    if len(list1) < 1:\n        return list1\n    else:\n        if list1[0] in sublist:\n            return [list1[0]] + sort_by_duplicates_recursive(list1[1:], sublist)\n        else:\n            return [list1[0]] + sort_by_duplicates_recursive(list1[1:], sublist + [list1[0]])\n    \ndef get_duplicates_recursive(list1):\n    '''\n    Write a function to return the duplicates in a given list.\n    '''\n    \n    if len(list1) < 1:\n        return list1\n    else:\n        if list1[0] in list1:\n            return [list1[0]] + get_duplicates_recursive(list1[1:])\n        else:\n            return [list1[0]] + get_duplicates_recursive(list1[1:]) + [list1[0]]\n    \ndef get_duplicates_recursive(list1):\n    '''\n    Write a function to return the duplicates in a given list.\n    '''\n    \n    if len(list1) < 1:\n        return list1\n    else:\n        if list1[0] in list1:\n            return get_duplicates_recursive(list1[1:])\n        else:\n            return get_duplicates_recursive(list1[1:]) + [list1[0]]\n    \ndef merge_list(list1, list2):\n    '''\n    Write a function to merge two lists.\n    '''\n    \n    if len(list1) < len(list2):\n        list1 = list1 + list2\n    else:\n        list2 = list2 + list1\n    \n    return list1 + list2\n    \ndef merge_lists(list1, list2):\n    '''\n    Write a function to merge two lists.\n    '''\n    \n    if len(list1) < 1:\n        list2 = list2 + list1\n    else:\n        list1 = list1 + list2\n    \n    return list1 + list2\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    \n    if len(list1) < 1:\n        return list1\n    else:\n        return list1[::-1]\n    \ndef test_recursive():\n    '''\n    Write a function to return the sum of all numbers in the given list.\n    '''\n    \n    assert sum(range(10)) == 55\n    assert sum(range(1, 10)) == 1\n    assert sum([x for x in range(10)]) == 55\n    assert sum([x ** 2 for x in range(10)]) == 55\n    assert sum([x for x in range(10) if x ** 2 < 7]) == 7\n    assert sum([x for x in range(10) if x % 2 == 0]) == 2\n    assert sum([x for x in range(10) if x % 2 == 1]) == 0\n    assert sum([x ** 2 for x in range(10) if x ** 2 < 7]) == 7\n    assert sum([x ** 2 for x in range(10) if x ** 2 > 7]) == -3\n    assert sum([x ** 2 for x in range(10) if x % 2 == 1]) == 1\n    assert sum([x ** 2 for x in range(10) if x % 2 == 0]) == 4\n    assert sum([x ** 2 for x in range(10) if x < 5]) == 0\n    \ndef test_merge_lists():\n    '''\n    Write a function to merge two lists.\n    '''\n    \n    assert merge_lists([1, 2, 3, 4, 5], [6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert merge_lists([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert merge_lists([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert merge_lists([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \ndef test_sort_by_duplicates():\n    '''\n    Write a function to return the number of consecutive duplicates of a given list elements.\n    '''\n    \n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) == 6\n    assert len(sort_by_duplicates([1, 3, 5, 6, 7, 8, 9, 10, 11, 12])) == 3\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) == 5\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) == 10\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) == 3\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) == 10\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) == 13\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])) == 7\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) == 12\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])) == 14\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])) == 14\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])) == 20\n    assert len(sort_by_duplicates([1, 2, 3, 4, 5, 6, 7, "
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    numbers = list(range(1, len(list1) + 1))\n    duplicates = []\n    indices = []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    #Note, if the list is already a set, return it instead of a list\n    if type(list1) is list:\n        return list1\n    \n    #Check if the input is empty\n    if len(list1) == 0:\n        return []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    i=0\n    while i<len(list1):\n        if len(list1[i])==1:\n            list2.append(list1[i])\n            i+=1\n        else:\n            #if the previous element is a duplicate, we want to add it to the next\n            if list1[i]==list1[i-1]:\n                list2.append(list1[i])\n                i+=1\n            else:\n                #append the previous element to the next\n                list2.append(list1[i])\n                i+=1\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    return [list(x) for x in groupby(sorted(list1), key= lambda x: x[0])]\n    \n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    lst1 = [x for x in list1 if x!= x]\n    lst1.sort(key = lambda x : x[0])\n    count = 1\n    for i in lst1:\n        if count == 1:\n            # print(lst1, len(lst1))\n            temp = []\n            for j in range(len(lst1)):\n                if lst1[j][0] == lst1[j][1] and lst1[j][1] == i[1]:\n                    temp.append(lst1[j][0])\n            lst1 = temp\n        else:\n            count += 1\n    return lst1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n    l = []\n    for i in list1:\n        t = tuple(i)\n        l.append(t)\n    result = dict()\n    for i in l:\n        result[i] = l.count(i)\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = dict()\n    for x in list1:\n        if type(x)!= tuple:\n            d[x] = 1\n        else:\n            list_tuple = x\n            d[tuple(list_tuple)] = 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] not in d:\n            d[list1[i]] = 1\n        else:\n            d[list1[i]] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    \n    for sub in list1:\n        if sub in result:\n            result[sub] += 1\n        else:\n            result[sub] = 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for x in list1:\n        if x not in count:\n            count[x] = 0\n        else:\n            count[x] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count={}\n    for i in range(0,len(list1)):\n        tmp=list1[i]\n        if type(tmp)==tuple:\n            tmp=tmp[1]\n        if tmp in count:\n            count[tmp]+=[list1[i]]\n        else:\n            count[tmp]=[list1[i]]\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for element in list1:\n        if element in unique_list:\n            unique_list[element] += 1\n        else:\n            unique_list[element] = 1\n    return unique_list\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # list1 = ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']\n    # dict = {'a':1,'b':3}\n    # for i in range(0, len(list1)):\n    #     list1[i] = tuple(list1[i])\n    #     dict[list1[i]] = dict.get(list1[i], 0) + 1\n    # return dict\n    return {}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    subsets = {}\n    for i in range(len(list1)):\n        subsets[list1[i]] = len(list1[i])\n    return subsets\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    num_count = {}\n    for l in list1:\n        l_tuple = tuple(l)\n        if l_tuple in num_count:\n            num_count[l_tuple] += 1\n        else:\n            num_count[l_tuple] = 1\n    return num_count\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    list_of_tuples = combinations(test_list, 2)\n    for combo in list_of_tuples:\n        print(combo)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    total = test_list[0]\n    combos = []\n    temp = []\n    for i in range(1, len(test_list)):\n        temp.append(test_list[i])\n        temp = list(set(temp))\n        total += temp[0]\n        del temp[0]\n        if len(temp) == 0:\n            combos.append((total, list(temp)))\n            total = 0\n    \n    combos.append((total, list(temp)))\n    \n    return combos\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, len(test_list)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    summ = test_list[0]\n    for i in range(1,len(test_list)):\n        summ = summ + test_list[i]\n    return (summ)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for i in test_list:\n        #print(i)\n        temp = list(i)\n        #print(temp)\n        temp.sort()\n        #print(temp)\n        #print(temp)\n        for j in range(len(temp)-1):\n            if temp[j] == temp[j+1]:\n                continue\n            if temp[j] + temp[j+1] not in comb_list:\n                comb_list.append(temp[j] + temp[j+1])\n        #print(comb_list)\n    return comb_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    test_list = sorted(test_list)\n    test_list = sorted(test_list)\n    test_list = sorted(test_list)\n    test_list = sorted(test_list)\n    return list(combinations(test_list,2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list,len(test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n    if len(test_list) == 1:\n        return [[test_list[0]]]\n    answer = []\n    for i in range(len(test_list)):\n        for j in combinations(test_list,i):\n            temp = []\n            for k in j:\n                temp.append(k)\n            if len(temp) == len(test_list):\n                answer.append(temp)\n    return answer\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    result = 0\n    for i in range(1, math.floor(math.sqrt(n))) :\n        if n % i == 0 :\n            result += 1\n    return result == 0\ndef prime_checker(n) :\n    '''\n    Check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-20.php\n    '''\n    if n > 1 :\n        for i in range(2, int(math.sqrt(n)) + 1) :\n            if n % i == 0 :\n                return False\n        return True\n    else :\n        return False\n    \ndef perfect_number(n) :\n    '''\n    Check whether a number is a perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-3.php\n    '''\n    if prime_checker(n) :\n        if n == 1 :\n            return False\n        if n == 2 :\n            return True\n        for i in range(2, int(math.sqrt(n)) + 1) :\n            if n % i == 0 :\n                return False\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    return count_divisors(n - 1)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) : \n        if (n % i) == 0 : \n            count = count + 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    count = 0\n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            count += 1\n        i += 2\n    if count == 0 : \n        return \"It is not even.\"\n    else : \n        return \"It is even.\"\n    "
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==2 or n==4 or n==6 :\n        return True \n    for i in range(2,int(math.sqrt(n)+1)) :\n        if n%i==0 :\n            return False \n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0\n    for i in range(1,n+1) : \n        if n%i==0 : \n            count_divisors = count_divisors + 1\n    if count_divisors == 0 : \n        return \"No\"\n    else : \n        return \"Yes\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 2\n    while i*i <= n :\n        if n % i == 0 :\n            divisors.append(i)\n            divisors.append(n//i)\n        i += 1\n    return divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for divisor in range(1, int(math.sqrt(n) + 1)) : \n        if n % divisor == 0 : \n            count += 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    for j in range(2, int(math.sqrt(n)) + 1): \n        if n % j == 0: \n            i = 0 \n            break\n        i = i + 1 \n    if i == 0 : \n        return \"Perfect\"\n    else: \n        return \"Not Perfect\"\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # your code here\n    # write your logic here\n    sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n        # if arr[i] % 2 == 1:\n        #     sum += arr[i]\n        #     print(sum)\n    return su"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #logic\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    length = len(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if (arr[i] % 2!= 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i] if i%2 == 0 else 0\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if(arr[i]%2 == 0):\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n    return sum\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    summation = 0\n    n = len(arr)\n    for i in range(0, n, 2):\n        summation += arr[i]\n    return summation\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # define the needed values\n    max_r = 255\n    min_r = 0\n    max_g = 255\n    min_g = 0\n    max_b = 255\n    min_b = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #Convert rgb to hsv\n    #define values\n    #set default values\n    h = 0.0\n    s = 0.0\n    v = 0.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0.0 and g == 0.0 and b == 0.0:\n        return 0.0, 0.0, 0.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    print(r, g, b)\n    return [\n    h,\n    s,\n    v]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r*255 # convert from the range of 0 to 255\n    g = g*255\n    b = b*255\n    \n    # get max value of the rgb variable\n    max = max(r, g, b)\n    \n    # get the minimum of the rgb variable\n    min = min(r, g, b)\n    \n    # check if any of the values are negative\n    if min == max:\n        if r == max:\n            return 0, 0, 0\n        else:\n            return max, 0, 0\n    # if max is a negative value, then r is the max value and g is the min value\n    if max < 0:\n        max = max+max\n        r = max*255/255\n        g = 0\n        b = 0\n    # if max is a positive value, then g is the max value and b is the min value\n    elif max > 255:\n        max = max-max\n        r = max*255/255\n        g = max*255\n        b = 0\n    \n    # if g is 0, then b is 0\n    if g == 0:\n        if b == 0:\n            return 0, 0, 0\n        # if g is 1, then b is the max value\n        if b > 0:\n            b = b*255\n        # if b is greater than 0, then r is the max value and g is the min value\n        elif b < 0:\n            b = b*255\n        # if b is less than 0, then g is the max value and b is the min value\n        elif b == 0:\n            g = max*255/255\n            b = 0\n    \n    # if g is 1, then r is the max value\n    elif g == 1:\n        if r == 0:\n            r = r*255\n        # if r is greater than 0, then b is the max value\n        elif r < 0:\n            r = max*255/255\n            b = 0\n        # if r is less than 0, then g is the max value and r is the min value\n        elif r == 0:\n            g = max*255\n        # if g is 1, then b is the max value\n        elif g < 1:\n            b = max*255/255\n        # if g is greater than 1, then b is the min value\n        elif g > 1:\n            b = max*255\n    \n    # if g is 0, then b is 0\n    if b == 0:\n        if r == 0:\n            r = 0\n        # if b is greater than 0, then g is the max value\n        elif b < 0:\n            b = max*255/255\n        # if b is less than 0, then r is the max value and g is the min value\n        elif b < 0:\n            r = max*255/255\n        # if b is 0, then r is the max value\n        elif b == 0:\n            b = 0\n    \n    # if b is 1, then g is the max value\n    elif b == 1:\n        if r == 0:\n            r = max\n        # if r is greater than 0, then g is the max value\n        elif r < 0:\n            r = max*255/255\n        # if r is less than 0, then g is the max value and r is the min value\n        elif r == 0:\n            g = max*255\n        # if r is greater than 0, then g is the max value and r is the min value\n        elif r > 0:\n            g = max*255/255\n        # if r is less than 0, then b is the max value\n        elif r < 0:\n            r = max*255\n        # if b is 0, then g is the max value\n        elif g < 1:\n            b = max*255/255\n    \n    # if b is 0, then g is 0\n    elif b == 0:\n        if g == 0:\n            g = 0\n        # if g is greater than 0, then b is the max value\n        elif g < 0:\n            g = max*255/255\n        # if g is less than 0, then b is the max value and g is the min value\n        elif g > 0:\n            b = max*255\n        # if b is 0, then r is the max value\n        elif b < 0:\n            r = max*255/255\n        # if r is greater than 0, then g is the max value and r is the min value\n        elif r > 0:\n            g = max*255\n    \n    # if r is 1, then b is the max value\n    elif r == 1:\n        if g == 0:\n            g = 0\n        # if g is greater than 0, then b is the max value\n        elif g > 0:\n            b = max*255/255\n        # if g is less than 0, then b is the max value and g is the min value\n        elif g < 0:\n            b = max*255\n        # if g is 0, then b is the max value\n        elif g == 0:\n            b = 0\n    \n    # if g is 0, then b is 0\n    elif g == 0:\n        if r == 0:\n            r = 0\n        # if r is greater than 0, then b is the max value\n        elif r < 0:\n            r = max*255/255\n        # if r is less than 0, then b is the max value and r is the min value\n        elif r > 0:\n            b = max*255\n        # if r is greater than 0, then b is the max value and r is the min value\n        elif r == 0:\n            b = max*255/255\n    \n    # if r is 1, then b is the max value\n    elif r == 1:\n        if g == 0:\n            g = 0\n        # if g is greater than 0, then b is the max value\n        elif g > 0:\n            b = max*255/255\n        # if g is less than 0, then b is the max value and g is the min value\n        elif g < 0:\n            b = max*255\n        # if g is 0, then b is the max value\n        elif g == 0:\n            b = 0\n    \n    # if g is 1, then b is 0\n    elif g == 1:\n        if r == 0:\n            r = 0\n        # if r is greater than 0, then b is the max value\n        elif r < 0:\n            r = max*255/255\n        # if r is less than 0, then b is the max value and r is the min value\n        elif r > 0:\n            b = max*255\n        # if r is greater than 0, then b is the max value and r is the min value\n        elif r > 0:\n            b = max*255/255\n        # if b is 0, then g is the max value\n        elif b < 1:\n            g = max*255/255\n    \n    # if b is 1, then g is the max value\n    elif b == 1:\n        if r == 0:\n            r = 0\n        # if r is greater than 0, then b is the max value\n        elif r < 0:\n            r = max*255/255\n        # if r is less than 0, then b is the max value and r is the min value\n        elif r > 0:\n            b = max*255\n        # if r is greater than 0, then b is the max value and r is the min value\n        elif r > 0:\n            g = max*255/255\n        # if r is less than 0, then b is the max value\n        elif r < 0:\n            b = max*255\n    \n    # if b is 0, then r is 0\n    elif b == 0:\n        if g == 0:\n            g = 0\n        # if g is greater than 0, then b is the max value\n        elif g > 0:\n            r = max*255/255\n        # if g is less than 0, then b is the max value and g is the min value\n        elif g < 0:\n            b = max*255\n        # if g is 0, then b is the max value\n        elif g == 0:\n            b = 0\n    \n    # if b is 1, then g is the max value\n    elif b == 1"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert from rgb to hsv\n    h = 0.5 * (r + g + b)\n    h = 0.5 * (r - g - b)\n    # if less than 0, then output error\n    if h < 0:\n        return (0, 0, 0)\n    if h > 1:\n        return (1, 1, 1)\n    # get hsv\n    s = 0.6 * r + 0.3 * g + 0.7 * b\n    # scale to [0, 1]\n    v = s * (1 - abs((h + 1)/2))\n    # add to hsv\n    h = h + (1 - abs((h + 1)/2))\n    # make sure values are between 0 and 1\n    return (int(255 * v), int(255 * h), int(255 * s))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Check if input is a tuple\n    if isinstance(r, tuple) and len(r) == 3:\n        r, g, b = r\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = (r / 255) * 2\n    g = (g / 255) * 2\n    b = (b / 255) * 2\n    \n    max_v = max(r, g, b)\n    min_v = min(r, g, b)\n    \n    if max_v == 0:\n        h = 0\n        s = 0\n        v = 0\n    else:\n        h = max_v\n        s = 0\n        v = max_v\n        \n    if min_v == 0:\n        h = 0\n        s = 0\n        v = 0\n    else:\n        h = 0\n        s = max_v\n        v = max_v\n    \n    if h < 0:\n        h += 360\n    \n    if s < 0:\n        s += 1\n    \n    if v < 0:\n        v += 1\n    \n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #define the limits\n    lim_r = r - 250\n    lim_g = g - 250\n    lim_b = b - 250\n    #convert to hsv\n    h = int(255 * (r + g + b)/3.0)\n    s = int(255 * ((r - g) * (r - g) + (b - g) * (b - g) + lim_r))\n    v = int(255 * (r * (g - b) + lim_g * (b - g) + lim_b * (g - b)))\n    #cast to proper type\n    hsv = hsv_helper(h, s, v)\n    return hsv\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    return r, g, b\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for element in list1:\n        if element%2==0:\n            even_sum += element\n        else:\n            odd_sum += element\n    return even_sum, odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i%2 == 0:\n            result *= i\n        else:\n            result /= i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if i%2 == 0:\n            result = result * i\n        else:\n            result = result / i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for element in list1:\n        if element % 2 == 0:\n            even_sum += element\n        else:\n            odd_sum += element\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    x = 0\n    while x < len(list1):\n        if list1[x] % 2 == 0:\n            even.append(list1[x])\n        else:\n            odd.append(list1[x])\n        x += 1\n    print(\"Even number:\", *even)\n    print(\"Odd number:\", *odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # your code goes here\n    lst = []\n    for i in list1:\n        lst.append(i)\n    lst2 = []\n    for i in lst:\n        if(i % 2 == 0):\n            lst2.append(i)\n    print(f\"The product of even numbers {lst} and odd numbers {lst2} is {len(lst) * (len(lst2))}\")\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # your code goes here\n    # convert input list into a tuple to make it more easy\n    tuple1 = list(map(lambda x: int(x),list1))\n    # return the product\n    return (tuple1[0] * tuple1[1])\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in range(0,len(list1)):\n        if i%2 == 0:\n            prod = prod * list1[i]\n        else:\n            prod = prod * list1[i]\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(list1)\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            list1[i] = list1[i]//2\n        else:\n            list1[i] = list1[i]*3+1\n    print(list1)\n    return list1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for char in test_str:\n        int_tuple.append(int(char))\n    return tuple(int_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [int(i) for i in test_list]\n        return tuple(test_list)\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \n    \ndef convert_float_int(test_str):\n    '''\n    Write a function to convert float to integer.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [int(i) for i in test_list]\n        return test_list\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \n    \ndef convert_float_string(test_str):\n    '''\n    Write a function to convert float to string.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [i for i in test_list]\n        return test_list\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \ndef convert_float_bool(test_str):\n    '''\n    Write a function to convert float to bool.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [i for i in test_list]\n        return test_list\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \n    \ndef convert_float_bool_list(test_str):\n    '''\n    Write a function to convert float to bool list.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [i for i in test_list]\n        return test_list\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \ndef convert_int_bool(test_str):\n    '''\n    Write a function to convert int to bool.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [i for i in test_list]\n        return test_list\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \ndef convert_int_bool_list(test_str):\n    '''\n    Write a function to convert int to bool list.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [i for i in test_list]\n        return test_list\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \ndef convert_bool_to_int(test_str):\n    '''\n    Write a function to convert bool to int.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_list = [i for i in test_list]\n        return test_list\n    test_list = []\n    try:\n        test_list = test_str.split(',')\n        for t in test_list:\n            t = list_str_int(t)\n            test_list.append(t)\n    except ValueError:\n        print(\"Error:  ',',tuple(t) must be int or tuple, not %s\"%test_str)\n        return\n    return tuple(test_list)\n    \n    \ndef convert_bool_to_int_list(test_str):\n    '''\n    Write a function to convert bool to int list.\n    '''\n    def list_str_int(test_list):\n        '''\n        Convert list string to integer tuple.\n        '''\n        test_list = test_list.replace('(','')\n        test_list = test_list.replace(')','')\n        test_list = test_list.split(' ')\n        test_lis"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(\",\")\n    return tuple(map(int, tuple_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = str(test_str)\n    result = []\n    for i in test_str:\n        result.append(int(i))\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_to_int = {\n        \"(1,2)\": 1,\n        \"(3,4)\": 3,\n        \"(5,6)\": 5,\n        \"(7,8)\": 7,\n        \"(9,0)\": 9,\n        \"(9,9)\": 99\n    }\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) == tuple:\n        return tuple([int(x) for x in test_str])\n    else:\n        return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(',',').replace(')',',').replace(',',',').replace('(','').replace(')','').replace(',','')\n    test_str_list = test_str.split(',')\n    test_list = []\n    for i in test_str_list:\n        test_list.append(int(i))\n    return test_list\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup = []\n    for char in test_str:\n        tup.append(ord(char))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for i in test_str:\n        i = int(i)\n    return tuple(i)\n    \n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    low = 0\n    high = n - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    while x > a[n-1] and n > 0:\n        n = n-1\n        if n<0:\n            break\n        \n    if n<0:\n        return 0\n    else:\n        return n\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a)\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    if a[low] < x:\n        a[low] = x\n    else:\n        a[low:low] = [x]\n    return low\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[len(a) - 1] < x:\n        return len(a)\n    else:\n        return bisect.bisect_right(a, x) - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x == a[0]:\n        return 0\n    return 1+bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[0] == x: return 0\n    index = bisect.bisect_left(a, x)\n    if index < len(a):\n        if a[index] < x:\n            return index\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    # Insertion point is always at index i, the position of the next available item in a\n    insertion_point = i = bisect.bisect_right(a, x, lo=0, hi=n)\n    # After insert, we need to shift all the remaining items to the right\n    for j in range(insertion_point, n):\n        a[i] = a[j]\n        i += 1\n    # After the loop has finished, a[i] is now at the position of the next available item\n    # For example, for an array [1,2,3,4,5] and x=5, we can put 4 in the right place, and take 3 to get 5 in the right place.\n    # The last remaining item is at index 3, so we move it to the right place, and shift the remaining items\n    # to the right, which are 4,3,5,4.\n    a[i] = x\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(\"\\d+b\", text)!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_reg_regex_list = re.findall('(\\A[a-zA-Z0-9_]*$)', text)\n    match_reg_regex_list_sorted = sorted(match_reg_regex_list)\n    if len(match_reg_regex_list) == 0:\n        return None\n    if len(match_reg_regex_list) > 1:\n        return None\n    if len(match_reg_regex_list) == 1:\n        return match_reg_regex_list[0]\n    else:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1]\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a an a followed by three 'b',\n    followed by an end 'b'.\n    '''\n    match_reg_regex_list = re.findall('(\\A[a-zA-Z0-9_]*$)', text)\n    match_reg_regex_list_sorted = sorted(match_reg_regex_list)\n    if len(match_reg_regex_list) == 0:\n        return None\n    if len(match_reg_regex_list) == 1:\n        return match_reg_regex_list[0]\n    elif len(match_reg_regex_list) > 1:\n        return None\n    elif len(match_reg_regex_list) == 2:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1]\n    else:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1] +'' + match_reg_regex_list[2]\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # begin constructing the regexp\n    regex = re.compile('\\(a*\\)|(b*)\\b')\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # 1. Initialize variables\n    m = re.match(\"([a-z]+)([0-9]){3}\", text)\n    if m:\n        return m\n    else:\n        raise ValueError(\"text must be three words long\")\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][a-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #text = re.sub('[A-z][A-z]', '', text)\n    text = re.sub('[A-z][a-z]', '', text)\n    #print(text)\n    return text\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b'.\n    '''\n    text = re.sub('[A-z][A-z]', '', text)\n    #text = re.sub('[A-z][A-z"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # TODO: your code here\n    return re.search(r'[a-zA-Z\\s]', text)!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text_match = re.match(r'^(a){3}b$',text)\n    if text_match:\n        print(text_match.group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p1 = re.compile('a(\\d+)\\s')\n    p2 = re.compile('\\s[b]+')\n    match = p1.search(text)\n    text = text[match.end():]\n    text = text[:match.start()] + p2.search(text[match.end():])\n    text = text[:text.find('\\n')]\n    return text\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # define a regex for match\n    a = re.compile(r'a')\n    # define a pattern for matching a string that has an a followed by three 'b'\n    b = re.compile(r'b')\n    # compile the text into a pattern\n    text = re.compile(text)\n    # search for matches\n    matches = a.finditer(text)\n    for match in matches:\n        print(match)\n        print(match.group())\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if not text:\n        return False\n    \n    return bool(re.match(r'(?P<a>[a-zA-Z0-9])(?P<b>[a-zA-Z0-9]{3})\\b', text))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list) == list:\n        list_tuple = tuple(test_list)\n        tuple_str = \"(\"\n        for i in range(len(test_list)):\n            tuple_str = tuple_str + str(test_list[i])\n            if i < len(test_list)-1:\n                tuple_str = tuple_str + \",\"\n        tuple_str = tuple_str + \")\"\n        return tuple_str\n    else:\n        return None\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    def new_tuple(test_list, test_str):\n        '''\n        Write a function to create a new tuple from the given string and list.\n        '''\n        test_list = test_list.split()\n        test_str = test_str.split()\n        return (tuple(test_list), tuple(test_str))\n    return new_tuple(test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_str = test_str.split(',')\n    return tuple(tuple_str[i:i+len(tuple_str)])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if type(test_list)!= list:\n        raise TypeError(\"The given list is not a list\")\n    if len(test_list)!= len(test_str):\n        raise TypeError(\"Length of the given list is not the same as the given string\")\n    return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(eval(test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_str is None:\n        return []\n    elif len(test_str) == 0:\n        return None\n    else:\n        test_list = [x.strip() for x in test_str.split(\",\")]\n        test_list = [x for x in test_list if x]\n        if not all(is_valid_tuple(x) for x in test_list):\n            return None\n        else:\n            return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(str, test_list))\n    \ndef new_dictionary(test_dic):\n    '''\n    Write a function to create a new dictionary from the given dictionary.\n    '''\n    return dict(map(lambda x: (x,x), test_dic.keys()))\n    \ndef add_to_dict(new_dict, key, value):\n    '''\n    Write a function to add the key, value to the dictionary passed in.\n    '''\n    new_dict[key].append(value)\n    \ndef add_key_to_dict(new_dict, key):\n    '''\n    Write a function to add the key to the dictionary passed in.\n    '''\n    new_dict[key] = new_dict[key] + 1\n    \ndef list_to_tuples(test_list):\n    '''\n    Write a function that returns a list of the tuples from the given list.\n    '''\n    return map(tuple, test_list)\n    \ndef remove_key_from_dict(new_dict, key):\n    '''\n    Write a function to remove the key from the dictionary passed in.\n    '''\n    new_dict.pop(key, None)\n    \ndef remove_key_from_dict(new_dict, key):\n    '''\n    Write a function to remove the key from the dictionary passed in.\n    '''\n    new_dict.pop(key, None)\n    \ndef list_of_dicts_to_tuples(test_list):\n    '''\n    Write a function that returns a list of the tuples from the given list.\n    '''\n    return map(tuple, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        new_tuple = tuple(test_list)\n        new_tuple = tuple(map(int, new_tuple))\n    except ValueError:\n        new_tuple = tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    split_list = test_list.split()\n    for el in split_list:\n        new_list.append(el)\n    return new_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_list == []:\n        raise TypeError('The list is empty.')\n    elif test_str == '':\n        raise TypeError('The string is empty.')\n    elif len(test_list) == 0:\n        raise TypeError('The list is empty.')\n    elif len(test_list) == 1:\n        raise TypeError('The list is not a tuple.')\n    elif isinstance(test_list[0], str):\n        return test_list\n    elif isinstance(test_list[0], list):\n        return tuple(test_list)\n    else:\n        raise TypeError('The list has to be a tuple or a list.')\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return any([n%2==0 for n in nums])\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Create a list that will contain the even numbers of the given list\n    even_list = []\n    # Go through the list\n    for n in nums:\n        # Check if the even numbers are even\n        if n%2 == 0:\n            # Append the even numbers to even_list\n            even_list.append(n)\n    # Check if the even_list is empty\n    if len(even_list) == 0:\n        return False\n    # Return True if even_list is empty\n    else:\n        return True\n    \n    "
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_nums = []\n    for index, num in enumerate(nums):\n        if num%2==0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            nums[i] = nums[i] % 2\n    print(nums)\n    return nums\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if(nums[i]%2==0):\n            if(nums[i+1]%2==0):\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i=0\n    for item in nums:\n        if item%2==0:\n            i+=1\n    return i==0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n=len(nums)\n    for i in range(n):\n        if nums[i]%2==0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        if i % 2 == 0:\n            sum += i\n    return sum % 2 == 0\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            temp[i] = remove_nested(temp[i])\n    return tuple(temp)\n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove any duplicate tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            temp[i] = tuple(sorted(set(temp[i])))\n    return tuple(temp)\n    \ndef remove_nested_duplicates(test_tup):\n    '''\n    Write a function to remove any duplicate tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            for j in range(len(temp[i])):\n                if type(temp[i][j]) is tuple:\n                    for k in range(len(temp[i][j])):\n                        if type(temp[i][j][k]) is tuple:\n                            if temp[i][j][k] not in temp[i]:\n                                temp[i].remove(temp[i][j][k])\n    return tuple(temp)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp_tup = test_tup[1:]\n    return temp_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove the tuples, so the number of tuples is never 0\n    n = test_tup[1]\n    for i in range(n, 0, -1):\n        del test_tup[0]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = []\n    while True:\n        try:\n            test_tup.append(tuple(map(int, input().split())))\n            test_tup = tuple(sorted(test_tup, key=lambda item: item[1]))\n        except:\n            break\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tuple = ()\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # remove left side bracket\n    left = test_tup[0]\n    # remove right side bracket\n    right = test_tup[1]\n    # compare left and right to eachother\n    # if they are the same, delete them\n    if left == right:\n        return test_tup[:2]\n    # remove the left side bracket if its right then\n    elif right is None:\n        return test_tup[:1]\n    # if its the left side, then do nothing\n    elif left is None:\n        return test_tup[1:]\n    # otherwise check the value of the left side\n    # to see if it is the last element\n    elif left[0] is None:\n        return test_tup[1:]\n    # if it is then delete the left side bracket\n    else:\n        return test_tup[:1] + remove_nested(left[1:])\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = tuple(test_tup)\n    nested = []\n    for key, value in tup:\n        if type(key)!= type(''):\n            nested.append((key,value))\n        else:\n            nested.append((key,value[0]))\n    tup = tuple(nested)\n    return tup\n    \nif __name__ == '__main__':\n    t = ('a', 'b', 'c', 'd', 'e', 'f', 'g')\n    print(remove_nested(t)"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove(tup):\n        return tup[0:1]\n    return tuple(map(remove, test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is tuple:\n        for t in test_tup:\n            if type(t) is tuple:\n                remove_nested(t)\n            else:\n                t.remove(t)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    c=0\n    for i in input_list:\n        c+=len(i)\n    return c\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #using a loop to count the number of lists.\n    counter = 0\n    for i in input_list:\n        if isinstance(i, list):\n            counter += 1\n    return counter\n    \n    #def count_list(input_list):\n    #    '''\n    #    Write a python function to count the number of lists in a given number of lists.\n    #    '''\n    #    #using a loop to count the number of lists.\n    #    counter = 0\n    #    for i in input_list:\n    #        if isinstance(i, list):\n    #            counter += 1\n    #    return counter\n    #    \n    #    #def count_list(input_list):\n    #    #    '''\n    #    #    Write a python function to count the number of lists in a given number of lists.\n    #    #    '''\n    #    #    #using a loop to count the number of lists.\n    #    #    counter = 0\n    #    #    for i in input_list:\n    #    #        if isinstance(i, list):\n    #    #            counter += 1\n    #    #    return counter\n    #    #    \n    #    #    #def count_list(input_list):\n    #    #    #    '''\n    #    #    #    Write a python function to count the number of lists in a given number of lists.\n    #    #    #    '''\n    #    #    #    #using a loop to count the number of lists.\n    #    #    counter = 0\n    #    #    for i in input_list:\n    #    #        if isinstance(i, list):\n    #    #            counter += 1\n    #    #    return counter\n    #    #    \n    #    #    #def count_list(input_list):\n    #    #        '''\n    #    #        Write a python function to count the number of lists in a given number of lists.\n    #    #        '''\n    #    #    #    #using a loop to count the number of lists.\n    #    #    #    counter = 0\n    #    #    #    for i in input_list:\n    #    #    #        if isinstance(i, list):\n    #    #        #        counter += 1\n    #    #    #    return counter\n    #    #    #    \n    #    #    #    #def count_list(input_list):\n    #    #        '''\n    #    #        Write a python function to count the number of lists in a given number of lists.\n    #    #        '''\n    #    #        #    #using a loop to count the number of lists.\n    #    #        counter = 0\n    #    #        for i in input_list:\n    #    #            if isinstance(i, list):\n    #    #                counter += 1\n    #    #    #        return counter\n    #    #    #    #    \n    #    #    #    #    return counter\n    #    #    #    \n    #    #    #    #def count_list(input_list):\n    #    #        '''\n    #    #        Write a python function to count the number of lists in a given number of lists.\n    #    #        '''\n    #    #        #    #using a loop to count the number of lists.\n    #    #        counter = 0\n    #    #        for i in input_list:\n    #    #            if isinstance(i, list):\n    #    #                counter += 1\n    #    #        return counter\n    #    #        \n    #    #        #def count_list(input_list):\n    #    #            '''\n    #    #            Write a python function to count the number of lists in a given number of lists.\n    #    #            '''\n    #    #            #    #using a loop to count the number of lists.\n    #    #            counter = 0\n    #    #            for i in input_list:\n    #    #                if isinstance(i, list):\n    #    #                    counter += 1\n    #    #            return counter\n    #    #            \n    #    #            #def count_list(input_list):\n    #    #            #    '''\n    #    #            #        Write a python function to count the number of lists in a given number of lists.\n    #    #            #        '''\n    #    #            #        #using a loop to count the number of lists.\n    #    #            counter = 0\n    #    #            for i in input_list:\n    #    #                if isinstance(i, list):\n    #    #                    counter += 1\n    #    #            return counter\n    #    #            \n    #    #            #def count_list(input_list):\n    #    #                '''\n    #    #                Write a python function to count the number of lists in a given number of lists.\n    #    #                '''\n    #    #                #    #using a loop to count the number of lists.\n    #    #                counter = 0\n    #    #                for i in input_list:\n    #    #                    if isinstance(i, list):\n    #    #                        counter += 1\n    #    #                return counter\n    #    #                \n    #    #                #def count_list(input_list):\n    #    #                    '''\n    #    #                    Write a python function to count the number of lists in a given number of lists.\n    #    #                    '''\n    #    #                    #    #using a loop to count the number of lists.\n    #    #                    counter = 0\n    #    #                    for i in input_list:\n    #    #                        if isinstance(i, list):\n    #    #                            counter += 1\n    #    #                    return counter\n    #    #                    \n    #    #                    #def count_list(input_list):\n    #    #                        '''\n    #    #                        Write a python function to count the number of lists in a given number of lists.\n    #    #                        '''\n    #    #                        #    #using a loop to count the number of lists.\n    #    #                        counter = 0\n    #    #                        for i in input_list:\n    #    #                            if isinstance(i, list):\n    #    #                                counter += 1\n    #    #                        return counter\n    #    #                    \n    #    #                        #def count_list(input_list):\n    #    #                            '''\n    #    #                            Write a python function to count the number of lists in a given number of lists.\n    #    #                            '''\n    #    #                            #    #using a loop to count the number of lists.\n    #    #                            counter = 0\n    #    #                            for i in input_list:\n    #    #                                if isinstance(i, list):\n    #    #                                    counter += 1\n    #    #                            return counter\n    #    #                            \n    #    #                            #def count_list(input_list):\n    #    #                                '''\n    #    #                                Write a python function to count the number of lists in a given number of lists.\n    #    #                                '''\n    #    #                                #    #using a loop to count the number of lists.\n    #    #                                counter = 0\n    #    #                                for i in input_list:\n    #    #                                    if isinstance(i, list):\n    #    #                                        counter += 1\n    #    #                                return counter\n    #    #                            \n    #    #                            #def count_list(input_list):\n    #    #                                '''\n    #    #                                Write a python function to count the number of lists in a given number of lists.\n    #    #                                '''\n    #    #                                #    #using a loop to count the number of lists.\n    #    #                                counter = 0\n    #    #                                for i in input_list:\n    #    #                                    if isinstance(i, list):\n    #    #                                        counter += 1\n    #    #                                return counter\n    #    #                            \n    #    #                            #def count_list(input_list):\n    #    #                                '''\n    #    #                                Write a python function to count the number of lists in a given number of lists.\n    #    #                                '''\n    #    #                                #    #using a loop to count the number of lists."
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list1 = input_list[0]\n    list2 = input_list[1]\n    for i in range(2,len(input_list)):\n        list1 += input_list[i]\n        list2 += input_list[i+1]\n    result = list(dict.fromkeys(list(set(list1).intersection(list2))))\n    result = [list(set(list1).intersection(list2))[0],len(list1),len(list2),len(result)]\n    print(result)\n    return result\n    \n    \ndef get_string(input_str):\n    '''\n    Write a python function to get the string from a given input.\n    '''\n    result = input_str.strip('[].\\n')\n    result = result.split(']')\n    return result\n    \n    \ndef parse_input(input_str):\n    '''\n    Write a python function to parse the input string.\n    '''\n    result = get_string(input_str)\n    result = [int(x) for x in result]\n    return result\n    \n    \ndef sieve_of_eratosthenes(limit):\n    '''\n    Write a python function to get the nth prime number in a given limit.\n    '''\n    result = []\n    prime = 2\n    while len(result) < limit:\n        if not isprime(prime):\n            prime += 1\n        else:\n            result += [prime]\n            result += [x for x in range(prime * 2, limit + 1, prime) if x not in result]\n            break\n        prime += 1\n    return result\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    sum=0\n    for i in input_list:\n        sum += len(i)\n    return sum\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # define a list\n    input_list = input_list.split(\",\")\n    # loop through input_list\n    for index, item in enumerate(input_list):\n        # check if item is a list \n        if type(item) == list:\n            # loop through all of the items in item\n            for i in item:\n                # check if the current item is a list\n                if type(i) == list:\n                    # loop through all of the items in i\n                    for x in i:\n                        # check if the current item is a list\n                        if type(x) == list:\n                            # loop through all of the items in x\n                            for y in x:\n                                # if the current item is a list\n                                if type(y) == list:\n                                    # loop through all of the items in y\n                                    for z in y:\n                                        # if the current item is a list\n                                        if type(z) == list:\n                                            # loop through all of the items in z\n                                            for r in z:\n                                                # if the current item is a list\n                                                if type(r) == list:\n                                                    # loop through all of the items in r\n                                                    for s in r:\n                                                        # if the current item is a list\n                                                        if type(s) == list:\n                                                            # loop through all of the items in s\n                                                            for t in s:\n                                                                # if the current item is a list\n                                                                if type(t) == list:\n                                                                    # loop through all of the items in t\n                                                                    for u in t:\n                                                                        # if the current item is a list\n                                                                        if type(u) == list:\n                                                                        # loop through all of the items in u\n                                                                        for v in u:\n                                                                            # if the current item is a list\n                                                                            if type(v) == list:\n                                                                                # loop through all of the items in v\n                                                                                for w in v:\n                                                                                    # if the current item is a list\n                                                                                    if type(w) == list:\n                                                                                    # loop through all of the items in w\n                                                                                    for x in w:\n                                                                                        # if the current item is a list\n                                                                                        if type(x) == list:\n                                                                                            # loop through all of the items in x\n                                                                                        for y in x:\n                                                                                            # if the current item is a list\n                                                                                            if type(y) == list:\n                                                                                            # loop through all of the items in y\n                                                                                            for z in y:\n                                                                                            # if the current item is a list\n                                                                                                if type(z) == list:\n                                                                                            # loop through all of the items in z\n                                                                                                for r in z:\n                                                                                            # if the current item is a list\n                                                                                                if type(r) == list:\n                                                                                            # loop through all of the items in r\n                                                                                                for s in r:\n                                                                                            # if the current item is a list\n                                                                                                if type(s) == list:\n                                                                                            # loop through all of the items in s\n                                                                                                for t in s:\n                                                                                            # if the current item is a list\n                                                                                                if type(t) == list:\n                                                                                            # loop through all of the items in t\n                                                                                                for u in t:\n                                                                                            # if the current item is a list\n                                                                                                if type(u) == list:\n                                                                                            # loop through all of the items in u\n                                                                                                for v in u:\n                                                                                            # if the current item is a list\n                                                                                                if type(v) == list:\n                                                                                            # loop through all of the items in v\n                                                                                                for w in v:\n                                                                                            # if the current item is a list\n                                                                                                if type(w) == list:\n                                                                                            # loop through all of the items in w\n                                                                                                for x in w:\n                                                                                            # if the current item is a list\n                                                                                                if type(x) == list:\n                                                                                            # loop through all of the items in x\n                                                                                                for y in x:\n                                                                                            # if the current item is a list\n                                                                                                if type(y) == list:\n                                                                                            # loop through all of the items in y\n                                                                                                for z in y:\n                                                                                            # if the current item is a list\n                                                                                                if type(z) == list:\n                                                                                            # loop through all of the items in z\n                                                                                                for r in z:\n                                                                                            # if the current item is a list\n                                                                                                if type(r) == list:\n                                                                                            # loop through all of the items in r\n                                                                                                for s in r:\n                                                                                            # if the current item is a list\n                                                                                                if type(s) == list:\n                                                                                            # loop through all of the items in s\n                                                                                                for t in s:\n                                                                                            # if the current item is a list\n                                                                                                if type(t) == list:\n                                                                                            # loop through all of the items in t\n                                                                                                for u in t:\n                                                                                            # if the current item is a list\n                                                                                                if type(u) == list:\n                                                                                            # loop through all of the items in u\n                                                                                                for v in u:\n                                                                                            # if the current item is a list\n                                                                                                if type(v) == list:\n                                                                                            # loop through all of the items in v\n                                                                                                for w in v:\n                                                                                            # if the current item is a list\n                                                                                                if type(w) == list:\n                                                                                            # loop through all of the items in w\n                                                                                                for x in w:\n                                                                                            # if the current item is a list\n                                                                                                if type(x) == list:\n                                                                                            # loop through all of the items in x\n                                                                                                for y in x:\n                                                                                            # if the current item is a list\n                                                                                                if type(y) == list:\n                                                                                            # loop through all of the items in y\n                                                                                                for z in y:\n                                                                                            # if the current item is a list\n                                                                                                if type(z) == list:\n                                                                                            # loop through all of the items in z\n                                                                                                for r in z:\n                                                                                            # if the current item is a list\n                                                                                                if type(r) == list:\n                                                                                            # loop through all of the items in r\n                                                                                                for s in r:\n                                                                                            # if the current item is a list\n                                                                                                if type(s) == list:\n                                                                                            # loop through all of the items in s\n                                                                                                for t in s:\n                                                                                            # if the current item is a list\n                                                                                                if type(t) == list:\n                                                                                            # loop through all of the items in t\n                                                                                                for u in t:\n                                                                                            # if the current item is a list\n                                                                                                if type(u) == list:\n                                                                                            # loop through all of the items in u\n                                                                                                for v in u:\n                                                                                            # if the current item is a list\n                                                                                                if type(v) == list:\n                                                                                            # loop through all of the items in v\n                                                                                                for w in v:\n                                                                                            # if the current item is a list\n                                                                                                if type(w) == list:\n                                                                                            # loop through all of the items in w\n                                                                                                for x in w:\n                                                                                            # if the current item is a list\n                                                                                                if type(x) == list:\n                                                                                "
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    for i in range(len(input_list)):\n        if(type(input_list[i]) is not list):\n            print('error')\n            break\n    if (len(input_list) % 2 == 1):\n        print('error')\n    else:\n        for i in range(len(input_list)):\n            if(type(input_list[i]) is not list):\n                print('error')\n                break\n    if (len(input_list) % 2 == 1):\n        print('error')\n    else:\n        for i in range(len(input_list)):\n            if(type(input_list[i]) is not list):\n                print('error')\n                break\n    if (len(input_list) % 2 == 1):\n        print('error')\n    else:\n        for i in range(len(input_list)):\n            if(type(input_list[i]) is not list):\n                print('error')\n                break\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #import time\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    total_list = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            total_list += 1\n    return total_list\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    def find_pos(arr,x):\n        if arr[0] == x: return 0\n        if arr[0] >= x: return 1\n        if arr[len(arr)-1] < x: return len(arr)\n        else: return len(arr)-1\n    if not arr: return -1\n    start = find_pos(arr,x)\n    return len(arr)-start\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n==0:\n        return -1\n    elif n==1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    else:\n        for i in range(1,n):\n            if arr[i]<arr[i-1]:\n                return i-1\n        return n-1\narr = [0,2,5,3,4,6,1,7,8,9,10]\nx = 4\nlast(arr,x"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return end\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr)-1\n    while right>=left:\n        mid = left + (right-left)//2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    i = n-1\n    j = 0\n    while i>=0 and j < n-1:\n        if arr[i] > arr[j]:\n            if arr[i] > arr[j+1]:\n                arr[i],arr[j+1] = arr[j+1],arr[i]\n                i = i-1\n                j = j-1\n            else:\n                i = i-1\n        else:\n            i = i-1\n    if i>=0:\n        return arr[i]\n    else:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while high >= low:\n        mid = low + (high-low)//2\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return high\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #This is a naive solution, O(n)\n    n = len(arr)\n    left = 0\n    right = n-1\n    \n    #Checks if element is present at left\n    while left <= right:\n        mid = left + (right-left)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid-1\n        elif arr[mid] < x:\n            left = mid+1\n    \n    #We have to go from the right, to the left\n    mid = right\n    while mid-1 >=0:\n        if arr[mid] == x:\n            return mid\n        mid-=1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #initialize return value\n    l = -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-1-arr[::-1].index(x)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?=[b])'\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    st = re.search(r'a\\b', text)\n    return st.group(1)\ndef text_endb_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'b'.\n    '''\n    st = re.search(r'a\\b\\s*', text)\n    return st.group(1)\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'c'.\n    '''\n    st = re.search(r'a\\b\\s*', text)\n    return st.group(1)\ndef text_endc_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'c'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endd(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'd'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*', text)\n    return st.group(1)\ndef text_endd_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'd'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_ende(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'e'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_ende_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'e'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endf(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'f'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_endf_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'f'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endg(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'g'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_endg_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'g'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endh(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'h'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_endh_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'h'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endi(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'i'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_endi_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'i'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endj(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'j'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_endj_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'j'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endk(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'k'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_endk_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'k'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endl(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'l'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_endl_starta(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'l'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*\\s*', text)\n    return st.group(1)\ndef text_starta_endm(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with'm'.\n    '''\n    st = re.search(r'a\\b\\s*\\s*\\s*\\s*\\s*\\s"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # replace the 'a' with 'b'\n    text = text.replace(\"a\",\"b\")\n    # make a regex for all the things that need to be enclosed in 'b'\n    regex = re.compile(r'(b){2}')\n    # find the match\n    match = regex.search(text)\n    # print(match)\n    # if there are matches, write the substring of the matched text\n    if match:\n        print(match.group())\n    # if not, give a warning\n    else:\n        print(\"Error: no b found!\")\n    print(\"----------------------------------------------------------\")\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        else:\n            s += char\n    return s\n    \ndef endb_starta(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, starting with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        elif char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef endb_enda(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, starting with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        elif char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef endb_startb(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        elif char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef endb_endb(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, starting with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        elif char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef start_a_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, beginning with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        else:\n            s += char\n    return s\n    \ndef start_b_a(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, beginning with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef start_a_b_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, starting with 'a', beginning with 'b' and ending with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'a'\n        elif char == 'b':\n            s += 'b'\n        elif char == 'a':\n            s += char\n        else:\n            s += char\n    return s\n    \ndef end_a_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef end_b_a(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, starting with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef end_b_a_a(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, starting with 'a', ending with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'a'\n        elif char == 'a':\n            s += char\n        else:\n            s += char\n    return s\n    \ndef end_a_b_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'b', beginning with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef end_b_a_a(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending with 'a', beginning with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'a'\n        elif char == 'a':\n            s += char\n        else:\n            s += char\n    return s\n    \ndef end_a_b_a_a(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending with 'b', beginning with 'a', and ending with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'a'\n        elif char == 'a':\n            s += char\n        elif char == 'a':\n            s += char\n        else:\n            s += char\n    return s\n    \ndef start_a_b_a_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, beginning with 'b' and ending with 'a' and ending with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        elif char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef start_b_a_b(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by anything, beginning with 'b' and ending with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef start_b_a_b_a(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, beginning with 'b' and ending with 'b' and ending with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'b':\n            s += 'a'\n        elif char == 'b':\n            s += char\n        else:\n            s += char\n    return s\n    \ndef end_b_a_b(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending with 'b'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'b':\n            s += 'a'\n        else:\n            s += char\n    return s\n    \ndef end_b_a_b_a(text):\n    '''\n    Write a function that matches a string that has 'b' followed by anything, ending with 'b', beginning with 'a' and ending with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'b':\n            s += 'a'\n        elif char == 'b':\n            s += char\n        elif char == 'a':\n            s += char\n        else:\n            s += char\n    return s\n    \ndef end_a_b_a_a(text):\n    '''\n    Write a function that matches a string that has 'a' followed by anything, ending with 'a', beginning with 'b', and ending with 'a'.\n    '''\n    s = ''\n    for char in text:\n        if char == 'a':\n            s += 'b'\n        elif char == 'a':\n            s += char\n        elif char == 'b':\n            s += char\n        else:\n            s += char\n    return s\n    \ndef end_b_a_a_a(text):\n    '''"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    if re.search(r'a\\b', text):\n        start = re.search(r'a\\b', text).start()\n        end = re.search(r'\\b(a|b)', text).end()\n        return text[start:end].replace('\\n','')\n    else:\n        return text\ndef text_a_b_startendb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', starting with 'a' and ending with 'b'.\n    '''\n    if re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text):\n        start = re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).start()\n        end = re.search(r'(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).end()\n        return text[start:end]\n    else:\n        return text\ndef text_starta_enda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    if re.search(r'a\\b', text):\n        start = re.search(r'a\\b', text).start()\n        end = re.search(r'\\b(a|b)', text).end()\n        return text[start:end].replace('\\n','')\n    else:\n        return text\ndef text_a_b_startenda(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a', starting with 'a' and ending with 'a'.\n    '''\n    if re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text):\n        start = re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).start()\n        end = re.search(r'(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).end()\n        return text[start:end]\n    else:\n        return text\ndef text_starta_enda_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    if re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text):\n        start = re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).start()\n        end = re.search(r'(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).end()\n        return text[start:end]\n    else:\n        return text\ndef text_a_b_startenda_b(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a', starting with 'a' and ending with 'b'.\n    '''\n    if re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text):\n        start = re.search(r'a\\b(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).start()\n        end = re.search(r'(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)', text).end()\n        return text[start:end]\n    else:\n        return text\ndef text_starta_enda_d(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'a'.\n    '''\n    if re.search(r'a\\b(d|e|f|g|h|i|j|k"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    m = re.search(r'\\b([a-zA-Z]\\w*)\\b', text)\n    return m.group(1) + 'ing' + m.group(1) + 'n' + m.group(2) + 'ing' + m.group(2)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_re = re.compile('\\w\\w\\w+\\w\\w\\w+\\w\\w+\\w\\w\\w+\\w')\n    matches = text_re.findall(text)\n    for i in range(len(matches)):\n        matches[i] = matches[i][:-1]\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_end_regex = re.compile(r'a\\b')\n    return start_end_regex.search(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #print('%s' % text)\n    #if 'a' in text:\n    #    print('Match 1')\n    #elif 'b' in text:\n    #    print('Match 2')\n    #else:\n    #    print('No match')\n    #print(text)\n    \n    pattern = re.compile('a(b)')\n    matches = pattern.findall(text)\n    #print(matches)\n    #print(len(matches))\n    #print('---------------------------------')\n    if len(matches) == 1:\n        #print('Match 1')\n        #print('a: %s' % matches[0])\n        #print('b: %s' % matches[0][-1])\n        #print('---------------------------------')\n        #print('a[-1] = %s' % matches[0][-1])\n        #print('b[-1] = %s' % matches[0][-1])\n        if matches[0][-1] == 'b':\n            #print('b[-1] = %s' % matches[0][-1])\n            return True\n    #elif len(matches) > 1:\n    #    #print('Match 2')\n    #    #print('a: %s' % matches[0])\n    #    #print('b: %s' % matches[0][-1])\n    #    #print('b: %s' % matches[0][-1])\n    #    for m in matches:\n    #        if m[-1] == 'b':\n    #            return True\n    #    return False\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern_starta_endb = r'\\b(a)(b)\\b'\n    result = re.findall(pattern_starta_endb, text)\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    print(sum(dict.values()))\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total = total + value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    if type(dict) is dict:\n        for key in dict.keys():\n            total_sum += dict[key]\n        return total_sum\n    return dict\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += key + value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Create an empty dictionary\n    output = {}\n    # Loop through the dictionary\n    for item in dict:\n        # Add item to the dictionary\n        output[item] = dict[item]\n    # Return the dictionary\n    return output"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(l, r + 1):\n        if i % 2 == 1:\n            s = s + i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(l,r+1): \n        if i%2==0: \n            sum+=i \n    return sum \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if (l % 2 == 1) and (r % 2 == 0):\n            sum = sum + l\n        elif (l % 2 == 0) and (r % 2 == 1):\n            sum = sum + r\n        elif (l % 2 == 1) and (r % 2!= 0):\n            sum = sum + (r - l)\n        l = l + 1\n        r = r - 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n,0,-1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n%2==0:\n        return n+sum_odd(n-1)\n    else:\n        return sum_odd(n-1)+sum_odd(n-2)\n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(l, r+1):\n        if i%2 == 1:\n            s = s + i\n    return s\n    \nprint(sum_odd(100))"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([i for i in range(l,r) if i % 2!= 0]) \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for n in range(l, r+1):\n        if n % 2!= 0:\n            sum = sum + n\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0 \n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d)&(n<<(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    #comprehension\n    if n==0: return 0\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 4\n    if n==4: return 6\n    if n==5: return 8\n    if n==6: return 10\n    if n==7: return 12\n    if n==8: return 16\n    if n==9: return 20\n    if n==10: return 24\n    if n==11: return 28\n    if n==12: return 32\n    if n==13: return 40\n    if n==14: return 48\n    if n==15: return 56\n    if n==16: return 64\n    if n==17: return 72\n    if n==18: return 80\n    if n==19: return 88\n    if n==20: return 96\n    if n==21: return 104\n    if n==22: return 112\n    if n==23: return 120\n    if n==24: return 128\n    if n==25: return 136\n    if n==26: return 144\n    if n==27: return 152\n    if n==28: return 160\n    if n==29: return 168\n    if n==30: return 176\n    if n==31: return 184\n    if n==32: return 192\n    if n==33: return 200\n    if n==34: return 208\n    if n==35: return 216\n    if n==36: return 224\n    if n==37: return 232\n    if n==38: return 240\n    if n==39: return 248\n    if n==40: return 256\n    if n==41: return 264\n    if n==42: return 272\n    if n==43: return 280\n    if n==44: return 288\n    if n==45: return 296\n    if n==46: return 304\n    if n==47: return 312\n    if n==48: return 320\n    if n==49: return 328\n    if n==50: return 336\n    if n==51: return 344\n    if n==52: return 352\n    if n==53: return 360\n    if n==54: return 368\n    if n==55: return 376\n    if n==56: return 384\n    if n==57: return 392\n    if n==58: return 400\n    if n==59: return 408\n    if n==60: return 416\n    if n==61: return 440\n    if n==62: return 448\n    if n==63: return 456\n    if n==64: return 464\n    if n==65: return 472\n    if n==66: return 480\n    if n==67: return 488\n    if n==68: return 496\n    if n==69: return 504\n    if n==70: return 512\n    if n==71: return 520\n    if n==72: return 528\n    if n==73: return 536\n    if n==74: return 544\n    if n==75: return 552\n    if n==76: return 560\n    if n==77: return 568\n    if n==78: return 576\n    if n==79: return 584\n    if n==80: return 592\n    if n==81: return 600\n    if n==82: return 608\n    if n==83: return 616\n    if n==84: return 624\n    if n==85: return 632\n    if n==86: return 640\n    if n==87: return 648\n    if n==88: return 656\n    if n==89: return 664\n    if n==90: return 672\n    if n==91: return 680\n    if n==92: return 688\n    if n==93: return 696\n    if n==94: return 704\n    if n==95: return 712\n    if n==96: return 720\n    if n==97: return 728\n    if n==98: return 736\n    if n==99: return 744\n    if n==100: return 752\n    if n==101: return 760\n    if n==102: return 768\n    if n==103: return 776\n    if n==104: return 784\n    if n==105: return 792\n    if n==106: return 800\n    if n==107: return 808\n    if n==108: return 816\n    if n==109: return 824\n    if n==110: return 832\n    if n==111: return 840\n    if n==112: return 848\n    if n==113: return 856\n    if n==114: return 864\n    if n==115: return 872\n    if n==116: return 880\n    if n==117: return 888\n    if n==118: return 906\n    if n==119: return 912\n    if n==120: return 920\n    if n==121: return 928\n    if n==122: return 936\n    if n==123: return 944\n    if n==124: return 952\n    if n==125: return 960\n    if n==126: return 968\n    if n==127: return 976\n    if n==128: return 984\n    if n==129: return 992\n    if n==130: return 1000\n    if n==131: return 1028\n    if n==132: return 1036\n    if n==133: return 1044\n    if n==134: return 1052\n    if n==135: return 1060\n    if n==136: return 1078\n    if n==137: return 1086\n    if n==138: return 1094\n    if n==139: return 1114\n    if n==140: return 1120\n    if n==141: return 1138\n    if n==142: return 1146\n    if n==143: return 1154\n    if n==144: return 1162\n    if n==145: return 1180\n    if n==146: return 1198\n    if n==147: return 1206\n    if n==148: return 1214\n    if n==149: return 1232\n    if n==150: return 1240\n    if n==151: return 1248\n    if n==152: return 1256\n    if n==153: return 1264\n    if n==154: return 1272\n    if n==155: return 1280\n    if n==156: return 1288\n    if n==157: return 1312\n    if n==158: return 1328\n    if n==159: return 1336\n    if n==160: return 1344\n    if n==161: return 1352\n    if n==162: return 1360\n    if n==163: return 1378\n    if n==164: return 1386\n    if n==165: return 1404\n    if n==166: return 1412\n    if n==167: return 1440\n    if n==168: return 1448\n    if n==169: return 1456\n    if n==170: return 1464\n    if n==171: return 1472\n    if n==172: return 1480\n    if n==173: return 1488\n    if n==174: return 1512\n    if n==175: return 1528\n    if n==176: return 1536\n    if n==177: return 1544\n    if n==178: return 1552\n    if n==179: return 1560\n    if n==180: return 1578\n    if n==181: return 1586\n    if n==182: return 1594\n    if n==183: return 1602\n    if n==184: return 1620\n    if n==185: return 1638\n    if n==186: return 1646\n    if n==187: return 1654\n    if n==188: return 1662\n    if n==189: return 1680\n    if n==190: return 1706\n    if n==191: return 1714\n    if n==192: return 1732\n    if n==193: return 1740\n    if n==194: return 1748\n    if n==195: return 1756\n    if n==196: return 1764\n    if n==197: return 1772\n    if n==198: return 1780\n    if n==199: return 1788\n    if n==200: return 1806\n    if n==201: return 1814\n    if n==202: return 1832\n    if n==203: return 1840\n    if n==204: return 1848\n    if n==205: return 1856\n    if n==206: return 1864\n    if n="
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    for i in range(n):\n        temp = n & (n - 1) # n =  2^31 -1\n        n >>= 1 # n =  2^32 -1\n        # The result will be  0b1001000000\n        n |= temp # n =  2^32 -1\n    for i in range(d):\n        n |= (n << 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    res = 0\n    while n:\n        res += n&1\n        n >>= 1\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    i = n>>d\n    j = i << d\n    return(i|j)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    num = bin(n)[2:]\n    num = num[::-1]\n    return int(num,2)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Can't understand the trick...\n    n = n - 1\n    d = (d-1) % 32\n    n = n + 1\n    d = d % 32\n    return n,d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    t1=[]\n    t2=[]\n    for i in range(d,0,-1):\n        t1.append(n%(2**i))\n        n//=(2**i)\n    for i in range(d,0,-1):\n        t2.append(n%(2**i))\n        n//=(2**i)\n    for i in range(0,d):\n        if t1[i] == t2[i]:\n            pass\n        else:\n            t1[i] = -t1[i]\n            t2[i] = -t2[i]\n    for i in range(0,d):\n        if t1[i] == t2[i]:\n            pass\n        else:\n            t1[i] = -t1[i]\n            t2[i] = -t2[i]\n    for i in range(0,d):\n        if t1[i] == t2[i]:\n            pass\n        else:\n            t1[i] = -t1[i]\n            t2[i] = -t2[i]\n    return t1,t2\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = (n & (2 ** d))\n    n = n ^ l\n    l = l << d\n    n = n | l\n    return n\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = '\\s+'\n    return re.sub(pattern, '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\ndef remove_number_from_string(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\d+', '', text)\ndef remove_period(text):\n    '''\n    Write a function that removes any period from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_percent(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\%', '', text)\ndef remove_end_of_string2(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_number_from_string2(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\d+', '', text)\ndef remove_percent2(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\%', '', text)\ndef remove_period2(text):\n    '''\n    Write a function that removes any number from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string3(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string4(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string5(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string6(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string7(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string8(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string9(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string10(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string11(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string12(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string13(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string14(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string15(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string16(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string17(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string18(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string19(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string20(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string21(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string22(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string23(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string24(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string25(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string26(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string27(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string28(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string29(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string30(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string31(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string32(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string33(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string34(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string35(text):\n    '''\n    Write a function that removes the ending dot from a string.\n    '''\n    return re.sub('\\.', '', text)\ndef remove_end_of_string36(text):\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\ndef remove_all_unnecessary_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\ndef remove_not_a_number(text):\n    '''\n    Write a function to remove all non-numeric characters from a string.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_tokens(text):\n    '''\n    Write a function to remove all tokens from a string.\n    '''\n    return re.sub('[\\W_]','', text)\ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub('[^0-9]', '', text)\ndef remove_digit_numbers(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub('[0-9]', '', text)\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub('[0-9]', '', text)\ndef remove_not_alpha(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    return re.sub('[^a-zA-Z]', '', text)\ndef remove_all_caps(text):\n    '''\n    Write a function to remove all capital letters from a string.\n    '''\n    return re.sub('[A-Z]','', text)\ndef remove_all_words(text):\n    '''\n    Write a function to remove all words from a string.\n    '''\n    return re.sub('\\w*\\s\\w*','', text)\ndef remove_double_dash(text):\n    '''\n    Write a function to remove double dash from a string.\n    '''\n    return re.sub('--','', text)\ndef remove_end_of_line(text):\n    '''\n    Write a function to remove end of line characters from a string.\n    '''\n    return re.sub('[\\r\\n]+','', text)\ndef remove_eol(text):\n    '''\n    Write a function to remove end of line characters from a string.\n    '''\n    return re.sub('[\\r\\n]+','', text)\ndef remove_extra_spaces(text):\n    '''\n    Write a function to remove extra spaces from a string.\n    '''\n    return re.sub('\\s+','', text)\ndef remove_all_special_characters(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text)\ndef remove_capital_letters(text):\n    '''\n    Write a function to remove all capital letters from a string.\n    '''\n    return re.sub('[A-Z]','', text)\ndef remove_not_capital_letters(text):\n    '''\n    Write a function to remove all non-capital letters from a string.\n    '''\n    return re.sub('[^A-Z]','', text)\ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub('[\\n\\r\\t\\v]+','', text)\ndef remove_single_dash(text):\n    '''\n    Write a function to remove single dash from a string.\n    '''\n    return re.sub('--','', text)\ndef remove_tokens(text):\n    '''\n    Write a function to remove all tokens from a string.\n    '''\n    return re.sub('[\\W_]+','', text)\ndef remove_all_letters(text):\n    '''\n    Write a function to remove all letters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]','', text)\ndef remove_dashes(text):\n    '''\n    Write a function to remove all dashes from a string.\n    '''\n    return re.sub('-','', text)\ndef remove_underscores(text):\n    '''\n    Write a function to remove all underscores from a string.\n    '''\n    return re.sub('_','', text)\ndef remove_number(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub('\\d+', '', text)\ndef remove_upper_case(text):\n    '''\n    Write a function to remove all uppercase letters from a string.\n    '''\n    return re.sub('[A-Z]','', text)\ndef remove_lower_case(text):\n    '''\n    Write a function to remove all lowercase letters from a string.\n    '''\n    return re.sub('[a-z]','', text)\ndef remove_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text)\ndef remove_punctuation_tokens(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    return re.sub('[\\W_]+','', text)\ndef remove_empty_lines(text):\n    '''\n    Write a function to remove all empty lines from a string.\n    '''\n    return re.sub('\\n','', text)\ndef remove_other_special_characters(text):\n    '''\n    Write a function to remove all other special characters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9_]','', text)\ndef remove_other_symbols(text):\n    '''\n    Write a function to remove all other symbols from a string.\n    '''\n    return re.sub('[_]+','', text)\ndef remove_other_digits(text):\n    '''\n    Write a function to remove all other digits from a string.\n    '''\n    return re.sub('[0-9]+','', text)\ndef remove_other_numbers(text):\n    '''\n    Write a function to remove all other numbers from a string.\n    '''\n    return re.sub('[0-9]+','', text)\ndef remove_other_words(text):\n    '''\n    Write a function to remove all other words from a string.\n    '''\n    return re.sub('[a-zA-Z]+','', text)\ndef remove_other_letters(text):\n    '''\n    Write a function to remove all other letters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text)\ndef remove_other_symbols(text):\n    '''\n    Write a function to remove all other symbols from a string.\n    '''\n    return re.sub('[^0-9a-zA-Z_]+','', text)\ndef remove_other_digits(text):\n    '''\n    Write a function to remove all other digits from a string.\n    '''\n    return re.sub('[0-9]+','', text)\ndef remove_other_numbers(text):\n    '''\n    Write a function to remove all other numbers from a string.\n    '''\n    return re.sub('[0-9]+','', text)\ndef remove_other_words(text):\n    '''\n    Write a function to remove all other words from a string.\n    '''\n    return re.sub('[a-zA-Z]+','', text)\ndef remove_other_letters(text):\n    '''\n    Write a function to remove all other letters from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]+','', text)\ndef remove_tokens_end_of"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+',' ',text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text).strip().upper()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \" \", text)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert(x>0 and x<=1)\n    assert(y>0 and y<=1)\n    assert(z>0 and z<=1)\n    ans = 0\n    if (x==y==z):\n        ans = 1\n    else:\n        ans = 0\n    return ans\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    s = 0\n    for i in range(x):\n        for j in range(y):\n            if x % i == 0 and y % j == 0:\n                s += 1\n    return s\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=int(x)\n    y=int(y)\n    z=int(z)\n    \n    return x+y+z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x == y, 'x!= y'\n    assert x == z, 'x == z'\n    assert z == y, 'z == y'\n    assert z == z, 'z == z'\n    assert x == z, 'x == z'\n    assert x == x, 'x == x'\n    assert x == z, 'x == z'\n    assert z == x, 'z == x'\n    assert z == z, 'z == z'\n    assert x == z, 'x == z'\n    assert x == x, 'x == x'\n    assert x == x, 'x == x'\n    assert x == z, 'x == z'\n    assert z == x, 'x == x'\n    assert z == z, 'x == x'\n    assert x == x, 'x == x'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert z == x, 'x == z'\n    assert z == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == x, 'x == x'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert z == x, 'x == z'\n    assert z == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert z == x, 'x == z'\n    assert z == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert z == x, 'x == z'\n    assert z == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == x, 'x == y'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert z == x, 'x == z'\n    assert z == z, 'x == z'\n    assert z == z, 'x == z'\n    assert z == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == x, 'x == y'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == x, 'x == y'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == x, 'x == x'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == x, 'x == x'\n    assert x == x, 'x == x'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == x, 'x == x'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == z, 'x == z'\n    assert x == z, 'x == z'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert x == y, 'x == y'\n    assert y == x, 'x == y'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == x, 'x == y'\n    assert y == x, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == z, 'x == z'\n    assert y == z, 'x == z'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y == y, 'x == y'\n    assert y ="
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    z=z+1\n    return z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x-y\n    b = y-z\n    c = z-x\n    if a==b==c:\n        return True\n    else:\n        return False\ndef add(x,y):\n    '''\n    Write a python function to add two numbers x and y using addition.\n    '''\n    return x+y\ndef sub(x,y):\n    '''\n    Write a python function to subtract two numbers x and y using subtraction.\n    '''\n    return x-y\ndef mul(x,y):\n    '''\n    Write a python function to multiply two numbers x and y using multiplication.\n    '''\n    return x*y\ndef div(x,y):\n    '''\n    Write a python function to divide two numbers x and y using division.\n    '''\n    return x/y\ndef mod(x,y):\n    '''\n    Write a python function to find modulo of two given numbers.\n    '''\n    return x%y\ndef pow(x,y):\n    '''\n    Write a python function to find power of two given number.\n    '''\n    return x**y\ndef divmod(x,y):\n    '''\n    Write a python function to find the divisors of two given numbers.\n    '''\n    return div(x,y),div(y,x)\ndef sqr(x):\n    '''\n    Write a python function to square an integer.\n    '''\n    return x**2\ndef sqrt(x):\n    '''\n    Write a python function to square the square root of an integer.\n    '''\n    return x**0.5\ndef abs(x):\n    '''\n    Write a python function to find the absolute value of an integer.\n    '''\n    return abs(x)\ndef trunc(x):\n    '''\n    Write a python function to find the truncation of an integer.\n    '''\n    return x if x>0 else 0\ndef modulo(x,y):\n    '''\n    Write a python function to find the modulo of two given numbers.\n    '''\n    return x%y\ndef powmod(x,y):\n    '''\n    Write a python function to find the power of two of two given numbers.\n    '''\n    return x**"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,len(x)):\n        for j in range(0,len(y)):\n            for k in range(0,len(z)):\n                if x[i] == y[j] and y[j] == z[k]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    x=str(x)\n    y=str(y)\n    z=str(z)\n    for i in range(0,3):\n        if int(x)==int(y) and int(z)==int(x):\n            count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # x = 3\n    # y = 4\n    # z = 5\n    # the result of the function should be the same with the expected result\n    result = x == y and x == z\n    print(result)\n    assert result, \"Result of the function is not equal to expected result\"\n    return result\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr_len = len(arr)\n    rotation = arr_len\n    \n    for i in range(arr_len):\n        rotation -= 1\n        if arr[rotation] < arr[rotation+1]:\n            arr[rotation], arr[rotation+1] = arr[rotation+1], arr[rotation]\n        else:\n            rotation += 1\n    return arr\n    \ndef main():\n    arr = [3, 4, 5, 1, 2]\n    print(count_rotation(arr))\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i]!= arr[i+1]:\n    #         count += 1\n    # return count\n    i = 0\n    while i < len(arr):\n        if arr[i]!= arr[i+1]:\n            i += 1\n        if arr[i] == arr[i+1]:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if arr[0] > arr[1]:\n        arr.sort()\n        return count_rotation(arr[2:]) + count_rotation(arr[:2])\n    if arr[0] < arr[1]:\n        arr.sort()\n        return count_rotation(arr[:2]) + count_rotation(arr[2:])\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    else:\n        rotations=0\n        for i in range(0,n):\n            rotations=rotations+count_rotation(arr[i:n:2])\n        return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    l = len(arr)\n    rotations = 0\n    \n    def rotation(arr,n):\n        global rotations\n        \n        for i in range(n):\n            rotations += 1\n            arr[i], arr[l-i-1] = arr[l-i-1], arr[i]\n        \n    for i in range(l-1):\n        rotation(arr, i)\n        rotation(arr,i+1)\n    \n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n    \n    \ndef find_min(arr):   \n    '''\n    Write a python function to return the minimum element in an unsorted array.\n    '''\n    min_num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min_num:\n            min_num = arr[i]\n    return min_num\n    \n    \ndef find_max(arr):   \n    '''\n    Write a python function to return the maximum element in an unsorted array.\n    '''\n    max_num = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\n    \n    \ndef find_median(arr):   \n    '''\n    Write a python function to return the median of an unsorted array.\n    '''\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        print(sum(arr[mid])/2)\n    else:\n        print(arr[mid])\n    \n    \ndef find_mean(arr):   \n    '''\n    Write a python function to return the mean of an unsorted array.\n    '''\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        sum = sum(arr[mid])/2\n    else:\n        sum = arr[mid]\n    return sum\n    \n    \ndef find_mode(arr):   \n    '''\n    Write a python function to return the index of the mode.\n    '''\n    mode_idx = arr.index(max(arr))\n    return mode_idx\n    \n    \ndef find_variance(arr):   \n    '''\n    Write a python function to return the variance of an unsorted array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    mean = sum/len(arr)\n    var = 0\n    for i in range(0, len(arr)):\n        var += (arr[i] - mean)**2\n    return var/len(arr)\n    \n    \ndef find_stdev(arr):   \n    '''\n    Write a python function to return the standard deviation of an unsorted array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    mean = sum/len(arr)\n    stdev = 0\n    for i in range(0, len(arr)):\n        stdev += (arr[i] - mean)**2\n    return stdev/len(arr)\n    \n    \ndef find_kurtosis(arr):   \n    '''\n    Write a python function to return the kurtosis of an unsorted array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    mean = sum/len(arr)\n    skewness = 0\n    for i in range(0, len(arr)):\n        skewness += arr[i]**2\n    kurtosis = skewness/len(arr)\n    return kurtosis\n    \n    \ndef find_sample_mean(arr):   \n    '''\n    Write a python function to return the sample mean of an unsorted array.\n    '''\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        sum = arr[mid] + arr[mid]\n    else:\n        sum = arr[mid]\n    return sum/2\n    \n    \ndef find_sample_variance(arr):   \n    '''\n    Write a python function to return the sample variance of an unsorted array.\n    '''\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        var = (arr[mid] - arr[mid-1])**2\n    else:\n        var = (arr[mid] - arr[mid-1])**2\n    return var\n    \n    \ndef find_standard_deviation(arr):   \n    '''\n    Write a python function to return the standard deviation of an unsorted array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    mean = sum/len(arr)\n    stdev = 0\n    for i in range(0, len(arr)):\n        stdev += (arr[i] - mean)**2\n    return stdev/len(arr)\n    \n    \ndef find_skewness(arr):   \n    '''\n    Write a python function to return the skewness of an unsorted array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    mean = sum/len(arr)\n    skewness = 0\n    for i in range(0, len(arr)):\n        skewness += (arr[i] - mean)**3\n    kurtosis = skewness/len(arr)\n    return kurtosis\n    \n    \ndef find_smoothness(arr):   \n    '''\n    Write a python function to return the smoothness of an unsorted array.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        sum += arr[i]\n    mean = sum/len(arr)\n    smoothness = 0\n    for i in range(0, len(arr)):\n        smoothness += (arr[i] - mean)**4\n    return smoothness/len(arr)\n    \n    \ndef find_mode_index(arr):   \n    '''\n    Write a python function to return the index of the mode.\n    '''\n    mode_idx = arr.index(max(arr))\n    return mode_idx\n    \n    \ndef find_median_index(arr):   \n    '''\n    Write a python function to return the index of the median.\n    '''\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        median = arr[mid] + arr[mid]\n    else:\n        median = arr[mid]\n    return median\n    \n    \ndef find_mode_index_arr(arr):   \n    '''\n    Write a python function to return the index of the mode.\n    '''\n    mode_idx = arr.index(max(arr))\n    return mode_idx\n    \n    \ndef find_median_index_arr(arr):   \n    '''\n    Write a python function to return the index of the median.\n    '''\n    mid = len(arr)//2\n    if len(arr)%2 == 0:\n        median = arr[mid] + arr[mid]\n    else:\n        median = arr[mid]\n    return median\n    \n    \ndef find_mode_index_arr_arr(arr):   \n    '''\n    Write a python function to return the index of the mode.\n    '''\n    mode_idx = arr.index(max(arr))\n    return mode_idx\n    \n    \ndef find_mean_index(arr):   \n    '''\n    Write a python function to return the index of the mean.\n    '''\n    mean_idx = arr.index(min(arr))\n    return mean_idx\n    \n    \ndef find_mode_index_arr_arr(arr):   \n    '''\n    Write a python function to return the index of the mode.\n    '''\n    mode_idx = arr.index(min(arr))\n    return mode_idx\n    \n    \ndef find_mean_index_arr_arr(arr):   \n    '''\n    Write a python function to return the index of the mean.\n    '''\n    mean_idx = arr.index(max(arr))\n    return mean_idx\n    \n    \ndef find_median_index_arr_arr(arr):   \n    ''"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    counter = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    # 1) Base Case\n    if not arr:\n        return count\n    # 2) Recursive case\n    else:\n        for i in range(len(arr)):\n            if arr[i] < arr[i-1]:\n                count += 1\n        return count\n    \n    # 3) Empty Case\n    if not arr:\n        return count\n    # 4) Conquer Case\n    else:\n        count += count_rotation(arr[1:len(arr)])\n        return count\n        \ndef print_helper(arr):\n    '''\n    Use a list for debug\n    '''\n    for x in arr:\n        print(x, end=' ')\n    print()\n    \ndef print_arr(arr):\n    '''\n    Use a list for debug\n    '''\n    for x in arr:\n        print(x, end=' ')\n    print()\n        \ndef find_missing(arr):\n    '''\n    Use a list for debug\n    '''\n    for x in arr:\n        if x not in arr:\n            print(x, end=' ')\n    print()\n    \ndef print_missing(arr):\n    '''\n    Use a list for debug\n    '''\n    for x in arr:\n        print(x, end=' ')\n    print()\n        \ndef find_missing_idx(arr):\n    '''\n    Use a list for debug\n    '''\n    for x in arr:\n        if x not in arr:\n            print(x, end=' ')\n    print()\n            \ndef sorted_arr_helper(arr):\n    '''\n    Use a list for debug\n    '''\n    for x in sorted(arr):\n        print(x, end=' ')\n    print()\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations=0\n    i=0\n    while i<len(arr):\n        if arr[i]<arr[i+1]:\n            rotations+=1\n            arr[i],arr[i+1]=arr[i+1],arr[i]\n        else:\n            i+=1\n    return rotations\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 or n == 2:\n        return True\n    if n < 1 or n % 2 == 0:\n        return False\n    square_root = int(math.sqrt(n))\n    if square_root ** 2 == n:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    return (sqrt**2) == n\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 : return True\n    if n == 1 : return False\n    if n == 2 : return True if n == n * n else False\n    if n % 2 == 0 : return False\n    if n == 3 : return True if (n * n + 1) % 10 == 0 else False\n    return is_perfect_square(n-1)\n    \n    \ndef count_down_triangle(n) :\n    '''\n    This function returns the triangle number of n.\n    '''\n    if n == 0 : return 0\n    if n == 1 : return 1\n    if n == 2 : return 1\n    if n == 3 : return 2\n    if n == 4 : return 3\n    if n == 5 : return 4\n    if n == 6 : return 5\n    if n == 7 : return 6\n    if n == 8 : return 7\n    if n == 9 : return 8\n    if n == 10 : return 9\n    if n == 11 : return 10\n    if n == 12 : return 11\n    if n == 13 : return 12\n    if n == 14 : return 13\n    if n == 15 : return 14\n    if n == 16 : return 15\n    if n == 17 : return 16\n    if n == 18 : return 17\n    if n == 19 : return 18\n    if n == 20 : return 19\n    if n == 21 : return 20\n    if n == 22 : return 21\n    if n == 23 : return 22\n    if n == 24 : return 23\n    if n == 25 : return 24\n    if n == 26 : return 25\n    if n == 27 : return 26\n    if n == 28 : return 27\n    if n == 29 : return 28\n    if n == 30 : return 29\n    if n == 31 : return 30\n    if n == 32 : return 31\n    if n == 33 : return 32\n    if n == 34 : return 33\n    if n == 35 : return 34\n    if n == 36 : return 35\n    if n == 37 : return 36\n    if n == 38 : return 37\n    if n == 39 : return 38\n    if n == 40 : return 39\n    if n == 41 : return 40\n    if n == 42 : return 41\n    if n == 43 : return 42\n    if n == 44 : return 43\n    if n == 45 : return 44\n    if n == 46 : return 45\n    if n == 47 : return 46\n    if n == 48 : return 47\n    if n == 49 : return 48\n    if n == 50 : return 49\n    if n == 51 : return 50\n    if n == 52 : return 51\n    if n == 53 : return 52\n    if n == 54 : return 53\n    if n == 55 : return 54\n    if n == 56 : return 55\n    if n == 57 : return 56\n    if n == 58 : return 57\n    if n == 59 : return 58\n    if n == 60 : return 59\n    if n == 61 : return 60\n    if n == 62 : return 61\n    if n == 63 : return 62\n    if n == 64 : return 63\n    if n == 65 : return 64\n    if n == 66 : return 65\n    if n == 67 : return 66\n    if n == 68 : return 67\n    if n == 69 : return 68\n    if n == 70 : return 69\n    if n == 71 : return 70\n    if n == 72 : return 71\n    if n == 73 : return 72\n    if n == 74 : return 73\n    if n == 75 : return 74\n    if n == 76 : return 75\n    if n == 77 : return 76\n    if n == 78 : return 77\n    if n == 79 : return 78\n    if n == 80 : return 79\n    if n == 81 : return 80\n    if n == 82 : return 81\n    if n == 83 : return 82\n    if n == 84 : return 83\n    if n == 85 : return 84\n    if n == 86 : return 85\n    if n == 87 : return 86\n    if n == 88 : return 87\n    if n == 89 : return 88\n    if n == 90 : return 89\n    if n == 91 : return 90\n    if n == 92 : return 91\n    if n == 93 : return 92\n    if n == 94 : return 93\n    if n == 95 : return 94\n    if n == 96 : return 95\n    if n == 97 : return 96\n    if n == 98 : return 97\n    if n == 99 : return 98\n    if n == 100 : return 99\n    if n == 101 : return 100\n    if n == 102 : return 101\n    if n == 103 : return 102\n    if n == 104 : return 103\n    if n == 105 : return 104\n    if n == 106 : return 105\n    if n == 107 : return 106\n    if n == 108 : return 107\n    if n == 109 : return 108\n    if n == 110 : return 109\n    if n == 111 : return 110\n    if n == 112 : return 111\n    if n == 113 : return 112\n    if n == 114 : return 113\n    if n == 115 : return 114\n    if n == 116 : return 115\n    if n == 117 : return 116\n    if n == 118 : return 117\n    if n == 119 : return 118\n    if n == 120 : return 119\n    if n == 121 : return 120\n    if n == 122 : return 121\n    if n == 123 : return 122\n    if n == 124 : return 123\n    if n == 125 : return 124\n    if n == 126 : return 125\n    if n == 127 : return 126\n    if n == 128 : return 127\n    if n == 129 : return 128\n    if n == 130 : return 129\n    if n == 131 : return 130\n    if n == 132 : return 131\n    if n == 133 : return 132\n    if n == 134 : return 133\n    if n == 135 : return 134\n    if n == 136 : return 135\n    if n == 137 : return 136\n    if n == 138 : return 137\n    if n == 139 : return 138\n    if n == 140 : return 139\n    if n == 141 : return 140\n    if n == 142 : return 141\n    if n == 143 : return 142\n    if n == 144 : return 143\n    if n == 145 : return 144\n    if n == 146 : return 145\n    if n == 147 : return 146\n    if n == 148 : return 147\n    if n == 149 : return 148\n    if n == 150 : return 149\n    if n == 151 : return 150\n    if n == 152 : return 151\n    if n == 153 : return 152\n    if n == 154 : return 153\n    if n == 155 : return 154\n    if n == 156 : return 155\n    if n == 157 : return 156\n    if n == 158 : return 157\n    if n == 159 : return 158\n    if n == 160 : return 159\n    if n == 161 : return 160\n    if n == 162 : return 161\n    if n == 163 : return 162\n    if n == 164 : return 163\n    if n == 165 : return 164\n    if n == 166 : return 165\n    if n == 167 : return 166\n    if n == 168 : return 167\n    if n == 169 : return 168\n    if n == 170 : return 169\n    if n == 171 : return 170\n    if n == 172 : return 171\n    if n == 173 : return 172\n    if n == 174 : return 173\n    if n == 175 : return 174\n    if n == 176 : return 175\n    if n == 177 : return 176\n    if n == 178 : return 177\n    if n == 179 : return 178\n    if n == 180 : return 179\n    if n == 181 : return 180\n    if n == 182 : return 181\n    if n == 183 : return 182\n    if n == 184 : return 183\n    if n == 185 : return 184\n    if n == 186 : return 185\n    if n == 187 : return 186\n    if n == 188 : return 187\n    if n == 189 : return 188\n    if n == 190 : return 189\n    if n == 191 : return 190\n    if n == 192 : return 191\n    if n == 193 : return 192\n    if n == 194 : return 193\n    if n == 195 : return 194\n    if n == 196 : return 195\n    if n == 197 : return 196\n    if n == 198 : return 197\n    if n == 199 : return 198\n    if n == 200 : return 199\n    if n == 201 : return 200\n    if n == 202 : return 201\n    if n == 203 : return 202\n    if n == 204 : return 203\n    if n == 205 : return 204\n    if n == 206 : return 205\n    i"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    temp = n\n    n = temp**2\n    while(n>=1) :\n        if (n%10)==(n%10) :\n            return False\n        n = n//10\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n % 2 == 0 :\n        return False\n    square = int(n ** 0.5)\n    if square ** 2 == n :\n        return True\n    else :\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return n == 0\n    if n == 2 or n == 3:\n        return True\n    if n == 5 or n == 7:\n        return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Time to look at some of the math\n    # I think we need to start by looking at all the squares and then checking if the square is perfect square.\n    if n <= 0 :\n        return False\n    elif n == 1 :\n        return True\n    else :\n        sqrt = int(math.sqrt(n))\n        for i in range(2, int(sqrt**0.5)+1) :\n            if n % i == 0 :\n                return False\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 :\n        return True\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    if n % 2 == 1 :\n        return n == int(n**0.5)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return(n**0.5 == int(n**0.5))\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    if n == 2 or n == 3 :\n        return True\n    if n % 2 == 0 :\n        return False\n    for i in range(3, int(n**0.5)+1, 2) :\n        if n % i == 0 :\n            return False\n    return True\ndef is_prime(n) :\n    '''\n    Write a function that checks whether the given number is a prime or not.\n    '''\n    if n == 1 or n == 2 or n == 3 :\n        return False\n    for i in range(2, int(math.sqrt(n))+1) :\n        if n%i == 0 :\n            return False\n    return True\ndef next_prime(n) :\n    '''\n    Function to find next prime number using recursion.\n    '''\n    if n == 2 :\n        n+=1\n    else :\n        for i in range(3, int(math.sqrt(n))+1, 2) :\n            if n%i == 0 :\n                return n\n        n+=1\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # creating a list to keep the product of numbers \n    even_list = []\n    # for looping through the numbers from 0 to size of array \n    for i in range(0, len(arr)):\n        # adding the product of each number in the array as the value \n        even_list.append(arr[i] * arr[i])\n        # if the product of the elements of the list is even then it won't be even\n        if len(even_list) % 2 == 0: \n            # if the list is even it will return false \n            return False\n    # if it returns false it won't return even list \n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (len(arr)%2==0)\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr[0]==2:\n        return True\n    return False\n    \ndef product_list(arr):\n    '''\n    Use the fact that number of products are even numbers, for each product we have to check whether the product of the products in that product is even or not.\n    '''\n    product=1\n    for i in range(len(arr)):\n        product*=arr[i]\n    \n    if is_product_even(product):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Write your code here\n    even = 0\n    for i in range(len(arr)):\n        even += arr[i]*(2**i)\n    if even % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = len(arr)\n    if n == 1:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            return False\n        \n    return True\n    \nif __name__ == '__main__':\n    arr = [2, 1, 5, 7, 4, 6, 3, 10, 9, 8]\n    print(is_product_even(arr)"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(len(arr)): \n        if arr[i] % 2 == 0: \n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Your code here\n    pass \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)<1: \n        return False\n    return arr[0]%2==0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    if sum % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product%2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # TODO: Write your code here.\n    max_sum = -9999999\n    for i in lists:\n        for j in i:\n            if j > max_sum:\n                max_sum = j\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in range(len(lists[0])):\n        max_list.append([])\n        for j in range(len(lists)):\n            max_list[i].append(max(lists[j][i]))\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for i in range(len(lists)):\n        sum_of_elements = 0\n        for j in lists[i]:\n            sum_of_elements += j\n        if sum_of_elements > max(max_sum_list):\n            max_sum_list = lists[i]\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    lists = [ [int(i) for i in list(input())] for j in range(5)]\n    max_sum = 0\n    for i in range(5):\n        for j in range(5):\n            if i == j:\n                continue\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    for list_item in lists:\n        if len(list_item) > 1:\n            max_sum_list.append(max(list_item))\n        elif len(list_item) == 1:\n            max_sum_list.append(list_item[0])\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    max_list = []\n    for list in lists:\n        sum_list = []\n        for element in list:\n            sum_list.append(element)\n        if not max_sum_list:\n            max_sum_list = sum_list\n        else:\n            max_sum_list = [sum(elem) for elem in zip(max_sum_list, sum_list)]\n        max_list = max(max_list, max_sum_list)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) < 2:\n        return lists\n    else:\n        sorted_list = sorted(lists, reverse=True)\n        sum_of_elements = sorted_list[0]\n        result_list = []\n        for i in range(len(lists)):\n            sum_of_elements += lists[i]\n            if sum_of_elements == sorted_list[0]:\n                result_list.append(lists[i])\n        return result_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) < 1:\n        return lists\n    else:\n        max_sum_list = lists[0]\n        for i in lists:\n            if max_sum_list[0] > i[0] and max_sum_list[1] < i[1]:\n                max_sum_list = i\n        return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    sum_list = []\n    for i in range(len(lists)):\n        sum_list.append(sum(lists[i]))\n        max_list.append(max(sum_list))\n        sum_list = []\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for lst in lists:\n        list_max = max(lst)\n        if list_max not in max_sum:\n            max_sum.append(list_max)\n    return max_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == '':\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_case_index = 0\n    for i in test_str:\n        if i.isupper():\n            upper_case_index += 1\n    return upper_case_index\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def run(arr):\n        min = 0\n        max = 0\n        #print(arr)\n        for i in range(len(arr)):\n            if arr[i].isupper():\n                min += 1\n                #print(arr[i])\n            else:\n                max += 1\n                #print(arr[i])\n        #print(min,max)\n        return max - min\n    #print(test_str)\n    return run(test_str)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_list = []\n    for char in test_str:\n        if char.isupper():\n            uppercase_list.append(char)\n    return max(uppercase_list, key=len)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    num_upper = 0\n    for char in test_str:\n        if char.isupper():\n            num_upper += 1\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if max_count < i:\n                max_count = i\n        else:\n            pass\n    return max_count\n        \ndef run_test(test_str):\n    '''\n    Write a function that returns the length of the longest run of all uppercase characters in test_str.\n    '''\n    \n    return max_run_uppercase(test_str)\n    \n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str[0].isupper():\n        return max(test_str, key=len)\n    else:\n        return max(test_str)\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    print(test_str)\n    string = \"\"\n    for i in test_str:\n        if i.isupper():\n            string += i.lower()\n    print(string)\n    return string.upper()\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    test_str = test_str.lower()\n    #max_run = 0\n    max_run = 0\n    #index = 0\n    for index in range(len(test_str)):\n        if test_str[index].isupper():\n            max_run = max(max_run,index)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return ''.join(sorted(test_str.upper()))\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums)%2==1 else nums[nums[0]]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # find the first odd element\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return 'Not Found'\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[0])\n    elif n % 2 == 1:\n        return nums[0]\n    else:\n        return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    return odd_nums[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 1:\n            print(nums[i])\n            \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 1:\n            print(nums[i])\n            \ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 1:\n            print(nums[i])\n            \ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 1:\n            print(nums[i])\n            \ndef fourth_even(nums):\n    '''\n    Write a python function to find the fourth even number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef fifth_even(nums):\n    '''\n    Write a python function to find the fifth even number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef fifth_odd(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef sixth_odd(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef seventh_odd(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef second_even(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef fifth_even(nums):\n    '''\n    Write a python function to find the fifth even number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef sixth_odd(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef seventh_odd(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef first_odd_even(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef second_odd_even(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef third_odd_even(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef fourth_odd_even(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef fifth_odd_even(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef sixth_odd_even(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef seventh_odd_even(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef first_even_second_odd(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef second_even_third_odd(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef third_odd_fourth_even(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef fourth_odd_fifth_even(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2)!= 0:\n            print(nums[i])\n            \ndef fifth_odd_sixth_even(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if (i % 2) == 0:\n            print(nums[i])\n            \ndef sixth_odd_seventh_even(nums):\n    '''\n    Write a python function to fin"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums == None or len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[0]\n    if len(nums) == 3:\n        return nums[0]\n    if len(nums) == 4:\n        return nums[0]\n    if len(nums) == 5:\n        return nums[0]\n    if len(nums) == 6:\n        return nums[0]\n    if len(nums) == 7:\n        return nums[0]\n    if len(nums) == 8:\n        return nums[0]\n    if len(nums) == 9:\n        return nums[0]\n    if len(nums) == 10:\n        return nums[0]\n    if len(nums) == 11:\n        return nums[0]\n    if len(nums) == 12:\n        return nums[0]\n    if len(nums) == 13:\n        return nums[0]\n    if len(nums) == 14:\n        return nums[0]\n    if len(nums) == 15:\n        return nums[0]\n    if len(nums) == 16:\n        return nums[0]\n    if len(nums) == 17:\n        return nums[0]\n    if len(nums) == 18:\n        return nums[0]\n    if len(nums) == 19:\n        return nums[0]\n    if len(nums) == 20:\n        return nums[0]\n    if len(nums) == 21:\n        return nums[0]\n    if len(nums) == 22:\n        return nums[0]\n    if len(nums) == 23:\n        return nums[0]\n    if len(nums) == 24:\n        return nums[0]\n    if len(nums) == 25:\n        return nums[0]\n    if len(nums) == 26:\n        return nums[0]\n    if len(nums) == 27:\n        return nums[0]\n    if len(nums) == 28:\n        return nums[0]\n    if len(nums) == 29:\n        return nums[0]\n    if len(nums) == 30:\n        return nums[0]\n    if len(nums) == 31:\n        return nums[0]\n    if len(nums) == 32:\n        return nums[0]\n    if len(nums) == 33:\n        return nums[0]\n    if len(nums) == 34:\n        return nums[0]\n    if len(nums) == 35:\n        return nums[0]\n    if len(nums) == 36:\n        return nums[0]\n    if len(nums) == 37:\n        return nums[0]\n    if len(nums) == 38:\n        return nums[0]\n    if len(nums) == 39:\n        return nums[0]\n    if len(nums) == 40:\n        return nums[0]\n    if len(nums) == 41:\n        return nums[0]\n    if len(nums) == 42:\n        return nums[0]\n    if len(nums) == 43:\n        return nums[0]\n    if len(nums) == 44:\n        return nums[0]\n    if len(nums) == 45:\n        return nums[0]\n    if len(nums) == 46:\n        return nums[0]\n    if len(nums) == 47:\n        return nums[0]\n    if len(nums) == 48:\n        return nums[0]\n    if len(nums) == 49:\n        return nums[0]\n    if len(nums) == 50:\n        return nums[0]\n    if len(nums) == 51:\n        return nums[0]\n    if len(nums) == 52:\n        return nums[0]\n    if len(nums) == 53:\n        return nums[0]\n    if len(nums) == 54:\n        return nums[0]\n    if len(nums) == 55:\n        return nums[0]\n    if len(nums) == 56:\n        return nums[0]\n    if len(nums) == 57:\n        return nums[0]\n    if len(nums) == 58:\n        return nums[0]\n    if len(nums) == 59:\n        return nums[0]\n    if len(nums) == 60:\n        return nums[0]\n    if len(nums) == 61:\n        return nums[0]\n    if len(nums) == 62:\n        return nums[0]\n    if len(nums) == 63:\n        return nums[0]\n    if len(nums) == 64:\n        return nums[0]\n    if len(nums) == 65:\n        return nums[0]\n    if len(nums) == 66:\n        return nums[0]\n    if len(nums) == 67:\n        return nums[0]\n    if len(nums) == 68:\n        return nums[0]\n    if len(nums) == 69:\n        return nums[0]\n    if len(nums) == 70:\n        return nums[0]\n    if len(nums) == 71:\n        return nums[0]\n    if len(nums) == 72:\n        return nums[0]\n    if len(nums) == 73:\n        return nums[0]\n    if len(nums) == 74:\n        return nums[0]\n    if len(nums) == 75:\n        return nums[0]\n    if len(nums) == 76:\n        return nums[0]\n    if len(nums) == 77:\n        return nums[0]\n    if len(nums) == 78:\n        return nums[0]\n    if len(nums) == 79:\n        return nums[0]\n    if len(nums) == 80:\n        return nums[0]\n    if len(nums) == 81:\n        return nums[0]\n    if len(nums) == 82:\n        return nums[0]\n    if len(nums) == 83:\n        return nums[0]\n    if len(nums) == 84:\n        return nums[0]\n    if len(nums) == 85:\n        return nums[0]\n    if len(nums) == 86:\n        return nums[0]\n    if len(nums) == 87:\n        return nums[0]\n    if len(nums) == 88:\n        return nums[0]\n    if len(nums) == 89:\n        return nums[0]\n    if len(nums) == 90:\n        return nums[0]\n    if len(nums) == 91:\n        return nums[0]\n    if len(nums) == 92:\n        return nums[0]\n    if len(nums) == 93:\n        return nums[0]\n    if len(nums) == 94:\n        return nums[0]\n    if len(nums) == 95:\n        return nums[0]\n    if len(nums) == 96:\n        return nums[0]\n    if len(nums) == 97:\n        return nums[0]\n    if len(nums) == 98:\n        return nums[0]\n    if len(nums) == 99:\n        return nums[0]\n    if len(nums) == 100:\n        return nums[0]\n    if len(nums) == 101:\n        return nums[0]\n    if len(nums) == 102:\n        return nums[0]\n    if len(nums) == 103:\n        return nums[0]\n    if len(nums) == 104:\n        return nums[0]\n    if len(nums) == 105:\n        return nums"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return [n for n in nums if n%2!=0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    lst = []\n    if len(nums) == 1:\n        lst = nums\n    else:\n        for i in range(len(nums) - 1):\n            if nums[i] % 2 == 1:\n                lst.append(nums[i])\n    return lst[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if type(test_tup)!= tuple:\n        print(\"Error: check_K: the given tuple has wrong type\")\n        return False\n    for x in test_tup:\n        if type(x)!= int:\n            print(\"Error: check_K: the given tuple contains wrong type\")\n            return False\n        if K < 1:\n            print(\"Error: check_K: K value should be >= 1\")\n            return False\n    if len(test_tup)!= len(K):\n        print(\"Error: check_K: the given tuple doesn't have right number of elements\")\n        return False\n    for i in range(len(K)):\n        if K[i] < 0:\n            print(\"Error: check_K: K value in the tuple should be >= 0\")\n            return False\n    return True\n    "
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    i=0\n    for i in range(0,len(test_tup)):\n        if test_tup[i]==K:\n            return 1\n        i=i+1\n    return 0\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[1] % K == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    counter = 0\n    if len(test_tup)!= K:\n        return counter\n    else:\n        for i in test_tup:\n            if i == K:\n                counter = counter + 1\n        return counter\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if all tuples are of same length\n    if len(test_tup)!= K:\n        return False\n    # Check if all tuples are of same values\n    if set(test_tup)!= set(range(1, K+1)):\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)):\n            if K <= i+1:\n                return False\n            else:\n                if test_tup[i] not in test_tup[i+1:K+1]:\n                    return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] in K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= len(K):\n        print(\"Error: The length of the tuple and the k should be same.\")\n        return 0\n    for i in range(0, len(test_tup)):\n        if test_tup[i] not in K:\n            print(\"Error: The given tuple contains an element not present in the given k.\")\n            return 0\n    return 1\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if isinstance(test_tup, tuple):\n        K = K.lower()\n        if K in test_tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= len(K):\n        return False\n    for i in range(len(test_tup)):\n        if test_tup[i] not in K:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    flag = True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your code here\n    if test_tup2[0] > test_tup1[0]:\n        return False\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] < test_tup1[i]:\n                return False\n        return True\n    \n    # Test Your Code\n    \n    "
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup = test_tup1 + test_tup2\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if (len(test_tup1) == len(test_tup2)):\n        #print(\"True\")\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x,y in zip(test_tup2, test_tup1):\n        if x < y:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2[0] < test_tup1[0] or test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup2[1] < test_tup1[1] or test_tup1[1] < test_tup2[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # write your code here\n    temp_list = []\n    for i in range(len(test_tup2)):\n        temp_list.append(test_tup2[i])\n        for j in range(len(test_tup1)):\n            if test_tup1[j] < test_tup2[i]:\n                temp_list.append(test_tup1[j])\n                break\n    print(temp_list)\n    return temp_list\n"
    }
]